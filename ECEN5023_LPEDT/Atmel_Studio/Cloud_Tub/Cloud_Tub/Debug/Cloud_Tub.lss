
Cloud_Tub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012870  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012870  00012870  00022870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000009c  20000000  00012878  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000473c  2000009c  00012914  0003009c  2**2
                  ALLOC
  4 .stack        00002000  200047d8  00017050  0003009c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000517c8  00000000  00000000  0003011d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006dec  00000000  00000000  000818e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009385  00000000  00000000  000886d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a50  00000000  00000000  00091a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001840  00000000  00000000  000934a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025ce2  00000000  00000000  00094ce6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00024873  00000000  00000000  000ba9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009c201  00000000  00000000  000df23b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00006764  00000000  00000000  0017b43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	200067d8 	.word	0x200067d8
       4:	0000a9f9 	.word	0x0000a9f9
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	0000aaf1 	.word	0x0000aaf1
       c:	0000de71 	.word	0x0000de71
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	0000ae59 	.word	0x0000ae59
	...
      38:	0000af81 	.word	0x0000af81
      3c:	0000afc9 	.word	0x0000afc9
      40:	0000aaf1 	.word	0x0000aaf1

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	0000aaf1 	.word	0x0000aaf1
      48:	0000aaf1 	.word	0x0000aaf1
      4c:	00007a41 	.word	0x00007a41
      50:	000074cd 	.word	0x000074cd
      54:	0000aaf1 	.word	0x0000aaf1
      58:	0000aaf1 	.word	0x0000aaf1
		if (time.hour == 0) {
      5c:	0000aaf1 	.word	0x0000aaf1
      60:	0000aaf1 	.word	0x0000aaf1
			time.hour = 12;
      64:	00008119 	.word	0x00008119
      68:	00008131 	.word	0x00008131
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	00008149 	.word	0x00008149
      70:	00008161 	.word	0x00008161
      74:	00008179 	.word	0x00008179
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	00008191 	.word	0x00008191
      7c:	0000a941 	.word	0x0000a941
      80:	0000a955 	.word	0x0000a955
      84:	0000a969 	.word	0x0000a969
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      88:	00000121 	.word	0x00000121
      8c:	00000135 	.word	0x00000135
      90:	00000149 	.word	0x00000149
	...
      9c:	000072f9 	.word	0x000072f9
      a0:	0000aaf1 	.word	0x0000aaf1
      a4:	0000aaf1 	.word	0x0000aaf1
			alarm.time.hour = alarm.time.hour % 12;
      a8:	0000aaf1 	.word	0x0000aaf1
      ac:	0000aaf1 	.word	0x0000aaf1
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	2000009c 	.word	0x2000009c
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	00012878 	.word	0x00012878

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a0 	.word	0x200000a0
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	00012878 	.word	0x00012878
     10c:	00012878 	.word	0x00012878
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
}
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
			time.hour = time.hour + 12;
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     120:	b580      	push	{r7, lr}
     122:	af00      	add	r7, sp, #0
     124:	2000      	movs	r0, #0
     126:	4b02      	ldr	r3, [pc, #8]	; (130 <TC3_Handler+0x10>)
     128:	4798      	blx	r3
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	46bd      	mov	sp, r7
     12e:	bd80      	pop	{r7, pc}
     130:	0000015d 	.word	0x0000015d

00000134 <TC4_Handler>:
     134:	b580      	push	{r7, lr}
     136:	af00      	add	r7, sp, #0
     138:	2001      	movs	r0, #1
     13a:	4b02      	ldr	r3, [pc, #8]	; (144 <TC4_Handler+0x10>)
     13c:	4798      	blx	r3
     13e:	46c0      	nop			; (mov r8, r8)
     140:	46bd      	mov	sp, r7
     142:	bd80      	pop	{r7, pc}
     144:	0000015d 	.word	0x0000015d

00000148 <TC5_Handler>:
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
     14c:	2002      	movs	r0, #2
     14e:	4b02      	ldr	r3, [pc, #8]	; (158 <TC5_Handler+0x10>)
     150:	4798      	blx	r3
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	bd80      	pop	{r7, pc}
     158:	0000015d 	.word	0x0000015d

0000015c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     15c:	b580      	push	{r7, lr}
     15e:	b084      	sub	sp, #16
     160:	af00      	add	r7, sp, #0
     162:	0002      	movs	r2, r0
     164:	1dfb      	adds	r3, r7, #7
     166:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     168:	1dfb      	adds	r3, r7, #7
     16a:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     16c:	4b28      	ldr	r3, [pc, #160]	; (210 <_tc_interrupt_handler+0xb4>)
     16e:	0092      	lsls	r2, r2, #2
     170:	58d3      	ldr	r3, [r2, r3]
     172:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     174:	68fb      	ldr	r3, [r7, #12]
     176:	681b      	ldr	r3, [r3, #0]
     178:	7b9b      	ldrb	r3, [r3, #14]
     17a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     17c:	68fa      	ldr	r2, [r7, #12]
     17e:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     180:	4013      	ands	r3, r2
     182:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
     184:	68fb      	ldr	r3, [r7, #12]
     186:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     188:	230b      	movs	r3, #11
     18a:	18fb      	adds	r3, r7, r3
     18c:	400a      	ands	r2, r1
     18e:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     190:	230b      	movs	r3, #11
     192:	18fb      	adds	r3, r7, r3
     194:	781b      	ldrb	r3, [r3, #0]
     196:	2201      	movs	r2, #1
     198:	4013      	ands	r3, r2
     19a:	d008      	beq.n	1ae <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     19c:	68fb      	ldr	r3, [r7, #12]
     19e:	689b      	ldr	r3, [r3, #8]
     1a0:	68fa      	ldr	r2, [r7, #12]
     1a2:	0010      	movs	r0, r2
     1a4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     1a6:	68fb      	ldr	r3, [r7, #12]
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	2201      	movs	r2, #1
     1ac:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     1ae:	230b      	movs	r3, #11
     1b0:	18fb      	adds	r3, r7, r3
     1b2:	781b      	ldrb	r3, [r3, #0]
     1b4:	2202      	movs	r2, #2
     1b6:	4013      	ands	r3, r2
     1b8:	d008      	beq.n	1cc <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     1ba:	68fb      	ldr	r3, [r7, #12]
     1bc:	68db      	ldr	r3, [r3, #12]
     1be:	68fa      	ldr	r2, [r7, #12]
     1c0:	0010      	movs	r0, r2
     1c2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     1c4:	68fb      	ldr	r3, [r7, #12]
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	2202      	movs	r2, #2
     1ca:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     1cc:	230b      	movs	r3, #11
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2210      	movs	r2, #16
     1d4:	4013      	ands	r3, r2
     1d6:	d008      	beq.n	1ea <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	691b      	ldr	r3, [r3, #16]
     1dc:	68fa      	ldr	r2, [r7, #12]
     1de:	0010      	movs	r0, r2
     1e0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     1e2:	68fb      	ldr	r3, [r7, #12]
     1e4:	681b      	ldr	r3, [r3, #0]
     1e6:	2210      	movs	r2, #16
     1e8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     1ea:	230b      	movs	r3, #11
     1ec:	18fb      	adds	r3, r7, r3
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2220      	movs	r2, #32
     1f2:	4013      	ands	r3, r2
     1f4:	d008      	beq.n	208 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     1f6:	68fb      	ldr	r3, [r7, #12]
     1f8:	695b      	ldr	r3, [r3, #20]
     1fa:	68fa      	ldr	r2, [r7, #12]
     1fc:	0010      	movs	r0, r2
     1fe:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     200:	68fb      	ldr	r3, [r7, #12]
     202:	681b      	ldr	r3, [r3, #0]
     204:	2220      	movs	r2, #32
     206:	739a      	strb	r2, [r3, #14]
	}
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	b004      	add	sp, #16
     20e:	bd80      	pop	{r7, pc}
     210:	200045b0 	.word	0x200045b0

00000214 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     214:	b580      	push	{r7, lr}
     216:	b082      	sub	sp, #8
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	2200      	movs	r2, #0
     220:	701a      	strb	r2, [r3, #0]
}
     222:	46c0      	nop			; (mov r8, r8)
     224:	46bd      	mov	sp, r7
     226:	b002      	add	sp, #8
     228:	bd80      	pop	{r7, pc}
     22a:	46c0      	nop			; (mov r8, r8)

0000022c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     22c:	b580      	push	{r7, lr}
     22e:	b082      	sub	sp, #8
     230:	af00      	add	r7, sp, #0
     232:	0002      	movs	r2, r0
     234:	6039      	str	r1, [r7, #0]
     236:	1dfb      	adds	r3, r7, #7
     238:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     23a:	1dfb      	adds	r3, r7, #7
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	2b01      	cmp	r3, #1
     240:	d00a      	beq.n	258 <system_apb_clock_set_mask+0x2c>
     242:	2b02      	cmp	r3, #2
     244:	d00f      	beq.n	266 <system_apb_clock_set_mask+0x3a>
     246:	2b00      	cmp	r3, #0
     248:	d114      	bne.n	274 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     24a:	4b0e      	ldr	r3, [pc, #56]	; (284 <system_apb_clock_set_mask+0x58>)
     24c:	4a0d      	ldr	r2, [pc, #52]	; (284 <system_apb_clock_set_mask+0x58>)
     24e:	6991      	ldr	r1, [r2, #24]
     250:	683a      	ldr	r2, [r7, #0]
     252:	430a      	orrs	r2, r1
     254:	619a      	str	r2, [r3, #24]
			break;
     256:	e00f      	b.n	278 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     258:	4b0a      	ldr	r3, [pc, #40]	; (284 <system_apb_clock_set_mask+0x58>)
     25a:	4a0a      	ldr	r2, [pc, #40]	; (284 <system_apb_clock_set_mask+0x58>)
     25c:	69d1      	ldr	r1, [r2, #28]
     25e:	683a      	ldr	r2, [r7, #0]
     260:	430a      	orrs	r2, r1
     262:	61da      	str	r2, [r3, #28]
			break;
     264:	e008      	b.n	278 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     266:	4b07      	ldr	r3, [pc, #28]	; (284 <system_apb_clock_set_mask+0x58>)
     268:	4a06      	ldr	r2, [pc, #24]	; (284 <system_apb_clock_set_mask+0x58>)
     26a:	6a11      	ldr	r1, [r2, #32]
     26c:	683a      	ldr	r2, [r7, #0]
     26e:	430a      	orrs	r2, r1
     270:	621a      	str	r2, [r3, #32]
			break;
     272:	e001      	b.n	278 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     274:	2317      	movs	r3, #23
     276:	e000      	b.n	27a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     278:	2300      	movs	r3, #0
}
     27a:	0018      	movs	r0, r3
     27c:	46bd      	mov	sp, r7
     27e:	b002      	add	sp, #8
     280:	bd80      	pop	{r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	40000400 	.word	0x40000400

00000288 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     288:	b580      	push	{r7, lr}
     28a:	b082      	sub	sp, #8
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2280      	movs	r2, #128	; 0x80
     294:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     296:	687b      	ldr	r3, [r7, #4]
     298:	2200      	movs	r2, #0
     29a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	2201      	movs	r2, #1
     2a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	2200      	movs	r2, #0
     2a6:	70da      	strb	r2, [r3, #3]
}
     2a8:	46c0      	nop			; (mov r8, r8)
     2aa:	46bd      	mov	sp, r7
     2ac:	b002      	add	sp, #8
     2ae:	bd80      	pop	{r7, pc}

000002b0 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     2b0:	b580      	push	{r7, lr}
     2b2:	b084      	sub	sp, #16
     2b4:	af00      	add	r7, sp, #0
     2b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2be:	68fb      	ldr	r3, [r7, #12]
     2c0:	7bdb      	ldrb	r3, [r3, #15]
     2c2:	b2db      	uxtb	r3, r3
     2c4:	001a      	movs	r2, r3
     2c6:	2380      	movs	r3, #128	; 0x80
     2c8:	4013      	ands	r3, r2
     2ca:	1e5a      	subs	r2, r3, #1
     2cc:	4193      	sbcs	r3, r2
     2ce:	b2db      	uxtb	r3, r3
#endif
}
     2d0:	0018      	movs	r0, r3
     2d2:	46bd      	mov	sp, r7
     2d4:	b004      	add	sp, #16
     2d6:	bd80      	pop	{r7, pc}

000002d8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     2d8:	b590      	push	{r4, r7, lr}
     2da:	b087      	sub	sp, #28
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     2e0:	2308      	movs	r3, #8
     2e2:	18fb      	adds	r3, r7, r3
     2e4:	4a0d      	ldr	r2, [pc, #52]	; (31c <_tc_get_inst_index+0x44>)
     2e6:	ca13      	ldmia	r2!, {r0, r1, r4}
     2e8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     2ea:	2300      	movs	r3, #0
     2ec:	617b      	str	r3, [r7, #20]
     2ee:	e00d      	b.n	30c <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
     2f0:	2308      	movs	r3, #8
     2f2:	18fb      	adds	r3, r7, r3
     2f4:	697a      	ldr	r2, [r7, #20]
     2f6:	0092      	lsls	r2, r2, #2
     2f8:	58d2      	ldr	r2, [r2, r3]
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	429a      	cmp	r2, r3
     2fe:	d102      	bne.n	306 <_tc_get_inst_index+0x2e>
			return i;
     300:	697b      	ldr	r3, [r7, #20]
     302:	b2db      	uxtb	r3, r3
     304:	e006      	b.n	314 <_tc_get_inst_index+0x3c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     306:	697b      	ldr	r3, [r7, #20]
     308:	3301      	adds	r3, #1
     30a:	617b      	str	r3, [r7, #20]
     30c:	697b      	ldr	r3, [r7, #20]
     30e:	2b02      	cmp	r3, #2
     310:	d9ee      	bls.n	2f0 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     312:	2300      	movs	r3, #0
}
     314:	0018      	movs	r0, r3
     316:	46bd      	mov	sp, r7
     318:	b007      	add	sp, #28
     31a:	bd90      	pop	{r4, r7, pc}
     31c:	00010f08 	.word	0x00010f08

00000320 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     320:	b590      	push	{r4, r7, lr}
     322:	b08d      	sub	sp, #52	; 0x34
     324:	af00      	add	r7, sp, #0
     326:	60f8      	str	r0, [r7, #12]
     328:	60b9      	str	r1, [r7, #8]
     32a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
     32c:	232e      	movs	r3, #46	; 0x2e
     32e:	18fb      	adds	r3, r7, r3
     330:	2200      	movs	r2, #0
     332:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     334:	232d      	movs	r3, #45	; 0x2d
     336:	18fb      	adds	r3, r7, r3
     338:	2200      	movs	r2, #0
     33a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
     33c:	232c      	movs	r3, #44	; 0x2c
     33e:	18fb      	adds	r3, r7, r3
     340:	2200      	movs	r2, #0
     342:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     344:	2329      	movs	r3, #41	; 0x29
     346:	18fc      	adds	r4, r7, r3
     348:	68bb      	ldr	r3, [r7, #8]
     34a:	0018      	movs	r0, r3
     34c:	4bbf      	ldr	r3, [pc, #764]	; (64c <tc_init+0x32c>)
     34e:	4798      	blx	r3
     350:	0003      	movs	r3, r0
     352:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     354:	2324      	movs	r3, #36	; 0x24
     356:	18fa      	adds	r2, r7, r3
     358:	4bbd      	ldr	r3, [pc, #756]	; (650 <tc_init+0x330>)
     35a:	0010      	movs	r0, r2
     35c:	0019      	movs	r1, r3
     35e:	2303      	movs	r3, #3
     360:	001a      	movs	r2, r3
     362:	4bbc      	ldr	r3, [pc, #752]	; (654 <tc_init+0x334>)
     364:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     366:	231c      	movs	r3, #28
     368:	18fa      	adds	r2, r7, r3
     36a:	4bbb      	ldr	r3, [pc, #748]	; (658 <tc_init+0x338>)
     36c:	0010      	movs	r0, r2
     36e:	0019      	movs	r1, r3
     370:	2306      	movs	r3, #6
     372:	001a      	movs	r2, r3
     374:	4bb7      	ldr	r3, [pc, #732]	; (654 <tc_init+0x334>)
     376:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     378:	232b      	movs	r3, #43	; 0x2b
     37a:	18fb      	adds	r3, r7, r3
     37c:	2200      	movs	r2, #0
     37e:	701a      	strb	r2, [r3, #0]
     380:	e00e      	b.n	3a0 <tc_init+0x80>
		module_inst->callback[i]        = NULL;
     382:	232b      	movs	r3, #43	; 0x2b
     384:	18fb      	adds	r3, r7, r3
     386:	781a      	ldrb	r2, [r3, #0]
     388:	68fb      	ldr	r3, [r7, #12]
     38a:	3202      	adds	r2, #2
     38c:	0092      	lsls	r2, r2, #2
     38e:	2100      	movs	r1, #0
     390:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     392:	232b      	movs	r3, #43	; 0x2b
     394:	18fb      	adds	r3, r7, r3
     396:	781a      	ldrb	r2, [r3, #0]
     398:	232b      	movs	r3, #43	; 0x2b
     39a:	18fb      	adds	r3, r7, r3
     39c:	3201      	adds	r2, #1
     39e:	701a      	strb	r2, [r3, #0]
     3a0:	232b      	movs	r3, #43	; 0x2b
     3a2:	18fb      	adds	r3, r7, r3
     3a4:	781b      	ldrb	r3, [r3, #0]
     3a6:	2b03      	cmp	r3, #3
     3a8:	d9eb      	bls.n	382 <tc_init+0x62>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
     3aa:	68fb      	ldr	r3, [r7, #12]
     3ac:	2200      	movs	r2, #0
     3ae:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
     3b0:	68fb      	ldr	r3, [r7, #12]
     3b2:	2200      	movs	r2, #0
     3b4:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     3b6:	2329      	movs	r3, #41	; 0x29
     3b8:	18fb      	adds	r3, r7, r3
     3ba:	781a      	ldrb	r2, [r3, #0]
     3bc:	4ba7      	ldr	r3, [pc, #668]	; (65c <tc_init+0x33c>)
     3be:	0092      	lsls	r2, r2, #2
     3c0:	68f9      	ldr	r1, [r7, #12]
     3c2:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     3c4:	68fb      	ldr	r3, [r7, #12]
     3c6:	68ba      	ldr	r2, [r7, #8]
     3c8:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	789b      	ldrb	r3, [r3, #2]
     3ce:	2b08      	cmp	r3, #8
     3d0:	d108      	bne.n	3e4 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
     3d2:	2329      	movs	r3, #41	; 0x29
     3d4:	18fb      	adds	r3, r7, r3
     3d6:	781b      	ldrb	r3, [r3, #0]
     3d8:	3303      	adds	r3, #3
     3da:	2201      	movs	r2, #1
     3dc:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     3de:	d001      	beq.n	3e4 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     3e0:	2317      	movs	r3, #23
     3e2:	e1c4      	b.n	76e <tc_init+0x44e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	789a      	ldrb	r2, [r3, #2]
     3e8:	68fb      	ldr	r3, [r7, #12]
     3ea:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     3ec:	68bb      	ldr	r3, [r7, #8]
     3ee:	881b      	ldrh	r3, [r3, #0]
     3f0:	b29b      	uxth	r3, r3
     3f2:	001a      	movs	r2, r3
     3f4:	2301      	movs	r3, #1
     3f6:	4013      	ands	r3, r2
     3f8:	d001      	beq.n	3fe <tc_init+0xde>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     3fa:	2305      	movs	r3, #5
     3fc:	e1b7      	b.n	76e <tc_init+0x44e>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     3fe:	68bb      	ldr	r3, [r7, #8]
     400:	7bdb      	ldrb	r3, [r3, #15]
     402:	b2db      	uxtb	r3, r3
     404:	001a      	movs	r2, r3
     406:	2310      	movs	r3, #16
     408:	4013      	ands	r3, r2
     40a:	d001      	beq.n	410 <tc_init+0xf0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     40c:	231c      	movs	r3, #28
     40e:	e1ae      	b.n	76e <tc_init+0x44e>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     410:	68bb      	ldr	r3, [r7, #8]
     412:	881b      	ldrh	r3, [r3, #0]
     414:	b29b      	uxth	r3, r3
     416:	001a      	movs	r2, r3
     418:	2302      	movs	r3, #2
     41a:	4013      	ands	r3, r2
     41c:	d001      	beq.n	422 <tc_init+0x102>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     41e:	231c      	movs	r3, #28
     420:	e1a5      	b.n	76e <tc_init+0x44e>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     422:	687b      	ldr	r3, [r7, #4]
     424:	7c1b      	ldrb	r3, [r3, #16]
     426:	2b00      	cmp	r3, #0
     428:	d017      	beq.n	45a <tc_init+0x13a>
		system_pinmux_get_config_defaults(&pin_config);
     42a:	2318      	movs	r3, #24
     42c:	18fb      	adds	r3, r7, r3
     42e:	0018      	movs	r0, r3
     430:	4b8b      	ldr	r3, [pc, #556]	; (660 <tc_init+0x340>)
     432:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     434:	687b      	ldr	r3, [r7, #4]
     436:	699b      	ldr	r3, [r3, #24]
     438:	b2da      	uxtb	r2, r3
     43a:	2318      	movs	r3, #24
     43c:	18fb      	adds	r3, r7, r3
     43e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     440:	2318      	movs	r3, #24
     442:	18fb      	adds	r3, r7, r3
     444:	2201      	movs	r2, #1
     446:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
     448:	687b      	ldr	r3, [r7, #4]
     44a:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     44c:	b2db      	uxtb	r3, r3
     44e:	2218      	movs	r2, #24
     450:	18ba      	adds	r2, r7, r2
     452:	0011      	movs	r1, r2
     454:	0018      	movs	r0, r3
     456:	4b83      	ldr	r3, [pc, #524]	; (664 <tc_init+0x344>)
     458:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	7f1b      	ldrb	r3, [r3, #28]
     45e:	2b00      	cmp	r3, #0
     460:	d017      	beq.n	492 <tc_init+0x172>
		system_pinmux_get_config_defaults(&pin_config);
     462:	2318      	movs	r3, #24
     464:	18fb      	adds	r3, r7, r3
     466:	0018      	movs	r0, r3
     468:	4b7d      	ldr	r3, [pc, #500]	; (660 <tc_init+0x340>)
     46a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     470:	b2da      	uxtb	r2, r3
     472:	2318      	movs	r3, #24
     474:	18fb      	adds	r3, r7, r3
     476:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     478:	2318      	movs	r3, #24
     47a:	18fb      	adds	r3, r7, r3
     47c:	2201      	movs	r2, #1
     47e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
     480:	687b      	ldr	r3, [r7, #4]
     482:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     484:	b2db      	uxtb	r3, r3
     486:	2218      	movs	r2, #24
     488:	18ba      	adds	r2, r7, r2
     48a:	0011      	movs	r1, r2
     48c:	0018      	movs	r0, r3
     48e:	4b75      	ldr	r3, [pc, #468]	; (664 <tc_init+0x344>)
     490:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     492:	2329      	movs	r3, #41	; 0x29
     494:	18fb      	adds	r3, r7, r3
     496:	781a      	ldrb	r2, [r3, #0]
     498:	231c      	movs	r3, #28
     49a:	18fb      	adds	r3, r7, r3
     49c:	0052      	lsls	r2, r2, #1
     49e:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     4a0:	0019      	movs	r1, r3
     4a2:	2002      	movs	r0, #2
     4a4:	4b70      	ldr	r3, [pc, #448]	; (668 <tc_init+0x348>)
     4a6:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	789b      	ldrb	r3, [r3, #2]
     4ac:	2b08      	cmp	r3, #8
     4ae:	d10b      	bne.n	4c8 <tc_init+0x1a8>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     4b0:	2329      	movs	r3, #41	; 0x29
     4b2:	18fb      	adds	r3, r7, r3
     4b4:	781b      	ldrb	r3, [r3, #0]
     4b6:	1c5a      	adds	r2, r3, #1
     4b8:	231c      	movs	r3, #28
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	0052      	lsls	r2, r2, #1
     4be:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     4c0:	0019      	movs	r1, r3
     4c2:	2002      	movs	r0, #2
     4c4:	4b68      	ldr	r3, [pc, #416]	; (668 <tc_init+0x348>)
     4c6:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
     4c8:	2314      	movs	r3, #20
     4ca:	18fb      	adds	r3, r7, r3
     4cc:	0018      	movs	r0, r3
     4ce:	4b67      	ldr	r3, [pc, #412]	; (66c <tc_init+0x34c>)
     4d0:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	781a      	ldrb	r2, [r3, #0]
     4d6:	2314      	movs	r3, #20
     4d8:	18fb      	adds	r3, r7, r3
     4da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     4dc:	2329      	movs	r3, #41	; 0x29
     4de:	18fb      	adds	r3, r7, r3
     4e0:	781b      	ldrb	r3, [r3, #0]
     4e2:	2224      	movs	r2, #36	; 0x24
     4e4:	18ba      	adds	r2, r7, r2
     4e6:	5cd3      	ldrb	r3, [r2, r3]
     4e8:	2214      	movs	r2, #20
     4ea:	18ba      	adds	r2, r7, r2
     4ec:	0011      	movs	r1, r2
     4ee:	0018      	movs	r0, r3
     4f0:	4b5f      	ldr	r3, [pc, #380]	; (670 <tc_init+0x350>)
     4f2:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     4f4:	2329      	movs	r3, #41	; 0x29
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	781b      	ldrb	r3, [r3, #0]
     4fa:	2224      	movs	r2, #36	; 0x24
     4fc:	18ba      	adds	r2, r7, r2
     4fe:	5cd3      	ldrb	r3, [r2, r3]
     500:	0018      	movs	r0, r3
     502:	4b5c      	ldr	r3, [pc, #368]	; (674 <tc_init+0x354>)
     504:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
     506:	687b      	ldr	r3, [r7, #4]
     508:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     50e:	4313      	orrs	r3, r2
     510:	b2db      	uxtb	r3, r3
     512:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
     514:	687b      	ldr	r3, [r7, #4]
     516:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     518:	4313      	orrs	r3, r2
     51a:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     520:	232e      	movs	r3, #46	; 0x2e
     522:	18fb      	adds	r3, r7, r3
     524:	430a      	orrs	r2, r1
     526:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     528:	687b      	ldr	r3, [r7, #4]
     52a:	785b      	ldrb	r3, [r3, #1]
     52c:	2b00      	cmp	r3, #0
     52e:	d008      	beq.n	542 <tc_init+0x222>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     530:	232e      	movs	r3, #46	; 0x2e
     532:	18fb      	adds	r3, r7, r3
     534:	222e      	movs	r2, #46	; 0x2e
     536:	18ba      	adds	r2, r7, r2
     538:	8812      	ldrh	r2, [r2, #0]
     53a:	2180      	movs	r1, #128	; 0x80
     53c:	0109      	lsls	r1, r1, #4
     53e:	430a      	orrs	r2, r1
     540:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     542:	46c0      	nop			; (mov r8, r8)
     544:	68fb      	ldr	r3, [r7, #12]
     546:	0018      	movs	r0, r3
     548:	4b4b      	ldr	r3, [pc, #300]	; (678 <tc_init+0x358>)
     54a:	4798      	blx	r3
     54c:	1e03      	subs	r3, r0, #0
     54e:	d1f9      	bne.n	544 <tc_init+0x224>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     550:	68bb      	ldr	r3, [r7, #8]
     552:	222e      	movs	r2, #46	; 0x2e
     554:	18ba      	adds	r2, r7, r2
     556:	8812      	ldrh	r2, [r2, #0]
     558:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	7b5b      	ldrb	r3, [r3, #13]
     55e:	2b00      	cmp	r3, #0
     560:	d003      	beq.n	56a <tc_init+0x24a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     562:	232d      	movs	r3, #45	; 0x2d
     564:	18fb      	adds	r3, r7, r3
     566:	2204      	movs	r2, #4
     568:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	7b9b      	ldrb	r3, [r3, #14]
     56e:	2b00      	cmp	r3, #0
     570:	d007      	beq.n	582 <tc_init+0x262>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     572:	232d      	movs	r3, #45	; 0x2d
     574:	18fb      	adds	r3, r7, r3
     576:	222d      	movs	r2, #45	; 0x2d
     578:	18ba      	adds	r2, r7, r2
     57a:	7812      	ldrb	r2, [r2, #0]
     57c:	2101      	movs	r1, #1
     57e:	430a      	orrs	r2, r1
     580:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     582:	46c0      	nop			; (mov r8, r8)
     584:	68fb      	ldr	r3, [r7, #12]
     586:	0018      	movs	r0, r3
     588:	4b3b      	ldr	r3, [pc, #236]	; (678 <tc_init+0x358>)
     58a:	4798      	blx	r3
     58c:	1e03      	subs	r3, r0, #0
     58e:	d1f9      	bne.n	584 <tc_init+0x264>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     590:	68bb      	ldr	r3, [r7, #8]
     592:	22ff      	movs	r2, #255	; 0xff
     594:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     596:	232d      	movs	r3, #45	; 0x2d
     598:	18fb      	adds	r3, r7, r3
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d00b      	beq.n	5b8 <tc_init+0x298>
		while (tc_is_syncing(module_inst)) {
     5a0:	46c0      	nop			; (mov r8, r8)
     5a2:	68fb      	ldr	r3, [r7, #12]
     5a4:	0018      	movs	r0, r3
     5a6:	4b34      	ldr	r3, [pc, #208]	; (678 <tc_init+0x358>)
     5a8:	4798      	blx	r3
     5aa:	1e03      	subs	r3, r0, #0
     5ac:	d1f9      	bne.n	5a2 <tc_init+0x282>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     5ae:	68bb      	ldr	r3, [r7, #8]
     5b0:	222d      	movs	r2, #45	; 0x2d
     5b2:	18ba      	adds	r2, r7, r2
     5b4:	7812      	ldrb	r2, [r2, #0]
     5b6:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     5b8:	232c      	movs	r3, #44	; 0x2c
     5ba:	18fb      	adds	r3, r7, r3
     5bc:	687a      	ldr	r2, [r7, #4]
     5be:	7a92      	ldrb	r2, [r2, #10]
     5c0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     5c2:	232a      	movs	r3, #42	; 0x2a
     5c4:	18fb      	adds	r3, r7, r3
     5c6:	2200      	movs	r2, #0
     5c8:	701a      	strb	r2, [r3, #0]
     5ca:	e01c      	b.n	606 <tc_init+0x2e6>
		if (config->enable_capture_on_channel[i] == true) {
     5cc:	232a      	movs	r3, #42	; 0x2a
     5ce:	18fb      	adds	r3, r7, r3
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	687a      	ldr	r2, [r7, #4]
     5d4:	18d3      	adds	r3, r2, r3
     5d6:	7adb      	ldrb	r3, [r3, #11]
     5d8:	2b00      	cmp	r3, #0
     5da:	d00d      	beq.n	5f8 <tc_init+0x2d8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     5dc:	232a      	movs	r3, #42	; 0x2a
     5de:	18fb      	adds	r3, r7, r3
     5e0:	781b      	ldrb	r3, [r3, #0]
     5e2:	2210      	movs	r2, #16
     5e4:	409a      	lsls	r2, r3
     5e6:	0013      	movs	r3, r2
     5e8:	b2d9      	uxtb	r1, r3
     5ea:	232c      	movs	r3, #44	; 0x2c
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	222c      	movs	r2, #44	; 0x2c
     5f0:	18ba      	adds	r2, r7, r2
     5f2:	7812      	ldrb	r2, [r2, #0]
     5f4:	430a      	orrs	r2, r1
     5f6:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     5f8:	232a      	movs	r3, #42	; 0x2a
     5fa:	18fb      	adds	r3, r7, r3
     5fc:	781a      	ldrb	r2, [r3, #0]
     5fe:	232a      	movs	r3, #42	; 0x2a
     600:	18fb      	adds	r3, r7, r3
     602:	3201      	adds	r2, #1
     604:	701a      	strb	r2, [r3, #0]
     606:	232a      	movs	r3, #42	; 0x2a
     608:	18fb      	adds	r3, r7, r3
     60a:	781b      	ldrb	r3, [r3, #0]
     60c:	2b01      	cmp	r3, #1
     60e:	d9dd      	bls.n	5cc <tc_init+0x2ac>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     610:	46c0      	nop			; (mov r8, r8)
     612:	68fb      	ldr	r3, [r7, #12]
     614:	0018      	movs	r0, r3
     616:	4b18      	ldr	r3, [pc, #96]	; (678 <tc_init+0x358>)
     618:	4798      	blx	r3
     61a:	1e03      	subs	r3, r0, #0
     61c:	d1f9      	bne.n	612 <tc_init+0x2f2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     61e:	68bb      	ldr	r3, [r7, #8]
     620:	222c      	movs	r2, #44	; 0x2c
     622:	18ba      	adds	r2, r7, r2
     624:	7812      	ldrb	r2, [r2, #0]
     626:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     628:	46c0      	nop			; (mov r8, r8)
     62a:	68fb      	ldr	r3, [r7, #12]
     62c:	0018      	movs	r0, r3
     62e:	4b12      	ldr	r3, [pc, #72]	; (678 <tc_init+0x358>)
     630:	4798      	blx	r3
     632:	1e03      	subs	r3, r0, #0
     634:	d1f9      	bne.n	62a <tc_init+0x30a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     636:	68fb      	ldr	r3, [r7, #12]
     638:	791b      	ldrb	r3, [r3, #4]
     63a:	2b04      	cmp	r3, #4
     63c:	d01e      	beq.n	67c <tc_init+0x35c>
     63e:	2b08      	cmp	r3, #8
     640:	d100      	bne.n	644 <tc_init+0x324>
     642:	e070      	b.n	726 <tc_init+0x406>
     644:	2b00      	cmp	r3, #0
     646:	d04b      	beq.n	6e0 <tc_init+0x3c0>
     648:	e090      	b.n	76c <tc_init+0x44c>
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	000002d9 	.word	0x000002d9
     650:	00010f14 	.word	0x00010f14
     654:	0000f769 	.word	0x0000f769
     658:	00010f18 	.word	0x00010f18
     65c:	200045b0 	.word	0x200045b0
     660:	00000289 	.word	0x00000289
     664:	0000a8b9 	.word	0x0000a8b9
     668:	0000022d 	.word	0x0000022d
     66c:	00000215 	.word	0x00000215
     670:	0000a5cd 	.word	0x0000a5cd
     674:	0000a611 	.word	0x0000a611
     678:	000002b1 	.word	0x000002b1
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     67c:	46c0      	nop			; (mov r8, r8)
     67e:	68fb      	ldr	r3, [r7, #12]
     680:	0018      	movs	r0, r3
     682:	4b3d      	ldr	r3, [pc, #244]	; (778 <tc_init+0x458>)
     684:	4798      	blx	r3
     686:	1e03      	subs	r3, r0, #0
     688:	d1f9      	bne.n	67e <tc_init+0x35e>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	2228      	movs	r2, #40	; 0x28
     68e:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     690:	68bb      	ldr	r3, [r7, #8]
     692:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     694:	46c0      	nop			; (mov r8, r8)
     696:	68fb      	ldr	r3, [r7, #12]
     698:	0018      	movs	r0, r3
     69a:	4b37      	ldr	r3, [pc, #220]	; (778 <tc_init+0x458>)
     69c:	4798      	blx	r3
     69e:	1e03      	subs	r3, r0, #0
     6a0:	d1f9      	bne.n	696 <tc_init+0x376>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	2229      	movs	r2, #41	; 0x29
     6a6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     6a8:	68bb      	ldr	r3, [r7, #8]
     6aa:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     6ac:	46c0      	nop			; (mov r8, r8)
     6ae:	68fb      	ldr	r3, [r7, #12]
     6b0:	0018      	movs	r0, r3
     6b2:	4b31      	ldr	r3, [pc, #196]	; (778 <tc_init+0x458>)
     6b4:	4798      	blx	r3
     6b6:	1e03      	subs	r3, r0, #0
     6b8:	d1f9      	bne.n	6ae <tc_init+0x38e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	222a      	movs	r2, #42	; 0x2a
     6be:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     6c0:	68bb      	ldr	r3, [r7, #8]
     6c2:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	68fb      	ldr	r3, [r7, #12]
     6c8:	0018      	movs	r0, r3
     6ca:	4b2b      	ldr	r3, [pc, #172]	; (778 <tc_init+0x458>)
     6cc:	4798      	blx	r3
     6ce:	1e03      	subs	r3, r0, #0
     6d0:	d1f9      	bne.n	6c6 <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	222b      	movs	r2, #43	; 0x2b
     6d6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     6d8:	68bb      	ldr	r3, [r7, #8]
     6da:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     6dc:	2300      	movs	r3, #0
     6de:	e046      	b.n	76e <tc_init+0x44e>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     6e0:	46c0      	nop			; (mov r8, r8)
     6e2:	68fb      	ldr	r3, [r7, #12]
     6e4:	0018      	movs	r0, r3
     6e6:	4b24      	ldr	r3, [pc, #144]	; (778 <tc_init+0x458>)
     6e8:	4798      	blx	r3
     6ea:	1e03      	subs	r3, r0, #0
     6ec:	d1f9      	bne.n	6e2 <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
     6f2:	68bb      	ldr	r3, [r7, #8]
     6f4:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	68fb      	ldr	r3, [r7, #12]
     6fa:	0018      	movs	r0, r3
     6fc:	4b1e      	ldr	r3, [pc, #120]	; (778 <tc_init+0x458>)
     6fe:	4798      	blx	r3
     700:	1e03      	subs	r3, r0, #0
     702:	d1f9      	bne.n	6f8 <tc_init+0x3d8>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     704:	687b      	ldr	r3, [r7, #4]
     706:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     708:	68bb      	ldr	r3, [r7, #8]
     70a:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     70c:	46c0      	nop			; (mov r8, r8)
     70e:	68fb      	ldr	r3, [r7, #12]
     710:	0018      	movs	r0, r3
     712:	4b19      	ldr	r3, [pc, #100]	; (778 <tc_init+0x458>)
     714:	4798      	blx	r3
     716:	1e03      	subs	r3, r0, #0
     718:	d1f9      	bne.n	70e <tc_init+0x3ee>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     71e:	68bb      	ldr	r3, [r7, #8]
     720:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     722:	2300      	movs	r3, #0
     724:	e023      	b.n	76e <tc_init+0x44e>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     726:	46c0      	nop			; (mov r8, r8)
     728:	68fb      	ldr	r3, [r7, #12]
     72a:	0018      	movs	r0, r3
     72c:	4b12      	ldr	r3, [pc, #72]	; (778 <tc_init+0x458>)
     72e:	4798      	blx	r3
     730:	1e03      	subs	r3, r0, #0
     732:	d1f9      	bne.n	728 <tc_init+0x408>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     734:	687b      	ldr	r3, [r7, #4]
     736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     738:	68bb      	ldr	r3, [r7, #8]
     73a:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     73c:	46c0      	nop			; (mov r8, r8)
     73e:	68fb      	ldr	r3, [r7, #12]
     740:	0018      	movs	r0, r3
     742:	4b0d      	ldr	r3, [pc, #52]	; (778 <tc_init+0x458>)
     744:	4798      	blx	r3
     746:	1e03      	subs	r3, r0, #0
     748:	d1f9      	bne.n	73e <tc_init+0x41e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     74e:	68bb      	ldr	r3, [r7, #8]
     750:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     752:	46c0      	nop			; (mov r8, r8)
     754:	68fb      	ldr	r3, [r7, #12]
     756:	0018      	movs	r0, r3
     758:	4b07      	ldr	r3, [pc, #28]	; (778 <tc_init+0x458>)
     75a:	4798      	blx	r3
     75c:	1e03      	subs	r3, r0, #0
     75e:	d1f9      	bne.n	754 <tc_init+0x434>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     760:	687b      	ldr	r3, [r7, #4]
     762:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     764:	68bb      	ldr	r3, [r7, #8]
     766:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     768:	2300      	movs	r3, #0
     76a:	e000      	b.n	76e <tc_init+0x44e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     76c:	2317      	movs	r3, #23
}
     76e:	0018      	movs	r0, r3
     770:	46bd      	mov	sp, r7
     772:	b00d      	add	sp, #52	; 0x34
     774:	bd90      	pop	{r4, r7, pc}
     776:	46c0      	nop			; (mov r8, r8)
     778:	000002b1 	.word	0x000002b1

0000077c <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
     77c:	b580      	push	{r7, lr}
     77e:	b084      	sub	sp, #16
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
     784:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
     786:	687b      	ldr	r3, [r7, #4]
     788:	681b      	ldr	r3, [r3, #0]
     78a:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     78c:	46c0      	nop			; (mov r8, r8)
     78e:	687b      	ldr	r3, [r7, #4]
     790:	0018      	movs	r0, r3
     792:	4b11      	ldr	r3, [pc, #68]	; (7d8 <tc_set_count_value+0x5c>)
     794:	4798      	blx	r3
     796:	1e03      	subs	r3, r0, #0
     798:	d1f9      	bne.n	78e <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	791b      	ldrb	r3, [r3, #4]
     79e:	2b04      	cmp	r3, #4
     7a0:	d004      	beq.n	7ac <tc_set_count_value+0x30>
     7a2:	2b08      	cmp	r3, #8
     7a4:	d00e      	beq.n	7c4 <tc_set_count_value+0x48>
     7a6:	2b00      	cmp	r3, #0
     7a8:	d006      	beq.n	7b8 <tc_set_count_value+0x3c>
     7aa:	e010      	b.n	7ce <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
     7ac:	683b      	ldr	r3, [r7, #0]
     7ae:	b2da      	uxtb	r2, r3
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	741a      	strb	r2, [r3, #16]
			return STATUS_OK;
     7b4:	2300      	movs	r3, #0
     7b6:	e00b      	b.n	7d0 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
     7b8:	683b      	ldr	r3, [r7, #0]
     7ba:	b29a      	uxth	r2, r3
     7bc:	68fb      	ldr	r3, [r7, #12]
     7be:	821a      	strh	r2, [r3, #16]
			return STATUS_OK;
     7c0:	2300      	movs	r3, #0
     7c2:	e005      	b.n	7d0 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
     7c4:	68fb      	ldr	r3, [r7, #12]
     7c6:	683a      	ldr	r2, [r7, #0]
     7c8:	611a      	str	r2, [r3, #16]
			return STATUS_OK;
     7ca:	2300      	movs	r3, #0
     7cc:	e000      	b.n	7d0 <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
     7ce:	2317      	movs	r3, #23
	}
}
     7d0:	0018      	movs	r0, r3
     7d2:	46bd      	mov	sp, r7
     7d4:	b004      	add	sp, #16
     7d6:	bd80      	pop	{r7, pc}
     7d8:	000002b1 	.word	0x000002b1

000007dc <display_update>:
};

SemaphoreHandle_t display_update_mutex;

static void display_update(bool update)
{
     7dc:	b590      	push	{r4, r7, lr}
     7de:	b083      	sub	sp, #12
     7e0:	af00      	add	r7, sp, #0
     7e2:	0002      	movs	r2, r0
     7e4:	1dfb      	adds	r3, r7, #7
     7e6:	701a      	strb	r2, [r3, #0]
    if (!xSemaphoreTake(display_update_mutex, portMAX_DELAY)) {
     7e8:	4b0c      	ldr	r3, [pc, #48]	; (81c <display_update+0x40>)
     7ea:	6818      	ldr	r0, [r3, #0]
     7ec:	2301      	movs	r3, #1
     7ee:	425a      	negs	r2, r3
     7f0:	2300      	movs	r3, #0
     7f2:	2100      	movs	r1, #0
     7f4:	4c0a      	ldr	r4, [pc, #40]	; (820 <display_update+0x44>)
     7f6:	47a0      	blx	r4
     7f8:	1e03      	subs	r3, r0, #0
     7fa:	d00b      	beq.n	814 <display_update+0x38>
        return;
    }
    display_state.display_update = update;
     7fc:	4b09      	ldr	r3, [pc, #36]	; (824 <display_update+0x48>)
     7fe:	1dfa      	adds	r2, r7, #7
     800:	7812      	ldrb	r2, [r2, #0]
     802:	725a      	strb	r2, [r3, #9]
    xSemaphoreGive(display_update_mutex);
     804:	4b05      	ldr	r3, [pc, #20]	; (81c <display_update+0x40>)
     806:	6818      	ldr	r0, [r3, #0]
     808:	2300      	movs	r3, #0
     80a:	2200      	movs	r2, #0
     80c:	2100      	movs	r1, #0
     80e:	4c06      	ldr	r4, [pc, #24]	; (828 <display_update+0x4c>)
     810:	47a0      	blx	r4
     812:	e000      	b.n	816 <display_update+0x3a>
SemaphoreHandle_t display_update_mutex;

static void display_update(bool update)
{
    if (!xSemaphoreTake(display_update_mutex, portMAX_DELAY)) {
        return;
     814:	46c0      	nop			; (mov r8, r8)
    }
    display_state.display_update = update;
    xSemaphoreGive(display_update_mutex);
}
     816:	46bd      	mov	sp, r7
     818:	b003      	add	sp, #12
     81a:	bd90      	pop	{r4, r7, pc}
     81c:	200045bc 	.word	0x200045bc
     820:	0000b5d9 	.word	0x0000b5d9
     824:	20004600 	.word	0x20004600
     828:	0000b2d9 	.word	0x0000b2d9

0000082c <display_button_lock_unlock_handler>:
    if (num)
        chars[2] = num_to_seg[num];
}

static void display_button_lock_unlock_handler(void)
{
     82c:	b5b0      	push	{r4, r5, r7, lr}
     82e:	af00      	add	r7, sp, #0
    if (display_state.display_locked) {
     830:	4b10      	ldr	r3, [pc, #64]	; (874 <display_button_lock_unlock_handler+0x48>)
     832:	7b1b      	ldrb	r3, [r3, #12]
     834:	2b00      	cmp	r3, #0
     836:	d019      	beq.n	86c <display_button_lock_unlock_handler+0x40>
        if (display_state.display_unlock_timer++ > DISPLAY_UNLOCK_TIME) {
     838:	4b0e      	ldr	r3, [pc, #56]	; (874 <display_button_lock_unlock_handler+0x48>)
     83a:	695b      	ldr	r3, [r3, #20]
     83c:	1c59      	adds	r1, r3, #1
     83e:	4a0d      	ldr	r2, [pc, #52]	; (874 <display_button_lock_unlock_handler+0x48>)
     840:	6151      	str	r1, [r2, #20]
     842:	2b14      	cmp	r3, #20
     844:	d912      	bls.n	86c <display_button_lock_unlock_handler+0x40>
            xSemaphoreGive(buzzer_sem);
     846:	4b0c      	ldr	r3, [pc, #48]	; (878 <display_button_lock_unlock_handler+0x4c>)
     848:	6818      	ldr	r0, [r3, #0]
     84a:	2300      	movs	r3, #0
     84c:	2200      	movs	r2, #0
     84e:	2100      	movs	r1, #0
     850:	4c0a      	ldr	r4, [pc, #40]	; (87c <display_button_lock_unlock_handler+0x50>)
     852:	47a0      	blx	r4
            display_state.display_locked = false;
     854:	4b07      	ldr	r3, [pc, #28]	; (874 <display_button_lock_unlock_handler+0x48>)
     856:	2200      	movs	r2, #0
     858:	731a      	strb	r2, [r3, #12]
            display_state.display_unlock_timer = 0;
     85a:	4b06      	ldr	r3, [pc, #24]	; (874 <display_button_lock_unlock_handler+0x48>)
     85c:	2200      	movs	r2, #0
     85e:	615a      	str	r2, [r3, #20]
            display_state.display_lock_timer = 0;
     860:	4b04      	ldr	r3, [pc, #16]	; (874 <display_button_lock_unlock_handler+0x48>)
     862:	2200      	movs	r2, #0
     864:	611a      	str	r2, [r3, #16]
            display_update(true);            
     866:	2001      	movs	r0, #1
     868:	4b05      	ldr	r3, [pc, #20]	; (880 <display_button_lock_unlock_handler+0x54>)
     86a:	4798      	blx	r3
        }                
    }
}
     86c:	46c0      	nop			; (mov r8, r8)
     86e:	46bd      	mov	sp, r7
     870:	bdb0      	pop	{r4, r5, r7, pc}
     872:	46c0      	nop			; (mov r8, r8)
     874:	20004600 	.word	0x20004600
     878:	20004618 	.word	0x20004618
     87c:	0000b2d9 	.word	0x0000b2d9
     880:	000007dd 	.word	0x000007dd

00000884 <display_button_water_pump_handler>:
    }

}

static void display_button_water_pump_handler(void)
{
     884:	b5b0      	push	{r4, r5, r7, lr}
     886:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     888:	4b0c      	ldr	r3, [pc, #48]	; (8bc <display_button_water_pump_handler+0x38>)
     88a:	7b1b      	ldrb	r3, [r3, #12]
     88c:	2201      	movs	r2, #1
     88e:	4053      	eors	r3, r2
     890:	b2db      	uxtb	r3, r3
     892:	2b00      	cmp	r3, #0
     894:	d00f      	beq.n	8b6 <display_button_water_pump_handler+0x32>
        xSemaphoreGive(buzzer_sem);
     896:	4b0a      	ldr	r3, [pc, #40]	; (8c0 <display_button_water_pump_handler+0x3c>)
     898:	6818      	ldr	r0, [r3, #0]
     89a:	2300      	movs	r3, #0
     89c:	2200      	movs	r2, #0
     89e:	2100      	movs	r1, #0
     8a0:	4c08      	ldr	r4, [pc, #32]	; (8c4 <display_button_water_pump_handler+0x40>)
     8a2:	47a0      	blx	r4
        display_state.display_lock_timer = 0;
     8a4:	4b05      	ldr	r3, [pc, #20]	; (8bc <display_button_water_pump_handler+0x38>)
     8a6:	2200      	movs	r2, #0
     8a8:	611a      	str	r2, [r3, #16]
        display_state.pump_on = true;
     8aa:	4b04      	ldr	r3, [pc, #16]	; (8bc <display_button_water_pump_handler+0x38>)
     8ac:	2201      	movs	r2, #1
     8ae:	721a      	strb	r2, [r3, #8]
        display_update(true);
     8b0:	2001      	movs	r0, #1
     8b2:	4b05      	ldr	r3, [pc, #20]	; (8c8 <display_button_water_pump_handler+0x44>)
     8b4:	4798      	blx	r3

        // TODO: close pump relay
    }
}
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	46bd      	mov	sp, r7
     8ba:	bdb0      	pop	{r4, r5, r7, pc}
     8bc:	20004600 	.word	0x20004600
     8c0:	20004618 	.word	0x20004618
     8c4:	0000b2d9 	.word	0x0000b2d9
     8c8:	000007dd 	.word	0x000007dd

000008cc <display_cf_handler>:

static void display_cf_handler(void)
{
     8cc:	b5b0      	push	{r4, r5, r7, lr}
     8ce:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     8d0:	4b10      	ldr	r3, [pc, #64]	; (914 <display_cf_handler+0x48>)
     8d2:	7b1b      	ldrb	r3, [r3, #12]
     8d4:	2201      	movs	r2, #1
     8d6:	4053      	eors	r3, r2
     8d8:	b2db      	uxtb	r3, r3
     8da:	2b00      	cmp	r3, #0
     8dc:	d016      	beq.n	90c <display_cf_handler+0x40>
        xSemaphoreGive(buzzer_sem);
     8de:	4b0e      	ldr	r3, [pc, #56]	; (918 <display_cf_handler+0x4c>)
     8e0:	6818      	ldr	r0, [r3, #0]
     8e2:	2300      	movs	r3, #0
     8e4:	2200      	movs	r2, #0
     8e6:	2100      	movs	r1, #0
     8e8:	4c0c      	ldr	r4, [pc, #48]	; (91c <display_cf_handler+0x50>)
     8ea:	47a0      	blx	r4
        display_state.display_lock_timer = 0;        
     8ec:	4b09      	ldr	r3, [pc, #36]	; (914 <display_cf_handler+0x48>)
     8ee:	2200      	movs	r2, #0
     8f0:	611a      	str	r2, [r3, #16]
        display_state.degrees_F ^= 1;
     8f2:	4b08      	ldr	r3, [pc, #32]	; (914 <display_cf_handler+0x48>)
     8f4:	78db      	ldrb	r3, [r3, #3]
     8f6:	2201      	movs	r2, #1
     8f8:	4053      	eors	r3, r2
     8fa:	b2db      	uxtb	r3, r3
     8fc:	1e5a      	subs	r2, r3, #1
     8fe:	4193      	sbcs	r3, r2
     900:	b2da      	uxtb	r2, r3
     902:	4b04      	ldr	r3, [pc, #16]	; (914 <display_cf_handler+0x48>)
     904:	70da      	strb	r2, [r3, #3]
        display_update(true);        
     906:	2001      	movs	r0, #1
     908:	4b05      	ldr	r3, [pc, #20]	; (920 <display_cf_handler+0x54>)
     90a:	4798      	blx	r3
    }
}
     90c:	46c0      	nop			; (mov r8, r8)
     90e:	46bd      	mov	sp, r7
     910:	bdb0      	pop	{r4, r5, r7, pc}
     912:	46c0      	nop			; (mov r8, r8)
     914:	20004600 	.word	0x20004600
     918:	20004618 	.word	0x20004618
     91c:	0000b2d9 	.word	0x0000b2d9
     920:	000007dd 	.word	0x000007dd

00000924 <display_button_heater_handler>:

static void display_button_heater_handler(void)
{
     924:	b5b0      	push	{r4, r5, r7, lr}
     926:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     928:	4b10      	ldr	r3, [pc, #64]	; (96c <display_button_heater_handler+0x48>)
     92a:	7b1b      	ldrb	r3, [r3, #12]
     92c:	2201      	movs	r2, #1
     92e:	4053      	eors	r3, r2
     930:	b2db      	uxtb	r3, r3
     932:	2b00      	cmp	r3, #0
     934:	d016      	beq.n	964 <display_button_heater_handler+0x40>
        xSemaphoreGive(buzzer_sem);
     936:	4b0e      	ldr	r3, [pc, #56]	; (970 <display_button_heater_handler+0x4c>)
     938:	6818      	ldr	r0, [r3, #0]
     93a:	2300      	movs	r3, #0
     93c:	2200      	movs	r2, #0
     93e:	2100      	movs	r1, #0
     940:	4c0c      	ldr	r4, [pc, #48]	; (974 <display_button_heater_handler+0x50>)
     942:	47a0      	blx	r4
        display_state.display_lock_timer = 0;
     944:	4b09      	ldr	r3, [pc, #36]	; (96c <display_button_heater_handler+0x48>)
     946:	2200      	movs	r2, #0
     948:	611a      	str	r2, [r3, #16]
        display_state.heater_on ^= 1;
     94a:	4b08      	ldr	r3, [pc, #32]	; (96c <display_button_heater_handler+0x48>)
     94c:	799b      	ldrb	r3, [r3, #6]
     94e:	2201      	movs	r2, #1
     950:	4053      	eors	r3, r2
     952:	b2db      	uxtb	r3, r3
     954:	1e5a      	subs	r2, r3, #1
     956:	4193      	sbcs	r3, r2
     958:	b2da      	uxtb	r2, r3
     95a:	4b04      	ldr	r3, [pc, #16]	; (96c <display_button_heater_handler+0x48>)
     95c:	719a      	strb	r2, [r3, #6]
        display_update(true);
     95e:	2001      	movs	r0, #1
     960:	4b05      	ldr	r3, [pc, #20]	; (978 <display_button_heater_handler+0x54>)
     962:	4798      	blx	r3
            // TODO: Close pump relay
        }

        // TODO: close heater relays
    }
}
     964:	46c0      	nop			; (mov r8, r8)
     966:	46bd      	mov	sp, r7
     968:	bdb0      	pop	{r4, r5, r7, pc}
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	20004600 	.word	0x20004600
     970:	20004618 	.word	0x20004618
     974:	0000b2d9 	.word	0x0000b2d9
     978:	000007dd 	.word	0x000007dd

0000097c <display_button_air_pump_handler>:

static void display_button_air_pump_handler(void)
{
     97c:	b5b0      	push	{r4, r5, r7, lr}
     97e:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     980:	4b09      	ldr	r3, [pc, #36]	; (9a8 <display_button_air_pump_handler+0x2c>)
     982:	7b1b      	ldrb	r3, [r3, #12]
     984:	2201      	movs	r2, #1
     986:	4053      	eors	r3, r2
     988:	b2db      	uxtb	r3, r3
     98a:	2b00      	cmp	r3, #0
     98c:	d009      	beq.n	9a2 <display_button_air_pump_handler+0x26>
        if (display_state.pump_on) {            
            // TODO: Turn off heater and pump

        }   
        
        xSemaphoreGive(buzzer_sem);
     98e:	4b07      	ldr	r3, [pc, #28]	; (9ac <display_button_air_pump_handler+0x30>)
     990:	6818      	ldr	r0, [r3, #0]
     992:	2300      	movs	r3, #0
     994:	2200      	movs	r2, #0
     996:	2100      	movs	r1, #0
     998:	4c05      	ldr	r4, [pc, #20]	; (9b0 <display_button_air_pump_handler+0x34>)
     99a:	47a0      	blx	r4
        display_state.display_lock_timer = 0;     
     99c:	4b02      	ldr	r3, [pc, #8]	; (9a8 <display_button_air_pump_handler+0x2c>)
     99e:	2200      	movs	r2, #0
     9a0:	611a      	str	r2, [r3, #16]

        // TODO: Turn on air pump
    }
}
     9a2:	46c0      	nop			; (mov r8, r8)
     9a4:	46bd      	mov	sp, r7
     9a6:	bdb0      	pop	{r4, r5, r7, pc}
     9a8:	20004600 	.word	0x20004600
     9ac:	20004618 	.word	0x20004618
     9b0:	0000b2d9 	.word	0x0000b2d9

000009b4 <display_button_down_handler>:

static void display_button_down_handler(void)
{
     9b4:	b590      	push	{r4, r7, lr}
     9b6:	b083      	sub	sp, #12
     9b8:	af00      	add	r7, sp, #0
    uint8_t current_temp;

    if (!display_state.display_locked) {
     9ba:	4b13      	ldr	r3, [pc, #76]	; (a08 <display_button_down_handler+0x54>)
     9bc:	7b1b      	ldrb	r3, [r3, #12]
     9be:	2201      	movs	r2, #1
     9c0:	4053      	eors	r3, r2
     9c2:	b2db      	uxtb	r3, r3
     9c4:	2b00      	cmp	r3, #0
     9c6:	d01a      	beq.n	9fe <display_button_down_handler+0x4a>
        display_state.display_lock_timer = 0;
     9c8:	4b0f      	ldr	r3, [pc, #60]	; (a08 <display_button_down_handler+0x54>)
     9ca:	2200      	movs	r2, #0
     9cc:	611a      	str	r2, [r3, #16]

        // Try to set the display temperature
        current_temp = thermal_get_temperature();
     9ce:	1dfc      	adds	r4, r7, #7
     9d0:	4b0e      	ldr	r3, [pc, #56]	; (a0c <display_button_down_handler+0x58>)
     9d2:	4798      	blx	r3
     9d4:	0003      	movs	r3, r0
     9d6:	7023      	strb	r3, [r4, #0]
        if (thermal_set_temperature(current_temp-1) == STATUS_OK) {
     9d8:	1dfb      	adds	r3, r7, #7
     9da:	781b      	ldrb	r3, [r3, #0]
     9dc:	3b01      	subs	r3, #1
     9de:	b2db      	uxtb	r3, r3
     9e0:	0018      	movs	r0, r3
     9e2:	4b0b      	ldr	r3, [pc, #44]	; (a10 <display_button_down_handler+0x5c>)
     9e4:	4798      	blx	r3
     9e6:	1e03      	subs	r3, r0, #0
     9e8:	d109      	bne.n	9fe <display_button_down_handler+0x4a>
            xSemaphoreGive(buzzer_sem);
     9ea:	4b0a      	ldr	r3, [pc, #40]	; (a14 <display_button_down_handler+0x60>)
     9ec:	6818      	ldr	r0, [r3, #0]
     9ee:	2300      	movs	r3, #0
     9f0:	2200      	movs	r2, #0
     9f2:	2100      	movs	r1, #0
     9f4:	4c08      	ldr	r4, [pc, #32]	; (a18 <display_button_down_handler+0x64>)
     9f6:	47a0      	blx	r4
            display_state.display_blink = true;
     9f8:	4b03      	ldr	r3, [pc, #12]	; (a08 <display_button_down_handler+0x54>)
     9fa:	2201      	movs	r2, #1
     9fc:	729a      	strb	r2, [r3, #10]
        }
    }
}
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	46bd      	mov	sp, r7
     a02:	b003      	add	sp, #12
     a04:	bd90      	pop	{r4, r7, pc}
     a06:	46c0      	nop			; (mov r8, r8)
     a08:	20004600 	.word	0x20004600
     a0c:	00000e11 	.word	0x00000e11
     a10:	00000da1 	.word	0x00000da1
     a14:	20004618 	.word	0x20004618
     a18:	0000b2d9 	.word	0x0000b2d9

00000a1c <display_button_up_handler>:

static void display_button_up_handler(void)
{
     a1c:	b590      	push	{r4, r7, lr}
     a1e:	b083      	sub	sp, #12
     a20:	af00      	add	r7, sp, #0
    uint8_t current_temp;

    if (!display_state.display_locked) {
     a22:	4b13      	ldr	r3, [pc, #76]	; (a70 <display_button_up_handler+0x54>)
     a24:	7b1b      	ldrb	r3, [r3, #12]
     a26:	2201      	movs	r2, #1
     a28:	4053      	eors	r3, r2
     a2a:	b2db      	uxtb	r3, r3
     a2c:	2b00      	cmp	r3, #0
     a2e:	d01a      	beq.n	a66 <display_button_up_handler+0x4a>
        display_state.display_lock_timer = 0;
     a30:	4b0f      	ldr	r3, [pc, #60]	; (a70 <display_button_up_handler+0x54>)
     a32:	2200      	movs	r2, #0
     a34:	611a      	str	r2, [r3, #16]

        // Try to set the display temperature
        current_temp = thermal_get_temperature();
     a36:	1dfc      	adds	r4, r7, #7
     a38:	4b0e      	ldr	r3, [pc, #56]	; (a74 <display_button_up_handler+0x58>)
     a3a:	4798      	blx	r3
     a3c:	0003      	movs	r3, r0
     a3e:	7023      	strb	r3, [r4, #0]
        if (thermal_set_temperature(current_temp+1) == STATUS_OK) {
     a40:	1dfb      	adds	r3, r7, #7
     a42:	781b      	ldrb	r3, [r3, #0]
     a44:	3301      	adds	r3, #1
     a46:	b2db      	uxtb	r3, r3
     a48:	0018      	movs	r0, r3
     a4a:	4b0b      	ldr	r3, [pc, #44]	; (a78 <display_button_up_handler+0x5c>)
     a4c:	4798      	blx	r3
     a4e:	1e03      	subs	r3, r0, #0
     a50:	d109      	bne.n	a66 <display_button_up_handler+0x4a>
            xSemaphoreGive(buzzer_sem);            
     a52:	4b0a      	ldr	r3, [pc, #40]	; (a7c <display_button_up_handler+0x60>)
     a54:	6818      	ldr	r0, [r3, #0]
     a56:	2300      	movs	r3, #0
     a58:	2200      	movs	r2, #0
     a5a:	2100      	movs	r1, #0
     a5c:	4c08      	ldr	r4, [pc, #32]	; (a80 <display_button_up_handler+0x64>)
     a5e:	47a0      	blx	r4
            display_state.display_blink = true;
     a60:	4b03      	ldr	r3, [pc, #12]	; (a70 <display_button_up_handler+0x54>)
     a62:	2201      	movs	r2, #1
     a64:	729a      	strb	r2, [r3, #10]
        }
    }
}
     a66:	46c0      	nop			; (mov r8, r8)
     a68:	46bd      	mov	sp, r7
     a6a:	b003      	add	sp, #12
     a6c:	bd90      	pop	{r4, r7, pc}
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	20004600 	.word	0x20004600
     a74:	00000e11 	.word	0x00000e11
     a78:	00000da1 	.word	0x00000da1
     a7c:	20004618 	.word	0x20004618
     a80:	0000b2d9 	.word	0x0000b2d9

00000a84 <display_set_display>:

static void display_set_display(uint8_t *new_conf)
{    
     a84:	b580      	push	{r7, lr}
     a86:	b082      	sub	sp, #8
     a88:	af00      	add	r7, sp, #0
     a8a:	6078      	str	r0, [r7, #4]
    new_conf[0] = display_state.char_display[0];
     a8c:	4b45      	ldr	r3, [pc, #276]	; (ba4 <display_set_display+0x120>)
     a8e:	781a      	ldrb	r2, [r3, #0]
     a90:	687b      	ldr	r3, [r7, #4]
     a92:	701a      	strb	r2, [r3, #0]
    new_conf[1] = display_state.char_display[1];
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	3301      	adds	r3, #1
     a98:	4a42      	ldr	r2, [pc, #264]	; (ba4 <display_set_display+0x120>)
     a9a:	7852      	ldrb	r2, [r2, #1]
     a9c:	701a      	strb	r2, [r3, #0]
    new_conf[2] = display_state.char_display[2];
     a9e:	687b      	ldr	r3, [r7, #4]
     aa0:	3302      	adds	r3, #2
     aa2:	4a40      	ldr	r2, [pc, #256]	; (ba4 <display_set_display+0x120>)
     aa4:	7892      	ldrb	r2, [r2, #2]
     aa6:	701a      	strb	r2, [r3, #0]
        
    if (display_state.bubbles_on)
     aa8:	4b3e      	ldr	r3, [pc, #248]	; (ba4 <display_set_display+0x120>)
     aaa:	79db      	ldrb	r3, [r3, #7]
     aac:	2b00      	cmp	r3, #0
     aae:	d008      	beq.n	ac2 <display_set_display+0x3e>
        new_conf[4] |= LED_BUBBLES;
     ab0:	687b      	ldr	r3, [r7, #4]
     ab2:	3304      	adds	r3, #4
     ab4:	687a      	ldr	r2, [r7, #4]
     ab6:	3204      	adds	r2, #4
     ab8:	7812      	ldrb	r2, [r2, #0]
     aba:	2104      	movs	r1, #4
     abc:	430a      	orrs	r2, r1
     abe:	b2d2      	uxtb	r2, r2
     ac0:	701a      	strb	r2, [r3, #0]

    if (display_state.degrees_F)
     ac2:	4b38      	ldr	r3, [pc, #224]	; (ba4 <display_set_display+0x120>)
     ac4:	78db      	ldrb	r3, [r3, #3]
     ac6:	2b00      	cmp	r3, #0
     ac8:	d009      	beq.n	ade <display_set_display+0x5a>
        new_conf[4] |= LED_DEG_F;
     aca:	687b      	ldr	r3, [r7, #4]
     acc:	3304      	adds	r3, #4
     ace:	687a      	ldr	r2, [r7, #4]
     ad0:	3204      	adds	r2, #4
     ad2:	7812      	ldrb	r2, [r2, #0]
     ad4:	2102      	movs	r1, #2
     ad6:	430a      	orrs	r2, r1
     ad8:	b2d2      	uxtb	r2, r2
     ada:	701a      	strb	r2, [r3, #0]
     adc:	e008      	b.n	af0 <display_set_display+0x6c>
    else
        new_conf[4] |= LED_DEG_C;
     ade:	687b      	ldr	r3, [r7, #4]
     ae0:	3304      	adds	r3, #4
     ae2:	687a      	ldr	r2, [r7, #4]
     ae4:	3204      	adds	r2, #4
     ae6:	7812      	ldrb	r2, [r2, #0]
     ae8:	2101      	movs	r1, #1
     aea:	430a      	orrs	r2, r1
     aec:	b2d2      	uxtb	r2, r2
     aee:	701a      	strb	r2, [r3, #0]

    if (display_state.pump_on) {
     af0:	4b2c      	ldr	r3, [pc, #176]	; (ba4 <display_set_display+0x120>)
     af2:	7a1b      	ldrb	r3, [r3, #8]
     af4:	2b00      	cmp	r3, #0
     af6:	d028      	beq.n	b4a <display_set_display+0xc6>
        new_conf[3] |= LED_PUMP;
     af8:	687b      	ldr	r3, [r7, #4]
     afa:	3303      	adds	r3, #3
     afc:	687a      	ldr	r2, [r7, #4]
     afe:	3203      	adds	r2, #3
     b00:	7812      	ldrb	r2, [r2, #0]
     b02:	2102      	movs	r1, #2
     b04:	430a      	orrs	r2, r1
     b06:	b2d2      	uxtb	r2, r2
     b08:	701a      	strb	r2, [r3, #0]
        new_conf[3] |= LED_TIMER;
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	3303      	adds	r3, #3
     b0e:	687a      	ldr	r2, [r7, #4]
     b10:	3203      	adds	r2, #3
     b12:	7812      	ldrb	r2, [r2, #0]
     b14:	2110      	movs	r1, #16
     b16:	430a      	orrs	r2, r1
     b18:	b2d2      	uxtb	r2, r2
     b1a:	701a      	strb	r2, [r3, #0]
        if (display_state.heater_on)
     b1c:	4b21      	ldr	r3, [pc, #132]	; (ba4 <display_set_display+0x120>)
     b1e:	799b      	ldrb	r3, [r3, #6]
     b20:	2b00      	cmp	r3, #0
     b22:	d009      	beq.n	b38 <display_set_display+0xb4>
            new_conf[3] |= LED_HEATON;
     b24:	687b      	ldr	r3, [r7, #4]
     b26:	3303      	adds	r3, #3
     b28:	687a      	ldr	r2, [r7, #4]
     b2a:	3203      	adds	r2, #3
     b2c:	7812      	ldrb	r2, [r2, #0]
     b2e:	2104      	movs	r1, #4
     b30:	430a      	orrs	r2, r1
     b32:	b2d2      	uxtb	r2, r2
     b34:	701a      	strb	r2, [r3, #0]
     b36:	e008      	b.n	b4a <display_set_display+0xc6>
        else
            new_conf[3] |= LED_HEATOFF;
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	3303      	adds	r3, #3
     b3c:	687a      	ldr	r2, [r7, #4]
     b3e:	3203      	adds	r2, #3
     b40:	7812      	ldrb	r2, [r2, #0]
     b42:	2108      	movs	r1, #8
     b44:	430a      	orrs	r2, r1
     b46:	b2d2      	uxtb	r2, r2
     b48:	701a      	strb	r2, [r3, #0]
    }

    if (display_state.timer_set)
     b4a:	4b16      	ldr	r3, [pc, #88]	; (ba4 <display_set_display+0x120>)
     b4c:	791b      	ldrb	r3, [r3, #4]
     b4e:	2b00      	cmp	r3, #0
     b50:	d008      	beq.n	b64 <display_set_display+0xe0>
        new_conf[3] |= LED_TIMER_SET;
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	3303      	adds	r3, #3
     b56:	687a      	ldr	r2, [r7, #4]
     b58:	3203      	adds	r2, #3
     b5a:	7812      	ldrb	r2, [r2, #0]
     b5c:	2140      	movs	r1, #64	; 0x40
     b5e:	430a      	orrs	r2, r1
     b60:	b2d2      	uxtb	r2, r2
     b62:	701a      	strb	r2, [r3, #0]

    if (display_state.display_locked)
     b64:	4b0f      	ldr	r3, [pc, #60]	; (ba4 <display_set_display+0x120>)
     b66:	7b1b      	ldrb	r3, [r3, #12]
     b68:	2b00      	cmp	r3, #0
     b6a:	d008      	beq.n	b7e <display_set_display+0xfa>
        new_conf[3] |= LED_LOCK;
     b6c:	687b      	ldr	r3, [r7, #4]
     b6e:	3303      	adds	r3, #3
     b70:	687a      	ldr	r2, [r7, #4]
     b72:	3203      	adds	r2, #3
     b74:	7812      	ldrb	r2, [r2, #0]
     b76:	2120      	movs	r1, #32
     b78:	430a      	orrs	r2, r1
     b7a:	b2d2      	uxtb	r2, r2
     b7c:	701a      	strb	r2, [r3, #0]

    if (display_state.timer_on)
     b7e:	4b09      	ldr	r3, [pc, #36]	; (ba4 <display_set_display+0x120>)
     b80:	795b      	ldrb	r3, [r3, #5]
     b82:	2b00      	cmp	r3, #0
     b84:	d009      	beq.n	b9a <display_set_display+0x116>
        new_conf[3] |= LED_CLOCK;    
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	3303      	adds	r3, #3
     b8a:	687a      	ldr	r2, [r7, #4]
     b8c:	3203      	adds	r2, #3
     b8e:	7812      	ldrb	r2, [r2, #0]
     b90:	2180      	movs	r1, #128	; 0x80
     b92:	4249      	negs	r1, r1
     b94:	430a      	orrs	r2, r1
     b96:	b2d2      	uxtb	r2, r2
     b98:	701a      	strb	r2, [r3, #0]
}
     b9a:	46c0      	nop			; (mov r8, r8)
     b9c:	46bd      	mov	sp, r7
     b9e:	b002      	add	sp, #8
     ba0:	bd80      	pop	{r7, pc}
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	20004600 	.word	0x20004600

00000ba8 <display_init>:
    { BUTTON_UP,            display_button_up_handler },
    { 0, NULL },
};

void display_init(void)
{
     ba8:	b580      	push	{r7, lr}
     baa:	af00      	add	r7, sp, #0
    wtc6508_init();   
     bac:	4b19      	ldr	r3, [pc, #100]	; (c14 <display_init+0x6c>)
     bae:	4798      	blx	r3
    tm1640_init();
     bb0:	4b19      	ldr	r3, [pc, #100]	; (c18 <display_init+0x70>)
     bb2:	4798      	blx	r3

    // Set the initial display state
    display_state.char_display[0] = SEG_0;
     bb4:	4b19      	ldr	r3, [pc, #100]	; (c1c <display_init+0x74>)
     bb6:	223f      	movs	r2, #63	; 0x3f
     bb8:	701a      	strb	r2, [r3, #0]
    display_state.char_display[1] = SEG_0;
     bba:	4b18      	ldr	r3, [pc, #96]	; (c1c <display_init+0x74>)
     bbc:	223f      	movs	r2, #63	; 0x3f
     bbe:	705a      	strb	r2, [r3, #1]
    display_state.char_display[2] = SEG_0;
     bc0:	4b16      	ldr	r3, [pc, #88]	; (c1c <display_init+0x74>)
     bc2:	223f      	movs	r2, #63	; 0x3f
     bc4:	709a      	strb	r2, [r3, #2]

    display_state.degrees_F = true;
     bc6:	4b15      	ldr	r3, [pc, #84]	; (c1c <display_init+0x74>)
     bc8:	2201      	movs	r2, #1
     bca:	70da      	strb	r2, [r3, #3]
    display_state.display_locked = false;
     bcc:	4b13      	ldr	r3, [pc, #76]	; (c1c <display_init+0x74>)
     bce:	2200      	movs	r2, #0
     bd0:	731a      	strb	r2, [r3, #12]
    display_state.display_blink = false;
     bd2:	4b12      	ldr	r3, [pc, #72]	; (c1c <display_init+0x74>)
     bd4:	2200      	movs	r2, #0
     bd6:	729a      	strb	r2, [r3, #10]
    display_state.display_lock_timer = 0;
     bd8:	4b10      	ldr	r3, [pc, #64]	; (c1c <display_init+0x74>)
     bda:	2200      	movs	r2, #0
     bdc:	611a      	str	r2, [r3, #16]
    display_state.display_update = true;
     bde:	4b0f      	ldr	r3, [pc, #60]	; (c1c <display_init+0x74>)
     be0:	2201      	movs	r2, #1
     be2:	725a      	strb	r2, [r3, #9]
    display_state.timer_set = false;
     be4:	4b0d      	ldr	r3, [pc, #52]	; (c1c <display_init+0x74>)
     be6:	2200      	movs	r2, #0
     be8:	711a      	strb	r2, [r3, #4]
    display_state.heater_on = false;
     bea:	4b0c      	ldr	r3, [pc, #48]	; (c1c <display_init+0x74>)
     bec:	2200      	movs	r2, #0
     bee:	719a      	strb	r2, [r3, #6]
    display_state.pump_on = false;
     bf0:	4b0a      	ldr	r3, [pc, #40]	; (c1c <display_init+0x74>)
     bf2:	2200      	movs	r2, #0
     bf4:	721a      	strb	r2, [r3, #8]
    display_state.bubbles_on = false;
     bf6:	4b09      	ldr	r3, [pc, #36]	; (c1c <display_init+0x74>)
     bf8:	2200      	movs	r2, #0
     bfa:	71da      	strb	r2, [r3, #7]
    display_state.timer_on = false;
     bfc:	4b07      	ldr	r3, [pc, #28]	; (c1c <display_init+0x74>)
     bfe:	2200      	movs	r2, #0
     c00:	715a      	strb	r2, [r3, #5]

    display_update_mutex = xSemaphoreCreateMutex();
     c02:	2001      	movs	r0, #1
     c04:	4b06      	ldr	r3, [pc, #24]	; (c20 <display_init+0x78>)
     c06:	4798      	blx	r3
     c08:	0002      	movs	r2, r0
     c0a:	4b06      	ldr	r3, [pc, #24]	; (c24 <display_init+0x7c>)
     c0c:	601a      	str	r2, [r3, #0]
}
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	46bd      	mov	sp, r7
     c12:	bd80      	pop	{r7, pc}
     c14:	000015f5 	.word	0x000015f5
     c18:	000011fd 	.word	0x000011fd
     c1c:	20004600 	.word	0x20004600
     c20:	0000b299 	.word	0x0000b299
     c24:	200045bc 	.word	0x200045bc

00000c28 <display_idle>:

void display_idle(void)
{
     c28:	b580      	push	{r7, lr}
     c2a:	b082      	sub	sp, #8
     c2c:	af00      	add	r7, sp, #0
    uint8_t disp_conf[DISPLAY_CONFIG_LENGTH] = {0};
     c2e:	003b      	movs	r3, r7
     c30:	0018      	movs	r0, r3
     c32:	2305      	movs	r3, #5
     c34:	001a      	movs	r2, r3
     c36:	2100      	movs	r1, #0
     c38:	4b0e      	ldr	r3, [pc, #56]	; (c74 <display_idle+0x4c>)
     c3a:	4798      	blx	r3

    if (display_state.display_update && !display_state.display_blink) {
     c3c:	4b0e      	ldr	r3, [pc, #56]	; (c78 <display_idle+0x50>)
     c3e:	7a5b      	ldrb	r3, [r3, #9]
     c40:	2b00      	cmp	r3, #0
     c42:	d013      	beq.n	c6c <display_idle+0x44>
     c44:	4b0c      	ldr	r3, [pc, #48]	; (c78 <display_idle+0x50>)
     c46:	7a9b      	ldrb	r3, [r3, #10]
     c48:	2201      	movs	r2, #1
     c4a:	4053      	eors	r3, r2
     c4c:	b2db      	uxtb	r3, r3
     c4e:	2b00      	cmp	r3, #0
     c50:	d00c      	beq.n	c6c <display_idle+0x44>
        display_update(false);
     c52:	2000      	movs	r0, #0
     c54:	4b09      	ldr	r3, [pc, #36]	; (c7c <display_idle+0x54>)
     c56:	4798      	blx	r3

        // Perform a display update        
        display_set_display(disp_conf);
     c58:	003b      	movs	r3, r7
     c5a:	0018      	movs	r0, r3
     c5c:	4b08      	ldr	r3, [pc, #32]	; (c80 <display_idle+0x58>)
     c5e:	4798      	blx	r3

        tm1640_set_display(disp_conf, DISPLAY_CONFIG_LENGTH, BRIGHT_MAX);
     c60:	003b      	movs	r3, r7
     c62:	228f      	movs	r2, #143	; 0x8f
     c64:	2105      	movs	r1, #5
     c66:	0018      	movs	r0, r3
     c68:	4b06      	ldr	r3, [pc, #24]	; (c84 <display_idle+0x5c>)
     c6a:	4798      	blx	r3
    }
}
     c6c:	46c0      	nop			; (mov r8, r8)
     c6e:	46bd      	mov	sp, r7
     c70:	b002      	add	sp, #8
     c72:	bd80      	pop	{r7, pc}
     c74:	0000f77b 	.word	0x0000f77b
     c78:	20004600 	.word	0x20004600
     c7c:	000007dd 	.word	0x000007dd
     c80:	00000a85 	.word	0x00000a85
     c84:	00001279 	.word	0x00001279

00000c88 <display_update_33Hz>:
        }    
    }
}

void display_update_33Hz(void)
{
     c88:	b580      	push	{r7, lr}
     c8a:	b082      	sub	sp, #8
     c8c:	af00      	add	r7, sp, #0
    static uint8_t touch_detect_delay = 0;

    uint8_t status = 0;
     c8e:	1d7b      	adds	r3, r7, #5
     c90:	2200      	movs	r2, #0
     c92:	701a      	strb	r2, [r3, #0]
    uint8_t button_mask = 0x1;
     c94:	1dbb      	adds	r3, r7, #6
     c96:	2201      	movs	r2, #1
     c98:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
     c9a:	1dfb      	adds	r3, r7, #7
     c9c:	2200      	movs	r2, #0
     c9e:	701a      	strb	r2, [r3, #0]
    
    if (!touch_detect_delay) {
     ca0:	4b34      	ldr	r3, [pc, #208]	; (d74 <display_update_33Hz+0xec>)
     ca2:	781b      	ldrb	r3, [r3, #0]
     ca4:	2b00      	cmp	r3, #0
     ca6:	d145      	bne.n	d34 <display_update_33Hz+0xac>
        // Check for user input
        if (wtc6508_read(&status)) {
     ca8:	1d7b      	adds	r3, r7, #5
     caa:	0018      	movs	r0, r3
     cac:	4b32      	ldr	r3, [pc, #200]	; (d78 <display_update_33Hz+0xf0>)
     cae:	4798      	blx	r3
     cb0:	1e03      	subs	r3, r0, #0
     cb2:	d006      	beq.n	cc2 <display_update_33Hz+0x3a>
            printf("Error! Unable to read button status\n");
     cb4:	4b31      	ldr	r3, [pc, #196]	; (d7c <display_update_33Hz+0xf4>)
     cb6:	0018      	movs	r0, r3
     cb8:	4b31      	ldr	r3, [pc, #196]	; (d80 <display_update_33Hz+0xf8>)
     cba:	4798      	blx	r3
            status = 0;
     cbc:	1d7b      	adds	r3, r7, #5
     cbe:	2200      	movs	r2, #0
     cc0:	701a      	strb	r2, [r3, #0]
        }

        // Handle user input
        if (status) {          
     cc2:	1d7b      	adds	r3, r7, #5
     cc4:	781b      	ldrb	r3, [r3, #0]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d02c      	beq.n	d24 <display_update_33Hz+0x9c>
            touch_detect_delay = TOUCH_DETECT_DELAY;            
     cca:	4b2a      	ldr	r3, [pc, #168]	; (d74 <display_update_33Hz+0xec>)
     ccc:	2205      	movs	r2, #5
     cce:	701a      	strb	r2, [r3, #0]

            while (display_handlers[i].button_mask) {
     cd0:	e020      	b.n	d14 <display_update_33Hz+0x8c>
                if ((display_handlers[i].button_mask & status) && 
     cd2:	1dfb      	adds	r3, r7, #7
     cd4:	781a      	ldrb	r2, [r3, #0]
     cd6:	4b2b      	ldr	r3, [pc, #172]	; (d84 <display_update_33Hz+0xfc>)
     cd8:	00d2      	lsls	r2, r2, #3
     cda:	5cd3      	ldrb	r3, [r2, r3]
     cdc:	1d7a      	adds	r2, r7, #5
     cde:	7812      	ldrb	r2, [r2, #0]
     ce0:	4013      	ands	r3, r2
     ce2:	b2db      	uxtb	r3, r3
     ce4:	2b00      	cmp	r3, #0
     ce6:	d010      	beq.n	d0a <display_update_33Hz+0x82>
                     display_handlers[i].handler != NULL ) {
     ce8:	1dfb      	adds	r3, r7, #7
     cea:	781b      	ldrb	r3, [r3, #0]
     cec:	4a25      	ldr	r2, [pc, #148]	; (d84 <display_update_33Hz+0xfc>)
     cee:	00db      	lsls	r3, r3, #3
     cf0:	18d3      	adds	r3, r2, r3
     cf2:	3304      	adds	r3, #4
     cf4:	681b      	ldr	r3, [r3, #0]
        // Handle user input
        if (status) {          
            touch_detect_delay = TOUCH_DETECT_DELAY;            

            while (display_handlers[i].button_mask) {
                if ((display_handlers[i].button_mask & status) && 
     cf6:	2b00      	cmp	r3, #0
     cf8:	d007      	beq.n	d0a <display_update_33Hz+0x82>
                     display_handlers[i].handler != NULL ) {
                     display_handlers[i].handler();
     cfa:	1dfb      	adds	r3, r7, #7
     cfc:	781b      	ldrb	r3, [r3, #0]
     cfe:	4a21      	ldr	r2, [pc, #132]	; (d84 <display_update_33Hz+0xfc>)
     d00:	00db      	lsls	r3, r3, #3
     d02:	18d3      	adds	r3, r2, r3
     d04:	3304      	adds	r3, #4
     d06:	681b      	ldr	r3, [r3, #0]
     d08:	4798      	blx	r3
                }
                i++;
     d0a:	1dfb      	adds	r3, r7, #7
     d0c:	781a      	ldrb	r2, [r3, #0]
     d0e:	1dfb      	adds	r3, r7, #7
     d10:	3201      	adds	r2, #1
     d12:	701a      	strb	r2, [r3, #0]

        // Handle user input
        if (status) {          
            touch_detect_delay = TOUCH_DETECT_DELAY;            

            while (display_handlers[i].button_mask) {
     d14:	1dfb      	adds	r3, r7, #7
     d16:	781a      	ldrb	r2, [r3, #0]
     d18:	4b1a      	ldr	r3, [pc, #104]	; (d84 <display_update_33Hz+0xfc>)
     d1a:	00d2      	lsls	r2, r2, #3
     d1c:	5cd3      	ldrb	r3, [r2, r3]
     d1e:	2b00      	cmp	r3, #0
     d20:	d1d7      	bne.n	cd2 <display_update_33Hz+0x4a>
     d22:	e00d      	b.n	d40 <display_update_33Hz+0xb8>
                     display_handlers[i].handler();
                }
                i++;
            }
        }
        else if (display_state.display_unlock_timer > 0)
     d24:	4b18      	ldr	r3, [pc, #96]	; (d88 <display_update_33Hz+0x100>)
     d26:	695b      	ldr	r3, [r3, #20]
     d28:	2b00      	cmp	r3, #0
     d2a:	d009      	beq.n	d40 <display_update_33Hz+0xb8>
            // Reset the display unlock timer because the user isn't holding the button anymore
            display_state.display_unlock_timer = 0;
     d2c:	4b16      	ldr	r3, [pc, #88]	; (d88 <display_update_33Hz+0x100>)
     d2e:	2200      	movs	r2, #0
     d30:	615a      	str	r2, [r3, #20]
     d32:	e005      	b.n	d40 <display_update_33Hz+0xb8>
    }
    else
        touch_detect_delay--;
     d34:	4b0f      	ldr	r3, [pc, #60]	; (d74 <display_update_33Hz+0xec>)
     d36:	781b      	ldrb	r3, [r3, #0]
     d38:	3b01      	subs	r3, #1
     d3a:	b2da      	uxtb	r2, r3
     d3c:	4b0d      	ldr	r3, [pc, #52]	; (d74 <display_update_33Hz+0xec>)
     d3e:	701a      	strb	r2, [r3, #0]

    if (!display_state.display_locked && display_state.display_lock_timer++ > DISPLAY_LOCK_TIME) {
     d40:	4b11      	ldr	r3, [pc, #68]	; (d88 <display_update_33Hz+0x100>)
     d42:	7b1b      	ldrb	r3, [r3, #12]
     d44:	2201      	movs	r2, #1
     d46:	4053      	eors	r3, r2
     d48:	b2db      	uxtb	r3, r3
     d4a:	2b00      	cmp	r3, #0
     d4c:	d00d      	beq.n	d6a <display_update_33Hz+0xe2>
     d4e:	4b0e      	ldr	r3, [pc, #56]	; (d88 <display_update_33Hz+0x100>)
     d50:	691b      	ldr	r3, [r3, #16]
     d52:	1c59      	adds	r1, r3, #1
     d54:	4a0c      	ldr	r2, [pc, #48]	; (d88 <display_update_33Hz+0x100>)
     d56:	6111      	str	r1, [r2, #16]
     d58:	4a0c      	ldr	r2, [pc, #48]	; (d8c <display_update_33Hz+0x104>)
     d5a:	4293      	cmp	r3, r2
     d5c:	d905      	bls.n	d6a <display_update_33Hz+0xe2>
        display_state.display_locked = true;
     d5e:	4b0a      	ldr	r3, [pc, #40]	; (d88 <display_update_33Hz+0x100>)
     d60:	2201      	movs	r2, #1
     d62:	731a      	strb	r2, [r3, #12]
        display_update(true);
     d64:	2001      	movs	r0, #1
     d66:	4b0a      	ldr	r3, [pc, #40]	; (d90 <display_update_33Hz+0x108>)
     d68:	4798      	blx	r3
    }
}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	46bd      	mov	sp, r7
     d6e:	b002      	add	sp, #8
     d70:	bd80      	pop	{r7, pc}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	200000b8 	.word	0x200000b8
     d78:	00001699 	.word	0x00001699
     d7c:	00010f60 	.word	0x00010f60
     d80:	0000fe51 	.word	0x0000fe51
     d84:	00010f20 	.word	0x00010f20
     d88:	20004600 	.word	0x20004600
     d8c:	00002710 	.word	0x00002710
     d90:	000007dd 	.word	0x000007dd

00000d94 <display_led_test_1Hz>:
//    SEG_0, SEG_1, SEG_2, SEG_3, SEG_4, SEG_5, SEG_6, SEG_7, SEG_8, SEG_9, 
//    SEG_C, SEG_F, SEG_E, SEG_H, SEG_h
};

void display_led_test_1Hz(void)
{
     d94:	b580      	push	{r7, lr}
     d96:	af00      	add	r7, sp, #0
    if (segment_number == 0) {
        grid_number = (grid_number + 1) % TM1640_GRIDS;    
    }       

#endif
}
     d98:	46c0      	nop			; (mov r8, r8)
     d9a:	46bd      	mov	sp, r7
     d9c:	bd80      	pop	{r7, pc}
     d9e:	46c0      	nop			; (mov r8, r8)

00000da0 <thermal_set_temperature>:
    }

}

enum status_code thermal_set_temperature(uint8_t temperature)
{        
     da0:	b580      	push	{r7, lr}
     da2:	b084      	sub	sp, #16
     da4:	af00      	add	r7, sp, #0
     da6:	0002      	movs	r2, r0
     da8:	1dfb      	adds	r3, r7, #7
     daa:	701a      	strb	r2, [r3, #0]
    uint8_t temp_max, temp_min;

    if (degrees_F) {
     dac:	4b16      	ldr	r3, [pc, #88]	; (e08 <thermal_set_temperature+0x68>)
     dae:	781b      	ldrb	r3, [r3, #0]
     db0:	2b00      	cmp	r3, #0
     db2:	d008      	beq.n	dc6 <thermal_set_temperature+0x26>
        temp_min = MIN_SETPOINT_TEMP_F;
     db4:	230e      	movs	r3, #14
     db6:	18fb      	adds	r3, r7, r3
     db8:	2244      	movs	r2, #68	; 0x44
     dba:	701a      	strb	r2, [r3, #0]
        temp_max = MAX_SETPOINT_TEMP_F;
     dbc:	230f      	movs	r3, #15
     dbe:	18fb      	adds	r3, r7, r3
     dc0:	2268      	movs	r2, #104	; 0x68
     dc2:	701a      	strb	r2, [r3, #0]
     dc4:	e007      	b.n	dd6 <thermal_set_temperature+0x36>
    }
    else {
        temp_min = MIN_SETPOINT_TEMP_C;
     dc6:	230e      	movs	r3, #14
     dc8:	18fb      	adds	r3, r7, r3
     dca:	2214      	movs	r2, #20
     dcc:	701a      	strb	r2, [r3, #0]
        temp_max = MAX_SETPOINT_TEMP_C;
     dce:	230f      	movs	r3, #15
     dd0:	18fb      	adds	r3, r7, r3
     dd2:	2228      	movs	r2, #40	; 0x28
     dd4:	701a      	strb	r2, [r3, #0]
    }
    
    if ((temperature >= temp_min) && (temperature <= temp_max)) {
     dd6:	1dfa      	adds	r2, r7, #7
     dd8:	230e      	movs	r3, #14
     dda:	18fb      	adds	r3, r7, r3
     ddc:	7812      	ldrb	r2, [r2, #0]
     dde:	781b      	ldrb	r3, [r3, #0]
     de0:	429a      	cmp	r2, r3
     de2:	d30c      	bcc.n	dfe <thermal_set_temperature+0x5e>
     de4:	1dfa      	adds	r2, r7, #7
     de6:	230f      	movs	r3, #15
     de8:	18fb      	adds	r3, r7, r3
     dea:	7812      	ldrb	r2, [r2, #0]
     dec:	781b      	ldrb	r3, [r3, #0]
     dee:	429a      	cmp	r2, r3
     df0:	d805      	bhi.n	dfe <thermal_set_temperature+0x5e>
        temp_set_point = temperature;
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <thermal_set_temperature+0x6c>)
     df4:	1dfa      	adds	r2, r7, #7
     df6:	7812      	ldrb	r2, [r2, #0]
     df8:	701a      	strb	r2, [r3, #0]
        return STATUS_OK;
     dfa:	2300      	movs	r3, #0
     dfc:	e000      	b.n	e00 <thermal_set_temperature+0x60>
    }
    else
        return STATUS_ERR_BAD_DATA;
     dfe:	2313      	movs	r3, #19
}
     e00:	0018      	movs	r0, r3
     e02:	46bd      	mov	sp, r7
     e04:	b004      	add	sp, #16
     e06:	bd80      	pop	{r7, pc}
     e08:	2000000d 	.word	0x2000000d
     e0c:	2000000c 	.word	0x2000000c

00000e10 <thermal_get_temperature>:

uint8_t thermal_get_temperature(void)
{
     e10:	b580      	push	{r7, lr}
     e12:	af00      	add	r7, sp, #0
    return temp_set_point;
     e14:	4b02      	ldr	r3, [pc, #8]	; (e20 <thermal_get_temperature+0x10>)
     e16:	781b      	ldrb	r3, [r3, #0]
}
     e18:	0018      	movs	r0, r3
     e1a:	46bd      	mov	sp, r7
     e1c:	bd80      	pop	{r7, pc}
     e1e:	46c0      	nop			; (mov r8, r8)
     e20:	2000000c 	.word	0x2000000c

00000e24 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     e24:	b580      	push	{r7, lr}
     e26:	b082      	sub	sp, #8
     e28:	af00      	add	r7, sp, #0
     e2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e2c:	687b      	ldr	r3, [r7, #4]
     e2e:	2280      	movs	r2, #128	; 0x80
     e30:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e32:	687b      	ldr	r3, [r7, #4]
     e34:	2200      	movs	r2, #0
     e36:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     e38:	687b      	ldr	r3, [r7, #4]
     e3a:	2201      	movs	r2, #1
     e3c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     e3e:	687b      	ldr	r3, [r7, #4]
     e40:	2200      	movs	r2, #0
     e42:	70da      	strb	r2, [r3, #3]
}
     e44:	46c0      	nop			; (mov r8, r8)
     e46:	46bd      	mov	sp, r7
     e48:	b002      	add	sp, #8
     e4a:	bd80      	pop	{r7, pc}

00000e4c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     e4c:	b580      	push	{r7, lr}
     e4e:	b084      	sub	sp, #16
     e50:	af00      	add	r7, sp, #0
     e52:	0002      	movs	r2, r0
     e54:	1dfb      	adds	r3, r7, #7
     e56:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     e58:	230f      	movs	r3, #15
     e5a:	18fb      	adds	r3, r7, r3
     e5c:	1dfa      	adds	r2, r7, #7
     e5e:	7812      	ldrb	r2, [r2, #0]
     e60:	09d2      	lsrs	r2, r2, #7
     e62:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     e64:	230e      	movs	r3, #14
     e66:	18fb      	adds	r3, r7, r3
     e68:	1dfa      	adds	r2, r7, #7
     e6a:	7812      	ldrb	r2, [r2, #0]
     e6c:	0952      	lsrs	r2, r2, #5
     e6e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     e70:	4b0d      	ldr	r3, [pc, #52]	; (ea8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     e72:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     e74:	230f      	movs	r3, #15
     e76:	18fb      	adds	r3, r7, r3
     e78:	781b      	ldrb	r3, [r3, #0]
     e7a:	2b00      	cmp	r3, #0
     e7c:	d10f      	bne.n	e9e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     e7e:	230f      	movs	r3, #15
     e80:	18fb      	adds	r3, r7, r3
     e82:	781b      	ldrb	r3, [r3, #0]
     e84:	009b      	lsls	r3, r3, #2
     e86:	2210      	movs	r2, #16
     e88:	4694      	mov	ip, r2
     e8a:	44bc      	add	ip, r7
     e8c:	4463      	add	r3, ip
     e8e:	3b08      	subs	r3, #8
     e90:	681a      	ldr	r2, [r3, #0]
     e92:	230e      	movs	r3, #14
     e94:	18fb      	adds	r3, r7, r3
     e96:	781b      	ldrb	r3, [r3, #0]
     e98:	01db      	lsls	r3, r3, #7
     e9a:	18d3      	adds	r3, r2, r3
     e9c:	e000      	b.n	ea0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     e9e:	2300      	movs	r3, #0
	}
}
     ea0:	0018      	movs	r0, r3
     ea2:	46bd      	mov	sp, r7
     ea4:	b004      	add	sp, #16
     ea6:	bd80      	pop	{r7, pc}
     ea8:	41004400 	.word	0x41004400

00000eac <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     eac:	b580      	push	{r7, lr}
     eae:	b082      	sub	sp, #8
     eb0:	af00      	add	r7, sp, #0
     eb2:	0002      	movs	r2, r0
     eb4:	1dfb      	adds	r3, r7, #7
     eb6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     eb8:	1dfb      	adds	r3, r7, #7
     eba:	781b      	ldrb	r3, [r3, #0]
     ebc:	0018      	movs	r0, r3
     ebe:	4b03      	ldr	r3, [pc, #12]	; (ecc <port_get_group_from_gpio_pin+0x20>)
     ec0:	4798      	blx	r3
     ec2:	0003      	movs	r3, r0
}
     ec4:	0018      	movs	r0, r3
     ec6:	46bd      	mov	sp, r7
     ec8:	b002      	add	sp, #8
     eca:	bd80      	pop	{r7, pc}
     ecc:	00000e4d 	.word	0x00000e4d

00000ed0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     ed0:	b580      	push	{r7, lr}
     ed2:	b084      	sub	sp, #16
     ed4:	af00      	add	r7, sp, #0
     ed6:	0002      	movs	r2, r0
     ed8:	1dfb      	adds	r3, r7, #7
     eda:	701a      	strb	r2, [r3, #0]
     edc:	1dbb      	adds	r3, r7, #6
     ede:	1c0a      	adds	r2, r1, #0
     ee0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     ee2:	1dfb      	adds	r3, r7, #7
     ee4:	781b      	ldrb	r3, [r3, #0]
     ee6:	0018      	movs	r0, r3
     ee8:	4b0d      	ldr	r3, [pc, #52]	; (f20 <port_pin_set_output_level+0x50>)
     eea:	4798      	blx	r3
     eec:	0003      	movs	r3, r0
     eee:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     ef0:	1dfb      	adds	r3, r7, #7
     ef2:	781b      	ldrb	r3, [r3, #0]
     ef4:	221f      	movs	r2, #31
     ef6:	4013      	ands	r3, r2
     ef8:	2201      	movs	r2, #1
     efa:	409a      	lsls	r2, r3
     efc:	0013      	movs	r3, r2
     efe:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     f00:	1dbb      	adds	r3, r7, #6
     f02:	781b      	ldrb	r3, [r3, #0]
     f04:	2b00      	cmp	r3, #0
     f06:	d003      	beq.n	f10 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     f08:	68fb      	ldr	r3, [r7, #12]
     f0a:	68ba      	ldr	r2, [r7, #8]
     f0c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     f0e:	e002      	b.n	f16 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     f10:	68fb      	ldr	r3, [r7, #12]
     f12:	68ba      	ldr	r2, [r7, #8]
     f14:	615a      	str	r2, [r3, #20]
	}
}
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	46bd      	mov	sp, r7
     f1a:	b004      	add	sp, #16
     f1c:	bd80      	pop	{r7, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	00000ead 	.word	0x00000ead

00000f24 <tm1640_start>:
volatile uint8_t transfer_complete = 1;
SemaphoreHandle_t tm1640_sem;
uint8_t wtc_bus_dummy_data[TM1640_GRIDS + 1] = {0};

static inline void tm1640_start(void)
{
     f24:	b5f0      	push	{r4, r5, r6, r7, lr}
     f26:	b083      	sub	sp, #12
     f28:	af00      	add	r7, sp, #0
    // Switch the CLK pin over to GPIO
    struct port_config gpio_conf;  
    gpio_conf.direction = PORT_PIN_DIR_OUTPUT;
     f2a:	1d3b      	adds	r3, r7, #4
     f2c:	2201      	movs	r2, #1
     f2e:	701a      	strb	r2, [r3, #0]
    gpio_conf.input_pull = PORT_PIN_PULL_UP;
     f30:	1d3b      	adds	r3, r7, #4
     f32:	2201      	movs	r2, #1
     f34:	705a      	strb	r2, [r3, #1]
    gpio_conf.powersave = false;
     f36:	1d3b      	adds	r3, r7, #4
     f38:	2200      	movs	r2, #0
     f3a:	709a      	strb	r2, [r3, #2]
    
    port_pin_set_config(TM1640_CLK_PIN, &gpio_conf);
     f3c:	1d3b      	adds	r3, r7, #4
     f3e:	0019      	movs	r1, r3
     f40:	2009      	movs	r0, #9
     f42:	4b12      	ldr	r3, [pc, #72]	; (f8c <tm1640_start+0x68>)
     f44:	4798      	blx	r3

    // Bring DOUT and CLK low for 1us each    
    port_pin_set_output_level(TM1640_DOUT_PIN, 0);
     f46:	2100      	movs	r1, #0
     f48:	202a      	movs	r0, #42	; 0x2a
     f4a:	4b11      	ldr	r3, [pc, #68]	; (f90 <tm1640_start+0x6c>)
     f4c:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
     f4e:	2000      	movs	r0, #0
     f50:	4b10      	ldr	r3, [pc, #64]	; (f94 <tm1640_start+0x70>)
     f52:	4798      	blx	r3
     f54:	0003      	movs	r3, r0
     f56:	001d      	movs	r5, r3
     f58:	2300      	movs	r3, #0
     f5a:	001e      	movs	r6, r3
     f5c:	4b0e      	ldr	r3, [pc, #56]	; (f98 <tm1640_start+0x74>)
     f5e:	2400      	movs	r4, #0
     f60:	0028      	movs	r0, r5
     f62:	0031      	movs	r1, r6
     f64:	18c0      	adds	r0, r0, r3
     f66:	4161      	adcs	r1, r4
     f68:	4c0c      	ldr	r4, [pc, #48]	; (f9c <tm1640_start+0x78>)
     f6a:	4a0d      	ldr	r2, [pc, #52]	; (fa0 <tm1640_start+0x7c>)
     f6c:	2300      	movs	r3, #0
     f6e:	47a0      	blx	r4
     f70:	0003      	movs	r3, r0
     f72:	000c      	movs	r4, r1
     f74:	0018      	movs	r0, r3
     f76:	4b0b      	ldr	r3, [pc, #44]	; (fa4 <tm1640_start+0x80>)
     f78:	4798      	blx	r3
    port_pin_set_output_level(TM1640_CLK_PIN, 0);    
     f7a:	2100      	movs	r1, #0
     f7c:	2009      	movs	r0, #9
     f7e:	4b04      	ldr	r3, [pc, #16]	; (f90 <tm1640_start+0x6c>)
     f80:	4798      	blx	r3
}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	46bd      	mov	sp, r7
     f86:	b003      	add	sp, #12
     f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	00007931 	.word	0x00007931
     f90:	00000ed1 	.word	0x00000ed1
     f94:	0000a4f5 	.word	0x0000a4f5
     f98:	006acfbf 	.word	0x006acfbf
     f9c:	0000eee5 	.word	0x0000eee5
     fa0:	006acfc0 	.word	0x006acfc0
     fa4:	20000001 	.word	0x20000001

00000fa8 <tm1640_stop>:

static inline void tm1640_stop(void)
{
     fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
     faa:	b085      	sub	sp, #20
     fac:	af00      	add	r7, sp, #0
    // Switch the DO and CLK pins over to GPIOs    
    struct system_pinmux_config clk_conf;        
        
    // Bring DOUT low for 1us, then bring DOUT and CLK high for 1us each    
    port_pin_set_output_level(TM1640_DOUT_PIN, 0);
     fae:	2100      	movs	r1, #0
     fb0:	202a      	movs	r0, #42	; 0x2a
     fb2:	4b26      	ldr	r3, [pc, #152]	; (104c <tm1640_stop+0xa4>)
     fb4:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
     fb6:	2000      	movs	r0, #0
     fb8:	4b25      	ldr	r3, [pc, #148]	; (1050 <tm1640_stop+0xa8>)
     fba:	4798      	blx	r3
     fbc:	0003      	movs	r3, r0
     fbe:	603b      	str	r3, [r7, #0]
     fc0:	2300      	movs	r3, #0
     fc2:	607b      	str	r3, [r7, #4]
     fc4:	4b23      	ldr	r3, [pc, #140]	; (1054 <tm1640_stop+0xac>)
     fc6:	2400      	movs	r4, #0
     fc8:	6838      	ldr	r0, [r7, #0]
     fca:	6879      	ldr	r1, [r7, #4]
     fcc:	18c0      	adds	r0, r0, r3
     fce:	4161      	adcs	r1, r4
     fd0:	4c21      	ldr	r4, [pc, #132]	; (1058 <tm1640_stop+0xb0>)
     fd2:	4a22      	ldr	r2, [pc, #136]	; (105c <tm1640_stop+0xb4>)
     fd4:	2300      	movs	r3, #0
     fd6:	47a0      	blx	r4
     fd8:	0003      	movs	r3, r0
     fda:	000c      	movs	r4, r1
     fdc:	0018      	movs	r0, r3
     fde:	4b20      	ldr	r3, [pc, #128]	; (1060 <tm1640_stop+0xb8>)
     fe0:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);
     fe2:	2101      	movs	r1, #1
     fe4:	2009      	movs	r0, #9
     fe6:	4b19      	ldr	r3, [pc, #100]	; (104c <tm1640_stop+0xa4>)
     fe8:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
     fea:	2000      	movs	r0, #0
     fec:	4b18      	ldr	r3, [pc, #96]	; (1050 <tm1640_stop+0xa8>)
     fee:	4798      	blx	r3
     ff0:	0003      	movs	r3, r0
     ff2:	001d      	movs	r5, r3
     ff4:	2300      	movs	r3, #0
     ff6:	001e      	movs	r6, r3
     ff8:	4b16      	ldr	r3, [pc, #88]	; (1054 <tm1640_stop+0xac>)
     ffa:	2400      	movs	r4, #0
     ffc:	0028      	movs	r0, r5
     ffe:	0031      	movs	r1, r6
    1000:	18c0      	adds	r0, r0, r3
    1002:	4161      	adcs	r1, r4
    1004:	4c14      	ldr	r4, [pc, #80]	; (1058 <tm1640_stop+0xb0>)
    1006:	4a15      	ldr	r2, [pc, #84]	; (105c <tm1640_stop+0xb4>)
    1008:	2300      	movs	r3, #0
    100a:	47a0      	blx	r4
    100c:	0003      	movs	r3, r0
    100e:	000c      	movs	r4, r1
    1010:	0018      	movs	r0, r3
    1012:	4b13      	ldr	r3, [pc, #76]	; (1060 <tm1640_stop+0xb8>)
    1014:	4798      	blx	r3
    port_pin_set_output_level(TM1640_DOUT_PIN, 1);    
    1016:	2101      	movs	r1, #1
    1018:	202a      	movs	r0, #42	; 0x2a
    101a:	4b0c      	ldr	r3, [pc, #48]	; (104c <tm1640_stop+0xa4>)
    101c:	4798      	blx	r3

    // Restore peripheral control
    system_pinmux_get_config_defaults(&clk_conf);
    101e:	230c      	movs	r3, #12
    1020:	18fb      	adds	r3, r7, r3
    1022:	0018      	movs	r0, r3
    1024:	4b0f      	ldr	r3, [pc, #60]	; (1064 <tm1640_stop+0xbc>)
    1026:	4798      	blx	r3
    clk_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1028:	230c      	movs	r3, #12
    102a:	18fb      	adds	r3, r7, r3
    102c:	2200      	movs	r2, #0
    102e:	705a      	strb	r2, [r3, #1]
    clk_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    1030:	230c      	movs	r3, #12
    1032:	18fb      	adds	r3, r7, r3
    1034:	2202      	movs	r2, #2
    1036:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &clk_conf);    
    1038:	230c      	movs	r3, #12
    103a:	18fb      	adds	r3, r7, r3
    103c:	0019      	movs	r1, r3
    103e:	2009      	movs	r0, #9
    1040:	4b09      	ldr	r3, [pc, #36]	; (1068 <tm1640_stop+0xc0>)
    1042:	4798      	blx	r3
}
    1044:	46c0      	nop			; (mov r8, r8)
    1046:	46bd      	mov	sp, r7
    1048:	b005      	add	sp, #20
    104a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    104c:	00000ed1 	.word	0x00000ed1
    1050:	0000a4f5 	.word	0x0000a4f5
    1054:	006acfbf 	.word	0x006acfbf
    1058:	0000eee5 	.word	0x0000eee5
    105c:	006acfc0 	.word	0x006acfc0
    1060:	20000001 	.word	0x20000001
    1064:	00000e25 	.word	0x00000e25
    1068:	0000a8b9 	.word	0x0000a8b9

0000106c <tm1640_write>:

static inline void tm1640_write(uint8_t byte)
{
    106c:	b5f0      	push	{r4, r5, r6, r7, lr}
    106e:	b089      	sub	sp, #36	; 0x24
    1070:	af00      	add	r7, sp, #0
    1072:	0002      	movs	r2, r0
    1074:	2317      	movs	r3, #23
    1076:	18fb      	adds	r3, r7, r3
    1078:	701a      	strb	r2, [r3, #0]
    uint8_t bit;

    // TM1640 requires LSB to be transmitted first
    for (bit = 0; bit < 8; bit++) {
    107a:	230f      	movs	r3, #15
    107c:	2210      	movs	r2, #16
    107e:	4694      	mov	ip, r2
    1080:	44bc      	add	ip, r7
    1082:	4463      	add	r3, ip
    1084:	2200      	movs	r2, #0
    1086:	701a      	strb	r2, [r3, #0]
    1088:	e06d      	b.n	1166 <tm1640_write+0xfa>
        if ((byte >> bit) & 0x01) 
    108a:	2317      	movs	r3, #23
    108c:	18fb      	adds	r3, r7, r3
    108e:	781a      	ldrb	r2, [r3, #0]
    1090:	230f      	movs	r3, #15
    1092:	2110      	movs	r1, #16
    1094:	468c      	mov	ip, r1
    1096:	44bc      	add	ip, r7
    1098:	4463      	add	r3, ip
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	411a      	asrs	r2, r3
    109e:	0013      	movs	r3, r2
    10a0:	2201      	movs	r2, #1
    10a2:	4013      	ands	r3, r2
    10a4:	d004      	beq.n	10b0 <tm1640_write+0x44>
            port_pin_set_output_level(TM1640_DOUT_PIN, 1);    
    10a6:	2101      	movs	r1, #1
    10a8:	202a      	movs	r0, #42	; 0x2a
    10aa:	4b35      	ldr	r3, [pc, #212]	; (1180 <tm1640_write+0x114>)
    10ac:	4798      	blx	r3
    10ae:	e003      	b.n	10b8 <tm1640_write+0x4c>
        else
            port_pin_set_output_level(TM1640_DOUT_PIN, 0);    
    10b0:	2100      	movs	r1, #0
    10b2:	202a      	movs	r0, #42	; 0x2a
    10b4:	4b32      	ldr	r3, [pc, #200]	; (1180 <tm1640_write+0x114>)
    10b6:	4798      	blx	r3

        delay_us(TM1640_BIT_TIME);
    10b8:	2000      	movs	r0, #0
    10ba:	4b32      	ldr	r3, [pc, #200]	; (1184 <tm1640_write+0x118>)
    10bc:	4798      	blx	r3
    10be:	0003      	movs	r3, r0
    10c0:	001d      	movs	r5, r3
    10c2:	2300      	movs	r3, #0
    10c4:	001e      	movs	r6, r3
    10c6:	4b30      	ldr	r3, [pc, #192]	; (1188 <tm1640_write+0x11c>)
    10c8:	2400      	movs	r4, #0
    10ca:	195b      	adds	r3, r3, r5
    10cc:	4174      	adcs	r4, r6
    10ce:	0018      	movs	r0, r3
    10d0:	0021      	movs	r1, r4
    10d2:	4c2e      	ldr	r4, [pc, #184]	; (118c <tm1640_write+0x120>)
    10d4:	4a2e      	ldr	r2, [pc, #184]	; (1190 <tm1640_write+0x124>)
    10d6:	2300      	movs	r3, #0
    10d8:	47a0      	blx	r4
    10da:	0003      	movs	r3, r0
    10dc:	000c      	movs	r4, r1
    10de:	0018      	movs	r0, r3
    10e0:	4b2c      	ldr	r3, [pc, #176]	; (1194 <tm1640_write+0x128>)
    10e2:	4798      	blx	r3
        port_pin_set_output_level(TM1640_CLK_PIN, 1);
    10e4:	2101      	movs	r1, #1
    10e6:	2009      	movs	r0, #9
    10e8:	4b25      	ldr	r3, [pc, #148]	; (1180 <tm1640_write+0x114>)
    10ea:	4798      	blx	r3
        delay_us(TM1640_BIT_TIME);
    10ec:	2000      	movs	r0, #0
    10ee:	4b25      	ldr	r3, [pc, #148]	; (1184 <tm1640_write+0x118>)
    10f0:	4798      	blx	r3
    10f2:	0003      	movs	r3, r0
    10f4:	60bb      	str	r3, [r7, #8]
    10f6:	2300      	movs	r3, #0
    10f8:	60fb      	str	r3, [r7, #12]
    10fa:	4b23      	ldr	r3, [pc, #140]	; (1188 <tm1640_write+0x11c>)
    10fc:	2400      	movs	r4, #0
    10fe:	68b8      	ldr	r0, [r7, #8]
    1100:	68f9      	ldr	r1, [r7, #12]
    1102:	18c0      	adds	r0, r0, r3
    1104:	4161      	adcs	r1, r4
    1106:	4c21      	ldr	r4, [pc, #132]	; (118c <tm1640_write+0x120>)
    1108:	4a21      	ldr	r2, [pc, #132]	; (1190 <tm1640_write+0x124>)
    110a:	2300      	movs	r3, #0
    110c:	47a0      	blx	r4
    110e:	0003      	movs	r3, r0
    1110:	000c      	movs	r4, r1
    1112:	0018      	movs	r0, r3
    1114:	4b1f      	ldr	r3, [pc, #124]	; (1194 <tm1640_write+0x128>)
    1116:	4798      	blx	r3
        port_pin_set_output_level(TM1640_CLK_PIN, 0);
    1118:	2100      	movs	r1, #0
    111a:	2009      	movs	r0, #9
    111c:	4b18      	ldr	r3, [pc, #96]	; (1180 <tm1640_write+0x114>)
    111e:	4798      	blx	r3
        delay_us(TM1640_BIT_TIME);
    1120:	2000      	movs	r0, #0
    1122:	4b18      	ldr	r3, [pc, #96]	; (1184 <tm1640_write+0x118>)
    1124:	4798      	blx	r3
    1126:	0003      	movs	r3, r0
    1128:	603b      	str	r3, [r7, #0]
    112a:	2300      	movs	r3, #0
    112c:	607b      	str	r3, [r7, #4]
    112e:	4b16      	ldr	r3, [pc, #88]	; (1188 <tm1640_write+0x11c>)
    1130:	2400      	movs	r4, #0
    1132:	6838      	ldr	r0, [r7, #0]
    1134:	6879      	ldr	r1, [r7, #4]
    1136:	18c0      	adds	r0, r0, r3
    1138:	4161      	adcs	r1, r4
    113a:	4c14      	ldr	r4, [pc, #80]	; (118c <tm1640_write+0x120>)
    113c:	4a14      	ldr	r2, [pc, #80]	; (1190 <tm1640_write+0x124>)
    113e:	2300      	movs	r3, #0
    1140:	47a0      	blx	r4
    1142:	0003      	movs	r3, r0
    1144:	000c      	movs	r4, r1
    1146:	0018      	movs	r0, r3
    1148:	4b12      	ldr	r3, [pc, #72]	; (1194 <tm1640_write+0x128>)
    114a:	4798      	blx	r3
static inline void tm1640_write(uint8_t byte)
{
    uint8_t bit;

    // TM1640 requires LSB to be transmitted first
    for (bit = 0; bit < 8; bit++) {
    114c:	230f      	movs	r3, #15
    114e:	2210      	movs	r2, #16
    1150:	4694      	mov	ip, r2
    1152:	44bc      	add	ip, r7
    1154:	4463      	add	r3, ip
    1156:	781a      	ldrb	r2, [r3, #0]
    1158:	230f      	movs	r3, #15
    115a:	2110      	movs	r1, #16
    115c:	468c      	mov	ip, r1
    115e:	44bc      	add	ip, r7
    1160:	4463      	add	r3, ip
    1162:	3201      	adds	r2, #1
    1164:	701a      	strb	r2, [r3, #0]
    1166:	230f      	movs	r3, #15
    1168:	2210      	movs	r2, #16
    116a:	4694      	mov	ip, r2
    116c:	44bc      	add	ip, r7
    116e:	4463      	add	r3, ip
    1170:	781b      	ldrb	r3, [r3, #0]
    1172:	2b07      	cmp	r3, #7
    1174:	d989      	bls.n	108a <tm1640_write+0x1e>
        port_pin_set_output_level(TM1640_CLK_PIN, 1);
        delay_us(TM1640_BIT_TIME);
        port_pin_set_output_level(TM1640_CLK_PIN, 0);
        delay_us(TM1640_BIT_TIME);
    }
}
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	46bd      	mov	sp, r7
    117a:	b009      	add	sp, #36	; 0x24
    117c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	00000ed1 	.word	0x00000ed1
    1184:	0000a4f5 	.word	0x0000a4f5
    1188:	006acfbf 	.word	0x006acfbf
    118c:	0000eee5 	.word	0x0000eee5
    1190:	006acfc0 	.word	0x006acfc0
    1194:	20000001 	.word	0x20000001

00001198 <tm1640_write_cmd>:


static enum status_code tm1640_write_cmd(uint8_t cmd, uint8_t data)
{
    1198:	b580      	push	{r7, lr}
    119a:	b082      	sub	sp, #8
    119c:	af00      	add	r7, sp, #0
    119e:	0002      	movs	r2, r0
    11a0:	1dfb      	adds	r3, r7, #7
    11a2:	701a      	strb	r2, [r3, #0]
    11a4:	1dbb      	adds	r3, r7, #6
    11a6:	1c0a      	adds	r2, r1, #0
    11a8:	701a      	strb	r2, [r3, #0]
    taskENTER_CRITICAL();
    11aa:	4b0f      	ldr	r3, [pc, #60]	; (11e8 <tm1640_write_cmd+0x50>)
    11ac:	4798      	blx	r3
    
    tm1640_start();
    11ae:	4b0f      	ldr	r3, [pc, #60]	; (11ec <tm1640_write_cmd+0x54>)
    11b0:	4798      	blx	r3
    tm1640_write((cmd & CTRL_CMD_MASK) | (data & ~CTRL_CMD_MASK));
    11b2:	1dfb      	adds	r3, r7, #7
    11b4:	781b      	ldrb	r3, [r3, #0]
    11b6:	b25b      	sxtb	r3, r3
    11b8:	223f      	movs	r2, #63	; 0x3f
    11ba:	4393      	bics	r3, r2
    11bc:	b25a      	sxtb	r2, r3
    11be:	1dbb      	adds	r3, r7, #6
    11c0:	781b      	ldrb	r3, [r3, #0]
    11c2:	b25b      	sxtb	r3, r3
    11c4:	213f      	movs	r1, #63	; 0x3f
    11c6:	400b      	ands	r3, r1
    11c8:	b25b      	sxtb	r3, r3
    11ca:	4313      	orrs	r3, r2
    11cc:	b25b      	sxtb	r3, r3
    11ce:	b2db      	uxtb	r3, r3
    11d0:	0018      	movs	r0, r3
    11d2:	4b07      	ldr	r3, [pc, #28]	; (11f0 <tm1640_write_cmd+0x58>)
    11d4:	4798      	blx	r3
    tm1640_stop();
    11d6:	4b07      	ldr	r3, [pc, #28]	; (11f4 <tm1640_write_cmd+0x5c>)
    11d8:	4798      	blx	r3

    taskEXIT_CRITICAL();
    11da:	4b07      	ldr	r3, [pc, #28]	; (11f8 <tm1640_write_cmd+0x60>)
    11dc:	4798      	blx	r3

    return STATUS_OK;
    11de:	2300      	movs	r3, #0
}
    11e0:	0018      	movs	r0, r3
    11e2:	46bd      	mov	sp, r7
    11e4:	b002      	add	sp, #8
    11e6:	bd80      	pop	{r7, pc}
    11e8:	0000af19 	.word	0x0000af19
    11ec:	00000f25 	.word	0x00000f25
    11f0:	0000106d 	.word	0x0000106d
    11f4:	00000fa9 	.word	0x00000fa9
    11f8:	0000af3d 	.word	0x0000af3d

000011fc <tm1640_init>:

void tm1640_init(void)
{
    11fc:	b580      	push	{r7, lr}
    11fe:	b082      	sub	sp, #8
    1200:	af00      	add	r7, sp, #0
    struct port_config gpio_conf;
    gpio_conf.direction = PORT_PIN_DIR_OUTPUT;
    1202:	1d3b      	adds	r3, r7, #4
    1204:	2201      	movs	r2, #1
    1206:	701a      	strb	r2, [r3, #0]
    gpio_conf.input_pull = PORT_PIN_PULL_UP;
    1208:	1d3b      	adds	r3, r7, #4
    120a:	2201      	movs	r2, #1
    120c:	705a      	strb	r2, [r3, #1]
    gpio_conf.powersave = false;
    120e:	1d3b      	adds	r3, r7, #4
    1210:	2200      	movs	r2, #0
    1212:	709a      	strb	r2, [r3, #2]
    port_pin_set_config(TM1640_DOUT_PIN, &gpio_conf);
    1214:	1d3b      	adds	r3, r7, #4
    1216:	0019      	movs	r1, r3
    1218:	202a      	movs	r0, #42	; 0x2a
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <tm1640_init+0x34>)
    121c:	4798      	blx	r3
    port_pin_set_output_level(TM1640_DOUT_PIN, 1);
    121e:	2101      	movs	r1, #1
    1220:	202a      	movs	r0, #42	; 0x2a
    1222:	4b04      	ldr	r3, [pc, #16]	; (1234 <tm1640_init+0x38>)
    1224:	4798      	blx	r3
}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	46bd      	mov	sp, r7
    122a:	b002      	add	sp, #8
    122c:	bd80      	pop	{r7, pc}
    122e:	46c0      	nop			; (mov r8, r8)
    1230:	00007931 	.word	0x00007931
    1234:	00000ed1 	.word	0x00000ed1

00001238 <tm1640_display_on>:


enum status_code tm1640_display_on(uint8_t on)
{
    1238:	b580      	push	{r7, lr}
    123a:	b084      	sub	sp, #16
    123c:	af00      	add	r7, sp, #0
    123e:	0002      	movs	r2, r0
    1240:	1dfb      	adds	r3, r7, #7
    1242:	701a      	strb	r2, [r3, #0]
    uint8_t display_on = CTRL_CMD_DISP_OFF;
    1244:	230f      	movs	r3, #15
    1246:	18fb      	adds	r3, r7, r3
    1248:	2200      	movs	r2, #0
    124a:	701a      	strb	r2, [r3, #0]

    if (on) 
    124c:	1dfb      	adds	r3, r7, #7
    124e:	781b      	ldrb	r3, [r3, #0]
    1250:	2b00      	cmp	r3, #0
    1252:	d003      	beq.n	125c <tm1640_display_on+0x24>
        display_on = CTRL_CMD_DISP_ON | BRIGHT_3; 
    1254:	230f      	movs	r3, #15
    1256:	18fb      	adds	r3, r7, r3
    1258:	228b      	movs	r2, #139	; 0x8b
    125a:	701a      	strb	r2, [r3, #0]

    return tm1640_write_cmd(CTRL_CMD, display_on); 
    125c:	230f      	movs	r3, #15
    125e:	18fb      	adds	r3, r7, r3
    1260:	781b      	ldrb	r3, [r3, #0]
    1262:	0019      	movs	r1, r3
    1264:	2080      	movs	r0, #128	; 0x80
    1266:	4b03      	ldr	r3, [pc, #12]	; (1274 <tm1640_display_on+0x3c>)
    1268:	4798      	blx	r3
    126a:	0003      	movs	r3, r0
}
    126c:	0018      	movs	r0, r3
    126e:	46bd      	mov	sp, r7
    1270:	b004      	add	sp, #16
    1272:	bd80      	pop	{r7, pc}
    1274:	00001199 	.word	0x00001199

00001278 <tm1640_set_display>:

enum status_code tm1640_set_display(uint8_t *disp, uint8_t length, tm1640_brightness_t brightness)
{
    1278:	b590      	push	{r4, r7, lr}
    127a:	b087      	sub	sp, #28
    127c:	af00      	add	r7, sp, #0
    127e:	6078      	str	r0, [r7, #4]
    1280:	0008      	movs	r0, r1
    1282:	0011      	movs	r1, r2
    1284:	1cfb      	adds	r3, r7, #3
    1286:	1c02      	adds	r2, r0, #0
    1288:	701a      	strb	r2, [r3, #0]
    128a:	1cbb      	adds	r3, r7, #2
    128c:	1c0a      	adds	r2, r1, #0
    128e:	701a      	strb	r2, [r3, #0]
    enum status_code status = STATUS_OK;
    1290:	2316      	movs	r3, #22
    1292:	18fb      	adds	r3, r7, r3
    1294:	2200      	movs	r2, #0
    1296:	701a      	strb	r2, [r3, #0]
    struct port_config di_conf;    
    struct system_pinmux_config pin_conf;
    uint8_t grids;
       
    // Take the display bus mutex
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
    1298:	4b32      	ldr	r3, [pc, #200]	; (1364 <tm1640_set_display+0xec>)
    129a:	6818      	ldr	r0, [r3, #0]
    129c:	2301      	movs	r3, #1
    129e:	425a      	negs	r2, r3
    12a0:	2300      	movs	r3, #0
    12a2:	2100      	movs	r1, #0
    12a4:	4c30      	ldr	r4, [pc, #192]	; (1368 <tm1640_set_display+0xf0>)
    12a6:	47a0      	blx	r4
    12a8:	1e03      	subs	r3, r0, #0
    12aa:	d101      	bne.n	12b0 <tm1640_set_display+0x38>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
    12ac:	2312      	movs	r3, #18
    12ae:	e055      	b.n	135c <tm1640_set_display+0xe4>
    }

    taskENTER_CRITICAL();
    12b0:	4b2e      	ldr	r3, [pc, #184]	; (136c <tm1640_set_display+0xf4>)
    12b2:	4798      	blx	r3

    system_pinmux_get_config_defaults(&pin_conf);
    12b4:	230c      	movs	r3, #12
    12b6:	18fb      	adds	r3, r7, r3
    12b8:	0018      	movs	r0, r3
    12ba:	4b2d      	ldr	r3, [pc, #180]	; (1370 <tm1640_set_display+0xf8>)
    12bc:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12be:	230c      	movs	r3, #12
    12c0:	18fb      	adds	r3, r7, r3
    12c2:	2200      	movs	r2, #0
    12c4:	705a      	strb	r2, [r3, #1]
    pin_conf.mux_position = PINMUX_PA08C_SERCOM0_PAD0 & 0xFFFF;
    12c6:	230c      	movs	r3, #12
    12c8:	18fb      	adds	r3, r7, r3
    12ca:	2202      	movs	r2, #2
    12cc:	701a      	strb	r2, [r3, #0]

    // Data input pin for the WTC6508 needs to be set to a GPIO so it isn't driven
    // when the clock is generated for the TM1640
    di_conf.direction = PORT_PIN_DIR_INPUT;
    12ce:	2310      	movs	r3, #16
    12d0:	18fb      	adds	r3, r7, r3
    12d2:	2200      	movs	r2, #0
    12d4:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
    12d6:	2310      	movs	r3, #16
    12d8:	18fb      	adds	r3, r7, r3
    12da:	2201      	movs	r2, #1
    12dc:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
    12de:	2310      	movs	r3, #16
    12e0:	18fb      	adds	r3, r7, r3
    12e2:	2200      	movs	r2, #0
    12e4:	709a      	strb	r2, [r3, #2]
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    12e6:	2310      	movs	r3, #16
    12e8:	18fb      	adds	r3, r7, r3
    12ea:	0019      	movs	r1, r3
    12ec:	2008      	movs	r0, #8
    12ee:	4b21      	ldr	r3, [pc, #132]	; (1374 <tm1640_set_display+0xfc>)
    12f0:	4798      	blx	r3

    tm1640_start();
    12f2:	4b21      	ldr	r3, [pc, #132]	; (1378 <tm1640_set_display+0x100>)
    12f4:	4798      	blx	r3
    tm1640_write(ADDR_CMD_ADDR0);
    12f6:	20c0      	movs	r0, #192	; 0xc0
    12f8:	4b20      	ldr	r3, [pc, #128]	; (137c <tm1640_set_display+0x104>)
    12fa:	4798      	blx	r3
    for (grids = 0; grids < length; grids++) {
    12fc:	2317      	movs	r3, #23
    12fe:	18fb      	adds	r3, r7, r3
    1300:	2200      	movs	r2, #0
    1302:	701a      	strb	r2, [r3, #0]
    1304:	e00f      	b.n	1326 <tm1640_set_display+0xae>
        tm1640_write(disp[grids]);
    1306:	2317      	movs	r3, #23
    1308:	18fb      	adds	r3, r7, r3
    130a:	781b      	ldrb	r3, [r3, #0]
    130c:	687a      	ldr	r2, [r7, #4]
    130e:	18d3      	adds	r3, r2, r3
    1310:	781b      	ldrb	r3, [r3, #0]
    1312:	0018      	movs	r0, r3
    1314:	4b19      	ldr	r3, [pc, #100]	; (137c <tm1640_set_display+0x104>)
    1316:	4798      	blx	r3
    di_conf.powersave = false;
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);

    tm1640_start();
    tm1640_write(ADDR_CMD_ADDR0);
    for (grids = 0; grids < length; grids++) {
    1318:	2317      	movs	r3, #23
    131a:	18fb      	adds	r3, r7, r3
    131c:	781a      	ldrb	r2, [r3, #0]
    131e:	2317      	movs	r3, #23
    1320:	18fb      	adds	r3, r7, r3
    1322:	3201      	adds	r2, #1
    1324:	701a      	strb	r2, [r3, #0]
    1326:	2317      	movs	r3, #23
    1328:	18fa      	adds	r2, r7, r3
    132a:	1cfb      	adds	r3, r7, #3
    132c:	7812      	ldrb	r2, [r2, #0]
    132e:	781b      	ldrb	r3, [r3, #0]
    1330:	429a      	cmp	r2, r3
    1332:	d3e8      	bcc.n	1306 <tm1640_set_display+0x8e>
        tm1640_write(disp[grids]);
    }
    tm1640_stop();                    
    1334:	4b12      	ldr	r3, [pc, #72]	; (1380 <tm1640_set_display+0x108>)
    1336:	4798      	blx	r3

    // Restore pin function to the WTC6508 SPI
    system_pinmux_pin_set_config(PINMUX_PA08C_SERCOM0_PAD0 >> 16, &pin_conf);       
    1338:	230c      	movs	r3, #12
    133a:	18fb      	adds	r3, r7, r3
    133c:	0019      	movs	r1, r3
    133e:	2008      	movs	r0, #8
    1340:	4b10      	ldr	r3, [pc, #64]	; (1384 <tm1640_set_display+0x10c>)
    1342:	4798      	blx	r3
    
    taskEXIT_CRITICAL();                 
    1344:	4b10      	ldr	r3, [pc, #64]	; (1388 <tm1640_set_display+0x110>)
    1346:	4798      	blx	r3

    xSemaphoreGive(display_mutex);     
    1348:	4b06      	ldr	r3, [pc, #24]	; (1364 <tm1640_set_display+0xec>)
    134a:	6818      	ldr	r0, [r3, #0]
    134c:	2300      	movs	r3, #0
    134e:	2200      	movs	r2, #0
    1350:	2100      	movs	r1, #0
    1352:	4c0e      	ldr	r4, [pc, #56]	; (138c <tm1640_set_display+0x114>)
    1354:	47a0      	blx	r4
    return status;
    1356:	2316      	movs	r3, #22
    1358:	18fb      	adds	r3, r7, r3
    135a:	781b      	ldrb	r3, [r3, #0]
}
    135c:	0018      	movs	r0, r3
    135e:	46bd      	mov	sp, r7
    1360:	b007      	add	sp, #28
    1362:	bd90      	pop	{r4, r7, pc}
    1364:	200045fc 	.word	0x200045fc
    1368:	0000b5d9 	.word	0x0000b5d9
    136c:	0000af19 	.word	0x0000af19
    1370:	00000e25 	.word	0x00000e25
    1374:	00007931 	.word	0x00007931
    1378:	00000f25 	.word	0x00000f25
    137c:	0000106d 	.word	0x0000106d
    1380:	00000fa9 	.word	0x00000fa9
    1384:	0000a8b9 	.word	0x0000a8b9
    1388:	0000af3d 	.word	0x0000af3d
    138c:	0000b2d9 	.word	0x0000b2d9

00001390 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    1390:	b580      	push	{r7, lr}
    1392:	b082      	sub	sp, #8
    1394:	af00      	add	r7, sp, #0
    1396:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1398:	687b      	ldr	r3, [r7, #4]
    139a:	2280      	movs	r2, #128	; 0x80
    139c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    139e:	687b      	ldr	r3, [r7, #4]
    13a0:	2200      	movs	r2, #0
    13a2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    13a4:	687b      	ldr	r3, [r7, #4]
    13a6:	2201      	movs	r2, #1
    13a8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    13aa:	687b      	ldr	r3, [r7, #4]
    13ac:	2200      	movs	r2, #0
    13ae:	70da      	strb	r2, [r3, #3]
}
    13b0:	46c0      	nop			; (mov r8, r8)
    13b2:	46bd      	mov	sp, r7
    13b4:	b002      	add	sp, #8
    13b6:	bd80      	pop	{r7, pc}

000013b8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    13b8:	b580      	push	{r7, lr}
    13ba:	b084      	sub	sp, #16
    13bc:	af00      	add	r7, sp, #0
    13be:	0002      	movs	r2, r0
    13c0:	1dfb      	adds	r3, r7, #7
    13c2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    13c4:	230f      	movs	r3, #15
    13c6:	18fb      	adds	r3, r7, r3
    13c8:	1dfa      	adds	r2, r7, #7
    13ca:	7812      	ldrb	r2, [r2, #0]
    13cc:	09d2      	lsrs	r2, r2, #7
    13ce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    13d0:	230e      	movs	r3, #14
    13d2:	18fb      	adds	r3, r7, r3
    13d4:	1dfa      	adds	r2, r7, #7
    13d6:	7812      	ldrb	r2, [r2, #0]
    13d8:	0952      	lsrs	r2, r2, #5
    13da:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    13dc:	4b0d      	ldr	r3, [pc, #52]	; (1414 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    13de:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    13e0:	230f      	movs	r3, #15
    13e2:	18fb      	adds	r3, r7, r3
    13e4:	781b      	ldrb	r3, [r3, #0]
    13e6:	2b00      	cmp	r3, #0
    13e8:	d10f      	bne.n	140a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    13ea:	230f      	movs	r3, #15
    13ec:	18fb      	adds	r3, r7, r3
    13ee:	781b      	ldrb	r3, [r3, #0]
    13f0:	009b      	lsls	r3, r3, #2
    13f2:	2210      	movs	r2, #16
    13f4:	4694      	mov	ip, r2
    13f6:	44bc      	add	ip, r7
    13f8:	4463      	add	r3, ip
    13fa:	3b08      	subs	r3, #8
    13fc:	681a      	ldr	r2, [r3, #0]
    13fe:	230e      	movs	r3, #14
    1400:	18fb      	adds	r3, r7, r3
    1402:	781b      	ldrb	r3, [r3, #0]
    1404:	01db      	lsls	r3, r3, #7
    1406:	18d3      	adds	r3, r2, r3
    1408:	e000      	b.n	140c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    140a:	2300      	movs	r3, #0
	}
}
    140c:	0018      	movs	r0, r3
    140e:	46bd      	mov	sp, r7
    1410:	b004      	add	sp, #16
    1412:	bd80      	pop	{r7, pc}
    1414:	41004400 	.word	0x41004400

00001418 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1418:	b580      	push	{r7, lr}
    141a:	b082      	sub	sp, #8
    141c:	af00      	add	r7, sp, #0
    141e:	0002      	movs	r2, r0
    1420:	1dfb      	adds	r3, r7, #7
    1422:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1424:	4b06      	ldr	r3, [pc, #24]	; (1440 <system_interrupt_enable+0x28>)
    1426:	1dfa      	adds	r2, r7, #7
    1428:	7812      	ldrb	r2, [r2, #0]
    142a:	0011      	movs	r1, r2
    142c:	221f      	movs	r2, #31
    142e:	400a      	ands	r2, r1
    1430:	2101      	movs	r1, #1
    1432:	4091      	lsls	r1, r2
    1434:	000a      	movs	r2, r1
    1436:	601a      	str	r2, [r3, #0]
}
    1438:	46c0      	nop			; (mov r8, r8)
    143a:	46bd      	mov	sp, r7
    143c:	b002      	add	sp, #8
    143e:	bd80      	pop	{r7, pc}
    1440:	e000e100 	.word	0xe000e100

00001444 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1444:	b580      	push	{r7, lr}
    1446:	b082      	sub	sp, #8
    1448:	af00      	add	r7, sp, #0
    144a:	0002      	movs	r2, r0
    144c:	1dfb      	adds	r3, r7, #7
    144e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1450:	1dfb      	adds	r3, r7, #7
    1452:	781b      	ldrb	r3, [r3, #0]
    1454:	0018      	movs	r0, r3
    1456:	4b03      	ldr	r3, [pc, #12]	; (1464 <port_get_group_from_gpio_pin+0x20>)
    1458:	4798      	blx	r3
    145a:	0003      	movs	r3, r0
}
    145c:	0018      	movs	r0, r3
    145e:	46bd      	mov	sp, r7
    1460:	b002      	add	sp, #8
    1462:	bd80      	pop	{r7, pc}
    1464:	000013b9 	.word	0x000013b9

00001468 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1468:	b580      	push	{r7, lr}
    146a:	b084      	sub	sp, #16
    146c:	af00      	add	r7, sp, #0
    146e:	0002      	movs	r2, r0
    1470:	1dfb      	adds	r3, r7, #7
    1472:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1474:	1dfb      	adds	r3, r7, #7
    1476:	781b      	ldrb	r3, [r3, #0]
    1478:	0018      	movs	r0, r3
    147a:	4b0b      	ldr	r3, [pc, #44]	; (14a8 <port_pin_get_input_level+0x40>)
    147c:	4798      	blx	r3
    147e:	0003      	movs	r3, r0
    1480:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1482:	1dfb      	adds	r3, r7, #7
    1484:	781b      	ldrb	r3, [r3, #0]
    1486:	221f      	movs	r2, #31
    1488:	4013      	ands	r3, r2
    148a:	2201      	movs	r2, #1
    148c:	409a      	lsls	r2, r3
    148e:	0013      	movs	r3, r2
    1490:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    1492:	68fb      	ldr	r3, [r7, #12]
    1494:	6a1b      	ldr	r3, [r3, #32]
    1496:	68ba      	ldr	r2, [r7, #8]
    1498:	4013      	ands	r3, r2
    149a:	1e5a      	subs	r2, r3, #1
    149c:	4193      	sbcs	r3, r2
    149e:	b2db      	uxtb	r3, r3
}
    14a0:	0018      	movs	r0, r3
    14a2:	46bd      	mov	sp, r7
    14a4:	b004      	add	sp, #16
    14a6:	bd80      	pop	{r7, pc}
    14a8:	00001445 	.word	0x00001445

000014ac <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    14ac:	b580      	push	{r7, lr}
    14ae:	b084      	sub	sp, #16
    14b0:	af00      	add	r7, sp, #0
    14b2:	0002      	movs	r2, r0
    14b4:	1dfb      	adds	r3, r7, #7
    14b6:	701a      	strb	r2, [r3, #0]
    14b8:	1dbb      	adds	r3, r7, #6
    14ba:	1c0a      	adds	r2, r1, #0
    14bc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    14be:	1dfb      	adds	r3, r7, #7
    14c0:	781b      	ldrb	r3, [r3, #0]
    14c2:	0018      	movs	r0, r3
    14c4:	4b0d      	ldr	r3, [pc, #52]	; (14fc <port_pin_set_output_level+0x50>)
    14c6:	4798      	blx	r3
    14c8:	0003      	movs	r3, r0
    14ca:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    14cc:	1dfb      	adds	r3, r7, #7
    14ce:	781b      	ldrb	r3, [r3, #0]
    14d0:	221f      	movs	r2, #31
    14d2:	4013      	ands	r3, r2
    14d4:	2201      	movs	r2, #1
    14d6:	409a      	lsls	r2, r3
    14d8:	0013      	movs	r3, r2
    14da:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    14dc:	1dbb      	adds	r3, r7, #6
    14de:	781b      	ldrb	r3, [r3, #0]
    14e0:	2b00      	cmp	r3, #0
    14e2:	d003      	beq.n	14ec <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    14e4:	68fb      	ldr	r3, [r7, #12]
    14e6:	68ba      	ldr	r2, [r7, #8]
    14e8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    14ea:	e002      	b.n	14f2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    14ec:	68fb      	ldr	r3, [r7, #12]
    14ee:	68ba      	ldr	r2, [r7, #8]
    14f0:	615a      	str	r2, [r3, #20]
	}
}
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	46bd      	mov	sp, r7
    14f6:	b004      	add	sp, #16
    14f8:	bd80      	pop	{r7, pc}
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	00001445 	.word	0x00001445

00001500 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1500:	b580      	push	{r7, lr}
    1502:	b084      	sub	sp, #16
    1504:	af00      	add	r7, sp, #0
    1506:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	681b      	ldr	r3, [r3, #0]
    150c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	69db      	ldr	r3, [r3, #28]
    1512:	1e5a      	subs	r2, r3, #1
    1514:	4193      	sbcs	r3, r2
    1516:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1518:	0018      	movs	r0, r3
    151a:	46bd      	mov	sp, r7
    151c:	b004      	add	sp, #16
    151e:	bd80      	pop	{r7, pc}

00001520 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1520:	b580      	push	{r7, lr}
    1522:	b082      	sub	sp, #8
    1524:	af00      	add	r7, sp, #0
    1526:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1528:	687b      	ldr	r3, [r7, #4]
    152a:	2201      	movs	r2, #1
    152c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    152e:	687b      	ldr	r3, [r7, #4]
    1530:	2200      	movs	r2, #0
    1532:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1534:	687b      	ldr	r3, [r7, #4]
    1536:	2200      	movs	r2, #0
    1538:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    153a:	687b      	ldr	r3, [r7, #4]
    153c:	22c0      	movs	r2, #192	; 0xc0
    153e:	0392      	lsls	r2, r2, #14
    1540:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1542:	687b      	ldr	r3, [r7, #4]
    1544:	2200      	movs	r2, #0
    1546:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1548:	687b      	ldr	r3, [r7, #4]
    154a:	2200      	movs	r2, #0
    154c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    154e:	687b      	ldr	r3, [r7, #4]
    1550:	2201      	movs	r2, #1
    1552:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1554:	687b      	ldr	r3, [r7, #4]
    1556:	2201      	movs	r2, #1
    1558:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    155a:	687b      	ldr	r3, [r7, #4]
    155c:	2200      	movs	r2, #0
    155e:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1560:	687b      	ldr	r3, [r7, #4]
    1562:	2224      	movs	r2, #36	; 0x24
    1564:	2100      	movs	r1, #0
    1566:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1568:	687b      	ldr	r3, [r7, #4]
    156a:	3318      	adds	r3, #24
    156c:	220c      	movs	r2, #12
    156e:	2100      	movs	r1, #0
    1570:	0018      	movs	r0, r3
    1572:	4b0a      	ldr	r3, [pc, #40]	; (159c <spi_get_config_defaults+0x7c>)
    1574:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1576:	687b      	ldr	r3, [r7, #4]
    1578:	4a09      	ldr	r2, [pc, #36]	; (15a0 <spi_get_config_defaults+0x80>)
    157a:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	2200      	movs	r2, #0
    1580:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	2200      	movs	r2, #0
    1586:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1588:	687b      	ldr	r3, [r7, #4]
    158a:	2200      	movs	r2, #0
    158c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    158e:	687b      	ldr	r3, [r7, #4]
    1590:	2200      	movs	r2, #0
    1592:	635a      	str	r2, [r3, #52]	; 0x34

};
    1594:	46c0      	nop			; (mov r8, r8)
    1596:	46bd      	mov	sp, r7
    1598:	b002      	add	sp, #8
    159a:	bd80      	pop	{r7, pc}
    159c:	0000f77b 	.word	0x0000f77b
    15a0:	000186a0 	.word	0x000186a0

000015a4 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    15a4:	b580      	push	{r7, lr}
    15a6:	b084      	sub	sp, #16
    15a8:	af00      	add	r7, sp, #0
    15aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	681b      	ldr	r3, [r3, #0]
    15b0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    15b2:	687b      	ldr	r3, [r7, #4]
    15b4:	681b      	ldr	r3, [r3, #0]
    15b6:	0018      	movs	r0, r3
    15b8:	4b0b      	ldr	r3, [pc, #44]	; (15e8 <spi_enable+0x44>)
    15ba:	4798      	blx	r3
    15bc:	0003      	movs	r3, r0
    15be:	0018      	movs	r0, r3
    15c0:	4b0a      	ldr	r3, [pc, #40]	; (15ec <spi_enable+0x48>)
    15c2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    15c4:	46c0      	nop			; (mov r8, r8)
    15c6:	687b      	ldr	r3, [r7, #4]
    15c8:	0018      	movs	r0, r3
    15ca:	4b09      	ldr	r3, [pc, #36]	; (15f0 <spi_enable+0x4c>)
    15cc:	4798      	blx	r3
    15ce:	1e03      	subs	r3, r0, #0
    15d0:	d1f9      	bne.n	15c6 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    15d2:	68fb      	ldr	r3, [r7, #12]
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	2202      	movs	r2, #2
    15d8:	431a      	orrs	r2, r3
    15da:	68fb      	ldr	r3, [r7, #12]
    15dc:	601a      	str	r2, [r3, #0]
}
    15de:	46c0      	nop			; (mov r8, r8)
    15e0:	46bd      	mov	sp, r7
    15e2:	b004      	add	sp, #16
    15e4:	bd80      	pop	{r7, pc}
    15e6:	46c0      	nop			; (mov r8, r8)
    15e8:	000080cd 	.word	0x000080cd
    15ec:	00001419 	.word	0x00001419
    15f0:	00001501 	.word	0x00001501

000015f4 <wtc6508_init>:
#define DISPLAY_MUTEX_TIMEOUT   pdMS_TO_TICKS(5)

// Must run at 2kHz to 20kHz with at least 15 ms between transactions

void wtc6508_init(void)
{
    15f4:	b580      	push	{r7, lr}
    15f6:	b08e      	sub	sp, #56	; 0x38
    15f8:	af00      	add	r7, sp, #0
    struct spi_config config;
    spi_get_config_defaults(&config);
    15fa:	003b      	movs	r3, r7
    15fc:	0018      	movs	r0, r3
    15fe:	4b1c      	ldr	r3, [pc, #112]	; (1670 <wtc6508_init+0x7c>)
    1600:	4798      	blx	r3

    config.pinmux_pad0 = WTC6508_PINMUX_PAD0;
    1602:	003b      	movs	r3, r7
    1604:	4a1b      	ldr	r2, [pc, #108]	; (1674 <wtc6508_init+0x80>)
    1606:	629a      	str	r2, [r3, #40]	; 0x28
    config.pinmux_pad1 = WTC6508_PINMUX_PAD1;
    1608:	003b      	movs	r3, r7
    160a:	4a1b      	ldr	r2, [pc, #108]	; (1678 <wtc6508_init+0x84>)
    160c:	62da      	str	r2, [r3, #44]	; 0x2c
    config.pinmux_pad2 = WTC6508_PINMUX_PAD2;
    160e:	003b      	movs	r3, r7
    1610:	2201      	movs	r2, #1
    1612:	4252      	negs	r2, r2
    1614:	631a      	str	r2, [r3, #48]	; 0x30
    config.pinmux_pad3 = WTC6508_PINMUX_PAD3;
    1616:	003b      	movs	r3, r7
    1618:	2201      	movs	r2, #1
    161a:	4252      	negs	r2, r2
    161c:	635a      	str	r2, [r3, #52]	; 0x34
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    161e:	003b      	movs	r3, r7
    1620:	2280      	movs	r2, #128	; 0x80
    1622:	0292      	lsls	r2, r2, #10
    1624:	60da      	str	r2, [r3, #12]
    config.select_slave_low_detect_enable = false;
    1626:	003b      	movs	r3, r7
    1628:	2200      	movs	r2, #0
    162a:	74da      	strb	r2, [r3, #19]
    config.mode_specific.master.baudrate = WTC6508_BAUD;
    162c:	003b      	movs	r3, r7
    162e:	4a13      	ldr	r2, [pc, #76]	; (167c <wtc6508_init+0x88>)
    1630:	619a      	str	r2, [r3, #24]
    config.transfer_mode = SPI_TRANSFER_MODE_3;    
    1632:	003b      	movs	r3, r7
    1634:	22c0      	movs	r2, #192	; 0xc0
    1636:	0592      	lsls	r2, r2, #22
    1638:	609a      	str	r2, [r3, #8]
    config.generator_source = GCLK_GENERATOR_4;
    163a:	003b      	movs	r3, r7
    163c:	2224      	movs	r2, #36	; 0x24
    163e:	2104      	movs	r1, #4
    1640:	5499      	strb	r1, [r3, r2]
    config.run_in_standby = false;
    1642:	003b      	movs	r3, r7
    1644:	2200      	movs	r2, #0
    1646:	745a      	strb	r2, [r3, #17]

    if (spi_init(&wtc6508_module, WTC65808_SERCOM, &config)) {
    1648:	003a      	movs	r2, r7
    164a:	490d      	ldr	r1, [pc, #52]	; (1680 <wtc6508_init+0x8c>)
    164c:	4b0d      	ldr	r3, [pc, #52]	; (1684 <wtc6508_init+0x90>)
    164e:	0018      	movs	r0, r3
    1650:	4b0d      	ldr	r3, [pc, #52]	; (1688 <wtc6508_init+0x94>)
    1652:	4798      	blx	r3
    1654:	1e03      	subs	r3, r0, #0
    1656:	d004      	beq.n	1662 <wtc6508_init+0x6e>
        printf("failed to initialize WTC6508!\n");
    1658:	4b0c      	ldr	r3, [pc, #48]	; (168c <wtc6508_init+0x98>)
    165a:	0018      	movs	r0, r3
    165c:	4b0c      	ldr	r3, [pc, #48]	; (1690 <wtc6508_init+0x9c>)
    165e:	4798      	blx	r3
    1660:	e003      	b.n	166a <wtc6508_init+0x76>
        return;
    }

    spi_enable(&wtc6508_module);
    1662:	4b08      	ldr	r3, [pc, #32]	; (1684 <wtc6508_init+0x90>)
    1664:	0018      	movs	r0, r3
    1666:	4b0b      	ldr	r3, [pc, #44]	; (1694 <wtc6508_init+0xa0>)
    1668:	4798      	blx	r3
}
    166a:	46bd      	mov	sp, r7
    166c:	b00e      	add	sp, #56	; 0x38
    166e:	bd80      	pop	{r7, pc}
    1670:	00001521 	.word	0x00001521
    1674:	00080002 	.word	0x00080002
    1678:	00090002 	.word	0x00090002
    167c:	00003a98 	.word	0x00003a98
    1680:	42000800 	.word	0x42000800
    1684:	200045c0 	.word	0x200045c0
    1688:	0000866d 	.word	0x0000866d
    168c:	00010f84 	.word	0x00010f84
    1690:	0000fe51 	.word	0x0000fe51
    1694:	000015a5 	.word	0x000015a5

00001698 <wtc6508_read>:

enum status_code wtc6508_read(uint8_t *status)
{
    1698:	b5f0      	push	{r4, r5, r6, r7, lr}
    169a:	464f      	mov	r7, r9
    169c:	4646      	mov	r6, r8
    169e:	b4c0      	push	{r6, r7}
    16a0:	b089      	sub	sp, #36	; 0x24
    16a2:	af00      	add	r7, sp, #0
    16a4:	60f8      	str	r0, [r7, #12]
    enum status_code ret;
    struct port_config di_conf;    
    struct port_config clk_conf;
    struct system_pinmux_config pin_conf;

    clk_conf.direction = PORT_PIN_DIR_OUTPUT;
    16a6:	2310      	movs	r3, #16
    16a8:	2208      	movs	r2, #8
    16aa:	4694      	mov	ip, r2
    16ac:	44bc      	add	ip, r7
    16ae:	4463      	add	r3, ip
    16b0:	2201      	movs	r2, #1
    16b2:	701a      	strb	r2, [r3, #0]
    clk_conf.input_pull = PORT_PIN_PULL_UP;
    16b4:	2310      	movs	r3, #16
    16b6:	2208      	movs	r2, #8
    16b8:	4694      	mov	ip, r2
    16ba:	44bc      	add	ip, r7
    16bc:	4463      	add	r3, ip
    16be:	2201      	movs	r2, #1
    16c0:	705a      	strb	r2, [r3, #1]
    clk_conf.powersave = false;   
    16c2:	2310      	movs	r3, #16
    16c4:	2208      	movs	r2, #8
    16c6:	4694      	mov	ip, r2
    16c8:	44bc      	add	ip, r7
    16ca:	4463      	add	r3, ip
    16cc:	2200      	movs	r2, #0
    16ce:	709a      	strb	r2, [r3, #2]

    di_conf.direction = PORT_PIN_DIR_INPUT;
    16d0:	2314      	movs	r3, #20
    16d2:	2208      	movs	r2, #8
    16d4:	4694      	mov	ip, r2
    16d6:	44bc      	add	ip, r7
    16d8:	4463      	add	r3, ip
    16da:	2200      	movs	r2, #0
    16dc:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
    16de:	2314      	movs	r3, #20
    16e0:	2208      	movs	r2, #8
    16e2:	4694      	mov	ip, r2
    16e4:	44bc      	add	ip, r7
    16e6:	4463      	add	r3, ip
    16e8:	2201      	movs	r2, #1
    16ea:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
    16ec:	2314      	movs	r3, #20
    16ee:	2208      	movs	r2, #8
    16f0:	4694      	mov	ip, r2
    16f2:	44bc      	add	ip, r7
    16f4:	4463      	add	r3, ip
    16f6:	2200      	movs	r2, #0
    16f8:	709a      	strb	r2, [r3, #2]

    system_pinmux_get_config_defaults(&pin_conf);
    16fa:	230c      	movs	r3, #12
    16fc:	2208      	movs	r2, #8
    16fe:	4694      	mov	ip, r2
    1700:	44bc      	add	ip, r7
    1702:	4463      	add	r3, ip
    1704:	0018      	movs	r0, r3
    1706:	4b80      	ldr	r3, [pc, #512]	; (1908 <wtc6508_read+0x270>)
    1708:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    170a:	230c      	movs	r3, #12
    170c:	2208      	movs	r2, #8
    170e:	4694      	mov	ip, r2
    1710:	44bc      	add	ip, r7
    1712:	4463      	add	r3, ip
    1714:	2200      	movs	r2, #0
    1716:	705a      	strb	r2, [r3, #1]

    // Take the display bus mutex
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
    1718:	4b7c      	ldr	r3, [pc, #496]	; (190c <wtc6508_read+0x274>)
    171a:	6818      	ldr	r0, [r3, #0]
    171c:	2301      	movs	r3, #1
    171e:	425a      	negs	r2, r3
    1720:	2300      	movs	r3, #0
    1722:	2100      	movs	r1, #0
    1724:	4c7a      	ldr	r4, [pc, #488]	; (1910 <wtc6508_read+0x278>)
    1726:	47a0      	blx	r4
    1728:	1e03      	subs	r3, r0, #0
    172a:	d101      	bne.n	1730 <wtc6508_read+0x98>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
    172c:	2312      	movs	r3, #18
    172e:	e0e3      	b.n	18f8 <wtc6508_read+0x260>
    }

    taskENTER_CRITICAL();
    1730:	4b78      	ldr	r3, [pc, #480]	; (1914 <wtc6508_read+0x27c>)
    1732:	4798      	blx	r3

    // Start and stop bits need to be manually sent. Switch the data and clock
    // lines to GPIOs. Timing is critical here, so suspend all other tasks
    //vTaskSuspendAll();

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    1734:	2310      	movs	r3, #16
    1736:	2208      	movs	r2, #8
    1738:	4694      	mov	ip, r2
    173a:	44bc      	add	ip, r7
    173c:	4463      	add	r3, ip
    173e:	0019      	movs	r1, r3
    1740:	2009      	movs	r0, #9
    1742:	4b75      	ldr	r3, [pc, #468]	; (1918 <wtc6508_read+0x280>)
    1744:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    1746:	2314      	movs	r3, #20
    1748:	2208      	movs	r2, #8
    174a:	4694      	mov	ip, r2
    174c:	44bc      	add	ip, r7
    174e:	4463      	add	r3, ip
    1750:	0019      	movs	r1, r3
    1752:	2008      	movs	r0, #8
    1754:	4b70      	ldr	r3, [pc, #448]	; (1918 <wtc6508_read+0x280>)
    1756:	4798      	blx	r3

    // If the DI pin is already low, then the bus is still busy from the last TM1640 transaction.
    // Skip the read.
    if (!port_pin_get_input_level(WTC6508_DI_GPIO)) {
    1758:	2008      	movs	r0, #8
    175a:	4b70      	ldr	r3, [pc, #448]	; (191c <wtc6508_read+0x284>)
    175c:	4798      	blx	r3
    175e:	0003      	movs	r3, r0
    1760:	001a      	movs	r2, r3
    1762:	2301      	movs	r3, #1
    1764:	4053      	eors	r3, r2
    1766:	b2db      	uxtb	r3, r3
    1768:	2b00      	cmp	r3, #0
    176a:	d00a      	beq.n	1782 <wtc6508_read+0xea>
        xSemaphoreGive(display_mutex);
    176c:	4b67      	ldr	r3, [pc, #412]	; (190c <wtc6508_read+0x274>)
    176e:	6818      	ldr	r0, [r3, #0]
    1770:	2300      	movs	r3, #0
    1772:	2200      	movs	r2, #0
    1774:	2100      	movs	r1, #0
    1776:	4c6a      	ldr	r4, [pc, #424]	; (1920 <wtc6508_read+0x288>)
    1778:	47a0      	blx	r4
        taskEXIT_CRITICAL();
    177a:	4b6a      	ldr	r3, [pc, #424]	; (1924 <wtc6508_read+0x28c>)
    177c:	4798      	blx	r3
        return STATUS_BUSY;
    177e:	2305      	movs	r3, #5
    1780:	e0ba      	b.n	18f8 <wtc6508_read+0x260>
    }

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);        
    1782:	2100      	movs	r1, #0
    1784:	2009      	movs	r0, #9
    1786:	4b68      	ldr	r3, [pc, #416]	; (1928 <wtc6508_read+0x290>)
    1788:	4798      	blx	r3
    delay_us(3);
    178a:	2000      	movs	r0, #0
    178c:	4b67      	ldr	r3, [pc, #412]	; (192c <wtc6508_read+0x294>)
    178e:	4798      	blx	r3
    1790:	0003      	movs	r3, r0
    1792:	603b      	str	r3, [r7, #0]
    1794:	2300      	movs	r3, #0
    1796:	607b      	str	r3, [r7, #4]
    1798:	6839      	ldr	r1, [r7, #0]
    179a:	687a      	ldr	r2, [r7, #4]
    179c:	000b      	movs	r3, r1
    179e:	0014      	movs	r4, r2
    17a0:	18db      	adds	r3, r3, r3
    17a2:	4164      	adcs	r4, r4
    17a4:	185b      	adds	r3, r3, r1
    17a6:	4154      	adcs	r4, r2
    17a8:	4961      	ldr	r1, [pc, #388]	; (1930 <wtc6508_read+0x298>)
    17aa:	2200      	movs	r2, #0
    17ac:	185b      	adds	r3, r3, r1
    17ae:	4154      	adcs	r4, r2
    17b0:	0018      	movs	r0, r3
    17b2:	0021      	movs	r1, r4
    17b4:	4c5f      	ldr	r4, [pc, #380]	; (1934 <wtc6508_read+0x29c>)
    17b6:	4a60      	ldr	r2, [pc, #384]	; (1938 <wtc6508_read+0x2a0>)
    17b8:	2300      	movs	r3, #0
    17ba:	47a0      	blx	r4
    17bc:	0003      	movs	r3, r0
    17be:	000c      	movs	r4, r1
    17c0:	0018      	movs	r0, r3
    17c2:	4b5e      	ldr	r3, [pc, #376]	; (193c <wtc6508_read+0x2a4>)
    17c4:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);        
    17c6:	2101      	movs	r1, #1
    17c8:	2009      	movs	r0, #9
    17ca:	4b57      	ldr	r3, [pc, #348]	; (1928 <wtc6508_read+0x290>)
    17cc:	4798      	blx	r3

    // Give pin control back to SPI module again 
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    17ce:	230c      	movs	r3, #12
    17d0:	2208      	movs	r2, #8
    17d2:	4694      	mov	ip, r2
    17d4:	44bc      	add	ip, r7
    17d6:	4463      	add	r3, ip
    17d8:	2202      	movs	r2, #2
    17da:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    17dc:	230c      	movs	r3, #12
    17de:	2208      	movs	r2, #8
    17e0:	4694      	mov	ip, r2
    17e2:	44bc      	add	ip, r7
    17e4:	4463      	add	r3, ip
    17e6:	0019      	movs	r1, r3
    17e8:	2008      	movs	r0, #8
    17ea:	4b55      	ldr	r3, [pc, #340]	; (1940 <wtc6508_read+0x2a8>)
    17ec:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    17ee:	230c      	movs	r3, #12
    17f0:	2208      	movs	r2, #8
    17f2:	4694      	mov	ip, r2
    17f4:	44bc      	add	ip, r7
    17f6:	4463      	add	r3, ip
    17f8:	2202      	movs	r2, #2
    17fa:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);
    17fc:	230c      	movs	r3, #12
    17fe:	2208      	movs	r2, #8
    1800:	4694      	mov	ip, r2
    1802:	44bc      	add	ip, r7
    1804:	4463      	add	r3, ip
    1806:	0019      	movs	r1, r3
    1808:	2009      	movs	r0, #9
    180a:	4b4d      	ldr	r3, [pc, #308]	; (1940 <wtc6508_read+0x2a8>)
    180c:	4798      	blx	r3

    ret = spi_read_buffer_wait(&wtc6508_module, status, 1, 0);
    180e:	2317      	movs	r3, #23
    1810:	4699      	mov	r9, r3
    1812:	2308      	movs	r3, #8
    1814:	469c      	mov	ip, r3
    1816:	44bc      	add	ip, r7
    1818:	44e1      	add	r9, ip
    181a:	68f9      	ldr	r1, [r7, #12]
    181c:	4849      	ldr	r0, [pc, #292]	; (1944 <wtc6508_read+0x2ac>)
    181e:	2300      	movs	r3, #0
    1820:	2201      	movs	r2, #1
    1822:	4c49      	ldr	r4, [pc, #292]	; (1948 <wtc6508_read+0x2b0>)
    1824:	46a0      	mov	r8, r4
    1826:	47c0      	blx	r8
    1828:	0003      	movs	r3, r0
    182a:	464a      	mov	r2, r9
    182c:	7013      	strb	r3, [r2, #0]

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    182e:	2310      	movs	r3, #16
    1830:	2208      	movs	r2, #8
    1832:	4694      	mov	ip, r2
    1834:	44bc      	add	ip, r7
    1836:	4463      	add	r3, ip
    1838:	0019      	movs	r1, r3
    183a:	2009      	movs	r0, #9
    183c:	4b36      	ldr	r3, [pc, #216]	; (1918 <wtc6508_read+0x280>)
    183e:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    1840:	2314      	movs	r3, #20
    1842:	2208      	movs	r2, #8
    1844:	4694      	mov	ip, r2
    1846:	44bc      	add	ip, r7
    1848:	4463      	add	r3, ip
    184a:	0019      	movs	r1, r3
    184c:	2008      	movs	r0, #8
    184e:	4b32      	ldr	r3, [pc, #200]	; (1918 <wtc6508_read+0x280>)
    1850:	4798      	blx	r3

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);    
    1852:	2100      	movs	r1, #0
    1854:	2009      	movs	r0, #9
    1856:	4b34      	ldr	r3, [pc, #208]	; (1928 <wtc6508_read+0x290>)
    1858:	4798      	blx	r3
    delay_us(3);
    185a:	2000      	movs	r0, #0
    185c:	4b33      	ldr	r3, [pc, #204]	; (192c <wtc6508_read+0x294>)
    185e:	4798      	blx	r3
    1860:	0003      	movs	r3, r0
    1862:	001d      	movs	r5, r3
    1864:	2300      	movs	r3, #0
    1866:	001e      	movs	r6, r3
    1868:	002b      	movs	r3, r5
    186a:	0034      	movs	r4, r6
    186c:	18db      	adds	r3, r3, r3
    186e:	4164      	adcs	r4, r4
    1870:	195b      	adds	r3, r3, r5
    1872:	4174      	adcs	r4, r6
    1874:	492e      	ldr	r1, [pc, #184]	; (1930 <wtc6508_read+0x298>)
    1876:	2200      	movs	r2, #0
    1878:	185b      	adds	r3, r3, r1
    187a:	4154      	adcs	r4, r2
    187c:	0018      	movs	r0, r3
    187e:	0021      	movs	r1, r4
    1880:	4c2c      	ldr	r4, [pc, #176]	; (1934 <wtc6508_read+0x29c>)
    1882:	4a2d      	ldr	r2, [pc, #180]	; (1938 <wtc6508_read+0x2a0>)
    1884:	2300      	movs	r3, #0
    1886:	47a0      	blx	r4
    1888:	0003      	movs	r3, r0
    188a:	000c      	movs	r4, r1
    188c:	0018      	movs	r0, r3
    188e:	4b2b      	ldr	r3, [pc, #172]	; (193c <wtc6508_read+0x2a4>)
    1890:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);    
    1892:	2101      	movs	r1, #1
    1894:	2009      	movs	r0, #9
    1896:	4b24      	ldr	r3, [pc, #144]	; (1928 <wtc6508_read+0x290>)
    1898:	4798      	blx	r3

    // Give pin control back to SPI module again
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    189a:	230c      	movs	r3, #12
    189c:	2208      	movs	r2, #8
    189e:	4694      	mov	ip, r2
    18a0:	44bc      	add	ip, r7
    18a2:	4463      	add	r3, ip
    18a4:	2202      	movs	r2, #2
    18a6:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    18a8:	230c      	movs	r3, #12
    18aa:	2208      	movs	r2, #8
    18ac:	4694      	mov	ip, r2
    18ae:	44bc      	add	ip, r7
    18b0:	4463      	add	r3, ip
    18b2:	0019      	movs	r1, r3
    18b4:	2008      	movs	r0, #8
    18b6:	4b22      	ldr	r3, [pc, #136]	; (1940 <wtc6508_read+0x2a8>)
    18b8:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    18ba:	230c      	movs	r3, #12
    18bc:	2208      	movs	r2, #8
    18be:	4694      	mov	ip, r2
    18c0:	44bc      	add	ip, r7
    18c2:	4463      	add	r3, ip
    18c4:	2202      	movs	r2, #2
    18c6:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);        
    18c8:	230c      	movs	r3, #12
    18ca:	2208      	movs	r2, #8
    18cc:	4694      	mov	ip, r2
    18ce:	44bc      	add	ip, r7
    18d0:	4463      	add	r3, ip
    18d2:	0019      	movs	r1, r3
    18d4:	2009      	movs	r0, #9
    18d6:	4b1a      	ldr	r3, [pc, #104]	; (1940 <wtc6508_read+0x2a8>)
    18d8:	4798      	blx	r3

    //xTaskResumeAll();

    // Give the display mutex back
    xSemaphoreGive(display_mutex);
    18da:	4b0c      	ldr	r3, [pc, #48]	; (190c <wtc6508_read+0x274>)
    18dc:	6818      	ldr	r0, [r3, #0]
    18de:	2300      	movs	r3, #0
    18e0:	2200      	movs	r2, #0
    18e2:	2100      	movs	r1, #0
    18e4:	4c0e      	ldr	r4, [pc, #56]	; (1920 <wtc6508_read+0x288>)
    18e6:	47a0      	blx	r4
    taskEXIT_CRITICAL();
    18e8:	4b0e      	ldr	r3, [pc, #56]	; (1924 <wtc6508_read+0x28c>)
    18ea:	4798      	blx	r3

    return ret;
    18ec:	2317      	movs	r3, #23
    18ee:	2208      	movs	r2, #8
    18f0:	4694      	mov	ip, r2
    18f2:	44bc      	add	ip, r7
    18f4:	4463      	add	r3, ip
    18f6:	781b      	ldrb	r3, [r3, #0]
}
    18f8:	0018      	movs	r0, r3
    18fa:	46bd      	mov	sp, r7
    18fc:	b009      	add	sp, #36	; 0x24
    18fe:	bc0c      	pop	{r2, r3}
    1900:	4690      	mov	r8, r2
    1902:	4699      	mov	r9, r3
    1904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1906:	46c0      	nop			; (mov r8, r8)
    1908:	00001391 	.word	0x00001391
    190c:	200045fc 	.word	0x200045fc
    1910:	0000b5d9 	.word	0x0000b5d9
    1914:	0000af19 	.word	0x0000af19
    1918:	00007931 	.word	0x00007931
    191c:	00001469 	.word	0x00001469
    1920:	0000b2d9 	.word	0x0000b2d9
    1924:	0000af3d 	.word	0x0000af3d
    1928:	000014ad 	.word	0x000014ad
    192c:	0000a4f5 	.word	0x0000a4f5
    1930:	006acfbf 	.word	0x006acfbf
    1934:	0000eee5 	.word	0x0000eee5
    1938:	006acfc0 	.word	0x006acfc0
    193c:	20000001 	.word	0x20000001
    1940:	0000a8b9 	.word	0x0000a8b9
    1944:	200045c0 	.word	0x200045c0
    1948:	000087fd 	.word	0x000087fd

0000194c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    194c:	b580      	push	{r7, lr}
    194e:	b084      	sub	sp, #16
    1950:	af00      	add	r7, sp, #0
    1952:	0002      	movs	r2, r0
    1954:	1dfb      	adds	r3, r7, #7
    1956:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1958:	230f      	movs	r3, #15
    195a:	18fb      	adds	r3, r7, r3
    195c:	1dfa      	adds	r2, r7, #7
    195e:	7812      	ldrb	r2, [r2, #0]
    1960:	09d2      	lsrs	r2, r2, #7
    1962:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1964:	230e      	movs	r3, #14
    1966:	18fb      	adds	r3, r7, r3
    1968:	1dfa      	adds	r2, r7, #7
    196a:	7812      	ldrb	r2, [r2, #0]
    196c:	0952      	lsrs	r2, r2, #5
    196e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1970:	4b0d      	ldr	r3, [pc, #52]	; (19a8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1972:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1974:	230f      	movs	r3, #15
    1976:	18fb      	adds	r3, r7, r3
    1978:	781b      	ldrb	r3, [r3, #0]
    197a:	2b00      	cmp	r3, #0
    197c:	d10f      	bne.n	199e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    197e:	230f      	movs	r3, #15
    1980:	18fb      	adds	r3, r7, r3
    1982:	781b      	ldrb	r3, [r3, #0]
    1984:	009b      	lsls	r3, r3, #2
    1986:	2210      	movs	r2, #16
    1988:	4694      	mov	ip, r2
    198a:	44bc      	add	ip, r7
    198c:	4463      	add	r3, ip
    198e:	3b08      	subs	r3, #8
    1990:	681a      	ldr	r2, [r3, #0]
    1992:	230e      	movs	r3, #14
    1994:	18fb      	adds	r3, r7, r3
    1996:	781b      	ldrb	r3, [r3, #0]
    1998:	01db      	lsls	r3, r3, #7
    199a:	18d3      	adds	r3, r2, r3
    199c:	e000      	b.n	19a0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    199e:	2300      	movs	r3, #0
	}
}
    19a0:	0018      	movs	r0, r3
    19a2:	46bd      	mov	sp, r7
    19a4:	b004      	add	sp, #16
    19a6:	bd80      	pop	{r7, pc}
    19a8:	41004400 	.word	0x41004400

000019ac <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    19ac:	b580      	push	{r7, lr}
    19ae:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    19b0:	4b04      	ldr	r3, [pc, #16]	; (19c4 <system_interrupt_enable_global+0x18>)
    19b2:	2201      	movs	r2, #1
    19b4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    19b6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    19ba:	b662      	cpsie	i
}
    19bc:	46c0      	nop			; (mov r8, r8)
    19be:	46bd      	mov	sp, r7
    19c0:	bd80      	pop	{r7, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	20000018 	.word	0x20000018

000019c8 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    19c8:	b580      	push	{r7, lr}
    19ca:	b082      	sub	sp, #8
    19cc:	af00      	add	r7, sp, #0
    19ce:	0002      	movs	r2, r0
    19d0:	1dfb      	adds	r3, r7, #7
    19d2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    19d4:	1dfb      	adds	r3, r7, #7
    19d6:	781b      	ldrb	r3, [r3, #0]
    19d8:	0018      	movs	r0, r3
    19da:	4b03      	ldr	r3, [pc, #12]	; (19e8 <port_get_group_from_gpio_pin+0x20>)
    19dc:	4798      	blx	r3
    19de:	0003      	movs	r3, r0
}
    19e0:	0018      	movs	r0, r3
    19e2:	46bd      	mov	sp, r7
    19e4:	b002      	add	sp, #8
    19e6:	bd80      	pop	{r7, pc}
    19e8:	0000194d 	.word	0x0000194d

000019ec <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    19ec:	b580      	push	{r7, lr}
    19ee:	b082      	sub	sp, #8
    19f0:	af00      	add	r7, sp, #0
    19f2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	2200      	movs	r2, #0
    19f8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    19fa:	687b      	ldr	r3, [r7, #4]
    19fc:	2201      	movs	r2, #1
    19fe:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1a00:	687b      	ldr	r3, [r7, #4]
    1a02:	2200      	movs	r2, #0
    1a04:	709a      	strb	r2, [r3, #2]
}
    1a06:	46c0      	nop			; (mov r8, r8)
    1a08:	46bd      	mov	sp, r7
    1a0a:	b002      	add	sp, #8
    1a0c:	bd80      	pop	{r7, pc}
    1a0e:	46c0      	nop			; (mov r8, r8)

00001a10 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1a10:	b580      	push	{r7, lr}
    1a12:	b084      	sub	sp, #16
    1a14:	af00      	add	r7, sp, #0
    1a16:	0002      	movs	r2, r0
    1a18:	1dfb      	adds	r3, r7, #7
    1a1a:	701a      	strb	r2, [r3, #0]
    1a1c:	1dbb      	adds	r3, r7, #6
    1a1e:	1c0a      	adds	r2, r1, #0
    1a20:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1a22:	1dfb      	adds	r3, r7, #7
    1a24:	781b      	ldrb	r3, [r3, #0]
    1a26:	0018      	movs	r0, r3
    1a28:	4b0d      	ldr	r3, [pc, #52]	; (1a60 <port_pin_set_output_level+0x50>)
    1a2a:	4798      	blx	r3
    1a2c:	0003      	movs	r3, r0
    1a2e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a30:	1dfb      	adds	r3, r7, #7
    1a32:	781b      	ldrb	r3, [r3, #0]
    1a34:	221f      	movs	r2, #31
    1a36:	4013      	ands	r3, r2
    1a38:	2201      	movs	r2, #1
    1a3a:	409a      	lsls	r2, r3
    1a3c:	0013      	movs	r3, r2
    1a3e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1a40:	1dbb      	adds	r3, r7, #6
    1a42:	781b      	ldrb	r3, [r3, #0]
    1a44:	2b00      	cmp	r3, #0
    1a46:	d003      	beq.n	1a50 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1a48:	68fb      	ldr	r3, [r7, #12]
    1a4a:	68ba      	ldr	r2, [r7, #8]
    1a4c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1a4e:	e002      	b.n	1a56 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1a50:	68fb      	ldr	r3, [r7, #12]
    1a52:	68ba      	ldr	r2, [r7, #8]
    1a54:	615a      	str	r2, [r3, #20]
	}
}
    1a56:	46c0      	nop			; (mov r8, r8)
    1a58:	46bd      	mov	sp, r7
    1a5a:	b004      	add	sp, #16
    1a5c:	bd80      	pop	{r7, pc}
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	000019c9 	.word	0x000019c9

00001a64 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    1a64:	b580      	push	{r7, lr}
    1a66:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    1a68:	4b04      	ldr	r3, [pc, #16]	; (1a7c <chip_isr+0x18>)
    1a6a:	681b      	ldr	r3, [r3, #0]
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d002      	beq.n	1a76 <chip_isr+0x12>
		gpfIsr();
    1a70:	4b02      	ldr	r3, [pc, #8]	; (1a7c <chip_isr+0x18>)
    1a72:	681b      	ldr	r3, [r3, #0]
    1a74:	4798      	blx	r3
	}
}
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	46bd      	mov	sp, r7
    1a7a:	bd80      	pop	{r7, pc}
    1a7c:	200000bc 	.word	0x200000bc

00001a80 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    1a80:	b580      	push	{r7, lr}
    1a82:	b082      	sub	sp, #8
    1a84:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    1a86:	1d3b      	adds	r3, r7, #4
    1a88:	0018      	movs	r0, r3
    1a8a:	4b0c      	ldr	r3, [pc, #48]	; (1abc <init_chip_pins+0x3c>)
    1a8c:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1a8e:	1d3b      	adds	r3, r7, #4
    1a90:	2201      	movs	r2, #1
    1a92:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    1a94:	1d3b      	adds	r3, r7, #4
    1a96:	0019      	movs	r1, r3
    1a98:	201b      	movs	r0, #27
    1a9a:	4b09      	ldr	r3, [pc, #36]	; (1ac0 <init_chip_pins+0x40>)
    1a9c:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    1a9e:	1d3b      	adds	r3, r7, #4
    1aa0:	0019      	movs	r1, r3
    1aa2:	201c      	movs	r0, #28
    1aa4:	4b06      	ldr	r3, [pc, #24]	; (1ac0 <init_chip_pins+0x40>)
    1aa6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    1aa8:	1d3b      	adds	r3, r7, #4
    1aaa:	0019      	movs	r1, r3
    1aac:	2028      	movs	r0, #40	; 0x28
    1aae:	4b04      	ldr	r3, [pc, #16]	; (1ac0 <init_chip_pins+0x40>)
    1ab0:	4798      	blx	r3
}
    1ab2:	46c0      	nop			; (mov r8, r8)
    1ab4:	46bd      	mov	sp, r7
    1ab6:	b002      	add	sp, #8
    1ab8:	bd80      	pop	{r7, pc}
    1aba:	46c0      	nop			; (mov r8, r8)
    1abc:	000019ed 	.word	0x000019ed
    1ac0:	00007931 	.word	0x00007931

00001ac4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    1ac4:	b580      	push	{r7, lr}
    1ac6:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    1ac8:	4b0c      	ldr	r3, [pc, #48]	; (1afc <nm_bsp_init+0x38>)
    1aca:	2200      	movs	r2, #0
    1acc:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    1ace:	4b0c      	ldr	r3, [pc, #48]	; (1b00 <nm_bsp_init+0x3c>)
    1ad0:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    1ad2:	4b0c      	ldr	r3, [pc, #48]	; (1b04 <nm_bsp_init+0x40>)
    1ad4:	681b      	ldr	r3, [r3, #0]
    1ad6:	2201      	movs	r2, #1
    1ad8:	4013      	ands	r3, r2
    1ada:	d004      	beq.n	1ae6 <nm_bsp_init+0x22>
    1adc:	4b09      	ldr	r3, [pc, #36]	; (1b04 <nm_bsp_init+0x40>)
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	2202      	movs	r2, #2
    1ae2:	4013      	ands	r3, r2
    1ae4:	d101      	bne.n	1aea <nm_bsp_init+0x26>
	    delay_init();
    1ae6:	4b08      	ldr	r3, [pc, #32]	; (1b08 <nm_bsp_init+0x44>)
    1ae8:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    1aea:	4b08      	ldr	r3, [pc, #32]	; (1b0c <nm_bsp_init+0x48>)
    1aec:	4798      	blx	r3

	system_interrupt_enable_global();
    1aee:	4b08      	ldr	r3, [pc, #32]	; (1b10 <nm_bsp_init+0x4c>)
    1af0:	4798      	blx	r3

	return M2M_SUCCESS;
    1af2:	2300      	movs	r3, #0
}
    1af4:	0018      	movs	r0, r3
    1af6:	46bd      	mov	sp, r7
    1af8:	bd80      	pop	{r7, pc}
    1afa:	46c0      	nop			; (mov r8, r8)
    1afc:	200000bc 	.word	0x200000bc
    1b00:	00001a81 	.word	0x00001a81
    1b04:	e000e010 	.word	0xe000e010
    1b08:	00000115 	.word	0x00000115
    1b0c:	00001b15 	.word	0x00001b15
    1b10:	000019ad 	.word	0x000019ad

00001b14 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    1b14:	b580      	push	{r7, lr}
    1b16:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    1b18:	2100      	movs	r1, #0
    1b1a:	201c      	movs	r0, #28
    1b1c:	4b0c      	ldr	r3, [pc, #48]	; (1b50 <nm_bsp_reset+0x3c>)
    1b1e:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    1b20:	2100      	movs	r1, #0
    1b22:	201b      	movs	r0, #27
    1b24:	4b0a      	ldr	r3, [pc, #40]	; (1b50 <nm_bsp_reset+0x3c>)
    1b26:	4798      	blx	r3
	nm_bsp_sleep(100);
    1b28:	2064      	movs	r0, #100	; 0x64
    1b2a:	4b0a      	ldr	r3, [pc, #40]	; (1b54 <nm_bsp_reset+0x40>)
    1b2c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    1b2e:	2101      	movs	r1, #1
    1b30:	201c      	movs	r0, #28
    1b32:	4b07      	ldr	r3, [pc, #28]	; (1b50 <nm_bsp_reset+0x3c>)
    1b34:	4798      	blx	r3
	nm_bsp_sleep(10);
    1b36:	200a      	movs	r0, #10
    1b38:	4b06      	ldr	r3, [pc, #24]	; (1b54 <nm_bsp_reset+0x40>)
    1b3a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    1b3c:	2101      	movs	r1, #1
    1b3e:	201b      	movs	r0, #27
    1b40:	4b03      	ldr	r3, [pc, #12]	; (1b50 <nm_bsp_reset+0x3c>)
    1b42:	4798      	blx	r3
	nm_bsp_sleep(10);
    1b44:	200a      	movs	r0, #10
    1b46:	4b03      	ldr	r3, [pc, #12]	; (1b54 <nm_bsp_reset+0x40>)
    1b48:	4798      	blx	r3
}
    1b4a:	46c0      	nop			; (mov r8, r8)
    1b4c:	46bd      	mov	sp, r7
    1b4e:	bd80      	pop	{r7, pc}
    1b50:	00001a11 	.word	0x00001a11
    1b54:	00001b59 	.word	0x00001b59

00001b58 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1b58:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b5a:	b083      	sub	sp, #12
    1b5c:	af00      	add	r7, sp, #0
    1b5e:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    1b60:	e015      	b.n	1b8e <nm_bsp_sleep+0x36>
		delay_ms(1);
    1b62:	2000      	movs	r0, #0
    1b64:	4b0e      	ldr	r3, [pc, #56]	; (1ba0 <nm_bsp_sleep+0x48>)
    1b66:	4798      	blx	r3
    1b68:	0003      	movs	r3, r0
    1b6a:	001d      	movs	r5, r3
    1b6c:	2300      	movs	r3, #0
    1b6e:	001e      	movs	r6, r3
    1b70:	4b0c      	ldr	r3, [pc, #48]	; (1ba4 <nm_bsp_sleep+0x4c>)
    1b72:	2400      	movs	r4, #0
    1b74:	195b      	adds	r3, r3, r5
    1b76:	4174      	adcs	r4, r6
    1b78:	0018      	movs	r0, r3
    1b7a:	0021      	movs	r1, r4
    1b7c:	4c0a      	ldr	r4, [pc, #40]	; (1ba8 <nm_bsp_sleep+0x50>)
    1b7e:	4a0b      	ldr	r2, [pc, #44]	; (1bac <nm_bsp_sleep+0x54>)
    1b80:	2300      	movs	r3, #0
    1b82:	47a0      	blx	r4
    1b84:	0003      	movs	r3, r0
    1b86:	000c      	movs	r4, r1
    1b88:	0018      	movs	r0, r3
    1b8a:	4b09      	ldr	r3, [pc, #36]	; (1bb0 <nm_bsp_sleep+0x58>)
    1b8c:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    1b8e:	687b      	ldr	r3, [r7, #4]
    1b90:	1e5a      	subs	r2, r3, #1
    1b92:	607a      	str	r2, [r7, #4]
    1b94:	2b00      	cmp	r3, #0
    1b96:	d1e4      	bne.n	1b62 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    1b98:	46c0      	nop			; (mov r8, r8)
    1b9a:	46bd      	mov	sp, r7
    1b9c:	b003      	add	sp, #12
    1b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ba0:	0000a4f5 	.word	0x0000a4f5
    1ba4:	00001b57 	.word	0x00001b57
    1ba8:	0000eee5 	.word	0x0000eee5
    1bac:	00001b58 	.word	0x00001b58
    1bb0:	20000001 	.word	0x20000001

00001bb4 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    1bb4:	b580      	push	{r7, lr}
    1bb6:	b086      	sub	sp, #24
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    1bbc:	4b15      	ldr	r3, [pc, #84]	; (1c14 <nm_bsp_register_isr+0x60>)
    1bbe:	687a      	ldr	r2, [r7, #4]
    1bc0:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    1bc2:	230c      	movs	r3, #12
    1bc4:	18fb      	adds	r3, r7, r3
    1bc6:	0018      	movs	r0, r3
    1bc8:	4b13      	ldr	r3, [pc, #76]	; (1c18 <nm_bsp_register_isr+0x64>)
    1bca:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    1bcc:	230c      	movs	r3, #12
    1bce:	18fb      	adds	r3, r7, r3
    1bd0:	2229      	movs	r2, #41	; 0x29
    1bd2:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    1bd4:	230c      	movs	r3, #12
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	2200      	movs	r2, #0
    1bda:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1bdc:	230c      	movs	r3, #12
    1bde:	18fb      	adds	r3, r7, r3
    1be0:	2201      	movs	r2, #1
    1be2:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    1be4:	230c      	movs	r3, #12
    1be6:	18fb      	adds	r3, r7, r3
    1be8:	2202      	movs	r2, #2
    1bea:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    1bec:	230c      	movs	r3, #12
    1bee:	18fb      	adds	r3, r7, r3
    1bf0:	0019      	movs	r1, r3
    1bf2:	2009      	movs	r0, #9
    1bf4:	4b09      	ldr	r3, [pc, #36]	; (1c1c <nm_bsp_register_isr+0x68>)
    1bf6:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    1bf8:	4b09      	ldr	r3, [pc, #36]	; (1c20 <nm_bsp_register_isr+0x6c>)
    1bfa:	2200      	movs	r2, #0
    1bfc:	2109      	movs	r1, #9
    1bfe:	0018      	movs	r0, r3
    1c00:	4b08      	ldr	r3, [pc, #32]	; (1c24 <nm_bsp_register_isr+0x70>)
    1c02:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1c04:	2100      	movs	r1, #0
    1c06:	2009      	movs	r0, #9
    1c08:	4b07      	ldr	r3, [pc, #28]	; (1c28 <nm_bsp_register_isr+0x74>)
    1c0a:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    1c0c:	46c0      	nop			; (mov r8, r8)
    1c0e:	46bd      	mov	sp, r7
    1c10:	b006      	add	sp, #24
    1c12:	bd80      	pop	{r7, pc}
    1c14:	200000bc 	.word	0x200000bc
    1c18:	000077d9 	.word	0x000077d9
    1c1c:	0000780d 	.word	0x0000780d
    1c20:	00001a65 	.word	0x00001a65
    1c24:	000073d9 	.word	0x000073d9
    1c28:	0000743d 	.word	0x0000743d

00001c2c <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    1c2c:	b580      	push	{r7, lr}
    1c2e:	b082      	sub	sp, #8
    1c30:	af00      	add	r7, sp, #0
    1c32:	0002      	movs	r2, r0
    1c34:	1dfb      	adds	r3, r7, #7
    1c36:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    1c38:	1dfb      	adds	r3, r7, #7
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	2b00      	cmp	r3, #0
    1c3e:	d004      	beq.n	1c4a <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1c40:	2100      	movs	r1, #0
    1c42:	2009      	movs	r0, #9
    1c44:	4b05      	ldr	r3, [pc, #20]	; (1c5c <nm_bsp_interrupt_ctrl+0x30>)
    1c46:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    1c48:	e003      	b.n	1c52 <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    1c4a:	2100      	movs	r1, #0
    1c4c:	2009      	movs	r0, #9
    1c4e:	4b04      	ldr	r3, [pc, #16]	; (1c60 <nm_bsp_interrupt_ctrl+0x34>)
    1c50:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    1c52:	46c0      	nop			; (mov r8, r8)
    1c54:	46bd      	mov	sp, r7
    1c56:	b002      	add	sp, #8
    1c58:	bd80      	pop	{r7, pc}
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	0000743d 	.word	0x0000743d
    1c60:	00007485 	.word	0x00007485

00001c64 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1c64:	b580      	push	{r7, lr}
    1c66:	b084      	sub	sp, #16
    1c68:	af00      	add	r7, sp, #0
    1c6a:	0002      	movs	r2, r0
    1c6c:	1dfb      	adds	r3, r7, #7
    1c6e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1c70:	230f      	movs	r3, #15
    1c72:	18fb      	adds	r3, r7, r3
    1c74:	1dfa      	adds	r2, r7, #7
    1c76:	7812      	ldrb	r2, [r2, #0]
    1c78:	09d2      	lsrs	r2, r2, #7
    1c7a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1c7c:	230e      	movs	r3, #14
    1c7e:	18fb      	adds	r3, r7, r3
    1c80:	1dfa      	adds	r2, r7, #7
    1c82:	7812      	ldrb	r2, [r2, #0]
    1c84:	0952      	lsrs	r2, r2, #5
    1c86:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1c88:	4b0d      	ldr	r3, [pc, #52]	; (1cc0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1c8a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1c8c:	230f      	movs	r3, #15
    1c8e:	18fb      	adds	r3, r7, r3
    1c90:	781b      	ldrb	r3, [r3, #0]
    1c92:	2b00      	cmp	r3, #0
    1c94:	d10f      	bne.n	1cb6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1c96:	230f      	movs	r3, #15
    1c98:	18fb      	adds	r3, r7, r3
    1c9a:	781b      	ldrb	r3, [r3, #0]
    1c9c:	009b      	lsls	r3, r3, #2
    1c9e:	2210      	movs	r2, #16
    1ca0:	4694      	mov	ip, r2
    1ca2:	44bc      	add	ip, r7
    1ca4:	4463      	add	r3, ip
    1ca6:	3b08      	subs	r3, #8
    1ca8:	681a      	ldr	r2, [r3, #0]
    1caa:	230e      	movs	r3, #14
    1cac:	18fb      	adds	r3, r7, r3
    1cae:	781b      	ldrb	r3, [r3, #0]
    1cb0:	01db      	lsls	r3, r3, #7
    1cb2:	18d3      	adds	r3, r2, r3
    1cb4:	e000      	b.n	1cb8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1cb6:	2300      	movs	r3, #0
	}
}
    1cb8:	0018      	movs	r0, r3
    1cba:	46bd      	mov	sp, r7
    1cbc:	b004      	add	sp, #16
    1cbe:	bd80      	pop	{r7, pc}
    1cc0:	41004400 	.word	0x41004400

00001cc4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1cc4:	b580      	push	{r7, lr}
    1cc6:	b082      	sub	sp, #8
    1cc8:	af00      	add	r7, sp, #0
    1cca:	0002      	movs	r2, r0
    1ccc:	1dfb      	adds	r3, r7, #7
    1cce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1cd0:	4b06      	ldr	r3, [pc, #24]	; (1cec <system_interrupt_enable+0x28>)
    1cd2:	1dfa      	adds	r2, r7, #7
    1cd4:	7812      	ldrb	r2, [r2, #0]
    1cd6:	0011      	movs	r1, r2
    1cd8:	221f      	movs	r2, #31
    1cda:	400a      	ands	r2, r1
    1cdc:	2101      	movs	r1, #1
    1cde:	4091      	lsls	r1, r2
    1ce0:	000a      	movs	r2, r1
    1ce2:	601a      	str	r2, [r3, #0]
}
    1ce4:	46c0      	nop			; (mov r8, r8)
    1ce6:	46bd      	mov	sp, r7
    1ce8:	b002      	add	sp, #8
    1cea:	bd80      	pop	{r7, pc}
    1cec:	e000e100 	.word	0xe000e100

00001cf0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1cf0:	b580      	push	{r7, lr}
    1cf2:	b082      	sub	sp, #8
    1cf4:	af00      	add	r7, sp, #0
    1cf6:	0002      	movs	r2, r0
    1cf8:	1dfb      	adds	r3, r7, #7
    1cfa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1cfc:	4a07      	ldr	r2, [pc, #28]	; (1d1c <system_interrupt_disable+0x2c>)
    1cfe:	1dfb      	adds	r3, r7, #7
    1d00:	781b      	ldrb	r3, [r3, #0]
    1d02:	0019      	movs	r1, r3
    1d04:	231f      	movs	r3, #31
    1d06:	400b      	ands	r3, r1
    1d08:	2101      	movs	r1, #1
    1d0a:	4099      	lsls	r1, r3
    1d0c:	000b      	movs	r3, r1
    1d0e:	0019      	movs	r1, r3
    1d10:	2380      	movs	r3, #128	; 0x80
    1d12:	50d1      	str	r1, [r2, r3]
}
    1d14:	46c0      	nop			; (mov r8, r8)
    1d16:	46bd      	mov	sp, r7
    1d18:	b002      	add	sp, #8
    1d1a:	bd80      	pop	{r7, pc}
    1d1c:	e000e100 	.word	0xe000e100

00001d20 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1d20:	b580      	push	{r7, lr}
    1d22:	b082      	sub	sp, #8
    1d24:	af00      	add	r7, sp, #0
    1d26:	0002      	movs	r2, r0
    1d28:	1dfb      	adds	r3, r7, #7
    1d2a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1d2c:	1dfb      	adds	r3, r7, #7
    1d2e:	781b      	ldrb	r3, [r3, #0]
    1d30:	0018      	movs	r0, r3
    1d32:	4b03      	ldr	r3, [pc, #12]	; (1d40 <port_get_group_from_gpio_pin+0x20>)
    1d34:	4798      	blx	r3
    1d36:	0003      	movs	r3, r0
}
    1d38:	0018      	movs	r0, r3
    1d3a:	46bd      	mov	sp, r7
    1d3c:	b002      	add	sp, #8
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	00001c65 	.word	0x00001c65

00001d44 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b082      	sub	sp, #8
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1d4c:	687b      	ldr	r3, [r7, #4]
    1d4e:	2200      	movs	r2, #0
    1d50:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1d52:	687b      	ldr	r3, [r7, #4]
    1d54:	2201      	movs	r2, #1
    1d56:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1d58:	687b      	ldr	r3, [r7, #4]
    1d5a:	2200      	movs	r2, #0
    1d5c:	709a      	strb	r2, [r3, #2]
}
    1d5e:	46c0      	nop			; (mov r8, r8)
    1d60:	46bd      	mov	sp, r7
    1d62:	b002      	add	sp, #8
    1d64:	bd80      	pop	{r7, pc}
    1d66:	46c0      	nop			; (mov r8, r8)

00001d68 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1d68:	b580      	push	{r7, lr}
    1d6a:	b084      	sub	sp, #16
    1d6c:	af00      	add	r7, sp, #0
    1d6e:	0002      	movs	r2, r0
    1d70:	1dfb      	adds	r3, r7, #7
    1d72:	701a      	strb	r2, [r3, #0]
    1d74:	1dbb      	adds	r3, r7, #6
    1d76:	1c0a      	adds	r2, r1, #0
    1d78:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1d7a:	1dfb      	adds	r3, r7, #7
    1d7c:	781b      	ldrb	r3, [r3, #0]
    1d7e:	0018      	movs	r0, r3
    1d80:	4b0d      	ldr	r3, [pc, #52]	; (1db8 <port_pin_set_output_level+0x50>)
    1d82:	4798      	blx	r3
    1d84:	0003      	movs	r3, r0
    1d86:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1d88:	1dfb      	adds	r3, r7, #7
    1d8a:	781b      	ldrb	r3, [r3, #0]
    1d8c:	221f      	movs	r2, #31
    1d8e:	4013      	ands	r3, r2
    1d90:	2201      	movs	r2, #1
    1d92:	409a      	lsls	r2, r3
    1d94:	0013      	movs	r3, r2
    1d96:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1d98:	1dbb      	adds	r3, r7, #6
    1d9a:	781b      	ldrb	r3, [r3, #0]
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d003      	beq.n	1da8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1da0:	68fb      	ldr	r3, [r7, #12]
    1da2:	68ba      	ldr	r2, [r7, #8]
    1da4:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1da6:	e002      	b.n	1dae <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1da8:	68fb      	ldr	r3, [r7, #12]
    1daa:	68ba      	ldr	r2, [r7, #8]
    1dac:	615a      	str	r2, [r3, #20]
	}
}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	46bd      	mov	sp, r7
    1db2:	b004      	add	sp, #16
    1db4:	bd80      	pop	{r7, pc}
    1db6:	46c0      	nop			; (mov r8, r8)
    1db8:	00001d21 	.word	0x00001d21

00001dbc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b084      	sub	sp, #16
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1dc4:	687b      	ldr	r3, [r7, #4]
    1dc6:	681b      	ldr	r3, [r3, #0]
    1dc8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1dca:	68fb      	ldr	r3, [r7, #12]
    1dcc:	69db      	ldr	r3, [r3, #28]
    1dce:	1e5a      	subs	r2, r3, #1
    1dd0:	4193      	sbcs	r3, r2
    1dd2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1dd4:	0018      	movs	r0, r3
    1dd6:	46bd      	mov	sp, r7
    1dd8:	b004      	add	sp, #16
    1dda:	bd80      	pop	{r7, pc}

00001ddc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    1ddc:	b580      	push	{r7, lr}
    1dde:	b082      	sub	sp, #8
    1de0:	af00      	add	r7, sp, #0
    1de2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    1de4:	687b      	ldr	r3, [r7, #4]
    1de6:	2201      	movs	r2, #1
    1de8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    1dea:	687b      	ldr	r3, [r7, #4]
    1dec:	2200      	movs	r2, #0
    1dee:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    1df0:	687b      	ldr	r3, [r7, #4]
    1df2:	2200      	movs	r2, #0
    1df4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    1df6:	687b      	ldr	r3, [r7, #4]
    1df8:	22c0      	movs	r2, #192	; 0xc0
    1dfa:	0392      	lsls	r2, r2, #14
    1dfc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    1dfe:	687b      	ldr	r3, [r7, #4]
    1e00:	2200      	movs	r2, #0
    1e02:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    1e04:	687b      	ldr	r3, [r7, #4]
    1e06:	2200      	movs	r2, #0
    1e08:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    1e0a:	687b      	ldr	r3, [r7, #4]
    1e0c:	2201      	movs	r2, #1
    1e0e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1e10:	687b      	ldr	r3, [r7, #4]
    1e12:	2201      	movs	r2, #1
    1e14:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1e16:	687b      	ldr	r3, [r7, #4]
    1e18:	2200      	movs	r2, #0
    1e1a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    1e1c:	687b      	ldr	r3, [r7, #4]
    1e1e:	2224      	movs	r2, #36	; 0x24
    1e20:	2100      	movs	r1, #0
    1e22:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1e24:	687b      	ldr	r3, [r7, #4]
    1e26:	3318      	adds	r3, #24
    1e28:	220c      	movs	r2, #12
    1e2a:	2100      	movs	r1, #0
    1e2c:	0018      	movs	r0, r3
    1e2e:	4b0a      	ldr	r3, [pc, #40]	; (1e58 <spi_get_config_defaults+0x7c>)
    1e30:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1e32:	687b      	ldr	r3, [r7, #4]
    1e34:	4a09      	ldr	r2, [pc, #36]	; (1e5c <spi_get_config_defaults+0x80>)
    1e36:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1e38:	687b      	ldr	r3, [r7, #4]
    1e3a:	2200      	movs	r2, #0
    1e3c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    1e3e:	687b      	ldr	r3, [r7, #4]
    1e40:	2200      	movs	r2, #0
    1e42:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	2200      	movs	r2, #0
    1e48:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    1e4a:	687b      	ldr	r3, [r7, #4]
    1e4c:	2200      	movs	r2, #0
    1e4e:	635a      	str	r2, [r3, #52]	; 0x34

};
    1e50:	46c0      	nop			; (mov r8, r8)
    1e52:	46bd      	mov	sp, r7
    1e54:	b002      	add	sp, #8
    1e56:	bd80      	pop	{r7, pc}
    1e58:	0000f77b 	.word	0x0000f77b
    1e5c:	000186a0 	.word	0x000186a0

00001e60 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    1e60:	b580      	push	{r7, lr}
    1e62:	b082      	sub	sp, #8
    1e64:	af00      	add	r7, sp, #0
    1e66:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    1e68:	687b      	ldr	r3, [r7, #4]
    1e6a:	220a      	movs	r2, #10
    1e6c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    1e6e:	687b      	ldr	r3, [r7, #4]
    1e70:	2200      	movs	r2, #0
    1e72:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    1e74:	687b      	ldr	r3, [r7, #4]
    1e76:	2200      	movs	r2, #0
    1e78:	709a      	strb	r2, [r3, #2]
}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	46bd      	mov	sp, r7
    1e7e:	b002      	add	sp, #8
    1e80:	bd80      	pop	{r7, pc}
    1e82:	46c0      	nop			; (mov r8, r8)

00001e84 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    1e84:	b580      	push	{r7, lr}
    1e86:	b084      	sub	sp, #16
    1e88:	af00      	add	r7, sp, #0
    1e8a:	6078      	str	r0, [r7, #4]
    1e8c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    1e8e:	683b      	ldr	r3, [r7, #0]
    1e90:	781a      	ldrb	r2, [r3, #0]
    1e92:	687b      	ldr	r3, [r7, #4]
    1e94:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    1e96:	683b      	ldr	r3, [r7, #0]
    1e98:	785a      	ldrb	r2, [r3, #1]
    1e9a:	687b      	ldr	r3, [r7, #4]
    1e9c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    1e9e:	683b      	ldr	r3, [r7, #0]
    1ea0:	789a      	ldrb	r2, [r3, #2]
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    1ea6:	230c      	movs	r3, #12
    1ea8:	18fb      	adds	r3, r7, r3
    1eaa:	0018      	movs	r0, r3
    1eac:	4b0b      	ldr	r3, [pc, #44]	; (1edc <spi_attach_slave+0x58>)
    1eae:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    1eb0:	230c      	movs	r3, #12
    1eb2:	18fb      	adds	r3, r7, r3
    1eb4:	2201      	movs	r2, #1
    1eb6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    1eb8:	687b      	ldr	r3, [r7, #4]
    1eba:	781b      	ldrb	r3, [r3, #0]
    1ebc:	220c      	movs	r2, #12
    1ebe:	18ba      	adds	r2, r7, r2
    1ec0:	0011      	movs	r1, r2
    1ec2:	0018      	movs	r0, r3
    1ec4:	4b06      	ldr	r3, [pc, #24]	; (1ee0 <spi_attach_slave+0x5c>)
    1ec6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    1ec8:	687b      	ldr	r3, [r7, #4]
    1eca:	781b      	ldrb	r3, [r3, #0]
    1ecc:	2101      	movs	r1, #1
    1ece:	0018      	movs	r0, r3
    1ed0:	4b04      	ldr	r3, [pc, #16]	; (1ee4 <spi_attach_slave+0x60>)
    1ed2:	4798      	blx	r3
}
    1ed4:	46c0      	nop			; (mov r8, r8)
    1ed6:	46bd      	mov	sp, r7
    1ed8:	b004      	add	sp, #16
    1eda:	bd80      	pop	{r7, pc}
    1edc:	00001d45 	.word	0x00001d45
    1ee0:	00007931 	.word	0x00007931
    1ee4:	00001d69 	.word	0x00001d69

00001ee8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1ee8:	b580      	push	{r7, lr}
    1eea:	b084      	sub	sp, #16
    1eec:	af00      	add	r7, sp, #0
    1eee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1ef0:	687b      	ldr	r3, [r7, #4]
    1ef2:	681b      	ldr	r3, [r3, #0]
    1ef4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	681b      	ldr	r3, [r3, #0]
    1efa:	0018      	movs	r0, r3
    1efc:	4b0b      	ldr	r3, [pc, #44]	; (1f2c <spi_enable+0x44>)
    1efe:	4798      	blx	r3
    1f00:	0003      	movs	r3, r0
    1f02:	0018      	movs	r0, r3
    1f04:	4b0a      	ldr	r3, [pc, #40]	; (1f30 <spi_enable+0x48>)
    1f06:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    1f08:	46c0      	nop			; (mov r8, r8)
    1f0a:	687b      	ldr	r3, [r7, #4]
    1f0c:	0018      	movs	r0, r3
    1f0e:	4b09      	ldr	r3, [pc, #36]	; (1f34 <spi_enable+0x4c>)
    1f10:	4798      	blx	r3
    1f12:	1e03      	subs	r3, r0, #0
    1f14:	d1f9      	bne.n	1f0a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    1f16:	68fb      	ldr	r3, [r7, #12]
    1f18:	681b      	ldr	r3, [r3, #0]
    1f1a:	2202      	movs	r2, #2
    1f1c:	431a      	orrs	r2, r3
    1f1e:	68fb      	ldr	r3, [r7, #12]
    1f20:	601a      	str	r2, [r3, #0]
}
    1f22:	46c0      	nop			; (mov r8, r8)
    1f24:	46bd      	mov	sp, r7
    1f26:	b004      	add	sp, #16
    1f28:	bd80      	pop	{r7, pc}
    1f2a:	46c0      	nop			; (mov r8, r8)
    1f2c:	000080cd 	.word	0x000080cd
    1f30:	00001cc5 	.word	0x00001cc5
    1f34:	00001dbd 	.word	0x00001dbd

00001f38 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    1f38:	b580      	push	{r7, lr}
    1f3a:	b084      	sub	sp, #16
    1f3c:	af00      	add	r7, sp, #0
    1f3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f40:	687b      	ldr	r3, [r7, #4]
    1f42:	681b      	ldr	r3, [r3, #0]
    1f44:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1f46:	687b      	ldr	r3, [r7, #4]
    1f48:	681b      	ldr	r3, [r3, #0]
    1f4a:	0018      	movs	r0, r3
    1f4c:	4b0e      	ldr	r3, [pc, #56]	; (1f88 <spi_disable+0x50>)
    1f4e:	4798      	blx	r3
    1f50:	0003      	movs	r3, r0
    1f52:	0018      	movs	r0, r3
    1f54:	4b0d      	ldr	r3, [pc, #52]	; (1f8c <spi_disable+0x54>)
    1f56:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    1f58:	46c0      	nop			; (mov r8, r8)
    1f5a:	687b      	ldr	r3, [r7, #4]
    1f5c:	0018      	movs	r0, r3
    1f5e:	4b0c      	ldr	r3, [pc, #48]	; (1f90 <spi_disable+0x58>)
    1f60:	4798      	blx	r3
    1f62:	1e03      	subs	r3, r0, #0
    1f64:	d1f9      	bne.n	1f5a <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1f66:	68fb      	ldr	r3, [r7, #12]
    1f68:	228f      	movs	r2, #143	; 0x8f
    1f6a:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1f6c:	68fb      	ldr	r3, [r7, #12]
    1f6e:	228f      	movs	r2, #143	; 0x8f
    1f70:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1f72:	68fb      	ldr	r3, [r7, #12]
    1f74:	681b      	ldr	r3, [r3, #0]
    1f76:	2202      	movs	r2, #2
    1f78:	4393      	bics	r3, r2
    1f7a:	001a      	movs	r2, r3
    1f7c:	68fb      	ldr	r3, [r7, #12]
    1f7e:	601a      	str	r2, [r3, #0]
}
    1f80:	46c0      	nop			; (mov r8, r8)
    1f82:	46bd      	mov	sp, r7
    1f84:	b004      	add	sp, #16
    1f86:	bd80      	pop	{r7, pc}
    1f88:	000080cd 	.word	0x000080cd
    1f8c:	00001cf1 	.word	0x00001cf1
    1f90:	00001dbd 	.word	0x00001dbd

00001f94 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    1f94:	b580      	push	{r7, lr}
    1f96:	b084      	sub	sp, #16
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1f9c:	687b      	ldr	r3, [r7, #4]
    1f9e:	681b      	ldr	r3, [r3, #0]
    1fa0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    1fa2:	68fb      	ldr	r3, [r7, #12]
    1fa4:	7e1b      	ldrb	r3, [r3, #24]
    1fa6:	b2db      	uxtb	r3, r3
    1fa8:	001a      	movs	r2, r3
    1faa:	2302      	movs	r3, #2
    1fac:	4013      	ands	r3, r2
    1fae:	1e5a      	subs	r2, r3, #1
    1fb0:	4193      	sbcs	r3, r2
    1fb2:	b2db      	uxtb	r3, r3
}
    1fb4:	0018      	movs	r0, r3
    1fb6:	46bd      	mov	sp, r7
    1fb8:	b004      	add	sp, #16
    1fba:	bd80      	pop	{r7, pc}

00001fbc <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    1fbc:	b580      	push	{r7, lr}
    1fbe:	b084      	sub	sp, #16
    1fc0:	af00      	add	r7, sp, #0
    1fc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1fc4:	687b      	ldr	r3, [r7, #4]
    1fc6:	681b      	ldr	r3, [r3, #0]
    1fc8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    1fca:	68fb      	ldr	r3, [r7, #12]
    1fcc:	7e1b      	ldrb	r3, [r3, #24]
    1fce:	b2db      	uxtb	r3, r3
    1fd0:	001a      	movs	r2, r3
    1fd2:	2301      	movs	r3, #1
    1fd4:	4013      	ands	r3, r2
    1fd6:	1e5a      	subs	r2, r3, #1
    1fd8:	4193      	sbcs	r3, r2
    1fda:	b2db      	uxtb	r3, r3
}
    1fdc:	0018      	movs	r0, r3
    1fde:	46bd      	mov	sp, r7
    1fe0:	b004      	add	sp, #16
    1fe2:	bd80      	pop	{r7, pc}

00001fe4 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    1fe4:	b580      	push	{r7, lr}
    1fe6:	b084      	sub	sp, #16
    1fe8:	af00      	add	r7, sp, #0
    1fea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1fec:	687b      	ldr	r3, [r7, #4]
    1fee:	681b      	ldr	r3, [r3, #0]
    1ff0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    1ff2:	68fb      	ldr	r3, [r7, #12]
    1ff4:	7e1b      	ldrb	r3, [r3, #24]
    1ff6:	b2db      	uxtb	r3, r3
    1ff8:	001a      	movs	r2, r3
    1ffa:	2304      	movs	r3, #4
    1ffc:	4013      	ands	r3, r2
    1ffe:	1e5a      	subs	r2, r3, #1
    2000:	4193      	sbcs	r3, r2
    2002:	b2db      	uxtb	r3, r3
}
    2004:	0018      	movs	r0, r3
    2006:	46bd      	mov	sp, r7
    2008:	b004      	add	sp, #16
    200a:	bd80      	pop	{r7, pc}

0000200c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    200c:	b580      	push	{r7, lr}
    200e:	b084      	sub	sp, #16
    2010:	af00      	add	r7, sp, #0
    2012:	6078      	str	r0, [r7, #4]
    2014:	000a      	movs	r2, r1
    2016:	1cbb      	adds	r3, r7, #2
    2018:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    201a:	687b      	ldr	r3, [r7, #4]
    201c:	681b      	ldr	r3, [r3, #0]
    201e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	0018      	movs	r0, r3
    2024:	4b0a      	ldr	r3, [pc, #40]	; (2050 <spi_write+0x44>)
    2026:	4798      	blx	r3
    2028:	0003      	movs	r3, r0
    202a:	001a      	movs	r2, r3
    202c:	2301      	movs	r3, #1
    202e:	4053      	eors	r3, r2
    2030:	b2db      	uxtb	r3, r3
    2032:	2b00      	cmp	r3, #0
    2034:	d001      	beq.n	203a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    2036:	2305      	movs	r3, #5
    2038:	e006      	b.n	2048 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    203a:	1cbb      	adds	r3, r7, #2
    203c:	881b      	ldrh	r3, [r3, #0]
    203e:	05db      	lsls	r3, r3, #23
    2040:	0dda      	lsrs	r2, r3, #23
    2042:	68fb      	ldr	r3, [r7, #12]
    2044:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    2046:	2300      	movs	r3, #0
}
    2048:	0018      	movs	r0, r3
    204a:	46bd      	mov	sp, r7
    204c:	b004      	add	sp, #16
    204e:	bd80      	pop	{r7, pc}
    2050:	00001fbd 	.word	0x00001fbd

00002054 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    2054:	b580      	push	{r7, lr}
    2056:	b084      	sub	sp, #16
    2058:	af00      	add	r7, sp, #0
    205a:	6078      	str	r0, [r7, #4]
    205c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    205e:	687b      	ldr	r3, [r7, #4]
    2060:	681b      	ldr	r3, [r3, #0]
    2062:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	0018      	movs	r0, r3
    2068:	4b1b      	ldr	r3, [pc, #108]	; (20d8 <spi_read+0x84>)
    206a:	4798      	blx	r3
    206c:	0003      	movs	r3, r0
    206e:	001a      	movs	r2, r3
    2070:	2301      	movs	r3, #1
    2072:	4053      	eors	r3, r2
    2074:	b2db      	uxtb	r3, r3
    2076:	2b00      	cmp	r3, #0
    2078:	d001      	beq.n	207e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    207a:	2310      	movs	r3, #16
    207c:	e027      	b.n	20ce <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    207e:	230f      	movs	r3, #15
    2080:	18fb      	adds	r3, r7, r3
    2082:	2200      	movs	r2, #0
    2084:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2086:	68bb      	ldr	r3, [r7, #8]
    2088:	8b5b      	ldrh	r3, [r3, #26]
    208a:	b29b      	uxth	r3, r3
    208c:	001a      	movs	r2, r3
    208e:	2304      	movs	r3, #4
    2090:	4013      	ands	r3, r2
    2092:	d006      	beq.n	20a2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    2094:	230f      	movs	r3, #15
    2096:	18fb      	adds	r3, r7, r3
    2098:	221e      	movs	r2, #30
    209a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    209c:	68bb      	ldr	r3, [r7, #8]
    209e:	2204      	movs	r2, #4
    20a0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    20a2:	687b      	ldr	r3, [r7, #4]
    20a4:	799b      	ldrb	r3, [r3, #6]
    20a6:	2b01      	cmp	r3, #1
    20a8:	d108      	bne.n	20bc <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    20aa:	68bb      	ldr	r3, [r7, #8]
    20ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    20ae:	b29b      	uxth	r3, r3
    20b0:	05db      	lsls	r3, r3, #23
    20b2:	0ddb      	lsrs	r3, r3, #23
    20b4:	b29a      	uxth	r2, r3
    20b6:	683b      	ldr	r3, [r7, #0]
    20b8:	801a      	strh	r2, [r3, #0]
    20ba:	e005      	b.n	20c8 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    20bc:	68bb      	ldr	r3, [r7, #8]
    20be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    20c0:	b2db      	uxtb	r3, r3
    20c2:	b29a      	uxth	r2, r3
    20c4:	683b      	ldr	r3, [r7, #0]
    20c6:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    20c8:	230f      	movs	r3, #15
    20ca:	18fb      	adds	r3, r7, r3
    20cc:	781b      	ldrb	r3, [r3, #0]
}
    20ce:	0018      	movs	r0, r3
    20d0:	46bd      	mov	sp, r7
    20d2:	b004      	add	sp, #16
    20d4:	bd80      	pop	{r7, pc}
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	00001fe5 	.word	0x00001fe5

000020dc <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    20dc:	b580      	push	{r7, lr}
    20de:	b086      	sub	sp, #24
    20e0:	af00      	add	r7, sp, #0
    20e2:	60f8      	str	r0, [r7, #12]
    20e4:	60b9      	str	r1, [r7, #8]
    20e6:	1dbb      	adds	r3, r7, #6
    20e8:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    20ea:	2313      	movs	r3, #19
    20ec:	18fb      	adds	r3, r7, r3
    20ee:	2200      	movs	r2, #0
    20f0:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    20f2:	2317      	movs	r3, #23
    20f4:	18fb      	adds	r3, r7, r3
    20f6:	2200      	movs	r2, #0
    20f8:	701a      	strb	r2, [r3, #0]
    20fa:	2316      	movs	r3, #22
    20fc:	18fb      	adds	r3, r7, r3
    20fe:	2200      	movs	r2, #0
    2100:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    2102:	2314      	movs	r3, #20
    2104:	18fb      	adds	r3, r7, r3
    2106:	2200      	movs	r2, #0
    2108:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    210a:	2310      	movs	r3, #16
    210c:	18fb      	adds	r3, r7, r3
    210e:	2200      	movs	r2, #0
    2110:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
    2112:	68fb      	ldr	r3, [r7, #12]
    2114:	2b00      	cmp	r3, #0
    2116:	d107      	bne.n	2128 <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
    2118:	2313      	movs	r3, #19
    211a:	18fb      	adds	r3, r7, r3
    211c:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    211e:	2317      	movs	r3, #23
    2120:	18fb      	adds	r3, r7, r3
    2122:	2201      	movs	r2, #1
    2124:	701a      	strb	r2, [r3, #0]
    2126:	e00d      	b.n	2144 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
    2128:	68bb      	ldr	r3, [r7, #8]
    212a:	2b00      	cmp	r3, #0
    212c:	d107      	bne.n	213e <spi_rw+0x62>
		pu8Miso = &u8Dummy;
    212e:	2313      	movs	r3, #19
    2130:	18fb      	adds	r3, r7, r3
    2132:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    2134:	2316      	movs	r3, #22
    2136:	18fb      	adds	r3, r7, r3
    2138:	2201      	movs	r2, #1
    213a:	701a      	strb	r2, [r3, #0]
    213c:	e002      	b.n	2144 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    213e:	2306      	movs	r3, #6
    2140:	425b      	negs	r3, r3
    2142:	e06a      	b.n	221a <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
    2144:	4937      	ldr	r1, [pc, #220]	; (2224 <spi_rw+0x148>)
    2146:	4b38      	ldr	r3, [pc, #224]	; (2228 <spi_rw+0x14c>)
    2148:	2201      	movs	r2, #1
    214a:	0018      	movs	r0, r3
    214c:	4b37      	ldr	r3, [pc, #220]	; (222c <spi_rw+0x150>)
    214e:	4798      	blx	r3

	while (u16Sz) {
    2150:	e04c      	b.n	21ec <spi_rw+0x110>
		txd_data = *pu8Mosi;
    2152:	68fb      	ldr	r3, [r7, #12]
    2154:	781a      	ldrb	r2, [r3, #0]
    2156:	2314      	movs	r3, #20
    2158:	18fb      	adds	r3, r7, r3
    215a:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    215c:	46c0      	nop			; (mov r8, r8)
    215e:	4b32      	ldr	r3, [pc, #200]	; (2228 <spi_rw+0x14c>)
    2160:	0018      	movs	r0, r3
    2162:	4b33      	ldr	r3, [pc, #204]	; (2230 <spi_rw+0x154>)
    2164:	4798      	blx	r3
    2166:	0003      	movs	r3, r0
    2168:	001a      	movs	r2, r3
    216a:	2301      	movs	r3, #1
    216c:	4053      	eors	r3, r2
    216e:	b2db      	uxtb	r3, r3
    2170:	2b00      	cmp	r3, #0
    2172:	d1f4      	bne.n	215e <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    2174:	46c0      	nop			; (mov r8, r8)
    2176:	2314      	movs	r3, #20
    2178:	18fb      	adds	r3, r7, r3
    217a:	881a      	ldrh	r2, [r3, #0]
    217c:	4b2a      	ldr	r3, [pc, #168]	; (2228 <spi_rw+0x14c>)
    217e:	0011      	movs	r1, r2
    2180:	0018      	movs	r0, r3
    2182:	4b2c      	ldr	r3, [pc, #176]	; (2234 <spi_rw+0x158>)
    2184:	4798      	blx	r3
    2186:	1e03      	subs	r3, r0, #0
    2188:	d1f5      	bne.n	2176 <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	4b26      	ldr	r3, [pc, #152]	; (2228 <spi_rw+0x14c>)
    218e:	0018      	movs	r0, r3
    2190:	4b29      	ldr	r3, [pc, #164]	; (2238 <spi_rw+0x15c>)
    2192:	4798      	blx	r3
    2194:	0003      	movs	r3, r0
    2196:	001a      	movs	r2, r3
    2198:	2301      	movs	r3, #1
    219a:	4053      	eors	r3, r2
    219c:	b2db      	uxtb	r3, r3
    219e:	2b00      	cmp	r3, #0
    21a0:	d1f4      	bne.n	218c <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	2310      	movs	r3, #16
    21a6:	18fa      	adds	r2, r7, r3
    21a8:	4b1f      	ldr	r3, [pc, #124]	; (2228 <spi_rw+0x14c>)
    21aa:	0011      	movs	r1, r2
    21ac:	0018      	movs	r0, r3
    21ae:	4b23      	ldr	r3, [pc, #140]	; (223c <spi_rw+0x160>)
    21b0:	4798      	blx	r3
    21b2:	1e03      	subs	r3, r0, #0
    21b4:	d1f6      	bne.n	21a4 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
    21b6:	2310      	movs	r3, #16
    21b8:	18fb      	adds	r3, r7, r3
    21ba:	881b      	ldrh	r3, [r3, #0]
    21bc:	b2da      	uxtb	r2, r3
    21be:	68bb      	ldr	r3, [r7, #8]
    21c0:	701a      	strb	r2, [r3, #0]

		u16Sz--;
    21c2:	1dbb      	adds	r3, r7, #6
    21c4:	881a      	ldrh	r2, [r3, #0]
    21c6:	1dbb      	adds	r3, r7, #6
    21c8:	3a01      	subs	r2, #1
    21ca:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    21cc:	2316      	movs	r3, #22
    21ce:	18fb      	adds	r3, r7, r3
    21d0:	781b      	ldrb	r3, [r3, #0]
    21d2:	2b00      	cmp	r3, #0
    21d4:	d102      	bne.n	21dc <spi_rw+0x100>
			pu8Miso++;
    21d6:	68bb      	ldr	r3, [r7, #8]
    21d8:	3301      	adds	r3, #1
    21da:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    21dc:	2317      	movs	r3, #23
    21de:	18fb      	adds	r3, r7, r3
    21e0:	781b      	ldrb	r3, [r3, #0]
    21e2:	2b00      	cmp	r3, #0
    21e4:	d102      	bne.n	21ec <spi_rw+0x110>
			pu8Mosi++;
    21e6:	68fb      	ldr	r3, [r7, #12]
    21e8:	3301      	adds	r3, #1
    21ea:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    21ec:	1dbb      	adds	r3, r7, #6
    21ee:	881b      	ldrh	r3, [r3, #0]
    21f0:	2b00      	cmp	r3, #0
    21f2:	d1ae      	bne.n	2152 <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    21f4:	46c0      	nop			; (mov r8, r8)
    21f6:	4b0c      	ldr	r3, [pc, #48]	; (2228 <spi_rw+0x14c>)
    21f8:	0018      	movs	r0, r3
    21fa:	4b11      	ldr	r3, [pc, #68]	; (2240 <spi_rw+0x164>)
    21fc:	4798      	blx	r3
    21fe:	0003      	movs	r3, r0
    2200:	001a      	movs	r2, r3
    2202:	2301      	movs	r3, #1
    2204:	4053      	eors	r3, r2
    2206:	b2db      	uxtb	r3, r3
    2208:	2b00      	cmp	r3, #0
    220a:	d1f4      	bne.n	21f6 <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    220c:	4905      	ldr	r1, [pc, #20]	; (2224 <spi_rw+0x148>)
    220e:	4b06      	ldr	r3, [pc, #24]	; (2228 <spi_rw+0x14c>)
    2210:	2200      	movs	r2, #0
    2212:	0018      	movs	r0, r3
    2214:	4b05      	ldr	r3, [pc, #20]	; (222c <spi_rw+0x150>)
    2216:	4798      	blx	r3

	return M2M_SUCCESS;
    2218:	2300      	movs	r3, #0
}
    221a:	0018      	movs	r0, r3
    221c:	46bd      	mov	sp, r7
    221e:	b006      	add	sp, #24
    2220:	bd80      	pop	{r7, pc}
    2222:	46c0      	nop			; (mov r8, r8)
    2224:	2000461c 	.word	0x2000461c
    2228:	20004620 	.word	0x20004620
    222c:	00008931 	.word	0x00008931
    2230:	00001fbd 	.word	0x00001fbd
    2234:	0000200d 	.word	0x0000200d
    2238:	00001fe5 	.word	0x00001fe5
    223c:	00002055 	.word	0x00002055
    2240:	00001f95 	.word	0x00001f95

00002244 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    2244:	b580      	push	{r7, lr}
    2246:	b092      	sub	sp, #72	; 0x48
    2248:	af00      	add	r7, sp, #0
    224a:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    224c:	2347      	movs	r3, #71	; 0x47
    224e:	18fb      	adds	r3, r7, r3
    2250:	2200      	movs	r2, #0
    2252:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    2254:	2308      	movs	r3, #8
    2256:	18fb      	adds	r3, r7, r3
    2258:	0018      	movs	r0, r3
    225a:	4b26      	ldr	r3, [pc, #152]	; (22f4 <nm_bus_init+0xb0>)
    225c:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    225e:	2308      	movs	r3, #8
    2260:	18fb      	adds	r3, r7, r3
    2262:	220e      	movs	r2, #14
    2264:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    2266:	2308      	movs	r3, #8
    2268:	18fa      	adds	r2, r7, r3
    226a:	4b23      	ldr	r3, [pc, #140]	; (22f8 <nm_bus_init+0xb4>)
    226c:	0011      	movs	r1, r2
    226e:	0018      	movs	r0, r3
    2270:	4b22      	ldr	r3, [pc, #136]	; (22fc <nm_bus_init+0xb8>)
    2272:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    2274:	230c      	movs	r3, #12
    2276:	18fb      	adds	r3, r7, r3
    2278:	0018      	movs	r0, r3
    227a:	4b21      	ldr	r3, [pc, #132]	; (2300 <nm_bus_init+0xbc>)
    227c:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    227e:	230c      	movs	r3, #12
    2280:	18fb      	adds	r3, r7, r3
    2282:	22c0      	movs	r2, #192	; 0xc0
    2284:	0392      	lsls	r2, r2, #14
    2286:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    2288:	230c      	movs	r3, #12
    228a:	18fb      	adds	r3, r7, r3
    228c:	4a1d      	ldr	r2, [pc, #116]	; (2304 <nm_bus_init+0xc0>)
    228e:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    2290:	230c      	movs	r3, #12
    2292:	18fb      	adds	r3, r7, r3
    2294:	4a1c      	ldr	r2, [pc, #112]	; (2308 <nm_bus_init+0xc4>)
    2296:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    2298:	230c      	movs	r3, #12
    229a:	18fb      	adds	r3, r7, r3
    229c:	2201      	movs	r2, #1
    229e:	4252      	negs	r2, r2
    22a0:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    22a2:	230c      	movs	r3, #12
    22a4:	18fb      	adds	r3, r7, r3
    22a6:	4a19      	ldr	r2, [pc, #100]	; (230c <nm_bus_init+0xc8>)
    22a8:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    22aa:	230c      	movs	r3, #12
    22ac:	18fb      	adds	r3, r7, r3
    22ae:	2200      	movs	r2, #0
    22b0:	751a      	strb	r2, [r3, #20]

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    22b2:	230c      	movs	r3, #12
    22b4:	18fb      	adds	r3, r7, r3
    22b6:	4a16      	ldr	r2, [pc, #88]	; (2310 <nm_bus_init+0xcc>)
    22b8:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    22ba:	230c      	movs	r3, #12
    22bc:	18fa      	adds	r2, r7, r3
    22be:	4915      	ldr	r1, [pc, #84]	; (2314 <nm_bus_init+0xd0>)
    22c0:	4b15      	ldr	r3, [pc, #84]	; (2318 <nm_bus_init+0xd4>)
    22c2:	0018      	movs	r0, r3
    22c4:	4b15      	ldr	r3, [pc, #84]	; (231c <nm_bus_init+0xd8>)
    22c6:	4798      	blx	r3
    22c8:	1e03      	subs	r3, r0, #0
    22ca:	d002      	beq.n	22d2 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    22cc:	2306      	movs	r3, #6
    22ce:	425b      	negs	r3, r3
    22d0:	e00c      	b.n	22ec <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    22d2:	4b11      	ldr	r3, [pc, #68]	; (2318 <nm_bus_init+0xd4>)
    22d4:	0018      	movs	r0, r3
    22d6:	4b12      	ldr	r3, [pc, #72]	; (2320 <nm_bus_init+0xdc>)
    22d8:	4798      	blx	r3

	nm_bsp_reset();
    22da:	4b12      	ldr	r3, [pc, #72]	; (2324 <nm_bus_init+0xe0>)
    22dc:	4798      	blx	r3
	nm_bsp_sleep(1);
    22de:	2001      	movs	r0, #1
    22e0:	4b11      	ldr	r3, [pc, #68]	; (2328 <nm_bus_init+0xe4>)
    22e2:	4798      	blx	r3
#endif
	return result;
    22e4:	2347      	movs	r3, #71	; 0x47
    22e6:	18fb      	adds	r3, r7, r3
    22e8:	781b      	ldrb	r3, [r3, #0]
    22ea:	b25b      	sxtb	r3, r3
}
    22ec:	0018      	movs	r0, r3
    22ee:	46bd      	mov	sp, r7
    22f0:	b012      	add	sp, #72	; 0x48
    22f2:	bd80      	pop	{r7, pc}
    22f4:	00001e61 	.word	0x00001e61
    22f8:	2000461c 	.word	0x2000461c
    22fc:	00001e85 	.word	0x00001e85
    2300:	00001ddd 	.word	0x00001ddd
    2304:	000c0002 	.word	0x000c0002
    2308:	000d0002 	.word	0x000d0002
    230c:	000f0002 	.word	0x000f0002
    2310:	00b71b00 	.word	0x00b71b00
    2314:	42001000 	.word	0x42001000
    2318:	20004620 	.word	0x20004620
    231c:	0000866d 	.word	0x0000866d
    2320:	00001ee9 	.word	0x00001ee9
    2324:	00001b15 	.word	0x00001b15
    2328:	00001b59 	.word	0x00001b59

0000232c <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    232c:	b590      	push	{r4, r7, lr}
    232e:	b085      	sub	sp, #20
    2330:	af00      	add	r7, sp, #0
    2332:	0002      	movs	r2, r0
    2334:	6039      	str	r1, [r7, #0]
    2336:	1dfb      	adds	r3, r7, #7
    2338:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    233a:	230f      	movs	r3, #15
    233c:	18fb      	adds	r3, r7, r3
    233e:	2200      	movs	r2, #0
    2340:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    2342:	1dfb      	adds	r3, r7, #7
    2344:	781b      	ldrb	r3, [r3, #0]
    2346:	2b03      	cmp	r3, #3
    2348:	d10f      	bne.n	236a <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    234a:	683b      	ldr	r3, [r7, #0]
    234c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    234e:	68bb      	ldr	r3, [r7, #8]
    2350:	6818      	ldr	r0, [r3, #0]
    2352:	68bb      	ldr	r3, [r7, #8]
    2354:	6859      	ldr	r1, [r3, #4]
    2356:	68bb      	ldr	r3, [r7, #8]
    2358:	891b      	ldrh	r3, [r3, #8]
    235a:	220f      	movs	r2, #15
    235c:	18bc      	adds	r4, r7, r2
    235e:	001a      	movs	r2, r3
    2360:	4b0f      	ldr	r3, [pc, #60]	; (23a0 <nm_bus_ioctl+0x74>)
    2362:	4798      	blx	r3
    2364:	0003      	movs	r3, r0
    2366:	7023      	strb	r3, [r4, #0]
		}
		break;
    2368:	e012      	b.n	2390 <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
    236a:	230f      	movs	r3, #15
    236c:	18fb      	adds	r3, r7, r3
    236e:	22ff      	movs	r2, #255	; 0xff
    2370:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    2372:	2386      	movs	r3, #134	; 0x86
    2374:	005a      	lsls	r2, r3, #1
    2376:	490b      	ldr	r1, [pc, #44]	; (23a4 <nm_bus_ioctl+0x78>)
    2378:	4b0b      	ldr	r3, [pc, #44]	; (23a8 <nm_bus_ioctl+0x7c>)
    237a:	0018      	movs	r0, r3
    237c:	4b0b      	ldr	r3, [pc, #44]	; (23ac <nm_bus_ioctl+0x80>)
    237e:	4798      	blx	r3
    2380:	4b0b      	ldr	r3, [pc, #44]	; (23b0 <nm_bus_ioctl+0x84>)
    2382:	0018      	movs	r0, r3
    2384:	4b0b      	ldr	r3, [pc, #44]	; (23b4 <nm_bus_ioctl+0x88>)
    2386:	4798      	blx	r3
    2388:	200d      	movs	r0, #13
    238a:	4b0b      	ldr	r3, [pc, #44]	; (23b8 <nm_bus_ioctl+0x8c>)
    238c:	4798      	blx	r3
			break;
    238e:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    2390:	230f      	movs	r3, #15
    2392:	18fb      	adds	r3, r7, r3
    2394:	781b      	ldrb	r3, [r3, #0]
    2396:	b25b      	sxtb	r3, r3
}
    2398:	0018      	movs	r0, r3
    239a:	46bd      	mov	sp, r7
    239c:	b005      	add	sp, #20
    239e:	bd90      	pop	{r4, r7, pc}
    23a0:	000020dd 	.word	0x000020dd
    23a4:	00010fcc 	.word	0x00010fcc
    23a8:	00010fa4 	.word	0x00010fa4
    23ac:	0000fd31 	.word	0x0000fd31
    23b0:	00010fb8 	.word	0x00010fb8
    23b4:	0000fe51 	.word	0x0000fe51
    23b8:	0000fd65 	.word	0x0000fd65

000023bc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    23bc:	b580      	push	{r7, lr}
    23be:	b082      	sub	sp, #8
    23c0:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    23c2:	1dfb      	adds	r3, r7, #7
    23c4:	2200      	movs	r2, #0
    23c6:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    23c8:	1d3b      	adds	r3, r7, #4
    23ca:	0018      	movs	r0, r3
    23cc:	4b09      	ldr	r3, [pc, #36]	; (23f4 <nm_bus_deinit+0x38>)
    23ce:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    23d0:	1d3b      	adds	r3, r7, #4
    23d2:	2200      	movs	r2, #0
    23d4:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    23d6:	1d3b      	adds	r3, r7, #4
    23d8:	2200      	movs	r2, #0
    23da:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);	
    23dc:	4b06      	ldr	r3, [pc, #24]	; (23f8 <nm_bus_deinit+0x3c>)
    23de:	0018      	movs	r0, r3
    23e0:	4b06      	ldr	r3, [pc, #24]	; (23fc <nm_bus_deinit+0x40>)
    23e2:	4798      	blx	r3

#endif /* CONF_WINC_USE_SPI */
	return result;
    23e4:	1dfb      	adds	r3, r7, #7
    23e6:	781b      	ldrb	r3, [r3, #0]
    23e8:	b25b      	sxtb	r3, r3
}
    23ea:	0018      	movs	r0, r3
    23ec:	46bd      	mov	sp, r7
    23ee:	b002      	add	sp, #8
    23f0:	bd80      	pop	{r7, pc}
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	00001d45 	.word	0x00001d45
    23f8:	20004620 	.word	0x20004620
    23fc:	00001f39 	.word	0x00001f39

00002400 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    2400:	b580      	push	{r7, lr}
    2402:	b084      	sub	sp, #16
    2404:	af00      	add	r7, sp, #0
    2406:	60f8      	str	r0, [r7, #12]
    2408:	60b9      	str	r1, [r7, #8]
    240a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    240c:	687b      	ldr	r3, [r7, #4]
    240e:	2b00      	cmp	r3, #0
    2410:	d010      	beq.n	2434 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    2412:	68bb      	ldr	r3, [r7, #8]
    2414:	781a      	ldrb	r2, [r3, #0]
    2416:	68fb      	ldr	r3, [r7, #12]
    2418:	701a      	strb	r2, [r3, #0]
		pDst++;
    241a:	68fb      	ldr	r3, [r7, #12]
    241c:	3301      	adds	r3, #1
    241e:	60fb      	str	r3, [r7, #12]
		pSrc++;
    2420:	68bb      	ldr	r3, [r7, #8]
    2422:	3301      	adds	r3, #1
    2424:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    2426:	687b      	ldr	r3, [r7, #4]
    2428:	3b01      	subs	r3, #1
    242a:	607b      	str	r3, [r7, #4]
    242c:	687b      	ldr	r3, [r7, #4]
    242e:	2b00      	cmp	r3, #0
    2430:	d1ef      	bne.n	2412 <m2m_memcpy+0x12>
    2432:	e000      	b.n	2436 <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    2434:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
    2436:	46bd      	mov	sp, r7
    2438:	b004      	add	sp, #16
    243a:	bd80      	pop	{r7, pc}

0000243c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    243c:	b580      	push	{r7, lr}
    243e:	b084      	sub	sp, #16
    2440:	af00      	add	r7, sp, #0
    2442:	60f8      	str	r0, [r7, #12]
    2444:	607a      	str	r2, [r7, #4]
    2446:	230b      	movs	r3, #11
    2448:	18fb      	adds	r3, r7, r3
    244a:	1c0a      	adds	r2, r1, #0
    244c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	2b00      	cmp	r3, #0
    2452:	d00e      	beq.n	2472 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    2454:	68fb      	ldr	r3, [r7, #12]
    2456:	220b      	movs	r2, #11
    2458:	18ba      	adds	r2, r7, r2
    245a:	7812      	ldrb	r2, [r2, #0]
    245c:	701a      	strb	r2, [r3, #0]
		pBuf++;
    245e:	68fb      	ldr	r3, [r7, #12]
    2460:	3301      	adds	r3, #1
    2462:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    2464:	687b      	ldr	r3, [r7, #4]
    2466:	3b01      	subs	r3, #1
    2468:	607b      	str	r3, [r7, #4]
    246a:	687b      	ldr	r3, [r7, #4]
    246c:	2b00      	cmp	r3, #0
    246e:	d1f1      	bne.n	2454 <m2m_memset+0x18>
    2470:	e000      	b.n	2474 <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    2472:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    2474:	46bd      	mov	sp, r7
    2476:	b004      	add	sp, #16
    2478:	bd80      	pop	{r7, pc}
    247a:	46c0      	nop			; (mov r8, r8)

0000247c <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    247c:	b580      	push	{r7, lr}
    247e:	b084      	sub	sp, #16
    2480:	af00      	add	r7, sp, #0
    2482:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    2484:	230e      	movs	r3, #14
    2486:	18fb      	adds	r3, r7, r3
    2488:	2200      	movs	r2, #0
    248a:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    248c:	e009      	b.n	24a2 <m2m_strlen+0x26>
	{
		u16StrLen ++;
    248e:	230e      	movs	r3, #14
    2490:	18fb      	adds	r3, r7, r3
    2492:	881a      	ldrh	r2, [r3, #0]
    2494:	230e      	movs	r3, #14
    2496:	18fb      	adds	r3, r7, r3
    2498:	3201      	adds	r2, #1
    249a:	801a      	strh	r2, [r3, #0]
		pcStr++;
    249c:	687b      	ldr	r3, [r7, #4]
    249e:	3301      	adds	r3, #1
    24a0:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    24a2:	687b      	ldr	r3, [r7, #4]
    24a4:	781b      	ldrb	r3, [r3, #0]
    24a6:	2b00      	cmp	r3, #0
    24a8:	d1f1      	bne.n	248e <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    24aa:	230e      	movs	r3, #14
    24ac:	18fb      	adds	r3, r7, r3
    24ae:	881b      	ldrh	r3, [r3, #0]
}
    24b0:	0018      	movs	r0, r3
    24b2:	46bd      	mov	sp, r7
    24b4:	b004      	add	sp, #16
    24b6:	bd80      	pop	{r7, pc}

000024b8 <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    24b8:	b580      	push	{r7, lr}
    24ba:	b084      	sub	sp, #16
    24bc:	af00      	add	r7, sp, #0
    24be:	60f8      	str	r0, [r7, #12]
    24c0:	60b9      	str	r1, [r7, #8]
    24c2:	1dbb      	adds	r3, r7, #6
    24c4:	801a      	strh	r2, [r3, #0]
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    24c6:	e020      	b.n	250a <m2m_strncmp+0x52>
	if (*pcS1 != *pcS2)
    24c8:	68fb      	ldr	r3, [r7, #12]
    24ca:	781a      	ldrb	r2, [r3, #0]
    24cc:	68bb      	ldr	r3, [r7, #8]
    24ce:	781b      	ldrb	r3, [r3, #0]
    24d0:	429a      	cmp	r2, r3
    24d2:	d009      	beq.n	24e8 <m2m_strncmp+0x30>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
    24d4:	68fb      	ldr	r3, [r7, #12]
    24d6:	781a      	ldrb	r2, [r3, #0]
    24d8:	68bb      	ldr	r3, [r7, #8]
    24da:	781b      	ldrb	r3, [r3, #0]
    24dc:	429a      	cmp	r2, r3
    24de:	d201      	bcs.n	24e4 <m2m_strncmp+0x2c>
    24e0:	23ff      	movs	r3, #255	; 0xff
    24e2:	e017      	b.n	2514 <m2m_strncmp+0x5c>
    24e4:	2301      	movs	r3, #1
    24e6:	e015      	b.n	2514 <m2m_strncmp+0x5c>
	else if (*pcS1 == '\0')
    24e8:	68fb      	ldr	r3, [r7, #12]
    24ea:	781b      	ldrb	r3, [r3, #0]
    24ec:	2b00      	cmp	r3, #0
    24ee:	d101      	bne.n	24f4 <m2m_strncmp+0x3c>
	    return 0;
    24f0:	2300      	movs	r3, #0
    24f2:	e00f      	b.n	2514 <m2m_strncmp+0x5c>
	return u16StrLen;
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    24f4:	68fb      	ldr	r3, [r7, #12]
    24f6:	3301      	adds	r3, #1
    24f8:	60fb      	str	r3, [r7, #12]
    24fa:	68bb      	ldr	r3, [r7, #8]
    24fc:	3301      	adds	r3, #1
    24fe:	60bb      	str	r3, [r7, #8]
    2500:	1dbb      	adds	r3, r7, #6
    2502:	1dba      	adds	r2, r7, #6
    2504:	8812      	ldrh	r2, [r2, #0]
    2506:	3a01      	subs	r2, #1
    2508:	801a      	strh	r2, [r3, #0]
    250a:	1dbb      	adds	r3, r7, #6
    250c:	881b      	ldrh	r3, [r3, #0]
    250e:	2b00      	cmp	r3, #0
    2510:	d1da      	bne.n	24c8 <m2m_strncmp+0x10>
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
    2512:	2300      	movs	r3, #0
}
    2514:	0018      	movs	r0, r3
    2516:	46bd      	mov	sp, r7
    2518:	b004      	add	sp, #16
    251a:	bd80      	pop	{r7, pc}

0000251c <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
    251c:	b590      	push	{r4, r7, lr}
    251e:	b085      	sub	sp, #20
    2520:	af00      	add	r7, sp, #0
    2522:	6078      	str	r0, [r7, #4]
    2524:	6039      	str	r1, [r7, #0]
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
    2526:	683b      	ldr	r3, [r7, #0]
    2528:	1c5a      	adds	r2, r3, #1
    252a:	603a      	str	r2, [r7, #0]
    252c:	220f      	movs	r2, #15
    252e:	18ba      	adds	r2, r7, r2
    2530:	781b      	ldrb	r3, [r3, #0]
    2532:	7013      	strb	r3, [r2, #0]
    if (!u8c)
    2534:	230f      	movs	r3, #15
    2536:	18fb      	adds	r3, r7, r3
    2538:	781b      	ldrb	r3, [r3, #0]
    253a:	2b00      	cmp	r3, #0
    253c:	d101      	bne.n	2542 <m2m_strstr+0x26>
        return (uint8 *) pcIn;	// Trivial empty string case
    253e:	687b      	ldr	r3, [r7, #4]
    2540:	e029      	b.n	2596 <m2m_strstr+0x7a>

    u16StrLen = m2m_strlen(pcStr);
    2542:	230c      	movs	r3, #12
    2544:	18fc      	adds	r4, r7, r3
    2546:	683b      	ldr	r3, [r7, #0]
    2548:	0018      	movs	r0, r3
    254a:	4b15      	ldr	r3, [pc, #84]	; (25a0 <m2m_strstr+0x84>)
    254c:	4798      	blx	r3
    254e:	0003      	movs	r3, r0
    2550:	8023      	strh	r3, [r4, #0]
    do {
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	1c5a      	adds	r2, r3, #1
    2556:	607a      	str	r2, [r7, #4]
    2558:	220b      	movs	r2, #11
    255a:	18ba      	adds	r2, r7, r2
    255c:	781b      	ldrb	r3, [r3, #0]
    255e:	7013      	strb	r3, [r2, #0]
            if (!u8Sc)
    2560:	230b      	movs	r3, #11
    2562:	18fb      	adds	r3, r7, r3
    2564:	781b      	ldrb	r3, [r3, #0]
    2566:	2b00      	cmp	r3, #0
    2568:	d101      	bne.n	256e <m2m_strstr+0x52>
                return (uint8 *) 0;
    256a:	2300      	movs	r3, #0
    256c:	e013      	b.n	2596 <m2m_strstr+0x7a>
        } while (u8Sc != u8c);
    256e:	230b      	movs	r3, #11
    2570:	18fa      	adds	r2, r7, r3
    2572:	230f      	movs	r3, #15
    2574:	18fb      	adds	r3, r7, r3
    2576:	7812      	ldrb	r2, [r2, #0]
    2578:	781b      	ldrb	r3, [r3, #0]
    257a:	429a      	cmp	r2, r3
    257c:	d1e9      	bne.n	2552 <m2m_strstr+0x36>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
    257e:	230c      	movs	r3, #12
    2580:	18fb      	adds	r3, r7, r3
    2582:	881a      	ldrh	r2, [r3, #0]
    2584:	6839      	ldr	r1, [r7, #0]
    2586:	687b      	ldr	r3, [r7, #4]
    2588:	0018      	movs	r0, r3
    258a:	4b06      	ldr	r3, [pc, #24]	; (25a4 <m2m_strstr+0x88>)
    258c:	4798      	blx	r3
    258e:	1e03      	subs	r3, r0, #0
    2590:	d1df      	bne.n	2552 <m2m_strstr+0x36>

    return (uint8 *) (pcIn - 1);
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	3b01      	subs	r3, #1
}
    2596:	0018      	movs	r0, r3
    2598:	46bd      	mov	sp, r7
    259a:	b005      	add	sp, #20
    259c:	bd90      	pop	{r4, r7, pc}
    259e:	46c0      	nop			; (mov r8, r8)
    25a0:	0000247d 	.word	0x0000247d
    25a4:	000024b9 	.word	0x000024b9

000025a8 <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
    25a8:	b580      	push	{r7, lr}
    25aa:	af00      	add	r7, sp, #0
	gu8Interrupt++;
    25ac:	4b04      	ldr	r3, [pc, #16]	; (25c0 <isr+0x18>)
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	b2db      	uxtb	r3, r3
    25b2:	3301      	adds	r3, #1
    25b4:	b2da      	uxtb	r2, r3
    25b6:	4b02      	ldr	r3, [pc, #8]	; (25c0 <isr+0x18>)
    25b8:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	46bd      	mov	sp, r7
    25be:	bd80      	pop	{r7, pc}
    25c0:	200000c3 	.word	0x200000c3

000025c4 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    25c4:	b590      	push	{r4, r7, lr}
    25c6:	b083      	sub	sp, #12
    25c8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    25ca:	1dfb      	adds	r3, r7, #7
    25cc:	2200      	movs	r2, #0
    25ce:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    25d0:	2001      	movs	r0, #1
    25d2:	4b13      	ldr	r3, [pc, #76]	; (2620 <hif_set_rx_done+0x5c>)
    25d4:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    25d6:	1dfc      	adds	r4, r7, #7
    25d8:	003b      	movs	r3, r7
    25da:	4a12      	ldr	r2, [pc, #72]	; (2624 <hif_set_rx_done+0x60>)
    25dc:	0019      	movs	r1, r3
    25de:	0010      	movs	r0, r2
    25e0:	4b11      	ldr	r3, [pc, #68]	; (2628 <hif_set_rx_done+0x64>)
    25e2:	4798      	blx	r3
    25e4:	0003      	movs	r3, r0
    25e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    25e8:	1dfb      	adds	r3, r7, #7
    25ea:	781b      	ldrb	r3, [r3, #0]
    25ec:	b25b      	sxtb	r3, r3
    25ee:	2b00      	cmp	r3, #0
    25f0:	d10d      	bne.n	260e <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
    25f2:	683b      	ldr	r3, [r7, #0]
    25f4:	2202      	movs	r2, #2
    25f6:	4313      	orrs	r3, r2
    25f8:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    25fa:	683b      	ldr	r3, [r7, #0]
    25fc:	1dfc      	adds	r4, r7, #7
    25fe:	4a09      	ldr	r2, [pc, #36]	; (2624 <hif_set_rx_done+0x60>)
    2600:	0019      	movs	r1, r3
    2602:	0010      	movs	r0, r2
    2604:	4b09      	ldr	r3, [pc, #36]	; (262c <hif_set_rx_done+0x68>)
    2606:	4798      	blx	r3
    2608:	0003      	movs	r3, r0
    260a:	7023      	strb	r3, [r4, #0]
    260c:	e000      	b.n	2610 <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    260e:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    2610:	1dfb      	adds	r3, r7, #7
    2612:	781b      	ldrb	r3, [r3, #0]
    2614:	b25b      	sxtb	r3, r3

}
    2616:	0018      	movs	r0, r3
    2618:	46bd      	mov	sp, r7
    261a:	b003      	add	sp, #12
    261c:	bd90      	pop	{r4, r7, pc}
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	00001c2d 	.word	0x00001c2d
    2624:	00001070 	.word	0x00001070
    2628:	00004759 	.word	0x00004759
    262c:	0000477d 	.word	0x0000477d

00002630 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    2630:	b580      	push	{r7, lr}
    2632:	b082      	sub	sp, #8
    2634:	af00      	add	r7, sp, #0
    2636:	603a      	str	r2, [r7, #0]
    2638:	1dfb      	adds	r3, r7, #7
    263a:	1c02      	adds	r2, r0, #0
    263c:	701a      	strb	r2, [r3, #0]
    263e:	1d3b      	adds	r3, r7, #4
    2640:	1c0a      	adds	r2, r1, #0
    2642:	801a      	strh	r2, [r3, #0]


}
    2644:	46c0      	nop			; (mov r8, r8)
    2646:	46bd      	mov	sp, r7
    2648:	b002      	add	sp, #8
    264a:	bd80      	pop	{r7, pc}

0000264c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    264c:	b590      	push	{r4, r7, lr}
    264e:	b083      	sub	sp, #12
    2650:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2652:	1dfb      	adds	r3, r7, #7
    2654:	2200      	movs	r2, #0
    2656:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
    2658:	4b1c      	ldr	r3, [pc, #112]	; (26cc <hif_chip_wake+0x80>)
    265a:	781b      	ldrb	r3, [r3, #0]
    265c:	b2db      	uxtb	r3, r3
    265e:	2b00      	cmp	r3, #0
    2660:	d121      	bne.n	26a6 <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    2662:	4b1b      	ldr	r3, [pc, #108]	; (26d0 <hif_chip_wake+0x84>)
    2664:	781b      	ldrb	r3, [r3, #0]
    2666:	b2db      	uxtb	r3, r3
    2668:	2b03      	cmp	r3, #3
    266a:	d004      	beq.n	2676 <hif_chip_wake+0x2a>
    266c:	4b18      	ldr	r3, [pc, #96]	; (26d0 <hif_chip_wake+0x84>)
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	b2db      	uxtb	r3, r3
    2672:	2b04      	cmp	r3, #4
    2674:	d117      	bne.n	26a6 <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
    2676:	1dfc      	adds	r4, r7, #7
    2678:	4b16      	ldr	r3, [pc, #88]	; (26d4 <hif_chip_wake+0x88>)
    267a:	4798      	blx	r3
    267c:	0003      	movs	r3, r0
    267e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    2680:	1dfb      	adds	r3, r7, #7
    2682:	781b      	ldrb	r3, [r3, #0]
    2684:	b25b      	sxtb	r3, r3
    2686:	2b00      	cmp	r3, #0
    2688:	d115      	bne.n	26b6 <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    268a:	1dfc      	adds	r4, r7, #7
    268c:	4a12      	ldr	r2, [pc, #72]	; (26d8 <hif_chip_wake+0x8c>)
    268e:	4b13      	ldr	r3, [pc, #76]	; (26dc <hif_chip_wake+0x90>)
    2690:	0011      	movs	r1, r2
    2692:	0018      	movs	r0, r3
    2694:	4b12      	ldr	r3, [pc, #72]	; (26e0 <hif_chip_wake+0x94>)
    2696:	4798      	blx	r3
    2698:	0003      	movs	r3, r0
    269a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    269c:	1dfb      	adds	r3, r7, #7
    269e:	781b      	ldrb	r3, [r3, #0]
    26a0:	b25b      	sxtb	r3, r3
    26a2:	2b00      	cmp	r3, #0
    26a4:	d109      	bne.n	26ba <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    26a6:	4b09      	ldr	r3, [pc, #36]	; (26cc <hif_chip_wake+0x80>)
    26a8:	781b      	ldrb	r3, [r3, #0]
    26aa:	b2db      	uxtb	r3, r3
    26ac:	3301      	adds	r3, #1
    26ae:	b2da      	uxtb	r2, r3
    26b0:	4b06      	ldr	r3, [pc, #24]	; (26cc <hif_chip_wake+0x80>)
    26b2:	701a      	strb	r2, [r3, #0]
    26b4:	e002      	b.n	26bc <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
    26b6:	46c0      	nop			; (mov r8, r8)
    26b8:	e000      	b.n	26bc <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    26ba:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
    26bc:	1dfb      	adds	r3, r7, #7
    26be:	781b      	ldrb	r3, [r3, #0]
    26c0:	b25b      	sxtb	r3, r3
}
    26c2:	0018      	movs	r0, r3
    26c4:	46bd      	mov	sp, r7
    26c6:	b003      	add	sp, #12
    26c8:	bd90      	pop	{r4, r7, pc}
    26ca:	46c0      	nop			; (mov r8, r8)
    26cc:	200000c1 	.word	0x200000c1
    26d0:	200000c0 	.word	0x200000c0
    26d4:	00003e2d 	.word	0x00003e2d
    26d8:	00005678 	.word	0x00005678
    26dc:	00001074 	.word	0x00001074
    26e0:	0000477d 	.word	0x0000477d

000026e4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    26e4:	b590      	push	{r4, r7, lr}
    26e6:	b083      	sub	sp, #12
    26e8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    26ea:	1dfb      	adds	r3, r7, #7
    26ec:	2200      	movs	r2, #0
    26ee:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
    26f0:	4b29      	ldr	r3, [pc, #164]	; (2798 <hif_chip_sleep+0xb4>)
    26f2:	781b      	ldrb	r3, [r3, #0]
    26f4:	b2db      	uxtb	r3, r3
    26f6:	2b00      	cmp	r3, #0
    26f8:	d006      	beq.n	2708 <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
    26fa:	4b27      	ldr	r3, [pc, #156]	; (2798 <hif_chip_sleep+0xb4>)
    26fc:	781b      	ldrb	r3, [r3, #0]
    26fe:	b2db      	uxtb	r3, r3
    2700:	3b01      	subs	r3, #1
    2702:	b2da      	uxtb	r2, r3
    2704:	4b24      	ldr	r3, [pc, #144]	; (2798 <hif_chip_sleep+0xb4>)
    2706:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
    2708:	4b23      	ldr	r3, [pc, #140]	; (2798 <hif_chip_sleep+0xb4>)
    270a:	781b      	ldrb	r3, [r3, #0]
    270c:	b2db      	uxtb	r3, r3
    270e:	2b00      	cmp	r3, #0
    2710:	d13a      	bne.n	2788 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    2712:	4b22      	ldr	r3, [pc, #136]	; (279c <hif_chip_sleep+0xb8>)
    2714:	781b      	ldrb	r3, [r3, #0]
    2716:	b2db      	uxtb	r3, r3
    2718:	2b03      	cmp	r3, #3
    271a:	d004      	beq.n	2726 <hif_chip_sleep+0x42>
    271c:	4b1f      	ldr	r3, [pc, #124]	; (279c <hif_chip_sleep+0xb8>)
    271e:	781b      	ldrb	r3, [r3, #0]
    2720:	b2db      	uxtb	r3, r3
    2722:	2b04      	cmp	r3, #4
    2724:	d130      	bne.n	2788 <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
    2726:	2300      	movs	r3, #0
    2728:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    272a:	1dfc      	adds	r4, r7, #7
    272c:	4a1c      	ldr	r2, [pc, #112]	; (27a0 <hif_chip_sleep+0xbc>)
    272e:	4b1d      	ldr	r3, [pc, #116]	; (27a4 <hif_chip_sleep+0xc0>)
    2730:	0011      	movs	r1, r2
    2732:	0018      	movs	r0, r3
    2734:	4b1c      	ldr	r3, [pc, #112]	; (27a8 <hif_chip_sleep+0xc4>)
    2736:	4798      	blx	r3
    2738:	0003      	movs	r3, r0
    273a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    273c:	1dfb      	adds	r3, r7, #7
    273e:	781b      	ldrb	r3, [r3, #0]
    2740:	b25b      	sxtb	r3, r3
    2742:	2b00      	cmp	r3, #0
    2744:	d11d      	bne.n	2782 <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    2746:	1dfc      	adds	r4, r7, #7
    2748:	003b      	movs	r3, r7
    274a:	0019      	movs	r1, r3
    274c:	2001      	movs	r0, #1
    274e:	4b17      	ldr	r3, [pc, #92]	; (27ac <hif_chip_sleep+0xc8>)
    2750:	4798      	blx	r3
    2752:	0003      	movs	r3, r0
    2754:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    2756:	1dfb      	adds	r3, r7, #7
    2758:	781b      	ldrb	r3, [r3, #0]
    275a:	b25b      	sxtb	r3, r3
    275c:	2b00      	cmp	r3, #0
    275e:	d112      	bne.n	2786 <hif_chip_sleep+0xa2>
			if(reg&0x2)
    2760:	683b      	ldr	r3, [r7, #0]
    2762:	2202      	movs	r2, #2
    2764:	4013      	ands	r3, r2
    2766:	d00f      	beq.n	2788 <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
    2768:	683b      	ldr	r3, [r7, #0]
    276a:	2202      	movs	r2, #2
    276c:	4393      	bics	r3, r2
    276e:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
    2770:	683b      	ldr	r3, [r7, #0]
    2772:	1dfc      	adds	r4, r7, #7
    2774:	0019      	movs	r1, r3
    2776:	2001      	movs	r0, #1
    2778:	4b0b      	ldr	r3, [pc, #44]	; (27a8 <hif_chip_sleep+0xc4>)
    277a:	4798      	blx	r3
    277c:	0003      	movs	r3, r0
    277e:	7023      	strb	r3, [r4, #0]
    2780:	e002      	b.n	2788 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	e000      	b.n	2788 <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    2786:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
    2788:	1dfb      	adds	r3, r7, #7
    278a:	781b      	ldrb	r3, [r3, #0]
    278c:	b25b      	sxtb	r3, r3
}
    278e:	0018      	movs	r0, r3
    2790:	46bd      	mov	sp, r7
    2792:	b003      	add	sp, #12
    2794:	bd90      	pop	{r4, r7, pc}
    2796:	46c0      	nop			; (mov r8, r8)
    2798:	200000c1 	.word	0x200000c1
    279c:	200000c0 	.word	0x200000c0
    27a0:	00004321 	.word	0x00004321
    27a4:	00001074 	.word	0x00001074
    27a8:	0000477d 	.word	0x0000477d
    27ac:	00004759 	.word	0x00004759

000027b0 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    27b0:	b580      	push	{r7, lr}
    27b2:	b082      	sub	sp, #8
    27b4:	af00      	add	r7, sp, #0
    27b6:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
    27b8:	4b0e      	ldr	r3, [pc, #56]	; (27f4 <hif_init+0x44>)
    27ba:	2200      	movs	r2, #0
    27bc:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
    27be:	4b0e      	ldr	r3, [pc, #56]	; (27f8 <hif_init+0x48>)
    27c0:	2200      	movs	r2, #0
    27c2:	601a      	str	r2, [r3, #0]

	gu8ChipSleep = 0;
    27c4:	4b0d      	ldr	r3, [pc, #52]	; (27fc <hif_init+0x4c>)
    27c6:	2200      	movs	r2, #0
    27c8:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
    27ca:	4b0d      	ldr	r3, [pc, #52]	; (2800 <hif_init+0x50>)
    27cc:	2200      	movs	r2, #0
    27ce:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
    27d0:	4b0c      	ldr	r3, [pc, #48]	; (2804 <hif_init+0x54>)
    27d2:	2200      	movs	r2, #0
    27d4:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
    27d6:	4b0c      	ldr	r3, [pc, #48]	; (2808 <hif_init+0x58>)
    27d8:	0018      	movs	r0, r3
    27da:	4b0c      	ldr	r3, [pc, #48]	; (280c <hif_init+0x5c>)
    27dc:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    27de:	4b0c      	ldr	r3, [pc, #48]	; (2810 <hif_init+0x60>)
    27e0:	0019      	movs	r1, r3
    27e2:	2003      	movs	r0, #3
    27e4:	4b0b      	ldr	r3, [pc, #44]	; (2814 <hif_init+0x64>)
    27e6:	4798      	blx	r3

	return M2M_SUCCESS;
    27e8:	2300      	movs	r3, #0
}
    27ea:	0018      	movs	r0, r3
    27ec:	46bd      	mov	sp, r7
    27ee:	b002      	add	sp, #8
    27f0:	bd80      	pop	{r7, pc}
    27f2:	46c0      	nop			; (mov r8, r8)
    27f4:	200000c4 	.word	0x200000c4
    27f8:	200000c8 	.word	0x200000c8
    27fc:	200000c1 	.word	0x200000c1
    2800:	200000c0 	.word	0x200000c0
    2804:	200000c3 	.word	0x200000c3
    2808:	000025a9 	.word	0x000025a9
    280c:	00001bb5 	.word	0x00001bb5
    2810:	00002631 	.word	0x00002631
    2814:	000031f1 	.word	0x000031f1

00002818 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    2818:	b590      	push	{r4, r7, lr}
    281a:	b089      	sub	sp, #36	; 0x24
    281c:	af00      	add	r7, sp, #0
    281e:	0004      	movs	r4, r0
    2820:	0008      	movs	r0, r1
    2822:	603a      	str	r2, [r7, #0]
    2824:	0019      	movs	r1, r3
    2826:	1dfb      	adds	r3, r7, #7
    2828:	1c22      	adds	r2, r4, #0
    282a:	701a      	strb	r2, [r3, #0]
    282c:	1dbb      	adds	r3, r7, #6
    282e:	1c02      	adds	r2, r0, #0
    2830:	701a      	strb	r2, [r3, #0]
    2832:	1d3b      	adds	r3, r7, #4
    2834:	1c0a      	adds	r2, r1, #0
    2836:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    2838:	231f      	movs	r3, #31
    283a:	18fb      	adds	r3, r7, r3
    283c:	22ff      	movs	r2, #255	; 0xff
    283e:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    2840:	1dbb      	adds	r3, r7, #6
    2842:	781b      	ldrb	r3, [r3, #0]
    2844:	227f      	movs	r2, #127	; 0x7f
    2846:	4013      	ands	r3, r2
    2848:	b2da      	uxtb	r2, r3
    284a:	2318      	movs	r3, #24
    284c:	18fb      	adds	r3, r7, r3
    284e:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    2850:	2318      	movs	r3, #24
    2852:	18fb      	adds	r3, r7, r3
    2854:	1dfa      	adds	r2, r7, #7
    2856:	7812      	ldrb	r2, [r2, #0]
    2858:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    285a:	2318      	movs	r3, #24
    285c:	18fb      	adds	r3, r7, r3
    285e:	2208      	movs	r2, #8
    2860:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    2862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2864:	2b00      	cmp	r3, #0
    2866:	d011      	beq.n	288c <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    2868:	2318      	movs	r3, #24
    286a:	18fb      	adds	r3, r7, r3
    286c:	885b      	ldrh	r3, [r3, #2]
    286e:	b29a      	uxth	r2, r3
    2870:	2338      	movs	r3, #56	; 0x38
    2872:	18f9      	adds	r1, r7, r3
    2874:	2334      	movs	r3, #52	; 0x34
    2876:	18fb      	adds	r3, r7, r3
    2878:	8809      	ldrh	r1, [r1, #0]
    287a:	881b      	ldrh	r3, [r3, #0]
    287c:	18cb      	adds	r3, r1, r3
    287e:	b29b      	uxth	r3, r3
    2880:	18d3      	adds	r3, r2, r3
    2882:	b29a      	uxth	r2, r3
    2884:	2318      	movs	r3, #24
    2886:	18fb      	adds	r3, r7, r3
    2888:	805a      	strh	r2, [r3, #2]
    288a:	e00a      	b.n	28a2 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    288c:	2318      	movs	r3, #24
    288e:	18fb      	adds	r3, r7, r3
    2890:	885b      	ldrh	r3, [r3, #2]
    2892:	b29a      	uxth	r2, r3
    2894:	1d3b      	adds	r3, r7, #4
    2896:	881b      	ldrh	r3, [r3, #0]
    2898:	18d3      	adds	r3, r2, r3
    289a:	b29a      	uxth	r2, r3
    289c:	2318      	movs	r3, #24
    289e:	18fb      	adds	r3, r7, r3
    28a0:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    28a2:	231f      	movs	r3, #31
    28a4:	18fc      	adds	r4, r7, r3
    28a6:	4b9b      	ldr	r3, [pc, #620]	; (2b14 <hif_send+0x2fc>)
    28a8:	4798      	blx	r3
    28aa:	0003      	movs	r3, r0
    28ac:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    28ae:	231f      	movs	r3, #31
    28b0:	18fb      	adds	r3, r7, r3
    28b2:	781b      	ldrb	r3, [r3, #0]
    28b4:	b25b      	sxtb	r3, r3
    28b6:	2b00      	cmp	r3, #0
    28b8:	d000      	beq.n	28bc <hif_send+0xa4>
    28ba:	e103      	b.n	2ac4 <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
    28bc:	2300      	movs	r3, #0
    28be:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    28c0:	230e      	movs	r3, #14
    28c2:	18fb      	adds	r3, r7, r3
    28c4:	2200      	movs	r2, #0
    28c6:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
    28c8:	2300      	movs	r3, #0
    28ca:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    28cc:	1dfb      	adds	r3, r7, #7
    28ce:	781a      	ldrb	r2, [r3, #0]
    28d0:	697b      	ldr	r3, [r7, #20]
    28d2:	4313      	orrs	r3, r2
    28d4:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    28d6:	1dbb      	adds	r3, r7, #6
    28d8:	781b      	ldrb	r3, [r3, #0]
    28da:	021a      	lsls	r2, r3, #8
    28dc:	697b      	ldr	r3, [r7, #20]
    28de:	4313      	orrs	r3, r2
    28e0:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    28e2:	2318      	movs	r3, #24
    28e4:	18fb      	adds	r3, r7, r3
    28e6:	885b      	ldrh	r3, [r3, #2]
    28e8:	b29b      	uxth	r3, r3
    28ea:	041a      	lsls	r2, r3, #16
    28ec:	697b      	ldr	r3, [r7, #20]
    28ee:	4313      	orrs	r3, r2
    28f0:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    28f2:	697b      	ldr	r3, [r7, #20]
    28f4:	221f      	movs	r2, #31
    28f6:	18bc      	adds	r4, r7, r2
    28f8:	4a87      	ldr	r2, [pc, #540]	; (2b18 <hif_send+0x300>)
    28fa:	0019      	movs	r1, r3
    28fc:	0010      	movs	r0, r2
    28fe:	4b87      	ldr	r3, [pc, #540]	; (2b1c <hif_send+0x304>)
    2900:	4798      	blx	r3
    2902:	0003      	movs	r3, r0
    2904:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    2906:	231f      	movs	r3, #31
    2908:	18fb      	adds	r3, r7, r3
    290a:	781b      	ldrb	r3, [r3, #0]
    290c:	b25b      	sxtb	r3, r3
    290e:	2b00      	cmp	r3, #0
    2910:	d000      	beq.n	2914 <hif_send+0xfc>
    2912:	e0ee      	b.n	2af2 <hif_send+0x2da>


		reg = 0;
    2914:	2300      	movs	r3, #0
    2916:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    2918:	697b      	ldr	r3, [r7, #20]
    291a:	2202      	movs	r2, #2
    291c:	4313      	orrs	r3, r2
    291e:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    2920:	697b      	ldr	r3, [r7, #20]
    2922:	221f      	movs	r2, #31
    2924:	18bc      	adds	r4, r7, r2
    2926:	4a7e      	ldr	r2, [pc, #504]	; (2b20 <hif_send+0x308>)
    2928:	0019      	movs	r1, r3
    292a:	0010      	movs	r0, r2
    292c:	4b7b      	ldr	r3, [pc, #492]	; (2b1c <hif_send+0x304>)
    292e:	4798      	blx	r3
    2930:	0003      	movs	r3, r0
    2932:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    2934:	231f      	movs	r3, #31
    2936:	18fb      	adds	r3, r7, r3
    2938:	781b      	ldrb	r3, [r3, #0]
    293a:	b25b      	sxtb	r3, r3
    293c:	2b00      	cmp	r3, #0
    293e:	d000      	beq.n	2942 <hif_send+0x12a>
    2940:	e0d9      	b.n	2af6 <hif_send+0x2de>
		dma_addr = 0;
    2942:	2300      	movs	r3, #0
    2944:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    2946:	230e      	movs	r3, #14
    2948:	18fb      	adds	r3, r7, r3
    294a:	2200      	movs	r2, #0
    294c:	801a      	strh	r2, [r3, #0]
    294e:	e031      	b.n	29b4 <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    2950:	231f      	movs	r3, #31
    2952:	18fc      	adds	r4, r7, r3
    2954:	2314      	movs	r3, #20
    2956:	18fb      	adds	r3, r7, r3
    2958:	4a71      	ldr	r2, [pc, #452]	; (2b20 <hif_send+0x308>)
    295a:	0019      	movs	r1, r3
    295c:	0010      	movs	r0, r2
    295e:	4b71      	ldr	r3, [pc, #452]	; (2b24 <hif_send+0x30c>)
    2960:	4798      	blx	r3
    2962:	0003      	movs	r3, r0
    2964:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    2966:	231f      	movs	r3, #31
    2968:	18fb      	adds	r3, r7, r3
    296a:	781b      	ldrb	r3, [r3, #0]
    296c:	b25b      	sxtb	r3, r3
    296e:	2b00      	cmp	r3, #0
    2970:	d128      	bne.n	29c4 <hif_send+0x1ac>
			if (!(reg & 0x2))
    2972:	697b      	ldr	r3, [r7, #20]
    2974:	2202      	movs	r2, #2
    2976:	4013      	ands	r3, r2
    2978:	d113      	bne.n	29a2 <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    297a:	231f      	movs	r3, #31
    297c:	18fc      	adds	r4, r7, r3
    297e:	2310      	movs	r3, #16
    2980:	18fb      	adds	r3, r7, r3
    2982:	4a69      	ldr	r2, [pc, #420]	; (2b28 <hif_send+0x310>)
    2984:	0019      	movs	r1, r3
    2986:	0010      	movs	r0, r2
    2988:	4b66      	ldr	r3, [pc, #408]	; (2b24 <hif_send+0x30c>)
    298a:	4798      	blx	r3
    298c:	0003      	movs	r3, r0
    298e:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    2990:	231f      	movs	r3, #31
    2992:	18fb      	adds	r3, r7, r3
    2994:	781b      	ldrb	r3, [r3, #0]
    2996:	b25b      	sxtb	r3, r3
    2998:	2b00      	cmp	r3, #0
    299a:	d015      	beq.n	29c8 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    299c:	2300      	movs	r3, #0
    299e:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
    29a0:	e012      	b.n	29c8 <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    29a2:	230e      	movs	r3, #14
    29a4:	18fb      	adds	r3, r7, r3
    29a6:	881b      	ldrh	r3, [r3, #0]
    29a8:	b29b      	uxth	r3, r3
    29aa:	3301      	adds	r3, #1
    29ac:	b29a      	uxth	r2, r3
    29ae:	230e      	movs	r3, #14
    29b0:	18fb      	adds	r3, r7, r3
    29b2:	801a      	strh	r2, [r3, #0]
    29b4:	230e      	movs	r3, #14
    29b6:	18fb      	adds	r3, r7, r3
    29b8:	881b      	ldrh	r3, [r3, #0]
    29ba:	b29b      	uxth	r3, r3
    29bc:	4a5b      	ldr	r2, [pc, #364]	; (2b2c <hif_send+0x314>)
    29be:	4293      	cmp	r3, r2
    29c0:	d9c6      	bls.n	2950 <hif_send+0x138>
    29c2:	e002      	b.n	29ca <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    29c4:	46c0      	nop			; (mov r8, r8)
    29c6:	e000      	b.n	29ca <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
    29c8:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    29ca:	693b      	ldr	r3, [r7, #16]
    29cc:	2b00      	cmp	r3, #0
    29ce:	d100      	bne.n	29d2 <hif_send+0x1ba>
    29d0:	e073      	b.n	2aba <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    29d2:	693b      	ldr	r3, [r7, #16]
    29d4:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    29d6:	2318      	movs	r3, #24
    29d8:	18fb      	adds	r3, r7, r3
    29da:	885b      	ldrh	r3, [r3, #2]
    29dc:	b29a      	uxth	r2, r3
    29de:	2318      	movs	r3, #24
    29e0:	18fb      	adds	r3, r7, r3
    29e2:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    29e4:	68bb      	ldr	r3, [r7, #8]
    29e6:	221f      	movs	r2, #31
    29e8:	18bc      	adds	r4, r7, r2
    29ea:	2218      	movs	r2, #24
    29ec:	18b9      	adds	r1, r7, r2
    29ee:	2208      	movs	r2, #8
    29f0:	0018      	movs	r0, r3
    29f2:	4b4f      	ldr	r3, [pc, #316]	; (2b30 <hif_send+0x318>)
    29f4:	4798      	blx	r3
    29f6:	0003      	movs	r3, r0
    29f8:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    29fa:	231f      	movs	r3, #31
    29fc:	18fb      	adds	r3, r7, r3
    29fe:	781b      	ldrb	r3, [r3, #0]
    2a00:	b25b      	sxtb	r3, r3
    2a02:	2b00      	cmp	r3, #0
    2a04:	d000      	beq.n	2a08 <hif_send+0x1f0>
    2a06:	e078      	b.n	2afa <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    2a08:	68bb      	ldr	r3, [r7, #8]
    2a0a:	3308      	adds	r3, #8
    2a0c:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    2a0e:	683b      	ldr	r3, [r7, #0]
    2a10:	2b00      	cmp	r3, #0
    2a12:	d015      	beq.n	2a40 <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    2a14:	68b8      	ldr	r0, [r7, #8]
    2a16:	1d3b      	adds	r3, r7, #4
    2a18:	881a      	ldrh	r2, [r3, #0]
    2a1a:	231f      	movs	r3, #31
    2a1c:	18fc      	adds	r4, r7, r3
    2a1e:	683b      	ldr	r3, [r7, #0]
    2a20:	0019      	movs	r1, r3
    2a22:	4b43      	ldr	r3, [pc, #268]	; (2b30 <hif_send+0x318>)
    2a24:	4798      	blx	r3
    2a26:	0003      	movs	r3, r0
    2a28:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    2a2a:	231f      	movs	r3, #31
    2a2c:	18fb      	adds	r3, r7, r3
    2a2e:	781b      	ldrb	r3, [r3, #0]
    2a30:	b25b      	sxtb	r3, r3
    2a32:	2b00      	cmp	r3, #0
    2a34:	d163      	bne.n	2afe <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
    2a36:	1d3b      	adds	r3, r7, #4
    2a38:	881a      	ldrh	r2, [r3, #0]
    2a3a:	68bb      	ldr	r3, [r7, #8]
    2a3c:	18d3      	adds	r3, r2, r3
    2a3e:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    2a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a42:	2b00      	cmp	r3, #0
    2a44:	d021      	beq.n	2a8a <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    2a46:	2338      	movs	r3, #56	; 0x38
    2a48:	18fb      	adds	r3, r7, r3
    2a4a:	881a      	ldrh	r2, [r3, #0]
    2a4c:	1d3b      	adds	r3, r7, #4
    2a4e:	881b      	ldrh	r3, [r3, #0]
    2a50:	1ad3      	subs	r3, r2, r3
    2a52:	001a      	movs	r2, r3
    2a54:	68bb      	ldr	r3, [r7, #8]
    2a56:	18d3      	adds	r3, r2, r3
    2a58:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    2a5a:	68b8      	ldr	r0, [r7, #8]
    2a5c:	2334      	movs	r3, #52	; 0x34
    2a5e:	18fb      	adds	r3, r7, r3
    2a60:	881a      	ldrh	r2, [r3, #0]
    2a62:	231f      	movs	r3, #31
    2a64:	18fc      	adds	r4, r7, r3
    2a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2a68:	0019      	movs	r1, r3
    2a6a:	4b31      	ldr	r3, [pc, #196]	; (2b30 <hif_send+0x318>)
    2a6c:	4798      	blx	r3
    2a6e:	0003      	movs	r3, r0
    2a70:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    2a72:	231f      	movs	r3, #31
    2a74:	18fb      	adds	r3, r7, r3
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	b25b      	sxtb	r3, r3
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	d141      	bne.n	2b02 <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
    2a7e:	2334      	movs	r3, #52	; 0x34
    2a80:	18fb      	adds	r3, r7, r3
    2a82:	881a      	ldrh	r2, [r3, #0]
    2a84:	68bb      	ldr	r3, [r7, #8]
    2a86:	18d3      	adds	r3, r2, r3
    2a88:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    2a8a:	693b      	ldr	r3, [r7, #16]
    2a8c:	009b      	lsls	r3, r3, #2
    2a8e:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    2a90:	697b      	ldr	r3, [r7, #20]
    2a92:	2202      	movs	r2, #2
    2a94:	4313      	orrs	r3, r2
    2a96:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    2a98:	697b      	ldr	r3, [r7, #20]
    2a9a:	221f      	movs	r2, #31
    2a9c:	18bc      	adds	r4, r7, r2
    2a9e:	4a25      	ldr	r2, [pc, #148]	; (2b34 <hif_send+0x31c>)
    2aa0:	0019      	movs	r1, r3
    2aa2:	0010      	movs	r0, r2
    2aa4:	4b1d      	ldr	r3, [pc, #116]	; (2b1c <hif_send+0x304>)
    2aa6:	4798      	blx	r3
    2aa8:	0003      	movs	r3, r0
    2aaa:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    2aac:	231f      	movs	r3, #31
    2aae:	18fb      	adds	r3, r7, r3
    2ab0:	781b      	ldrb	r3, [r3, #0]
    2ab2:	b25b      	sxtb	r3, r3
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	d015      	beq.n	2ae4 <hif_send+0x2cc>
    2ab8:	e024      	b.n	2b04 <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    2aba:	231f      	movs	r3, #31
    2abc:	18fb      	adds	r3, r7, r3
    2abe:	22fd      	movs	r2, #253	; 0xfd
    2ac0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2ac2:	e01f      	b.n	2b04 <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    2ac4:	23a0      	movs	r3, #160	; 0xa0
    2ac6:	33ff      	adds	r3, #255	; 0xff
    2ac8:	001a      	movs	r2, r3
    2aca:	491b      	ldr	r1, [pc, #108]	; (2b38 <hif_send+0x320>)
    2acc:	4b1b      	ldr	r3, [pc, #108]	; (2b3c <hif_send+0x324>)
    2ace:	0018      	movs	r0, r3
    2ad0:	4b1b      	ldr	r3, [pc, #108]	; (2b40 <hif_send+0x328>)
    2ad2:	4798      	blx	r3
    2ad4:	4b1b      	ldr	r3, [pc, #108]	; (2b44 <hif_send+0x32c>)
    2ad6:	0018      	movs	r0, r3
    2ad8:	4b1b      	ldr	r3, [pc, #108]	; (2b48 <hif_send+0x330>)
    2ada:	4798      	blx	r3
    2adc:	200d      	movs	r0, #13
    2ade:	4b1b      	ldr	r3, [pc, #108]	; (2b4c <hif_send+0x334>)
    2ae0:	4798      	blx	r3
		goto ERR1;
    2ae2:	e00f      	b.n	2b04 <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
    2ae4:	231f      	movs	r3, #31
    2ae6:	18fc      	adds	r4, r7, r3
    2ae8:	4b19      	ldr	r3, [pc, #100]	; (2b50 <hif_send+0x338>)
    2aea:	4798      	blx	r3
    2aec:	0003      	movs	r3, r0
    2aee:	7023      	strb	r3, [r4, #0]
    2af0:	e008      	b.n	2b04 <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2af2:	46c0      	nop			; (mov r8, r8)
    2af4:	e006      	b.n	2b04 <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	e004      	b.n	2b04 <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    2afa:	46c0      	nop			; (mov r8, r8)
    2afc:	e002      	b.n	2b04 <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    2afe:	46c0      	nop			; (mov r8, r8)
    2b00:	e000      	b.n	2b04 <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    2b02:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    2b04:	231f      	movs	r3, #31
    2b06:	18fb      	adds	r3, r7, r3
    2b08:	781b      	ldrb	r3, [r3, #0]
    2b0a:	b25b      	sxtb	r3, r3
}
    2b0c:	0018      	movs	r0, r3
    2b0e:	46bd      	mov	sp, r7
    2b10:	b009      	add	sp, #36	; 0x24
    2b12:	bd90      	pop	{r4, r7, pc}
    2b14:	0000264d 	.word	0x0000264d
    2b18:	0000108c 	.word	0x0000108c
    2b1c:	0000477d 	.word	0x0000477d
    2b20:	00001078 	.word	0x00001078
    2b24:	00004759 	.word	0x00004759
    2b28:	00150400 	.word	0x00150400
    2b2c:	000003e7 	.word	0x000003e7
    2b30:	000048c5 	.word	0x000048c5
    2b34:	0000106c 	.word	0x0000106c
    2b38:	0001123c 	.word	0x0001123c
    2b3c:	00010fdc 	.word	0x00010fdc
    2b40:	0000fd31 	.word	0x0000fd31
    2b44:	00010ff0 	.word	0x00010ff0
    2b48:	0000fe51 	.word	0x0000fe51
    2b4c:	0000fd65 	.word	0x0000fd65
    2b50:	000026e5 	.word	0x000026e5

00002b54 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    2b54:	b590      	push	{r4, r7, lr}
    2b56:	b087      	sub	sp, #28
    2b58:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
    2b5a:	230f      	movs	r3, #15
    2b5c:	18fb      	adds	r3, r7, r3
    2b5e:	22fa      	movs	r2, #250	; 0xfa
    2b60:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    2b62:	230f      	movs	r3, #15
    2b64:	18fc      	adds	r4, r7, r3
    2b66:	4bda      	ldr	r3, [pc, #872]	; (2ed0 <hif_isr+0x37c>)
    2b68:	4798      	blx	r3
    2b6a:	0003      	movs	r3, r0
    2b6c:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    2b6e:	230f      	movs	r3, #15
    2b70:	18fb      	adds	r3, r7, r3
    2b72:	781b      	ldrb	r3, [r3, #0]
    2b74:	b25b      	sxtb	r3, r3
    2b76:	2b00      	cmp	r3, #0
    2b78:	d000      	beq.n	2b7c <hif_isr+0x28>
    2b7a:	e192      	b.n	2ea2 <hif_isr+0x34e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    2b7c:	230f      	movs	r3, #15
    2b7e:	18fc      	adds	r4, r7, r3
    2b80:	2308      	movs	r3, #8
    2b82:	18fb      	adds	r3, r7, r3
    2b84:	4ad3      	ldr	r2, [pc, #844]	; (2ed4 <hif_isr+0x380>)
    2b86:	0019      	movs	r1, r3
    2b88:	0010      	movs	r0, r2
    2b8a:	4bd3      	ldr	r3, [pc, #844]	; (2ed8 <hif_isr+0x384>)
    2b8c:	4798      	blx	r3
    2b8e:	0003      	movs	r3, r0
    2b90:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
    2b92:	230f      	movs	r3, #15
    2b94:	18fb      	adds	r3, r7, r3
    2b96:	781b      	ldrb	r3, [r3, #0]
    2b98:	b25b      	sxtb	r3, r3
    2b9a:	2b00      	cmp	r3, #0
    2b9c:	d000      	beq.n	2ba0 <hif_isr+0x4c>
    2b9e:	e172      	b.n	2e86 <hif_isr+0x332>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    2ba0:	68bb      	ldr	r3, [r7, #8]
    2ba2:	2201      	movs	r2, #1
    2ba4:	4013      	ands	r3, r2
    2ba6:	d100      	bne.n	2baa <hif_isr+0x56>
    2ba8:	e15c      	b.n	2e64 <hif_isr+0x310>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    2baa:	2000      	movs	r0, #0
    2bac:	4bcb      	ldr	r3, [pc, #812]	; (2edc <hif_isr+0x388>)
    2bae:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
    2bb0:	68bb      	ldr	r3, [r7, #8]
    2bb2:	2201      	movs	r2, #1
    2bb4:	4393      	bics	r3, r2
    2bb6:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    2bb8:	68bb      	ldr	r3, [r7, #8]
    2bba:	220f      	movs	r2, #15
    2bbc:	18bc      	adds	r4, r7, r2
    2bbe:	4ac5      	ldr	r2, [pc, #788]	; (2ed4 <hif_isr+0x380>)
    2bc0:	0019      	movs	r1, r3
    2bc2:	0010      	movs	r0, r2
    2bc4:	4bc6      	ldr	r3, [pc, #792]	; (2ee0 <hif_isr+0x38c>)
    2bc6:	4798      	blx	r3
    2bc8:	0003      	movs	r3, r0
    2bca:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    2bcc:	230f      	movs	r3, #15
    2bce:	18fb      	adds	r3, r7, r3
    2bd0:	781b      	ldrb	r3, [r3, #0]
    2bd2:	b25b      	sxtb	r3, r3
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	d000      	beq.n	2bda <hif_isr+0x86>
    2bd8:	e1bc      	b.n	2f54 <hif_isr+0x400>
				gu8HifSizeDone = 0;
    2bda:	4bc2      	ldr	r3, [pc, #776]	; (2ee4 <hif_isr+0x390>)
    2bdc:	2200      	movs	r2, #0
    2bde:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    2be0:	68bb      	ldr	r3, [r7, #8]
    2be2:	089b      	lsrs	r3, r3, #2
    2be4:	b29a      	uxth	r2, r3
    2be6:	230c      	movs	r3, #12
    2be8:	18fb      	adds	r3, r7, r3
    2bea:	0512      	lsls	r2, r2, #20
    2bec:	0d12      	lsrs	r2, r2, #20
    2bee:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    2bf0:	230c      	movs	r3, #12
    2bf2:	18fb      	adds	r3, r7, r3
    2bf4:	881b      	ldrh	r3, [r3, #0]
    2bf6:	2b00      	cmp	r3, #0
    2bf8:	d100      	bne.n	2bfc <hif_isr+0xa8>
    2bfa:	e121      	b.n	2e40 <hif_isr+0x2ec>
					uint32 address = 0;
    2bfc:	2300      	movs	r3, #0
    2bfe:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    2c00:	230f      	movs	r3, #15
    2c02:	18fc      	adds	r4, r7, r3
    2c04:	003b      	movs	r3, r7
    2c06:	4ab8      	ldr	r2, [pc, #736]	; (2ee8 <hif_isr+0x394>)
    2c08:	0019      	movs	r1, r3
    2c0a:	0010      	movs	r0, r2
    2c0c:	4bb2      	ldr	r3, [pc, #712]	; (2ed8 <hif_isr+0x384>)
    2c0e:	4798      	blx	r3
    2c10:	0003      	movs	r3, r0
    2c12:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    2c14:	230f      	movs	r3, #15
    2c16:	18fb      	adds	r3, r7, r3
    2c18:	781b      	ldrb	r3, [r3, #0]
    2c1a:	b25b      	sxtb	r3, r3
    2c1c:	2b00      	cmp	r3, #0
    2c1e:	d011      	beq.n	2c44 <hif_isr+0xf0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    2c20:	23e7      	movs	r3, #231	; 0xe7
    2c22:	005a      	lsls	r2, r3, #1
    2c24:	49b1      	ldr	r1, [pc, #708]	; (2eec <hif_isr+0x398>)
    2c26:	4bb2      	ldr	r3, [pc, #712]	; (2ef0 <hif_isr+0x39c>)
    2c28:	0018      	movs	r0, r3
    2c2a:	4bb2      	ldr	r3, [pc, #712]	; (2ef4 <hif_isr+0x3a0>)
    2c2c:	4798      	blx	r3
    2c2e:	4bb2      	ldr	r3, [pc, #712]	; (2ef8 <hif_isr+0x3a4>)
    2c30:	0018      	movs	r0, r3
    2c32:	4bb2      	ldr	r3, [pc, #712]	; (2efc <hif_isr+0x3a8>)
    2c34:	4798      	blx	r3
    2c36:	200d      	movs	r0, #13
    2c38:	4bb1      	ldr	r3, [pc, #708]	; (2f00 <hif_isr+0x3ac>)
    2c3a:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    2c3c:	2001      	movs	r0, #1
    2c3e:	4ba7      	ldr	r3, [pc, #668]	; (2edc <hif_isr+0x388>)
    2c40:	4798      	blx	r3
						goto ERR1;
    2c42:	e188      	b.n	2f56 <hif_isr+0x402>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    2c44:	683b      	ldr	r3, [r7, #0]
    2c46:	220f      	movs	r2, #15
    2c48:	18bc      	adds	r4, r7, r2
    2c4a:	1d39      	adds	r1, r7, #4
    2c4c:	2204      	movs	r2, #4
    2c4e:	0018      	movs	r0, r3
    2c50:	4bac      	ldr	r3, [pc, #688]	; (2f04 <hif_isr+0x3b0>)
    2c52:	4798      	blx	r3
    2c54:	0003      	movs	r3, r0
    2c56:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    2c58:	1d3b      	adds	r3, r7, #4
    2c5a:	885b      	ldrh	r3, [r3, #2]
    2c5c:	b29a      	uxth	r2, r3
    2c5e:	1d3b      	adds	r3, r7, #4
    2c60:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    2c62:	230f      	movs	r3, #15
    2c64:	18fb      	adds	r3, r7, r3
    2c66:	781b      	ldrb	r3, [r3, #0]
    2c68:	b25b      	sxtb	r3, r3
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	d011      	beq.n	2c92 <hif_isr+0x13e>
					{
						M2M_ERR("(hif) address bus fail\n");
    2c6e:	23eb      	movs	r3, #235	; 0xeb
    2c70:	005a      	lsls	r2, r3, #1
    2c72:	499e      	ldr	r1, [pc, #632]	; (2eec <hif_isr+0x398>)
    2c74:	4b9e      	ldr	r3, [pc, #632]	; (2ef0 <hif_isr+0x39c>)
    2c76:	0018      	movs	r0, r3
    2c78:	4b9e      	ldr	r3, [pc, #632]	; (2ef4 <hif_isr+0x3a0>)
    2c7a:	4798      	blx	r3
    2c7c:	4ba2      	ldr	r3, [pc, #648]	; (2f08 <hif_isr+0x3b4>)
    2c7e:	0018      	movs	r0, r3
    2c80:	4b9e      	ldr	r3, [pc, #632]	; (2efc <hif_isr+0x3a8>)
    2c82:	4798      	blx	r3
    2c84:	200d      	movs	r0, #13
    2c86:	4b9e      	ldr	r3, [pc, #632]	; (2f00 <hif_isr+0x3ac>)
    2c88:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    2c8a:	2001      	movs	r0, #1
    2c8c:	4b93      	ldr	r3, [pc, #588]	; (2edc <hif_isr+0x388>)
    2c8e:	4798      	blx	r3
						goto ERR1;
    2c90:	e161      	b.n	2f56 <hif_isr+0x402>
					}
					if(strHif.u16Length != size)
    2c92:	1d3b      	adds	r3, r7, #4
    2c94:	885b      	ldrh	r3, [r3, #2]
    2c96:	b29b      	uxth	r3, r3
    2c98:	220c      	movs	r2, #12
    2c9a:	18ba      	adds	r2, r7, r2
    2c9c:	8812      	ldrh	r2, [r2, #0]
    2c9e:	429a      	cmp	r2, r3
    2ca0:	d02e      	beq.n	2d00 <hif_isr+0x1ac>
					{
						if((size - strHif.u16Length) > 4)
    2ca2:	230c      	movs	r3, #12
    2ca4:	18fb      	adds	r3, r7, r3
    2ca6:	881b      	ldrh	r3, [r3, #0]
    2ca8:	1d3a      	adds	r2, r7, #4
    2caa:	8852      	ldrh	r2, [r2, #2]
    2cac:	b292      	uxth	r2, r2
    2cae:	1a9b      	subs	r3, r3, r2
    2cb0:	2b04      	cmp	r3, #4
    2cb2:	dd25      	ble.n	2d00 <hif_isr+0x1ac>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    2cb4:	23e0      	movs	r3, #224	; 0xe0
    2cb6:	33ff      	adds	r3, #255	; 0xff
    2cb8:	001a      	movs	r2, r3
    2cba:	498c      	ldr	r1, [pc, #560]	; (2eec <hif_isr+0x398>)
    2cbc:	4b8c      	ldr	r3, [pc, #560]	; (2ef0 <hif_isr+0x39c>)
    2cbe:	0018      	movs	r0, r3
    2cc0:	4b8c      	ldr	r3, [pc, #560]	; (2ef4 <hif_isr+0x3a0>)
    2cc2:	4798      	blx	r3
    2cc4:	230c      	movs	r3, #12
    2cc6:	18fb      	adds	r3, r7, r3
    2cc8:	8819      	ldrh	r1, [r3, #0]
    2cca:	1d3b      	adds	r3, r7, #4
    2ccc:	885b      	ldrh	r3, [r3, #2]
    2cce:	b29b      	uxth	r3, r3
    2cd0:	001a      	movs	r2, r3
    2cd2:	1d3b      	adds	r3, r7, #4
    2cd4:	781b      	ldrb	r3, [r3, #0]
    2cd6:	b2db      	uxtb	r3, r3
    2cd8:	001c      	movs	r4, r3
    2cda:	1d3b      	adds	r3, r7, #4
    2cdc:	785b      	ldrb	r3, [r3, #1]
    2cde:	b2db      	uxtb	r3, r3
    2ce0:	488a      	ldr	r0, [pc, #552]	; (2f0c <hif_isr+0x3b8>)
    2ce2:	9300      	str	r3, [sp, #0]
    2ce4:	0023      	movs	r3, r4
    2ce6:	4c83      	ldr	r4, [pc, #524]	; (2ef4 <hif_isr+0x3a0>)
    2ce8:	47a0      	blx	r4
    2cea:	200d      	movs	r0, #13
    2cec:	4b84      	ldr	r3, [pc, #528]	; (2f00 <hif_isr+0x3ac>)
    2cee:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    2cf0:	2001      	movs	r0, #1
    2cf2:	4b7a      	ldr	r3, [pc, #488]	; (2edc <hif_isr+0x388>)
    2cf4:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    2cf6:	230f      	movs	r3, #15
    2cf8:	18fb      	adds	r3, r7, r3
    2cfa:	22fa      	movs	r2, #250	; 0xfa
    2cfc:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    2cfe:	e12a      	b.n	2f56 <hif_isr+0x402>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    2d00:	1d3b      	adds	r3, r7, #4
    2d02:	781b      	ldrb	r3, [r3, #0]
    2d04:	b2db      	uxtb	r3, r3
    2d06:	2b01      	cmp	r3, #1
    2d08:	d112      	bne.n	2d30 <hif_isr+0x1dc>
					{
						if(pfWifiCb)
    2d0a:	4b81      	ldr	r3, [pc, #516]	; (2f10 <hif_isr+0x3bc>)
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d100      	bne.n	2d14 <hif_isr+0x1c0>
    2d12:	e07c      	b.n	2e0e <hif_isr+0x2ba>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2d14:	4b7e      	ldr	r3, [pc, #504]	; (2f10 <hif_isr+0x3bc>)
    2d16:	681b      	ldr	r3, [r3, #0]
    2d18:	1d3a      	adds	r2, r7, #4
    2d1a:	7852      	ldrb	r2, [r2, #1]
    2d1c:	b2d0      	uxtb	r0, r2
    2d1e:	1d3a      	adds	r2, r7, #4
    2d20:	8852      	ldrh	r2, [r2, #2]
    2d22:	b292      	uxth	r2, r2
    2d24:	3a08      	subs	r2, #8
    2d26:	b291      	uxth	r1, r2
    2d28:	683a      	ldr	r2, [r7, #0]
    2d2a:	3208      	adds	r2, #8
    2d2c:	4798      	blx	r3
    2d2e:	e06e      	b.n	2e0e <hif_isr+0x2ba>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    2d30:	1d3b      	adds	r3, r7, #4
    2d32:	781b      	ldrb	r3, [r3, #0]
    2d34:	b2db      	uxtb	r3, r3
    2d36:	2b02      	cmp	r3, #2
    2d38:	d111      	bne.n	2d5e <hif_isr+0x20a>
					{
						if(pfIpCb)
    2d3a:	4b76      	ldr	r3, [pc, #472]	; (2f14 <hif_isr+0x3c0>)
    2d3c:	681b      	ldr	r3, [r3, #0]
    2d3e:	2b00      	cmp	r3, #0
    2d40:	d065      	beq.n	2e0e <hif_isr+0x2ba>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2d42:	4b74      	ldr	r3, [pc, #464]	; (2f14 <hif_isr+0x3c0>)
    2d44:	681b      	ldr	r3, [r3, #0]
    2d46:	1d3a      	adds	r2, r7, #4
    2d48:	7852      	ldrb	r2, [r2, #1]
    2d4a:	b2d0      	uxtb	r0, r2
    2d4c:	1d3a      	adds	r2, r7, #4
    2d4e:	8852      	ldrh	r2, [r2, #2]
    2d50:	b292      	uxth	r2, r2
    2d52:	3a08      	subs	r2, #8
    2d54:	b291      	uxth	r1, r2
    2d56:	683a      	ldr	r2, [r7, #0]
    2d58:	3208      	adds	r2, #8
    2d5a:	4798      	blx	r3
    2d5c:	e057      	b.n	2e0e <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    2d5e:	1d3b      	adds	r3, r7, #4
    2d60:	781b      	ldrb	r3, [r3, #0]
    2d62:	b2db      	uxtb	r3, r3
    2d64:	2b04      	cmp	r3, #4
    2d66:	d111      	bne.n	2d8c <hif_isr+0x238>
					{
						if(pfOtaCb)
    2d68:	4b6b      	ldr	r3, [pc, #428]	; (2f18 <hif_isr+0x3c4>)
    2d6a:	681b      	ldr	r3, [r3, #0]
    2d6c:	2b00      	cmp	r3, #0
    2d6e:	d04e      	beq.n	2e0e <hif_isr+0x2ba>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2d70:	4b69      	ldr	r3, [pc, #420]	; (2f18 <hif_isr+0x3c4>)
    2d72:	681b      	ldr	r3, [r3, #0]
    2d74:	1d3a      	adds	r2, r7, #4
    2d76:	7852      	ldrb	r2, [r2, #1]
    2d78:	b2d0      	uxtb	r0, r2
    2d7a:	1d3a      	adds	r2, r7, #4
    2d7c:	8852      	ldrh	r2, [r2, #2]
    2d7e:	b292      	uxth	r2, r2
    2d80:	3a08      	subs	r2, #8
    2d82:	b291      	uxth	r1, r2
    2d84:	683a      	ldr	r2, [r7, #0]
    2d86:	3208      	adds	r2, #8
    2d88:	4798      	blx	r3
    2d8a:	e040      	b.n	2e0e <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    2d8c:	1d3b      	adds	r3, r7, #4
    2d8e:	781b      	ldrb	r3, [r3, #0]
    2d90:	b2db      	uxtb	r3, r3
    2d92:	2b06      	cmp	r3, #6
    2d94:	d111      	bne.n	2dba <hif_isr+0x266>
					{
						if(pfCryptoCb)
    2d96:	4b61      	ldr	r3, [pc, #388]	; (2f1c <hif_isr+0x3c8>)
    2d98:	681b      	ldr	r3, [r3, #0]
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	d037      	beq.n	2e0e <hif_isr+0x2ba>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2d9e:	4b5f      	ldr	r3, [pc, #380]	; (2f1c <hif_isr+0x3c8>)
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	1d3a      	adds	r2, r7, #4
    2da4:	7852      	ldrb	r2, [r2, #1]
    2da6:	b2d0      	uxtb	r0, r2
    2da8:	1d3a      	adds	r2, r7, #4
    2daa:	8852      	ldrh	r2, [r2, #2]
    2dac:	b292      	uxth	r2, r2
    2dae:	3a08      	subs	r2, #8
    2db0:	b291      	uxth	r1, r2
    2db2:	683a      	ldr	r2, [r7, #0]
    2db4:	3208      	adds	r2, #8
    2db6:	4798      	blx	r3
    2db8:	e029      	b.n	2e0e <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    2dba:	1d3b      	adds	r3, r7, #4
    2dbc:	781b      	ldrb	r3, [r3, #0]
    2dbe:	b2db      	uxtb	r3, r3
    2dc0:	2b07      	cmp	r3, #7
    2dc2:	d111      	bne.n	2de8 <hif_isr+0x294>
					{
						if(pfSigmaCb)
    2dc4:	4b56      	ldr	r3, [pc, #344]	; (2f20 <hif_isr+0x3cc>)
    2dc6:	681b      	ldr	r3, [r3, #0]
    2dc8:	2b00      	cmp	r3, #0
    2dca:	d020      	beq.n	2e0e <hif_isr+0x2ba>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    2dcc:	4b54      	ldr	r3, [pc, #336]	; (2f20 <hif_isr+0x3cc>)
    2dce:	681b      	ldr	r3, [r3, #0]
    2dd0:	1d3a      	adds	r2, r7, #4
    2dd2:	7852      	ldrb	r2, [r2, #1]
    2dd4:	b2d0      	uxtb	r0, r2
    2dd6:	1d3a      	adds	r2, r7, #4
    2dd8:	8852      	ldrh	r2, [r2, #2]
    2dda:	b292      	uxth	r2, r2
    2ddc:	3a08      	subs	r2, #8
    2dde:	b291      	uxth	r1, r2
    2de0:	683a      	ldr	r2, [r7, #0]
    2de2:	3208      	adds	r2, #8
    2de4:	4798      	blx	r3
    2de6:	e012      	b.n	2e0e <hif_isr+0x2ba>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    2de8:	4a4e      	ldr	r2, [pc, #312]	; (2f24 <hif_isr+0x3d0>)
    2dea:	4940      	ldr	r1, [pc, #256]	; (2eec <hif_isr+0x398>)
    2dec:	4b40      	ldr	r3, [pc, #256]	; (2ef0 <hif_isr+0x39c>)
    2dee:	0018      	movs	r0, r3
    2df0:	4b40      	ldr	r3, [pc, #256]	; (2ef4 <hif_isr+0x3a0>)
    2df2:	4798      	blx	r3
    2df4:	4b4c      	ldr	r3, [pc, #304]	; (2f28 <hif_isr+0x3d4>)
    2df6:	0018      	movs	r0, r3
    2df8:	4b40      	ldr	r3, [pc, #256]	; (2efc <hif_isr+0x3a8>)
    2dfa:	4798      	blx	r3
    2dfc:	200d      	movs	r0, #13
    2dfe:	4b40      	ldr	r3, [pc, #256]	; (2f00 <hif_isr+0x3ac>)
    2e00:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    2e02:	230f      	movs	r3, #15
    2e04:	18fb      	adds	r3, r7, r3
    2e06:	22fa      	movs	r2, #250	; 0xfa
    2e08:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	e0a3      	b.n	2f56 <hif_isr+0x402>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    2e0e:	4b35      	ldr	r3, [pc, #212]	; (2ee4 <hif_isr+0x390>)
    2e10:	781b      	ldrb	r3, [r3, #0]
    2e12:	b2db      	uxtb	r3, r3
    2e14:	2b00      	cmp	r3, #0
    2e16:	d153      	bne.n	2ec0 <hif_isr+0x36c>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    2e18:	4a44      	ldr	r2, [pc, #272]	; (2f2c <hif_isr+0x3d8>)
    2e1a:	4934      	ldr	r1, [pc, #208]	; (2eec <hif_isr+0x398>)
    2e1c:	4b34      	ldr	r3, [pc, #208]	; (2ef0 <hif_isr+0x39c>)
    2e1e:	0018      	movs	r0, r3
    2e20:	4b34      	ldr	r3, [pc, #208]	; (2ef4 <hif_isr+0x3a0>)
    2e22:	4798      	blx	r3
    2e24:	4b42      	ldr	r3, [pc, #264]	; (2f30 <hif_isr+0x3dc>)
    2e26:	0018      	movs	r0, r3
    2e28:	4b34      	ldr	r3, [pc, #208]	; (2efc <hif_isr+0x3a8>)
    2e2a:	4798      	blx	r3
    2e2c:	200d      	movs	r0, #13
    2e2e:	4b34      	ldr	r3, [pc, #208]	; (2f00 <hif_isr+0x3ac>)
    2e30:	4798      	blx	r3
						ret = hif_set_rx_done();
    2e32:	230f      	movs	r3, #15
    2e34:	18fc      	adds	r4, r7, r3
    2e36:	4b3f      	ldr	r3, [pc, #252]	; (2f34 <hif_isr+0x3e0>)
    2e38:	4798      	blx	r3
    2e3a:	0003      	movs	r3, r0
    2e3c:	7023      	strb	r3, [r4, #0]
    2e3e:	e03f      	b.n	2ec0 <hif_isr+0x36c>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    2e40:	230f      	movs	r3, #15
    2e42:	18fb      	adds	r3, r7, r3
    2e44:	22fe      	movs	r2, #254	; 0xfe
    2e46:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    2e48:	4a3b      	ldr	r2, [pc, #236]	; (2f38 <hif_isr+0x3e4>)
    2e4a:	4928      	ldr	r1, [pc, #160]	; (2eec <hif_isr+0x398>)
    2e4c:	4b28      	ldr	r3, [pc, #160]	; (2ef0 <hif_isr+0x39c>)
    2e4e:	0018      	movs	r0, r3
    2e50:	4b28      	ldr	r3, [pc, #160]	; (2ef4 <hif_isr+0x3a0>)
    2e52:	4798      	blx	r3
    2e54:	4b39      	ldr	r3, [pc, #228]	; (2f3c <hif_isr+0x3e8>)
    2e56:	0018      	movs	r0, r3
    2e58:	4b28      	ldr	r3, [pc, #160]	; (2efc <hif_isr+0x3a8>)
    2e5a:	4798      	blx	r3
    2e5c:	200d      	movs	r0, #13
    2e5e:	4b28      	ldr	r3, [pc, #160]	; (2f00 <hif_isr+0x3ac>)
    2e60:	4798      	blx	r3
					goto ERR1;
    2e62:	e078      	b.n	2f56 <hif_isr+0x402>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    2e64:	2386      	movs	r3, #134	; 0x86
    2e66:	009a      	lsls	r2, r3, #2
    2e68:	4920      	ldr	r1, [pc, #128]	; (2eec <hif_isr+0x398>)
    2e6a:	4b21      	ldr	r3, [pc, #132]	; (2ef0 <hif_isr+0x39c>)
    2e6c:	0018      	movs	r0, r3
    2e6e:	4b21      	ldr	r3, [pc, #132]	; (2ef4 <hif_isr+0x3a0>)
    2e70:	4798      	blx	r3
    2e72:	68ba      	ldr	r2, [r7, #8]
    2e74:	4b32      	ldr	r3, [pc, #200]	; (2f40 <hif_isr+0x3ec>)
    2e76:	0011      	movs	r1, r2
    2e78:	0018      	movs	r0, r3
    2e7a:	4b1e      	ldr	r3, [pc, #120]	; (2ef4 <hif_isr+0x3a0>)
    2e7c:	4798      	blx	r3
    2e7e:	200d      	movs	r0, #13
    2e80:	4b1f      	ldr	r3, [pc, #124]	; (2f00 <hif_isr+0x3ac>)
    2e82:	4798      	blx	r3
    2e84:	e01c      	b.n	2ec0 <hif_isr+0x36c>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    2e86:	4a2f      	ldr	r2, [pc, #188]	; (2f44 <hif_isr+0x3f0>)
    2e88:	4918      	ldr	r1, [pc, #96]	; (2eec <hif_isr+0x398>)
    2e8a:	4b19      	ldr	r3, [pc, #100]	; (2ef0 <hif_isr+0x39c>)
    2e8c:	0018      	movs	r0, r3
    2e8e:	4b19      	ldr	r3, [pc, #100]	; (2ef4 <hif_isr+0x3a0>)
    2e90:	4798      	blx	r3
    2e92:	4b2d      	ldr	r3, [pc, #180]	; (2f48 <hif_isr+0x3f4>)
    2e94:	0018      	movs	r0, r3
    2e96:	4b19      	ldr	r3, [pc, #100]	; (2efc <hif_isr+0x3a8>)
    2e98:	4798      	blx	r3
    2e9a:	200d      	movs	r0, #13
    2e9c:	4b18      	ldr	r3, [pc, #96]	; (2f00 <hif_isr+0x3ac>)
    2e9e:	4798      	blx	r3
			goto ERR1;
    2ea0:	e059      	b.n	2f56 <hif_isr+0x402>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    2ea2:	2389      	movs	r3, #137	; 0x89
    2ea4:	009a      	lsls	r2, r3, #2
    2ea6:	4911      	ldr	r1, [pc, #68]	; (2eec <hif_isr+0x398>)
    2ea8:	4b11      	ldr	r3, [pc, #68]	; (2ef0 <hif_isr+0x39c>)
    2eaa:	0018      	movs	r0, r3
    2eac:	4b11      	ldr	r3, [pc, #68]	; (2ef4 <hif_isr+0x3a0>)
    2eae:	4798      	blx	r3
    2eb0:	4b26      	ldr	r3, [pc, #152]	; (2f4c <hif_isr+0x3f8>)
    2eb2:	0018      	movs	r0, r3
    2eb4:	4b11      	ldr	r3, [pc, #68]	; (2efc <hif_isr+0x3a8>)
    2eb6:	4798      	blx	r3
    2eb8:	200d      	movs	r0, #13
    2eba:	4b11      	ldr	r3, [pc, #68]	; (2f00 <hif_isr+0x3ac>)
    2ebc:	4798      	blx	r3
		goto ERR1;
    2ebe:	e04a      	b.n	2f56 <hif_isr+0x402>
	}

	ret = hif_chip_sleep();
    2ec0:	230f      	movs	r3, #15
    2ec2:	18fc      	adds	r4, r7, r3
    2ec4:	4b22      	ldr	r3, [pc, #136]	; (2f50 <hif_isr+0x3fc>)
    2ec6:	4798      	blx	r3
    2ec8:	0003      	movs	r3, r0
    2eca:	7023      	strb	r3, [r4, #0]
    2ecc:	e043      	b.n	2f56 <hif_isr+0x402>
    2ece:	46c0      	nop			; (mov r8, r8)
    2ed0:	0000264d 	.word	0x0000264d
    2ed4:	00001070 	.word	0x00001070
    2ed8:	00004759 	.word	0x00004759
    2edc:	00001c2d 	.word	0x00001c2d
    2ee0:	0000477d 	.word	0x0000477d
    2ee4:	200000c2 	.word	0x200000c2
    2ee8:	00001084 	.word	0x00001084
    2eec:	00011248 	.word	0x00011248
    2ef0:	00010fdc 	.word	0x00010fdc
    2ef4:	0000fd31 	.word	0x0000fd31
    2ef8:	0001100c 	.word	0x0001100c
    2efc:	0000fe51 	.word	0x0000fe51
    2f00:	0000fd65 	.word	0x0000fd65
    2f04:	000047cd 	.word	0x000047cd
    2f08:	00011030 	.word	0x00011030
    2f0c:	00011048 	.word	0x00011048
    2f10:	200000c4 	.word	0x200000c4
    2f14:	200000c8 	.word	0x200000c8
    2f18:	200000cc 	.word	0x200000cc
    2f1c:	200000d8 	.word	0x200000d8
    2f20:	200000d0 	.word	0x200000d0
    2f24:	00000202 	.word	0x00000202
    2f28:	00011088 	.word	0x00011088
    2f2c:	00000209 	.word	0x00000209
    2f30:	000110a0 	.word	0x000110a0
    2f34:	000025c5 	.word	0x000025c5
    2f38:	00000211 	.word	0x00000211
    2f3c:	000110c4 	.word	0x000110c4
    2f40:	000110d8 	.word	0x000110d8
    2f44:	0000021e 	.word	0x0000021e
    2f48:	000110f4 	.word	0x000110f4
    2f4c:	00011118 	.word	0x00011118
    2f50:	000026e5 	.word	0x000026e5

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
    2f54:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
    2f56:	230f      	movs	r3, #15
    2f58:	18fb      	adds	r3, r7, r3
    2f5a:	781b      	ldrb	r3, [r3, #0]
    2f5c:	b25b      	sxtb	r3, r3
}
    2f5e:	0018      	movs	r0, r3
    2f60:	46bd      	mov	sp, r7
    2f62:	b005      	add	sp, #20
    2f64:	bd90      	pop	{r4, r7, pc}
    2f66:	46c0      	nop			; (mov r8, r8)

00002f68 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    2f68:	b590      	push	{r4, r7, lr}
    2f6a:	b083      	sub	sp, #12
    2f6c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2f6e:	1dfb      	adds	r3, r7, #7
    2f70:	2200      	movs	r2, #0
    2f72:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    2f74:	e023      	b.n	2fbe <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    2f76:	4b18      	ldr	r3, [pc, #96]	; (2fd8 <hif_handle_isr+0x70>)
    2f78:	781b      	ldrb	r3, [r3, #0]
    2f7a:	b2db      	uxtb	r3, r3
    2f7c:	3b01      	subs	r3, #1
    2f7e:	b2da      	uxtb	r2, r3
    2f80:	4b15      	ldr	r3, [pc, #84]	; (2fd8 <hif_handle_isr+0x70>)
    2f82:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    2f84:	1dfc      	adds	r4, r7, #7
    2f86:	4b15      	ldr	r3, [pc, #84]	; (2fdc <hif_handle_isr+0x74>)
    2f88:	4798      	blx	r3
    2f8a:	0003      	movs	r3, r0
    2f8c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    2f8e:	1dfb      	adds	r3, r7, #7
    2f90:	781b      	ldrb	r3, [r3, #0]
    2f92:	b25b      	sxtb	r3, r3
    2f94:	2b00      	cmp	r3, #0
    2f96:	d100      	bne.n	2f9a <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    2f98:	e011      	b.n	2fbe <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    2f9a:	4a11      	ldr	r2, [pc, #68]	; (2fe0 <hif_handle_isr+0x78>)
    2f9c:	4911      	ldr	r1, [pc, #68]	; (2fe4 <hif_handle_isr+0x7c>)
    2f9e:	4b12      	ldr	r3, [pc, #72]	; (2fe8 <hif_handle_isr+0x80>)
    2fa0:	0018      	movs	r0, r3
    2fa2:	4b12      	ldr	r3, [pc, #72]	; (2fec <hif_handle_isr+0x84>)
    2fa4:	4798      	blx	r3
    2fa6:	1dfb      	adds	r3, r7, #7
    2fa8:	2200      	movs	r2, #0
    2faa:	569a      	ldrsb	r2, [r3, r2]
    2fac:	4b10      	ldr	r3, [pc, #64]	; (2ff0 <hif_handle_isr+0x88>)
    2fae:	0011      	movs	r1, r2
    2fb0:	0018      	movs	r0, r3
    2fb2:	4b0e      	ldr	r3, [pc, #56]	; (2fec <hif_handle_isr+0x84>)
    2fb4:	4798      	blx	r3
    2fb6:	200d      	movs	r0, #13
    2fb8:	4b0e      	ldr	r3, [pc, #56]	; (2ff4 <hif_handle_isr+0x8c>)
    2fba:	4798      	blx	r3
			}
		}
    2fbc:	e7e2      	b.n	2f84 <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    2fbe:	4b06      	ldr	r3, [pc, #24]	; (2fd8 <hif_handle_isr+0x70>)
    2fc0:	781b      	ldrb	r3, [r3, #0]
    2fc2:	b2db      	uxtb	r3, r3
    2fc4:	2b00      	cmp	r3, #0
    2fc6:	d1d6      	bne.n	2f76 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    2fc8:	1dfb      	adds	r3, r7, #7
    2fca:	781b      	ldrb	r3, [r3, #0]
    2fcc:	b25b      	sxtb	r3, r3
}
    2fce:	0018      	movs	r0, r3
    2fd0:	46bd      	mov	sp, r7
    2fd2:	b003      	add	sp, #12
    2fd4:	bd90      	pop	{r4, r7, pc}
    2fd6:	46c0      	nop			; (mov r8, r8)
    2fd8:	200000c3 	.word	0x200000c3
    2fdc:	00002b55 	.word	0x00002b55
    2fe0:	00000243 	.word	0x00000243
    2fe4:	00011250 	.word	0x00011250
    2fe8:	00010fdc 	.word	0x00010fdc
    2fec:	0000fd31 	.word	0x0000fd31
    2ff0:	00011138 	.word	0x00011138
    2ff4:	0000fd65 	.word	0x0000fd65

00002ff8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    2ff8:	b590      	push	{r4, r7, lr}
    2ffa:	b089      	sub	sp, #36	; 0x24
    2ffc:	af00      	add	r7, sp, #0
    2ffe:	60f8      	str	r0, [r7, #12]
    3000:	60b9      	str	r1, [r7, #8]
    3002:	0019      	movs	r1, r3
    3004:	1dbb      	adds	r3, r7, #6
    3006:	801a      	strh	r2, [r3, #0]
    3008:	1d7b      	adds	r3, r7, #5
    300a:	1c0a      	adds	r2, r1, #0
    300c:	701a      	strb	r2, [r3, #0]
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;
    300e:	231f      	movs	r3, #31
    3010:	18fb      	adds	r3, r7, r3
    3012:	2200      	movs	r2, #0
    3014:	701a      	strb	r2, [r3, #0]

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    3016:	68fb      	ldr	r3, [r7, #12]
    3018:	2b00      	cmp	r3, #0
    301a:	d006      	beq.n	302a <hif_receive+0x32>
    301c:	68bb      	ldr	r3, [r7, #8]
    301e:	2b00      	cmp	r3, #0
    3020:	d003      	beq.n	302a <hif_receive+0x32>
    3022:	1dbb      	adds	r3, r7, #6
    3024:	881b      	ldrh	r3, [r3, #0]
    3026:	2b00      	cmp	r3, #0
    3028:	d11f      	bne.n	306a <hif_receive+0x72>
	{
		if(isDone)
    302a:	1d7b      	adds	r3, r7, #5
    302c:	781b      	ldrb	r3, [r3, #0]
    302e:	2b00      	cmp	r3, #0
    3030:	d009      	beq.n	3046 <hif_receive+0x4e>
		{
			gu8HifSizeDone = 1;
    3032:	4b5f      	ldr	r3, [pc, #380]	; (31b0 <hif_receive+0x1b8>)
    3034:	2201      	movs	r2, #1
    3036:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
    3038:	231f      	movs	r3, #31
    303a:	18fc      	adds	r4, r7, r3
    303c:	4b5d      	ldr	r3, [pc, #372]	; (31b4 <hif_receive+0x1bc>)
    303e:	4798      	blx	r3
    3040:	0003      	movs	r3, r0
    3042:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    3044:	e0ac      	b.n	31a0 <hif_receive+0x1a8>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    3046:	231f      	movs	r3, #31
    3048:	18fb      	adds	r3, r7, r3
    304a:	22f4      	movs	r2, #244	; 0xf4
    304c:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    304e:	4a5a      	ldr	r2, [pc, #360]	; (31b8 <hif_receive+0x1c0>)
    3050:	495a      	ldr	r1, [pc, #360]	; (31bc <hif_receive+0x1c4>)
    3052:	4b5b      	ldr	r3, [pc, #364]	; (31c0 <hif_receive+0x1c8>)
    3054:	0018      	movs	r0, r3
    3056:	4b5b      	ldr	r3, [pc, #364]	; (31c4 <hif_receive+0x1cc>)
    3058:	4798      	blx	r3
    305a:	4b5b      	ldr	r3, [pc, #364]	; (31c8 <hif_receive+0x1d0>)
    305c:	0018      	movs	r0, r3
    305e:	4b5b      	ldr	r3, [pc, #364]	; (31cc <hif_receive+0x1d4>)
    3060:	4798      	blx	r3
    3062:	200d      	movs	r0, #13
    3064:	4b5a      	ldr	r3, [pc, #360]	; (31d0 <hif_receive+0x1d8>)
    3066:	4798      	blx	r3
		}
		goto ERR1;
    3068:	e09a      	b.n	31a0 <hif_receive+0x1a8>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    306a:	231f      	movs	r3, #31
    306c:	18fc      	adds	r4, r7, r3
    306e:	2314      	movs	r3, #20
    3070:	18fb      	adds	r3, r7, r3
    3072:	4a58      	ldr	r2, [pc, #352]	; (31d4 <hif_receive+0x1dc>)
    3074:	0019      	movs	r1, r3
    3076:	0010      	movs	r0, r2
    3078:	4b57      	ldr	r3, [pc, #348]	; (31d8 <hif_receive+0x1e0>)
    307a:	4798      	blx	r3
    307c:	0003      	movs	r3, r0
    307e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3080:	231f      	movs	r3, #31
    3082:	18fb      	adds	r3, r7, r3
    3084:	781b      	ldrb	r3, [r3, #0]
    3086:	b25b      	sxtb	r3, r3
    3088:	2b00      	cmp	r3, #0
    308a:	d000      	beq.n	308e <hif_receive+0x96>
    308c:	e083      	b.n	3196 <hif_receive+0x19e>


	size = (uint16)((reg >> 2) & 0xfff);
    308e:	697b      	ldr	r3, [r7, #20]
    3090:	089b      	lsrs	r3, r3, #2
    3092:	b29a      	uxth	r2, r3
    3094:	231c      	movs	r3, #28
    3096:	18fb      	adds	r3, r7, r3
    3098:	0512      	lsls	r2, r2, #20
    309a:	0d12      	lsrs	r2, r2, #20
    309c:	801a      	strh	r2, [r3, #0]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    309e:	231f      	movs	r3, #31
    30a0:	18fc      	adds	r4, r7, r3
    30a2:	2318      	movs	r3, #24
    30a4:	18fb      	adds	r3, r7, r3
    30a6:	4a4d      	ldr	r2, [pc, #308]	; (31dc <hif_receive+0x1e4>)
    30a8:	0019      	movs	r1, r3
    30aa:	0010      	movs	r0, r2
    30ac:	4b4a      	ldr	r3, [pc, #296]	; (31d8 <hif_receive+0x1e0>)
    30ae:	4798      	blx	r3
    30b0:	0003      	movs	r3, r0
    30b2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    30b4:	231f      	movs	r3, #31
    30b6:	18fb      	adds	r3, r7, r3
    30b8:	781b      	ldrb	r3, [r3, #0]
    30ba:	b25b      	sxtb	r3, r3
    30bc:	2b00      	cmp	r3, #0
    30be:	d000      	beq.n	30c2 <hif_receive+0xca>
    30c0:	e06b      	b.n	319a <hif_receive+0x1a2>


	if(u16Sz > size)
    30c2:	1dba      	adds	r2, r7, #6
    30c4:	231c      	movs	r3, #28
    30c6:	18fb      	adds	r3, r7, r3
    30c8:	8812      	ldrh	r2, [r2, #0]
    30ca:	881b      	ldrh	r3, [r3, #0]
    30cc:	429a      	cmp	r2, r3
    30ce:	d916      	bls.n	30fe <hif_receive+0x106>
	{
		ret = M2M_ERR_FAIL;
    30d0:	231f      	movs	r3, #31
    30d2:	18fb      	adds	r3, r7, r3
    30d4:	22f4      	movs	r2, #244	; 0xf4
    30d6:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    30d8:	4a41      	ldr	r2, [pc, #260]	; (31e0 <hif_receive+0x1e8>)
    30da:	4938      	ldr	r1, [pc, #224]	; (31bc <hif_receive+0x1c4>)
    30dc:	4b38      	ldr	r3, [pc, #224]	; (31c0 <hif_receive+0x1c8>)
    30de:	0018      	movs	r0, r3
    30e0:	4b38      	ldr	r3, [pc, #224]	; (31c4 <hif_receive+0x1cc>)
    30e2:	4798      	blx	r3
    30e4:	1dbb      	adds	r3, r7, #6
    30e6:	8819      	ldrh	r1, [r3, #0]
    30e8:	231c      	movs	r3, #28
    30ea:	18fb      	adds	r3, r7, r3
    30ec:	881a      	ldrh	r2, [r3, #0]
    30ee:	4b3d      	ldr	r3, [pc, #244]	; (31e4 <hif_receive+0x1ec>)
    30f0:	0018      	movs	r0, r3
    30f2:	4b34      	ldr	r3, [pc, #208]	; (31c4 <hif_receive+0x1cc>)
    30f4:	4798      	blx	r3
    30f6:	200d      	movs	r0, #13
    30f8:	4b35      	ldr	r3, [pc, #212]	; (31d0 <hif_receive+0x1d8>)
    30fa:	4798      	blx	r3
		goto ERR1;
    30fc:	e050      	b.n	31a0 <hif_receive+0x1a8>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    30fe:	69bb      	ldr	r3, [r7, #24]
    3100:	68fa      	ldr	r2, [r7, #12]
    3102:	429a      	cmp	r2, r3
    3104:	d30a      	bcc.n	311c <hif_receive+0x124>
    3106:	1dbb      	adds	r3, r7, #6
    3108:	881a      	ldrh	r2, [r3, #0]
    310a:	68fb      	ldr	r3, [r7, #12]
    310c:	18d2      	adds	r2, r2, r3
    310e:	231c      	movs	r3, #28
    3110:	18fb      	adds	r3, r7, r3
    3112:	8819      	ldrh	r1, [r3, #0]
    3114:	69bb      	ldr	r3, [r7, #24]
    3116:	18cb      	adds	r3, r1, r3
    3118:	429a      	cmp	r2, r3
    311a:	d912      	bls.n	3142 <hif_receive+0x14a>
	{
		ret = M2M_ERR_FAIL;
    311c:	231f      	movs	r3, #31
    311e:	18fb      	adds	r3, r7, r3
    3120:	22f4      	movs	r2, #244	; 0xf4
    3122:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    3124:	23a0      	movs	r3, #160	; 0xa0
    3126:	009a      	lsls	r2, r3, #2
    3128:	4924      	ldr	r1, [pc, #144]	; (31bc <hif_receive+0x1c4>)
    312a:	4b25      	ldr	r3, [pc, #148]	; (31c0 <hif_receive+0x1c8>)
    312c:	0018      	movs	r0, r3
    312e:	4b25      	ldr	r3, [pc, #148]	; (31c4 <hif_receive+0x1cc>)
    3130:	4798      	blx	r3
    3132:	4b2d      	ldr	r3, [pc, #180]	; (31e8 <hif_receive+0x1f0>)
    3134:	0018      	movs	r0, r3
    3136:	4b25      	ldr	r3, [pc, #148]	; (31cc <hif_receive+0x1d4>)
    3138:	4798      	blx	r3
    313a:	200d      	movs	r0, #13
    313c:	4b24      	ldr	r3, [pc, #144]	; (31d0 <hif_receive+0x1d8>)
    313e:	4798      	blx	r3
		goto ERR1;
    3140:	e02e      	b.n	31a0 <hif_receive+0x1a8>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    3142:	1dbb      	adds	r3, r7, #6
    3144:	881a      	ldrh	r2, [r3, #0]
    3146:	231f      	movs	r3, #31
    3148:	18fc      	adds	r4, r7, r3
    314a:	68b9      	ldr	r1, [r7, #8]
    314c:	68fb      	ldr	r3, [r7, #12]
    314e:	0018      	movs	r0, r3
    3150:	4b26      	ldr	r3, [pc, #152]	; (31ec <hif_receive+0x1f4>)
    3152:	4798      	blx	r3
    3154:	0003      	movs	r3, r0
    3156:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3158:	231f      	movs	r3, #31
    315a:	18fb      	adds	r3, r7, r3
    315c:	781b      	ldrb	r3, [r3, #0]
    315e:	b25b      	sxtb	r3, r3
    3160:	2b00      	cmp	r3, #0
    3162:	d11c      	bne.n	319e <hif_receive+0x1a6>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
    3164:	231c      	movs	r3, #28
    3166:	18fb      	adds	r3, r7, r3
    3168:	881a      	ldrh	r2, [r3, #0]
    316a:	69bb      	ldr	r3, [r7, #24]
    316c:	18d2      	adds	r2, r2, r3
    316e:	1dbb      	adds	r3, r7, #6
    3170:	8819      	ldrh	r1, [r3, #0]
    3172:	68fb      	ldr	r3, [r7, #12]
    3174:	18cb      	adds	r3, r1, r3
    3176:	429a      	cmp	r2, r3
    3178:	d003      	beq.n	3182 <hif_receive+0x18a>
    317a:	1d7b      	adds	r3, r7, #5
    317c:	781b      	ldrb	r3, [r3, #0]
    317e:	2b00      	cmp	r3, #0
    3180:	d00e      	beq.n	31a0 <hif_receive+0x1a8>
	{
		gu8HifSizeDone = 1;
    3182:	4b0b      	ldr	r3, [pc, #44]	; (31b0 <hif_receive+0x1b8>)
    3184:	2201      	movs	r2, #1
    3186:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    3188:	231f      	movs	r3, #31
    318a:	18fc      	adds	r4, r7, r3
    318c:	4b09      	ldr	r3, [pc, #36]	; (31b4 <hif_receive+0x1bc>)
    318e:	4798      	blx	r3
    3190:	0003      	movs	r3, r0
    3192:	7023      	strb	r3, [r4, #0]
    3194:	e004      	b.n	31a0 <hif_receive+0x1a8>
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	e002      	b.n	31a0 <hif_receive+0x1a8>


	size = (uint16)((reg >> 2) & 0xfff);
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;
    319a:	46c0      	nop			; (mov r8, r8)
    319c:	e000      	b.n	31a0 <hif_receive+0x1a8>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    319e:	46c0      	nop			; (mov r8, r8)
	}



ERR1:
	return ret;
    31a0:	231f      	movs	r3, #31
    31a2:	18fb      	adds	r3, r7, r3
    31a4:	781b      	ldrb	r3, [r3, #0]
    31a6:	b25b      	sxtb	r3, r3
}
    31a8:	0018      	movs	r0, r3
    31aa:	46bd      	mov	sp, r7
    31ac:	b009      	add	sp, #36	; 0x24
    31ae:	bd90      	pop	{r4, r7, pc}
    31b0:	200000c2 	.word	0x200000c2
    31b4:	000025c5 	.word	0x000025c5
    31b8:	00000269 	.word	0x00000269
    31bc:	00011260 	.word	0x00011260
    31c0:	00010fdc 	.word	0x00010fdc
    31c4:	0000fd31 	.word	0x0000fd31
    31c8:	00011168 	.word	0x00011168
    31cc:	0000fe51 	.word	0x0000fe51
    31d0:	0000fd65 	.word	0x0000fd65
    31d4:	00001070 	.word	0x00001070
    31d8:	00004759 	.word	0x00004759
    31dc:	00001084 	.word	0x00001084
    31e0:	0000027a 	.word	0x0000027a
    31e4:	00011188 	.word	0x00011188
    31e8:	000111cc 	.word	0x000111cc
    31ec:	000047cd 	.word	0x000047cd

000031f0 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    31f0:	b580      	push	{r7, lr}
    31f2:	b084      	sub	sp, #16
    31f4:	af00      	add	r7, sp, #0
    31f6:	0002      	movs	r2, r0
    31f8:	6039      	str	r1, [r7, #0]
    31fa:	1dfb      	adds	r3, r7, #7
    31fc:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    31fe:	230f      	movs	r3, #15
    3200:	18fb      	adds	r3, r7, r3
    3202:	2200      	movs	r2, #0
    3204:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    3206:	1dfb      	adds	r3, r7, #7
    3208:	781b      	ldrb	r3, [r3, #0]
    320a:	2b07      	cmp	r3, #7
    320c:	d81c      	bhi.n	3248 <hif_register_cb+0x58>
    320e:	009a      	lsls	r2, r3, #2
    3210:	4b1c      	ldr	r3, [pc, #112]	; (3284 <hif_register_cb+0x94>)
    3212:	18d3      	adds	r3, r2, r3
    3214:	681b      	ldr	r3, [r3, #0]
    3216:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
    3218:	4b1b      	ldr	r3, [pc, #108]	; (3288 <hif_register_cb+0x98>)
    321a:	683a      	ldr	r2, [r7, #0]
    321c:	601a      	str	r2, [r3, #0]
			break;
    321e:	e028      	b.n	3272 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
    3220:	4b1a      	ldr	r3, [pc, #104]	; (328c <hif_register_cb+0x9c>)
    3222:	683a      	ldr	r2, [r7, #0]
    3224:	601a      	str	r2, [r3, #0]
			break;
    3226:	e024      	b.n	3272 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
    3228:	4b19      	ldr	r3, [pc, #100]	; (3290 <hif_register_cb+0xa0>)
    322a:	683a      	ldr	r2, [r7, #0]
    322c:	601a      	str	r2, [r3, #0]
			break;
    322e:	e020      	b.n	3272 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
    3230:	4b18      	ldr	r3, [pc, #96]	; (3294 <hif_register_cb+0xa4>)
    3232:	683a      	ldr	r2, [r7, #0]
    3234:	601a      	str	r2, [r3, #0]
			break;
    3236:	e01c      	b.n	3272 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
    3238:	4b17      	ldr	r3, [pc, #92]	; (3298 <hif_register_cb+0xa8>)
    323a:	683a      	ldr	r2, [r7, #0]
    323c:	601a      	str	r2, [r3, #0]
			break;
    323e:	e018      	b.n	3272 <hif_register_cb+0x82>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
    3240:	4b16      	ldr	r3, [pc, #88]	; (329c <hif_register_cb+0xac>)
    3242:	683a      	ldr	r2, [r7, #0]
    3244:	601a      	str	r2, [r3, #0]
			break;
    3246:	e014      	b.n	3272 <hif_register_cb+0x82>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    3248:	4a15      	ldr	r2, [pc, #84]	; (32a0 <hif_register_cb+0xb0>)
    324a:	4916      	ldr	r1, [pc, #88]	; (32a4 <hif_register_cb+0xb4>)
    324c:	4b16      	ldr	r3, [pc, #88]	; (32a8 <hif_register_cb+0xb8>)
    324e:	0018      	movs	r0, r3
    3250:	4b16      	ldr	r3, [pc, #88]	; (32ac <hif_register_cb+0xbc>)
    3252:	4798      	blx	r3
    3254:	1dfb      	adds	r3, r7, #7
    3256:	781a      	ldrb	r2, [r3, #0]
    3258:	4b15      	ldr	r3, [pc, #84]	; (32b0 <hif_register_cb+0xc0>)
    325a:	0011      	movs	r1, r2
    325c:	0018      	movs	r0, r3
    325e:	4b13      	ldr	r3, [pc, #76]	; (32ac <hif_register_cb+0xbc>)
    3260:	4798      	blx	r3
    3262:	200d      	movs	r0, #13
    3264:	4b13      	ldr	r3, [pc, #76]	; (32b4 <hif_register_cb+0xc4>)
    3266:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3268:	230f      	movs	r3, #15
    326a:	18fb      	adds	r3, r7, r3
    326c:	22f4      	movs	r2, #244	; 0xf4
    326e:	701a      	strb	r2, [r3, #0]
			break;
    3270:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    3272:	230f      	movs	r3, #15
    3274:	18fb      	adds	r3, r7, r3
    3276:	781b      	ldrb	r3, [r3, #0]
    3278:	b25b      	sxtb	r3, r3
}
    327a:	0018      	movs	r0, r3
    327c:	46bd      	mov	sp, r7
    327e:	b004      	add	sp, #16
    3280:	bd80      	pop	{r7, pc}
    3282:	46c0      	nop			; (mov r8, r8)
    3284:	0001121c 	.word	0x0001121c
    3288:	200000c8 	.word	0x200000c8
    328c:	200000c4 	.word	0x200000c4
    3290:	200000cc 	.word	0x200000cc
    3294:	200000d4 	.word	0x200000d4
    3298:	200000d8 	.word	0x200000d8
    329c:	200000d0 	.word	0x200000d0
    32a0:	000002b9 	.word	0x000002b9
    32a4:	0001126c 	.word	0x0001126c
    32a8:	00010fdc 	.word	0x00010fdc
    32ac:	0000fd31 	.word	0x0000fd31
    32b0:	00011210 	.word	0x00011210
    32b4:	0000fd65 	.word	0x0000fd65

000032b8 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    32b8:	b590      	push	{r4, r7, lr}
    32ba:	b0ad      	sub	sp, #180	; 0xb4
    32bc:	af02      	add	r7, sp, #8
    32be:	603a      	str	r2, [r7, #0]
    32c0:	1dfb      	adds	r3, r7, #7
    32c2:	1c02      	adds	r2, r0, #0
    32c4:	701a      	strb	r2, [r3, #0]
    32c6:	1d3b      	adds	r3, r7, #4
    32c8:	1c0a      	adds	r2, r1, #0
    32ca:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    32cc:	1dfb      	adds	r3, r7, #7
    32ce:	781b      	ldrb	r3, [r3, #0]
    32d0:	2b2c      	cmp	r3, #44	; 0x2c
    32d2:	d116      	bne.n	3302 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    32d4:	239c      	movs	r3, #156	; 0x9c
    32d6:	18f9      	adds	r1, r7, r3
    32d8:	6838      	ldr	r0, [r7, #0]
    32da:	2300      	movs	r3, #0
    32dc:	2204      	movs	r2, #4
    32de:	4ccc      	ldr	r4, [pc, #816]	; (3610 <m2m_wifi_cb+0x358>)
    32e0:	47a0      	blx	r4
    32e2:	1e03      	subs	r3, r0, #0
    32e4:	d000      	beq.n	32e8 <m2m_wifi_cb+0x30>
    32e6:	e1b6      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    32e8:	4bca      	ldr	r3, [pc, #808]	; (3614 <m2m_wifi_cb+0x35c>)
    32ea:	681b      	ldr	r3, [r3, #0]
    32ec:	2b00      	cmp	r3, #0
    32ee:	d100      	bne.n	32f2 <m2m_wifi_cb+0x3a>
    32f0:	e1b1      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    32f2:	4bc8      	ldr	r3, [pc, #800]	; (3614 <m2m_wifi_cb+0x35c>)
    32f4:	681b      	ldr	r3, [r3, #0]
    32f6:	229c      	movs	r2, #156	; 0x9c
    32f8:	18ba      	adds	r2, r7, r2
    32fa:	0011      	movs	r1, r2
    32fc:	202c      	movs	r0, #44	; 0x2c
    32fe:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3300:	e1a9      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    3302:	1dfb      	adds	r3, r7, #7
    3304:	781b      	ldrb	r3, [r3, #0]
    3306:	2b1b      	cmp	r3, #27
    3308:	d116      	bne.n	3338 <m2m_wifi_cb+0x80>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    330a:	2394      	movs	r3, #148	; 0x94
    330c:	18f9      	adds	r1, r7, r3
    330e:	6838      	ldr	r0, [r7, #0]
    3310:	2300      	movs	r3, #0
    3312:	2208      	movs	r2, #8
    3314:	4cbe      	ldr	r4, [pc, #760]	; (3610 <m2m_wifi_cb+0x358>)
    3316:	47a0      	blx	r4
    3318:	1e03      	subs	r3, r0, #0
    331a:	d000      	beq.n	331e <m2m_wifi_cb+0x66>
    331c:	e19b      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    331e:	4bbd      	ldr	r3, [pc, #756]	; (3614 <m2m_wifi_cb+0x35c>)
    3320:	681b      	ldr	r3, [r3, #0]
    3322:	2b00      	cmp	r3, #0
    3324:	d100      	bne.n	3328 <m2m_wifi_cb+0x70>
    3326:	e196      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    3328:	4bba      	ldr	r3, [pc, #744]	; (3614 <m2m_wifi_cb+0x35c>)
    332a:	681b      	ldr	r3, [r3, #0]
    332c:	2294      	movs	r2, #148	; 0x94
    332e:	18ba      	adds	r2, r7, r2
    3330:	0011      	movs	r1, r2
    3332:	201b      	movs	r0, #27
    3334:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3336:	e18e      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    3338:	1dfb      	adds	r3, r7, #7
    333a:	781b      	ldrb	r3, [r3, #0]
    333c:	2b06      	cmp	r3, #6
    333e:	d116      	bne.n	336e <m2m_wifi_cb+0xb6>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    3340:	230c      	movs	r3, #12
    3342:	18f9      	adds	r1, r7, r3
    3344:	6838      	ldr	r0, [r7, #0]
    3346:	2301      	movs	r3, #1
    3348:	2230      	movs	r2, #48	; 0x30
    334a:	4cb1      	ldr	r4, [pc, #708]	; (3610 <m2m_wifi_cb+0x358>)
    334c:	47a0      	blx	r4
    334e:	1e03      	subs	r3, r0, #0
    3350:	d000      	beq.n	3354 <m2m_wifi_cb+0x9c>
    3352:	e180      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    3354:	4baf      	ldr	r3, [pc, #700]	; (3614 <m2m_wifi_cb+0x35c>)
    3356:	681b      	ldr	r3, [r3, #0]
    3358:	2b00      	cmp	r3, #0
    335a:	d100      	bne.n	335e <m2m_wifi_cb+0xa6>
    335c:	e17b      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    335e:	4bad      	ldr	r3, [pc, #692]	; (3614 <m2m_wifi_cb+0x35c>)
    3360:	681b      	ldr	r3, [r3, #0]
    3362:	220c      	movs	r2, #12
    3364:	18ba      	adds	r2, r7, r2
    3366:	0011      	movs	r1, r2
    3368:	2006      	movs	r0, #6
    336a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    336c:	e173      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    336e:	1dfb      	adds	r3, r7, #7
    3370:	781b      	ldrb	r3, [r3, #0]
    3372:	2b0e      	cmp	r3, #14
    3374:	d100      	bne.n	3378 <m2m_wifi_cb+0xc0>
    3376:	e16e      	b.n	3656 <m2m_wifi_cb+0x39e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    3378:	1dfb      	adds	r3, r7, #7
    337a:	781b      	ldrb	r3, [r3, #0]
    337c:	2b32      	cmp	r3, #50	; 0x32
    337e:	d116      	bne.n	33ae <m2m_wifi_cb+0xf6>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    3380:	2384      	movs	r3, #132	; 0x84
    3382:	18f9      	adds	r1, r7, r3
    3384:	6838      	ldr	r0, [r7, #0]
    3386:	2300      	movs	r3, #0
    3388:	2210      	movs	r2, #16
    338a:	4ca1      	ldr	r4, [pc, #644]	; (3610 <m2m_wifi_cb+0x358>)
    338c:	47a0      	blx	r4
    338e:	1e03      	subs	r3, r0, #0
    3390:	d000      	beq.n	3394 <m2m_wifi_cb+0xdc>
    3392:	e160      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    3394:	4b9f      	ldr	r3, [pc, #636]	; (3614 <m2m_wifi_cb+0x35c>)
    3396:	681b      	ldr	r3, [r3, #0]
    3398:	2b00      	cmp	r3, #0
    339a:	d100      	bne.n	339e <m2m_wifi_cb+0xe6>
    339c:	e15b      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    339e:	4b9d      	ldr	r3, [pc, #628]	; (3614 <m2m_wifi_cb+0x35c>)
    33a0:	681b      	ldr	r3, [r3, #0]
    33a2:	2284      	movs	r2, #132	; 0x84
    33a4:	18ba      	adds	r2, r7, r2
    33a6:	0011      	movs	r1, r2
    33a8:	2032      	movs	r0, #50	; 0x32
    33aa:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    33ac:	e153      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    33ae:	1dfb      	adds	r3, r7, #7
    33b0:	781b      	ldrb	r3, [r3, #0]
    33b2:	2b2f      	cmp	r3, #47	; 0x2f
    33b4:	d11d      	bne.n	33f2 <m2m_wifi_cb+0x13a>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    33b6:	230c      	movs	r3, #12
    33b8:	18fb      	adds	r3, r7, r3
    33ba:	2264      	movs	r2, #100	; 0x64
    33bc:	2100      	movs	r1, #0
    33be:	0018      	movs	r0, r3
    33c0:	4b95      	ldr	r3, [pc, #596]	; (3618 <m2m_wifi_cb+0x360>)
    33c2:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    33c4:	230c      	movs	r3, #12
    33c6:	18f9      	adds	r1, r7, r3
    33c8:	6838      	ldr	r0, [r7, #0]
    33ca:	2300      	movs	r3, #0
    33cc:	2264      	movs	r2, #100	; 0x64
    33ce:	4c90      	ldr	r4, [pc, #576]	; (3610 <m2m_wifi_cb+0x358>)
    33d0:	47a0      	blx	r4
    33d2:	1e03      	subs	r3, r0, #0
    33d4:	d000      	beq.n	33d8 <m2m_wifi_cb+0x120>
    33d6:	e13e      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    33d8:	4b8e      	ldr	r3, [pc, #568]	; (3614 <m2m_wifi_cb+0x35c>)
    33da:	681b      	ldr	r3, [r3, #0]
    33dc:	2b00      	cmp	r3, #0
    33de:	d100      	bne.n	33e2 <m2m_wifi_cb+0x12a>
    33e0:	e139      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    33e2:	4b8c      	ldr	r3, [pc, #560]	; (3614 <m2m_wifi_cb+0x35c>)
    33e4:	681b      	ldr	r3, [r3, #0]
    33e6:	220c      	movs	r2, #12
    33e8:	18ba      	adds	r2, r7, r2
    33ea:	0011      	movs	r1, r2
    33ec:	202f      	movs	r0, #47	; 0x2f
    33ee:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    33f0:	e131      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    33f2:	1dfb      	adds	r3, r7, #7
    33f4:	781b      	ldrb	r3, [r3, #0]
    33f6:	2b34      	cmp	r3, #52	; 0x34
    33f8:	d13a      	bne.n	3470 <m2m_wifi_cb+0x1b8>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    33fa:	2380      	movs	r3, #128	; 0x80
    33fc:	18f9      	adds	r1, r7, r3
    33fe:	6838      	ldr	r0, [r7, #0]
    3400:	2300      	movs	r3, #0
    3402:	2204      	movs	r2, #4
    3404:	4c82      	ldr	r4, [pc, #520]	; (3610 <m2m_wifi_cb+0x358>)
    3406:	47a0      	blx	r4
    3408:	1e03      	subs	r3, r0, #0
    340a:	d000      	beq.n	340e <m2m_wifi_cb+0x156>
    340c:	e123      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    340e:	4b83      	ldr	r3, [pc, #524]	; (361c <m2m_wifi_cb+0x364>)
    3410:	0018      	movs	r0, r3
    3412:	4b83      	ldr	r3, [pc, #524]	; (3620 <m2m_wifi_cb+0x368>)
    3414:	4798      	blx	r3
    3416:	2380      	movs	r3, #128	; 0x80
    3418:	18fb      	adds	r3, r7, r3
    341a:	681b      	ldr	r3, [r3, #0]
    341c:	001a      	movs	r2, r3
    341e:	23ff      	movs	r3, #255	; 0xff
    3420:	401a      	ands	r2, r3
    3422:	0011      	movs	r1, r2
    3424:	2380      	movs	r3, #128	; 0x80
    3426:	18fb      	adds	r3, r7, r3
    3428:	681b      	ldr	r3, [r3, #0]
    342a:	0a1b      	lsrs	r3, r3, #8
    342c:	001a      	movs	r2, r3
    342e:	23ff      	movs	r3, #255	; 0xff
    3430:	401a      	ands	r2, r3
    3432:	2380      	movs	r3, #128	; 0x80
    3434:	18fb      	adds	r3, r7, r3
    3436:	681b      	ldr	r3, [r3, #0]
    3438:	0c1b      	lsrs	r3, r3, #16
    343a:	0018      	movs	r0, r3
    343c:	23ff      	movs	r3, #255	; 0xff
    343e:	4018      	ands	r0, r3
    3440:	0004      	movs	r4, r0
    3442:	2380      	movs	r3, #128	; 0x80
    3444:	18fb      	adds	r3, r7, r3
    3446:	681b      	ldr	r3, [r3, #0]
    3448:	0e1b      	lsrs	r3, r3, #24
    344a:	4876      	ldr	r0, [pc, #472]	; (3624 <m2m_wifi_cb+0x36c>)
    344c:	9300      	str	r3, [sp, #0]
    344e:	0023      	movs	r3, r4
    3450:	4c73      	ldr	r4, [pc, #460]	; (3620 <m2m_wifi_cb+0x368>)
    3452:	47a0      	blx	r4
    3454:	200d      	movs	r0, #13
    3456:	4b74      	ldr	r3, [pc, #464]	; (3628 <m2m_wifi_cb+0x370>)
    3458:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    345a:	4b6e      	ldr	r3, [pc, #440]	; (3614 <m2m_wifi_cb+0x35c>)
    345c:	681b      	ldr	r3, [r3, #0]
    345e:	2b00      	cmp	r3, #0
    3460:	d100      	bne.n	3464 <m2m_wifi_cb+0x1ac>
    3462:	e0f8      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    3464:	4b6b      	ldr	r3, [pc, #428]	; (3614 <m2m_wifi_cb+0x35c>)
    3466:	681b      	ldr	r3, [r3, #0]
    3468:	2100      	movs	r1, #0
    346a:	2034      	movs	r0, #52	; 0x34
    346c:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    346e:	e0f2      	b.n	3656 <m2m_wifi_cb+0x39e>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    3470:	1dfb      	adds	r3, r7, #7
    3472:	781b      	ldrb	r3, [r3, #0]
    3474:	2b11      	cmp	r3, #17
    3476:	d11e      	bne.n	34b6 <m2m_wifi_cb+0x1fe>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    3478:	4b6c      	ldr	r3, [pc, #432]	; (362c <m2m_wifi_cb+0x374>)
    347a:	2200      	movs	r2, #0
    347c:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    347e:	237c      	movs	r3, #124	; 0x7c
    3480:	18f9      	adds	r1, r7, r3
    3482:	6838      	ldr	r0, [r7, #0]
    3484:	2300      	movs	r3, #0
    3486:	2204      	movs	r2, #4
    3488:	4c61      	ldr	r4, [pc, #388]	; (3610 <m2m_wifi_cb+0x358>)
    348a:	47a0      	blx	r4
    348c:	1e03      	subs	r3, r0, #0
    348e:	d000      	beq.n	3492 <m2m_wifi_cb+0x1da>
    3490:	e0e1      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			gu8ChNum = strState.u8NumofCh;
    3492:	237c      	movs	r3, #124	; 0x7c
    3494:	18fb      	adds	r3, r7, r3
    3496:	781a      	ldrb	r2, [r3, #0]
    3498:	4b65      	ldr	r3, [pc, #404]	; (3630 <m2m_wifi_cb+0x378>)
    349a:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    349c:	4b5d      	ldr	r3, [pc, #372]	; (3614 <m2m_wifi_cb+0x35c>)
    349e:	681b      	ldr	r3, [r3, #0]
    34a0:	2b00      	cmp	r3, #0
    34a2:	d100      	bne.n	34a6 <m2m_wifi_cb+0x1ee>
    34a4:	e0d7      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    34a6:	4b5b      	ldr	r3, [pc, #364]	; (3614 <m2m_wifi_cb+0x35c>)
    34a8:	681b      	ldr	r3, [r3, #0]
    34aa:	227c      	movs	r2, #124	; 0x7c
    34ac:	18ba      	adds	r2, r7, r2
    34ae:	0011      	movs	r1, r2
    34b0:	2011      	movs	r0, #17
    34b2:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    34b4:	e0cf      	b.n	3656 <m2m_wifi_cb+0x39e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    34b6:	1dfb      	adds	r3, r7, #7
    34b8:	781b      	ldrb	r3, [r3, #0]
    34ba:	2b13      	cmp	r3, #19
    34bc:	d116      	bne.n	34ec <m2m_wifi_cb+0x234>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    34be:	230c      	movs	r3, #12
    34c0:	18f9      	adds	r1, r7, r3
    34c2:	6838      	ldr	r0, [r7, #0]
    34c4:	2300      	movs	r3, #0
    34c6:	222c      	movs	r2, #44	; 0x2c
    34c8:	4c51      	ldr	r4, [pc, #324]	; (3610 <m2m_wifi_cb+0x358>)
    34ca:	47a0      	blx	r4
    34cc:	1e03      	subs	r3, r0, #0
    34ce:	d000      	beq.n	34d2 <m2m_wifi_cb+0x21a>
    34d0:	e0c1      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    34d2:	4b50      	ldr	r3, [pc, #320]	; (3614 <m2m_wifi_cb+0x35c>)
    34d4:	681b      	ldr	r3, [r3, #0]
    34d6:	2b00      	cmp	r3, #0
    34d8:	d100      	bne.n	34dc <m2m_wifi_cb+0x224>
    34da:	e0bc      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    34dc:	4b4d      	ldr	r3, [pc, #308]	; (3614 <m2m_wifi_cb+0x35c>)
    34de:	681b      	ldr	r3, [r3, #0]
    34e0:	220c      	movs	r2, #12
    34e2:	18ba      	adds	r2, r7, r2
    34e4:	0011      	movs	r1, r2
    34e6:	2013      	movs	r0, #19
    34e8:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    34ea:	e0b4      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    34ec:	1dfb      	adds	r3, r7, #7
    34ee:	781b      	ldrb	r3, [r3, #0]
    34f0:	2b04      	cmp	r3, #4
    34f2:	d116      	bne.n	3522 <m2m_wifi_cb+0x26a>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    34f4:	23a0      	movs	r3, #160	; 0xa0
    34f6:	18f9      	adds	r1, r7, r3
    34f8:	6838      	ldr	r0, [r7, #0]
    34fa:	2300      	movs	r3, #0
    34fc:	2204      	movs	r2, #4
    34fe:	4c44      	ldr	r4, [pc, #272]	; (3610 <m2m_wifi_cb+0x358>)
    3500:	47a0      	blx	r4
    3502:	1e03      	subs	r3, r0, #0
    3504:	d000      	beq.n	3508 <m2m_wifi_cb+0x250>
    3506:	e0a6      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    3508:	4b42      	ldr	r3, [pc, #264]	; (3614 <m2m_wifi_cb+0x35c>)
    350a:	681b      	ldr	r3, [r3, #0]
    350c:	2b00      	cmp	r3, #0
    350e:	d100      	bne.n	3512 <m2m_wifi_cb+0x25a>
    3510:	e0a1      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    3512:	4b40      	ldr	r3, [pc, #256]	; (3614 <m2m_wifi_cb+0x35c>)
    3514:	681b      	ldr	r3, [r3, #0]
    3516:	22a0      	movs	r2, #160	; 0xa0
    3518:	18ba      	adds	r2, r7, r2
    351a:	0011      	movs	r1, r2
    351c:	2004      	movs	r0, #4
    351e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3520:	e099      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    3522:	1dfb      	adds	r3, r7, #7
    3524:	781b      	ldrb	r3, [r3, #0]
    3526:	2b65      	cmp	r3, #101	; 0x65
    3528:	d116      	bne.n	3558 <m2m_wifi_cb+0x2a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    352a:	23a0      	movs	r3, #160	; 0xa0
    352c:	18f9      	adds	r1, r7, r3
    352e:	6838      	ldr	r0, [r7, #0]
    3530:	2300      	movs	r3, #0
    3532:	2204      	movs	r2, #4
    3534:	4c36      	ldr	r4, [pc, #216]	; (3610 <m2m_wifi_cb+0x358>)
    3536:	47a0      	blx	r4
    3538:	1e03      	subs	r3, r0, #0
    353a:	d000      	beq.n	353e <m2m_wifi_cb+0x286>
    353c:	e08b      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    353e:	4b35      	ldr	r3, [pc, #212]	; (3614 <m2m_wifi_cb+0x35c>)
    3540:	681b      	ldr	r3, [r3, #0]
    3542:	2b00      	cmp	r3, #0
    3544:	d100      	bne.n	3548 <m2m_wifi_cb+0x290>
    3546:	e086      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    3548:	4b32      	ldr	r3, [pc, #200]	; (3614 <m2m_wifi_cb+0x35c>)
    354a:	681b      	ldr	r3, [r3, #0]
    354c:	22a0      	movs	r2, #160	; 0xa0
    354e:	18ba      	adds	r2, r7, r2
    3550:	0011      	movs	r1, r2
    3552:	2065      	movs	r0, #101	; 0x65
    3554:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3556:	e07e      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    3558:	1dfb      	adds	r3, r7, #7
    355a:	781b      	ldrb	r3, [r3, #0]
    355c:	2b09      	cmp	r3, #9
    355e:	d116      	bne.n	358e <m2m_wifi_cb+0x2d6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    3560:	230c      	movs	r3, #12
    3562:	18f9      	adds	r1, r7, r3
    3564:	6838      	ldr	r0, [r7, #0]
    3566:	2301      	movs	r3, #1
    3568:	2264      	movs	r2, #100	; 0x64
    356a:	4c29      	ldr	r4, [pc, #164]	; (3610 <m2m_wifi_cb+0x358>)
    356c:	47a0      	blx	r4
    356e:	1e03      	subs	r3, r0, #0
    3570:	d000      	beq.n	3574 <m2m_wifi_cb+0x2bc>
    3572:	e070      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    3574:	4b27      	ldr	r3, [pc, #156]	; (3614 <m2m_wifi_cb+0x35c>)
    3576:	681b      	ldr	r3, [r3, #0]
    3578:	2b00      	cmp	r3, #0
    357a:	d100      	bne.n	357e <m2m_wifi_cb+0x2c6>
    357c:	e06b      	b.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    357e:	4b25      	ldr	r3, [pc, #148]	; (3614 <m2m_wifi_cb+0x35c>)
    3580:	681b      	ldr	r3, [r3, #0]
    3582:	220c      	movs	r2, #12
    3584:	18ba      	adds	r2, r7, r2
    3586:	0011      	movs	r1, r2
    3588:	2009      	movs	r0, #9
    358a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    358c:	e063      	b.n	3656 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    358e:	1dfb      	adds	r3, r7, #7
    3590:	781b      	ldrb	r3, [r3, #0]
    3592:	2b2a      	cmp	r3, #42	; 0x2a
    3594:	d114      	bne.n	35c0 <m2m_wifi_cb+0x308>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    3596:	2378      	movs	r3, #120	; 0x78
    3598:	18f9      	adds	r1, r7, r3
    359a:	6838      	ldr	r0, [r7, #0]
    359c:	2301      	movs	r3, #1
    359e:	2204      	movs	r2, #4
    35a0:	4c1b      	ldr	r4, [pc, #108]	; (3610 <m2m_wifi_cb+0x358>)
    35a2:	47a0      	blx	r4
    35a4:	1e03      	subs	r3, r0, #0
    35a6:	d156      	bne.n	3656 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    35a8:	4b1a      	ldr	r3, [pc, #104]	; (3614 <m2m_wifi_cb+0x35c>)
    35aa:	681b      	ldr	r3, [r3, #0]
    35ac:	2b00      	cmp	r3, #0
    35ae:	d052      	beq.n	3656 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    35b0:	4b18      	ldr	r3, [pc, #96]	; (3614 <m2m_wifi_cb+0x35c>)
    35b2:	681b      	ldr	r3, [r3, #0]
    35b4:	2278      	movs	r2, #120	; 0x78
    35b6:	18ba      	adds	r2, r7, r2
    35b8:	0011      	movs	r1, r2
    35ba:	202a      	movs	r0, #42	; 0x2a
    35bc:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    35be:	e04a      	b.n	3656 <m2m_wifi_cb+0x39e>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    35c0:	1dfb      	adds	r3, r7, #7
    35c2:	781b      	ldrb	r3, [r3, #0]
    35c4:	2b20      	cmp	r3, #32
    35c6:	d135      	bne.n	3634 <m2m_wifi_cb+0x37c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    35c8:	2370      	movs	r3, #112	; 0x70
    35ca:	18f9      	adds	r1, r7, r3
    35cc:	6838      	ldr	r0, [r7, #0]
    35ce:	2300      	movs	r3, #0
    35d0:	2208      	movs	r2, #8
    35d2:	4c0f      	ldr	r4, [pc, #60]	; (3610 <m2m_wifi_cb+0x358>)
    35d4:	47a0      	blx	r4
    35d6:	1e03      	subs	r3, r0, #0
    35d8:	d13d      	bne.n	3656 <m2m_wifi_cb+0x39e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    35da:	683b      	ldr	r3, [r7, #0]
    35dc:	3308      	adds	r3, #8
    35de:	0018      	movs	r0, r3
    35e0:	2370      	movs	r3, #112	; 0x70
    35e2:	18fb      	adds	r3, r7, r3
    35e4:	6819      	ldr	r1, [r3, #0]
    35e6:	2370      	movs	r3, #112	; 0x70
    35e8:	18fb      	adds	r3, r7, r3
    35ea:	889a      	ldrh	r2, [r3, #4]
    35ec:	2301      	movs	r3, #1
    35ee:	4c08      	ldr	r4, [pc, #32]	; (3610 <m2m_wifi_cb+0x358>)
    35f0:	47a0      	blx	r4
    35f2:	1e03      	subs	r3, r0, #0
    35f4:	d12f      	bne.n	3656 <m2m_wifi_cb+0x39e>
			{
				if(gpfAppWifiCb)
    35f6:	4b07      	ldr	r3, [pc, #28]	; (3614 <m2m_wifi_cb+0x35c>)
    35f8:	681b      	ldr	r3, [r3, #0]
    35fa:	2b00      	cmp	r3, #0
    35fc:	d02b      	beq.n	3656 <m2m_wifi_cb+0x39e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    35fe:	4b05      	ldr	r3, [pc, #20]	; (3614 <m2m_wifi_cb+0x35c>)
    3600:	681b      	ldr	r3, [r3, #0]
    3602:	2270      	movs	r2, #112	; 0x70
    3604:	18ba      	adds	r2, r7, r2
    3606:	0011      	movs	r1, r2
    3608:	2020      	movs	r0, #32
    360a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    360c:	e023      	b.n	3656 <m2m_wifi_cb+0x39e>
    360e:	46c0      	nop			; (mov r8, r8)
    3610:	00002ff9 	.word	0x00002ff9
    3614:	200000e0 	.word	0x200000e0
    3618:	0000243d 	.word	0x0000243d
    361c:	0001127c 	.word	0x0001127c
    3620:	0000fd31 	.word	0x0000fd31
    3624:	00011288 	.word	0x00011288
    3628:	0000fd65 	.word	0x0000fd65
    362c:	200000dd 	.word	0x200000dd
    3630:	200000dc 	.word	0x200000dc
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    3634:	2395      	movs	r3, #149	; 0x95
    3636:	005a      	lsls	r2, r3, #1
    3638:	4909      	ldr	r1, [pc, #36]	; (3660 <m2m_wifi_cb+0x3a8>)
    363a:	4b0a      	ldr	r3, [pc, #40]	; (3664 <m2m_wifi_cb+0x3ac>)
    363c:	0018      	movs	r0, r3
    363e:	4b0a      	ldr	r3, [pc, #40]	; (3668 <m2m_wifi_cb+0x3b0>)
    3640:	4798      	blx	r3
    3642:	1dfb      	adds	r3, r7, #7
    3644:	781a      	ldrb	r2, [r3, #0]
    3646:	4b09      	ldr	r3, [pc, #36]	; (366c <m2m_wifi_cb+0x3b4>)
    3648:	0011      	movs	r1, r2
    364a:	0018      	movs	r0, r3
    364c:	4b06      	ldr	r3, [pc, #24]	; (3668 <m2m_wifi_cb+0x3b0>)
    364e:	4798      	blx	r3
    3650:	200d      	movs	r0, #13
    3652:	4b07      	ldr	r3, [pc, #28]	; (3670 <m2m_wifi_cb+0x3b8>)
    3654:	4798      	blx	r3
	}
}
    3656:	46c0      	nop			; (mov r8, r8)
    3658:	46bd      	mov	sp, r7
    365a:	b02b      	add	sp, #172	; 0xac
    365c:	bd90      	pop	{r4, r7, pc}
    365e:	46c0      	nop			; (mov r8, r8)
    3660:	000115a0 	.word	0x000115a0
    3664:	000112a8 	.word	0x000112a8
    3668:	0000fd31 	.word	0x0000fd31
    366c:	000112bc 	.word	0x000112bc
    3670:	0000fd65 	.word	0x0000fd65

00003674 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    3674:	b590      	push	{r4, r7, lr}
    3676:	b08d      	sub	sp, #52	; 0x34
    3678:	af00      	add	r7, sp, #0
    367a:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    367c:	232f      	movs	r3, #47	; 0x2f
    367e:	18fb      	adds	r3, r7, r3
    3680:	2200      	movs	r2, #0
    3682:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    3684:	230b      	movs	r3, #11
    3686:	18fb      	adds	r3, r7, r3
    3688:	2201      	movs	r2, #1
    368a:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    368c:	687b      	ldr	r3, [r7, #4]
    368e:	2b00      	cmp	r3, #0
    3690:	d104      	bne.n	369c <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    3692:	232f      	movs	r3, #47	; 0x2f
    3694:	18fb      	adds	r3, r7, r3
    3696:	22f4      	movs	r2, #244	; 0xf4
    3698:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    369a:	e085      	b.n	37a8 <m2m_wifi_init+0x134>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    369c:	687b      	ldr	r3, [r7, #4]
    369e:	681a      	ldr	r2, [r3, #0]
    36a0:	4b45      	ldr	r3, [pc, #276]	; (37b8 <m2m_wifi_init+0x144>)
    36a2:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    36a4:	4b45      	ldr	r3, [pc, #276]	; (37bc <m2m_wifi_init+0x148>)
    36a6:	2200      	movs	r2, #0
    36a8:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    36aa:	232f      	movs	r3, #47	; 0x2f
    36ac:	18fc      	adds	r4, r7, r3
    36ae:	230b      	movs	r3, #11
    36b0:	18fb      	adds	r3, r7, r3
    36b2:	0018      	movs	r0, r3
    36b4:	4b42      	ldr	r3, [pc, #264]	; (37c0 <m2m_wifi_init+0x14c>)
    36b6:	4798      	blx	r3
    36b8:	0003      	movs	r3, r0
    36ba:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    36bc:	232f      	movs	r3, #47	; 0x2f
    36be:	18fb      	adds	r3, r7, r3
    36c0:	781b      	ldrb	r3, [r3, #0]
    36c2:	b25b      	sxtb	r3, r3
    36c4:	2b00      	cmp	r3, #0
    36c6:	d16c      	bne.n	37a2 <m2m_wifi_init+0x12e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    36c8:	232f      	movs	r3, #47	; 0x2f
    36ca:	18fc      	adds	r4, r7, r3
    36cc:	2000      	movs	r0, #0
    36ce:	4b3d      	ldr	r3, [pc, #244]	; (37c4 <m2m_wifi_init+0x150>)
    36d0:	4798      	blx	r3
    36d2:	0003      	movs	r3, r0
    36d4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    36d6:	232f      	movs	r3, #47	; 0x2f
    36d8:	18fb      	adds	r3, r7, r3
    36da:	781b      	ldrb	r3, [r3, #0]
    36dc:	b25b      	sxtb	r3, r3
    36de:	2b00      	cmp	r3, #0
    36e0:	d15a      	bne.n	3798 <m2m_wifi_init+0x124>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    36e2:	4b39      	ldr	r3, [pc, #228]	; (37c8 <m2m_wifi_init+0x154>)
    36e4:	0019      	movs	r1, r3
    36e6:	2001      	movs	r0, #1
    36e8:	4b38      	ldr	r3, [pc, #224]	; (37cc <m2m_wifi_init+0x158>)
    36ea:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
    36ec:	232f      	movs	r3, #47	; 0x2f
    36ee:	18fc      	adds	r4, r7, r3
    36f0:	230c      	movs	r3, #12
    36f2:	18fb      	adds	r3, r7, r3
    36f4:	0018      	movs	r0, r3
    36f6:	4b36      	ldr	r3, [pc, #216]	; (37d0 <m2m_wifi_init+0x15c>)
    36f8:	4798      	blx	r3
    36fa:	0003      	movs	r3, r0
    36fc:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    36fe:	4b35      	ldr	r3, [pc, #212]	; (37d4 <m2m_wifi_init+0x160>)
    3700:	0018      	movs	r0, r3
    3702:	4b35      	ldr	r3, [pc, #212]	; (37d8 <m2m_wifi_init+0x164>)
    3704:	4798      	blx	r3
    3706:	230c      	movs	r3, #12
    3708:	18fb      	adds	r3, r7, r3
    370a:	791b      	ldrb	r3, [r3, #4]
    370c:	0019      	movs	r1, r3
    370e:	230c      	movs	r3, #12
    3710:	18fb      	adds	r3, r7, r3
    3712:	795b      	ldrb	r3, [r3, #5]
    3714:	001a      	movs	r2, r3
    3716:	230c      	movs	r3, #12
    3718:	18fb      	adds	r3, r7, r3
    371a:	799b      	ldrb	r3, [r3, #6]
    371c:	482f      	ldr	r0, [pc, #188]	; (37dc <m2m_wifi_init+0x168>)
    371e:	4c2e      	ldr	r4, [pc, #184]	; (37d8 <m2m_wifi_init+0x164>)
    3720:	47a0      	blx	r4
    3722:	200d      	movs	r0, #13
    3724:	4b2e      	ldr	r3, [pc, #184]	; (37e0 <m2m_wifi_init+0x16c>)
    3726:	4798      	blx	r3
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    3728:	4b2a      	ldr	r3, [pc, #168]	; (37d4 <m2m_wifi_init+0x160>)
    372a:	0018      	movs	r0, r3
    372c:	4b2a      	ldr	r3, [pc, #168]	; (37d8 <m2m_wifi_init+0x164>)
    372e:	4798      	blx	r3
    3730:	230c      	movs	r3, #12
    3732:	18fb      	adds	r3, r7, r3
    3734:	79db      	ldrb	r3, [r3, #7]
    3736:	0019      	movs	r1, r3
    3738:	230c      	movs	r3, #12
    373a:	18fb      	adds	r3, r7, r3
    373c:	7a1b      	ldrb	r3, [r3, #8]
    373e:	001a      	movs	r2, r3
    3740:	230c      	movs	r3, #12
    3742:	18fb      	adds	r3, r7, r3
    3744:	7a5b      	ldrb	r3, [r3, #9]
    3746:	4827      	ldr	r0, [pc, #156]	; (37e4 <m2m_wifi_init+0x170>)
    3748:	4c23      	ldr	r4, [pc, #140]	; (37d8 <m2m_wifi_init+0x164>)
    374a:	47a0      	blx	r4
    374c:	200d      	movs	r0, #13
    374e:	4b24      	ldr	r3, [pc, #144]	; (37e0 <m2m_wifi_init+0x16c>)
    3750:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    3752:	4b20      	ldr	r3, [pc, #128]	; (37d4 <m2m_wifi_init+0x160>)
    3754:	0018      	movs	r0, r3
    3756:	4b20      	ldr	r3, [pc, #128]	; (37d8 <m2m_wifi_init+0x164>)
    3758:	4798      	blx	r3
    375a:	4823      	ldr	r0, [pc, #140]	; (37e8 <m2m_wifi_init+0x174>)
    375c:	2300      	movs	r3, #0
    375e:	2203      	movs	r2, #3
    3760:	2113      	movs	r1, #19
    3762:	4c1d      	ldr	r4, [pc, #116]	; (37d8 <m2m_wifi_init+0x164>)
    3764:	47a0      	blx	r4
    3766:	200d      	movs	r0, #13
    3768:	4b1d      	ldr	r3, [pc, #116]	; (37e0 <m2m_wifi_init+0x16c>)
    376a:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    376c:	232f      	movs	r3, #47	; 0x2f
    376e:	18fb      	adds	r3, r7, r3
    3770:	781b      	ldrb	r3, [r3, #0]
    3772:	b25b      	sxtb	r3, r3
    3774:	330d      	adds	r3, #13
    3776:	d116      	bne.n	37a6 <m2m_wifi_init+0x132>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    3778:	23d6      	movs	r3, #214	; 0xd6
    377a:	33ff      	adds	r3, #255	; 0xff
    377c:	001a      	movs	r2, r3
    377e:	491b      	ldr	r1, [pc, #108]	; (37ec <m2m_wifi_init+0x178>)
    3780:	4b1b      	ldr	r3, [pc, #108]	; (37f0 <m2m_wifi_init+0x17c>)
    3782:	0018      	movs	r0, r3
    3784:	4b14      	ldr	r3, [pc, #80]	; (37d8 <m2m_wifi_init+0x164>)
    3786:	4798      	blx	r3
    3788:	4b1a      	ldr	r3, [pc, #104]	; (37f4 <m2m_wifi_init+0x180>)
    378a:	0018      	movs	r0, r3
    378c:	4b1a      	ldr	r3, [pc, #104]	; (37f8 <m2m_wifi_init+0x184>)
    378e:	4798      	blx	r3
    3790:	200d      	movs	r0, #13
    3792:	4b13      	ldr	r3, [pc, #76]	; (37e0 <m2m_wifi_init+0x16c>)
    3794:	4798      	blx	r3
	}

	goto _EXIT0;
    3796:	e006      	b.n	37a6 <m2m_wifi_init+0x132>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    3798:	46c0      	nop			; (mov r8, r8)
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    379a:	2000      	movs	r0, #0
    379c:	4b17      	ldr	r3, [pc, #92]	; (37fc <m2m_wifi_init+0x188>)
    379e:	4798      	blx	r3
    37a0:	e002      	b.n	37a8 <m2m_wifi_init+0x134>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    37a2:	46c0      	nop			; (mov r8, r8)
    37a4:	e000      	b.n	37a8 <m2m_wifi_init+0x134>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    37a6:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    37a8:	232f      	movs	r3, #47	; 0x2f
    37aa:	18fb      	adds	r3, r7, r3
    37ac:	781b      	ldrb	r3, [r3, #0]
    37ae:	b25b      	sxtb	r3, r3
}
    37b0:	0018      	movs	r0, r3
    37b2:	46bd      	mov	sp, r7
    37b4:	b00d      	add	sp, #52	; 0x34
    37b6:	bd90      	pop	{r4, r7, pc}
    37b8:	200000e0 	.word	0x200000e0
    37bc:	200000dd 	.word	0x200000dd
    37c0:	00004af9 	.word	0x00004af9
    37c4:	000027b1 	.word	0x000027b1
    37c8:	000032b9 	.word	0x000032b9
    37cc:	000031f1 	.word	0x000031f1
    37d0:	00004991 	.word	0x00004991
    37d4:	0001127c 	.word	0x0001127c
    37d8:	0000fd31 	.word	0x0000fd31
    37dc:	000113e4 	.word	0x000113e4
    37e0:	0000fd65 	.word	0x0000fd65
    37e4:	00011400 	.word	0x00011400
    37e8:	0001141c 	.word	0x0001141c
    37ec:	000115ac 	.word	0x000115ac
    37f0:	000112a8 	.word	0x000112a8
    37f4:	00011438 	.word	0x00011438
    37f8:	0000fe51 	.word	0x0000fe51
    37fc:	00004c89 	.word	0x00004c89

00003800 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    3800:	b580      	push	{r7, lr}
    3802:	b082      	sub	sp, #8
    3804:	af00      	add	r7, sp, #0
    3806:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    3808:	4b03      	ldr	r3, [pc, #12]	; (3818 <m2m_wifi_handle_events+0x18>)
    380a:	4798      	blx	r3
    380c:	0003      	movs	r3, r0
}
    380e:	0018      	movs	r0, r3
    3810:	46bd      	mov	sp, r7
    3812:	b002      	add	sp, #8
    3814:	bd80      	pop	{r7, pc}
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	00002f69 	.word	0x00002f69

0000381c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    381c:	b590      	push	{r4, r7, lr}
    381e:	b087      	sub	sp, #28
    3820:	af02      	add	r7, sp, #8
    3822:	60f8      	str	r0, [r7, #12]
    3824:	0008      	movs	r0, r1
    3826:	0011      	movs	r1, r2
    3828:	607b      	str	r3, [r7, #4]
    382a:	230b      	movs	r3, #11
    382c:	18fb      	adds	r3, r7, r3
    382e:	1c02      	adds	r2, r0, #0
    3830:	701a      	strb	r2, [r3, #0]
    3832:	230a      	movs	r3, #10
    3834:	18fb      	adds	r3, r7, r3
    3836:	1c0a      	adds	r2, r1, #0
    3838:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    383a:	687c      	ldr	r4, [r7, #4]
    383c:	230a      	movs	r3, #10
    383e:	18fb      	adds	r3, r7, r3
    3840:	781a      	ldrb	r2, [r3, #0]
    3842:	230b      	movs	r3, #11
    3844:	18fb      	adds	r3, r7, r3
    3846:	7819      	ldrb	r1, [r3, #0]
    3848:	68f8      	ldr	r0, [r7, #12]
    384a:	2300      	movs	r3, #0
    384c:	9301      	str	r3, [sp, #4]
    384e:	2320      	movs	r3, #32
    3850:	18fb      	adds	r3, r7, r3
    3852:	881b      	ldrh	r3, [r3, #0]
    3854:	9300      	str	r3, [sp, #0]
    3856:	0023      	movs	r3, r4
    3858:	4c03      	ldr	r4, [pc, #12]	; (3868 <m2m_wifi_connect+0x4c>)
    385a:	47a0      	blx	r4
    385c:	0003      	movs	r3, r0
}
    385e:	0018      	movs	r0, r3
    3860:	46bd      	mov	sp, r7
    3862:	b005      	add	sp, #20
    3864:	bd90      	pop	{r4, r7, pc}
    3866:	46c0      	nop			; (mov r8, r8)
    3868:	0000386d 	.word	0x0000386d

0000386c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    386c:	b5b0      	push	{r4, r5, r7, lr}
    386e:	b0aa      	sub	sp, #168	; 0xa8
    3870:	af04      	add	r7, sp, #16
    3872:	60f8      	str	r0, [r7, #12]
    3874:	0008      	movs	r0, r1
    3876:	0011      	movs	r1, r2
    3878:	607b      	str	r3, [r7, #4]
    387a:	230b      	movs	r3, #11
    387c:	18fb      	adds	r3, r7, r3
    387e:	1c02      	adds	r2, r0, #0
    3880:	701a      	strb	r2, [r3, #0]
    3882:	230a      	movs	r3, #10
    3884:	18fb      	adds	r3, r7, r3
    3886:	1c0a      	adds	r2, r1, #0
    3888:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    388a:	2397      	movs	r3, #151	; 0x97
    388c:	18fb      	adds	r3, r7, r3
    388e:	2200      	movs	r2, #0
    3890:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    3892:	230a      	movs	r3, #10
    3894:	18fb      	adds	r3, r7, r3
    3896:	781b      	ldrb	r3, [r3, #0]
    3898:	2b01      	cmp	r3, #1
    389a:	d100      	bne.n	389e <m2m_wifi_connect_sc+0x32>
    389c:	e083      	b.n	39a6 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    389e:	687b      	ldr	r3, [r7, #4]
    38a0:	2b00      	cmp	r3, #0
    38a2:	d111      	bne.n	38c8 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    38a4:	4ad8      	ldr	r2, [pc, #864]	; (3c08 <m2m_wifi_connect_sc+0x39c>)
    38a6:	49d9      	ldr	r1, [pc, #868]	; (3c0c <m2m_wifi_connect_sc+0x3a0>)
    38a8:	4bd9      	ldr	r3, [pc, #868]	; (3c10 <m2m_wifi_connect_sc+0x3a4>)
    38aa:	0018      	movs	r0, r3
    38ac:	4bd9      	ldr	r3, [pc, #868]	; (3c14 <m2m_wifi_connect_sc+0x3a8>)
    38ae:	4798      	blx	r3
    38b0:	4bd9      	ldr	r3, [pc, #868]	; (3c18 <m2m_wifi_connect_sc+0x3ac>)
    38b2:	0018      	movs	r0, r3
    38b4:	4bd9      	ldr	r3, [pc, #868]	; (3c1c <m2m_wifi_connect_sc+0x3b0>)
    38b6:	4798      	blx	r3
    38b8:	200d      	movs	r0, #13
    38ba:	4bd9      	ldr	r3, [pc, #868]	; (3c20 <m2m_wifi_connect_sc+0x3b4>)
    38bc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    38be:	2397      	movs	r3, #151	; 0x97
    38c0:	18fb      	adds	r3, r7, r3
    38c2:	22f4      	movs	r2, #244	; 0xf4
    38c4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    38c6:	e1ef      	b.n	3ca8 <m2m_wifi_connect_sc+0x43c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    38c8:	230a      	movs	r3, #10
    38ca:	18fb      	adds	r3, r7, r3
    38cc:	781b      	ldrb	r3, [r3, #0]
    38ce:	2b02      	cmp	r3, #2
    38d0:	d169      	bne.n	39a6 <m2m_wifi_connect_sc+0x13a>
    38d2:	687b      	ldr	r3, [r7, #4]
    38d4:	0018      	movs	r0, r3
    38d6:	4bd3      	ldr	r3, [pc, #844]	; (3c24 <m2m_wifi_connect_sc+0x3b8>)
    38d8:	4798      	blx	r3
    38da:	1e03      	subs	r3, r0, #0
    38dc:	2b40      	cmp	r3, #64	; 0x40
    38de:	d162      	bne.n	39a6 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    38e0:	2396      	movs	r3, #150	; 0x96
    38e2:	18fb      	adds	r3, r7, r3
    38e4:	2200      	movs	r2, #0
    38e6:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    38e8:	687b      	ldr	r3, [r7, #4]
    38ea:	2290      	movs	r2, #144	; 0x90
    38ec:	18ba      	adds	r2, r7, r2
    38ee:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    38f0:	e054      	b.n	399c <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    38f2:	2396      	movs	r3, #150	; 0x96
    38f4:	18fb      	adds	r3, r7, r3
    38f6:	781b      	ldrb	r3, [r3, #0]
    38f8:	2290      	movs	r2, #144	; 0x90
    38fa:	18ba      	adds	r2, r7, r2
    38fc:	6812      	ldr	r2, [r2, #0]
    38fe:	18d3      	adds	r3, r2, r3
    3900:	781b      	ldrb	r3, [r3, #0]
    3902:	2b2f      	cmp	r3, #47	; 0x2f
    3904:	d931      	bls.n	396a <m2m_wifi_connect_sc+0xfe>
    3906:	2396      	movs	r3, #150	; 0x96
    3908:	18fb      	adds	r3, r7, r3
    390a:	781b      	ldrb	r3, [r3, #0]
    390c:	2290      	movs	r2, #144	; 0x90
    390e:	18ba      	adds	r2, r7, r2
    3910:	6812      	ldr	r2, [r2, #0]
    3912:	18d3      	adds	r3, r2, r3
    3914:	781b      	ldrb	r3, [r3, #0]
    3916:	2b39      	cmp	r3, #57	; 0x39
    3918:	d909      	bls.n	392e <m2m_wifi_connect_sc+0xc2>
    391a:	2396      	movs	r3, #150	; 0x96
    391c:	18fb      	adds	r3, r7, r3
    391e:	781b      	ldrb	r3, [r3, #0]
    3920:	2290      	movs	r2, #144	; 0x90
    3922:	18ba      	adds	r2, r7, r2
    3924:	6812      	ldr	r2, [r2, #0]
    3926:	18d3      	adds	r3, r2, r3
    3928:	781b      	ldrb	r3, [r3, #0]
    392a:	2b40      	cmp	r3, #64	; 0x40
    392c:	d91d      	bls.n	396a <m2m_wifi_connect_sc+0xfe>
    392e:	2396      	movs	r3, #150	; 0x96
    3930:	18fb      	adds	r3, r7, r3
    3932:	781b      	ldrb	r3, [r3, #0]
    3934:	2290      	movs	r2, #144	; 0x90
    3936:	18ba      	adds	r2, r7, r2
    3938:	6812      	ldr	r2, [r2, #0]
    393a:	18d3      	adds	r3, r2, r3
    393c:	781b      	ldrb	r3, [r3, #0]
    393e:	2b46      	cmp	r3, #70	; 0x46
    3940:	d909      	bls.n	3956 <m2m_wifi_connect_sc+0xea>
    3942:	2396      	movs	r3, #150	; 0x96
    3944:	18fb      	adds	r3, r7, r3
    3946:	781b      	ldrb	r3, [r3, #0]
    3948:	2290      	movs	r2, #144	; 0x90
    394a:	18ba      	adds	r2, r7, r2
    394c:	6812      	ldr	r2, [r2, #0]
    394e:	18d3      	adds	r3, r2, r3
    3950:	781b      	ldrb	r3, [r3, #0]
    3952:	2b60      	cmp	r3, #96	; 0x60
    3954:	d909      	bls.n	396a <m2m_wifi_connect_sc+0xfe>
    3956:	2396      	movs	r3, #150	; 0x96
    3958:	18fb      	adds	r3, r7, r3
    395a:	781b      	ldrb	r3, [r3, #0]
    395c:	2290      	movs	r2, #144	; 0x90
    395e:	18ba      	adds	r2, r7, r2
    3960:	6812      	ldr	r2, [r2, #0]
    3962:	18d3      	adds	r3, r2, r3
    3964:	781b      	ldrb	r3, [r3, #0]
    3966:	2b66      	cmp	r3, #102	; 0x66
    3968:	d911      	bls.n	398e <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    396a:	4aaf      	ldr	r2, [pc, #700]	; (3c28 <m2m_wifi_connect_sc+0x3bc>)
    396c:	49a7      	ldr	r1, [pc, #668]	; (3c0c <m2m_wifi_connect_sc+0x3a0>)
    396e:	4ba8      	ldr	r3, [pc, #672]	; (3c10 <m2m_wifi_connect_sc+0x3a4>)
    3970:	0018      	movs	r0, r3
    3972:	4ba8      	ldr	r3, [pc, #672]	; (3c14 <m2m_wifi_connect_sc+0x3a8>)
    3974:	4798      	blx	r3
    3976:	4bad      	ldr	r3, [pc, #692]	; (3c2c <m2m_wifi_connect_sc+0x3c0>)
    3978:	0018      	movs	r0, r3
    397a:	4ba8      	ldr	r3, [pc, #672]	; (3c1c <m2m_wifi_connect_sc+0x3b0>)
    397c:	4798      	blx	r3
    397e:	200d      	movs	r0, #13
    3980:	4ba7      	ldr	r3, [pc, #668]	; (3c20 <m2m_wifi_connect_sc+0x3b4>)
    3982:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    3984:	2397      	movs	r3, #151	; 0x97
    3986:	18fb      	adds	r3, r7, r3
    3988:	22f4      	movs	r2, #244	; 0xf4
    398a:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    398c:	e18c      	b.n	3ca8 <m2m_wifi_connect_sc+0x43c>
				}
				i++;
    398e:	2396      	movs	r3, #150	; 0x96
    3990:	18fb      	adds	r3, r7, r3
    3992:	781a      	ldrb	r2, [r3, #0]
    3994:	2396      	movs	r3, #150	; 0x96
    3996:	18fb      	adds	r3, r7, r3
    3998:	3201      	adds	r2, #1
    399a:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    399c:	2396      	movs	r3, #150	; 0x96
    399e:	18fb      	adds	r3, r7, r3
    39a0:	781b      	ldrb	r3, [r3, #0]
    39a2:	2b3f      	cmp	r3, #63	; 0x3f
    39a4:	d9a5      	bls.n	38f2 <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    39a6:	230b      	movs	r3, #11
    39a8:	18fb      	adds	r3, r7, r3
    39aa:	781b      	ldrb	r3, [r3, #0]
    39ac:	2b00      	cmp	r3, #0
    39ae:	d004      	beq.n	39ba <m2m_wifi_connect_sc+0x14e>
    39b0:	230b      	movs	r3, #11
    39b2:	18fb      	adds	r3, r7, r3
    39b4:	781b      	ldrb	r3, [r3, #0]
    39b6:	2b20      	cmp	r3, #32
    39b8:	d911      	bls.n	39de <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    39ba:	4a9d      	ldr	r2, [pc, #628]	; (3c30 <m2m_wifi_connect_sc+0x3c4>)
    39bc:	4993      	ldr	r1, [pc, #588]	; (3c0c <m2m_wifi_connect_sc+0x3a0>)
    39be:	4b94      	ldr	r3, [pc, #592]	; (3c10 <m2m_wifi_connect_sc+0x3a4>)
    39c0:	0018      	movs	r0, r3
    39c2:	4b94      	ldr	r3, [pc, #592]	; (3c14 <m2m_wifi_connect_sc+0x3a8>)
    39c4:	4798      	blx	r3
    39c6:	4b9b      	ldr	r3, [pc, #620]	; (3c34 <m2m_wifi_connect_sc+0x3c8>)
    39c8:	0018      	movs	r0, r3
    39ca:	4b94      	ldr	r3, [pc, #592]	; (3c1c <m2m_wifi_connect_sc+0x3b0>)
    39cc:	4798      	blx	r3
    39ce:	200d      	movs	r0, #13
    39d0:	4b93      	ldr	r3, [pc, #588]	; (3c20 <m2m_wifi_connect_sc+0x3b4>)
    39d2:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    39d4:	2397      	movs	r3, #151	; 0x97
    39d6:	18fb      	adds	r3, r7, r3
    39d8:	22f4      	movs	r2, #244	; 0xf4
    39da:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    39dc:	e164      	b.n	3ca8 <m2m_wifi_connect_sc+0x43c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    39de:	23a8      	movs	r3, #168	; 0xa8
    39e0:	18fb      	adds	r3, r7, r3
    39e2:	881b      	ldrh	r3, [r3, #0]
    39e4:	2b0d      	cmp	r3, #13
    39e6:	d916      	bls.n	3a16 <m2m_wifi_connect_sc+0x1aa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    39e8:	23a8      	movs	r3, #168	; 0xa8
    39ea:	18fb      	adds	r3, r7, r3
    39ec:	881b      	ldrh	r3, [r3, #0]
    39ee:	2bff      	cmp	r3, #255	; 0xff
    39f0:	d011      	beq.n	3a16 <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("CH INVALID\n");
    39f2:	4a91      	ldr	r2, [pc, #580]	; (3c38 <m2m_wifi_connect_sc+0x3cc>)
    39f4:	4985      	ldr	r1, [pc, #532]	; (3c0c <m2m_wifi_connect_sc+0x3a0>)
    39f6:	4b86      	ldr	r3, [pc, #536]	; (3c10 <m2m_wifi_connect_sc+0x3a4>)
    39f8:	0018      	movs	r0, r3
    39fa:	4b86      	ldr	r3, [pc, #536]	; (3c14 <m2m_wifi_connect_sc+0x3a8>)
    39fc:	4798      	blx	r3
    39fe:	4b8f      	ldr	r3, [pc, #572]	; (3c3c <m2m_wifi_connect_sc+0x3d0>)
    3a00:	0018      	movs	r0, r3
    3a02:	4b86      	ldr	r3, [pc, #536]	; (3c1c <m2m_wifi_connect_sc+0x3b0>)
    3a04:	4798      	blx	r3
    3a06:	200d      	movs	r0, #13
    3a08:	4b85      	ldr	r3, [pc, #532]	; (3c20 <m2m_wifi_connect_sc+0x3b4>)
    3a0a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3a0c:	2397      	movs	r3, #151	; 0x97
    3a0e:	18fb      	adds	r3, r7, r3
    3a10:	22f4      	movs	r2, #244	; 0xf4
    3a12:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3a14:	e148      	b.n	3ca8 <m2m_wifi_connect_sc+0x43c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    3a16:	230b      	movs	r3, #11
    3a18:	18fb      	adds	r3, r7, r3
    3a1a:	781a      	ldrb	r2, [r3, #0]
    3a1c:	68f9      	ldr	r1, [r7, #12]
    3a1e:	2314      	movs	r3, #20
    3a20:	18fb      	adds	r3, r7, r3
    3a22:	3346      	adds	r3, #70	; 0x46
    3a24:	0018      	movs	r0, r3
    3a26:	4b86      	ldr	r3, [pc, #536]	; (3c40 <m2m_wifi_connect_sc+0x3d4>)
    3a28:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    3a2a:	230b      	movs	r3, #11
    3a2c:	18fb      	adds	r3, r7, r3
    3a2e:	781b      	ldrb	r3, [r3, #0]
    3a30:	2214      	movs	r2, #20
    3a32:	18ba      	adds	r2, r7, r2
    3a34:	2146      	movs	r1, #70	; 0x46
    3a36:	18d3      	adds	r3, r2, r3
    3a38:	185b      	adds	r3, r3, r1
    3a3a:	2200      	movs	r2, #0
    3a3c:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    3a3e:	2314      	movs	r3, #20
    3a40:	18fb      	adds	r3, r7, r3
    3a42:	22a8      	movs	r2, #168	; 0xa8
    3a44:	18ba      	adds	r2, r7, r2
    3a46:	2144      	movs	r1, #68	; 0x44
    3a48:	8812      	ldrh	r2, [r2, #0]
    3a4a:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    3a4c:	23ac      	movs	r3, #172	; 0xac
    3a4e:	18fb      	adds	r3, r7, r3
    3a50:	781b      	ldrb	r3, [r3, #0]
    3a52:	1e5a      	subs	r2, r3, #1
    3a54:	4193      	sbcs	r3, r2
    3a56:	b2db      	uxtb	r3, r3
    3a58:	0019      	movs	r1, r3
    3a5a:	2314      	movs	r3, #20
    3a5c:	18fb      	adds	r3, r7, r3
    3a5e:	2267      	movs	r2, #103	; 0x67
    3a60:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    3a62:	2314      	movs	r3, #20
    3a64:	18fb      	adds	r3, r7, r3
    3a66:	228c      	movs	r2, #140	; 0x8c
    3a68:	18ba      	adds	r2, r7, r2
    3a6a:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    3a6c:	238c      	movs	r3, #140	; 0x8c
    3a6e:	18fb      	adds	r3, r7, r3
    3a70:	681b      	ldr	r3, [r3, #0]
    3a72:	220a      	movs	r2, #10
    3a74:	18ba      	adds	r2, r7, r2
    3a76:	2141      	movs	r1, #65	; 0x41
    3a78:	7812      	ldrb	r2, [r2, #0]
    3a7a:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    3a7c:	230a      	movs	r3, #10
    3a7e:	18fb      	adds	r3, r7, r3
    3a80:	781b      	ldrb	r3, [r3, #0]
    3a82:	2b03      	cmp	r3, #3
    3a84:	d000      	beq.n	3a88 <m2m_wifi_connect_sc+0x21c>
    3a86:	e07b      	b.n	3b80 <m2m_wifi_connect_sc+0x314>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    3a88:	687b      	ldr	r3, [r7, #4]
    3a8a:	2288      	movs	r2, #136	; 0x88
    3a8c:	18ba      	adds	r2, r7, r2
    3a8e:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    3a90:	238c      	movs	r3, #140	; 0x8c
    3a92:	18fb      	adds	r3, r7, r3
    3a94:	681b      	ldr	r3, [r3, #0]
    3a96:	2284      	movs	r2, #132	; 0x84
    3a98:	18ba      	adds	r2, r7, r2
    3a9a:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    3a9c:	2388      	movs	r3, #136	; 0x88
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	681b      	ldr	r3, [r3, #0]
    3aa2:	781b      	ldrb	r3, [r3, #0]
    3aa4:	3b01      	subs	r3, #1
    3aa6:	b2da      	uxtb	r2, r3
    3aa8:	2384      	movs	r3, #132	; 0x84
    3aaa:	18fb      	adds	r3, r7, r3
    3aac:	681b      	ldr	r3, [r3, #0]
    3aae:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    3ab0:	2384      	movs	r3, #132	; 0x84
    3ab2:	18fb      	adds	r3, r7, r3
    3ab4:	681b      	ldr	r3, [r3, #0]
    3ab6:	781b      	ldrb	r3, [r3, #0]
    3ab8:	2b03      	cmp	r3, #3
    3aba:	d917      	bls.n	3aec <m2m_wifi_connect_sc+0x280>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    3abc:	4a61      	ldr	r2, [pc, #388]	; (3c44 <m2m_wifi_connect_sc+0x3d8>)
    3abe:	4953      	ldr	r1, [pc, #332]	; (3c0c <m2m_wifi_connect_sc+0x3a0>)
    3ac0:	4b53      	ldr	r3, [pc, #332]	; (3c10 <m2m_wifi_connect_sc+0x3a4>)
    3ac2:	0018      	movs	r0, r3
    3ac4:	4b53      	ldr	r3, [pc, #332]	; (3c14 <m2m_wifi_connect_sc+0x3a8>)
    3ac6:	4798      	blx	r3
    3ac8:	2384      	movs	r3, #132	; 0x84
    3aca:	18fb      	adds	r3, r7, r3
    3acc:	681b      	ldr	r3, [r3, #0]
    3ace:	781b      	ldrb	r3, [r3, #0]
    3ad0:	001a      	movs	r2, r3
    3ad2:	4b5d      	ldr	r3, [pc, #372]	; (3c48 <m2m_wifi_connect_sc+0x3dc>)
    3ad4:	0011      	movs	r1, r2
    3ad6:	0018      	movs	r0, r3
    3ad8:	4b4e      	ldr	r3, [pc, #312]	; (3c14 <m2m_wifi_connect_sc+0x3a8>)
    3ada:	4798      	blx	r3
    3adc:	200d      	movs	r0, #13
    3ade:	4b50      	ldr	r3, [pc, #320]	; (3c20 <m2m_wifi_connect_sc+0x3b4>)
    3ae0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3ae2:	2397      	movs	r3, #151	; 0x97
    3ae4:	18fb      	adds	r3, r7, r3
    3ae6:	22f4      	movs	r2, #244	; 0xf4
    3ae8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3aea:	e0dd      	b.n	3ca8 <m2m_wifi_connect_sc+0x43c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    3aec:	2388      	movs	r3, #136	; 0x88
    3aee:	18fb      	adds	r3, r7, r3
    3af0:	681b      	ldr	r3, [r3, #0]
    3af2:	785b      	ldrb	r3, [r3, #1]
    3af4:	3b01      	subs	r3, #1
    3af6:	b2da      	uxtb	r2, r3
    3af8:	2384      	movs	r3, #132	; 0x84
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	681b      	ldr	r3, [r3, #0]
    3afe:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    3b00:	2384      	movs	r3, #132	; 0x84
    3b02:	18fb      	adds	r3, r7, r3
    3b04:	681b      	ldr	r3, [r3, #0]
    3b06:	785b      	ldrb	r3, [r3, #1]
    3b08:	2b0a      	cmp	r3, #10
    3b0a:	d01e      	beq.n	3b4a <m2m_wifi_connect_sc+0x2de>
    3b0c:	2384      	movs	r3, #132	; 0x84
    3b0e:	18fb      	adds	r3, r7, r3
    3b10:	681b      	ldr	r3, [r3, #0]
    3b12:	785b      	ldrb	r3, [r3, #1]
    3b14:	2b1a      	cmp	r3, #26
    3b16:	d018      	beq.n	3b4a <m2m_wifi_connect_sc+0x2de>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    3b18:	2390      	movs	r3, #144	; 0x90
    3b1a:	009a      	lsls	r2, r3, #2
    3b1c:	493b      	ldr	r1, [pc, #236]	; (3c0c <m2m_wifi_connect_sc+0x3a0>)
    3b1e:	4b3c      	ldr	r3, [pc, #240]	; (3c10 <m2m_wifi_connect_sc+0x3a4>)
    3b20:	0018      	movs	r0, r3
    3b22:	4b3c      	ldr	r3, [pc, #240]	; (3c14 <m2m_wifi_connect_sc+0x3a8>)
    3b24:	4798      	blx	r3
    3b26:	2384      	movs	r3, #132	; 0x84
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	681b      	ldr	r3, [r3, #0]
    3b2c:	785b      	ldrb	r3, [r3, #1]
    3b2e:	001a      	movs	r2, r3
    3b30:	4b46      	ldr	r3, [pc, #280]	; (3c4c <m2m_wifi_connect_sc+0x3e0>)
    3b32:	0011      	movs	r1, r2
    3b34:	0018      	movs	r0, r3
    3b36:	4b37      	ldr	r3, [pc, #220]	; (3c14 <m2m_wifi_connect_sc+0x3a8>)
    3b38:	4798      	blx	r3
    3b3a:	200d      	movs	r0, #13
    3b3c:	4b38      	ldr	r3, [pc, #224]	; (3c20 <m2m_wifi_connect_sc+0x3b4>)
    3b3e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3b40:	2397      	movs	r3, #151	; 0x97
    3b42:	18fb      	adds	r3, r7, r3
    3b44:	22f4      	movs	r2, #244	; 0xf4
    3b46:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3b48:	e0ae      	b.n	3ca8 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    3b4a:	2384      	movs	r3, #132	; 0x84
    3b4c:	18fb      	adds	r3, r7, r3
    3b4e:	681b      	ldr	r3, [r3, #0]
    3b50:	1c98      	adds	r0, r3, #2
    3b52:	2388      	movs	r3, #136	; 0x88
    3b54:	18fb      	adds	r3, r7, r3
    3b56:	681b      	ldr	r3, [r3, #0]
    3b58:	1c99      	adds	r1, r3, #2
    3b5a:	2388      	movs	r3, #136	; 0x88
    3b5c:	18fb      	adds	r3, r7, r3
    3b5e:	681b      	ldr	r3, [r3, #0]
    3b60:	785b      	ldrb	r3, [r3, #1]
    3b62:	001a      	movs	r2, r3
    3b64:	4b36      	ldr	r3, [pc, #216]	; (3c40 <m2m_wifi_connect_sc+0x3d4>)
    3b66:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    3b68:	2388      	movs	r3, #136	; 0x88
    3b6a:	18fb      	adds	r3, r7, r3
    3b6c:	681b      	ldr	r3, [r3, #0]
    3b6e:	785b      	ldrb	r3, [r3, #1]
    3b70:	001a      	movs	r2, r3
    3b72:	2384      	movs	r3, #132	; 0x84
    3b74:	18fb      	adds	r3, r7, r3
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	189b      	adds	r3, r3, r2
    3b7a:	2200      	movs	r2, #0
    3b7c:	709a      	strb	r2, [r3, #2]
    3b7e:	e082      	b.n	3c86 <m2m_wifi_connect_sc+0x41a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    3b80:	230a      	movs	r3, #10
    3b82:	18fb      	adds	r3, r7, r3
    3b84:	781b      	ldrb	r3, [r3, #0]
    3b86:	2b02      	cmp	r3, #2
    3b88:	d130      	bne.n	3bec <m2m_wifi_connect_sc+0x380>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    3b8a:	2382      	movs	r3, #130	; 0x82
    3b8c:	18fc      	adds	r4, r7, r3
    3b8e:	687b      	ldr	r3, [r7, #4]
    3b90:	0018      	movs	r0, r3
    3b92:	4b24      	ldr	r3, [pc, #144]	; (3c24 <m2m_wifi_connect_sc+0x3b8>)
    3b94:	4798      	blx	r3
    3b96:	0003      	movs	r3, r0
    3b98:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    3b9a:	2382      	movs	r3, #130	; 0x82
    3b9c:	18fb      	adds	r3, r7, r3
    3b9e:	881b      	ldrh	r3, [r3, #0]
    3ba0:	2b00      	cmp	r3, #0
    3ba2:	d004      	beq.n	3bae <m2m_wifi_connect_sc+0x342>
    3ba4:	2382      	movs	r3, #130	; 0x82
    3ba6:	18fb      	adds	r3, r7, r3
    3ba8:	881b      	ldrh	r3, [r3, #0]
    3baa:	2b40      	cmp	r3, #64	; 0x40
    3bac:	d911      	bls.n	3bd2 <m2m_wifi_connect_sc+0x366>
		{
			M2M_ERR("Incorrect PSK key length\n");
    3bae:	4a28      	ldr	r2, [pc, #160]	; (3c50 <m2m_wifi_connect_sc+0x3e4>)
    3bb0:	4916      	ldr	r1, [pc, #88]	; (3c0c <m2m_wifi_connect_sc+0x3a0>)
    3bb2:	4b17      	ldr	r3, [pc, #92]	; (3c10 <m2m_wifi_connect_sc+0x3a4>)
    3bb4:	0018      	movs	r0, r3
    3bb6:	4b17      	ldr	r3, [pc, #92]	; (3c14 <m2m_wifi_connect_sc+0x3a8>)
    3bb8:	4798      	blx	r3
    3bba:	4b26      	ldr	r3, [pc, #152]	; (3c54 <m2m_wifi_connect_sc+0x3e8>)
    3bbc:	0018      	movs	r0, r3
    3bbe:	4b17      	ldr	r3, [pc, #92]	; (3c1c <m2m_wifi_connect_sc+0x3b0>)
    3bc0:	4798      	blx	r3
    3bc2:	200d      	movs	r0, #13
    3bc4:	4b16      	ldr	r3, [pc, #88]	; (3c20 <m2m_wifi_connect_sc+0x3b4>)
    3bc6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3bc8:	2397      	movs	r3, #151	; 0x97
    3bca:	18fb      	adds	r3, r7, r3
    3bcc:	22f4      	movs	r2, #244	; 0xf4
    3bce:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3bd0:	e06a      	b.n	3ca8 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    3bd2:	238c      	movs	r3, #140	; 0x8c
    3bd4:	18fb      	adds	r3, r7, r3
    3bd6:	6818      	ldr	r0, [r3, #0]
    3bd8:	2382      	movs	r3, #130	; 0x82
    3bda:	18fb      	adds	r3, r7, r3
    3bdc:	881b      	ldrh	r3, [r3, #0]
    3bde:	3301      	adds	r3, #1
    3be0:	001a      	movs	r2, r3
    3be2:	687b      	ldr	r3, [r7, #4]
    3be4:	0019      	movs	r1, r3
    3be6:	4b16      	ldr	r3, [pc, #88]	; (3c40 <m2m_wifi_connect_sc+0x3d4>)
    3be8:	4798      	blx	r3
    3bea:	e04c      	b.n	3c86 <m2m_wifi_connect_sc+0x41a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    3bec:	230a      	movs	r3, #10
    3bee:	18fb      	adds	r3, r7, r3
    3bf0:	781b      	ldrb	r3, [r3, #0]
    3bf2:	2b04      	cmp	r3, #4
    3bf4:	d130      	bne.n	3c58 <m2m_wifi_connect_sc+0x3ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    3bf6:	238c      	movs	r3, #140	; 0x8c
    3bf8:	18fb      	adds	r3, r7, r3
    3bfa:	681b      	ldr	r3, [r3, #0]
    3bfc:	6879      	ldr	r1, [r7, #4]
    3bfe:	223e      	movs	r2, #62	; 0x3e
    3c00:	0018      	movs	r0, r3
    3c02:	4b0f      	ldr	r3, [pc, #60]	; (3c40 <m2m_wifi_connect_sc+0x3d4>)
    3c04:	4798      	blx	r3
    3c06:	e03e      	b.n	3c86 <m2m_wifi_connect_sc+0x41a>
    3c08:	00000203 	.word	0x00000203
    3c0c:	000115bc 	.word	0x000115bc
    3c10:	000112a8 	.word	0x000112a8
    3c14:	0000fd31 	.word	0x0000fd31
    3c18:	00011454 	.word	0x00011454
    3c1c:	0000fe51 	.word	0x0000fe51
    3c20:	0000fd65 	.word	0x0000fd65
    3c24:	0000247d 	.word	0x0000247d
    3c28:	0000020f 	.word	0x0000020f
    3c2c:	00011468 	.word	0x00011468
    3c30:	00000219 	.word	0x00000219
    3c34:	00011474 	.word	0x00011474
    3c38:	00000222 	.word	0x00000222
    3c3c:	00011488 	.word	0x00011488
    3c40:	00002401 	.word	0x00002401
    3c44:	00000239 	.word	0x00000239
    3c48:	00011494 	.word	0x00011494
    3c4c:	000114b0 	.word	0x000114b0
    3c50:	0000024f 	.word	0x0000024f
    3c54:	000114cc 	.word	0x000114cc
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    3c58:	230a      	movs	r3, #10
    3c5a:	18fb      	adds	r3, r7, r3
    3c5c:	781b      	ldrb	r3, [r3, #0]
    3c5e:	2b01      	cmp	r3, #1
    3c60:	d011      	beq.n	3c86 <m2m_wifi_connect_sc+0x41a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    3c62:	4a15      	ldr	r2, [pc, #84]	; (3cb8 <m2m_wifi_connect_sc+0x44c>)
    3c64:	4915      	ldr	r1, [pc, #84]	; (3cbc <m2m_wifi_connect_sc+0x450>)
    3c66:	4b16      	ldr	r3, [pc, #88]	; (3cc0 <m2m_wifi_connect_sc+0x454>)
    3c68:	0018      	movs	r0, r3
    3c6a:	4b16      	ldr	r3, [pc, #88]	; (3cc4 <m2m_wifi_connect_sc+0x458>)
    3c6c:	4798      	blx	r3
    3c6e:	4b16      	ldr	r3, [pc, #88]	; (3cc8 <m2m_wifi_connect_sc+0x45c>)
    3c70:	0018      	movs	r0, r3
    3c72:	4b16      	ldr	r3, [pc, #88]	; (3ccc <m2m_wifi_connect_sc+0x460>)
    3c74:	4798      	blx	r3
    3c76:	200d      	movs	r0, #13
    3c78:	4b15      	ldr	r3, [pc, #84]	; (3cd0 <m2m_wifi_connect_sc+0x464>)
    3c7a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    3c7c:	2397      	movs	r3, #151	; 0x97
    3c7e:	18fb      	adds	r3, r7, r3
    3c80:	22f4      	movs	r2, #244	; 0xf4
    3c82:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    3c84:	e010      	b.n	3ca8 <m2m_wifi_connect_sc+0x43c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    3c86:	2397      	movs	r3, #151	; 0x97
    3c88:	18fc      	adds	r4, r7, r3
    3c8a:	2314      	movs	r3, #20
    3c8c:	18fa      	adds	r2, r7, r3
    3c8e:	2300      	movs	r3, #0
    3c90:	9302      	str	r3, [sp, #8]
    3c92:	2300      	movs	r3, #0
    3c94:	9301      	str	r3, [sp, #4]
    3c96:	2300      	movs	r3, #0
    3c98:	9300      	str	r3, [sp, #0]
    3c9a:	236c      	movs	r3, #108	; 0x6c
    3c9c:	2128      	movs	r1, #40	; 0x28
    3c9e:	2001      	movs	r0, #1
    3ca0:	4d0c      	ldr	r5, [pc, #48]	; (3cd4 <m2m_wifi_connect_sc+0x468>)
    3ca2:	47a8      	blx	r5
    3ca4:	0003      	movs	r3, r0
    3ca6:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    3ca8:	2397      	movs	r3, #151	; 0x97
    3caa:	18fb      	adds	r3, r7, r3
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	b25b      	sxtb	r3, r3
}
    3cb0:	0018      	movs	r0, r3
    3cb2:	46bd      	mov	sp, r7
    3cb4:	b026      	add	sp, #152	; 0x98
    3cb6:	bdb0      	pop	{r4, r5, r7, pc}
    3cb8:	0000025f 	.word	0x0000025f
    3cbc:	000115bc 	.word	0x000115bc
    3cc0:	000112a8 	.word	0x000112a8
    3cc4:	0000fd31 	.word	0x0000fd31
    3cc8:	000114e8 	.word	0x000114e8
    3ccc:	0000fe51 	.word	0x0000fe51
    3cd0:	0000fd65 	.word	0x0000fd65
    3cd4:	00002819 	.word	0x00002819

00003cd8 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    3cd8:	b590      	push	{r4, r7, lr}
    3cda:	b085      	sub	sp, #20
    3cdc:	af00      	add	r7, sp, #0
    3cde:	6078      	str	r0, [r7, #4]
    3ce0:	6039      	str	r1, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    3ce2:	230f      	movs	r3, #15
    3ce4:	18fb      	adds	r3, r7, r3
    3ce6:	2200      	movs	r2, #0
    3ce8:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    3cea:	230f      	movs	r3, #15
    3cec:	18fc      	adds	r4, r7, r3
    3cee:	4b14      	ldr	r3, [pc, #80]	; (3d40 <m2m_wifi_get_otp_mac_address+0x68>)
    3cf0:	4798      	blx	r3
    3cf2:	0003      	movs	r3, r0
    3cf4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    3cf6:	230f      	movs	r3, #15
    3cf8:	18fb      	adds	r3, r7, r3
    3cfa:	781b      	ldrb	r3, [r3, #0]
    3cfc:	b25b      	sxtb	r3, r3
    3cfe:	2b00      	cmp	r3, #0
    3d00:	d115      	bne.n	3d2e <m2m_wifi_get_otp_mac_address+0x56>
	{
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    3d02:	230f      	movs	r3, #15
    3d04:	18fc      	adds	r4, r7, r3
    3d06:	683a      	ldr	r2, [r7, #0]
    3d08:	687b      	ldr	r3, [r7, #4]
    3d0a:	0011      	movs	r1, r2
    3d0c:	0018      	movs	r0, r3
    3d0e:	4b0d      	ldr	r3, [pc, #52]	; (3d44 <m2m_wifi_get_otp_mac_address+0x6c>)
    3d10:	4798      	blx	r3
    3d12:	0003      	movs	r3, r0
    3d14:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    3d16:	230f      	movs	r3, #15
    3d18:	18fb      	adds	r3, r7, r3
    3d1a:	781b      	ldrb	r3, [r3, #0]
    3d1c:	b25b      	sxtb	r3, r3
    3d1e:	2b00      	cmp	r3, #0
    3d20:	d105      	bne.n	3d2e <m2m_wifi_get_otp_mac_address+0x56>
		{
			ret = hif_chip_sleep();
    3d22:	230f      	movs	r3, #15
    3d24:	18fc      	adds	r4, r7, r3
    3d26:	4b08      	ldr	r3, [pc, #32]	; (3d48 <m2m_wifi_get_otp_mac_address+0x70>)
    3d28:	4798      	blx	r3
    3d2a:	0003      	movs	r3, r0
    3d2c:	7023      	strb	r3, [r4, #0]
		}
	}
	return ret;
    3d2e:	230f      	movs	r3, #15
    3d30:	18fb      	adds	r3, r7, r3
    3d32:	781b      	ldrb	r3, [r3, #0]
    3d34:	b25b      	sxtb	r3, r3
}
    3d36:	0018      	movs	r0, r3
    3d38:	46bd      	mov	sp, r7
    3d3a:	b005      	add	sp, #20
    3d3c:	bd90      	pop	{r4, r7, pc}
    3d3e:	46c0      	nop			; (mov r8, r8)
    3d40:	0000264d 	.word	0x0000264d
    3d44:	00004509 	.word	0x00004509
    3d48:	000026e5 	.word	0x000026e5

00003d4c <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    3d4c:	b590      	push	{r4, r7, lr}
    3d4e:	b085      	sub	sp, #20
    3d50:	af00      	add	r7, sp, #0
    3d52:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3d54:	230f      	movs	r3, #15
    3d56:	18fb      	adds	r3, r7, r3
    3d58:	2200      	movs	r2, #0
    3d5a:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    3d5c:	230f      	movs	r3, #15
    3d5e:	18fc      	adds	r4, r7, r3
    3d60:	4b12      	ldr	r3, [pc, #72]	; (3dac <m2m_wifi_get_mac_address+0x60>)
    3d62:	4798      	blx	r3
    3d64:	0003      	movs	r3, r0
    3d66:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    3d68:	230f      	movs	r3, #15
    3d6a:	18fb      	adds	r3, r7, r3
    3d6c:	781b      	ldrb	r3, [r3, #0]
    3d6e:	b25b      	sxtb	r3, r3
    3d70:	2b00      	cmp	r3, #0
    3d72:	d113      	bne.n	3d9c <m2m_wifi_get_mac_address+0x50>
	{
		ret = nmi_get_mac_address(pu8MacAddr);
    3d74:	230f      	movs	r3, #15
    3d76:	18fc      	adds	r4, r7, r3
    3d78:	687b      	ldr	r3, [r7, #4]
    3d7a:	0018      	movs	r0, r3
    3d7c:	4b0c      	ldr	r3, [pc, #48]	; (3db0 <m2m_wifi_get_mac_address+0x64>)
    3d7e:	4798      	blx	r3
    3d80:	0003      	movs	r3, r0
    3d82:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    3d84:	230f      	movs	r3, #15
    3d86:	18fb      	adds	r3, r7, r3
    3d88:	781b      	ldrb	r3, [r3, #0]
    3d8a:	b25b      	sxtb	r3, r3
    3d8c:	2b00      	cmp	r3, #0
    3d8e:	d105      	bne.n	3d9c <m2m_wifi_get_mac_address+0x50>
		{
			ret = hif_chip_sleep();
    3d90:	230f      	movs	r3, #15
    3d92:	18fc      	adds	r4, r7, r3
    3d94:	4b07      	ldr	r3, [pc, #28]	; (3db4 <m2m_wifi_get_mac_address+0x68>)
    3d96:	4798      	blx	r3
    3d98:	0003      	movs	r3, r0
    3d9a:	7023      	strb	r3, [r4, #0]
		}
	}

	return ret;
    3d9c:	230f      	movs	r3, #15
    3d9e:	18fb      	adds	r3, r7, r3
    3da0:	781b      	ldrb	r3, [r3, #0]
    3da2:	b25b      	sxtb	r3, r3
}
    3da4:	0018      	movs	r0, r3
    3da6:	46bd      	mov	sp, r7
    3da8:	b005      	add	sp, #20
    3daa:	bd90      	pop	{r4, r7, pc}
    3dac:	0000264d 	.word	0x0000264d
    3db0:	0000460d 	.word	0x0000460d
    3db4:	000026e5 	.word	0x000026e5

00003db8 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    3db8:	b590      	push	{r4, r7, lr}
    3dba:	b087      	sub	sp, #28
    3dbc:	af00      	add	r7, sp, #0
    3dbe:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    3dc0:	2317      	movs	r3, #23
    3dc2:	18fb      	adds	r3, r7, r3
    3dc4:	2200      	movs	r2, #0
    3dc6:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    3dc8:	687b      	ldr	r3, [r7, #4]
    3dca:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    3dcc:	693a      	ldr	r2, [r7, #16]
    3dce:	23a5      	movs	r3, #165	; 0xa5
    3dd0:	015b      	lsls	r3, r3, #5
    3dd2:	0011      	movs	r1, r2
    3dd4:	0018      	movs	r0, r3
    3dd6:	4b13      	ldr	r3, [pc, #76]	; (3e24 <chip_apply_conf+0x6c>)
    3dd8:	4798      	blx	r3
		if(val32 != 0) {		
    3dda:	693b      	ldr	r3, [r7, #16]
    3ddc:	2b00      	cmp	r3, #0
    3dde:	d018      	beq.n	3e12 <chip_apply_conf+0x5a>
			uint32 reg = 0;
    3de0:	2300      	movs	r3, #0
    3de2:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    3de4:	2317      	movs	r3, #23
    3de6:	18fc      	adds	r4, r7, r3
    3de8:	230c      	movs	r3, #12
    3dea:	18fa      	adds	r2, r7, r3
    3dec:	23a5      	movs	r3, #165	; 0xa5
    3dee:	015b      	lsls	r3, r3, #5
    3df0:	0011      	movs	r1, r2
    3df2:	0018      	movs	r0, r3
    3df4:	4b0c      	ldr	r3, [pc, #48]	; (3e28 <chip_apply_conf+0x70>)
    3df6:	4798      	blx	r3
    3df8:	0003      	movs	r3, r0
    3dfa:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    3dfc:	2317      	movs	r3, #23
    3dfe:	18fb      	adds	r3, r7, r3
    3e00:	781b      	ldrb	r3, [r3, #0]
    3e02:	b25b      	sxtb	r3, r3
    3e04:	2b00      	cmp	r3, #0
    3e06:	d1e1      	bne.n	3dcc <chip_apply_conf+0x14>
				if(reg == val32)
    3e08:	68fa      	ldr	r2, [r7, #12]
    3e0a:	693b      	ldr	r3, [r7, #16]
    3e0c:	429a      	cmp	r2, r3
    3e0e:	d002      	beq.n	3e16 <chip_apply_conf+0x5e>
					break;
			}
		} else {
			break;
		}
	} while(1);
    3e10:	e7dc      	b.n	3dcc <chip_apply_conf+0x14>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    3e12:	46c0      	nop			; (mov r8, r8)
    3e14:	e000      	b.n	3e18 <chip_apply_conf+0x60>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
    3e16:	46c0      	nop			; (mov r8, r8)
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
    3e18:	2300      	movs	r3, #0
}
    3e1a:	0018      	movs	r0, r3
    3e1c:	46bd      	mov	sp, r7
    3e1e:	b007      	add	sp, #28
    3e20:	bd90      	pop	{r4, r7, pc}
    3e22:	46c0      	nop			; (mov r8, r8)
    3e24:	0000477d 	.word	0x0000477d
    3e28:	00004759 	.word	0x00004759

00003e2c <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    3e2c:	b590      	push	{r4, r7, lr}
    3e2e:	b085      	sub	sp, #20
    3e30:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    3e32:	230f      	movs	r3, #15
    3e34:	18fb      	adds	r3, r7, r3
    3e36:	2200      	movs	r2, #0
    3e38:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    3e3a:	2300      	movs	r3, #0
    3e3c:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    3e3e:	2001      	movs	r0, #1
    3e40:	4b64      	ldr	r3, [pc, #400]	; (3fd4 <nm_clkless_wake+0x1a8>)
    3e42:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    3e44:	230f      	movs	r3, #15
    3e46:	18fc      	adds	r4, r7, r3
    3e48:	1d3b      	adds	r3, r7, #4
    3e4a:	0019      	movs	r1, r3
    3e4c:	2001      	movs	r0, #1
    3e4e:	4b62      	ldr	r3, [pc, #392]	; (3fd8 <nm_clkless_wake+0x1ac>)
    3e50:	4798      	blx	r3
    3e52:	0003      	movs	r3, r0
    3e54:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    3e56:	230f      	movs	r3, #15
    3e58:	18fb      	adds	r3, r7, r3
    3e5a:	781b      	ldrb	r3, [r3, #0]
    3e5c:	b25b      	sxtb	r3, r3
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d00d      	beq.n	3e7e <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    3e62:	495e      	ldr	r1, [pc, #376]	; (3fdc <nm_clkless_wake+0x1b0>)
    3e64:	4b5e      	ldr	r3, [pc, #376]	; (3fe0 <nm_clkless_wake+0x1b4>)
    3e66:	2272      	movs	r2, #114	; 0x72
    3e68:	0018      	movs	r0, r3
    3e6a:	4b5e      	ldr	r3, [pc, #376]	; (3fe4 <nm_clkless_wake+0x1b8>)
    3e6c:	4798      	blx	r3
    3e6e:	4b5e      	ldr	r3, [pc, #376]	; (3fe8 <nm_clkless_wake+0x1bc>)
    3e70:	0018      	movs	r0, r3
    3e72:	4b5e      	ldr	r3, [pc, #376]	; (3fec <nm_clkless_wake+0x1c0>)
    3e74:	4798      	blx	r3
    3e76:	200d      	movs	r0, #13
    3e78:	4b5d      	ldr	r3, [pc, #372]	; (3ff0 <nm_clkless_wake+0x1c4>)
    3e7a:	4798      	blx	r3
		goto _WAKE_EXIT;
    3e7c:	e0a1      	b.n	3fc2 <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    3e7e:	687b      	ldr	r3, [r7, #4]
    3e80:	2202      	movs	r2, #2
    3e82:	4313      	orrs	r3, r2
    3e84:	0019      	movs	r1, r3
    3e86:	2001      	movs	r0, #1
    3e88:	4b5a      	ldr	r3, [pc, #360]	; (3ff4 <nm_clkless_wake+0x1c8>)
    3e8a:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    3e8c:	2001      	movs	r0, #1
    3e8e:	4b51      	ldr	r3, [pc, #324]	; (3fd4 <nm_clkless_wake+0x1a8>)
    3e90:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    3e92:	4b59      	ldr	r3, [pc, #356]	; (3ff8 <nm_clkless_wake+0x1cc>)
    3e94:	681b      	ldr	r3, [r3, #0]
    3e96:	220f      	movs	r2, #15
    3e98:	18bc      	adds	r4, r7, r2
    3e9a:	003a      	movs	r2, r7
    3e9c:	0011      	movs	r1, r2
    3e9e:	0018      	movs	r0, r3
    3ea0:	4b4d      	ldr	r3, [pc, #308]	; (3fd8 <nm_clkless_wake+0x1ac>)
    3ea2:	4798      	blx	r3
    3ea4:	0003      	movs	r3, r0
    3ea6:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    3ea8:	230f      	movs	r3, #15
    3eaa:	18fb      	adds	r3, r7, r3
    3eac:	781b      	ldrb	r3, [r3, #0]
    3eae:	b25b      	sxtb	r3, r3
    3eb0:	2b00      	cmp	r3, #0
    3eb2:	d108      	bne.n	3ec6 <nm_clkless_wake+0x9a>
    3eb4:	230f      	movs	r3, #15
    3eb6:	18fb      	adds	r3, r7, r3
    3eb8:	781b      	ldrb	r3, [r3, #0]
    3eba:	b25b      	sxtb	r3, r3
    3ebc:	2b00      	cmp	r3, #0
    3ebe:	d162      	bne.n	3f86 <nm_clkless_wake+0x15a>
    3ec0:	683b      	ldr	r3, [r7, #0]
    3ec2:	2b00      	cmp	r3, #0
    3ec4:	d15f      	bne.n	3f86 <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    3ec6:	4b4c      	ldr	r3, [pc, #304]	; (3ff8 <nm_clkless_wake+0x1cc>)
    3ec8:	220e      	movs	r2, #14
    3eca:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    3ecc:	2001      	movs	r0, #1
    3ece:	4b41      	ldr	r3, [pc, #260]	; (3fd4 <nm_clkless_wake+0x1a8>)
    3ed0:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    3ed2:	4b49      	ldr	r3, [pc, #292]	; (3ff8 <nm_clkless_wake+0x1cc>)
    3ed4:	681b      	ldr	r3, [r3, #0]
    3ed6:	220f      	movs	r2, #15
    3ed8:	18bc      	adds	r4, r7, r2
    3eda:	003a      	movs	r2, r7
    3edc:	0011      	movs	r1, r2
    3ede:	0018      	movs	r0, r3
    3ee0:	4b3d      	ldr	r3, [pc, #244]	; (3fd8 <nm_clkless_wake+0x1ac>)
    3ee2:	4798      	blx	r3
    3ee4:	0003      	movs	r3, r0
    3ee6:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    3ee8:	230f      	movs	r3, #15
    3eea:	18fb      	adds	r3, r7, r3
    3eec:	781b      	ldrb	r3, [r3, #0]
    3eee:	b25b      	sxtb	r3, r3
    3ef0:	2b00      	cmp	r3, #0
    3ef2:	d108      	bne.n	3f06 <nm_clkless_wake+0xda>
    3ef4:	230f      	movs	r3, #15
    3ef6:	18fb      	adds	r3, r7, r3
    3ef8:	781b      	ldrb	r3, [r3, #0]
    3efa:	b25b      	sxtb	r3, r3
    3efc:	2b00      	cmp	r3, #0
    3efe:	d142      	bne.n	3f86 <nm_clkless_wake+0x15a>
    3f00:	683b      	ldr	r3, [r7, #0]
    3f02:	2b00      	cmp	r3, #0
    3f04:	d13f      	bne.n	3f86 <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    3f06:	4b3c      	ldr	r3, [pc, #240]	; (3ff8 <nm_clkless_wake+0x1cc>)
    3f08:	2213      	movs	r2, #19
    3f0a:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    3f0c:	2001      	movs	r0, #1
    3f0e:	4b31      	ldr	r3, [pc, #196]	; (3fd4 <nm_clkless_wake+0x1a8>)
    3f10:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    3f12:	4b39      	ldr	r3, [pc, #228]	; (3ff8 <nm_clkless_wake+0x1cc>)
    3f14:	681b      	ldr	r3, [r3, #0]
    3f16:	220f      	movs	r2, #15
    3f18:	18bc      	adds	r4, r7, r2
    3f1a:	003a      	movs	r2, r7
    3f1c:	0011      	movs	r1, r2
    3f1e:	0018      	movs	r0, r3
    3f20:	4b2d      	ldr	r3, [pc, #180]	; (3fd8 <nm_clkless_wake+0x1ac>)
    3f22:	4798      	blx	r3
    3f24:	0003      	movs	r3, r0
    3f26:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    3f28:	230f      	movs	r3, #15
    3f2a:	18fb      	adds	r3, r7, r3
    3f2c:	781b      	ldrb	r3, [r3, #0]
    3f2e:	b25b      	sxtb	r3, r3
    3f30:	2b00      	cmp	r3, #0
    3f32:	d028      	beq.n	3f86 <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    3f34:	4929      	ldr	r1, [pc, #164]	; (3fdc <nm_clkless_wake+0x1b0>)
    3f36:	4b2a      	ldr	r3, [pc, #168]	; (3fe0 <nm_clkless_wake+0x1b4>)
    3f38:	2296      	movs	r2, #150	; 0x96
    3f3a:	0018      	movs	r0, r3
    3f3c:	4b29      	ldr	r3, [pc, #164]	; (3fe4 <nm_clkless_wake+0x1b8>)
    3f3e:	4798      	blx	r3
    3f40:	4b2e      	ldr	r3, [pc, #184]	; (3ffc <nm_clkless_wake+0x1d0>)
    3f42:	0018      	movs	r0, r3
    3f44:	4b29      	ldr	r3, [pc, #164]	; (3fec <nm_clkless_wake+0x1c0>)
    3f46:	4798      	blx	r3
    3f48:	200d      	movs	r0, #13
    3f4a:	4b29      	ldr	r3, [pc, #164]	; (3ff0 <nm_clkless_wake+0x1c4>)
    3f4c:	4798      	blx	r3
					goto _WAKE_EXIT;
    3f4e:	e038      	b.n	3fc2 <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    3f50:	2002      	movs	r0, #2
    3f52:	4b20      	ldr	r3, [pc, #128]	; (3fd4 <nm_clkless_wake+0x1a8>)
    3f54:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    3f56:	4b28      	ldr	r3, [pc, #160]	; (3ff8 <nm_clkless_wake+0x1cc>)
    3f58:	681b      	ldr	r3, [r3, #0]
    3f5a:	003a      	movs	r2, r7
    3f5c:	0011      	movs	r1, r2
    3f5e:	0018      	movs	r0, r3
    3f60:	4b1d      	ldr	r3, [pc, #116]	; (3fd8 <nm_clkless_wake+0x1ac>)
    3f62:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    3f64:	683b      	ldr	r3, [r7, #0]
    3f66:	2204      	movs	r2, #4
    3f68:	4013      	ands	r3, r2
    3f6a:	d10c      	bne.n	3f86 <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    3f6c:	491b      	ldr	r1, [pc, #108]	; (3fdc <nm_clkless_wake+0x1b0>)
    3f6e:	4b1c      	ldr	r3, [pc, #112]	; (3fe0 <nm_clkless_wake+0x1b4>)
    3f70:	22aa      	movs	r2, #170	; 0xaa
    3f72:	0018      	movs	r0, r3
    3f74:	4b1b      	ldr	r3, [pc, #108]	; (3fe4 <nm_clkless_wake+0x1b8>)
    3f76:	4798      	blx	r3
    3f78:	4b21      	ldr	r3, [pc, #132]	; (4000 <nm_clkless_wake+0x1d4>)
    3f7a:	0018      	movs	r0, r3
    3f7c:	4b1b      	ldr	r3, [pc, #108]	; (3fec <nm_clkless_wake+0x1c0>)
    3f7e:	4798      	blx	r3
    3f80:	200d      	movs	r0, #13
    3f82:	4b1b      	ldr	r3, [pc, #108]	; (3ff0 <nm_clkless_wake+0x1c4>)
    3f84:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    3f86:	683b      	ldr	r3, [r7, #0]
    3f88:	2204      	movs	r2, #4
    3f8a:	4013      	ands	r3, r2
    3f8c:	d109      	bne.n	3fa2 <nm_clkless_wake+0x176>
    3f8e:	68bb      	ldr	r3, [r7, #8]
    3f90:	3301      	adds	r3, #1
    3f92:	60bb      	str	r3, [r7, #8]
    3f94:	68ba      	ldr	r2, [r7, #8]
    3f96:	4b1b      	ldr	r3, [pc, #108]	; (4004 <nm_clkless_wake+0x1d8>)
    3f98:	2103      	movs	r1, #3
    3f9a:	0010      	movs	r0, r2
    3f9c:	4798      	blx	r3
    3f9e:	1e0b      	subs	r3, r1, #0
    3fa0:	d0d6      	beq.n	3f50 <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    3fa2:	683b      	ldr	r3, [r7, #0]
    3fa4:	2204      	movs	r2, #4
    3fa6:	4013      	ands	r3, r2
    3fa8:	d106      	bne.n	3fb8 <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    3faa:	687b      	ldr	r3, [r7, #4]
    3fac:	2202      	movs	r2, #2
    3fae:	4313      	orrs	r3, r2
    3fb0:	0019      	movs	r1, r3
    3fb2:	2001      	movs	r0, #1
    3fb4:	4b0f      	ldr	r3, [pc, #60]	; (3ff4 <nm_clkless_wake+0x1c8>)
    3fb6:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    3fb8:	683b      	ldr	r3, [r7, #0]
    3fba:	2204      	movs	r2, #4
    3fbc:	4013      	ands	r3, r2
    3fbe:	d100      	bne.n	3fc2 <nm_clkless_wake+0x196>
    3fc0:	e75d      	b.n	3e7e <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    3fc2:	230f      	movs	r3, #15
    3fc4:	18fb      	adds	r3, r7, r3
    3fc6:	781b      	ldrb	r3, [r3, #0]
    3fc8:	b25b      	sxtb	r3, r3
}
    3fca:	0018      	movs	r0, r3
    3fcc:	46bd      	mov	sp, r7
    3fce:	b005      	add	sp, #20
    3fd0:	bd90      	pop	{r4, r7, pc}
    3fd2:	46c0      	nop			; (mov r8, r8)
    3fd4:	00001b59 	.word	0x00001b59
    3fd8:	00004759 	.word	0x00004759
    3fdc:	000116f8 	.word	0x000116f8
    3fe0:	000115d0 	.word	0x000115d0
    3fe4:	0000fd31 	.word	0x0000fd31
    3fe8:	000115e4 	.word	0x000115e4
    3fec:	0000fe51 	.word	0x0000fe51
    3ff0:	0000fd65 	.word	0x0000fd65
    3ff4:	0000477d 	.word	0x0000477d
    3ff8:	20000014 	.word	0x20000014
    3ffc:	00011604 	.word	0x00011604
    4000:	00011624 	.word	0x00011624
    4004:	0000ed05 	.word	0x0000ed05

00004008 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    4008:	b590      	push	{r4, r7, lr}
    400a:	b083      	sub	sp, #12
    400c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    400e:	1dfc      	adds	r4, r7, #7
    4010:	003b      	movs	r3, r7
    4012:	4a29      	ldr	r2, [pc, #164]	; (40b8 <enable_interrupts+0xb0>)
    4014:	0019      	movs	r1, r3
    4016:	0010      	movs	r0, r2
    4018:	4b28      	ldr	r3, [pc, #160]	; (40bc <enable_interrupts+0xb4>)
    401a:	4798      	blx	r3
    401c:	0003      	movs	r3, r0
    401e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4020:	1dfb      	adds	r3, r7, #7
    4022:	781b      	ldrb	r3, [r3, #0]
    4024:	b25b      	sxtb	r3, r3
    4026:	2b00      	cmp	r3, #0
    4028:	d002      	beq.n	4030 <enable_interrupts+0x28>
		return M2M_ERR_BUS_FAIL;
    402a:	2306      	movs	r3, #6
    402c:	425b      	negs	r3, r3
    402e:	e03f      	b.n	40b0 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 8);
    4030:	683b      	ldr	r3, [r7, #0]
    4032:	2280      	movs	r2, #128	; 0x80
    4034:	0052      	lsls	r2, r2, #1
    4036:	4313      	orrs	r3, r2
    4038:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    403a:	683b      	ldr	r3, [r7, #0]
    403c:	1dfc      	adds	r4, r7, #7
    403e:	4a1e      	ldr	r2, [pc, #120]	; (40b8 <enable_interrupts+0xb0>)
    4040:	0019      	movs	r1, r3
    4042:	0010      	movs	r0, r2
    4044:	4b1e      	ldr	r3, [pc, #120]	; (40c0 <enable_interrupts+0xb8>)
    4046:	4798      	blx	r3
    4048:	0003      	movs	r3, r0
    404a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    404c:	1dfb      	adds	r3, r7, #7
    404e:	781b      	ldrb	r3, [r3, #0]
    4050:	b25b      	sxtb	r3, r3
    4052:	2b00      	cmp	r3, #0
    4054:	d002      	beq.n	405c <enable_interrupts+0x54>
		return M2M_ERR_BUS_FAIL;
    4056:	2306      	movs	r3, #6
    4058:	425b      	negs	r3, r3
    405a:	e029      	b.n	40b0 <enable_interrupts+0xa8>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    405c:	1dfc      	adds	r4, r7, #7
    405e:	003a      	movs	r2, r7
    4060:	23d0      	movs	r3, #208	; 0xd0
    4062:	015b      	lsls	r3, r3, #5
    4064:	0011      	movs	r1, r2
    4066:	0018      	movs	r0, r3
    4068:	4b14      	ldr	r3, [pc, #80]	; (40bc <enable_interrupts+0xb4>)
    406a:	4798      	blx	r3
    406c:	0003      	movs	r3, r0
    406e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4070:	1dfb      	adds	r3, r7, #7
    4072:	781b      	ldrb	r3, [r3, #0]
    4074:	b25b      	sxtb	r3, r3
    4076:	2b00      	cmp	r3, #0
    4078:	d002      	beq.n	4080 <enable_interrupts+0x78>
		return M2M_ERR_BUS_FAIL;
    407a:	2306      	movs	r3, #6
    407c:	425b      	negs	r3, r3
    407e:	e017      	b.n	40b0 <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 16);
    4080:	683b      	ldr	r3, [r7, #0]
    4082:	2280      	movs	r2, #128	; 0x80
    4084:	0252      	lsls	r2, r2, #9
    4086:	4313      	orrs	r3, r2
    4088:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    408a:	683a      	ldr	r2, [r7, #0]
    408c:	1dfc      	adds	r4, r7, #7
    408e:	23d0      	movs	r3, #208	; 0xd0
    4090:	015b      	lsls	r3, r3, #5
    4092:	0011      	movs	r1, r2
    4094:	0018      	movs	r0, r3
    4096:	4b0a      	ldr	r3, [pc, #40]	; (40c0 <enable_interrupts+0xb8>)
    4098:	4798      	blx	r3
    409a:	0003      	movs	r3, r0
    409c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    409e:	1dfb      	adds	r3, r7, #7
    40a0:	781b      	ldrb	r3, [r3, #0]
    40a2:	b25b      	sxtb	r3, r3
    40a4:	2b00      	cmp	r3, #0
    40a6:	d002      	beq.n	40ae <enable_interrupts+0xa6>
		return M2M_ERR_BUS_FAIL;
    40a8:	2306      	movs	r3, #6
    40aa:	425b      	negs	r3, r3
    40ac:	e000      	b.n	40b0 <enable_interrupts+0xa8>
	}
	return M2M_SUCCESS;
    40ae:	2300      	movs	r3, #0
}
    40b0:	0018      	movs	r0, r3
    40b2:	46bd      	mov	sp, r7
    40b4:	b003      	add	sp, #12
    40b6:	bd90      	pop	{r4, r7, pc}
    40b8:	00001408 	.word	0x00001408
    40bc:	00004759 	.word	0x00004759
    40c0:	0000477d 	.word	0x0000477d

000040c4 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    40c4:	b580      	push	{r7, lr}
    40c6:	b082      	sub	sp, #8
    40c8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    40ca:	4b32      	ldr	r3, [pc, #200]	; (4194 <nmi_get_chipid+0xd0>)
    40cc:	681b      	ldr	r3, [r3, #0]
    40ce:	2b00      	cmp	r3, #0
    40d0:	d159      	bne.n	4186 <nmi_get_chipid+0xc2>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    40d2:	4a30      	ldr	r2, [pc, #192]	; (4194 <nmi_get_chipid+0xd0>)
    40d4:	2380      	movs	r3, #128	; 0x80
    40d6:	015b      	lsls	r3, r3, #5
    40d8:	0011      	movs	r1, r2
    40da:	0018      	movs	r0, r3
    40dc:	4b2e      	ldr	r3, [pc, #184]	; (4198 <nmi_get_chipid+0xd4>)
    40de:	4798      	blx	r3
    40e0:	1e03      	subs	r3, r0, #0
    40e2:	d004      	beq.n	40ee <nmi_get_chipid+0x2a>
			chipid = 0;
    40e4:	4b2b      	ldr	r3, [pc, #172]	; (4194 <nmi_get_chipid+0xd0>)
    40e6:	2200      	movs	r2, #0
    40e8:	601a      	str	r2, [r3, #0]
			return 0;
    40ea:	2300      	movs	r3, #0
    40ec:	e04d      	b.n	418a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    40ee:	1d3b      	adds	r3, r7, #4
    40f0:	4a2a      	ldr	r2, [pc, #168]	; (419c <nmi_get_chipid+0xd8>)
    40f2:	0019      	movs	r1, r3
    40f4:	0010      	movs	r0, r2
    40f6:	4b28      	ldr	r3, [pc, #160]	; (4198 <nmi_get_chipid+0xd4>)
    40f8:	4798      	blx	r3
    40fa:	1e03      	subs	r3, r0, #0
    40fc:	d004      	beq.n	4108 <nmi_get_chipid+0x44>
			chipid = 0;
    40fe:	4b25      	ldr	r3, [pc, #148]	; (4194 <nmi_get_chipid+0xd0>)
    4100:	2200      	movs	r2, #0
    4102:	601a      	str	r2, [r3, #0]
			return 0;
    4104:	2300      	movs	r3, #0
    4106:	e040      	b.n	418a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    4108:	4b22      	ldr	r3, [pc, #136]	; (4194 <nmi_get_chipid+0xd0>)
    410a:	681b      	ldr	r3, [r3, #0]
    410c:	4a24      	ldr	r2, [pc, #144]	; (41a0 <nmi_get_chipid+0xdc>)
    410e:	4293      	cmp	r3, r2
    4110:	d106      	bne.n	4120 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	2b01      	cmp	r3, #1
    4116:	d029      	beq.n	416c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    4118:	4b1e      	ldr	r3, [pc, #120]	; (4194 <nmi_get_chipid+0xd0>)
    411a:	4a22      	ldr	r2, [pc, #136]	; (41a4 <nmi_get_chipid+0xe0>)
    411c:	601a      	str	r2, [r3, #0]
    411e:	e025      	b.n	416c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    4120:	4b1c      	ldr	r3, [pc, #112]	; (4194 <nmi_get_chipid+0xd0>)
    4122:	681b      	ldr	r3, [r3, #0]
    4124:	4a20      	ldr	r2, [pc, #128]	; (41a8 <nmi_get_chipid+0xe4>)
    4126:	4293      	cmp	r3, r2
    4128:	d10d      	bne.n	4146 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    412a:	687b      	ldr	r3, [r7, #4]
    412c:	2b03      	cmp	r3, #3
    412e:	d01d      	beq.n	416c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    4130:	687b      	ldr	r3, [r7, #4]
    4132:	2b04      	cmp	r3, #4
    4134:	d103      	bne.n	413e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    4136:	4b17      	ldr	r3, [pc, #92]	; (4194 <nmi_get_chipid+0xd0>)
    4138:	4a1c      	ldr	r2, [pc, #112]	; (41ac <nmi_get_chipid+0xe8>)
    413a:	601a      	str	r2, [r3, #0]
    413c:	e016      	b.n	416c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    413e:	4b15      	ldr	r3, [pc, #84]	; (4194 <nmi_get_chipid+0xd0>)
    4140:	4a1b      	ldr	r2, [pc, #108]	; (41b0 <nmi_get_chipid+0xec>)
    4142:	601a      	str	r2, [r3, #0]
    4144:	e012      	b.n	416c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1000F0) { 
    4146:	4b13      	ldr	r3, [pc, #76]	; (4194 <nmi_get_chipid+0xd0>)
    4148:	681b      	ldr	r3, [r3, #0]
    414a:	4a1a      	ldr	r2, [pc, #104]	; (41b4 <nmi_get_chipid+0xf0>)
    414c:	4293      	cmp	r3, r2
    414e:	d10d      	bne.n	416c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    4150:	4a10      	ldr	r2, [pc, #64]	; (4194 <nmi_get_chipid+0xd0>)
    4152:	23ec      	movs	r3, #236	; 0xec
    4154:	039b      	lsls	r3, r3, #14
    4156:	0011      	movs	r1, r2
    4158:	0018      	movs	r0, r3
    415a:	4b0f      	ldr	r3, [pc, #60]	; (4198 <nmi_get_chipid+0xd4>)
    415c:	4798      	blx	r3
    415e:	1e03      	subs	r3, r0, #0
    4160:	d004      	beq.n	416c <nmi_get_chipid+0xa8>
			chipid = 0;
    4162:	4b0c      	ldr	r3, [pc, #48]	; (4194 <nmi_get_chipid+0xd0>)
    4164:	2200      	movs	r2, #0
    4166:	601a      	str	r2, [r3, #0]
			return 0;
    4168:	2300      	movs	r3, #0
    416a:	e00e      	b.n	418a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    416c:	4b09      	ldr	r3, [pc, #36]	; (4194 <nmi_get_chipid+0xd0>)
    416e:	681b      	ldr	r3, [r3, #0]
    4170:	4a11      	ldr	r2, [pc, #68]	; (41b8 <nmi_get_chipid+0xf4>)
    4172:	401a      	ands	r2, r3
    4174:	4b07      	ldr	r3, [pc, #28]	; (4194 <nmi_get_chipid+0xd0>)
    4176:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    4178:	4b06      	ldr	r3, [pc, #24]	; (4194 <nmi_get_chipid+0xd0>)
    417a:	681b      	ldr	r3, [r3, #0]
    417c:	22a0      	movs	r2, #160	; 0xa0
    417e:	02d2      	lsls	r2, r2, #11
    4180:	431a      	orrs	r2, r3
    4182:	4b04      	ldr	r3, [pc, #16]	; (4194 <nmi_get_chipid+0xd0>)
    4184:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    4186:	4b03      	ldr	r3, [pc, #12]	; (4194 <nmi_get_chipid+0xd0>)
    4188:	681b      	ldr	r3, [r3, #0]
}
    418a:	0018      	movs	r0, r3
    418c:	46bd      	mov	sp, r7
    418e:	b002      	add	sp, #8
    4190:	bd80      	pop	{r7, pc}
    4192:	46c0      	nop			; (mov r8, r8)
    4194:	200000e4 	.word	0x200000e4
    4198:	00004759 	.word	0x00004759
    419c:	000013f4 	.word	0x000013f4
    41a0:	001002a0 	.word	0x001002a0
    41a4:	001002a1 	.word	0x001002a1
    41a8:	001002b0 	.word	0x001002b0
    41ac:	001002b1 	.word	0x001002b1
    41b0:	001002b2 	.word	0x001002b2
    41b4:	001000f0 	.word	0x001000f0
    41b8:	fff0ffff 	.word	0xfff0ffff

000041bc <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    41bc:	b580      	push	{r7, lr}
    41be:	b086      	sub	sp, #24
    41c0:	af00      	add	r7, sp, #0
    41c2:	0002      	movs	r2, r0
    41c4:	1dfb      	adds	r3, r7, #7
    41c6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    41c8:	230b      	movs	r3, #11
    41ca:	18fb      	adds	r3, r7, r3
    41cc:	2200      	movs	r2, #0
    41ce:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    41d0:	2300      	movs	r3, #0
    41d2:	617b      	str	r3, [r7, #20]
    41d4:	2300      	movs	r3, #0
    41d6:	613b      	str	r3, [r7, #16]
	uint32 u32GpReg1 = 0;
    41d8:	2300      	movs	r3, #0
    41da:	60fb      	str	r3, [r7, #12]

	reg = 0;
    41dc:	2300      	movs	r3, #0
    41de:	617b      	str	r3, [r7, #20]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    41e0:	4b3b      	ldr	r3, [pc, #236]	; (42d0 <wait_for_bootrom+0x114>)
    41e2:	0018      	movs	r0, r3
    41e4:	4b3b      	ldr	r3, [pc, #236]	; (42d4 <wait_for_bootrom+0x118>)
    41e6:	4798      	blx	r3
    41e8:	0003      	movs	r3, r0
    41ea:	617b      	str	r3, [r7, #20]
		if (reg & 0x80000000) {
    41ec:	697b      	ldr	r3, [r7, #20]
    41ee:	2b00      	cmp	r3, #0
    41f0:	db03      	blt.n	41fa <wait_for_bootrom+0x3e>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    41f2:	2001      	movs	r0, #1
    41f4:	4b38      	ldr	r3, [pc, #224]	; (42d8 <wait_for_bootrom+0x11c>)
    41f6:	4798      	blx	r3
	}
    41f8:	e7f2      	b.n	41e0 <wait_for_bootrom+0x24>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    41fa:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    41fc:	4b37      	ldr	r3, [pc, #220]	; (42dc <wait_for_bootrom+0x120>)
    41fe:	0018      	movs	r0, r3
    4200:	4b34      	ldr	r3, [pc, #208]	; (42d4 <wait_for_bootrom+0x118>)
    4202:	4798      	blx	r3
    4204:	0003      	movs	r3, r0
    4206:	617b      	str	r3, [r7, #20]
	reg &= 0x1;
    4208:	697b      	ldr	r3, [r7, #20]
    420a:	2201      	movs	r2, #1
    420c:	4013      	ands	r3, r2
    420e:	617b      	str	r3, [r7, #20]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    4210:	697b      	ldr	r3, [r7, #20]
    4212:	2b00      	cmp	r3, #0
    4214:	d112      	bne.n	423c <wait_for_bootrom+0x80>
	{
		reg = 0;
    4216:	2300      	movs	r3, #0
    4218:	617b      	str	r3, [r7, #20]
		while(reg != M2M_FINISH_BOOT_ROM)
    421a:	e00b      	b.n	4234 <wait_for_bootrom+0x78>
		{
			nm_bsp_sleep(1);
    421c:	2001      	movs	r0, #1
    421e:	4b2e      	ldr	r3, [pc, #184]	; (42d8 <wait_for_bootrom+0x11c>)
    4220:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    4222:	4b2f      	ldr	r3, [pc, #188]	; (42e0 <wait_for_bootrom+0x124>)
    4224:	0018      	movs	r0, r3
    4226:	4b2b      	ldr	r3, [pc, #172]	; (42d4 <wait_for_bootrom+0x118>)
    4228:	4798      	blx	r3
    422a:	0003      	movs	r3, r0
    422c:	617b      	str	r3, [r7, #20]

			if(++cnt > TIMEOUT)
    422e:	693b      	ldr	r3, [r7, #16]
    4230:	3301      	adds	r3, #1
    4232:	613b      	str	r3, [r7, #16]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    4234:	697b      	ldr	r3, [r7, #20]
    4236:	4a2b      	ldr	r2, [pc, #172]	; (42e4 <wait_for_bootrom+0x128>)
    4238:	4293      	cmp	r3, r2
    423a:	d1ef      	bne.n	421c <wait_for_bootrom+0x60>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    423c:	1dfb      	adds	r3, r7, #7
    423e:	781b      	ldrb	r3, [r3, #0]
    4240:	2b02      	cmp	r3, #2
    4242:	d10d      	bne.n	4260 <wait_for_bootrom+0xa4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4244:	4a28      	ldr	r2, [pc, #160]	; (42e8 <wait_for_bootrom+0x12c>)
    4246:	4b29      	ldr	r3, [pc, #164]	; (42ec <wait_for_bootrom+0x130>)
    4248:	0011      	movs	r1, r2
    424a:	0018      	movs	r0, r3
    424c:	4b28      	ldr	r3, [pc, #160]	; (42f0 <wait_for_bootrom+0x134>)
    424e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    4250:	2380      	movs	r3, #128	; 0x80
    4252:	035b      	lsls	r3, r3, #13
    4254:	4a27      	ldr	r2, [pc, #156]	; (42f4 <wait_for_bootrom+0x138>)
    4256:	0019      	movs	r1, r3
    4258:	0010      	movs	r0, r2
    425a:	4b25      	ldr	r3, [pc, #148]	; (42f0 <wait_for_bootrom+0x134>)
    425c:	4798      	blx	r3
    425e:	e015      	b.n	428c <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    4260:	1dfb      	adds	r3, r7, #7
    4262:	781b      	ldrb	r3, [r3, #0]
    4264:	2b03      	cmp	r3, #3
    4266:	d10b      	bne.n	4280 <wait_for_bootrom+0xc4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4268:	4a1f      	ldr	r2, [pc, #124]	; (42e8 <wait_for_bootrom+0x12c>)
    426a:	4b20      	ldr	r3, [pc, #128]	; (42ec <wait_for_bootrom+0x130>)
    426c:	0011      	movs	r1, r2
    426e:	0018      	movs	r0, r3
    4270:	4b1f      	ldr	r3, [pc, #124]	; (42f0 <wait_for_bootrom+0x134>)
    4272:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    4274:	4b1f      	ldr	r3, [pc, #124]	; (42f4 <wait_for_bootrom+0x138>)
    4276:	2100      	movs	r1, #0
    4278:	0018      	movs	r0, r3
    427a:	4b1d      	ldr	r3, [pc, #116]	; (42f0 <wait_for_bootrom+0x134>)
    427c:	4798      	blx	r3
    427e:	e005      	b.n	428c <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    4280:	1dfb      	adds	r3, r7, #7
    4282:	781b      	ldrb	r3, [r3, #0]
    4284:	2b04      	cmp	r3, #4
    4286:	d101      	bne.n	428c <wait_for_bootrom+0xd0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    4288:	2380      	movs	r3, #128	; 0x80
    428a:	60fb      	str	r3, [r7, #12]
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    428c:	4b1a      	ldr	r3, [pc, #104]	; (42f8 <wait_for_bootrom+0x13c>)
    428e:	4798      	blx	r3
    4290:	0003      	movs	r3, r0
    4292:	051b      	lsls	r3, r3, #20
    4294:	0d1a      	lsrs	r2, r3, #20
    4296:	23e8      	movs	r3, #232	; 0xe8
    4298:	009b      	lsls	r3, r3, #2
    429a:	429a      	cmp	r2, r3
    429c:	d106      	bne.n	42ac <wait_for_bootrom+0xf0>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    429e:	68fb      	ldr	r3, [r7, #12]
    42a0:	2202      	movs	r2, #2
    42a2:	4313      	orrs	r3, r2
    42a4:	0018      	movs	r0, r3
    42a6:	4b15      	ldr	r3, [pc, #84]	; (42fc <wait_for_bootrom+0x140>)
    42a8:	4798      	blx	r3
    42aa:	e003      	b.n	42b4 <wait_for_bootrom+0xf8>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
    42ac:	68fb      	ldr	r3, [r7, #12]
    42ae:	0018      	movs	r0, r3
    42b0:	4b12      	ldr	r3, [pc, #72]	; (42fc <wait_for_bootrom+0x140>)
    42b2:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    42b4:	4a12      	ldr	r2, [pc, #72]	; (4300 <wait_for_bootrom+0x144>)
    42b6:	4b0a      	ldr	r3, [pc, #40]	; (42e0 <wait_for_bootrom+0x124>)
    42b8:	0011      	movs	r1, r2
    42ba:	0018      	movs	r0, r3
    42bc:	4b0c      	ldr	r3, [pc, #48]	; (42f0 <wait_for_bootrom+0x134>)
    42be:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    42c0:	230b      	movs	r3, #11
    42c2:	18fb      	adds	r3, r7, r3
    42c4:	781b      	ldrb	r3, [r3, #0]
    42c6:	b25b      	sxtb	r3, r3
}
    42c8:	0018      	movs	r0, r3
    42ca:	46bd      	mov	sp, r7
    42cc:	b006      	add	sp, #24
    42ce:	bd80      	pop	{r7, pc}
    42d0:	00001014 	.word	0x00001014
    42d4:	00004739 	.word	0x00004739
    42d8:	00001b59 	.word	0x00001b59
    42dc:	000207bc 	.word	0x000207bc
    42e0:	000c000c 	.word	0x000c000c
    42e4:	10add09e 	.word	0x10add09e
    42e8:	3c1cd57d 	.word	0x3c1cd57d
    42ec:	000207ac 	.word	0x000207ac
    42f0:	0000477d 	.word	0x0000477d
    42f4:	0000108c 	.word	0x0000108c
    42f8:	000040c5 	.word	0x000040c5
    42fc:	00003db9 	.word	0x00003db9
    4300:	ef522f61 	.word	0xef522f61

00004304 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    4304:	b580      	push	{r7, lr}
    4306:	b088      	sub	sp, #32
    4308:	af00      	add	r7, sp, #0
    430a:	0002      	movs	r2, r0
    430c:	1dfb      	adds	r3, r7, #7
    430e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    4310:	231f      	movs	r3, #31
    4312:	18fb      	adds	r3, r7, r3
    4314:	2200      	movs	r2, #0
    4316:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    4318:	2300      	movs	r3, #0
    431a:	61bb      	str	r3, [r7, #24]
    431c:	2300      	movs	r3, #0
    431e:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    4320:	2301      	movs	r3, #1
    4322:	425b      	negs	r3, r3
    4324:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    4326:	4b1d      	ldr	r3, [pc, #116]	; (439c <wait_for_firmware_start+0x98>)
    4328:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    432a:	4b1d      	ldr	r3, [pc, #116]	; (43a0 <wait_for_firmware_start+0x9c>)
    432c:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    432e:	1dfb      	adds	r3, r7, #7
    4330:	781b      	ldrb	r3, [r3, #0]
    4332:	2b02      	cmp	r3, #2
    4334:	d003      	beq.n	433e <wait_for_firmware_start+0x3a>
    4336:	1dfb      	adds	r3, r7, #7
    4338:	781b      	ldrb	r3, [r3, #0]
    433a:	2b03      	cmp	r3, #3
    433c:	d119      	bne.n	4372 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    433e:	4b19      	ldr	r3, [pc, #100]	; (43a4 <wait_for_firmware_start+0xa0>)
    4340:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    4342:	4b19      	ldr	r3, [pc, #100]	; (43a8 <wait_for_firmware_start+0xa4>)
    4344:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    4346:	e014      	b.n	4372 <wait_for_firmware_start+0x6e>
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    4348:	2002      	movs	r0, #2
    434a:	4b18      	ldr	r3, [pc, #96]	; (43ac <wait_for_firmware_start+0xa8>)
    434c:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    434e:	68fb      	ldr	r3, [r7, #12]
    4350:	0018      	movs	r0, r3
    4352:	4b17      	ldr	r3, [pc, #92]	; (43b0 <wait_for_firmware_start+0xac>)
    4354:	4798      	blx	r3
    4356:	0003      	movs	r3, r0
    4358:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    435a:	697b      	ldr	r3, [r7, #20]
    435c:	3301      	adds	r3, #1
    435e:	617b      	str	r3, [r7, #20]
    4360:	697a      	ldr	r2, [r7, #20]
    4362:	693b      	ldr	r3, [r7, #16]
    4364:	429a      	cmp	r2, r3
    4366:	d304      	bcc.n	4372 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    4368:	231f      	movs	r3, #31
    436a:	18fb      	adds	r3, r7, r3
    436c:	22fb      	movs	r2, #251	; 0xfb
    436e:	701a      	strb	r2, [r3, #0]
			goto ERR;
    4370:	e00c      	b.n	438c <wait_for_firmware_start+0x88>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    4372:	68ba      	ldr	r2, [r7, #8]
    4374:	69bb      	ldr	r3, [r7, #24]
    4376:	429a      	cmp	r2, r3
    4378:	d1e6      	bne.n	4348 <wait_for_firmware_start+0x44>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    437a:	68bb      	ldr	r3, [r7, #8]
    437c:	4a08      	ldr	r2, [pc, #32]	; (43a0 <wait_for_firmware_start+0x9c>)
    437e:	4293      	cmp	r3, r2
    4380:	d104      	bne.n	438c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    4382:	4b06      	ldr	r3, [pc, #24]	; (439c <wait_for_firmware_start+0x98>)
    4384:	2100      	movs	r1, #0
    4386:	0018      	movs	r0, r3
    4388:	4b0a      	ldr	r3, [pc, #40]	; (43b4 <wait_for_firmware_start+0xb0>)
    438a:	4798      	blx	r3
	}
ERR:
	return ret;
    438c:	231f      	movs	r3, #31
    438e:	18fb      	adds	r3, r7, r3
    4390:	781b      	ldrb	r3, [r3, #0]
    4392:	b25b      	sxtb	r3, r3
}
    4394:	0018      	movs	r0, r3
    4396:	46bd      	mov	sp, r7
    4398:	b008      	add	sp, #32
    439a:	bd80      	pop	{r7, pc}
    439c:	0000108c 	.word	0x0000108c
    43a0:	02532636 	.word	0x02532636
    43a4:	000207ac 	.word	0x000207ac
    43a8:	d75dc1c3 	.word	0xd75dc1c3
    43ac:	00001b59 	.word	0x00001b59
    43b0:	00004739 	.word	0x00004739
    43b4:	0000477d 	.word	0x0000477d

000043b8 <chip_deinit>:

sint8 chip_deinit(void)
{
    43b8:	b590      	push	{r4, r7, lr}
    43ba:	b083      	sub	sp, #12
    43bc:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    43be:	2300      	movs	r3, #0
    43c0:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
    43c2:	1dbb      	adds	r3, r7, #6
    43c4:	220a      	movs	r2, #10
    43c6:	701a      	strb	r2, [r3, #0]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    43c8:	1dfc      	adds	r4, r7, #7
    43ca:	003a      	movs	r2, r7
    43cc:	23a0      	movs	r3, #160	; 0xa0
    43ce:	015b      	lsls	r3, r3, #5
    43d0:	0011      	movs	r1, r2
    43d2:	0018      	movs	r0, r3
    43d4:	4b3f      	ldr	r3, [pc, #252]	; (44d4 <chip_deinit+0x11c>)
    43d6:	4798      	blx	r3
    43d8:	0003      	movs	r3, r0
    43da:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    43dc:	1dfb      	adds	r3, r7, #7
    43de:	781b      	ldrb	r3, [r3, #0]
    43e0:	b25b      	sxtb	r3, r3
    43e2:	2b00      	cmp	r3, #0
    43e4:	d00c      	beq.n	4400 <chip_deinit+0x48>
		M2M_ERR("failed to de-initialize\n");
    43e6:	4a3c      	ldr	r2, [pc, #240]	; (44d8 <chip_deinit+0x120>)
    43e8:	493c      	ldr	r1, [pc, #240]	; (44dc <chip_deinit+0x124>)
    43ea:	4b3d      	ldr	r3, [pc, #244]	; (44e0 <chip_deinit+0x128>)
    43ec:	0018      	movs	r0, r3
    43ee:	4b3d      	ldr	r3, [pc, #244]	; (44e4 <chip_deinit+0x12c>)
    43f0:	4798      	blx	r3
    43f2:	4b3d      	ldr	r3, [pc, #244]	; (44e8 <chip_deinit+0x130>)
    43f4:	0018      	movs	r0, r3
    43f6:	4b3d      	ldr	r3, [pc, #244]	; (44ec <chip_deinit+0x134>)
    43f8:	4798      	blx	r3
    43fa:	200d      	movs	r0, #13
    43fc:	4b3c      	ldr	r3, [pc, #240]	; (44f0 <chip_deinit+0x138>)
    43fe:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    4400:	683b      	ldr	r3, [r7, #0]
    4402:	4a3c      	ldr	r2, [pc, #240]	; (44f4 <chip_deinit+0x13c>)
    4404:	4013      	ands	r3, r2
    4406:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    4408:	683a      	ldr	r2, [r7, #0]
    440a:	1dfc      	adds	r4, r7, #7
    440c:	23a0      	movs	r3, #160	; 0xa0
    440e:	015b      	lsls	r3, r3, #5
    4410:	0011      	movs	r1, r2
    4412:	0018      	movs	r0, r3
    4414:	4b38      	ldr	r3, [pc, #224]	; (44f8 <chip_deinit+0x140>)
    4416:	4798      	blx	r3
    4418:	0003      	movs	r3, r0
    441a:	7023      	strb	r3, [r4, #0]

	if (ret != M2M_SUCCESS) {
    441c:	1dfb      	adds	r3, r7, #7
    441e:	781b      	ldrb	r3, [r3, #0]
    4420:	b25b      	sxtb	r3, r3
    4422:	2b00      	cmp	r3, #0
    4424:	d010      	beq.n	4448 <chip_deinit+0x90>
		M2M_ERR("Error while writing reg\n");
    4426:	4a35      	ldr	r2, [pc, #212]	; (44fc <chip_deinit+0x144>)
    4428:	492c      	ldr	r1, [pc, #176]	; (44dc <chip_deinit+0x124>)
    442a:	4b2d      	ldr	r3, [pc, #180]	; (44e0 <chip_deinit+0x128>)
    442c:	0018      	movs	r0, r3
    442e:	4b2d      	ldr	r3, [pc, #180]	; (44e4 <chip_deinit+0x12c>)
    4430:	4798      	blx	r3
    4432:	4b33      	ldr	r3, [pc, #204]	; (4500 <chip_deinit+0x148>)
    4434:	0018      	movs	r0, r3
    4436:	4b2d      	ldr	r3, [pc, #180]	; (44ec <chip_deinit+0x134>)
    4438:	4798      	blx	r3
    443a:	200d      	movs	r0, #13
    443c:	4b2c      	ldr	r3, [pc, #176]	; (44f0 <chip_deinit+0x138>)
    443e:	4798      	blx	r3
		return ret;
    4440:	1dfb      	adds	r3, r7, #7
    4442:	781b      	ldrb	r3, [r3, #0]
    4444:	b25b      	sxtb	r3, r3
    4446:	e041      	b.n	44cc <chip_deinit+0x114>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    4448:	1dfc      	adds	r4, r7, #7
    444a:	003a      	movs	r2, r7
    444c:	23a0      	movs	r3, #160	; 0xa0
    444e:	015b      	lsls	r3, r3, #5
    4450:	0011      	movs	r1, r2
    4452:	0018      	movs	r0, r3
    4454:	4b1f      	ldr	r3, [pc, #124]	; (44d4 <chip_deinit+0x11c>)
    4456:	4798      	blx	r3
    4458:	0003      	movs	r3, r0
    445a:	7023      	strb	r3, [r4, #0]
		if (ret != M2M_SUCCESS) {
    445c:	1dfb      	adds	r3, r7, #7
    445e:	781b      	ldrb	r3, [r3, #0]
    4460:	b25b      	sxtb	r3, r3
    4462:	2b00      	cmp	r3, #0
    4464:	d011      	beq.n	448a <chip_deinit+0xd2>
			M2M_ERR("Error while reading reg\n");
    4466:	238f      	movs	r3, #143	; 0x8f
    4468:	009a      	lsls	r2, r3, #2
    446a:	491c      	ldr	r1, [pc, #112]	; (44dc <chip_deinit+0x124>)
    446c:	4b1c      	ldr	r3, [pc, #112]	; (44e0 <chip_deinit+0x128>)
    446e:	0018      	movs	r0, r3
    4470:	4b1c      	ldr	r3, [pc, #112]	; (44e4 <chip_deinit+0x12c>)
    4472:	4798      	blx	r3
    4474:	4b23      	ldr	r3, [pc, #140]	; (4504 <chip_deinit+0x14c>)
    4476:	0018      	movs	r0, r3
    4478:	4b1c      	ldr	r3, [pc, #112]	; (44ec <chip_deinit+0x134>)
    447a:	4798      	blx	r3
    447c:	200d      	movs	r0, #13
    447e:	4b1c      	ldr	r3, [pc, #112]	; (44f0 <chip_deinit+0x138>)
    4480:	4798      	blx	r3
			return ret;
    4482:	1dfb      	adds	r3, r7, #7
    4484:	781b      	ldrb	r3, [r3, #0]
    4486:	b25b      	sxtb	r3, r3
    4488:	e020      	b.n	44cc <chip_deinit+0x114>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    448a:	683a      	ldr	r2, [r7, #0]
    448c:	2380      	movs	r3, #128	; 0x80
    448e:	00db      	lsls	r3, r3, #3
    4490:	4013      	ands	r3, r2
    4492:	d017      	beq.n	44c4 <chip_deinit+0x10c>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    4494:	683b      	ldr	r3, [r7, #0]
    4496:	4a17      	ldr	r2, [pc, #92]	; (44f4 <chip_deinit+0x13c>)
    4498:	4013      	ands	r3, r2
    449a:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    449c:	683a      	ldr	r2, [r7, #0]
    449e:	1dfc      	adds	r4, r7, #7
    44a0:	23a0      	movs	r3, #160	; 0xa0
    44a2:	015b      	lsls	r3, r3, #5
    44a4:	0011      	movs	r1, r2
    44a6:	0018      	movs	r0, r3
    44a8:	4b13      	ldr	r3, [pc, #76]	; (44f8 <chip_deinit+0x140>)
    44aa:	4798      	blx	r3
    44ac:	0003      	movs	r3, r0
    44ae:	7023      	strb	r3, [r4, #0]
			timeout--;
    44b0:	1dbb      	adds	r3, r7, #6
    44b2:	781a      	ldrb	r2, [r3, #0]
    44b4:	1dbb      	adds	r3, r7, #6
    44b6:	3a01      	subs	r2, #1
    44b8:	701a      	strb	r2, [r3, #0]
		} else {
			break;
		}

	} while (timeout);
    44ba:	1dbb      	adds	r3, r7, #6
    44bc:	781b      	ldrb	r3, [r3, #0]
    44be:	2b00      	cmp	r3, #0
    44c0:	d1c2      	bne.n	4448 <chip_deinit+0x90>
    44c2:	e000      	b.n	44c6 <chip_deinit+0x10e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
			timeout--;
		} else {
			break;
    44c4:	46c0      	nop			; (mov r8, r8)
		}

	} while (timeout);

	return ret;
    44c6:	1dfb      	adds	r3, r7, #7
    44c8:	781b      	ldrb	r3, [r3, #0]
    44ca:	b25b      	sxtb	r3, r3
}
    44cc:	0018      	movs	r0, r3
    44ce:	46bd      	mov	sp, r7
    44d0:	b003      	add	sp, #12
    44d2:	bd90      	pop	{r4, r7, pc}
    44d4:	00004759 	.word	0x00004759
    44d8:	0000022f 	.word	0x0000022f
    44dc:	00011708 	.word	0x00011708
    44e0:	000115d0 	.word	0x000115d0
    44e4:	0000fd31 	.word	0x0000fd31
    44e8:	00011670 	.word	0x00011670
    44ec:	0000fe51 	.word	0x0000fe51
    44f0:	0000fd65 	.word	0x0000fd65
    44f4:	fffffbff 	.word	0xfffffbff
    44f8:	0000477d 	.word	0x0000477d
    44fc:	00000235 	.word	0x00000235
    4500:	00011688 	.word	0x00011688
    4504:	000116a0 	.word	0x000116a0

00004508 <nmi_get_otp_mac_address>:
_EXIT:
	return s8Ret;
}

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    4508:	b590      	push	{r4, r7, lr}
    450a:	b089      	sub	sp, #36	; 0x24
    450c:	af00      	add	r7, sp, #0
    450e:	6078      	str	r0, [r7, #4]
    4510:	6039      	str	r1, [r7, #0]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    4512:	2308      	movs	r3, #8
    4514:	18fb      	adds	r3, r7, r3
    4516:	0018      	movs	r0, r3
    4518:	2308      	movs	r3, #8
    451a:	001a      	movs	r2, r3
    451c:	2100      	movs	r1, #0
    451e:	4b35      	ldr	r3, [pc, #212]	; (45f4 <nmi_get_otp_mac_address+0xec>)
    4520:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    4522:	231f      	movs	r3, #31
    4524:	18fc      	adds	r4, r7, r3
    4526:	2318      	movs	r3, #24
    4528:	18fb      	adds	r3, r7, r3
    452a:	4a33      	ldr	r2, [pc, #204]	; (45f8 <nmi_get_otp_mac_address+0xf0>)
    452c:	0019      	movs	r1, r3
    452e:	0010      	movs	r0, r2
    4530:	4b32      	ldr	r3, [pc, #200]	; (45fc <nmi_get_otp_mac_address+0xf4>)
    4532:	4798      	blx	r3
    4534:	0003      	movs	r3, r0
    4536:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    4538:	231f      	movs	r3, #31
    453a:	18fb      	adds	r3, r7, r3
    453c:	781b      	ldrb	r3, [r3, #0]
    453e:	b25b      	sxtb	r3, r3
    4540:	2b00      	cmp	r3, #0
    4542:	d145      	bne.n	45d0 <nmi_get_otp_mac_address+0xc8>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    4544:	69bb      	ldr	r3, [r7, #24]
    4546:	22c0      	movs	r2, #192	; 0xc0
    4548:	0292      	lsls	r2, r2, #10
    454a:	4313      	orrs	r3, r2
    454c:	221f      	movs	r2, #31
    454e:	18bc      	adds	r4, r7, r2
    4550:	2208      	movs	r2, #8
    4552:	18b9      	adds	r1, r7, r2
    4554:	2208      	movs	r2, #8
    4556:	0018      	movs	r0, r3
    4558:	4b29      	ldr	r3, [pc, #164]	; (4600 <nmi_get_otp_mac_address+0xf8>)
    455a:	4798      	blx	r3
    455c:	0003      	movs	r3, r0
    455e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    4560:	231f      	movs	r3, #31
    4562:	18fb      	adds	r3, r7, r3
    4564:	781b      	ldrb	r3, [r3, #0]
    4566:	b25b      	sxtb	r3, r3
    4568:	2b00      	cmp	r3, #0
    456a:	d133      	bne.n	45d4 <nmi_get_otp_mac_address+0xcc>
	u32RegValue = strgp.u32Mac_efuse_mib;
    456c:	2308      	movs	r3, #8
    456e:	18fb      	adds	r3, r7, r3
    4570:	681b      	ldr	r3, [r3, #0]
    4572:	61bb      	str	r3, [r7, #24]

	if(!EFUSED_MAC(u32RegValue)) {
    4574:	69bb      	ldr	r3, [r7, #24]
    4576:	0c1b      	lsrs	r3, r3, #16
    4578:	041b      	lsls	r3, r3, #16
    457a:	d106      	bne.n	458a <nmi_get_otp_mac_address+0x82>
		M2M_DBG("Default MAC\n");
		m2m_memset(pu8MacAddr, 0, 6);
    457c:	687b      	ldr	r3, [r7, #4]
    457e:	2206      	movs	r2, #6
    4580:	2100      	movs	r1, #0
    4582:	0018      	movs	r0, r3
    4584:	4b1f      	ldr	r3, [pc, #124]	; (4604 <nmi_get_otp_mac_address+0xfc>)
    4586:	4798      	blx	r3
		goto _EXIT_ERR;
    4588:	e025      	b.n	45d6 <nmi_get_otp_mac_address+0xce>
	}

	M2M_DBG("OTP MAC\n");
	u32RegValue >>=16;
    458a:	69bb      	ldr	r3, [r7, #24]
    458c:	0c1b      	lsrs	r3, r3, #16
    458e:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    4590:	69bb      	ldr	r3, [r7, #24]
    4592:	22c0      	movs	r2, #192	; 0xc0
    4594:	0292      	lsls	r2, r2, #10
    4596:	4313      	orrs	r3, r2
    4598:	221f      	movs	r2, #31
    459a:	18bc      	adds	r4, r7, r2
    459c:	2210      	movs	r2, #16
    459e:	18b9      	adds	r1, r7, r2
    45a0:	2206      	movs	r2, #6
    45a2:	0018      	movs	r0, r3
    45a4:	4b16      	ldr	r3, [pc, #88]	; (4600 <nmi_get_otp_mac_address+0xf8>)
    45a6:	4798      	blx	r3
    45a8:	0003      	movs	r3, r0
    45aa:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr,mac,6);
    45ac:	2310      	movs	r3, #16
    45ae:	18f9      	adds	r1, r7, r3
    45b0:	687b      	ldr	r3, [r7, #4]
    45b2:	2206      	movs	r2, #6
    45b4:	0018      	movs	r0, r3
    45b6:	4b14      	ldr	r3, [pc, #80]	; (4608 <nmi_get_otp_mac_address+0x100>)
    45b8:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    45ba:	683b      	ldr	r3, [r7, #0]
    45bc:	2b00      	cmp	r3, #0
    45be:	d002      	beq.n	45c6 <nmi_get_otp_mac_address+0xbe>
    45c0:	683b      	ldr	r3, [r7, #0]
    45c2:	2201      	movs	r2, #1
    45c4:	701a      	strb	r2, [r3, #0]
	return ret;
    45c6:	231f      	movs	r3, #31
    45c8:	18fb      	adds	r3, r7, r3
    45ca:	781b      	ldrb	r3, [r3, #0]
    45cc:	b25b      	sxtb	r3, r3
    45ce:	e00c      	b.n	45ea <nmi_get_otp_mac_address+0xe2>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    45d0:	46c0      	nop			; (mov r8, r8)
    45d2:	e000      	b.n	45d6 <nmi_get_otp_mac_address+0xce>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    45d4:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    45d6:	683b      	ldr	r3, [r7, #0]
    45d8:	2b00      	cmp	r3, #0
    45da:	d002      	beq.n	45e2 <nmi_get_otp_mac_address+0xda>
    45dc:	683b      	ldr	r3, [r7, #0]
    45de:	2200      	movs	r2, #0
    45e0:	701a      	strb	r2, [r3, #0]
	return ret;
    45e2:	231f      	movs	r3, #31
    45e4:	18fb      	adds	r3, r7, r3
    45e6:	781b      	ldrb	r3, [r3, #0]
    45e8:	b25b      	sxtb	r3, r3
}
    45ea:	0018      	movs	r0, r3
    45ec:	46bd      	mov	sp, r7
    45ee:	b009      	add	sp, #36	; 0x24
    45f0:	bd90      	pop	{r4, r7, pc}
    45f2:	46c0      	nop			; (mov r8, r8)
    45f4:	0000f77b 	.word	0x0000f77b
    45f8:	000c0008 	.word	0x000c0008
    45fc:	00004759 	.word	0x00004759
    4600:	000047cd 	.word	0x000047cd
    4604:	0000243d 	.word	0x0000243d
    4608:	00002401 	.word	0x00002401

0000460c <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    460c:	b590      	push	{r4, r7, lr}
    460e:	b089      	sub	sp, #36	; 0x24
    4610:	af00      	add	r7, sp, #0
    4612:	6078      	str	r0, [r7, #4]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    4614:	2308      	movs	r3, #8
    4616:	18fb      	adds	r3, r7, r3
    4618:	0018      	movs	r0, r3
    461a:	2308      	movs	r3, #8
    461c:	001a      	movs	r2, r3
    461e:	2100      	movs	r1, #0
    4620:	4b29      	ldr	r3, [pc, #164]	; (46c8 <nmi_get_mac_address+0xbc>)
    4622:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    4624:	231f      	movs	r3, #31
    4626:	18fc      	adds	r4, r7, r3
    4628:	2318      	movs	r3, #24
    462a:	18fb      	adds	r3, r7, r3
    462c:	4a27      	ldr	r2, [pc, #156]	; (46cc <nmi_get_mac_address+0xc0>)
    462e:	0019      	movs	r1, r3
    4630:	0010      	movs	r0, r2
    4632:	4b27      	ldr	r3, [pc, #156]	; (46d0 <nmi_get_mac_address+0xc4>)
    4634:	4798      	blx	r3
    4636:	0003      	movs	r3, r0
    4638:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    463a:	231f      	movs	r3, #31
    463c:	18fb      	adds	r3, r7, r3
    463e:	781b      	ldrb	r3, [r3, #0]
    4640:	b25b      	sxtb	r3, r3
    4642:	2b00      	cmp	r3, #0
    4644:	d135      	bne.n	46b2 <nmi_get_mac_address+0xa6>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    4646:	69bb      	ldr	r3, [r7, #24]
    4648:	22c0      	movs	r2, #192	; 0xc0
    464a:	0292      	lsls	r2, r2, #10
    464c:	4313      	orrs	r3, r2
    464e:	221f      	movs	r2, #31
    4650:	18bc      	adds	r4, r7, r2
    4652:	2208      	movs	r2, #8
    4654:	18b9      	adds	r1, r7, r2
    4656:	2208      	movs	r2, #8
    4658:	0018      	movs	r0, r3
    465a:	4b1e      	ldr	r3, [pc, #120]	; (46d4 <nmi_get_mac_address+0xc8>)
    465c:	4798      	blx	r3
    465e:	0003      	movs	r3, r0
    4660:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    4662:	231f      	movs	r3, #31
    4664:	18fb      	adds	r3, r7, r3
    4666:	781b      	ldrb	r3, [r3, #0]
    4668:	b25b      	sxtb	r3, r3
    466a:	2b00      	cmp	r3, #0
    466c:	d123      	bne.n	46b6 <nmi_get_mac_address+0xaa>
	u32RegValue = strgp.u32Mac_efuse_mib;
    466e:	2308      	movs	r3, #8
    4670:	18fb      	adds	r3, r7, r3
    4672:	681b      	ldr	r3, [r3, #0]
    4674:	61bb      	str	r3, [r7, #24]

	u32RegValue &=0x0000ffff;
    4676:	69bb      	ldr	r3, [r7, #24]
    4678:	041b      	lsls	r3, r3, #16
    467a:	0c1b      	lsrs	r3, r3, #16
    467c:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    467e:	69bb      	ldr	r3, [r7, #24]
    4680:	22c0      	movs	r2, #192	; 0xc0
    4682:	0292      	lsls	r2, r2, #10
    4684:	4313      	orrs	r3, r2
    4686:	221f      	movs	r2, #31
    4688:	18bc      	adds	r4, r7, r2
    468a:	2210      	movs	r2, #16
    468c:	18b9      	adds	r1, r7, r2
    468e:	2206      	movs	r2, #6
    4690:	0018      	movs	r0, r3
    4692:	4b10      	ldr	r3, [pc, #64]	; (46d4 <nmi_get_mac_address+0xc8>)
    4694:	4798      	blx	r3
    4696:	0003      	movs	r3, r0
    4698:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr, mac, 6);
    469a:	2310      	movs	r3, #16
    469c:	18f9      	adds	r1, r7, r3
    469e:	687b      	ldr	r3, [r7, #4]
    46a0:	2206      	movs	r2, #6
    46a2:	0018      	movs	r0, r3
    46a4:	4b0c      	ldr	r3, [pc, #48]	; (46d8 <nmi_get_mac_address+0xcc>)
    46a6:	4798      	blx	r3

	return ret;
    46a8:	231f      	movs	r3, #31
    46aa:	18fb      	adds	r3, r7, r3
    46ac:	781b      	ldrb	r3, [r3, #0]
    46ae:	b25b      	sxtb	r3, r3
    46b0:	e006      	b.n	46c0 <nmi_get_mac_address+0xb4>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    46b2:	46c0      	nop			; (mov r8, r8)
    46b4:	e000      	b.n	46b8 <nmi_get_mac_address+0xac>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    46b6:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr, mac, 6);

	return ret;

_EXIT_ERR:
	return ret;
    46b8:	231f      	movs	r3, #31
    46ba:	18fb      	adds	r3, r7, r3
    46bc:	781b      	ldrb	r3, [r3, #0]
    46be:	b25b      	sxtb	r3, r3
    46c0:	0018      	movs	r0, r3
    46c2:	46bd      	mov	sp, r7
    46c4:	b009      	add	sp, #36	; 0x24
    46c6:	bd90      	pop	{r4, r7, pc}
    46c8:	0000f77b 	.word	0x0000f77b
    46cc:	000c0008 	.word	0x000c0008
    46d0:	00004759 	.word	0x00004759
    46d4:	000047cd 	.word	0x000047cd
    46d8:	00002401 	.word	0x00002401

000046dc <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    46dc:	b590      	push	{r4, r7, lr}
    46de:	b085      	sub	sp, #20
    46e0:	af00      	add	r7, sp, #0
    46e2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    46e4:	230f      	movs	r3, #15
    46e6:	18fb      	adds	r3, r7, r3
    46e8:	2200      	movs	r2, #0
    46ea:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    46ec:	230f      	movs	r3, #15
    46ee:	18fc      	adds	r4, r7, r3
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	0018      	movs	r0, r3
    46f4:	4b05      	ldr	r3, [pc, #20]	; (470c <nm_bus_iface_init+0x30>)
    46f6:	4798      	blx	r3
    46f8:	0003      	movs	r3, r0
    46fa:	7023      	strb	r3, [r4, #0]

	return ret;
    46fc:	230f      	movs	r3, #15
    46fe:	18fb      	adds	r3, r7, r3
    4700:	781b      	ldrb	r3, [r3, #0]
    4702:	b25b      	sxtb	r3, r3
}
    4704:	0018      	movs	r0, r3
    4706:	46bd      	mov	sp, r7
    4708:	b005      	add	sp, #20
    470a:	bd90      	pop	{r4, r7, pc}
    470c:	00002245 	.word	0x00002245

00004710 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    4710:	b590      	push	{r4, r7, lr}
    4712:	b083      	sub	sp, #12
    4714:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    4716:	1dfb      	adds	r3, r7, #7
    4718:	2200      	movs	r2, #0
    471a:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    471c:	1dfc      	adds	r4, r7, #7
    471e:	4b05      	ldr	r3, [pc, #20]	; (4734 <nm_bus_iface_deinit+0x24>)
    4720:	4798      	blx	r3
    4722:	0003      	movs	r3, r0
    4724:	7023      	strb	r3, [r4, #0]

	return ret;
    4726:	1dfb      	adds	r3, r7, #7
    4728:	781b      	ldrb	r3, [r3, #0]
    472a:	b25b      	sxtb	r3, r3
}
    472c:	0018      	movs	r0, r3
    472e:	46bd      	mov	sp, r7
    4730:	b003      	add	sp, #12
    4732:	bd90      	pop	{r4, r7, pc}
    4734:	000023bd 	.word	0x000023bd

00004738 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    4738:	b580      	push	{r7, lr}
    473a:	b082      	sub	sp, #8
    473c:	af00      	add	r7, sp, #0
    473e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    4740:	687b      	ldr	r3, [r7, #4]
    4742:	0018      	movs	r0, r3
    4744:	4b03      	ldr	r3, [pc, #12]	; (4754 <nm_read_reg+0x1c>)
    4746:	4798      	blx	r3
    4748:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    474a:	0018      	movs	r0, r3
    474c:	46bd      	mov	sp, r7
    474e:	b002      	add	sp, #8
    4750:	bd80      	pop	{r7, pc}
    4752:	46c0      	nop			; (mov r8, r8)
    4754:	00005dd1 	.word	0x00005dd1

00004758 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4758:	b580      	push	{r7, lr}
    475a:	b082      	sub	sp, #8
    475c:	af00      	add	r7, sp, #0
    475e:	6078      	str	r0, [r7, #4]
    4760:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    4762:	683a      	ldr	r2, [r7, #0]
    4764:	687b      	ldr	r3, [r7, #4]
    4766:	0011      	movs	r1, r2
    4768:	0018      	movs	r0, r3
    476a:	4b03      	ldr	r3, [pc, #12]	; (4778 <nm_read_reg_with_ret+0x20>)
    476c:	4798      	blx	r3
    476e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    4770:	0018      	movs	r0, r3
    4772:	46bd      	mov	sp, r7
    4774:	b002      	add	sp, #8
    4776:	bd80      	pop	{r7, pc}
    4778:	00005df5 	.word	0x00005df5

0000477c <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    477c:	b580      	push	{r7, lr}
    477e:	b082      	sub	sp, #8
    4780:	af00      	add	r7, sp, #0
    4782:	6078      	str	r0, [r7, #4]
    4784:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    4786:	683a      	ldr	r2, [r7, #0]
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	0011      	movs	r1, r2
    478c:	0018      	movs	r0, r3
    478e:	4b03      	ldr	r3, [pc, #12]	; (479c <nm_write_reg+0x20>)
    4790:	4798      	blx	r3
    4792:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    4794:	0018      	movs	r0, r3
    4796:	46bd      	mov	sp, r7
    4798:	b002      	add	sp, #8
    479a:	bd80      	pop	{r7, pc}
    479c:	00005e45 	.word	0x00005e45

000047a0 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    47a0:	b580      	push	{r7, lr}
    47a2:	b084      	sub	sp, #16
    47a4:	af00      	add	r7, sp, #0
    47a6:	60f8      	str	r0, [r7, #12]
    47a8:	60b9      	str	r1, [r7, #8]
    47aa:	1dbb      	adds	r3, r7, #6
    47ac:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    47ae:	1dbb      	adds	r3, r7, #6
    47b0:	881a      	ldrh	r2, [r3, #0]
    47b2:	68b9      	ldr	r1, [r7, #8]
    47b4:	68fb      	ldr	r3, [r7, #12]
    47b6:	0018      	movs	r0, r3
    47b8:	4b03      	ldr	r3, [pc, #12]	; (47c8 <p_nm_read_block+0x28>)
    47ba:	4798      	blx	r3
    47bc:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    47be:	0018      	movs	r0, r3
    47c0:	46bd      	mov	sp, r7
    47c2:	b004      	add	sp, #16
    47c4:	bd80      	pop	{r7, pc}
    47c6:	46c0      	nop			; (mov r8, r8)
    47c8:	00005e95 	.word	0x00005e95

000047cc <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    47cc:	b580      	push	{r7, lr}
    47ce:	b086      	sub	sp, #24
    47d0:	af00      	add	r7, sp, #0
    47d2:	60f8      	str	r0, [r7, #12]
    47d4:	60b9      	str	r1, [r7, #8]
    47d6:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    47d8:	4b2d      	ldr	r3, [pc, #180]	; (4890 <nm_read_block+0xc4>)
    47da:	881a      	ldrh	r2, [r3, #0]
    47dc:	2310      	movs	r3, #16
    47de:	18fb      	adds	r3, r7, r3
    47e0:	3a08      	subs	r2, #8
    47e2:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    47e4:	2300      	movs	r3, #0
    47e6:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    47e8:	2313      	movs	r3, #19
    47ea:	18fb      	adds	r3, r7, r3
    47ec:	2200      	movs	r2, #0
    47ee:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    47f0:	2310      	movs	r3, #16
    47f2:	18fb      	adds	r3, r7, r3
    47f4:	881a      	ldrh	r2, [r3, #0]
    47f6:	687b      	ldr	r3, [r7, #4]
    47f8:	429a      	cmp	r2, r3
    47fa:	d313      	bcc.n	4824 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    47fc:	68ba      	ldr	r2, [r7, #8]
    47fe:	697b      	ldr	r3, [r7, #20]
    4800:	18d1      	adds	r1, r2, r3
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	b29a      	uxth	r2, r3
    4806:	68fb      	ldr	r3, [r7, #12]
    4808:	0018      	movs	r0, r3
    480a:	4b22      	ldr	r3, [pc, #136]	; (4894 <nm_read_block+0xc8>)
    480c:	4798      	blx	r3
    480e:	0003      	movs	r3, r0
    4810:	b2da      	uxtb	r2, r3
    4812:	2313      	movs	r3, #19
    4814:	18fb      	adds	r3, r7, r3
    4816:	781b      	ldrb	r3, [r3, #0]
    4818:	18d3      	adds	r3, r2, r3
    481a:	b2da      	uxtb	r2, r3
    481c:	2313      	movs	r3, #19
    481e:	18fb      	adds	r3, r7, r3
    4820:	701a      	strb	r2, [r3, #0]
			break;
    4822:	e02d      	b.n	4880 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4824:	68ba      	ldr	r2, [r7, #8]
    4826:	697b      	ldr	r3, [r7, #20]
    4828:	18d1      	adds	r1, r2, r3
    482a:	2310      	movs	r3, #16
    482c:	18fb      	adds	r3, r7, r3
    482e:	881a      	ldrh	r2, [r3, #0]
    4830:	68fb      	ldr	r3, [r7, #12]
    4832:	0018      	movs	r0, r3
    4834:	4b17      	ldr	r3, [pc, #92]	; (4894 <nm_read_block+0xc8>)
    4836:	4798      	blx	r3
    4838:	0003      	movs	r3, r0
    483a:	b2da      	uxtb	r2, r3
    483c:	2313      	movs	r3, #19
    483e:	18fb      	adds	r3, r7, r3
    4840:	781b      	ldrb	r3, [r3, #0]
    4842:	18d3      	adds	r3, r2, r3
    4844:	b2da      	uxtb	r2, r3
    4846:	2313      	movs	r3, #19
    4848:	18fb      	adds	r3, r7, r3
    484a:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    484c:	2313      	movs	r3, #19
    484e:	18fb      	adds	r3, r7, r3
    4850:	781b      	ldrb	r3, [r3, #0]
    4852:	b25b      	sxtb	r3, r3
    4854:	2b00      	cmp	r3, #0
    4856:	d112      	bne.n	487e <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    4858:	2310      	movs	r3, #16
    485a:	18fb      	adds	r3, r7, r3
    485c:	881b      	ldrh	r3, [r3, #0]
    485e:	687a      	ldr	r2, [r7, #4]
    4860:	1ad3      	subs	r3, r2, r3
    4862:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    4864:	2310      	movs	r3, #16
    4866:	18fb      	adds	r3, r7, r3
    4868:	881b      	ldrh	r3, [r3, #0]
    486a:	697a      	ldr	r2, [r7, #20]
    486c:	18d3      	adds	r3, r2, r3
    486e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    4870:	2310      	movs	r3, #16
    4872:	18fb      	adds	r3, r7, r3
    4874:	881b      	ldrh	r3, [r3, #0]
    4876:	68fa      	ldr	r2, [r7, #12]
    4878:	18d3      	adds	r3, r2, r3
    487a:	60fb      	str	r3, [r7, #12]
		}
	}
    487c:	e7b8      	b.n	47f0 <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    487e:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    4880:	2313      	movs	r3, #19
    4882:	18fb      	adds	r3, r7, r3
    4884:	781b      	ldrb	r3, [r3, #0]
    4886:	b25b      	sxtb	r3, r3
}
    4888:	0018      	movs	r0, r3
    488a:	46bd      	mov	sp, r7
    488c:	b006      	add	sp, #24
    488e:	bd80      	pop	{r7, pc}
    4890:	20000010 	.word	0x20000010
    4894:	000047a1 	.word	0x000047a1

00004898 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4898:	b580      	push	{r7, lr}
    489a:	b084      	sub	sp, #16
    489c:	af00      	add	r7, sp, #0
    489e:	60f8      	str	r0, [r7, #12]
    48a0:	60b9      	str	r1, [r7, #8]
    48a2:	1dbb      	adds	r3, r7, #6
    48a4:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    48a6:	1dbb      	adds	r3, r7, #6
    48a8:	881a      	ldrh	r2, [r3, #0]
    48aa:	68b9      	ldr	r1, [r7, #8]
    48ac:	68fb      	ldr	r3, [r7, #12]
    48ae:	0018      	movs	r0, r3
    48b0:	4b03      	ldr	r3, [pc, #12]	; (48c0 <p_nm_write_block+0x28>)
    48b2:	4798      	blx	r3
    48b4:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    48b6:	0018      	movs	r0, r3
    48b8:	46bd      	mov	sp, r7
    48ba:	b004      	add	sp, #16
    48bc:	bd80      	pop	{r7, pc}
    48be:	46c0      	nop			; (mov r8, r8)
    48c0:	00005eed 	.word	0x00005eed

000048c4 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    48c4:	b580      	push	{r7, lr}
    48c6:	b086      	sub	sp, #24
    48c8:	af00      	add	r7, sp, #0
    48ca:	60f8      	str	r0, [r7, #12]
    48cc:	60b9      	str	r1, [r7, #8]
    48ce:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    48d0:	4b2d      	ldr	r3, [pc, #180]	; (4988 <nm_write_block+0xc4>)
    48d2:	881a      	ldrh	r2, [r3, #0]
    48d4:	2310      	movs	r3, #16
    48d6:	18fb      	adds	r3, r7, r3
    48d8:	3a08      	subs	r2, #8
    48da:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    48dc:	2300      	movs	r3, #0
    48de:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    48e0:	2313      	movs	r3, #19
    48e2:	18fb      	adds	r3, r7, r3
    48e4:	2200      	movs	r2, #0
    48e6:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    48e8:	2310      	movs	r3, #16
    48ea:	18fb      	adds	r3, r7, r3
    48ec:	881a      	ldrh	r2, [r3, #0]
    48ee:	687b      	ldr	r3, [r7, #4]
    48f0:	429a      	cmp	r2, r3
    48f2:	d313      	bcc.n	491c <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    48f4:	68ba      	ldr	r2, [r7, #8]
    48f6:	697b      	ldr	r3, [r7, #20]
    48f8:	18d1      	adds	r1, r2, r3
    48fa:	687b      	ldr	r3, [r7, #4]
    48fc:	b29a      	uxth	r2, r3
    48fe:	68fb      	ldr	r3, [r7, #12]
    4900:	0018      	movs	r0, r3
    4902:	4b22      	ldr	r3, [pc, #136]	; (498c <nm_write_block+0xc8>)
    4904:	4798      	blx	r3
    4906:	0003      	movs	r3, r0
    4908:	b2da      	uxtb	r2, r3
    490a:	2313      	movs	r3, #19
    490c:	18fb      	adds	r3, r7, r3
    490e:	781b      	ldrb	r3, [r3, #0]
    4910:	18d3      	adds	r3, r2, r3
    4912:	b2da      	uxtb	r2, r3
    4914:	2313      	movs	r3, #19
    4916:	18fb      	adds	r3, r7, r3
    4918:	701a      	strb	r2, [r3, #0]
			break;
    491a:	e02d      	b.n	4978 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    491c:	68ba      	ldr	r2, [r7, #8]
    491e:	697b      	ldr	r3, [r7, #20]
    4920:	18d1      	adds	r1, r2, r3
    4922:	2310      	movs	r3, #16
    4924:	18fb      	adds	r3, r7, r3
    4926:	881a      	ldrh	r2, [r3, #0]
    4928:	68fb      	ldr	r3, [r7, #12]
    492a:	0018      	movs	r0, r3
    492c:	4b17      	ldr	r3, [pc, #92]	; (498c <nm_write_block+0xc8>)
    492e:	4798      	blx	r3
    4930:	0003      	movs	r3, r0
    4932:	b2da      	uxtb	r2, r3
    4934:	2313      	movs	r3, #19
    4936:	18fb      	adds	r3, r7, r3
    4938:	781b      	ldrb	r3, [r3, #0]
    493a:	18d3      	adds	r3, r2, r3
    493c:	b2da      	uxtb	r2, r3
    493e:	2313      	movs	r3, #19
    4940:	18fb      	adds	r3, r7, r3
    4942:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    4944:	2313      	movs	r3, #19
    4946:	18fb      	adds	r3, r7, r3
    4948:	781b      	ldrb	r3, [r3, #0]
    494a:	b25b      	sxtb	r3, r3
    494c:	2b00      	cmp	r3, #0
    494e:	d112      	bne.n	4976 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    4950:	2310      	movs	r3, #16
    4952:	18fb      	adds	r3, r7, r3
    4954:	881b      	ldrh	r3, [r3, #0]
    4956:	687a      	ldr	r2, [r7, #4]
    4958:	1ad3      	subs	r3, r2, r3
    495a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    495c:	2310      	movs	r3, #16
    495e:	18fb      	adds	r3, r7, r3
    4960:	881b      	ldrh	r3, [r3, #0]
    4962:	697a      	ldr	r2, [r7, #20]
    4964:	18d3      	adds	r3, r2, r3
    4966:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    4968:	2310      	movs	r3, #16
    496a:	18fb      	adds	r3, r7, r3
    496c:	881b      	ldrh	r3, [r3, #0]
    496e:	68fa      	ldr	r2, [r7, #12]
    4970:	18d3      	adds	r3, r2, r3
    4972:	60fb      	str	r3, [r7, #12]
		}
	}
    4974:	e7b8      	b.n	48e8 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    4976:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    4978:	2313      	movs	r3, #19
    497a:	18fb      	adds	r3, r7, r3
    497c:	781b      	ldrb	r3, [r3, #0]
    497e:	b25b      	sxtb	r3, r3
}
    4980:	0018      	movs	r0, r3
    4982:	46bd      	mov	sp, r7
    4984:	b006      	add	sp, #24
    4986:	bd80      	pop	{r7, pc}
    4988:	20000010 	.word	0x20000010
    498c:	00004899 	.word	0x00004899

00004990 <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    4990:	b590      	push	{r4, r7, lr}
    4992:	b087      	sub	sp, #28
    4994:	af00      	add	r7, sp, #0
    4996:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    4998:	2300      	movs	r3, #0
    499a:	60fb      	str	r3, [r7, #12]
	sint8	ret = M2M_SUCCESS;
    499c:	2317      	movs	r3, #23
    499e:	18fb      	adds	r3, r7, r3
    49a0:	2200      	movs	r2, #0
    49a2:	701a      	strb	r2, [r3, #0]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    49a4:	2317      	movs	r3, #23
    49a6:	18fc      	adds	r4, r7, r3
    49a8:	230c      	movs	r3, #12
    49aa:	18fb      	adds	r3, r7, r3
    49ac:	4a4c      	ldr	r2, [pc, #304]	; (4ae0 <nm_get_firmware_info+0x150>)
    49ae:	0019      	movs	r1, r3
    49b0:	0010      	movs	r0, r2
    49b2:	4b4c      	ldr	r3, [pc, #304]	; (4ae4 <nm_get_firmware_info+0x154>)
    49b4:	4798      	blx	r3
    49b6:	0003      	movs	r3, r0
    49b8:	7023      	strb	r3, [r4, #0]
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    49ba:	68fb      	ldr	r3, [r7, #12]
    49bc:	4a4a      	ldr	r2, [pc, #296]	; (4ae8 <nm_get_firmware_info+0x158>)
    49be:	4293      	cmp	r3, r2
    49c0:	d10a      	bne.n	49d8 <nm_get_firmware_info+0x48>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    49c2:	2317      	movs	r3, #23
    49c4:	18fc      	adds	r4, r7, r3
    49c6:	230c      	movs	r3, #12
    49c8:	18fb      	adds	r3, r7, r3
    49ca:	4a48      	ldr	r2, [pc, #288]	; (4aec <nm_get_firmware_info+0x15c>)
    49cc:	0019      	movs	r1, r3
    49ce:	0010      	movs	r0, r2
    49d0:	4b44      	ldr	r3, [pc, #272]	; (4ae4 <nm_get_firmware_info+0x154>)
    49d2:	4798      	blx	r3
    49d4:	0003      	movs	r3, r0
    49d6:	7023      	strb	r3, [r4, #0]
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    49d8:	68fb      	ldr	r3, [r7, #12]
    49da:	0c1b      	lsrs	r3, r3, #16
    49dc:	121b      	asrs	r3, r3, #8
    49de:	b2da      	uxtb	r2, r3
    49e0:	687b      	ldr	r3, [r7, #4]
    49e2:	71da      	strb	r2, [r3, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    49e4:	68fb      	ldr	r3, [r7, #12]
    49e6:	0c1b      	lsrs	r3, r3, #16
    49e8:	111b      	asrs	r3, r3, #4
    49ea:	b2db      	uxtb	r3, r3
    49ec:	220f      	movs	r2, #15
    49ee:	4013      	ands	r3, r2
    49f0:	b2da      	uxtb	r2, r3
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	721a      	strb	r2, [r3, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    49f6:	68fb      	ldr	r3, [r7, #12]
    49f8:	0c1b      	lsrs	r3, r3, #16
    49fa:	b2db      	uxtb	r3, r3
    49fc:	220f      	movs	r2, #15
    49fe:	4013      	ands	r3, r2
    4a00:	b2da      	uxtb	r2, r3
    4a02:	687b      	ldr	r3, [r7, #4]
    4a04:	725a      	strb	r2, [r3, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    4a06:	68fb      	ldr	r3, [r7, #12]
    4a08:	121b      	asrs	r3, r3, #8
    4a0a:	b2da      	uxtb	r2, r3
    4a0c:	687b      	ldr	r3, [r7, #4]
    4a0e:	711a      	strb	r2, [r3, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    4a10:	68fb      	ldr	r3, [r7, #12]
    4a12:	111b      	asrs	r3, r3, #4
    4a14:	b2db      	uxtb	r3, r3
    4a16:	220f      	movs	r2, #15
    4a18:	4013      	ands	r3, r2
    4a1a:	b2da      	uxtb	r2, r3
    4a1c:	687b      	ldr	r3, [r7, #4]
    4a1e:	715a      	strb	r2, [r3, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    4a20:	68fb      	ldr	r3, [r7, #12]
    4a22:	b2db      	uxtb	r3, r3
    4a24:	220f      	movs	r2, #15
    4a26:	4013      	ands	r3, r2
    4a28:	b2da      	uxtb	r2, r3
    4a2a:	687b      	ldr	r3, [r7, #4]
    4a2c:	719a      	strb	r2, [r3, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    4a2e:	4b30      	ldr	r3, [pc, #192]	; (4af0 <nm_get_firmware_info+0x160>)
    4a30:	4798      	blx	r3
    4a32:	0002      	movs	r2, r0
    4a34:	687b      	ldr	r3, [r7, #4]
    4a36:	601a      	str	r2, [r3, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    4a38:	687b      	ldr	r3, [r7, #4]
    4a3a:	791b      	ldrb	r3, [r3, #4]
    4a3c:	021b      	lsls	r3, r3, #8
    4a3e:	b21a      	sxth	r2, r3
    4a40:	687b      	ldr	r3, [r7, #4]
    4a42:	795b      	ldrb	r3, [r3, #5]
    4a44:	011b      	lsls	r3, r3, #4
    4a46:	b21b      	sxth	r3, r3
    4a48:	21ff      	movs	r1, #255	; 0xff
    4a4a:	400b      	ands	r3, r1
    4a4c:	b21b      	sxth	r3, r3
    4a4e:	4313      	orrs	r3, r2
    4a50:	b21a      	sxth	r2, r3
    4a52:	687b      	ldr	r3, [r7, #4]
    4a54:	799b      	ldrb	r3, [r3, #6]
    4a56:	b21b      	sxth	r3, r3
    4a58:	210f      	movs	r1, #15
    4a5a:	400b      	ands	r3, r1
    4a5c:	b21b      	sxth	r3, r3
    4a5e:	4313      	orrs	r3, r2
    4a60:	b21a      	sxth	r2, r3
    4a62:	2314      	movs	r3, #20
    4a64:	18fb      	adds	r3, r7, r3
    4a66:	801a      	strh	r2, [r3, #0]
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    4a68:	2312      	movs	r3, #18
    4a6a:	18fb      	adds	r3, r7, r3
    4a6c:	4a21      	ldr	r2, [pc, #132]	; (4af4 <nm_get_firmware_info+0x164>)
    4a6e:	801a      	strh	r2, [r3, #0]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    4a70:	687b      	ldr	r3, [r7, #4]
    4a72:	79db      	ldrb	r3, [r3, #7]
    4a74:	021b      	lsls	r3, r3, #8
    4a76:	b21a      	sxth	r2, r3
    4a78:	687b      	ldr	r3, [r7, #4]
    4a7a:	7a1b      	ldrb	r3, [r3, #8]
    4a7c:	011b      	lsls	r3, r3, #4
    4a7e:	b21b      	sxth	r3, r3
    4a80:	21ff      	movs	r1, #255	; 0xff
    4a82:	400b      	ands	r3, r1
    4a84:	b21b      	sxth	r3, r3
    4a86:	4313      	orrs	r3, r2
    4a88:	b21a      	sxth	r2, r3
    4a8a:	687b      	ldr	r3, [r7, #4]
    4a8c:	7a5b      	ldrb	r3, [r3, #9]
    4a8e:	b21b      	sxth	r3, r3
    4a90:	210f      	movs	r1, #15
    4a92:	400b      	ands	r3, r1
    4a94:	b21b      	sxth	r3, r3
    4a96:	4313      	orrs	r3, r2
    4a98:	b21a      	sxth	r2, r3
    4a9a:	2310      	movs	r3, #16
    4a9c:	18fb      	adds	r3, r7, r3
    4a9e:	801a      	strh	r2, [r3, #0]
	if(curr_drv_ver <  min_req_drv_ver) {
    4aa0:	2312      	movs	r3, #18
    4aa2:	18fa      	adds	r2, r7, r3
    4aa4:	2310      	movs	r3, #16
    4aa6:	18fb      	adds	r3, r7, r3
    4aa8:	8812      	ldrh	r2, [r2, #0]
    4aaa:	881b      	ldrh	r3, [r3, #0]
    4aac:	429a      	cmp	r2, r3
    4aae:	d203      	bcs.n	4ab8 <nm_get_firmware_info+0x128>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    4ab0:	2317      	movs	r3, #23
    4ab2:	18fb      	adds	r3, r7, r3
    4ab4:	22f3      	movs	r2, #243	; 0xf3
    4ab6:	701a      	strb	r2, [r3, #0]
	}
	if(curr_drv_ver >  curr_firm_ver) {
    4ab8:	2312      	movs	r3, #18
    4aba:	18fa      	adds	r2, r7, r3
    4abc:	2314      	movs	r3, #20
    4abe:	18fb      	adds	r3, r7, r3
    4ac0:	8812      	ldrh	r2, [r2, #0]
    4ac2:	881b      	ldrh	r3, [r3, #0]
    4ac4:	429a      	cmp	r2, r3
    4ac6:	d903      	bls.n	4ad0 <nm_get_firmware_info+0x140>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    4ac8:	2317      	movs	r3, #23
    4aca:	18fb      	adds	r3, r7, r3
    4acc:	22f3      	movs	r2, #243	; 0xf3
    4ace:	701a      	strb	r2, [r3, #0]
	}
	return ret;
    4ad0:	2317      	movs	r3, #23
    4ad2:	18fb      	adds	r3, r7, r3
    4ad4:	781b      	ldrb	r3, [r3, #0]
    4ad6:	b25b      	sxtb	r3, r3
}
    4ad8:	0018      	movs	r0, r3
    4ada:	46bd      	mov	sp, r7
    4adc:	b007      	add	sp, #28
    4ade:	bd90      	pop	{r4, r7, pc}
    4ae0:	000207ac 	.word	0x000207ac
    4ae4:	00004759 	.word	0x00004759
    4ae8:	d75dc1c3 	.word	0xd75dc1c3
    4aec:	00001048 	.word	0x00001048
    4af0:	000040c5 	.word	0x000040c5
    4af4:	00001330 	.word	0x00001330

00004af8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    4af8:	b590      	push	{r4, r7, lr}
    4afa:	b085      	sub	sp, #20
    4afc:	af00      	add	r7, sp, #0
    4afe:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    4b00:	230f      	movs	r3, #15
    4b02:	18fb      	adds	r3, r7, r3
    4b04:	2200      	movs	r2, #0
    4b06:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    4b08:	687b      	ldr	r3, [r7, #4]
    4b0a:	2b00      	cmp	r3, #0
    4b0c:	d013      	beq.n	4b36 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    4b0e:	230e      	movs	r3, #14
    4b10:	18fb      	adds	r3, r7, r3
    4b12:	687a      	ldr	r2, [r7, #4]
    4b14:	7812      	ldrb	r2, [r2, #0]
    4b16:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    4b18:	230e      	movs	r3, #14
    4b1a:	18fb      	adds	r3, r7, r3
    4b1c:	781b      	ldrb	r3, [r3, #0]
    4b1e:	2b00      	cmp	r3, #0
    4b20:	d004      	beq.n	4b2c <nm_drv_init+0x34>
    4b22:	230e      	movs	r3, #14
    4b24:	18fb      	adds	r3, r7, r3
    4b26:	781b      	ldrb	r3, [r3, #0]
    4b28:	2b04      	cmp	r3, #4
    4b2a:	d908      	bls.n	4b3e <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    4b2c:	230e      	movs	r3, #14
    4b2e:	18fb      	adds	r3, r7, r3
    4b30:	2201      	movs	r2, #1
    4b32:	701a      	strb	r2, [r3, #0]
    4b34:	e003      	b.n	4b3e <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    4b36:	230e      	movs	r3, #14
    4b38:	18fb      	adds	r3, r7, r3
    4b3a:	2201      	movs	r2, #1
    4b3c:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    4b3e:	230f      	movs	r3, #15
    4b40:	18fc      	adds	r4, r7, r3
    4b42:	2000      	movs	r0, #0
    4b44:	4b40      	ldr	r3, [pc, #256]	; (4c48 <nm_drv_init+0x150>)
    4b46:	4798      	blx	r3
    4b48:	0003      	movs	r3, r0
    4b4a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4b4c:	230f      	movs	r3, #15
    4b4e:	18fb      	adds	r3, r7, r3
    4b50:	781b      	ldrb	r3, [r3, #0]
    4b52:	b25b      	sxtb	r3, r3
    4b54:	2b00      	cmp	r3, #0
    4b56:	d00e      	beq.n	4b76 <nm_drv_init+0x7e>
		M2M_ERR("[nmi start]: fail init bus\n");
    4b58:	2392      	movs	r3, #146	; 0x92
    4b5a:	005a      	lsls	r2, r3, #1
    4b5c:	493b      	ldr	r1, [pc, #236]	; (4c4c <nm_drv_init+0x154>)
    4b5e:	4b3c      	ldr	r3, [pc, #240]	; (4c50 <nm_drv_init+0x158>)
    4b60:	0018      	movs	r0, r3
    4b62:	4b3c      	ldr	r3, [pc, #240]	; (4c54 <nm_drv_init+0x15c>)
    4b64:	4798      	blx	r3
    4b66:	4b3c      	ldr	r3, [pc, #240]	; (4c58 <nm_drv_init+0x160>)
    4b68:	0018      	movs	r0, r3
    4b6a:	4b3c      	ldr	r3, [pc, #240]	; (4c5c <nm_drv_init+0x164>)
    4b6c:	4798      	blx	r3
    4b6e:	200d      	movs	r0, #13
    4b70:	4b3b      	ldr	r3, [pc, #236]	; (4c60 <nm_drv_init+0x168>)
    4b72:	4798      	blx	r3
		goto ERR1;
    4b74:	e05f      	b.n	4c36 <nm_drv_init+0x13e>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    4b76:	4b3b      	ldr	r3, [pc, #236]	; (4c64 <nm_drv_init+0x16c>)
    4b78:	0018      	movs	r0, r3
    4b7a:	4b36      	ldr	r3, [pc, #216]	; (4c54 <nm_drv_init+0x15c>)
    4b7c:	4798      	blx	r3
    4b7e:	4b3a      	ldr	r3, [pc, #232]	; (4c68 <nm_drv_init+0x170>)
    4b80:	4798      	blx	r3
    4b82:	0002      	movs	r2, r0
    4b84:	4b39      	ldr	r3, [pc, #228]	; (4c6c <nm_drv_init+0x174>)
    4b86:	0011      	movs	r1, r2
    4b88:	0018      	movs	r0, r3
    4b8a:	4b32      	ldr	r3, [pc, #200]	; (4c54 <nm_drv_init+0x15c>)
    4b8c:	4798      	blx	r3
    4b8e:	200d      	movs	r0, #13
    4b90:	4b33      	ldr	r3, [pc, #204]	; (4c60 <nm_drv_init+0x168>)
    4b92:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    4b94:	4b36      	ldr	r3, [pc, #216]	; (4c70 <nm_drv_init+0x178>)
    4b96:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    4b98:	230f      	movs	r3, #15
    4b9a:	18fc      	adds	r4, r7, r3
    4b9c:	230e      	movs	r3, #14
    4b9e:	18fb      	adds	r3, r7, r3
    4ba0:	781b      	ldrb	r3, [r3, #0]
    4ba2:	0018      	movs	r0, r3
    4ba4:	4b33      	ldr	r3, [pc, #204]	; (4c74 <nm_drv_init+0x17c>)
    4ba6:	4798      	blx	r3
    4ba8:	0003      	movs	r3, r0
    4baa:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4bac:	230f      	movs	r3, #15
    4bae:	18fb      	adds	r3, r7, r3
    4bb0:	781b      	ldrb	r3, [r3, #0]
    4bb2:	b25b      	sxtb	r3, r3
    4bb4:	2b00      	cmp	r3, #0
    4bb6:	d139      	bne.n	4c2c <nm_drv_init+0x134>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    4bb8:	230f      	movs	r3, #15
    4bba:	18fc      	adds	r4, r7, r3
    4bbc:	230e      	movs	r3, #14
    4bbe:	18fb      	adds	r3, r7, r3
    4bc0:	781b      	ldrb	r3, [r3, #0]
    4bc2:	0018      	movs	r0, r3
    4bc4:	4b2c      	ldr	r3, [pc, #176]	; (4c78 <nm_drv_init+0x180>)
    4bc6:	4798      	blx	r3
    4bc8:	0003      	movs	r3, r0
    4bca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4bcc:	230f      	movs	r3, #15
    4bce:	18fb      	adds	r3, r7, r3
    4bd0:	781b      	ldrb	r3, [r3, #0]
    4bd2:	b25b      	sxtb	r3, r3
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	d12b      	bne.n	4c30 <nm_drv_init+0x138>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    4bd8:	230e      	movs	r3, #14
    4bda:	18fb      	adds	r3, r7, r3
    4bdc:	781b      	ldrb	r3, [r3, #0]
    4bde:	2b02      	cmp	r3, #2
    4be0:	d029      	beq.n	4c36 <nm_drv_init+0x13e>
    4be2:	230e      	movs	r3, #14
    4be4:	18fb      	adds	r3, r7, r3
    4be6:	781b      	ldrb	r3, [r3, #0]
    4be8:	2b03      	cmp	r3, #3
    4bea:	d024      	beq.n	4c36 <nm_drv_init+0x13e>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    4bec:	230f      	movs	r3, #15
    4bee:	18fc      	adds	r4, r7, r3
    4bf0:	4b22      	ldr	r3, [pc, #136]	; (4c7c <nm_drv_init+0x184>)
    4bf2:	4798      	blx	r3
    4bf4:	0003      	movs	r3, r0
    4bf6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4bf8:	230f      	movs	r3, #15
    4bfa:	18fb      	adds	r3, r7, r3
    4bfc:	781b      	ldrb	r3, [r3, #0]
    4bfe:	b25b      	sxtb	r3, r3
    4c00:	2b00      	cmp	r3, #0
    4c02:	d00e      	beq.n	4c22 <nm_drv_init+0x12a>
		M2M_ERR("failed to enable interrupts..\n");
    4c04:	23ae      	movs	r3, #174	; 0xae
    4c06:	005a      	lsls	r2, r3, #1
    4c08:	4910      	ldr	r1, [pc, #64]	; (4c4c <nm_drv_init+0x154>)
    4c0a:	4b11      	ldr	r3, [pc, #68]	; (4c50 <nm_drv_init+0x158>)
    4c0c:	0018      	movs	r0, r3
    4c0e:	4b11      	ldr	r3, [pc, #68]	; (4c54 <nm_drv_init+0x15c>)
    4c10:	4798      	blx	r3
    4c12:	4b1b      	ldr	r3, [pc, #108]	; (4c80 <nm_drv_init+0x188>)
    4c14:	0018      	movs	r0, r3
    4c16:	4b11      	ldr	r3, [pc, #68]	; (4c5c <nm_drv_init+0x164>)
    4c18:	4798      	blx	r3
    4c1a:	200d      	movs	r0, #13
    4c1c:	4b10      	ldr	r3, [pc, #64]	; (4c60 <nm_drv_init+0x168>)
    4c1e:	4798      	blx	r3
		goto ERR2;
    4c20:	e007      	b.n	4c32 <nm_drv_init+0x13a>
	}
	
	return ret;
    4c22:	230f      	movs	r3, #15
    4c24:	18fb      	adds	r3, r7, r3
    4c26:	781b      	ldrb	r3, [r3, #0]
    4c28:	b25b      	sxtb	r3, r3
    4c2a:	e008      	b.n	4c3e <nm_drv_init+0x146>
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    4c2c:	46c0      	nop			; (mov r8, r8)
    4c2e:	e000      	b.n	4c32 <nm_drv_init+0x13a>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    4c30:	46c0      	nop			; (mov r8, r8)
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
    4c32:	4b14      	ldr	r3, [pc, #80]	; (4c84 <nm_drv_init+0x18c>)
    4c34:	4798      	blx	r3
ERR1:
	return ret;
    4c36:	230f      	movs	r3, #15
    4c38:	18fb      	adds	r3, r7, r3
    4c3a:	781b      	ldrb	r3, [r3, #0]
    4c3c:	b25b      	sxtb	r3, r3
}
    4c3e:	0018      	movs	r0, r3
    4c40:	46bd      	mov	sp, r7
    4c42:	b005      	add	sp, #20
    4c44:	bd90      	pop	{r4, r7, pc}
    4c46:	46c0      	nop			; (mov r8, r8)
    4c48:	000046dd 	.word	0x000046dd
    4c4c:	000117e0 	.word	0x000117e0
    4c50:	00011714 	.word	0x00011714
    4c54:	0000fd31 	.word	0x0000fd31
    4c58:	00011728 	.word	0x00011728
    4c5c:	0000fe51 	.word	0x0000fe51
    4c60:	0000fd65 	.word	0x0000fd65
    4c64:	00011744 	.word	0x00011744
    4c68:	000040c5 	.word	0x000040c5
    4c6c:	00011750 	.word	0x00011750
    4c70:	00005c71 	.word	0x00005c71
    4c74:	000041bd 	.word	0x000041bd
    4c78:	00004305 	.word	0x00004305
    4c7c:	00004009 	.word	0x00004009
    4c80:	00011760 	.word	0x00011760
    4c84:	00004711 	.word	0x00004711

00004c88 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    4c88:	b590      	push	{r4, r7, lr}
    4c8a:	b085      	sub	sp, #20
    4c8c:	af00      	add	r7, sp, #0
    4c8e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    4c90:	230f      	movs	r3, #15
    4c92:	18fc      	adds	r4, r7, r3
    4c94:	4b2d      	ldr	r3, [pc, #180]	; (4d4c <nm_drv_deinit+0xc4>)
    4c96:	4798      	blx	r3
    4c98:	0003      	movs	r3, r0
    4c9a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4c9c:	230f      	movs	r3, #15
    4c9e:	18fb      	adds	r3, r7, r3
    4ca0:	781b      	ldrb	r3, [r3, #0]
    4ca2:	b25b      	sxtb	r3, r3
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d00e      	beq.n	4cc6 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    4ca8:	23ba      	movs	r3, #186	; 0xba
    4caa:	005a      	lsls	r2, r3, #1
    4cac:	4928      	ldr	r1, [pc, #160]	; (4d50 <nm_drv_deinit+0xc8>)
    4cae:	4b29      	ldr	r3, [pc, #164]	; (4d54 <nm_drv_deinit+0xcc>)
    4cb0:	0018      	movs	r0, r3
    4cb2:	4b29      	ldr	r3, [pc, #164]	; (4d58 <nm_drv_deinit+0xd0>)
    4cb4:	4798      	blx	r3
    4cb6:	4b29      	ldr	r3, [pc, #164]	; (4d5c <nm_drv_deinit+0xd4>)
    4cb8:	0018      	movs	r0, r3
    4cba:	4b29      	ldr	r3, [pc, #164]	; (4d60 <nm_drv_deinit+0xd8>)
    4cbc:	4798      	blx	r3
    4cbe:	200d      	movs	r0, #13
    4cc0:	4b28      	ldr	r3, [pc, #160]	; (4d64 <nm_drv_deinit+0xdc>)
    4cc2:	4798      	blx	r3
		goto ERR1;
    4cc4:	e03a      	b.n	4d3c <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    4cc6:	230f      	movs	r3, #15
    4cc8:	18fc      	adds	r4, r7, r3
    4cca:	2000      	movs	r0, #0
    4ccc:	4b26      	ldr	r3, [pc, #152]	; (4d68 <nm_drv_deinit+0xe0>)
    4cce:	4798      	blx	r3
    4cd0:	0003      	movs	r3, r0
    4cd2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4cd4:	230f      	movs	r3, #15
    4cd6:	18fb      	adds	r3, r7, r3
    4cd8:	781b      	ldrb	r3, [r3, #0]
    4cda:	b25b      	sxtb	r3, r3
    4cdc:	2b00      	cmp	r3, #0
    4cde:	d00f      	beq.n	4d00 <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    4ce0:	237c      	movs	r3, #124	; 0x7c
    4ce2:	33ff      	adds	r3, #255	; 0xff
    4ce4:	001a      	movs	r2, r3
    4ce6:	491a      	ldr	r1, [pc, #104]	; (4d50 <nm_drv_deinit+0xc8>)
    4ce8:	4b1a      	ldr	r3, [pc, #104]	; (4d54 <nm_drv_deinit+0xcc>)
    4cea:	0018      	movs	r0, r3
    4cec:	4b1a      	ldr	r3, [pc, #104]	; (4d58 <nm_drv_deinit+0xd0>)
    4cee:	4798      	blx	r3
    4cf0:	4b1e      	ldr	r3, [pc, #120]	; (4d6c <nm_drv_deinit+0xe4>)
    4cf2:	0018      	movs	r0, r3
    4cf4:	4b1a      	ldr	r3, [pc, #104]	; (4d60 <nm_drv_deinit+0xd8>)
    4cf6:	4798      	blx	r3
    4cf8:	200d      	movs	r0, #13
    4cfa:	4b1a      	ldr	r3, [pc, #104]	; (4d64 <nm_drv_deinit+0xdc>)
    4cfc:	4798      	blx	r3
		goto ERR1;
    4cfe:	e01d      	b.n	4d3c <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    4d00:	230f      	movs	r3, #15
    4d02:	18fc      	adds	r4, r7, r3
    4d04:	4b1a      	ldr	r3, [pc, #104]	; (4d70 <nm_drv_deinit+0xe8>)
    4d06:	4798      	blx	r3
    4d08:	0003      	movs	r3, r0
    4d0a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4d0c:	230f      	movs	r3, #15
    4d0e:	18fb      	adds	r3, r7, r3
    4d10:	781b      	ldrb	r3, [r3, #0]
    4d12:	b25b      	sxtb	r3, r3
    4d14:	2b00      	cmp	r3, #0
    4d16:	d00f      	beq.n	4d38 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    4d18:	2382      	movs	r3, #130	; 0x82
    4d1a:	33ff      	adds	r3, #255	; 0xff
    4d1c:	001a      	movs	r2, r3
    4d1e:	490c      	ldr	r1, [pc, #48]	; (4d50 <nm_drv_deinit+0xc8>)
    4d20:	4b0c      	ldr	r3, [pc, #48]	; (4d54 <nm_drv_deinit+0xcc>)
    4d22:	0018      	movs	r0, r3
    4d24:	4b0c      	ldr	r3, [pc, #48]	; (4d58 <nm_drv_deinit+0xd0>)
    4d26:	4798      	blx	r3
    4d28:	4b12      	ldr	r3, [pc, #72]	; (4d74 <nm_drv_deinit+0xec>)
    4d2a:	0018      	movs	r0, r3
    4d2c:	4b0c      	ldr	r3, [pc, #48]	; (4d60 <nm_drv_deinit+0xd8>)
    4d2e:	4798      	blx	r3
    4d30:	200d      	movs	r0, #13
    4d32:	4b0c      	ldr	r3, [pc, #48]	; (4d64 <nm_drv_deinit+0xdc>)
    4d34:	4798      	blx	r3
		goto ERR1;
    4d36:	e001      	b.n	4d3c <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    4d38:	4b0f      	ldr	r3, [pc, #60]	; (4d78 <nm_drv_deinit+0xf0>)
    4d3a:	4798      	blx	r3
#endif

ERR1:
	return ret;
    4d3c:	230f      	movs	r3, #15
    4d3e:	18fb      	adds	r3, r7, r3
    4d40:	781b      	ldrb	r3, [r3, #0]
    4d42:	b25b      	sxtb	r3, r3
}
    4d44:	0018      	movs	r0, r3
    4d46:	46bd      	mov	sp, r7
    4d48:	b005      	add	sp, #20
    4d4a:	bd90      	pop	{r4, r7, pc}
    4d4c:	000043b9 	.word	0x000043b9
    4d50:	000117ec 	.word	0x000117ec
    4d54:	00011714 	.word	0x00011714
    4d58:	0000fd31 	.word	0x0000fd31
    4d5c:	00011780 	.word	0x00011780
    4d60:	0000fe51 	.word	0x0000fe51
    4d64:	0000fd65 	.word	0x0000fd65
    4d68:	00006e85 	.word	0x00006e85
    4d6c:	000117a0 	.word	0x000117a0
    4d70:	00004711 	.word	0x00004711
    4d74:	000117c4 	.word	0x000117c4
    4d78:	00005db9 	.word	0x00005db9

00004d7c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    4d7c:	b580      	push	{r7, lr}
    4d7e:	b086      	sub	sp, #24
    4d80:	af00      	add	r7, sp, #0
    4d82:	6078      	str	r0, [r7, #4]
    4d84:	000a      	movs	r2, r1
    4d86:	1cbb      	adds	r3, r7, #2
    4d88:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    4d8a:	230c      	movs	r3, #12
    4d8c:	18fb      	adds	r3, r7, r3
    4d8e:	2200      	movs	r2, #0
    4d90:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    4d92:	230c      	movs	r3, #12
    4d94:	18fb      	adds	r3, r7, r3
    4d96:	687a      	ldr	r2, [r7, #4]
    4d98:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    4d9a:	230c      	movs	r3, #12
    4d9c:	18fb      	adds	r3, r7, r3
    4d9e:	1cba      	adds	r2, r7, #2
    4da0:	8812      	ldrh	r2, [r2, #0]
    4da2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4da4:	230c      	movs	r3, #12
    4da6:	18fb      	adds	r3, r7, r3
    4da8:	0019      	movs	r1, r3
    4daa:	2003      	movs	r0, #3
    4dac:	4b03      	ldr	r3, [pc, #12]	; (4dbc <nmi_spi_read+0x40>)
    4dae:	4798      	blx	r3
    4db0:	0003      	movs	r3, r0
}
    4db2:	0018      	movs	r0, r3
    4db4:	46bd      	mov	sp, r7
    4db6:	b006      	add	sp, #24
    4db8:	bd80      	pop	{r7, pc}
    4dba:	46c0      	nop			; (mov r8, r8)
    4dbc:	0000232d 	.word	0x0000232d

00004dc0 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    4dc0:	b580      	push	{r7, lr}
    4dc2:	b086      	sub	sp, #24
    4dc4:	af00      	add	r7, sp, #0
    4dc6:	6078      	str	r0, [r7, #4]
    4dc8:	000a      	movs	r2, r1
    4dca:	1cbb      	adds	r3, r7, #2
    4dcc:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    4dce:	230c      	movs	r3, #12
    4dd0:	18fb      	adds	r3, r7, r3
    4dd2:	687a      	ldr	r2, [r7, #4]
    4dd4:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    4dd6:	230c      	movs	r3, #12
    4dd8:	18fb      	adds	r3, r7, r3
    4dda:	2200      	movs	r2, #0
    4ddc:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    4dde:	230c      	movs	r3, #12
    4de0:	18fb      	adds	r3, r7, r3
    4de2:	1cba      	adds	r2, r7, #2
    4de4:	8812      	ldrh	r2, [r2, #0]
    4de6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    4de8:	230c      	movs	r3, #12
    4dea:	18fb      	adds	r3, r7, r3
    4dec:	0019      	movs	r1, r3
    4dee:	2003      	movs	r0, #3
    4df0:	4b03      	ldr	r3, [pc, #12]	; (4e00 <nmi_spi_write+0x40>)
    4df2:	4798      	blx	r3
    4df4:	0003      	movs	r3, r0
}
    4df6:	0018      	movs	r0, r3
    4df8:	46bd      	mov	sp, r7
    4dfa:	b006      	add	sp, #24
    4dfc:	bd80      	pop	{r7, pc}
    4dfe:	46c0      	nop			; (mov r8, r8)
    4e00:	0000232d 	.word	0x0000232d

00004e04 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    4e04:	b580      	push	{r7, lr}
    4e06:	b082      	sub	sp, #8
    4e08:	af00      	add	r7, sp, #0
    4e0a:	0002      	movs	r2, r0
    4e0c:	1dfb      	adds	r3, r7, #7
    4e0e:	701a      	strb	r2, [r3, #0]
    4e10:	1dbb      	adds	r3, r7, #6
    4e12:	1c0a      	adds	r2, r1, #0
    4e14:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    4e16:	1dfb      	adds	r3, r7, #7
    4e18:	781b      	ldrb	r3, [r3, #0]
    4e1a:	005a      	lsls	r2, r3, #1
    4e1c:	1dbb      	adds	r3, r7, #6
    4e1e:	781b      	ldrb	r3, [r3, #0]
    4e20:	4053      	eors	r3, r2
    4e22:	4a03      	ldr	r2, [pc, #12]	; (4e30 <crc7_byte+0x2c>)
    4e24:	5cd3      	ldrb	r3, [r2, r3]
}
    4e26:	0018      	movs	r0, r3
    4e28:	46bd      	mov	sp, r7
    4e2a:	b002      	add	sp, #8
    4e2c:	bd80      	pop	{r7, pc}
    4e2e:	46c0      	nop			; (mov r8, r8)
    4e30:	000117fc 	.word	0x000117fc

00004e34 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    4e34:	b590      	push	{r4, r7, lr}
    4e36:	b085      	sub	sp, #20
    4e38:	af00      	add	r7, sp, #0
    4e3a:	60b9      	str	r1, [r7, #8]
    4e3c:	607a      	str	r2, [r7, #4]
    4e3e:	230f      	movs	r3, #15
    4e40:	18fb      	adds	r3, r7, r3
    4e42:	1c02      	adds	r2, r0, #0
    4e44:	701a      	strb	r2, [r3, #0]
	while (len--)
    4e46:	e00e      	b.n	4e66 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    4e48:	68bb      	ldr	r3, [r7, #8]
    4e4a:	1c5a      	adds	r2, r3, #1
    4e4c:	60ba      	str	r2, [r7, #8]
    4e4e:	781a      	ldrb	r2, [r3, #0]
    4e50:	230f      	movs	r3, #15
    4e52:	18fc      	adds	r4, r7, r3
    4e54:	230f      	movs	r3, #15
    4e56:	18fb      	adds	r3, r7, r3
    4e58:	781b      	ldrb	r3, [r3, #0]
    4e5a:	0011      	movs	r1, r2
    4e5c:	0018      	movs	r0, r3
    4e5e:	4b08      	ldr	r3, [pc, #32]	; (4e80 <crc7+0x4c>)
    4e60:	4798      	blx	r3
    4e62:	0003      	movs	r3, r0
    4e64:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	1e5a      	subs	r2, r3, #1
    4e6a:	607a      	str	r2, [r7, #4]
    4e6c:	2b00      	cmp	r3, #0
    4e6e:	d1eb      	bne.n	4e48 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    4e70:	230f      	movs	r3, #15
    4e72:	18fb      	adds	r3, r7, r3
    4e74:	781b      	ldrb	r3, [r3, #0]
}
    4e76:	0018      	movs	r0, r3
    4e78:	46bd      	mov	sp, r7
    4e7a:	b005      	add	sp, #20
    4e7c:	bd90      	pop	{r4, r7, pc}
    4e7e:	46c0      	nop			; (mov r8, r8)
    4e80:	00004e05 	.word	0x00004e05

00004e84 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    4e84:	b590      	push	{r4, r7, lr}
    4e86:	b089      	sub	sp, #36	; 0x24
    4e88:	af00      	add	r7, sp, #0
    4e8a:	60b9      	str	r1, [r7, #8]
    4e8c:	607a      	str	r2, [r7, #4]
    4e8e:	603b      	str	r3, [r7, #0]
    4e90:	230f      	movs	r3, #15
    4e92:	18fb      	adds	r3, r7, r3
    4e94:	1c02      	adds	r2, r0, #0
    4e96:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    4e98:	231f      	movs	r3, #31
    4e9a:	18fb      	adds	r3, r7, r3
    4e9c:	2205      	movs	r2, #5
    4e9e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    4ea0:	231e      	movs	r3, #30
    4ea2:	18fb      	adds	r3, r7, r3
    4ea4:	2201      	movs	r2, #1
    4ea6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    4ea8:	2314      	movs	r3, #20
    4eaa:	18fb      	adds	r3, r7, r3
    4eac:	220f      	movs	r2, #15
    4eae:	18ba      	adds	r2, r7, r2
    4eb0:	7812      	ldrb	r2, [r2, #0]
    4eb2:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    4eb4:	230f      	movs	r3, #15
    4eb6:	18fb      	adds	r3, r7, r3
    4eb8:	781b      	ldrb	r3, [r3, #0]
    4eba:	3bc1      	subs	r3, #193	; 0xc1
    4ebc:	2b0e      	cmp	r3, #14
    4ebe:	d900      	bls.n	4ec2 <spi_cmd+0x3e>
    4ec0:	e11b      	b.n	50fa <spi_cmd+0x276>
    4ec2:	009a      	lsls	r2, r3, #2
    4ec4:	4bb6      	ldr	r3, [pc, #728]	; (51a0 <spi_cmd+0x31c>)
    4ec6:	18d3      	adds	r3, r2, r3
    4ec8:	681b      	ldr	r3, [r3, #0]
    4eca:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    4ecc:	68bb      	ldr	r3, [r7, #8]
    4ece:	0c1b      	lsrs	r3, r3, #16
    4ed0:	b2da      	uxtb	r2, r3
    4ed2:	2314      	movs	r3, #20
    4ed4:	18fb      	adds	r3, r7, r3
    4ed6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4ed8:	68bb      	ldr	r3, [r7, #8]
    4eda:	0a1b      	lsrs	r3, r3, #8
    4edc:	b2da      	uxtb	r2, r3
    4ede:	2314      	movs	r3, #20
    4ee0:	18fb      	adds	r3, r7, r3
    4ee2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    4ee4:	68bb      	ldr	r3, [r7, #8]
    4ee6:	b2da      	uxtb	r2, r3
    4ee8:	2314      	movs	r3, #20
    4eea:	18fb      	adds	r3, r7, r3
    4eec:	70da      	strb	r2, [r3, #3]
		len = 5;
    4eee:	231f      	movs	r3, #31
    4ef0:	18fb      	adds	r3, r7, r3
    4ef2:	2205      	movs	r2, #5
    4ef4:	701a      	strb	r2, [r3, #0]
		break;
    4ef6:	e105      	b.n	5104 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    4ef8:	68bb      	ldr	r3, [r7, #8]
    4efa:	0a1b      	lsrs	r3, r3, #8
    4efc:	b2da      	uxtb	r2, r3
    4efe:	2314      	movs	r3, #20
    4f00:	18fb      	adds	r3, r7, r3
    4f02:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    4f04:	2330      	movs	r3, #48	; 0x30
    4f06:	18fb      	adds	r3, r7, r3
    4f08:	781b      	ldrb	r3, [r3, #0]
    4f0a:	2b00      	cmp	r3, #0
    4f0c:	d009      	beq.n	4f22 <spi_cmd+0x9e>
    4f0e:	2314      	movs	r3, #20
    4f10:	18fb      	adds	r3, r7, r3
    4f12:	785b      	ldrb	r3, [r3, #1]
    4f14:	2280      	movs	r2, #128	; 0x80
    4f16:	4252      	negs	r2, r2
    4f18:	4313      	orrs	r3, r2
    4f1a:	b2da      	uxtb	r2, r3
    4f1c:	2314      	movs	r3, #20
    4f1e:	18fb      	adds	r3, r7, r3
    4f20:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    4f22:	68bb      	ldr	r3, [r7, #8]
    4f24:	b2da      	uxtb	r2, r3
    4f26:	2314      	movs	r3, #20
    4f28:	18fb      	adds	r3, r7, r3
    4f2a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    4f2c:	2314      	movs	r3, #20
    4f2e:	18fb      	adds	r3, r7, r3
    4f30:	2200      	movs	r2, #0
    4f32:	70da      	strb	r2, [r3, #3]
		len = 5;
    4f34:	231f      	movs	r3, #31
    4f36:	18fb      	adds	r3, r7, r3
    4f38:	2205      	movs	r2, #5
    4f3a:	701a      	strb	r2, [r3, #0]
		break;
    4f3c:	e0e2      	b.n	5104 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    4f3e:	2314      	movs	r3, #20
    4f40:	18fb      	adds	r3, r7, r3
    4f42:	2200      	movs	r2, #0
    4f44:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    4f46:	2314      	movs	r3, #20
    4f48:	18fb      	adds	r3, r7, r3
    4f4a:	2200      	movs	r2, #0
    4f4c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    4f4e:	2314      	movs	r3, #20
    4f50:	18fb      	adds	r3, r7, r3
    4f52:	2200      	movs	r2, #0
    4f54:	70da      	strb	r2, [r3, #3]
		len = 5;
    4f56:	231f      	movs	r3, #31
    4f58:	18fb      	adds	r3, r7, r3
    4f5a:	2205      	movs	r2, #5
    4f5c:	701a      	strb	r2, [r3, #0]
		break;
    4f5e:	e0d1      	b.n	5104 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    4f60:	2314      	movs	r3, #20
    4f62:	18fb      	adds	r3, r7, r3
    4f64:	2200      	movs	r2, #0
    4f66:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    4f68:	2314      	movs	r3, #20
    4f6a:	18fb      	adds	r3, r7, r3
    4f6c:	2200      	movs	r2, #0
    4f6e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    4f70:	2314      	movs	r3, #20
    4f72:	18fb      	adds	r3, r7, r3
    4f74:	2200      	movs	r2, #0
    4f76:	70da      	strb	r2, [r3, #3]
		len = 5;
    4f78:	231f      	movs	r3, #31
    4f7a:	18fb      	adds	r3, r7, r3
    4f7c:	2205      	movs	r2, #5
    4f7e:	701a      	strb	r2, [r3, #0]
		break;
    4f80:	e0c0      	b.n	5104 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    4f82:	2314      	movs	r3, #20
    4f84:	18fb      	adds	r3, r7, r3
    4f86:	22ff      	movs	r2, #255	; 0xff
    4f88:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    4f8a:	2314      	movs	r3, #20
    4f8c:	18fb      	adds	r3, r7, r3
    4f8e:	22ff      	movs	r2, #255	; 0xff
    4f90:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    4f92:	2314      	movs	r3, #20
    4f94:	18fb      	adds	r3, r7, r3
    4f96:	22ff      	movs	r2, #255	; 0xff
    4f98:	70da      	strb	r2, [r3, #3]
		len = 5;
    4f9a:	231f      	movs	r3, #31
    4f9c:	18fb      	adds	r3, r7, r3
    4f9e:	2205      	movs	r2, #5
    4fa0:	701a      	strb	r2, [r3, #0]
		break;
    4fa2:	e0af      	b.n	5104 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    4fa4:	68bb      	ldr	r3, [r7, #8]
    4fa6:	0c1b      	lsrs	r3, r3, #16
    4fa8:	b2da      	uxtb	r2, r3
    4faa:	2314      	movs	r3, #20
    4fac:	18fb      	adds	r3, r7, r3
    4fae:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4fb0:	68bb      	ldr	r3, [r7, #8]
    4fb2:	0a1b      	lsrs	r3, r3, #8
    4fb4:	b2da      	uxtb	r2, r3
    4fb6:	2314      	movs	r3, #20
    4fb8:	18fb      	adds	r3, r7, r3
    4fba:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    4fbc:	68bb      	ldr	r3, [r7, #8]
    4fbe:	b2da      	uxtb	r2, r3
    4fc0:	2314      	movs	r3, #20
    4fc2:	18fb      	adds	r3, r7, r3
    4fc4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    4fc6:	683b      	ldr	r3, [r7, #0]
    4fc8:	0a1b      	lsrs	r3, r3, #8
    4fca:	b2da      	uxtb	r2, r3
    4fcc:	2314      	movs	r3, #20
    4fce:	18fb      	adds	r3, r7, r3
    4fd0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    4fd2:	683b      	ldr	r3, [r7, #0]
    4fd4:	b2da      	uxtb	r2, r3
    4fd6:	2314      	movs	r3, #20
    4fd8:	18fb      	adds	r3, r7, r3
    4fda:	715a      	strb	r2, [r3, #5]
		len = 7;
    4fdc:	231f      	movs	r3, #31
    4fde:	18fb      	adds	r3, r7, r3
    4fe0:	2207      	movs	r2, #7
    4fe2:	701a      	strb	r2, [r3, #0]
		break;
    4fe4:	e08e      	b.n	5104 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    4fe6:	68bb      	ldr	r3, [r7, #8]
    4fe8:	0c1b      	lsrs	r3, r3, #16
    4fea:	b2da      	uxtb	r2, r3
    4fec:	2314      	movs	r3, #20
    4fee:	18fb      	adds	r3, r7, r3
    4ff0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    4ff2:	68bb      	ldr	r3, [r7, #8]
    4ff4:	0a1b      	lsrs	r3, r3, #8
    4ff6:	b2da      	uxtb	r2, r3
    4ff8:	2314      	movs	r3, #20
    4ffa:	18fb      	adds	r3, r7, r3
    4ffc:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    4ffe:	68bb      	ldr	r3, [r7, #8]
    5000:	b2da      	uxtb	r2, r3
    5002:	2314      	movs	r3, #20
    5004:	18fb      	adds	r3, r7, r3
    5006:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    5008:	683b      	ldr	r3, [r7, #0]
    500a:	0c1b      	lsrs	r3, r3, #16
    500c:	b2da      	uxtb	r2, r3
    500e:	2314      	movs	r3, #20
    5010:	18fb      	adds	r3, r7, r3
    5012:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    5014:	683b      	ldr	r3, [r7, #0]
    5016:	0a1b      	lsrs	r3, r3, #8
    5018:	b2da      	uxtb	r2, r3
    501a:	2314      	movs	r3, #20
    501c:	18fb      	adds	r3, r7, r3
    501e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    5020:	683b      	ldr	r3, [r7, #0]
    5022:	b2da      	uxtb	r2, r3
    5024:	2314      	movs	r3, #20
    5026:	18fb      	adds	r3, r7, r3
    5028:	719a      	strb	r2, [r3, #6]
		len = 8;
    502a:	231f      	movs	r3, #31
    502c:	18fb      	adds	r3, r7, r3
    502e:	2208      	movs	r2, #8
    5030:	701a      	strb	r2, [r3, #0]
		break;
    5032:	e067      	b.n	5104 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    5034:	68bb      	ldr	r3, [r7, #8]
    5036:	0a1b      	lsrs	r3, r3, #8
    5038:	b2da      	uxtb	r2, r3
    503a:	2314      	movs	r3, #20
    503c:	18fb      	adds	r3, r7, r3
    503e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    5040:	2330      	movs	r3, #48	; 0x30
    5042:	18fb      	adds	r3, r7, r3
    5044:	781b      	ldrb	r3, [r3, #0]
    5046:	2b00      	cmp	r3, #0
    5048:	d009      	beq.n	505e <spi_cmd+0x1da>
    504a:	2314      	movs	r3, #20
    504c:	18fb      	adds	r3, r7, r3
    504e:	785b      	ldrb	r3, [r3, #1]
    5050:	2280      	movs	r2, #128	; 0x80
    5052:	4252      	negs	r2, r2
    5054:	4313      	orrs	r3, r2
    5056:	b2da      	uxtb	r2, r3
    5058:	2314      	movs	r3, #20
    505a:	18fb      	adds	r3, r7, r3
    505c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    505e:	68bb      	ldr	r3, [r7, #8]
    5060:	b2da      	uxtb	r2, r3
    5062:	2314      	movs	r3, #20
    5064:	18fb      	adds	r3, r7, r3
    5066:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	0e1b      	lsrs	r3, r3, #24
    506c:	b2da      	uxtb	r2, r3
    506e:	2314      	movs	r3, #20
    5070:	18fb      	adds	r3, r7, r3
    5072:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    5074:	687b      	ldr	r3, [r7, #4]
    5076:	0c1b      	lsrs	r3, r3, #16
    5078:	b2da      	uxtb	r2, r3
    507a:	2314      	movs	r3, #20
    507c:	18fb      	adds	r3, r7, r3
    507e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    5080:	687b      	ldr	r3, [r7, #4]
    5082:	0a1b      	lsrs	r3, r3, #8
    5084:	b2da      	uxtb	r2, r3
    5086:	2314      	movs	r3, #20
    5088:	18fb      	adds	r3, r7, r3
    508a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    508c:	687b      	ldr	r3, [r7, #4]
    508e:	b2da      	uxtb	r2, r3
    5090:	2314      	movs	r3, #20
    5092:	18fb      	adds	r3, r7, r3
    5094:	719a      	strb	r2, [r3, #6]
		len = 8;
    5096:	231f      	movs	r3, #31
    5098:	18fb      	adds	r3, r7, r3
    509a:	2208      	movs	r2, #8
    509c:	701a      	strb	r2, [r3, #0]
		break;
    509e:	e031      	b.n	5104 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    50a0:	68bb      	ldr	r3, [r7, #8]
    50a2:	0c1b      	lsrs	r3, r3, #16
    50a4:	b2da      	uxtb	r2, r3
    50a6:	2314      	movs	r3, #20
    50a8:	18fb      	adds	r3, r7, r3
    50aa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    50ac:	68bb      	ldr	r3, [r7, #8]
    50ae:	0a1b      	lsrs	r3, r3, #8
    50b0:	b2da      	uxtb	r2, r3
    50b2:	2314      	movs	r3, #20
    50b4:	18fb      	adds	r3, r7, r3
    50b6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    50b8:	68bb      	ldr	r3, [r7, #8]
    50ba:	b2da      	uxtb	r2, r3
    50bc:	2314      	movs	r3, #20
    50be:	18fb      	adds	r3, r7, r3
    50c0:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	0e1b      	lsrs	r3, r3, #24
    50c6:	b2da      	uxtb	r2, r3
    50c8:	2314      	movs	r3, #20
    50ca:	18fb      	adds	r3, r7, r3
    50cc:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    50ce:	687b      	ldr	r3, [r7, #4]
    50d0:	0c1b      	lsrs	r3, r3, #16
    50d2:	b2da      	uxtb	r2, r3
    50d4:	2314      	movs	r3, #20
    50d6:	18fb      	adds	r3, r7, r3
    50d8:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    50da:	687b      	ldr	r3, [r7, #4]
    50dc:	0a1b      	lsrs	r3, r3, #8
    50de:	b2da      	uxtb	r2, r3
    50e0:	2314      	movs	r3, #20
    50e2:	18fb      	adds	r3, r7, r3
    50e4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    50e6:	687b      	ldr	r3, [r7, #4]
    50e8:	b2da      	uxtb	r2, r3
    50ea:	2314      	movs	r3, #20
    50ec:	18fb      	adds	r3, r7, r3
    50ee:	71da      	strb	r2, [r3, #7]
		len = 9;
    50f0:	231f      	movs	r3, #31
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	2209      	movs	r2, #9
    50f6:	701a      	strb	r2, [r3, #0]
		break;
    50f8:	e004      	b.n	5104 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    50fa:	231e      	movs	r3, #30
    50fc:	18fb      	adds	r3, r7, r3
    50fe:	2200      	movs	r2, #0
    5100:	701a      	strb	r2, [r3, #0]
		break;
    5102:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    5104:	231e      	movs	r3, #30
    5106:	18fb      	adds	r3, r7, r3
    5108:	781b      	ldrb	r3, [r3, #0]
    510a:	b25b      	sxtb	r3, r3
    510c:	2b00      	cmp	r3, #0
    510e:	d03e      	beq.n	518e <spi_cmd+0x30a>
		if (!gu8Crc_off)
    5110:	4b24      	ldr	r3, [pc, #144]	; (51a4 <spi_cmd+0x320>)
    5112:	781b      	ldrb	r3, [r3, #0]
    5114:	2b00      	cmp	r3, #0
    5116:	d115      	bne.n	5144 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    5118:	231f      	movs	r3, #31
    511a:	18fb      	adds	r3, r7, r3
    511c:	781b      	ldrb	r3, [r3, #0]
    511e:	1e5c      	subs	r4, r3, #1
    5120:	231f      	movs	r3, #31
    5122:	18fb      	adds	r3, r7, r3
    5124:	781b      	ldrb	r3, [r3, #0]
    5126:	3b01      	subs	r3, #1
    5128:	001a      	movs	r2, r3
    512a:	2314      	movs	r3, #20
    512c:	18fb      	adds	r3, r7, r3
    512e:	0019      	movs	r1, r3
    5130:	207f      	movs	r0, #127	; 0x7f
    5132:	4b1d      	ldr	r3, [pc, #116]	; (51a8 <spi_cmd+0x324>)
    5134:	4798      	blx	r3
    5136:	0003      	movs	r3, r0
    5138:	18db      	adds	r3, r3, r3
    513a:	b2da      	uxtb	r2, r3
    513c:	2314      	movs	r3, #20
    513e:	18fb      	adds	r3, r7, r3
    5140:	551a      	strb	r2, [r3, r4]
    5142:	e006      	b.n	5152 <spi_cmd+0x2ce>
		else
			len-=1;
    5144:	231f      	movs	r3, #31
    5146:	18fb      	adds	r3, r7, r3
    5148:	221f      	movs	r2, #31
    514a:	18ba      	adds	r2, r7, r2
    514c:	7812      	ldrb	r2, [r2, #0]
    514e:	3a01      	subs	r2, #1
    5150:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    5152:	231f      	movs	r3, #31
    5154:	18fb      	adds	r3, r7, r3
    5156:	781b      	ldrb	r3, [r3, #0]
    5158:	b29a      	uxth	r2, r3
    515a:	2314      	movs	r3, #20
    515c:	18fb      	adds	r3, r7, r3
    515e:	0011      	movs	r1, r2
    5160:	0018      	movs	r0, r3
    5162:	4b12      	ldr	r3, [pc, #72]	; (51ac <spi_cmd+0x328>)
    5164:	4798      	blx	r3
    5166:	1e03      	subs	r3, r0, #0
    5168:	d011      	beq.n	518e <spi_cmd+0x30a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    516a:	2384      	movs	r3, #132	; 0x84
    516c:	005a      	lsls	r2, r3, #1
    516e:	4910      	ldr	r1, [pc, #64]	; (51b0 <spi_cmd+0x32c>)
    5170:	4b10      	ldr	r3, [pc, #64]	; (51b4 <spi_cmd+0x330>)
    5172:	0018      	movs	r0, r3
    5174:	4b10      	ldr	r3, [pc, #64]	; (51b8 <spi_cmd+0x334>)
    5176:	4798      	blx	r3
    5178:	4b10      	ldr	r3, [pc, #64]	; (51bc <spi_cmd+0x338>)
    517a:	0018      	movs	r0, r3
    517c:	4b10      	ldr	r3, [pc, #64]	; (51c0 <spi_cmd+0x33c>)
    517e:	4798      	blx	r3
    5180:	200d      	movs	r0, #13
    5182:	4b10      	ldr	r3, [pc, #64]	; (51c4 <spi_cmd+0x340>)
    5184:	4798      	blx	r3
			result = N_FAIL;
    5186:	231e      	movs	r3, #30
    5188:	18fb      	adds	r3, r7, r3
    518a:	2200      	movs	r2, #0
    518c:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    518e:	231e      	movs	r3, #30
    5190:	18fb      	adds	r3, r7, r3
    5192:	781b      	ldrb	r3, [r3, #0]
    5194:	b25b      	sxtb	r3, r3
}
    5196:	0018      	movs	r0, r3
    5198:	46bd      	mov	sp, r7
    519a:	b009      	add	sp, #36	; 0x24
    519c:	bd90      	pop	{r4, r7, pc}
    519e:	46c0      	nop			; (mov r8, r8)
    51a0:	00011db4 	.word	0x00011db4
    51a4:	200000e8 	.word	0x200000e8
    51a8:	00004e35 	.word	0x00004e35
    51ac:	00004dc1 	.word	0x00004dc1
    51b0:	00011df0 	.word	0x00011df0
    51b4:	000118fc 	.word	0x000118fc
    51b8:	0000fd31 	.word	0x0000fd31
    51bc:	00011910 	.word	0x00011910
    51c0:	0000fe51 	.word	0x0000fe51
    51c4:	0000fd65 	.word	0x0000fd65

000051c8 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    51c8:	b580      	push	{r7, lr}
    51ca:	b084      	sub	sp, #16
    51cc:	af00      	add	r7, sp, #0
    51ce:	0002      	movs	r2, r0
    51d0:	1dfb      	adds	r3, r7, #7
    51d2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    51d4:	230f      	movs	r3, #15
    51d6:	18fb      	adds	r3, r7, r3
    51d8:	2201      	movs	r2, #1
    51da:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    51dc:	1dfb      	adds	r3, r7, #7
    51de:	781b      	ldrb	r3, [r3, #0]
    51e0:	2bcf      	cmp	r3, #207	; 0xcf
    51e2:	d007      	beq.n	51f4 <spi_cmd_rsp+0x2c>
    51e4:	1dfb      	adds	r3, r7, #7
    51e6:	781b      	ldrb	r3, [r3, #0]
    51e8:	2bc5      	cmp	r3, #197	; 0xc5
    51ea:	d003      	beq.n	51f4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    51ec:	1dfb      	adds	r3, r7, #7
    51ee:	781b      	ldrb	r3, [r3, #0]
    51f0:	2bc6      	cmp	r3, #198	; 0xc6
    51f2:	d10c      	bne.n	520e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    51f4:	230d      	movs	r3, #13
    51f6:	18fb      	adds	r3, r7, r3
    51f8:	2101      	movs	r1, #1
    51fa:	0018      	movs	r0, r3
    51fc:	4b3a      	ldr	r3, [pc, #232]	; (52e8 <spi_cmd_rsp+0x120>)
    51fe:	4798      	blx	r3
    5200:	1e03      	subs	r3, r0, #0
    5202:	d004      	beq.n	520e <spi_cmd_rsp+0x46>
			result = N_FAIL;
    5204:	230f      	movs	r3, #15
    5206:	18fb      	adds	r3, r7, r3
    5208:	2200      	movs	r2, #0
    520a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    520c:	e063      	b.n	52d6 <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    520e:	230e      	movs	r3, #14
    5210:	18fb      	adds	r3, r7, r3
    5212:	220a      	movs	r2, #10
    5214:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5216:	230d      	movs	r3, #13
    5218:	18fb      	adds	r3, r7, r3
    521a:	2101      	movs	r1, #1
    521c:	0018      	movs	r0, r3
    521e:	4b32      	ldr	r3, [pc, #200]	; (52e8 <spi_cmd_rsp+0x120>)
    5220:	4798      	blx	r3
    5222:	1e03      	subs	r3, r0, #0
    5224:	d013      	beq.n	524e <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    5226:	2328      	movs	r3, #40	; 0x28
    5228:	33ff      	adds	r3, #255	; 0xff
    522a:	001a      	movs	r2, r3
    522c:	492f      	ldr	r1, [pc, #188]	; (52ec <spi_cmd_rsp+0x124>)
    522e:	4b30      	ldr	r3, [pc, #192]	; (52f0 <spi_cmd_rsp+0x128>)
    5230:	0018      	movs	r0, r3
    5232:	4b30      	ldr	r3, [pc, #192]	; (52f4 <spi_cmd_rsp+0x12c>)
    5234:	4798      	blx	r3
    5236:	4b30      	ldr	r3, [pc, #192]	; (52f8 <spi_cmd_rsp+0x130>)
    5238:	0018      	movs	r0, r3
    523a:	4b30      	ldr	r3, [pc, #192]	; (52fc <spi_cmd_rsp+0x134>)
    523c:	4798      	blx	r3
    523e:	200d      	movs	r0, #13
    5240:	4b2f      	ldr	r3, [pc, #188]	; (5300 <spi_cmd_rsp+0x138>)
    5242:	4798      	blx	r3
			result = N_FAIL;
    5244:	230f      	movs	r3, #15
    5246:	18fb      	adds	r3, r7, r3
    5248:	2200      	movs	r2, #0
    524a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    524c:	e043      	b.n	52d6 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    524e:	230d      	movs	r3, #13
    5250:	18fb      	adds	r3, r7, r3
    5252:	781b      	ldrb	r3, [r3, #0]
    5254:	1dfa      	adds	r2, r7, #7
    5256:	7812      	ldrb	r2, [r2, #0]
    5258:	429a      	cmp	r2, r3
    525a:	d00b      	beq.n	5274 <spi_cmd_rsp+0xac>
    525c:	230e      	movs	r3, #14
    525e:	18fb      	adds	r3, r7, r3
    5260:	781b      	ldrb	r3, [r3, #0]
    5262:	b25b      	sxtb	r3, r3
    5264:	b2da      	uxtb	r2, r3
    5266:	3a01      	subs	r2, #1
    5268:	b2d1      	uxtb	r1, r2
    526a:	220e      	movs	r2, #14
    526c:	18ba      	adds	r2, r7, r2
    526e:	7011      	strb	r1, [r2, #0]
    5270:	2b00      	cmp	r3, #0
    5272:	dcd0      	bgt.n	5216 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    5274:	230e      	movs	r3, #14
    5276:	18fb      	adds	r3, r7, r3
    5278:	220a      	movs	r2, #10
    527a:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    527c:	230d      	movs	r3, #13
    527e:	18fb      	adds	r3, r7, r3
    5280:	2101      	movs	r1, #1
    5282:	0018      	movs	r0, r3
    5284:	4b18      	ldr	r3, [pc, #96]	; (52e8 <spi_cmd_rsp+0x120>)
    5286:	4798      	blx	r3
    5288:	1e03      	subs	r3, r0, #0
    528a:	d013      	beq.n	52b4 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    528c:	2336      	movs	r3, #54	; 0x36
    528e:	33ff      	adds	r3, #255	; 0xff
    5290:	001a      	movs	r2, r3
    5292:	4916      	ldr	r1, [pc, #88]	; (52ec <spi_cmd_rsp+0x124>)
    5294:	4b16      	ldr	r3, [pc, #88]	; (52f0 <spi_cmd_rsp+0x128>)
    5296:	0018      	movs	r0, r3
    5298:	4b16      	ldr	r3, [pc, #88]	; (52f4 <spi_cmd_rsp+0x12c>)
    529a:	4798      	blx	r3
    529c:	4b16      	ldr	r3, [pc, #88]	; (52f8 <spi_cmd_rsp+0x130>)
    529e:	0018      	movs	r0, r3
    52a0:	4b16      	ldr	r3, [pc, #88]	; (52fc <spi_cmd_rsp+0x134>)
    52a2:	4798      	blx	r3
    52a4:	200d      	movs	r0, #13
    52a6:	4b16      	ldr	r3, [pc, #88]	; (5300 <spi_cmd_rsp+0x138>)
    52a8:	4798      	blx	r3
			result = N_FAIL;
    52aa:	230f      	movs	r3, #15
    52ac:	18fb      	adds	r3, r7, r3
    52ae:	2200      	movs	r2, #0
    52b0:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    52b2:	e010      	b.n	52d6 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    52b4:	230d      	movs	r3, #13
    52b6:	18fb      	adds	r3, r7, r3
    52b8:	781b      	ldrb	r3, [r3, #0]
    52ba:	2b00      	cmp	r3, #0
    52bc:	d00b      	beq.n	52d6 <spi_cmd_rsp+0x10e>
    52be:	230e      	movs	r3, #14
    52c0:	18fb      	adds	r3, r7, r3
    52c2:	781b      	ldrb	r3, [r3, #0]
    52c4:	b25b      	sxtb	r3, r3
    52c6:	b2da      	uxtb	r2, r3
    52c8:	3a01      	subs	r2, #1
    52ca:	b2d1      	uxtb	r1, r2
    52cc:	220e      	movs	r2, #14
    52ce:	18ba      	adds	r2, r7, r2
    52d0:	7011      	strb	r1, [r2, #0]
    52d2:	2b00      	cmp	r3, #0
    52d4:	dcd2      	bgt.n	527c <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    52d6:	230f      	movs	r3, #15
    52d8:	18fb      	adds	r3, r7, r3
    52da:	781b      	ldrb	r3, [r3, #0]
    52dc:	b25b      	sxtb	r3, r3
}
    52de:	0018      	movs	r0, r3
    52e0:	46bd      	mov	sp, r7
    52e2:	b004      	add	sp, #16
    52e4:	bd80      	pop	{r7, pc}
    52e6:	46c0      	nop			; (mov r8, r8)
    52e8:	00004d7d 	.word	0x00004d7d
    52ec:	00011df8 	.word	0x00011df8
    52f0:	000118fc 	.word	0x000118fc
    52f4:	0000fd31 	.word	0x0000fd31
    52f8:	0001193c 	.word	0x0001193c
    52fc:	0000fe51 	.word	0x0000fe51
    5300:	0000fd65 	.word	0x0000fd65

00005304 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    5304:	b580      	push	{r7, lr}
    5306:	b086      	sub	sp, #24
    5308:	af00      	add	r7, sp, #0
    530a:	6078      	str	r0, [r7, #4]
    530c:	0008      	movs	r0, r1
    530e:	0011      	movs	r1, r2
    5310:	1cbb      	adds	r3, r7, #2
    5312:	1c02      	adds	r2, r0, #0
    5314:	801a      	strh	r2, [r3, #0]
    5316:	1c7b      	adds	r3, r7, #1
    5318:	1c0a      	adds	r2, r1, #0
    531a:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    531c:	2311      	movs	r3, #17
    531e:	18fb      	adds	r3, r7, r3
    5320:	2201      	movs	r2, #1
    5322:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    5324:	2314      	movs	r3, #20
    5326:	18fb      	adds	r3, r7, r3
    5328:	2200      	movs	r2, #0
    532a:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    532c:	1cbb      	adds	r3, r7, #2
    532e:	881a      	ldrh	r2, [r3, #0]
    5330:	2380      	movs	r3, #128	; 0x80
    5332:	019b      	lsls	r3, r3, #6
    5334:	429a      	cmp	r2, r3
    5336:	d805      	bhi.n	5344 <spi_data_read+0x40>
			nbytes = sz;
    5338:	2312      	movs	r3, #18
    533a:	18fb      	adds	r3, r7, r3
    533c:	1cba      	adds	r2, r7, #2
    533e:	8812      	ldrh	r2, [r2, #0]
    5340:	801a      	strh	r2, [r3, #0]
    5342:	e004      	b.n	534e <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    5344:	2312      	movs	r3, #18
    5346:	18fb      	adds	r3, r7, r3
    5348:	2280      	movs	r2, #128	; 0x80
    534a:	0192      	lsls	r2, r2, #6
    534c:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    534e:	2316      	movs	r3, #22
    5350:	18fb      	adds	r3, r7, r3
    5352:	220a      	movs	r2, #10
    5354:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5356:	230b      	movs	r3, #11
    5358:	18fb      	adds	r3, r7, r3
    535a:	2101      	movs	r1, #1
    535c:	0018      	movs	r0, r3
    535e:	4b5f      	ldr	r3, [pc, #380]	; (54dc <spi_data_read+0x1d8>)
    5360:	4798      	blx	r3
    5362:	1e03      	subs	r3, r0, #0
    5364:	d013      	beq.n	538e <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    5366:	2358      	movs	r3, #88	; 0x58
    5368:	33ff      	adds	r3, #255	; 0xff
    536a:	001a      	movs	r2, r3
    536c:	495c      	ldr	r1, [pc, #368]	; (54e0 <spi_data_read+0x1dc>)
    536e:	4b5d      	ldr	r3, [pc, #372]	; (54e4 <spi_data_read+0x1e0>)
    5370:	0018      	movs	r0, r3
    5372:	4b5d      	ldr	r3, [pc, #372]	; (54e8 <spi_data_read+0x1e4>)
    5374:	4798      	blx	r3
    5376:	4b5d      	ldr	r3, [pc, #372]	; (54ec <spi_data_read+0x1e8>)
    5378:	0018      	movs	r0, r3
    537a:	4b5d      	ldr	r3, [pc, #372]	; (54f0 <spi_data_read+0x1ec>)
    537c:	4798      	blx	r3
    537e:	200d      	movs	r0, #13
    5380:	4b5c      	ldr	r3, [pc, #368]	; (54f4 <spi_data_read+0x1f0>)
    5382:	4798      	blx	r3
				result = N_FAIL;
    5384:	2311      	movs	r3, #17
    5386:	18fb      	adds	r3, r7, r3
    5388:	2200      	movs	r2, #0
    538a:	701a      	strb	r2, [r3, #0]
				break;
    538c:	e017      	b.n	53be <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    538e:	230b      	movs	r3, #11
    5390:	18fb      	adds	r3, r7, r3
    5392:	781b      	ldrb	r3, [r3, #0]
    5394:	091b      	lsrs	r3, r3, #4
    5396:	b2db      	uxtb	r3, r3
    5398:	001a      	movs	r2, r3
    539a:	230f      	movs	r3, #15
    539c:	4013      	ands	r3, r2
    539e:	2b0f      	cmp	r3, #15
    53a0:	d00c      	beq.n	53bc <spi_data_read+0xb8>
				break;
		} while (retry--);
    53a2:	2316      	movs	r3, #22
    53a4:	18fb      	adds	r3, r7, r3
    53a6:	2200      	movs	r2, #0
    53a8:	5e9b      	ldrsh	r3, [r3, r2]
    53aa:	b29a      	uxth	r2, r3
    53ac:	3a01      	subs	r2, #1
    53ae:	b291      	uxth	r1, r2
    53b0:	2216      	movs	r2, #22
    53b2:	18ba      	adds	r2, r7, r2
    53b4:	8011      	strh	r1, [r2, #0]
    53b6:	2b00      	cmp	r3, #0
    53b8:	d1cd      	bne.n	5356 <spi_data_read+0x52>
    53ba:	e000      	b.n	53be <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    53bc:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    53be:	2311      	movs	r3, #17
    53c0:	18fb      	adds	r3, r7, r3
    53c2:	781b      	ldrb	r3, [r3, #0]
    53c4:	b25b      	sxtb	r3, r3
    53c6:	2b00      	cmp	r3, #0
    53c8:	d100      	bne.n	53cc <spi_data_read+0xc8>
    53ca:	e07d      	b.n	54c8 <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    53cc:	2316      	movs	r3, #22
    53ce:	18fb      	adds	r3, r7, r3
    53d0:	2200      	movs	r2, #0
    53d2:	5e9b      	ldrsh	r3, [r3, r2]
    53d4:	2b00      	cmp	r3, #0
    53d6:	dc18      	bgt.n	540a <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    53d8:	2364      	movs	r3, #100	; 0x64
    53da:	33ff      	adds	r3, #255	; 0xff
    53dc:	001a      	movs	r2, r3
    53de:	4940      	ldr	r1, [pc, #256]	; (54e0 <spi_data_read+0x1dc>)
    53e0:	4b40      	ldr	r3, [pc, #256]	; (54e4 <spi_data_read+0x1e0>)
    53e2:	0018      	movs	r0, r3
    53e4:	4b40      	ldr	r3, [pc, #256]	; (54e8 <spi_data_read+0x1e4>)
    53e6:	4798      	blx	r3
    53e8:	230b      	movs	r3, #11
    53ea:	18fb      	adds	r3, r7, r3
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	001a      	movs	r2, r3
    53f0:	4b41      	ldr	r3, [pc, #260]	; (54f8 <spi_data_read+0x1f4>)
    53f2:	0011      	movs	r1, r2
    53f4:	0018      	movs	r0, r3
    53f6:	4b3c      	ldr	r3, [pc, #240]	; (54e8 <spi_data_read+0x1e4>)
    53f8:	4798      	blx	r3
    53fa:	200d      	movs	r0, #13
    53fc:	4b3d      	ldr	r3, [pc, #244]	; (54f4 <spi_data_read+0x1f0>)
    53fe:	4798      	blx	r3
			result = N_FAIL;
    5400:	2311      	movs	r3, #17
    5402:	18fb      	adds	r3, r7, r3
    5404:	2200      	movs	r2, #0
    5406:	701a      	strb	r2, [r3, #0]
			break;
    5408:	e05f      	b.n	54ca <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    540a:	2314      	movs	r3, #20
    540c:	18fb      	adds	r3, r7, r3
    540e:	2200      	movs	r2, #0
    5410:	5e9b      	ldrsh	r3, [r3, r2]
    5412:	687a      	ldr	r2, [r7, #4]
    5414:	18d2      	adds	r2, r2, r3
    5416:	2312      	movs	r3, #18
    5418:	18fb      	adds	r3, r7, r3
    541a:	881b      	ldrh	r3, [r3, #0]
    541c:	0019      	movs	r1, r3
    541e:	0010      	movs	r0, r2
    5420:	4b2e      	ldr	r3, [pc, #184]	; (54dc <spi_data_read+0x1d8>)
    5422:	4798      	blx	r3
    5424:	1e03      	subs	r3, r0, #0
    5426:	d012      	beq.n	544e <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    5428:	23b6      	movs	r3, #182	; 0xb6
    542a:	005a      	lsls	r2, r3, #1
    542c:	492c      	ldr	r1, [pc, #176]	; (54e0 <spi_data_read+0x1dc>)
    542e:	4b2d      	ldr	r3, [pc, #180]	; (54e4 <spi_data_read+0x1e0>)
    5430:	0018      	movs	r0, r3
    5432:	4b2d      	ldr	r3, [pc, #180]	; (54e8 <spi_data_read+0x1e4>)
    5434:	4798      	blx	r3
    5436:	4b31      	ldr	r3, [pc, #196]	; (54fc <spi_data_read+0x1f8>)
    5438:	0018      	movs	r0, r3
    543a:	4b2d      	ldr	r3, [pc, #180]	; (54f0 <spi_data_read+0x1ec>)
    543c:	4798      	blx	r3
    543e:	200d      	movs	r0, #13
    5440:	4b2c      	ldr	r3, [pc, #176]	; (54f4 <spi_data_read+0x1f0>)
    5442:	4798      	blx	r3
			result = N_FAIL;
    5444:	2311      	movs	r3, #17
    5446:	18fb      	adds	r3, r7, r3
    5448:	2200      	movs	r2, #0
    544a:	701a      	strb	r2, [r3, #0]
			break;
    544c:	e03d      	b.n	54ca <spi_data_read+0x1c6>
		}
		if(!clockless)
    544e:	1c7b      	adds	r3, r7, #1
    5450:	781b      	ldrb	r3, [r3, #0]
    5452:	2b00      	cmp	r3, #0
    5454:	d11f      	bne.n	5496 <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    5456:	4b2a      	ldr	r3, [pc, #168]	; (5500 <spi_data_read+0x1fc>)
    5458:	781b      	ldrb	r3, [r3, #0]
    545a:	2b00      	cmp	r3, #0
    545c:	d11b      	bne.n	5496 <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    545e:	230c      	movs	r3, #12
    5460:	18fb      	adds	r3, r7, r3
    5462:	2102      	movs	r1, #2
    5464:	0018      	movs	r0, r3
    5466:	4b1d      	ldr	r3, [pc, #116]	; (54dc <spi_data_read+0x1d8>)
    5468:	4798      	blx	r3
    546a:	1e03      	subs	r3, r0, #0
    546c:	d013      	beq.n	5496 <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    546e:	2378      	movs	r3, #120	; 0x78
    5470:	33ff      	adds	r3, #255	; 0xff
    5472:	001a      	movs	r2, r3
    5474:	491a      	ldr	r1, [pc, #104]	; (54e0 <spi_data_read+0x1dc>)
    5476:	4b1b      	ldr	r3, [pc, #108]	; (54e4 <spi_data_read+0x1e0>)
    5478:	0018      	movs	r0, r3
    547a:	4b1b      	ldr	r3, [pc, #108]	; (54e8 <spi_data_read+0x1e4>)
    547c:	4798      	blx	r3
    547e:	4b21      	ldr	r3, [pc, #132]	; (5504 <spi_data_read+0x200>)
    5480:	0018      	movs	r0, r3
    5482:	4b1b      	ldr	r3, [pc, #108]	; (54f0 <spi_data_read+0x1ec>)
    5484:	4798      	blx	r3
    5486:	200d      	movs	r0, #13
    5488:	4b1a      	ldr	r3, [pc, #104]	; (54f4 <spi_data_read+0x1f0>)
    548a:	4798      	blx	r3
					result = N_FAIL;
    548c:	2311      	movs	r3, #17
    548e:	18fb      	adds	r3, r7, r3
    5490:	2200      	movs	r2, #0
    5492:	701a      	strb	r2, [r3, #0]
					break;
    5494:	e019      	b.n	54ca <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    5496:	2314      	movs	r3, #20
    5498:	18fb      	adds	r3, r7, r3
    549a:	881a      	ldrh	r2, [r3, #0]
    549c:	2312      	movs	r3, #18
    549e:	18fb      	adds	r3, r7, r3
    54a0:	881b      	ldrh	r3, [r3, #0]
    54a2:	18d3      	adds	r3, r2, r3
    54a4:	b29a      	uxth	r2, r3
    54a6:	2314      	movs	r3, #20
    54a8:	18fb      	adds	r3, r7, r3
    54aa:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    54ac:	2312      	movs	r3, #18
    54ae:	18fb      	adds	r3, r7, r3
    54b0:	881a      	ldrh	r2, [r3, #0]
    54b2:	1cbb      	adds	r3, r7, #2
    54b4:	1cb9      	adds	r1, r7, #2
    54b6:	8809      	ldrh	r1, [r1, #0]
    54b8:	1a8a      	subs	r2, r1, r2
    54ba:	801a      	strh	r2, [r3, #0]

	} while (sz);
    54bc:	1cbb      	adds	r3, r7, #2
    54be:	881b      	ldrh	r3, [r3, #0]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d000      	beq.n	54c6 <spi_data_read+0x1c2>
    54c4:	e732      	b.n	532c <spi_data_read+0x28>
    54c6:	e000      	b.n	54ca <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    54c8:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    54ca:	2311      	movs	r3, #17
    54cc:	18fb      	adds	r3, r7, r3
    54ce:	781b      	ldrb	r3, [r3, #0]
    54d0:	b25b      	sxtb	r3, r3
}
    54d2:	0018      	movs	r0, r3
    54d4:	46bd      	mov	sp, r7
    54d6:	b006      	add	sp, #24
    54d8:	bd80      	pop	{r7, pc}
    54da:	46c0      	nop			; (mov r8, r8)
    54dc:	00004d7d 	.word	0x00004d7d
    54e0:	00011e04 	.word	0x00011e04
    54e4:	000118fc 	.word	0x000118fc
    54e8:	0000fd31 	.word	0x0000fd31
    54ec:	00011970 	.word	0x00011970
    54f0:	0000fe51 	.word	0x0000fe51
    54f4:	0000fd65 	.word	0x0000fd65
    54f8:	000119a4 	.word	0x000119a4
    54fc:	000119d4 	.word	0x000119d4
    5500:	200000e8 	.word	0x200000e8
    5504:	00011a04 	.word	0x00011a04

00005508 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    5508:	b580      	push	{r7, lr}
    550a:	b086      	sub	sp, #24
    550c:	af00      	add	r7, sp, #0
    550e:	6078      	str	r0, [r7, #4]
    5510:	000a      	movs	r2, r1
    5512:	1cbb      	adds	r3, r7, #2
    5514:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    5516:	2313      	movs	r3, #19
    5518:	18fb      	adds	r3, r7, r3
    551a:	2201      	movs	r2, #1
    551c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    551e:	230c      	movs	r3, #12
    5520:	18fb      	adds	r3, r7, r3
    5522:	2200      	movs	r2, #0
    5524:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    5526:	2316      	movs	r3, #22
    5528:	18fb      	adds	r3, r7, r3
    552a:	2200      	movs	r2, #0
    552c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    552e:	1cbb      	adds	r3, r7, #2
    5530:	881a      	ldrh	r2, [r3, #0]
    5532:	2380      	movs	r3, #128	; 0x80
    5534:	019b      	lsls	r3, r3, #6
    5536:	429a      	cmp	r2, r3
    5538:	d805      	bhi.n	5546 <spi_data_write+0x3e>
			nbytes = sz;
    553a:	2314      	movs	r3, #20
    553c:	18fb      	adds	r3, r7, r3
    553e:	1cba      	adds	r2, r7, #2
    5540:	8812      	ldrh	r2, [r2, #0]
    5542:	801a      	strh	r2, [r3, #0]
    5544:	e004      	b.n	5550 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    5546:	2314      	movs	r3, #20
    5548:	18fb      	adds	r3, r7, r3
    554a:	2280      	movs	r2, #128	; 0x80
    554c:	0192      	lsls	r2, r2, #6
    554e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    5550:	2311      	movs	r3, #17
    5552:	18fb      	adds	r3, r7, r3
    5554:	22f0      	movs	r2, #240	; 0xf0
    5556:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    5558:	2316      	movs	r3, #22
    555a:	18fb      	adds	r3, r7, r3
    555c:	2200      	movs	r2, #0
    555e:	5e9b      	ldrsh	r3, [r3, r2]
    5560:	2b00      	cmp	r3, #0
    5562:	d10f      	bne.n	5584 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    5564:	1cbb      	adds	r3, r7, #2
    5566:	881a      	ldrh	r2, [r3, #0]
    5568:	2380      	movs	r3, #128	; 0x80
    556a:	019b      	lsls	r3, r3, #6
    556c:	429a      	cmp	r2, r3
    556e:	d804      	bhi.n	557a <spi_data_write+0x72>
				order = 0x3;
    5570:	2312      	movs	r3, #18
    5572:	18fb      	adds	r3, r7, r3
    5574:	2203      	movs	r2, #3
    5576:	701a      	strb	r2, [r3, #0]
    5578:	e013      	b.n	55a2 <spi_data_write+0x9a>
			else
				order = 0x1;
    557a:	2312      	movs	r3, #18
    557c:	18fb      	adds	r3, r7, r3
    557e:	2201      	movs	r2, #1
    5580:	701a      	strb	r2, [r3, #0]
    5582:	e00e      	b.n	55a2 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    5584:	1cbb      	adds	r3, r7, #2
    5586:	881a      	ldrh	r2, [r3, #0]
    5588:	2380      	movs	r3, #128	; 0x80
    558a:	019b      	lsls	r3, r3, #6
    558c:	429a      	cmp	r2, r3
    558e:	d804      	bhi.n	559a <spi_data_write+0x92>
				order = 0x3;
    5590:	2312      	movs	r3, #18
    5592:	18fb      	adds	r3, r7, r3
    5594:	2203      	movs	r2, #3
    5596:	701a      	strb	r2, [r3, #0]
    5598:	e003      	b.n	55a2 <spi_data_write+0x9a>
			else
				order = 0x2;
    559a:	2312      	movs	r3, #18
    559c:	18fb      	adds	r3, r7, r3
    559e:	2202      	movs	r2, #2
    55a0:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    55a2:	2311      	movs	r3, #17
    55a4:	18fb      	adds	r3, r7, r3
    55a6:	781a      	ldrb	r2, [r3, #0]
    55a8:	2312      	movs	r3, #18
    55aa:	18fb      	adds	r3, r7, r3
    55ac:	781b      	ldrb	r3, [r3, #0]
    55ae:	4313      	orrs	r3, r2
    55b0:	b2da      	uxtb	r2, r3
    55b2:	2311      	movs	r3, #17
    55b4:	18fb      	adds	r3, r7, r3
    55b6:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    55b8:	2311      	movs	r3, #17
    55ba:	18fb      	adds	r3, r7, r3
    55bc:	2101      	movs	r1, #1
    55be:	0018      	movs	r0, r3
    55c0:	4b3c      	ldr	r3, [pc, #240]	; (56b4 <spi_data_write+0x1ac>)
    55c2:	4798      	blx	r3
    55c4:	1e03      	subs	r3, r0, #0
    55c6:	d012      	beq.n	55ee <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    55c8:	23d4      	movs	r3, #212	; 0xd4
    55ca:	005a      	lsls	r2, r3, #1
    55cc:	493a      	ldr	r1, [pc, #232]	; (56b8 <spi_data_write+0x1b0>)
    55ce:	4b3b      	ldr	r3, [pc, #236]	; (56bc <spi_data_write+0x1b4>)
    55d0:	0018      	movs	r0, r3
    55d2:	4b3b      	ldr	r3, [pc, #236]	; (56c0 <spi_data_write+0x1b8>)
    55d4:	4798      	blx	r3
    55d6:	4b3b      	ldr	r3, [pc, #236]	; (56c4 <spi_data_write+0x1bc>)
    55d8:	0018      	movs	r0, r3
    55da:	4b3b      	ldr	r3, [pc, #236]	; (56c8 <spi_data_write+0x1c0>)
    55dc:	4798      	blx	r3
    55de:	200d      	movs	r0, #13
    55e0:	4b3a      	ldr	r3, [pc, #232]	; (56cc <spi_data_write+0x1c4>)
    55e2:	4798      	blx	r3
			result = N_FAIL;
    55e4:	2313      	movs	r3, #19
    55e6:	18fb      	adds	r3, r7, r3
    55e8:	2200      	movs	r2, #0
    55ea:	701a      	strb	r2, [r3, #0]
			break;
    55ec:	e05a      	b.n	56a4 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    55ee:	2316      	movs	r3, #22
    55f0:	18fb      	adds	r3, r7, r3
    55f2:	2200      	movs	r2, #0
    55f4:	5e9b      	ldrsh	r3, [r3, r2]
    55f6:	687a      	ldr	r2, [r7, #4]
    55f8:	18d2      	adds	r2, r2, r3
    55fa:	2314      	movs	r3, #20
    55fc:	18fb      	adds	r3, r7, r3
    55fe:	881b      	ldrh	r3, [r3, #0]
    5600:	0019      	movs	r1, r3
    5602:	0010      	movs	r0, r2
    5604:	4b2b      	ldr	r3, [pc, #172]	; (56b4 <spi_data_write+0x1ac>)
    5606:	4798      	blx	r3
    5608:	1e03      	subs	r3, r0, #0
    560a:	d013      	beq.n	5634 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    560c:	23b2      	movs	r3, #178	; 0xb2
    560e:	33ff      	adds	r3, #255	; 0xff
    5610:	001a      	movs	r2, r3
    5612:	4929      	ldr	r1, [pc, #164]	; (56b8 <spi_data_write+0x1b0>)
    5614:	4b29      	ldr	r3, [pc, #164]	; (56bc <spi_data_write+0x1b4>)
    5616:	0018      	movs	r0, r3
    5618:	4b29      	ldr	r3, [pc, #164]	; (56c0 <spi_data_write+0x1b8>)
    561a:	4798      	blx	r3
    561c:	4b2c      	ldr	r3, [pc, #176]	; (56d0 <spi_data_write+0x1c8>)
    561e:	0018      	movs	r0, r3
    5620:	4b29      	ldr	r3, [pc, #164]	; (56c8 <spi_data_write+0x1c0>)
    5622:	4798      	blx	r3
    5624:	200d      	movs	r0, #13
    5626:	4b29      	ldr	r3, [pc, #164]	; (56cc <spi_data_write+0x1c4>)
    5628:	4798      	blx	r3
			result = N_FAIL;
    562a:	2313      	movs	r3, #19
    562c:	18fb      	adds	r3, r7, r3
    562e:	2200      	movs	r2, #0
    5630:	701a      	strb	r2, [r3, #0]
			break;
    5632:	e037      	b.n	56a4 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    5634:	4b27      	ldr	r3, [pc, #156]	; (56d4 <spi_data_write+0x1cc>)
    5636:	781b      	ldrb	r3, [r3, #0]
    5638:	2b00      	cmp	r3, #0
    563a:	d11b      	bne.n	5674 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    563c:	230c      	movs	r3, #12
    563e:	18fb      	adds	r3, r7, r3
    5640:	2102      	movs	r1, #2
    5642:	0018      	movs	r0, r3
    5644:	4b1b      	ldr	r3, [pc, #108]	; (56b4 <spi_data_write+0x1ac>)
    5646:	4798      	blx	r3
    5648:	1e03      	subs	r3, r0, #0
    564a:	d013      	beq.n	5674 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    564c:	23bc      	movs	r3, #188	; 0xbc
    564e:	33ff      	adds	r3, #255	; 0xff
    5650:	001a      	movs	r2, r3
    5652:	4919      	ldr	r1, [pc, #100]	; (56b8 <spi_data_write+0x1b0>)
    5654:	4b19      	ldr	r3, [pc, #100]	; (56bc <spi_data_write+0x1b4>)
    5656:	0018      	movs	r0, r3
    5658:	4b19      	ldr	r3, [pc, #100]	; (56c0 <spi_data_write+0x1b8>)
    565a:	4798      	blx	r3
    565c:	4b1e      	ldr	r3, [pc, #120]	; (56d8 <spi_data_write+0x1d0>)
    565e:	0018      	movs	r0, r3
    5660:	4b19      	ldr	r3, [pc, #100]	; (56c8 <spi_data_write+0x1c0>)
    5662:	4798      	blx	r3
    5664:	200d      	movs	r0, #13
    5666:	4b19      	ldr	r3, [pc, #100]	; (56cc <spi_data_write+0x1c4>)
    5668:	4798      	blx	r3
				result = N_FAIL;
    566a:	2313      	movs	r3, #19
    566c:	18fb      	adds	r3, r7, r3
    566e:	2200      	movs	r2, #0
    5670:	701a      	strb	r2, [r3, #0]
				break;
    5672:	e017      	b.n	56a4 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    5674:	2316      	movs	r3, #22
    5676:	18fb      	adds	r3, r7, r3
    5678:	881a      	ldrh	r2, [r3, #0]
    567a:	2314      	movs	r3, #20
    567c:	18fb      	adds	r3, r7, r3
    567e:	881b      	ldrh	r3, [r3, #0]
    5680:	18d3      	adds	r3, r2, r3
    5682:	b29a      	uxth	r2, r3
    5684:	2316      	movs	r3, #22
    5686:	18fb      	adds	r3, r7, r3
    5688:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    568a:	1cbb      	adds	r3, r7, #2
    568c:	1cb9      	adds	r1, r7, #2
    568e:	2214      	movs	r2, #20
    5690:	18ba      	adds	r2, r7, r2
    5692:	8809      	ldrh	r1, [r1, #0]
    5694:	8812      	ldrh	r2, [r2, #0]
    5696:	1a8a      	subs	r2, r1, r2
    5698:	801a      	strh	r2, [r3, #0]
	} while (sz);
    569a:	1cbb      	adds	r3, r7, #2
    569c:	881b      	ldrh	r3, [r3, #0]
    569e:	2b00      	cmp	r3, #0
    56a0:	d000      	beq.n	56a4 <spi_data_write+0x19c>
    56a2:	e744      	b.n	552e <spi_data_write+0x26>


	return result;
    56a4:	2313      	movs	r3, #19
    56a6:	18fb      	adds	r3, r7, r3
    56a8:	781b      	ldrb	r3, [r3, #0]
    56aa:	b25b      	sxtb	r3, r3
}
    56ac:	0018      	movs	r0, r3
    56ae:	46bd      	mov	sp, r7
    56b0:	b006      	add	sp, #24
    56b2:	bd80      	pop	{r7, pc}
    56b4:	00004dc1 	.word	0x00004dc1
    56b8:	00011e14 	.word	0x00011e14
    56bc:	000118fc 	.word	0x000118fc
    56c0:	0000fd31 	.word	0x0000fd31
    56c4:	00011a38 	.word	0x00011a38
    56c8:	0000fe51 	.word	0x0000fe51
    56cc:	0000fd65 	.word	0x0000fd65
    56d0:	00011a70 	.word	0x00011a70
    56d4:	200000e8 	.word	0x200000e8
    56d8:	00011aa4 	.word	0x00011aa4

000056dc <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    56dc:	b5b0      	push	{r4, r5, r7, lr}
    56de:	b086      	sub	sp, #24
    56e0:	af02      	add	r7, sp, #8
    56e2:	6078      	str	r0, [r7, #4]
    56e4:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    56e6:	230d      	movs	r3, #13
    56e8:	18fb      	adds	r3, r7, r3
    56ea:	2201      	movs	r2, #1
    56ec:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    56ee:	230f      	movs	r3, #15
    56f0:	18fb      	adds	r3, r7, r3
    56f2:	22c9      	movs	r2, #201	; 0xc9
    56f4:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    56f6:	230e      	movs	r3, #14
    56f8:	18fb      	adds	r3, r7, r3
    56fa:	2200      	movs	r2, #0
    56fc:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    56fe:	687b      	ldr	r3, [r7, #4]
    5700:	2b30      	cmp	r3, #48	; 0x30
    5702:	d808      	bhi.n	5716 <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    5704:	230f      	movs	r3, #15
    5706:	18fb      	adds	r3, r7, r3
    5708:	22c3      	movs	r2, #195	; 0xc3
    570a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    570c:	230e      	movs	r3, #14
    570e:	18fb      	adds	r3, r7, r3
    5710:	2201      	movs	r2, #1
    5712:	701a      	strb	r2, [r3, #0]
    5714:	e007      	b.n	5726 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    5716:	230f      	movs	r3, #15
    5718:	18fb      	adds	r3, r7, r3
    571a:	22c9      	movs	r2, #201	; 0xc9
    571c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    571e:	230e      	movs	r3, #14
    5720:	18fb      	adds	r3, r7, r3
    5722:	2200      	movs	r2, #0
    5724:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    5726:	230d      	movs	r3, #13
    5728:	18fc      	adds	r4, r7, r3
    572a:	683a      	ldr	r2, [r7, #0]
    572c:	6879      	ldr	r1, [r7, #4]
    572e:	230f      	movs	r3, #15
    5730:	18fb      	adds	r3, r7, r3
    5732:	7818      	ldrb	r0, [r3, #0]
    5734:	230e      	movs	r3, #14
    5736:	18fb      	adds	r3, r7, r3
    5738:	781b      	ldrb	r3, [r3, #0]
    573a:	9300      	str	r3, [sp, #0]
    573c:	2304      	movs	r3, #4
    573e:	4d26      	ldr	r5, [pc, #152]	; (57d8 <spi_write_reg+0xfc>)
    5740:	47a8      	blx	r5
    5742:	0003      	movs	r3, r0
    5744:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5746:	230d      	movs	r3, #13
    5748:	18fb      	adds	r3, r7, r3
    574a:	781b      	ldrb	r3, [r3, #0]
    574c:	b25b      	sxtb	r3, r3
    574e:	2b01      	cmp	r3, #1
    5750:	d012      	beq.n	5778 <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    5752:	23ec      	movs	r3, #236	; 0xec
    5754:	33ff      	adds	r3, #255	; 0xff
    5756:	001a      	movs	r2, r3
    5758:	4920      	ldr	r1, [pc, #128]	; (57dc <spi_write_reg+0x100>)
    575a:	4b21      	ldr	r3, [pc, #132]	; (57e0 <spi_write_reg+0x104>)
    575c:	0018      	movs	r0, r3
    575e:	4b21      	ldr	r3, [pc, #132]	; (57e4 <spi_write_reg+0x108>)
    5760:	4798      	blx	r3
    5762:	687a      	ldr	r2, [r7, #4]
    5764:	4b20      	ldr	r3, [pc, #128]	; (57e8 <spi_write_reg+0x10c>)
    5766:	0011      	movs	r1, r2
    5768:	0018      	movs	r0, r3
    576a:	4b1e      	ldr	r3, [pc, #120]	; (57e4 <spi_write_reg+0x108>)
    576c:	4798      	blx	r3
    576e:	200d      	movs	r0, #13
    5770:	4b1e      	ldr	r3, [pc, #120]	; (57ec <spi_write_reg+0x110>)
    5772:	4798      	blx	r3
		return N_FAIL;
    5774:	2300      	movs	r3, #0
    5776:	e02b      	b.n	57d0 <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    5778:	230d      	movs	r3, #13
    577a:	18fc      	adds	r4, r7, r3
    577c:	230f      	movs	r3, #15
    577e:	18fb      	adds	r3, r7, r3
    5780:	781b      	ldrb	r3, [r3, #0]
    5782:	0018      	movs	r0, r3
    5784:	4b1a      	ldr	r3, [pc, #104]	; (57f0 <spi_write_reg+0x114>)
    5786:	4798      	blx	r3
    5788:	0003      	movs	r3, r0
    578a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    578c:	230d      	movs	r3, #13
    578e:	18fb      	adds	r3, r7, r3
    5790:	781b      	ldrb	r3, [r3, #0]
    5792:	b25b      	sxtb	r3, r3
    5794:	2b01      	cmp	r3, #1
    5796:	d01a      	beq.n	57ce <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    5798:	23f2      	movs	r3, #242	; 0xf2
    579a:	33ff      	adds	r3, #255	; 0xff
    579c:	001a      	movs	r2, r3
    579e:	490f      	ldr	r1, [pc, #60]	; (57dc <spi_write_reg+0x100>)
    57a0:	4b0f      	ldr	r3, [pc, #60]	; (57e0 <spi_write_reg+0x104>)
    57a2:	0018      	movs	r0, r3
    57a4:	4b0f      	ldr	r3, [pc, #60]	; (57e4 <spi_write_reg+0x108>)
    57a6:	4798      	blx	r3
    57a8:	687a      	ldr	r2, [r7, #4]
    57aa:	4b12      	ldr	r3, [pc, #72]	; (57f4 <spi_write_reg+0x118>)
    57ac:	0011      	movs	r1, r2
    57ae:	0018      	movs	r0, r3
    57b0:	4b0c      	ldr	r3, [pc, #48]	; (57e4 <spi_write_reg+0x108>)
    57b2:	4798      	blx	r3
    57b4:	200d      	movs	r0, #13
    57b6:	4b0d      	ldr	r3, [pc, #52]	; (57ec <spi_write_reg+0x110>)
    57b8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    57ba:	2300      	movs	r3, #0
    57bc:	9300      	str	r3, [sp, #0]
    57be:	2300      	movs	r3, #0
    57c0:	2200      	movs	r2, #0
    57c2:	2100      	movs	r1, #0
    57c4:	20cf      	movs	r0, #207	; 0xcf
    57c6:	4c04      	ldr	r4, [pc, #16]	; (57d8 <spi_write_reg+0xfc>)
    57c8:	47a0      	blx	r4
		return N_FAIL;
    57ca:	2300      	movs	r3, #0
    57cc:	e000      	b.n	57d0 <spi_write_reg+0xf4>
	}

	return N_OK;
    57ce:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    57d0:	0018      	movs	r0, r3
    57d2:	46bd      	mov	sp, r7
    57d4:	b004      	add	sp, #16
    57d6:	bdb0      	pop	{r4, r5, r7, pc}
    57d8:	00004e85 	.word	0x00004e85
    57dc:	00011e24 	.word	0x00011e24
    57e0:	000118fc 	.word	0x000118fc
    57e4:	0000fd31 	.word	0x0000fd31
    57e8:	00011adc 	.word	0x00011adc
    57ec:	0000fd65 	.word	0x0000fd65
    57f0:	000051c9 	.word	0x000051c9
    57f4:	00011b08 	.word	0x00011b08

000057f8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    57f8:	b5b0      	push	{r4, r5, r7, lr}
    57fa:	b088      	sub	sp, #32
    57fc:	af02      	add	r7, sp, #8
    57fe:	60f8      	str	r0, [r7, #12]
    5800:	60b9      	str	r1, [r7, #8]
    5802:	1dbb      	adds	r3, r7, #6
    5804:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    5806:	2317      	movs	r3, #23
    5808:	18fb      	adds	r3, r7, r3
    580a:	22c7      	movs	r2, #199	; 0xc7
    580c:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    580e:	1dbb      	adds	r3, r7, #6
    5810:	881a      	ldrh	r2, [r3, #0]
    5812:	2316      	movs	r3, #22
    5814:	18fc      	adds	r4, r7, r3
    5816:	68f9      	ldr	r1, [r7, #12]
    5818:	2317      	movs	r3, #23
    581a:	18fb      	adds	r3, r7, r3
    581c:	7818      	ldrb	r0, [r3, #0]
    581e:	2300      	movs	r3, #0
    5820:	9300      	str	r3, [sp, #0]
    5822:	0013      	movs	r3, r2
    5824:	2200      	movs	r2, #0
    5826:	4d37      	ldr	r5, [pc, #220]	; (5904 <nm_spi_write+0x10c>)
    5828:	47a8      	blx	r5
    582a:	0003      	movs	r3, r0
    582c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    582e:	2316      	movs	r3, #22
    5830:	18fb      	adds	r3, r7, r3
    5832:	781b      	ldrb	r3, [r3, #0]
    5834:	b25b      	sxtb	r3, r3
    5836:	2b01      	cmp	r3, #1
    5838:	d010      	beq.n	585c <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    583a:	4a33      	ldr	r2, [pc, #204]	; (5908 <nm_spi_write+0x110>)
    583c:	4933      	ldr	r1, [pc, #204]	; (590c <nm_spi_write+0x114>)
    583e:	4b34      	ldr	r3, [pc, #208]	; (5910 <nm_spi_write+0x118>)
    5840:	0018      	movs	r0, r3
    5842:	4b34      	ldr	r3, [pc, #208]	; (5914 <nm_spi_write+0x11c>)
    5844:	4798      	blx	r3
    5846:	68fa      	ldr	r2, [r7, #12]
    5848:	4b33      	ldr	r3, [pc, #204]	; (5918 <nm_spi_write+0x120>)
    584a:	0011      	movs	r1, r2
    584c:	0018      	movs	r0, r3
    584e:	4b31      	ldr	r3, [pc, #196]	; (5914 <nm_spi_write+0x11c>)
    5850:	4798      	blx	r3
    5852:	200d      	movs	r0, #13
    5854:	4b31      	ldr	r3, [pc, #196]	; (591c <nm_spi_write+0x124>)
    5856:	4798      	blx	r3
		return N_FAIL;
    5858:	2300      	movs	r3, #0
    585a:	e04f      	b.n	58fc <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    585c:	2316      	movs	r3, #22
    585e:	18fc      	adds	r4, r7, r3
    5860:	2317      	movs	r3, #23
    5862:	18fb      	adds	r3, r7, r3
    5864:	781b      	ldrb	r3, [r3, #0]
    5866:	0018      	movs	r0, r3
    5868:	4b2d      	ldr	r3, [pc, #180]	; (5920 <nm_spi_write+0x128>)
    586a:	4798      	blx	r3
    586c:	0003      	movs	r3, r0
    586e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5870:	2316      	movs	r3, #22
    5872:	18fb      	adds	r3, r7, r3
    5874:	781b      	ldrb	r3, [r3, #0]
    5876:	b25b      	sxtb	r3, r3
    5878:	2b01      	cmp	r3, #1
    587a:	d018      	beq.n	58ae <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    587c:	4a29      	ldr	r2, [pc, #164]	; (5924 <nm_spi_write+0x12c>)
    587e:	4923      	ldr	r1, [pc, #140]	; (590c <nm_spi_write+0x114>)
    5880:	4b23      	ldr	r3, [pc, #140]	; (5910 <nm_spi_write+0x118>)
    5882:	0018      	movs	r0, r3
    5884:	4b23      	ldr	r3, [pc, #140]	; (5914 <nm_spi_write+0x11c>)
    5886:	4798      	blx	r3
    5888:	68fa      	ldr	r2, [r7, #12]
    588a:	4b27      	ldr	r3, [pc, #156]	; (5928 <nm_spi_write+0x130>)
    588c:	0011      	movs	r1, r2
    588e:	0018      	movs	r0, r3
    5890:	4b20      	ldr	r3, [pc, #128]	; (5914 <nm_spi_write+0x11c>)
    5892:	4798      	blx	r3
    5894:	200d      	movs	r0, #13
    5896:	4b21      	ldr	r3, [pc, #132]	; (591c <nm_spi_write+0x124>)
    5898:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    589a:	2300      	movs	r3, #0
    589c:	9300      	str	r3, [sp, #0]
    589e:	2300      	movs	r3, #0
    58a0:	2200      	movs	r2, #0
    58a2:	2100      	movs	r1, #0
    58a4:	20cf      	movs	r0, #207	; 0xcf
    58a6:	4c17      	ldr	r4, [pc, #92]	; (5904 <nm_spi_write+0x10c>)
    58a8:	47a0      	blx	r4
		return N_FAIL;
    58aa:	2300      	movs	r3, #0
    58ac:	e026      	b.n	58fc <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    58ae:	2316      	movs	r3, #22
    58b0:	18fc      	adds	r4, r7, r3
    58b2:	1dbb      	adds	r3, r7, #6
    58b4:	881a      	ldrh	r2, [r3, #0]
    58b6:	68bb      	ldr	r3, [r7, #8]
    58b8:	0011      	movs	r1, r2
    58ba:	0018      	movs	r0, r3
    58bc:	4b1b      	ldr	r3, [pc, #108]	; (592c <nm_spi_write+0x134>)
    58be:	4798      	blx	r3
    58c0:	0003      	movs	r3, r0
    58c2:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    58c4:	2316      	movs	r3, #22
    58c6:	18fb      	adds	r3, r7, r3
    58c8:	781b      	ldrb	r3, [r3, #0]
    58ca:	b25b      	sxtb	r3, r3
    58cc:	2b01      	cmp	r3, #1
    58ce:	d014      	beq.n	58fa <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    58d0:	4a17      	ldr	r2, [pc, #92]	; (5930 <nm_spi_write+0x138>)
    58d2:	490e      	ldr	r1, [pc, #56]	; (590c <nm_spi_write+0x114>)
    58d4:	4b0e      	ldr	r3, [pc, #56]	; (5910 <nm_spi_write+0x118>)
    58d6:	0018      	movs	r0, r3
    58d8:	4b0e      	ldr	r3, [pc, #56]	; (5914 <nm_spi_write+0x11c>)
    58da:	4798      	blx	r3
    58dc:	4b15      	ldr	r3, [pc, #84]	; (5934 <nm_spi_write+0x13c>)
    58de:	0018      	movs	r0, r3
    58e0:	4b15      	ldr	r3, [pc, #84]	; (5938 <nm_spi_write+0x140>)
    58e2:	4798      	blx	r3
    58e4:	200d      	movs	r0, #13
    58e6:	4b0d      	ldr	r3, [pc, #52]	; (591c <nm_spi_write+0x124>)
    58e8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    58ea:	2300      	movs	r3, #0
    58ec:	9300      	str	r3, [sp, #0]
    58ee:	2300      	movs	r3, #0
    58f0:	2200      	movs	r2, #0
    58f2:	2100      	movs	r1, #0
    58f4:	20cf      	movs	r0, #207	; 0xcf
    58f6:	4c03      	ldr	r4, [pc, #12]	; (5904 <nm_spi_write+0x10c>)
    58f8:	47a0      	blx	r4
	}

	return N_OK;
    58fa:	2301      	movs	r3, #1
}
    58fc:	0018      	movs	r0, r3
    58fe:	46bd      	mov	sp, r7
    5900:	b006      	add	sp, #24
    5902:	bdb0      	pop	{r4, r5, r7, pc}
    5904:	00004e85 	.word	0x00004e85
    5908:	0000020f 	.word	0x0000020f
    590c:	00011e34 	.word	0x00011e34
    5910:	000118fc 	.word	0x000118fc
    5914:	0000fd31 	.word	0x0000fd31
    5918:	00011b40 	.word	0x00011b40
    591c:	0000fd65 	.word	0x0000fd65
    5920:	000051c9 	.word	0x000051c9
    5924:	00000215 	.word	0x00000215
    5928:	00011b70 	.word	0x00011b70
    592c:	00005509 	.word	0x00005509
    5930:	00000226 	.word	0x00000226
    5934:	00011ba8 	.word	0x00011ba8
    5938:	0000fe51 	.word	0x0000fe51

0000593c <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    593c:	b5b0      	push	{r4, r5, r7, lr}
    593e:	b086      	sub	sp, #24
    5940:	af02      	add	r7, sp, #8
    5942:	6078      	str	r0, [r7, #4]
    5944:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    5946:	230d      	movs	r3, #13
    5948:	18fb      	adds	r3, r7, r3
    594a:	2201      	movs	r2, #1
    594c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    594e:	230f      	movs	r3, #15
    5950:	18fb      	adds	r3, r7, r3
    5952:	22ca      	movs	r2, #202	; 0xca
    5954:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    5956:	230e      	movs	r3, #14
    5958:	18fb      	adds	r3, r7, r3
    595a:	2200      	movs	r2, #0
    595c:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    595e:	687b      	ldr	r3, [r7, #4]
    5960:	2bff      	cmp	r3, #255	; 0xff
    5962:	d808      	bhi.n	5976 <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    5964:	230f      	movs	r3, #15
    5966:	18fb      	adds	r3, r7, r3
    5968:	22c4      	movs	r2, #196	; 0xc4
    596a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    596c:	230e      	movs	r3, #14
    596e:	18fb      	adds	r3, r7, r3
    5970:	2201      	movs	r2, #1
    5972:	701a      	strb	r2, [r3, #0]
    5974:	e007      	b.n	5986 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    5976:	230f      	movs	r3, #15
    5978:	18fb      	adds	r3, r7, r3
    597a:	22ca      	movs	r2, #202	; 0xca
    597c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    597e:	230e      	movs	r3, #14
    5980:	18fb      	adds	r3, r7, r3
    5982:	2200      	movs	r2, #0
    5984:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    5986:	230d      	movs	r3, #13
    5988:	18fc      	adds	r4, r7, r3
    598a:	6879      	ldr	r1, [r7, #4]
    598c:	230f      	movs	r3, #15
    598e:	18fb      	adds	r3, r7, r3
    5990:	7818      	ldrb	r0, [r3, #0]
    5992:	230e      	movs	r3, #14
    5994:	18fb      	adds	r3, r7, r3
    5996:	781b      	ldrb	r3, [r3, #0]
    5998:	9300      	str	r3, [sp, #0]
    599a:	2304      	movs	r3, #4
    599c:	2200      	movs	r2, #0
    599e:	4d44      	ldr	r5, [pc, #272]	; (5ab0 <spi_read_reg+0x174>)
    59a0:	47a8      	blx	r5
    59a2:	0003      	movs	r3, r0
    59a4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    59a6:	230d      	movs	r3, #13
    59a8:	18fb      	adds	r3, r7, r3
    59aa:	781b      	ldrb	r3, [r3, #0]
    59ac:	b25b      	sxtb	r3, r3
    59ae:	2b01      	cmp	r3, #1
    59b0:	d010      	beq.n	59d4 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    59b2:	4a40      	ldr	r2, [pc, #256]	; (5ab4 <spi_read_reg+0x178>)
    59b4:	4940      	ldr	r1, [pc, #256]	; (5ab8 <spi_read_reg+0x17c>)
    59b6:	4b41      	ldr	r3, [pc, #260]	; (5abc <spi_read_reg+0x180>)
    59b8:	0018      	movs	r0, r3
    59ba:	4b41      	ldr	r3, [pc, #260]	; (5ac0 <spi_read_reg+0x184>)
    59bc:	4798      	blx	r3
    59be:	687a      	ldr	r2, [r7, #4]
    59c0:	4b40      	ldr	r3, [pc, #256]	; (5ac4 <spi_read_reg+0x188>)
    59c2:	0011      	movs	r1, r2
    59c4:	0018      	movs	r0, r3
    59c6:	4b3e      	ldr	r3, [pc, #248]	; (5ac0 <spi_read_reg+0x184>)
    59c8:	4798      	blx	r3
    59ca:	200d      	movs	r0, #13
    59cc:	4b3e      	ldr	r3, [pc, #248]	; (5ac8 <spi_read_reg+0x18c>)
    59ce:	4798      	blx	r3
		return N_FAIL;
    59d0:	2300      	movs	r3, #0
    59d2:	e068      	b.n	5aa6 <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    59d4:	230d      	movs	r3, #13
    59d6:	18fc      	adds	r4, r7, r3
    59d8:	230f      	movs	r3, #15
    59da:	18fb      	adds	r3, r7, r3
    59dc:	781b      	ldrb	r3, [r3, #0]
    59de:	0018      	movs	r0, r3
    59e0:	4b3a      	ldr	r3, [pc, #232]	; (5acc <spi_read_reg+0x190>)
    59e2:	4798      	blx	r3
    59e4:	0003      	movs	r3, r0
    59e6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    59e8:	230d      	movs	r3, #13
    59ea:	18fb      	adds	r3, r7, r3
    59ec:	781b      	ldrb	r3, [r3, #0]
    59ee:	b25b      	sxtb	r3, r3
    59f0:	2b01      	cmp	r3, #1
    59f2:	d018      	beq.n	5a26 <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    59f4:	4a36      	ldr	r2, [pc, #216]	; (5ad0 <spi_read_reg+0x194>)
    59f6:	4930      	ldr	r1, [pc, #192]	; (5ab8 <spi_read_reg+0x17c>)
    59f8:	4b30      	ldr	r3, [pc, #192]	; (5abc <spi_read_reg+0x180>)
    59fa:	0018      	movs	r0, r3
    59fc:	4b30      	ldr	r3, [pc, #192]	; (5ac0 <spi_read_reg+0x184>)
    59fe:	4798      	blx	r3
    5a00:	687a      	ldr	r2, [r7, #4]
    5a02:	4b34      	ldr	r3, [pc, #208]	; (5ad4 <spi_read_reg+0x198>)
    5a04:	0011      	movs	r1, r2
    5a06:	0018      	movs	r0, r3
    5a08:	4b2d      	ldr	r3, [pc, #180]	; (5ac0 <spi_read_reg+0x184>)
    5a0a:	4798      	blx	r3
    5a0c:	200d      	movs	r0, #13
    5a0e:	4b2e      	ldr	r3, [pc, #184]	; (5ac8 <spi_read_reg+0x18c>)
    5a10:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5a12:	2300      	movs	r3, #0
    5a14:	9300      	str	r3, [sp, #0]
    5a16:	2300      	movs	r3, #0
    5a18:	2200      	movs	r2, #0
    5a1a:	2100      	movs	r1, #0
    5a1c:	20cf      	movs	r0, #207	; 0xcf
    5a1e:	4c24      	ldr	r4, [pc, #144]	; (5ab0 <spi_read_reg+0x174>)
    5a20:	47a0      	blx	r4
		return N_FAIL;
    5a22:	2300      	movs	r3, #0
    5a24:	e03f      	b.n	5aa6 <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    5a26:	230d      	movs	r3, #13
    5a28:	18fc      	adds	r4, r7, r3
    5a2a:	230e      	movs	r3, #14
    5a2c:	18fb      	adds	r3, r7, r3
    5a2e:	781a      	ldrb	r2, [r3, #0]
    5a30:	2308      	movs	r3, #8
    5a32:	18fb      	adds	r3, r7, r3
    5a34:	2104      	movs	r1, #4
    5a36:	0018      	movs	r0, r3
    5a38:	4b27      	ldr	r3, [pc, #156]	; (5ad8 <spi_read_reg+0x19c>)
    5a3a:	4798      	blx	r3
    5a3c:	0003      	movs	r3, r0
    5a3e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5a40:	230d      	movs	r3, #13
    5a42:	18fb      	adds	r3, r7, r3
    5a44:	781b      	ldrb	r3, [r3, #0]
    5a46:	b25b      	sxtb	r3, r3
    5a48:	2b01      	cmp	r3, #1
    5a4a:	d016      	beq.n	5a7a <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    5a4c:	4a23      	ldr	r2, [pc, #140]	; (5adc <spi_read_reg+0x1a0>)
    5a4e:	491a      	ldr	r1, [pc, #104]	; (5ab8 <spi_read_reg+0x17c>)
    5a50:	4b1a      	ldr	r3, [pc, #104]	; (5abc <spi_read_reg+0x180>)
    5a52:	0018      	movs	r0, r3
    5a54:	4b1a      	ldr	r3, [pc, #104]	; (5ac0 <spi_read_reg+0x184>)
    5a56:	4798      	blx	r3
    5a58:	4b21      	ldr	r3, [pc, #132]	; (5ae0 <spi_read_reg+0x1a4>)
    5a5a:	0018      	movs	r0, r3
    5a5c:	4b21      	ldr	r3, [pc, #132]	; (5ae4 <spi_read_reg+0x1a8>)
    5a5e:	4798      	blx	r3
    5a60:	200d      	movs	r0, #13
    5a62:	4b19      	ldr	r3, [pc, #100]	; (5ac8 <spi_read_reg+0x18c>)
    5a64:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5a66:	2300      	movs	r3, #0
    5a68:	9300      	str	r3, [sp, #0]
    5a6a:	2300      	movs	r3, #0
    5a6c:	2200      	movs	r2, #0
    5a6e:	2100      	movs	r1, #0
    5a70:	20cf      	movs	r0, #207	; 0xcf
    5a72:	4c0f      	ldr	r4, [pc, #60]	; (5ab0 <spi_read_reg+0x174>)
    5a74:	47a0      	blx	r4
		return N_FAIL;
    5a76:	2300      	movs	r3, #0
    5a78:	e015      	b.n	5aa6 <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    5a7a:	2308      	movs	r3, #8
    5a7c:	18fb      	adds	r3, r7, r3
    5a7e:	781b      	ldrb	r3, [r3, #0]
    5a80:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    5a82:	2308      	movs	r3, #8
    5a84:	18fb      	adds	r3, r7, r3
    5a86:	785b      	ldrb	r3, [r3, #1]
    5a88:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    5a8a:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5a8c:	2308      	movs	r3, #8
    5a8e:	18fb      	adds	r3, r7, r3
    5a90:	789b      	ldrb	r3, [r3, #2]
    5a92:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    5a94:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    5a96:	2308      	movs	r3, #8
    5a98:	18fb      	adds	r3, r7, r3
    5a9a:	78db      	ldrb	r3, [r3, #3]
    5a9c:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5a9e:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    5aa0:	683b      	ldr	r3, [r7, #0]
    5aa2:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    5aa4:	2301      	movs	r3, #1
}
    5aa6:	0018      	movs	r0, r3
    5aa8:	46bd      	mov	sp, r7
    5aaa:	b004      	add	sp, #16
    5aac:	bdb0      	pop	{r4, r5, r7, pc}
    5aae:	46c0      	nop			; (mov r8, r8)
    5ab0:	00004e85 	.word	0x00004e85
    5ab4:	00000245 	.word	0x00000245
    5ab8:	00011e44 	.word	0x00011e44
    5abc:	000118fc 	.word	0x000118fc
    5ac0:	0000fd31 	.word	0x0000fd31
    5ac4:	00011bd0 	.word	0x00011bd0
    5ac8:	0000fd65 	.word	0x0000fd65
    5acc:	000051c9 	.word	0x000051c9
    5ad0:	0000024b 	.word	0x0000024b
    5ad4:	00011bfc 	.word	0x00011bfc
    5ad8:	00005305 	.word	0x00005305
    5adc:	00000253 	.word	0x00000253
    5ae0:	00011c30 	.word	0x00011c30
    5ae4:	0000fe51 	.word	0x0000fe51

00005ae8 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    5ae8:	b5b0      	push	{r4, r5, r7, lr}
    5aea:	b088      	sub	sp, #32
    5aec:	af02      	add	r7, sp, #8
    5aee:	60f8      	str	r0, [r7, #12]
    5af0:	60b9      	str	r1, [r7, #8]
    5af2:	1dbb      	adds	r3, r7, #6
    5af4:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    5af6:	2317      	movs	r3, #23
    5af8:	18fb      	adds	r3, r7, r3
    5afa:	22c8      	movs	r2, #200	; 0xc8
    5afc:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    5afe:	1dbb      	adds	r3, r7, #6
    5b00:	881a      	ldrh	r2, [r3, #0]
    5b02:	2316      	movs	r3, #22
    5b04:	18fc      	adds	r4, r7, r3
    5b06:	68f9      	ldr	r1, [r7, #12]
    5b08:	2317      	movs	r3, #23
    5b0a:	18fb      	adds	r3, r7, r3
    5b0c:	7818      	ldrb	r0, [r3, #0]
    5b0e:	2300      	movs	r3, #0
    5b10:	9300      	str	r3, [sp, #0]
    5b12:	0013      	movs	r3, r2
    5b14:	2200      	movs	r2, #0
    5b16:	4d39      	ldr	r5, [pc, #228]	; (5bfc <nm_spi_read+0x114>)
    5b18:	47a8      	blx	r5
    5b1a:	0003      	movs	r3, r0
    5b1c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5b1e:	2316      	movs	r3, #22
    5b20:	18fb      	adds	r3, r7, r3
    5b22:	781b      	ldrb	r3, [r3, #0]
    5b24:	b25b      	sxtb	r3, r3
    5b26:	2b01      	cmp	r3, #1
    5b28:	d011      	beq.n	5b4e <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    5b2a:	239d      	movs	r3, #157	; 0x9d
    5b2c:	009a      	lsls	r2, r3, #2
    5b2e:	4934      	ldr	r1, [pc, #208]	; (5c00 <nm_spi_read+0x118>)
    5b30:	4b34      	ldr	r3, [pc, #208]	; (5c04 <nm_spi_read+0x11c>)
    5b32:	0018      	movs	r0, r3
    5b34:	4b34      	ldr	r3, [pc, #208]	; (5c08 <nm_spi_read+0x120>)
    5b36:	4798      	blx	r3
    5b38:	68fa      	ldr	r2, [r7, #12]
    5b3a:	4b34      	ldr	r3, [pc, #208]	; (5c0c <nm_spi_read+0x124>)
    5b3c:	0011      	movs	r1, r2
    5b3e:	0018      	movs	r0, r3
    5b40:	4b31      	ldr	r3, [pc, #196]	; (5c08 <nm_spi_read+0x120>)
    5b42:	4798      	blx	r3
    5b44:	200d      	movs	r0, #13
    5b46:	4b32      	ldr	r3, [pc, #200]	; (5c10 <nm_spi_read+0x128>)
    5b48:	4798      	blx	r3
		return N_FAIL;
    5b4a:	2300      	movs	r3, #0
    5b4c:	e052      	b.n	5bf4 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    5b4e:	2316      	movs	r3, #22
    5b50:	18fc      	adds	r4, r7, r3
    5b52:	2317      	movs	r3, #23
    5b54:	18fb      	adds	r3, r7, r3
    5b56:	781b      	ldrb	r3, [r3, #0]
    5b58:	0018      	movs	r0, r3
    5b5a:	4b2e      	ldr	r3, [pc, #184]	; (5c14 <nm_spi_read+0x12c>)
    5b5c:	4798      	blx	r3
    5b5e:	0003      	movs	r3, r0
    5b60:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5b62:	2316      	movs	r3, #22
    5b64:	18fb      	adds	r3, r7, r3
    5b66:	781b      	ldrb	r3, [r3, #0]
    5b68:	b25b      	sxtb	r3, r3
    5b6a:	2b01      	cmp	r3, #1
    5b6c:	d018      	beq.n	5ba0 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    5b6e:	4a2a      	ldr	r2, [pc, #168]	; (5c18 <nm_spi_read+0x130>)
    5b70:	4923      	ldr	r1, [pc, #140]	; (5c00 <nm_spi_read+0x118>)
    5b72:	4b24      	ldr	r3, [pc, #144]	; (5c04 <nm_spi_read+0x11c>)
    5b74:	0018      	movs	r0, r3
    5b76:	4b24      	ldr	r3, [pc, #144]	; (5c08 <nm_spi_read+0x120>)
    5b78:	4798      	blx	r3
    5b7a:	68fa      	ldr	r2, [r7, #12]
    5b7c:	4b27      	ldr	r3, [pc, #156]	; (5c1c <nm_spi_read+0x134>)
    5b7e:	0011      	movs	r1, r2
    5b80:	0018      	movs	r0, r3
    5b82:	4b21      	ldr	r3, [pc, #132]	; (5c08 <nm_spi_read+0x120>)
    5b84:	4798      	blx	r3
    5b86:	200d      	movs	r0, #13
    5b88:	4b21      	ldr	r3, [pc, #132]	; (5c10 <nm_spi_read+0x128>)
    5b8a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5b8c:	2300      	movs	r3, #0
    5b8e:	9300      	str	r3, [sp, #0]
    5b90:	2300      	movs	r3, #0
    5b92:	2200      	movs	r2, #0
    5b94:	2100      	movs	r1, #0
    5b96:	20cf      	movs	r0, #207	; 0xcf
    5b98:	4c18      	ldr	r4, [pc, #96]	; (5bfc <nm_spi_read+0x114>)
    5b9a:	47a0      	blx	r4
		return N_FAIL;
    5b9c:	2300      	movs	r3, #0
    5b9e:	e029      	b.n	5bf4 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    5ba0:	2316      	movs	r3, #22
    5ba2:	18fc      	adds	r4, r7, r3
    5ba4:	1dbb      	adds	r3, r7, #6
    5ba6:	8819      	ldrh	r1, [r3, #0]
    5ba8:	68bb      	ldr	r3, [r7, #8]
    5baa:	2200      	movs	r2, #0
    5bac:	0018      	movs	r0, r3
    5bae:	4b1c      	ldr	r3, [pc, #112]	; (5c20 <nm_spi_read+0x138>)
    5bb0:	4798      	blx	r3
    5bb2:	0003      	movs	r3, r0
    5bb4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5bb6:	2316      	movs	r3, #22
    5bb8:	18fb      	adds	r3, r7, r3
    5bba:	781b      	ldrb	r3, [r3, #0]
    5bbc:	b25b      	sxtb	r3, r3
    5bbe:	2b01      	cmp	r3, #1
    5bc0:	d017      	beq.n	5bf2 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    5bc2:	23a1      	movs	r3, #161	; 0xa1
    5bc4:	009a      	lsls	r2, r3, #2
    5bc6:	490e      	ldr	r1, [pc, #56]	; (5c00 <nm_spi_read+0x118>)
    5bc8:	4b0e      	ldr	r3, [pc, #56]	; (5c04 <nm_spi_read+0x11c>)
    5bca:	0018      	movs	r0, r3
    5bcc:	4b0e      	ldr	r3, [pc, #56]	; (5c08 <nm_spi_read+0x120>)
    5bce:	4798      	blx	r3
    5bd0:	4b14      	ldr	r3, [pc, #80]	; (5c24 <nm_spi_read+0x13c>)
    5bd2:	0018      	movs	r0, r3
    5bd4:	4b14      	ldr	r3, [pc, #80]	; (5c28 <nm_spi_read+0x140>)
    5bd6:	4798      	blx	r3
    5bd8:	200d      	movs	r0, #13
    5bda:	4b0d      	ldr	r3, [pc, #52]	; (5c10 <nm_spi_read+0x128>)
    5bdc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5bde:	2300      	movs	r3, #0
    5be0:	9300      	str	r3, [sp, #0]
    5be2:	2300      	movs	r3, #0
    5be4:	2200      	movs	r2, #0
    5be6:	2100      	movs	r1, #0
    5be8:	20cf      	movs	r0, #207	; 0xcf
    5bea:	4c04      	ldr	r4, [pc, #16]	; (5bfc <nm_spi_read+0x114>)
    5bec:	47a0      	blx	r4
		return N_FAIL;
    5bee:	2300      	movs	r3, #0
    5bf0:	e000      	b.n	5bf4 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    5bf2:	2301      	movs	r3, #1
}
    5bf4:	0018      	movs	r0, r3
    5bf6:	46bd      	mov	sp, r7
    5bf8:	b006      	add	sp, #24
    5bfa:	bdb0      	pop	{r4, r5, r7, pc}
    5bfc:	00004e85 	.word	0x00004e85
    5c00:	00011e54 	.word	0x00011e54
    5c04:	000118fc 	.word	0x000118fc
    5c08:	0000fd31 	.word	0x0000fd31
    5c0c:	00011c50 	.word	0x00011c50
    5c10:	0000fd65 	.word	0x0000fd65
    5c14:	000051c9 	.word	0x000051c9
    5c18:	0000027a 	.word	0x0000027a
    5c1c:	00011c80 	.word	0x00011c80
    5c20:	00005305 	.word	0x00005305
    5c24:	00011cb8 	.word	0x00011cb8
    5c28:	0000fe51 	.word	0x0000fe51

00005c2c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    5c2c:	b580      	push	{r7, lr}
    5c2e:	b082      	sub	sp, #8
    5c30:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    5c32:	4b0c      	ldr	r3, [pc, #48]	; (5c64 <spi_init_pkt_sz+0x38>)
    5c34:	0018      	movs	r0, r3
    5c36:	4b0c      	ldr	r3, [pc, #48]	; (5c68 <spi_init_pkt_sz+0x3c>)
    5c38:	4798      	blx	r3
    5c3a:	0003      	movs	r3, r0
    5c3c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    5c3e:	687b      	ldr	r3, [r7, #4]
    5c40:	2270      	movs	r2, #112	; 0x70
    5c42:	4393      	bics	r3, r2
    5c44:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    5c46:	687b      	ldr	r3, [r7, #4]
    5c48:	2250      	movs	r2, #80	; 0x50
    5c4a:	4313      	orrs	r3, r2
    5c4c:	607b      	str	r3, [r7, #4]
    5c4e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    5c50:	687b      	ldr	r3, [r7, #4]
    5c52:	4a04      	ldr	r2, [pc, #16]	; (5c64 <spi_init_pkt_sz+0x38>)
    5c54:	0019      	movs	r1, r3
    5c56:	0010      	movs	r0, r2
    5c58:	4b04      	ldr	r3, [pc, #16]	; (5c6c <spi_init_pkt_sz+0x40>)
    5c5a:	4798      	blx	r3
}
    5c5c:	46c0      	nop			; (mov r8, r8)
    5c5e:	46bd      	mov	sp, r7
    5c60:	b002      	add	sp, #8
    5c62:	bd80      	pop	{r7, pc}
    5c64:	0000e824 	.word	0x0000e824
    5c68:	00005dd1 	.word	0x00005dd1
    5c6c:	00005e45 	.word	0x00005e45

00005c70 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    5c70:	b580      	push	{r7, lr}
    5c72:	b082      	sub	sp, #8
    5c74:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
    5c76:	2300      	movs	r3, #0
    5c78:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    5c7a:	4b3f      	ldr	r3, [pc, #252]	; (5d78 <nm_spi_init+0x108>)
    5c7c:	2200      	movs	r2, #0
    5c7e:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    5c80:	003b      	movs	r3, r7
    5c82:	4a3e      	ldr	r2, [pc, #248]	; (5d7c <nm_spi_init+0x10c>)
    5c84:	0019      	movs	r1, r3
    5c86:	0010      	movs	r0, r2
    5c88:	4b3d      	ldr	r3, [pc, #244]	; (5d80 <nm_spi_init+0x110>)
    5c8a:	4798      	blx	r3
    5c8c:	1e03      	subs	r3, r0, #0
    5c8e:	d127      	bne.n	5ce0 <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    5c90:	4b39      	ldr	r3, [pc, #228]	; (5d78 <nm_spi_init+0x108>)
    5c92:	2201      	movs	r2, #1
    5c94:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    5c96:	4a3b      	ldr	r2, [pc, #236]	; (5d84 <nm_spi_init+0x114>)
    5c98:	493b      	ldr	r1, [pc, #236]	; (5d88 <nm_spi_init+0x118>)
    5c9a:	4b3c      	ldr	r3, [pc, #240]	; (5d8c <nm_spi_init+0x11c>)
    5c9c:	0018      	movs	r0, r3
    5c9e:	4b3c      	ldr	r3, [pc, #240]	; (5d90 <nm_spi_init+0x120>)
    5ca0:	4798      	blx	r3
    5ca2:	4b3c      	ldr	r3, [pc, #240]	; (5d94 <nm_spi_init+0x124>)
    5ca4:	0018      	movs	r0, r3
    5ca6:	4b3c      	ldr	r3, [pc, #240]	; (5d98 <nm_spi_init+0x128>)
    5ca8:	4798      	blx	r3
    5caa:	200d      	movs	r0, #13
    5cac:	4b3b      	ldr	r3, [pc, #236]	; (5d9c <nm_spi_init+0x12c>)
    5cae:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    5cb0:	003b      	movs	r3, r7
    5cb2:	4a32      	ldr	r2, [pc, #200]	; (5d7c <nm_spi_init+0x10c>)
    5cb4:	0019      	movs	r1, r3
    5cb6:	0010      	movs	r0, r2
    5cb8:	4b31      	ldr	r3, [pc, #196]	; (5d80 <nm_spi_init+0x110>)
    5cba:	4798      	blx	r3
    5cbc:	1e03      	subs	r3, r0, #0
    5cbe:	d10f      	bne.n	5ce0 <nm_spi_init+0x70>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    5cc0:	23b2      	movs	r3, #178	; 0xb2
    5cc2:	009a      	lsls	r2, r3, #2
    5cc4:	4930      	ldr	r1, [pc, #192]	; (5d88 <nm_spi_init+0x118>)
    5cc6:	4b31      	ldr	r3, [pc, #196]	; (5d8c <nm_spi_init+0x11c>)
    5cc8:	0018      	movs	r0, r3
    5cca:	4b31      	ldr	r3, [pc, #196]	; (5d90 <nm_spi_init+0x120>)
    5ccc:	4798      	blx	r3
    5cce:	4b34      	ldr	r3, [pc, #208]	; (5da0 <nm_spi_init+0x130>)
    5cd0:	0018      	movs	r0, r3
    5cd2:	4b31      	ldr	r3, [pc, #196]	; (5d98 <nm_spi_init+0x128>)
    5cd4:	4798      	blx	r3
    5cd6:	200d      	movs	r0, #13
    5cd8:	4b30      	ldr	r3, [pc, #192]	; (5d9c <nm_spi_init+0x12c>)
    5cda:	4798      	blx	r3
			return 0;
    5cdc:	2300      	movs	r3, #0
    5cde:	e046      	b.n	5d6e <nm_spi_init+0xfe>
		}
	}
	if(gu8Crc_off == 0)
    5ce0:	4b25      	ldr	r3, [pc, #148]	; (5d78 <nm_spi_init+0x108>)
    5ce2:	781b      	ldrb	r3, [r3, #0]
    5ce4:	2b00      	cmp	r3, #0
    5ce6:	d125      	bne.n	5d34 <nm_spi_init+0xc4>
	{
		reg &= ~0xc;	/* disable crc checking */
    5ce8:	683b      	ldr	r3, [r7, #0]
    5cea:	220c      	movs	r2, #12
    5cec:	4393      	bics	r3, r2
    5cee:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    5cf0:	683b      	ldr	r3, [r7, #0]
    5cf2:	2270      	movs	r2, #112	; 0x70
    5cf4:	4393      	bics	r3, r2
    5cf6:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    5cf8:	683b      	ldr	r3, [r7, #0]
    5cfa:	2250      	movs	r2, #80	; 0x50
    5cfc:	4313      	orrs	r3, r2
    5cfe:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    5d00:	683b      	ldr	r3, [r7, #0]
    5d02:	4a1e      	ldr	r2, [pc, #120]	; (5d7c <nm_spi_init+0x10c>)
    5d04:	0019      	movs	r1, r3
    5d06:	0010      	movs	r0, r2
    5d08:	4b26      	ldr	r3, [pc, #152]	; (5da4 <nm_spi_init+0x134>)
    5d0a:	4798      	blx	r3
    5d0c:	1e03      	subs	r3, r0, #0
    5d0e:	d10e      	bne.n	5d2e <nm_spi_init+0xbe>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    5d10:	4a25      	ldr	r2, [pc, #148]	; (5da8 <nm_spi_init+0x138>)
    5d12:	491d      	ldr	r1, [pc, #116]	; (5d88 <nm_spi_init+0x118>)
    5d14:	4b1d      	ldr	r3, [pc, #116]	; (5d8c <nm_spi_init+0x11c>)
    5d16:	0018      	movs	r0, r3
    5d18:	4b1d      	ldr	r3, [pc, #116]	; (5d90 <nm_spi_init+0x120>)
    5d1a:	4798      	blx	r3
    5d1c:	4b23      	ldr	r3, [pc, #140]	; (5dac <nm_spi_init+0x13c>)
    5d1e:	0018      	movs	r0, r3
    5d20:	4b1d      	ldr	r3, [pc, #116]	; (5d98 <nm_spi_init+0x128>)
    5d22:	4798      	blx	r3
    5d24:	200d      	movs	r0, #13
    5d26:	4b1d      	ldr	r3, [pc, #116]	; (5d9c <nm_spi_init+0x12c>)
    5d28:	4798      	blx	r3
			return 0;
    5d2a:	2300      	movs	r3, #0
    5d2c:	e01f      	b.n	5d6e <nm_spi_init+0xfe>
		}
		gu8Crc_off = 1;
    5d2e:	4b12      	ldr	r3, [pc, #72]	; (5d78 <nm_spi_init+0x108>)
    5d30:	2201      	movs	r2, #1
    5d32:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    5d34:	1d3a      	adds	r2, r7, #4
    5d36:	2380      	movs	r3, #128	; 0x80
    5d38:	015b      	lsls	r3, r3, #5
    5d3a:	0011      	movs	r1, r2
    5d3c:	0018      	movs	r0, r3
    5d3e:	4b10      	ldr	r3, [pc, #64]	; (5d80 <nm_spi_init+0x110>)
    5d40:	4798      	blx	r3
    5d42:	1e03      	subs	r3, r0, #0
    5d44:	d110      	bne.n	5d68 <nm_spi_init+0xf8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    5d46:	23b7      	movs	r3, #183	; 0xb7
    5d48:	009a      	lsls	r2, r3, #2
    5d4a:	490f      	ldr	r1, [pc, #60]	; (5d88 <nm_spi_init+0x118>)
    5d4c:	4b0f      	ldr	r3, [pc, #60]	; (5d8c <nm_spi_init+0x11c>)
    5d4e:	0018      	movs	r0, r3
    5d50:	4b0f      	ldr	r3, [pc, #60]	; (5d90 <nm_spi_init+0x120>)
    5d52:	4798      	blx	r3
    5d54:	4b16      	ldr	r3, [pc, #88]	; (5db0 <nm_spi_init+0x140>)
    5d56:	0018      	movs	r0, r3
    5d58:	4b0f      	ldr	r3, [pc, #60]	; (5d98 <nm_spi_init+0x128>)
    5d5a:	4798      	blx	r3
    5d5c:	200d      	movs	r0, #13
    5d5e:	4b0f      	ldr	r3, [pc, #60]	; (5d9c <nm_spi_init+0x12c>)
    5d60:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    5d62:	2306      	movs	r3, #6
    5d64:	425b      	negs	r3, r3
    5d66:	e002      	b.n	5d6e <nm_spi_init+0xfe>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    5d68:	4b12      	ldr	r3, [pc, #72]	; (5db4 <nm_spi_init+0x144>)
    5d6a:	4798      	blx	r3


	return M2M_SUCCESS;
    5d6c:	2300      	movs	r3, #0
}
    5d6e:	0018      	movs	r0, r3
    5d70:	46bd      	mov	sp, r7
    5d72:	b002      	add	sp, #8
    5d74:	bd80      	pop	{r7, pc}
    5d76:	46c0      	nop			; (mov r8, r8)
    5d78:	200000e8 	.word	0x200000e8
    5d7c:	0000e824 	.word	0x0000e824
    5d80:	0000593d 	.word	0x0000593d
    5d84:	000002c5 	.word	0x000002c5
    5d88:	00011e60 	.word	0x00011e60
    5d8c:	000118fc 	.word	0x000118fc
    5d90:	0000fd31 	.word	0x0000fd31
    5d94:	00011ce0 	.word	0x00011ce0
    5d98:	0000fe51 	.word	0x0000fe51
    5d9c:	0000fd65 	.word	0x0000fd65
    5da0:	00011d30 	.word	0x00011d30
    5da4:	000056dd 	.word	0x000056dd
    5da8:	000002d2 	.word	0x000002d2
    5dac:	00011d5c 	.word	0x00011d5c
    5db0:	00011d90 	.word	0x00011d90
    5db4:	00005c2d 	.word	0x00005c2d

00005db8 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
    5db8:	b580      	push	{r7, lr}
    5dba:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    5dbc:	4b03      	ldr	r3, [pc, #12]	; (5dcc <nm_spi_deinit+0x14>)
    5dbe:	2200      	movs	r2, #0
    5dc0:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    5dc2:	2300      	movs	r3, #0
}
    5dc4:	0018      	movs	r0, r3
    5dc6:	46bd      	mov	sp, r7
    5dc8:	bd80      	pop	{r7, pc}
    5dca:	46c0      	nop			; (mov r8, r8)
    5dcc:	200000e8 	.word	0x200000e8

00005dd0 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    5dd0:	b580      	push	{r7, lr}
    5dd2:	b084      	sub	sp, #16
    5dd4:	af00      	add	r7, sp, #0
    5dd6:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    5dd8:	230c      	movs	r3, #12
    5dda:	18fa      	adds	r2, r7, r3
    5ddc:	687b      	ldr	r3, [r7, #4]
    5dde:	0011      	movs	r1, r2
    5de0:	0018      	movs	r0, r3
    5de2:	4b03      	ldr	r3, [pc, #12]	; (5df0 <nm_spi_read_reg+0x20>)
    5de4:	4798      	blx	r3

	return u32Val;
    5de6:	68fb      	ldr	r3, [r7, #12]
}
    5de8:	0018      	movs	r0, r3
    5dea:	46bd      	mov	sp, r7
    5dec:	b004      	add	sp, #16
    5dee:	bd80      	pop	{r7, pc}
    5df0:	0000593d 	.word	0x0000593d

00005df4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    5df4:	b590      	push	{r4, r7, lr}
    5df6:	b085      	sub	sp, #20
    5df8:	af00      	add	r7, sp, #0
    5dfa:	6078      	str	r0, [r7, #4]
    5dfc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    5dfe:	230f      	movs	r3, #15
    5e00:	18fc      	adds	r4, r7, r3
    5e02:	683a      	ldr	r2, [r7, #0]
    5e04:	687b      	ldr	r3, [r7, #4]
    5e06:	0011      	movs	r1, r2
    5e08:	0018      	movs	r0, r3
    5e0a:	4b0d      	ldr	r3, [pc, #52]	; (5e40 <nm_spi_read_reg_with_ret+0x4c>)
    5e0c:	4798      	blx	r3
    5e0e:	0003      	movs	r3, r0
    5e10:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5e12:	230f      	movs	r3, #15
    5e14:	18fb      	adds	r3, r7, r3
    5e16:	781b      	ldrb	r3, [r3, #0]
    5e18:	b25b      	sxtb	r3, r3
    5e1a:	2b01      	cmp	r3, #1
    5e1c:	d104      	bne.n	5e28 <nm_spi_read_reg_with_ret+0x34>
    5e1e:	230f      	movs	r3, #15
    5e20:	18fb      	adds	r3, r7, r3
    5e22:	2200      	movs	r2, #0
    5e24:	701a      	strb	r2, [r3, #0]
    5e26:	e003      	b.n	5e30 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5e28:	230f      	movs	r3, #15
    5e2a:	18fb      	adds	r3, r7, r3
    5e2c:	22fa      	movs	r2, #250	; 0xfa
    5e2e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5e30:	230f      	movs	r3, #15
    5e32:	18fb      	adds	r3, r7, r3
    5e34:	781b      	ldrb	r3, [r3, #0]
    5e36:	b25b      	sxtb	r3, r3
}
    5e38:	0018      	movs	r0, r3
    5e3a:	46bd      	mov	sp, r7
    5e3c:	b005      	add	sp, #20
    5e3e:	bd90      	pop	{r4, r7, pc}
    5e40:	0000593d 	.word	0x0000593d

00005e44 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    5e44:	b590      	push	{r4, r7, lr}
    5e46:	b085      	sub	sp, #20
    5e48:	af00      	add	r7, sp, #0
    5e4a:	6078      	str	r0, [r7, #4]
    5e4c:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    5e4e:	230f      	movs	r3, #15
    5e50:	18fc      	adds	r4, r7, r3
    5e52:	683a      	ldr	r2, [r7, #0]
    5e54:	687b      	ldr	r3, [r7, #4]
    5e56:	0011      	movs	r1, r2
    5e58:	0018      	movs	r0, r3
    5e5a:	4b0d      	ldr	r3, [pc, #52]	; (5e90 <nm_spi_write_reg+0x4c>)
    5e5c:	4798      	blx	r3
    5e5e:	0003      	movs	r3, r0
    5e60:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5e62:	230f      	movs	r3, #15
    5e64:	18fb      	adds	r3, r7, r3
    5e66:	781b      	ldrb	r3, [r3, #0]
    5e68:	b25b      	sxtb	r3, r3
    5e6a:	2b01      	cmp	r3, #1
    5e6c:	d104      	bne.n	5e78 <nm_spi_write_reg+0x34>
    5e6e:	230f      	movs	r3, #15
    5e70:	18fb      	adds	r3, r7, r3
    5e72:	2200      	movs	r2, #0
    5e74:	701a      	strb	r2, [r3, #0]
    5e76:	e003      	b.n	5e80 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5e78:	230f      	movs	r3, #15
    5e7a:	18fb      	adds	r3, r7, r3
    5e7c:	22fa      	movs	r2, #250	; 0xfa
    5e7e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5e80:	230f      	movs	r3, #15
    5e82:	18fb      	adds	r3, r7, r3
    5e84:	781b      	ldrb	r3, [r3, #0]
    5e86:	b25b      	sxtb	r3, r3
}
    5e88:	0018      	movs	r0, r3
    5e8a:	46bd      	mov	sp, r7
    5e8c:	b005      	add	sp, #20
    5e8e:	bd90      	pop	{r4, r7, pc}
    5e90:	000056dd 	.word	0x000056dd

00005e94 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5e94:	b590      	push	{r4, r7, lr}
    5e96:	b087      	sub	sp, #28
    5e98:	af00      	add	r7, sp, #0
    5e9a:	60f8      	str	r0, [r7, #12]
    5e9c:	60b9      	str	r1, [r7, #8]
    5e9e:	1dbb      	adds	r3, r7, #6
    5ea0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    5ea2:	2317      	movs	r3, #23
    5ea4:	18fc      	adds	r4, r7, r3
    5ea6:	1dbb      	adds	r3, r7, #6
    5ea8:	881a      	ldrh	r2, [r3, #0]
    5eaa:	68b9      	ldr	r1, [r7, #8]
    5eac:	68fb      	ldr	r3, [r7, #12]
    5eae:	0018      	movs	r0, r3
    5eb0:	4b0d      	ldr	r3, [pc, #52]	; (5ee8 <nm_spi_read_block+0x54>)
    5eb2:	4798      	blx	r3
    5eb4:	0003      	movs	r3, r0
    5eb6:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5eb8:	2317      	movs	r3, #23
    5eba:	18fb      	adds	r3, r7, r3
    5ebc:	781b      	ldrb	r3, [r3, #0]
    5ebe:	b25b      	sxtb	r3, r3
    5ec0:	2b01      	cmp	r3, #1
    5ec2:	d104      	bne.n	5ece <nm_spi_read_block+0x3a>
    5ec4:	2317      	movs	r3, #23
    5ec6:	18fb      	adds	r3, r7, r3
    5ec8:	2200      	movs	r2, #0
    5eca:	701a      	strb	r2, [r3, #0]
    5ecc:	e003      	b.n	5ed6 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5ece:	2317      	movs	r3, #23
    5ed0:	18fb      	adds	r3, r7, r3
    5ed2:	22fa      	movs	r2, #250	; 0xfa
    5ed4:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5ed6:	2317      	movs	r3, #23
    5ed8:	18fb      	adds	r3, r7, r3
    5eda:	781b      	ldrb	r3, [r3, #0]
    5edc:	b25b      	sxtb	r3, r3
}
    5ede:	0018      	movs	r0, r3
    5ee0:	46bd      	mov	sp, r7
    5ee2:	b007      	add	sp, #28
    5ee4:	bd90      	pop	{r4, r7, pc}
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	00005ae9 	.word	0x00005ae9

00005eec <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    5eec:	b590      	push	{r4, r7, lr}
    5eee:	b087      	sub	sp, #28
    5ef0:	af00      	add	r7, sp, #0
    5ef2:	60f8      	str	r0, [r7, #12]
    5ef4:	60b9      	str	r1, [r7, #8]
    5ef6:	1dbb      	adds	r3, r7, #6
    5ef8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    5efa:	2317      	movs	r3, #23
    5efc:	18fc      	adds	r4, r7, r3
    5efe:	1dbb      	adds	r3, r7, #6
    5f00:	881a      	ldrh	r2, [r3, #0]
    5f02:	68b9      	ldr	r1, [r7, #8]
    5f04:	68fb      	ldr	r3, [r7, #12]
    5f06:	0018      	movs	r0, r3
    5f08:	4b0d      	ldr	r3, [pc, #52]	; (5f40 <nm_spi_write_block+0x54>)
    5f0a:	4798      	blx	r3
    5f0c:	0003      	movs	r3, r0
    5f0e:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    5f10:	2317      	movs	r3, #23
    5f12:	18fb      	adds	r3, r7, r3
    5f14:	781b      	ldrb	r3, [r3, #0]
    5f16:	b25b      	sxtb	r3, r3
    5f18:	2b01      	cmp	r3, #1
    5f1a:	d104      	bne.n	5f26 <nm_spi_write_block+0x3a>
    5f1c:	2317      	movs	r3, #23
    5f1e:	18fb      	adds	r3, r7, r3
    5f20:	2200      	movs	r2, #0
    5f22:	701a      	strb	r2, [r3, #0]
    5f24:	e003      	b.n	5f2e <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    5f26:	2317      	movs	r3, #23
    5f28:	18fb      	adds	r3, r7, r3
    5f2a:	22fa      	movs	r2, #250	; 0xfa
    5f2c:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    5f2e:	2317      	movs	r3, #23
    5f30:	18fb      	adds	r3, r7, r3
    5f32:	781b      	ldrb	r3, [r3, #0]
    5f34:	b25b      	sxtb	r3, r3
}
    5f36:	0018      	movs	r0, r3
    5f38:	46bd      	mov	sp, r7
    5f3a:	b007      	add	sp, #28
    5f3c:	bd90      	pop	{r4, r7, pc}
    5f3e:	46c0      	nop			; (mov r8, r8)
    5f40:	000057f9 	.word	0x000057f9

00005f44 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    5f44:	b590      	push	{r4, r7, lr}
    5f46:	b089      	sub	sp, #36	; 0x24
    5f48:	af00      	add	r7, sp, #0
    5f4a:	60b9      	str	r1, [r7, #8]
    5f4c:	0011      	movs	r1, r2
    5f4e:	607b      	str	r3, [r7, #4]
    5f50:	230f      	movs	r3, #15
    5f52:	18fb      	adds	r3, r7, r3
    5f54:	1c02      	adds	r2, r0, #0
    5f56:	701a      	strb	r2, [r3, #0]
    5f58:	230e      	movs	r3, #14
    5f5a:	18fb      	adds	r3, r7, r3
    5f5c:	1c0a      	adds	r2, r1, #0
    5f5e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    5f60:	2330      	movs	r3, #48	; 0x30
    5f62:	18fb      	adds	r3, r7, r3
    5f64:	881b      	ldrh	r3, [r3, #0]
    5f66:	2b00      	cmp	r3, #0
    5f68:	d100      	bne.n	5f6c <Socket_ReadSocketData+0x28>
    5f6a:	e0bf      	b.n	60ec <Socket_ReadSocketData+0x1a8>
    5f6c:	230f      	movs	r3, #15
    5f6e:	18fb      	adds	r3, r7, r3
    5f70:	2200      	movs	r2, #0
    5f72:	569a      	ldrsb	r2, [r3, r2]
    5f74:	4b5f      	ldr	r3, [pc, #380]	; (60f4 <Socket_ReadSocketData+0x1b0>)
    5f76:	0112      	lsls	r2, r2, #4
    5f78:	58d3      	ldr	r3, [r2, r3]
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d100      	bne.n	5f80 <Socket_ReadSocketData+0x3c>
    5f7e:	e0b5      	b.n	60ec <Socket_ReadSocketData+0x1a8>
    5f80:	230f      	movs	r3, #15
    5f82:	18fb      	adds	r3, r7, r3
    5f84:	781b      	ldrb	r3, [r3, #0]
    5f86:	b25b      	sxtb	r3, r3
    5f88:	4a5a      	ldr	r2, [pc, #360]	; (60f4 <Socket_ReadSocketData+0x1b0>)
    5f8a:	011b      	lsls	r3, r3, #4
    5f8c:	18d3      	adds	r3, r2, r3
    5f8e:	3304      	adds	r3, #4
    5f90:	881b      	ldrh	r3, [r3, #0]
    5f92:	b29b      	uxth	r3, r3
    5f94:	2b00      	cmp	r3, #0
    5f96:	d100      	bne.n	5f9a <Socket_ReadSocketData+0x56>
    5f98:	e0a8      	b.n	60ec <Socket_ReadSocketData+0x1a8>
    5f9a:	230f      	movs	r3, #15
    5f9c:	18fb      	adds	r3, r7, r3
    5f9e:	781b      	ldrb	r3, [r3, #0]
    5fa0:	b25b      	sxtb	r3, r3
    5fa2:	4a54      	ldr	r2, [pc, #336]	; (60f4 <Socket_ReadSocketData+0x1b0>)
    5fa4:	011b      	lsls	r3, r3, #4
    5fa6:	18d3      	adds	r3, r2, r3
    5fa8:	330a      	adds	r3, #10
    5faa:	781b      	ldrb	r3, [r3, #0]
    5fac:	b2db      	uxtb	r3, r3
    5fae:	2b01      	cmp	r3, #1
    5fb0:	d000      	beq.n	5fb4 <Socket_ReadSocketData+0x70>
    5fb2:	e09b      	b.n	60ec <Socket_ReadSocketData+0x1a8>
	{
		uint32	u32Address = u32StartAddress;
    5fb4:	687b      	ldr	r3, [r7, #4]
    5fb6:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    5fb8:	68bb      	ldr	r3, [r7, #8]
    5fba:	2230      	movs	r2, #48	; 0x30
    5fbc:	18ba      	adds	r2, r7, r2
    5fbe:	8812      	ldrh	r2, [r2, #0]
    5fc0:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    5fc2:	2319      	movs	r3, #25
    5fc4:	18fb      	adds	r3, r7, r3
    5fc6:	2201      	movs	r2, #1
    5fc8:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    5fca:	231a      	movs	r3, #26
    5fcc:	18fb      	adds	r3, r7, r3
    5fce:	2230      	movs	r2, #48	; 0x30
    5fd0:	18ba      	adds	r2, r7, r2
    5fd2:	8812      	ldrh	r2, [r2, #0]
    5fd4:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    5fd6:	230f      	movs	r3, #15
    5fd8:	18fb      	adds	r3, r7, r3
    5fda:	781b      	ldrb	r3, [r3, #0]
    5fdc:	b25b      	sxtb	r3, r3
    5fde:	4a45      	ldr	r2, [pc, #276]	; (60f4 <Socket_ReadSocketData+0x1b0>)
    5fe0:	011b      	lsls	r3, r3, #4
    5fe2:	18d3      	adds	r3, r2, r3
    5fe4:	3304      	adds	r3, #4
    5fe6:	881b      	ldrh	r3, [r3, #0]
    5fe8:	b29b      	uxth	r3, r3
    5fea:	221a      	movs	r2, #26
    5fec:	18ba      	adds	r2, r7, r2
    5fee:	8812      	ldrh	r2, [r2, #0]
    5ff0:	1ad3      	subs	r3, r2, r3
    5ff2:	b29a      	uxth	r2, r3
    5ff4:	2316      	movs	r3, #22
    5ff6:	18fb      	adds	r3, r7, r3
    5ff8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    5ffa:	2316      	movs	r3, #22
    5ffc:	18fb      	adds	r3, r7, r3
    5ffe:	2200      	movs	r2, #0
    6000:	5e9b      	ldrsh	r3, [r3, r2]
    6002:	2b00      	cmp	r3, #0
    6004:	dd0f      	ble.n	6026 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    6006:	2319      	movs	r3, #25
    6008:	18fb      	adds	r3, r7, r3
    600a:	2200      	movs	r2, #0
    600c:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    600e:	230f      	movs	r3, #15
    6010:	18fb      	adds	r3, r7, r3
    6012:	2200      	movs	r2, #0
    6014:	569a      	ldrsb	r2, [r3, r2]
    6016:	231a      	movs	r3, #26
    6018:	18fb      	adds	r3, r7, r3
    601a:	4936      	ldr	r1, [pc, #216]	; (60f4 <Socket_ReadSocketData+0x1b0>)
    601c:	0112      	lsls	r2, r2, #4
    601e:	188a      	adds	r2, r1, r2
    6020:	3204      	adds	r2, #4
    6022:	8812      	ldrh	r2, [r2, #0]
    6024:	801a      	strh	r2, [r3, #0]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    6026:	230f      	movs	r3, #15
    6028:	18fb      	adds	r3, r7, r3
    602a:	2200      	movs	r2, #0
    602c:	569a      	ldrsb	r2, [r3, r2]
    602e:	4b31      	ldr	r3, [pc, #196]	; (60f4 <Socket_ReadSocketData+0x1b0>)
    6030:	0112      	lsls	r2, r2, #4
    6032:	58d1      	ldr	r1, [r2, r3]
    6034:	2319      	movs	r3, #25
    6036:	18fb      	adds	r3, r7, r3
    6038:	781c      	ldrb	r4, [r3, #0]
    603a:	231a      	movs	r3, #26
    603c:	18fb      	adds	r3, r7, r3
    603e:	881a      	ldrh	r2, [r3, #0]
    6040:	69f8      	ldr	r0, [r7, #28]
    6042:	0023      	movs	r3, r4
    6044:	4c2c      	ldr	r4, [pc, #176]	; (60f8 <Socket_ReadSocketData+0x1b4>)
    6046:	47a0      	blx	r4
    6048:	1e03      	subs	r3, r0, #0
    604a:	d138      	bne.n	60be <Socket_ReadSocketData+0x17a>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    604c:	230f      	movs	r3, #15
    604e:	18fb      	adds	r3, r7, r3
    6050:	2200      	movs	r2, #0
    6052:	569a      	ldrsb	r2, [r3, r2]
    6054:	4b27      	ldr	r3, [pc, #156]	; (60f4 <Socket_ReadSocketData+0x1b0>)
    6056:	0112      	lsls	r2, r2, #4
    6058:	58d2      	ldr	r2, [r2, r3]
    605a:	68bb      	ldr	r3, [r7, #8]
    605c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    605e:	231a      	movs	r3, #26
    6060:	18fb      	adds	r3, r7, r3
    6062:	2200      	movs	r2, #0
    6064:	5e9a      	ldrsh	r2, [r3, r2]
    6066:	68bb      	ldr	r3, [r7, #8]
    6068:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    606a:	68bb      	ldr	r3, [r7, #8]
    606c:	88da      	ldrh	r2, [r3, #6]
    606e:	231a      	movs	r3, #26
    6070:	18fb      	adds	r3, r7, r3
    6072:	881b      	ldrh	r3, [r3, #0]
    6074:	1ad3      	subs	r3, r2, r3
    6076:	b29a      	uxth	r2, r3
    6078:	68bb      	ldr	r3, [r7, #8]
    607a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    607c:	4b1f      	ldr	r3, [pc, #124]	; (60fc <Socket_ReadSocketData+0x1b8>)
    607e:	681b      	ldr	r3, [r3, #0]
    6080:	2b00      	cmp	r3, #0
    6082:	d00b      	beq.n	609c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    6084:	4b1d      	ldr	r3, [pc, #116]	; (60fc <Socket_ReadSocketData+0x1b8>)
    6086:	681b      	ldr	r3, [r3, #0]
    6088:	68bc      	ldr	r4, [r7, #8]
    608a:	220e      	movs	r2, #14
    608c:	18ba      	adds	r2, r7, r2
    608e:	7811      	ldrb	r1, [r2, #0]
    6090:	220f      	movs	r2, #15
    6092:	18ba      	adds	r2, r7, r2
    6094:	2000      	movs	r0, #0
    6096:	5610      	ldrsb	r0, [r2, r0]
    6098:	0022      	movs	r2, r4
    609a:	4798      	blx	r3

				u16ReadCount -= u16Read;
    609c:	2330      	movs	r3, #48	; 0x30
    609e:	18f9      	adds	r1, r7, r3
    60a0:	2330      	movs	r3, #48	; 0x30
    60a2:	18fa      	adds	r2, r7, r3
    60a4:	231a      	movs	r3, #26
    60a6:	18fb      	adds	r3, r7, r3
    60a8:	8812      	ldrh	r2, [r2, #0]
    60aa:	881b      	ldrh	r3, [r3, #0]
    60ac:	1ad3      	subs	r3, r2, r3
    60ae:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    60b0:	231a      	movs	r3, #26
    60b2:	18fb      	adds	r3, r7, r3
    60b4:	881b      	ldrh	r3, [r3, #0]
    60b6:	69fa      	ldr	r2, [r7, #28]
    60b8:	18d3      	adds	r3, r2, r3
    60ba:	61fb      	str	r3, [r7, #28]
    60bc:	e010      	b.n	60e0 <Socket_ReadSocketData+0x19c>
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    60be:	4b10      	ldr	r3, [pc, #64]	; (6100 <Socket_ReadSocketData+0x1bc>)
    60c0:	0018      	movs	r0, r3
    60c2:	4b10      	ldr	r3, [pc, #64]	; (6104 <Socket_ReadSocketData+0x1c0>)
    60c4:	4798      	blx	r3
    60c6:	2330      	movs	r3, #48	; 0x30
    60c8:	18fb      	adds	r3, r7, r3
    60ca:	881a      	ldrh	r2, [r3, #0]
    60cc:	4b0e      	ldr	r3, [pc, #56]	; (6108 <Socket_ReadSocketData+0x1c4>)
    60ce:	0011      	movs	r1, r2
    60d0:	0018      	movs	r0, r3
    60d2:	4b0c      	ldr	r3, [pc, #48]	; (6104 <Socket_ReadSocketData+0x1c0>)
    60d4:	4798      	blx	r3
    60d6:	200d      	movs	r0, #13
    60d8:	4b0c      	ldr	r3, [pc, #48]	; (610c <Socket_ReadSocketData+0x1c8>)
    60da:	4798      	blx	r3
				break;
    60dc:	46c0      	nop			; (mov r8, r8)
			}
		}while(u16ReadCount != 0);
	}
}
    60de:	e005      	b.n	60ec <Socket_ReadSocketData+0x1a8>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    60e0:	2330      	movs	r3, #48	; 0x30
    60e2:	18fb      	adds	r3, r7, r3
    60e4:	881b      	ldrh	r3, [r3, #0]
    60e6:	2b00      	cmp	r3, #0
    60e8:	d000      	beq.n	60ec <Socket_ReadSocketData+0x1a8>
    60ea:	e76a      	b.n	5fc2 <Socket_ReadSocketData+0x7e>
	}
}
    60ec:	46c0      	nop			; (mov r8, r8)
    60ee:	46bd      	mov	sp, r7
    60f0:	b009      	add	sp, #36	; 0x24
    60f2:	bd90      	pop	{r4, r7, pc}
    60f4:	20004660 	.word	0x20004660
    60f8:	00002ff9 	.word	0x00002ff9
    60fc:	20004710 	.word	0x20004710
    6100:	00011e6c 	.word	0x00011e6c
    6104:	0000fd31 	.word	0x0000fd31
    6108:	00011e78 	.word	0x00011e78
    610c:	0000fd65 	.word	0x0000fd65

00006110 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    6110:	b590      	push	{r4, r7, lr}
    6112:	b0bb      	sub	sp, #236	; 0xec
    6114:	af02      	add	r7, sp, #8
    6116:	603a      	str	r2, [r7, #0]
    6118:	1dfb      	adds	r3, r7, #7
    611a:	1c02      	adds	r2, r0, #0
    611c:	701a      	strb	r2, [r3, #0]
    611e:	1d3b      	adds	r3, r7, #4
    6120:	1c0a      	adds	r2, r1, #0
    6122:	801a      	strh	r2, [r3, #0]
	if(u8OpCode == SOCKET_CMD_BIND)
    6124:	1dfb      	adds	r3, r7, #7
    6126:	781b      	ldrb	r3, [r3, #0]
    6128:	2b41      	cmp	r3, #65	; 0x41
    612a:	d120      	bne.n	616e <m2m_ip_cb+0x5e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    612c:	23cc      	movs	r3, #204	; 0xcc
    612e:	18f9      	adds	r1, r7, r3
    6130:	6838      	ldr	r0, [r7, #0]
    6132:	2300      	movs	r3, #0
    6134:	2204      	movs	r2, #4
    6136:	4c8d      	ldr	r4, [pc, #564]	; (636c <m2m_ip_cb+0x25c>)
    6138:	47a0      	blx	r4
    613a:	1e03      	subs	r3, r0, #0
    613c:	d000      	beq.n	6140 <m2m_ip_cb+0x30>
    613e:	e264      	b.n	660a <m2m_ip_cb+0x4fa>
		{
			strBind.status = strBindReply.s8Status;
    6140:	23cc      	movs	r3, #204	; 0xcc
    6142:	18fb      	adds	r3, r7, r3
    6144:	2201      	movs	r2, #1
    6146:	569a      	ldrsb	r2, [r3, r2]
    6148:	23c8      	movs	r3, #200	; 0xc8
    614a:	18fb      	adds	r3, r7, r3
    614c:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    614e:	4b88      	ldr	r3, [pc, #544]	; (6370 <m2m_ip_cb+0x260>)
    6150:	681b      	ldr	r3, [r3, #0]
    6152:	2b00      	cmp	r3, #0
    6154:	d100      	bne.n	6158 <m2m_ip_cb+0x48>
    6156:	e258      	b.n	660a <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    6158:	4b85      	ldr	r3, [pc, #532]	; (6370 <m2m_ip_cb+0x260>)
    615a:	681b      	ldr	r3, [r3, #0]
    615c:	22cc      	movs	r2, #204	; 0xcc
    615e:	18ba      	adds	r2, r7, r2
    6160:	2000      	movs	r0, #0
    6162:	5610      	ldrsb	r0, [r2, r0]
    6164:	22c8      	movs	r2, #200	; 0xc8
    6166:	18ba      	adds	r2, r7, r2
    6168:	2101      	movs	r1, #1
    616a:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    616c:	e24d      	b.n	660a <m2m_ip_cb+0x4fa>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    616e:	1dfb      	adds	r3, r7, #7
    6170:	781b      	ldrb	r3, [r3, #0]
    6172:	2b42      	cmp	r3, #66	; 0x42
    6174:	d120      	bne.n	61b8 <m2m_ip_cb+0xa8>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    6176:	23c4      	movs	r3, #196	; 0xc4
    6178:	18f9      	adds	r1, r7, r3
    617a:	6838      	ldr	r0, [r7, #0]
    617c:	2300      	movs	r3, #0
    617e:	2204      	movs	r2, #4
    6180:	4c7a      	ldr	r4, [pc, #488]	; (636c <m2m_ip_cb+0x25c>)
    6182:	47a0      	blx	r4
    6184:	1e03      	subs	r3, r0, #0
    6186:	d000      	beq.n	618a <m2m_ip_cb+0x7a>
    6188:	e23f      	b.n	660a <m2m_ip_cb+0x4fa>
		{
			strListen.status = strListenReply.s8Status;
    618a:	23c4      	movs	r3, #196	; 0xc4
    618c:	18fb      	adds	r3, r7, r3
    618e:	2201      	movs	r2, #1
    6190:	569a      	ldrsb	r2, [r3, r2]
    6192:	23c0      	movs	r3, #192	; 0xc0
    6194:	18fb      	adds	r3, r7, r3
    6196:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    6198:	4b75      	ldr	r3, [pc, #468]	; (6370 <m2m_ip_cb+0x260>)
    619a:	681b      	ldr	r3, [r3, #0]
    619c:	2b00      	cmp	r3, #0
    619e:	d100      	bne.n	61a2 <m2m_ip_cb+0x92>
    61a0:	e233      	b.n	660a <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    61a2:	4b73      	ldr	r3, [pc, #460]	; (6370 <m2m_ip_cb+0x260>)
    61a4:	681b      	ldr	r3, [r3, #0]
    61a6:	22c4      	movs	r2, #196	; 0xc4
    61a8:	18ba      	adds	r2, r7, r2
    61aa:	2000      	movs	r0, #0
    61ac:	5610      	ldrsb	r0, [r2, r0]
    61ae:	22c0      	movs	r2, #192	; 0xc0
    61b0:	18ba      	adds	r2, r7, r2
    61b2:	2102      	movs	r1, #2
    61b4:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    61b6:	e228      	b.n	660a <m2m_ip_cb+0x4fa>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    61b8:	1dfb      	adds	r3, r7, #7
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	2b43      	cmp	r3, #67	; 0x43
    61be:	d16b      	bne.n	6298 <m2m_ip_cb+0x188>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    61c0:	23b4      	movs	r3, #180	; 0xb4
    61c2:	18f9      	adds	r1, r7, r3
    61c4:	6838      	ldr	r0, [r7, #0]
    61c6:	2300      	movs	r3, #0
    61c8:	220c      	movs	r2, #12
    61ca:	4c68      	ldr	r4, [pc, #416]	; (636c <m2m_ip_cb+0x25c>)
    61cc:	47a0      	blx	r4
    61ce:	1e03      	subs	r3, r0, #0
    61d0:	d000      	beq.n	61d4 <m2m_ip_cb+0xc4>
    61d2:	e21a      	b.n	660a <m2m_ip_cb+0x4fa>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    61d4:	23b4      	movs	r3, #180	; 0xb4
    61d6:	18fb      	adds	r3, r7, r3
    61d8:	7a5b      	ldrb	r3, [r3, #9]
    61da:	b25b      	sxtb	r3, r3
    61dc:	2b00      	cmp	r3, #0
    61de:	db34      	blt.n	624a <m2m_ip_cb+0x13a>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    61e0:	23b4      	movs	r3, #180	; 0xb4
    61e2:	18fb      	adds	r3, r7, r3
    61e4:	7a5b      	ldrb	r3, [r3, #9]
    61e6:	b25b      	sxtb	r3, r3
    61e8:	4a62      	ldr	r2, [pc, #392]	; (6374 <m2m_ip_cb+0x264>)
    61ea:	011b      	lsls	r3, r3, #4
    61ec:	18d3      	adds	r3, r2, r3
    61ee:	330b      	adds	r3, #11
    61f0:	2200      	movs	r2, #0
    61f2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    61f4:	23b4      	movs	r3, #180	; 0xb4
    61f6:	18fb      	adds	r3, r7, r3
    61f8:	7a5b      	ldrb	r3, [r3, #9]
    61fa:	b25b      	sxtb	r3, r3
    61fc:	4a5d      	ldr	r2, [pc, #372]	; (6374 <m2m_ip_cb+0x264>)
    61fe:	011b      	lsls	r3, r3, #4
    6200:	18d3      	adds	r3, r2, r3
    6202:	330a      	adds	r3, #10
    6204:	2201      	movs	r2, #1
    6206:	701a      	strb	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    6208:	4b5b      	ldr	r3, [pc, #364]	; (6378 <m2m_ip_cb+0x268>)
    620a:	881b      	ldrh	r3, [r3, #0]
    620c:	b29b      	uxth	r3, r3
    620e:	3301      	adds	r3, #1
    6210:	b29a      	uxth	r2, r3
    6212:	4b59      	ldr	r3, [pc, #356]	; (6378 <m2m_ip_cb+0x268>)
    6214:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    6216:	4b58      	ldr	r3, [pc, #352]	; (6378 <m2m_ip_cb+0x268>)
    6218:	881b      	ldrh	r3, [r3, #0]
    621a:	b29b      	uxth	r3, r3
    621c:	2b00      	cmp	r3, #0
    621e:	d106      	bne.n	622e <m2m_ip_cb+0x11e>
					++gu16SessionID;
    6220:	4b55      	ldr	r3, [pc, #340]	; (6378 <m2m_ip_cb+0x268>)
    6222:	881b      	ldrh	r3, [r3, #0]
    6224:	b29b      	uxth	r3, r3
    6226:	3301      	adds	r3, #1
    6228:	b29a      	uxth	r2, r3
    622a:	4b53      	ldr	r3, [pc, #332]	; (6378 <m2m_ip_cb+0x268>)
    622c:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    622e:	23b4      	movs	r3, #180	; 0xb4
    6230:	18fb      	adds	r3, r7, r3
    6232:	7a5b      	ldrb	r3, [r3, #9]
    6234:	b25b      	sxtb	r3, r3
    6236:	0018      	movs	r0, r3
    6238:	4b4f      	ldr	r3, [pc, #316]	; (6378 <m2m_ip_cb+0x268>)
    623a:	881b      	ldrh	r3, [r3, #0]
    623c:	b299      	uxth	r1, r3
    623e:	4a4d      	ldr	r2, [pc, #308]	; (6374 <m2m_ip_cb+0x264>)
    6240:	0103      	lsls	r3, r0, #4
    6242:	18d3      	adds	r3, r2, r3
    6244:	3306      	adds	r3, #6
    6246:	1c0a      	adds	r2, r1, #0
    6248:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    624a:	23b4      	movs	r3, #180	; 0xb4
    624c:	18fb      	adds	r3, r7, r3
    624e:	2209      	movs	r2, #9
    6250:	569a      	ldrsb	r2, [r3, r2]
    6252:	23a0      	movs	r3, #160	; 0xa0
    6254:	18fb      	adds	r3, r7, r3
    6256:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    6258:	23a0      	movs	r3, #160	; 0xa0
    625a:	18fb      	adds	r3, r7, r3
    625c:	2202      	movs	r2, #2
    625e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    6260:	23b4      	movs	r3, #180	; 0xb4
    6262:	18fb      	adds	r3, r7, r3
    6264:	885a      	ldrh	r2, [r3, #2]
    6266:	23a0      	movs	r3, #160	; 0xa0
    6268:	18fb      	adds	r3, r7, r3
    626a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    626c:	23b4      	movs	r3, #180	; 0xb4
    626e:	18fb      	adds	r3, r7, r3
    6270:	685a      	ldr	r2, [r3, #4]
    6272:	23a0      	movs	r3, #160	; 0xa0
    6274:	18fb      	adds	r3, r7, r3
    6276:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    6278:	4b3d      	ldr	r3, [pc, #244]	; (6370 <m2m_ip_cb+0x260>)
    627a:	681b      	ldr	r3, [r3, #0]
    627c:	2b00      	cmp	r3, #0
    627e:	d100      	bne.n	6282 <m2m_ip_cb+0x172>
    6280:	e1c3      	b.n	660a <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    6282:	4b3b      	ldr	r3, [pc, #236]	; (6370 <m2m_ip_cb+0x260>)
    6284:	681b      	ldr	r3, [r3, #0]
    6286:	22b4      	movs	r2, #180	; 0xb4
    6288:	18ba      	adds	r2, r7, r2
    628a:	2008      	movs	r0, #8
    628c:	5610      	ldrsb	r0, [r2, r0]
    628e:	22a0      	movs	r2, #160	; 0xa0
    6290:	18ba      	adds	r2, r7, r2
    6292:	2104      	movs	r1, #4
    6294:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6296:	e1b8      	b.n	660a <m2m_ip_cb+0x4fa>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    6298:	1dfb      	adds	r3, r7, #7
    629a:	781b      	ldrb	r3, [r3, #0]
    629c:	2b44      	cmp	r3, #68	; 0x44
    629e:	d003      	beq.n	62a8 <m2m_ip_cb+0x198>
    62a0:	1dfb      	adds	r3, r7, #7
    62a2:	781b      	ldrb	r3, [r3, #0]
    62a4:	2b4b      	cmp	r3, #75	; 0x4b
    62a6:	d13d      	bne.n	6324 <m2m_ip_cb+0x214>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    62a8:	239c      	movs	r3, #156	; 0x9c
    62aa:	18f9      	adds	r1, r7, r3
    62ac:	6838      	ldr	r0, [r7, #0]
    62ae:	2300      	movs	r3, #0
    62b0:	2204      	movs	r2, #4
    62b2:	4c2e      	ldr	r4, [pc, #184]	; (636c <m2m_ip_cb+0x25c>)
    62b4:	47a0      	blx	r4
    62b6:	1e03      	subs	r3, r0, #0
    62b8:	d000      	beq.n	62bc <m2m_ip_cb+0x1ac>
    62ba:	e1a1      	b.n	6600 <m2m_ip_cb+0x4f0>
		{
			strConnMsg.sock		= strConnectReply.sock;
    62bc:	239c      	movs	r3, #156	; 0x9c
    62be:	18fb      	adds	r3, r7, r3
    62c0:	2200      	movs	r2, #0
    62c2:	569a      	ldrsb	r2, [r3, r2]
    62c4:	2398      	movs	r3, #152	; 0x98
    62c6:	18fb      	adds	r3, r7, r3
    62c8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    62ca:	239c      	movs	r3, #156	; 0x9c
    62cc:	18fb      	adds	r3, r7, r3
    62ce:	2201      	movs	r2, #1
    62d0:	569a      	ldrsb	r2, [r3, r2]
    62d2:	2398      	movs	r3, #152	; 0x98
    62d4:	18fb      	adds	r3, r7, r3
    62d6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    62d8:	239c      	movs	r3, #156	; 0x9c
    62da:	18fb      	adds	r3, r7, r3
    62dc:	785b      	ldrb	r3, [r3, #1]
    62de:	b25b      	sxtb	r3, r3
    62e0:	2b00      	cmp	r3, #0
    62e2:	d10f      	bne.n	6304 <m2m_ip_cb+0x1f4>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    62e4:	239c      	movs	r3, #156	; 0x9c
    62e6:	18fb      	adds	r3, r7, r3
    62e8:	781b      	ldrb	r3, [r3, #0]
    62ea:	b25b      	sxtb	r3, r3
    62ec:	0018      	movs	r0, r3
    62ee:	239c      	movs	r3, #156	; 0x9c
    62f0:	18fb      	adds	r3, r7, r3
    62f2:	885b      	ldrh	r3, [r3, #2]
    62f4:	3b08      	subs	r3, #8
    62f6:	b299      	uxth	r1, r3
    62f8:	4a1e      	ldr	r2, [pc, #120]	; (6374 <m2m_ip_cb+0x264>)
    62fa:	0103      	lsls	r3, r0, #4
    62fc:	18d3      	adds	r3, r2, r3
    62fe:	3308      	adds	r3, #8
    6300:	1c0a      	adds	r2, r1, #0
    6302:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
    6304:	4b1a      	ldr	r3, [pc, #104]	; (6370 <m2m_ip_cb+0x260>)
    6306:	681b      	ldr	r3, [r3, #0]
    6308:	2b00      	cmp	r3, #0
    630a:	d100      	bne.n	630e <m2m_ip_cb+0x1fe>
    630c:	e178      	b.n	6600 <m2m_ip_cb+0x4f0>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    630e:	4b18      	ldr	r3, [pc, #96]	; (6370 <m2m_ip_cb+0x260>)
    6310:	681b      	ldr	r3, [r3, #0]
    6312:	229c      	movs	r2, #156	; 0x9c
    6314:	18ba      	adds	r2, r7, r2
    6316:	2000      	movs	r0, #0
    6318:	5610      	ldrsb	r0, [r2, r0]
    631a:	2298      	movs	r2, #152	; 0x98
    631c:	18ba      	adds	r2, r7, r2
    631e:	2105      	movs	r1, #5
    6320:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    6322:	e16d      	b.n	6600 <m2m_ip_cb+0x4f0>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    6324:	1dfb      	adds	r3, r7, #7
    6326:	781b      	ldrb	r3, [r3, #0]
    6328:	2b4a      	cmp	r3, #74	; 0x4a
    632a:	d129      	bne.n	6380 <m2m_ip_cb+0x270>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    632c:	230c      	movs	r3, #12
    632e:	18f9      	adds	r1, r7, r3
    6330:	6838      	ldr	r0, [r7, #0]
    6332:	2300      	movs	r3, #0
    6334:	2244      	movs	r2, #68	; 0x44
    6336:	4c0d      	ldr	r4, [pc, #52]	; (636c <m2m_ip_cb+0x25c>)
    6338:	47a0      	blx	r4
    633a:	1e03      	subs	r3, r0, #0
    633c:	d000      	beq.n	6340 <m2m_ip_cb+0x230>
    633e:	e164      	b.n	660a <m2m_ip_cb+0x4fa>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    6340:	230c      	movs	r3, #12
    6342:	18fb      	adds	r3, r7, r3
    6344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6346:	230c      	movs	r3, #12
    6348:	18fb      	adds	r3, r7, r3
    634a:	641a      	str	r2, [r3, #64]	; 0x40
			if(gpfAppResolveCb)
    634c:	4b0b      	ldr	r3, [pc, #44]	; (637c <m2m_ip_cb+0x26c>)
    634e:	681b      	ldr	r3, [r3, #0]
    6350:	2b00      	cmp	r3, #0
    6352:	d100      	bne.n	6356 <m2m_ip_cb+0x246>
    6354:	e159      	b.n	660a <m2m_ip_cb+0x4fa>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    6356:	4b09      	ldr	r3, [pc, #36]	; (637c <m2m_ip_cb+0x26c>)
    6358:	681a      	ldr	r2, [r3, #0]
    635a:	230c      	movs	r3, #12
    635c:	18fb      	adds	r3, r7, r3
    635e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    6360:	230c      	movs	r3, #12
    6362:	18fb      	adds	r3, r7, r3
    6364:	0018      	movs	r0, r3
    6366:	4790      	blx	r2
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6368:	e14f      	b.n	660a <m2m_ip_cb+0x4fa>
    636a:	46c0      	nop			; (mov r8, r8)
    636c:	00002ff9 	.word	0x00002ff9
    6370:	20004710 	.word	0x20004710
    6374:	20004660 	.word	0x20004660
    6378:	200000ea 	.word	0x200000ea
    637c:	20004718 	.word	0x20004718
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    6380:	1dfb      	adds	r3, r7, #7
    6382:	781b      	ldrb	r3, [r3, #0]
    6384:	2b46      	cmp	r3, #70	; 0x46
    6386:	d008      	beq.n	639a <m2m_ip_cb+0x28a>
    6388:	1dfb      	adds	r3, r7, #7
    638a:	781b      	ldrb	r3, [r3, #0]
    638c:	2b48      	cmp	r3, #72	; 0x48
    638e:	d004      	beq.n	639a <m2m_ip_cb+0x28a>
    6390:	1dfb      	adds	r3, r7, #7
    6392:	781b      	ldrb	r3, [r3, #0]
    6394:	2b4d      	cmp	r3, #77	; 0x4d
    6396:	d000      	beq.n	639a <m2m_ip_cb+0x28a>
    6398:	e0b4      	b.n	6504 <m2m_ip_cb+0x3f4>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    639a:	23df      	movs	r3, #223	; 0xdf
    639c:	18fb      	adds	r3, r7, r3
    639e:	2206      	movs	r2, #6
    63a0:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    63a2:	1dfb      	adds	r3, r7, #7
    63a4:	781b      	ldrb	r3, [r3, #0]
    63a6:	2b48      	cmp	r3, #72	; 0x48
    63a8:	d103      	bne.n	63b2 <m2m_ip_cb+0x2a2>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    63aa:	23df      	movs	r3, #223	; 0xdf
    63ac:	18fb      	adds	r3, r7, r3
    63ae:	2209      	movs	r2, #9
    63b0:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    63b2:	23d8      	movs	r3, #216	; 0xd8
    63b4:	18fb      	adds	r3, r7, r3
    63b6:	2210      	movs	r2, #16
    63b8:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    63ba:	23d8      	movs	r3, #216	; 0xd8
    63bc:	18fb      	adds	r3, r7, r3
    63be:	881a      	ldrh	r2, [r3, #0]
    63c0:	2388      	movs	r3, #136	; 0x88
    63c2:	18f9      	adds	r1, r7, r3
    63c4:	6838      	ldr	r0, [r7, #0]
    63c6:	2300      	movs	r3, #0
    63c8:	4c92      	ldr	r4, [pc, #584]	; (6614 <m2m_ip_cb+0x504>)
    63ca:	47a0      	blx	r4
    63cc:	1e03      	subs	r3, r0, #0
    63ce:	d000      	beq.n	63d2 <m2m_ip_cb+0x2c2>
    63d0:	e118      	b.n	6604 <m2m_ip_cb+0x4f4>
		{
			uint16 u16SessionID = 0;
    63d2:	23d6      	movs	r3, #214	; 0xd6
    63d4:	18fb      	adds	r3, r7, r3
    63d6:	2200      	movs	r2, #0
    63d8:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    63da:	23d5      	movs	r3, #213	; 0xd5
    63dc:	18fb      	adds	r3, r7, r3
    63de:	2288      	movs	r2, #136	; 0x88
    63e0:	18ba      	adds	r2, r7, r2
    63e2:	7b12      	ldrb	r2, [r2, #12]
    63e4:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    63e6:	23d6      	movs	r3, #214	; 0xd6
    63e8:	18fb      	adds	r3, r7, r3
    63ea:	2288      	movs	r2, #136	; 0x88
    63ec:	18ba      	adds	r2, r7, r2
    63ee:	89d2      	ldrh	r2, [r2, #14]
    63f0:	801a      	strh	r2, [r3, #0]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    63f2:	23d5      	movs	r3, #213	; 0xd5
    63f4:	18fb      	adds	r3, r7, r3
    63f6:	781b      	ldrb	r3, [r3, #0]
    63f8:	b25b      	sxtb	r3, r3
    63fa:	4a87      	ldr	r2, [pc, #540]	; (6618 <m2m_ip_cb+0x508>)
    63fc:	011b      	lsls	r3, r3, #4
    63fe:	18d3      	adds	r3, r2, r3
    6400:	330c      	adds	r3, #12
    6402:	2200      	movs	r2, #0
    6404:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    6406:	23d2      	movs	r3, #210	; 0xd2
    6408:	18fb      	adds	r3, r7, r3
    640a:	2288      	movs	r2, #136	; 0x88
    640c:	18ba      	adds	r2, r7, r2
    640e:	8912      	ldrh	r2, [r2, #8]
    6410:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    6412:	23d0      	movs	r3, #208	; 0xd0
    6414:	18fb      	adds	r3, r7, r3
    6416:	2288      	movs	r2, #136	; 0x88
    6418:	18ba      	adds	r2, r7, r2
    641a:	8952      	ldrh	r2, [r2, #10]
    641c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    641e:	2388      	movs	r3, #136	; 0x88
    6420:	18fb      	adds	r3, r7, r3
    6422:	885a      	ldrh	r2, [r3, #2]
    6424:	2370      	movs	r3, #112	; 0x70
    6426:	18fb      	adds	r3, r7, r3
    6428:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    642a:	2388      	movs	r3, #136	; 0x88
    642c:	18fb      	adds	r3, r7, r3
    642e:	685a      	ldr	r2, [r3, #4]
    6430:	2370      	movs	r3, #112	; 0x70
    6432:	18fb      	adds	r3, r7, r3
    6434:	60da      	str	r2, [r3, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    6436:	23d5      	movs	r3, #213	; 0xd5
    6438:	18fb      	adds	r3, r7, r3
    643a:	781b      	ldrb	r3, [r3, #0]
    643c:	b25b      	sxtb	r3, r3
    643e:	4a76      	ldr	r2, [pc, #472]	; (6618 <m2m_ip_cb+0x508>)
    6440:	011b      	lsls	r3, r3, #4
    6442:	18d3      	adds	r3, r2, r3
    6444:	3306      	adds	r3, #6
    6446:	881b      	ldrh	r3, [r3, #0]
    6448:	b29b      	uxth	r3, r3
    644a:	22d6      	movs	r2, #214	; 0xd6
    644c:	18ba      	adds	r2, r7, r2
    644e:	8812      	ldrh	r2, [r2, #0]
    6450:	429a      	cmp	r2, r3
    6452:	d148      	bne.n	64e6 <m2m_ip_cb+0x3d6>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    6454:	23d2      	movs	r3, #210	; 0xd2
    6456:	18fb      	adds	r3, r7, r3
    6458:	2200      	movs	r2, #0
    645a:	5e9b      	ldrsh	r3, [r3, r2]
    645c:	2b00      	cmp	r3, #0
    645e:	dd25      	ble.n	64ac <m2m_ip_cb+0x39c>
    6460:	23d2      	movs	r3, #210	; 0xd2
    6462:	18fb      	adds	r3, r7, r3
    6464:	2200      	movs	r2, #0
    6466:	5e9a      	ldrsh	r2, [r3, r2]
    6468:	1d3b      	adds	r3, r7, #4
    646a:	881b      	ldrh	r3, [r3, #0]
    646c:	429a      	cmp	r2, r3
    646e:	da1d      	bge.n	64ac <m2m_ip_cb+0x39c>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    6470:	23d0      	movs	r3, #208	; 0xd0
    6472:	18fb      	adds	r3, r7, r3
    6474:	881b      	ldrh	r3, [r3, #0]
    6476:	683a      	ldr	r2, [r7, #0]
    6478:	18d3      	adds	r3, r2, r3
    647a:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
    647c:	23d8      	movs	r3, #216	; 0xd8
    647e:	18fb      	adds	r3, r7, r3
    6480:	22d2      	movs	r2, #210	; 0xd2
    6482:	18ba      	adds	r2, r7, r2
    6484:	8812      	ldrh	r2, [r2, #0]
    6486:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    6488:	683c      	ldr	r4, [r7, #0]
    648a:	23df      	movs	r3, #223	; 0xdf
    648c:	18fb      	adds	r3, r7, r3
    648e:	781a      	ldrb	r2, [r3, #0]
    6490:	2370      	movs	r3, #112	; 0x70
    6492:	18f9      	adds	r1, r7, r3
    6494:	23d5      	movs	r3, #213	; 0xd5
    6496:	18fb      	adds	r3, r7, r3
    6498:	2000      	movs	r0, #0
    649a:	5618      	ldrsb	r0, [r3, r0]
    649c:	23d8      	movs	r3, #216	; 0xd8
    649e:	18fb      	adds	r3, r7, r3
    64a0:	881b      	ldrh	r3, [r3, #0]
    64a2:	9300      	str	r3, [sp, #0]
    64a4:	0023      	movs	r3, r4
    64a6:	4c5d      	ldr	r4, [pc, #372]	; (661c <m2m_ip_cb+0x50c>)
    64a8:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    64aa:	e0ab      	b.n	6604 <m2m_ip_cb+0x4f4>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    64ac:	2370      	movs	r3, #112	; 0x70
    64ae:	18fb      	adds	r3, r7, r3
    64b0:	22d2      	movs	r2, #210	; 0xd2
    64b2:	18ba      	adds	r2, r7, r2
    64b4:	8812      	ldrh	r2, [r2, #0]
    64b6:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    64b8:	2370      	movs	r3, #112	; 0x70
    64ba:	18fb      	adds	r3, r7, r3
    64bc:	2200      	movs	r2, #0
    64be:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    64c0:	4b57      	ldr	r3, [pc, #348]	; (6620 <m2m_ip_cb+0x510>)
    64c2:	681b      	ldr	r3, [r3, #0]
    64c4:	2b00      	cmp	r3, #0
    64c6:	d100      	bne.n	64ca <m2m_ip_cb+0x3ba>
    64c8:	e09c      	b.n	6604 <m2m_ip_cb+0x4f4>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    64ca:	4b55      	ldr	r3, [pc, #340]	; (6620 <m2m_ip_cb+0x510>)
    64cc:	681b      	ldr	r3, [r3, #0]
    64ce:	2270      	movs	r2, #112	; 0x70
    64d0:	18bc      	adds	r4, r7, r2
    64d2:	22df      	movs	r2, #223	; 0xdf
    64d4:	18ba      	adds	r2, r7, r2
    64d6:	7811      	ldrb	r1, [r2, #0]
    64d8:	22d5      	movs	r2, #213	; 0xd5
    64da:	18ba      	adds	r2, r7, r2
    64dc:	2000      	movs	r0, #0
    64de:	5610      	ldrsb	r0, [r2, r0]
    64e0:	0022      	movs	r2, r4
    64e2:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    64e4:	e08e      	b.n	6604 <m2m_ip_cb+0x4f4>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    64e6:	23d8      	movs	r3, #216	; 0xd8
    64e8:	18fa      	adds	r2, r7, r3
    64ea:	1d3b      	adds	r3, r7, #4
    64ec:	8812      	ldrh	r2, [r2, #0]
    64ee:	881b      	ldrh	r3, [r3, #0]
    64f0:	429a      	cmp	r2, r3
    64f2:	d300      	bcc.n	64f6 <m2m_ip_cb+0x3e6>
    64f4:	e086      	b.n	6604 <m2m_ip_cb+0x4f4>
					hif_receive(0, NULL, 0, 1);
    64f6:	2301      	movs	r3, #1
    64f8:	2200      	movs	r2, #0
    64fa:	2100      	movs	r1, #0
    64fc:	2000      	movs	r0, #0
    64fe:	4c45      	ldr	r4, [pc, #276]	; (6614 <m2m_ip_cb+0x504>)
    6500:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    6502:	e07f      	b.n	6604 <m2m_ip_cb+0x4f4>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    6504:	1dfb      	adds	r3, r7, #7
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	2b45      	cmp	r3, #69	; 0x45
    650a:	d007      	beq.n	651c <m2m_ip_cb+0x40c>
    650c:	1dfb      	adds	r3, r7, #7
    650e:	781b      	ldrb	r3, [r3, #0]
    6510:	2b47      	cmp	r3, #71	; 0x47
    6512:	d003      	beq.n	651c <m2m_ip_cb+0x40c>
    6514:	1dfb      	adds	r3, r7, #7
    6516:	781b      	ldrb	r3, [r3, #0]
    6518:	2b4c      	cmp	r3, #76	; 0x4c
    651a:	d14c      	bne.n	65b6 <m2m_ip_cb+0x4a6>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    651c:	23de      	movs	r3, #222	; 0xde
    651e:	18fb      	adds	r3, r7, r3
    6520:	2207      	movs	r2, #7
    6522:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    6524:	1dfb      	adds	r3, r7, #7
    6526:	781b      	ldrb	r3, [r3, #0]
    6528:	2b47      	cmp	r3, #71	; 0x47
    652a:	d103      	bne.n	6534 <m2m_ip_cb+0x424>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    652c:	23de      	movs	r3, #222	; 0xde
    652e:	18fb      	adds	r3, r7, r3
    6530:	2208      	movs	r2, #8
    6532:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    6534:	2364      	movs	r3, #100	; 0x64
    6536:	18f9      	adds	r1, r7, r3
    6538:	6838      	ldr	r0, [r7, #0]
    653a:	2300      	movs	r3, #0
    653c:	2208      	movs	r2, #8
    653e:	4c35      	ldr	r4, [pc, #212]	; (6614 <m2m_ip_cb+0x504>)
    6540:	47a0      	blx	r4
    6542:	1e03      	subs	r3, r0, #0
    6544:	d160      	bne.n	6608 <m2m_ip_cb+0x4f8>
		{
			uint16 u16SessionID = 0;
    6546:	23dc      	movs	r3, #220	; 0xdc
    6548:	18fb      	adds	r3, r7, r3
    654a:	2200      	movs	r2, #0
    654c:	801a      	strh	r2, [r3, #0]
			
			sock = strReply.sock;
    654e:	23db      	movs	r3, #219	; 0xdb
    6550:	18fb      	adds	r3, r7, r3
    6552:	2264      	movs	r2, #100	; 0x64
    6554:	18ba      	adds	r2, r7, r2
    6556:	7812      	ldrb	r2, [r2, #0]
    6558:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    655a:	23dc      	movs	r3, #220	; 0xdc
    655c:	18fb      	adds	r3, r7, r3
    655e:	2264      	movs	r2, #100	; 0x64
    6560:	18ba      	adds	r2, r7, r2
    6562:	8892      	ldrh	r2, [r2, #4]
    6564:	801a      	strh	r2, [r3, #0]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    6566:	2364      	movs	r3, #100	; 0x64
    6568:	18fb      	adds	r3, r7, r3
    656a:	2202      	movs	r2, #2
    656c:	5e9a      	ldrsh	r2, [r3, r2]
    656e:	236e      	movs	r3, #110	; 0x6e
    6570:	18fb      	adds	r3, r7, r3
    6572:	801a      	strh	r2, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    6574:	23db      	movs	r3, #219	; 0xdb
    6576:	18fb      	adds	r3, r7, r3
    6578:	781b      	ldrb	r3, [r3, #0]
    657a:	b25b      	sxtb	r3, r3
    657c:	4a26      	ldr	r2, [pc, #152]	; (6618 <m2m_ip_cb+0x508>)
    657e:	011b      	lsls	r3, r3, #4
    6580:	18d3      	adds	r3, r2, r3
    6582:	3306      	adds	r3, #6
    6584:	881b      	ldrh	r3, [r3, #0]
    6586:	b29b      	uxth	r3, r3
    6588:	22dc      	movs	r2, #220	; 0xdc
    658a:	18ba      	adds	r2, r7, r2
    658c:	8812      	ldrh	r2, [r2, #0]
    658e:	429a      	cmp	r2, r3
    6590:	d13a      	bne.n	6608 <m2m_ip_cb+0x4f8>
			{
				if(gpfAppSocketCb)
    6592:	4b23      	ldr	r3, [pc, #140]	; (6620 <m2m_ip_cb+0x510>)
    6594:	681b      	ldr	r3, [r3, #0]
    6596:	2b00      	cmp	r3, #0
    6598:	d036      	beq.n	6608 <m2m_ip_cb+0x4f8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    659a:	4b21      	ldr	r3, [pc, #132]	; (6620 <m2m_ip_cb+0x510>)
    659c:	681b      	ldr	r3, [r3, #0]
    659e:	226e      	movs	r2, #110	; 0x6e
    65a0:	18bc      	adds	r4, r7, r2
    65a2:	22de      	movs	r2, #222	; 0xde
    65a4:	18ba      	adds	r2, r7, r2
    65a6:	7811      	ldrb	r1, [r2, #0]
    65a8:	22db      	movs	r2, #219	; 0xdb
    65aa:	18ba      	adds	r2, r7, r2
    65ac:	2000      	movs	r0, #0
    65ae:	5610      	ldrsb	r0, [r2, r0]
    65b0:	0022      	movs	r2, r4
    65b2:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    65b4:	e028      	b.n	6608 <m2m_ip_cb+0x4f8>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    65b6:	1dfb      	adds	r3, r7, #7
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	2b52      	cmp	r3, #82	; 0x52
    65bc:	d125      	bne.n	660a <m2m_ip_cb+0x4fa>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    65be:	2350      	movs	r3, #80	; 0x50
    65c0:	18f9      	adds	r1, r7, r3
    65c2:	6838      	ldr	r0, [r7, #0]
    65c4:	2301      	movs	r3, #1
    65c6:	2214      	movs	r2, #20
    65c8:	4c12      	ldr	r4, [pc, #72]	; (6614 <m2m_ip_cb+0x504>)
    65ca:	47a0      	blx	r4
    65cc:	1e03      	subs	r3, r0, #0
    65ce:	d11c      	bne.n	660a <m2m_ip_cb+0x4fa>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    65d0:	2350      	movs	r3, #80	; 0x50
    65d2:	18fb      	adds	r3, r7, r3
    65d4:	685b      	ldr	r3, [r3, #4]
    65d6:	001a      	movs	r2, r3
    65d8:	4b12      	ldr	r3, [pc, #72]	; (6624 <m2m_ip_cb+0x514>)
    65da:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    65dc:	4b11      	ldr	r3, [pc, #68]	; (6624 <m2m_ip_cb+0x514>)
    65de:	681b      	ldr	r3, [r3, #0]
    65e0:	2b00      	cmp	r3, #0
    65e2:	d012      	beq.n	660a <m2m_ip_cb+0x4fa>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    65e4:	4b0f      	ldr	r3, [pc, #60]	; (6624 <m2m_ip_cb+0x514>)
    65e6:	681c      	ldr	r4, [r3, #0]
    65e8:	2350      	movs	r3, #80	; 0x50
    65ea:	18fb      	adds	r3, r7, r3
    65ec:	6818      	ldr	r0, [r3, #0]
    65ee:	2350      	movs	r3, #80	; 0x50
    65f0:	18fb      	adds	r3, r7, r3
    65f2:	6899      	ldr	r1, [r3, #8]
    65f4:	2350      	movs	r3, #80	; 0x50
    65f6:	18fb      	adds	r3, r7, r3
    65f8:	7c1b      	ldrb	r3, [r3, #16]
    65fa:	001a      	movs	r2, r3
    65fc:	47a0      	blx	r4
			}
		}
	}
}
    65fe:	e004      	b.n	660a <m2m_ip_cb+0x4fa>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    6600:	46c0      	nop			; (mov r8, r8)
    6602:	e002      	b.n	660a <m2m_ip_cb+0x4fa>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    6604:	46c0      	nop			; (mov r8, r8)
    6606:	e000      	b.n	660a <m2m_ip_cb+0x4fa>
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    6608:	46c0      	nop			; (mov r8, r8)
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    660a:	46c0      	nop			; (mov r8, r8)
    660c:	46bd      	mov	sp, r7
    660e:	b039      	add	sp, #228	; 0xe4
    6610:	bd90      	pop	{r4, r7, pc}
    6612:	46c0      	nop			; (mov r8, r8)
    6614:	00002ff9 	.word	0x00002ff9
    6618:	20004660 	.word	0x20004660
    661c:	00005f45 	.word	0x00005f45
    6620:	20004710 	.word	0x20004710
    6624:	20004714 	.word	0x20004714

00006628 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    6628:	b580      	push	{r7, lr}
    662a:	af00      	add	r7, sp, #0
	if(gbSocketInit==0)
    662c:	4b0c      	ldr	r3, [pc, #48]	; (6660 <socketInit+0x38>)
    662e:	781b      	ldrb	r3, [r3, #0]
    6630:	b2db      	uxtb	r3, r3
    6632:	2b00      	cmp	r3, #0
    6634:	d110      	bne.n	6658 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    6636:	4b0b      	ldr	r3, [pc, #44]	; (6664 <socketInit+0x3c>)
    6638:	22b0      	movs	r2, #176	; 0xb0
    663a:	2100      	movs	r1, #0
    663c:	0018      	movs	r0, r3
    663e:	4b0a      	ldr	r3, [pc, #40]	; (6668 <socketInit+0x40>)
    6640:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    6642:	4b0a      	ldr	r3, [pc, #40]	; (666c <socketInit+0x44>)
    6644:	0019      	movs	r1, r3
    6646:	2002      	movs	r0, #2
    6648:	4b09      	ldr	r3, [pc, #36]	; (6670 <socketInit+0x48>)
    664a:	4798      	blx	r3
		gbSocketInit=1;
    664c:	4b04      	ldr	r3, [pc, #16]	; (6660 <socketInit+0x38>)
    664e:	2201      	movs	r2, #1
    6650:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    6652:	4b08      	ldr	r3, [pc, #32]	; (6674 <socketInit+0x4c>)
    6654:	2200      	movs	r2, #0
    6656:	801a      	strh	r2, [r3, #0]
	}
}
    6658:	46c0      	nop			; (mov r8, r8)
    665a:	46bd      	mov	sp, r7
    665c:	bd80      	pop	{r7, pc}
    665e:	46c0      	nop			; (mov r8, r8)
    6660:	200000ec 	.word	0x200000ec
    6664:	20004660 	.word	0x20004660
    6668:	0000243d 	.word	0x0000243d
    666c:	00006111 	.word	0x00006111
    6670:	000031f1 	.word	0x000031f1
    6674:	200000ea 	.word	0x200000ea

00006678 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    6678:	b580      	push	{r7, lr}
    667a:	b082      	sub	sp, #8
    667c:	af00      	add	r7, sp, #0
    667e:	6078      	str	r0, [r7, #4]
    6680:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    6682:	4b05      	ldr	r3, [pc, #20]	; (6698 <registerSocketCallback+0x20>)
    6684:	687a      	ldr	r2, [r7, #4]
    6686:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    6688:	4b04      	ldr	r3, [pc, #16]	; (669c <registerSocketCallback+0x24>)
    668a:	683a      	ldr	r2, [r7, #0]
    668c:	601a      	str	r2, [r3, #0]
}
    668e:	46c0      	nop			; (mov r8, r8)
    6690:	46bd      	mov	sp, r7
    6692:	b002      	add	sp, #8
    6694:	bd80      	pop	{r7, pc}
    6696:	46c0      	nop			; (mov r8, r8)
    6698:	20004710 	.word	0x20004710
    669c:	20004718 	.word	0x20004718

000066a0 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    66a0:	b590      	push	{r4, r7, lr}
    66a2:	b08b      	sub	sp, #44	; 0x2c
    66a4:	af04      	add	r7, sp, #16
    66a6:	0004      	movs	r4, r0
    66a8:	0008      	movs	r0, r1
    66aa:	0011      	movs	r1, r2
    66ac:	1dbb      	adds	r3, r7, #6
    66ae:	1c22      	adds	r2, r4, #0
    66b0:	801a      	strh	r2, [r3, #0]
    66b2:	1d7b      	adds	r3, r7, #5
    66b4:	1c02      	adds	r2, r0, #0
    66b6:	701a      	strb	r2, [r3, #0]
    66b8:	1d3b      	adds	r3, r7, #4
    66ba:	1c0a      	adds	r2, r1, #0
    66bc:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    66be:	2317      	movs	r3, #23
    66c0:	18fb      	adds	r3, r7, r3
    66c2:	22ff      	movs	r2, #255	; 0xff
    66c4:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    66c6:	2315      	movs	r3, #21
    66c8:	18fb      	adds	r3, r7, r3
    66ca:	220b      	movs	r2, #11
    66cc:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    66ce:	1dbb      	adds	r3, r7, #6
    66d0:	881b      	ldrh	r3, [r3, #0]
    66d2:	2b02      	cmp	r3, #2
    66d4:	d000      	beq.n	66d8 <socket+0x38>
    66d6:	e07e      	b.n	67d6 <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    66d8:	1d7b      	adds	r3, r7, #5
    66da:	781b      	ldrb	r3, [r3, #0]
    66dc:	2b01      	cmp	r3, #1
    66de:	d108      	bne.n	66f2 <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    66e0:	2315      	movs	r3, #21
    66e2:	18fb      	adds	r3, r7, r3
    66e4:	2207      	movs	r2, #7
    66e6:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    66e8:	2316      	movs	r3, #22
    66ea:	18fb      	adds	r3, r7, r3
    66ec:	2200      	movs	r2, #0
    66ee:	701a      	strb	r2, [r3, #0]
    66f0:	e067      	b.n	67c2 <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    66f2:	1d7b      	adds	r3, r7, #5
    66f4:	781b      	ldrb	r3, [r3, #0]
    66f6:	2b02      	cmp	r3, #2
    66f8:	d108      	bne.n	670c <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    66fa:	2315      	movs	r3, #21
    66fc:	18fb      	adds	r3, r7, r3
    66fe:	220b      	movs	r2, #11
    6700:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    6702:	2316      	movs	r3, #22
    6704:	18fb      	adds	r3, r7, r3
    6706:	2207      	movs	r2, #7
    6708:	701a      	strb	r2, [r3, #0]
    670a:	e05a      	b.n	67c2 <socket+0x122>
		}
		else
			return sock;
    670c:	2317      	movs	r3, #23
    670e:	18fb      	adds	r3, r7, r3
    6710:	781b      	ldrb	r3, [r3, #0]
    6712:	b25b      	sxtb	r3, r3
    6714:	e063      	b.n	67de <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    6716:	2316      	movs	r3, #22
    6718:	18fb      	adds	r3, r7, r3
    671a:	781b      	ldrb	r3, [r3, #0]
    671c:	011a      	lsls	r2, r3, #4
    671e:	4b32      	ldr	r3, [pc, #200]	; (67e8 <socket+0x148>)
    6720:	18d3      	adds	r3, r2, r3
    6722:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    6724:	693b      	ldr	r3, [r7, #16]
    6726:	7a9b      	ldrb	r3, [r3, #10]
    6728:	b2db      	uxtb	r3, r3
    672a:	2b00      	cmp	r3, #0
    672c:	d142      	bne.n	67b4 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    672e:	693b      	ldr	r3, [r7, #16]
    6730:	2210      	movs	r2, #16
    6732:	2100      	movs	r1, #0
    6734:	0018      	movs	r0, r3
    6736:	4b2d      	ldr	r3, [pc, #180]	; (67ec <socket+0x14c>)
    6738:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    673a:	693b      	ldr	r3, [r7, #16]
    673c:	2201      	movs	r2, #1
    673e:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    6740:	4b2b      	ldr	r3, [pc, #172]	; (67f0 <socket+0x150>)
    6742:	881b      	ldrh	r3, [r3, #0]
    6744:	b29b      	uxth	r3, r3
    6746:	3301      	adds	r3, #1
    6748:	b29a      	uxth	r2, r3
    674a:	4b29      	ldr	r3, [pc, #164]	; (67f0 <socket+0x150>)
    674c:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    674e:	4b28      	ldr	r3, [pc, #160]	; (67f0 <socket+0x150>)
    6750:	881b      	ldrh	r3, [r3, #0]
    6752:	b29b      	uxth	r3, r3
    6754:	2b00      	cmp	r3, #0
    6756:	d106      	bne.n	6766 <socket+0xc6>
					++gu16SessionID;
    6758:	4b25      	ldr	r3, [pc, #148]	; (67f0 <socket+0x150>)
    675a:	881b      	ldrh	r3, [r3, #0]
    675c:	b29b      	uxth	r3, r3
    675e:	3301      	adds	r3, #1
    6760:	b29a      	uxth	r2, r3
    6762:	4b23      	ldr	r3, [pc, #140]	; (67f0 <socket+0x150>)
    6764:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    6766:	4b22      	ldr	r3, [pc, #136]	; (67f0 <socket+0x150>)
    6768:	881b      	ldrh	r3, [r3, #0]
    676a:	b29a      	uxth	r2, r3
    676c:	693b      	ldr	r3, [r7, #16]
    676e:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    6770:	2317      	movs	r3, #23
    6772:	18fb      	adds	r3, r7, r3
    6774:	2216      	movs	r2, #22
    6776:	18ba      	adds	r2, r7, r2
    6778:	7812      	ldrb	r2, [r2, #0]
    677a:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    677c:	1d3b      	adds	r3, r7, #4
    677e:	781b      	ldrb	r3, [r3, #0]
    6780:	2201      	movs	r2, #1
    6782:	4013      	ands	r3, r2
    6784:	d026      	beq.n	67d4 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    6786:	230c      	movs	r3, #12
    6788:	18fb      	adds	r3, r7, r3
    678a:	2217      	movs	r2, #23
    678c:	18ba      	adds	r2, r7, r2
    678e:	7812      	ldrb	r2, [r2, #0]
    6790:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    6792:	693b      	ldr	r3, [r7, #16]
    6794:	2221      	movs	r2, #33	; 0x21
    6796:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    6798:	230c      	movs	r3, #12
    679a:	18fa      	adds	r2, r7, r3
    679c:	2300      	movs	r3, #0
    679e:	9302      	str	r3, [sp, #8]
    67a0:	2300      	movs	r3, #0
    67a2:	9301      	str	r3, [sp, #4]
    67a4:	2300      	movs	r3, #0
    67a6:	9300      	str	r3, [sp, #0]
    67a8:	2304      	movs	r3, #4
    67aa:	2150      	movs	r1, #80	; 0x50
    67ac:	2002      	movs	r0, #2
    67ae:	4c11      	ldr	r4, [pc, #68]	; (67f4 <socket+0x154>)
    67b0:	47a0      	blx	r4
				}
				break;
    67b2:	e00f      	b.n	67d4 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    67b4:	2316      	movs	r3, #22
    67b6:	18fb      	adds	r3, r7, r3
    67b8:	781a      	ldrb	r2, [r3, #0]
    67ba:	2316      	movs	r3, #22
    67bc:	18fb      	adds	r3, r7, r3
    67be:	3201      	adds	r2, #1
    67c0:	701a      	strb	r2, [r3, #0]
    67c2:	2316      	movs	r3, #22
    67c4:	18fa      	adds	r2, r7, r3
    67c6:	2315      	movs	r3, #21
    67c8:	18fb      	adds	r3, r7, r3
    67ca:	7812      	ldrb	r2, [r2, #0]
    67cc:	781b      	ldrb	r3, [r3, #0]
    67ce:	429a      	cmp	r2, r3
    67d0:	d3a1      	bcc.n	6716 <socket+0x76>
    67d2:	e000      	b.n	67d6 <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    67d4:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    67d6:	2317      	movs	r3, #23
    67d8:	18fb      	adds	r3, r7, r3
    67da:	781b      	ldrb	r3, [r3, #0]
    67dc:	b25b      	sxtb	r3, r3
}
    67de:	0018      	movs	r0, r3
    67e0:	46bd      	mov	sp, r7
    67e2:	b007      	add	sp, #28
    67e4:	bd90      	pop	{r4, r7, pc}
    67e6:	46c0      	nop			; (mov r8, r8)
    67e8:	20004660 	.word	0x20004660
    67ec:	0000243d 	.word	0x0000243d
    67f0:	200000ea 	.word	0x200000ea
    67f4:	00002819 	.word	0x00002819

000067f8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    67f8:	b5b0      	push	{r4, r5, r7, lr}
    67fa:	b08a      	sub	sp, #40	; 0x28
    67fc:	af04      	add	r7, sp, #16
    67fe:	6039      	str	r1, [r7, #0]
    6800:	0011      	movs	r1, r2
    6802:	1dfb      	adds	r3, r7, #7
    6804:	1c02      	adds	r2, r0, #0
    6806:	701a      	strb	r2, [r3, #0]
    6808:	1dbb      	adds	r3, r7, #6
    680a:	1c0a      	adds	r2, r1, #0
    680c:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    680e:	2317      	movs	r3, #23
    6810:	18fb      	adds	r3, r7, r3
    6812:	22fa      	movs	r2, #250	; 0xfa
    6814:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    6816:	1dfb      	adds	r3, r7, #7
    6818:	781b      	ldrb	r3, [r3, #0]
    681a:	2b7f      	cmp	r3, #127	; 0x7f
    681c:	d867      	bhi.n	68ee <connect+0xf6>
    681e:	683b      	ldr	r3, [r7, #0]
    6820:	2b00      	cmp	r3, #0
    6822:	d064      	beq.n	68ee <connect+0xf6>
    6824:	1dfb      	adds	r3, r7, #7
    6826:	781b      	ldrb	r3, [r3, #0]
    6828:	b25b      	sxtb	r3, r3
    682a:	4a35      	ldr	r2, [pc, #212]	; (6900 <connect+0x108>)
    682c:	011b      	lsls	r3, r3, #4
    682e:	18d3      	adds	r3, r2, r3
    6830:	330a      	adds	r3, #10
    6832:	781b      	ldrb	r3, [r3, #0]
    6834:	b2db      	uxtb	r3, r3
    6836:	2b01      	cmp	r3, #1
    6838:	d159      	bne.n	68ee <connect+0xf6>
    683a:	1dbb      	adds	r3, r7, #6
    683c:	781b      	ldrb	r3, [r3, #0]
    683e:	2b00      	cmp	r3, #0
    6840:	d055      	beq.n	68ee <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    6842:	2316      	movs	r3, #22
    6844:	18fb      	adds	r3, r7, r3
    6846:	2244      	movs	r2, #68	; 0x44
    6848:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    684a:	1dfb      	adds	r3, r7, #7
    684c:	781b      	ldrb	r3, [r3, #0]
    684e:	b25b      	sxtb	r3, r3
    6850:	4a2b      	ldr	r2, [pc, #172]	; (6900 <connect+0x108>)
    6852:	011b      	lsls	r3, r3, #4
    6854:	18d3      	adds	r3, r2, r3
    6856:	330b      	adds	r3, #11
    6858:	781b      	ldrb	r3, [r3, #0]
    685a:	b2db      	uxtb	r3, r3
    685c:	001a      	movs	r2, r3
    685e:	2301      	movs	r3, #1
    6860:	4013      	ands	r3, r2
    6862:	d00f      	beq.n	6884 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    6864:	2316      	movs	r3, #22
    6866:	18fb      	adds	r3, r7, r3
    6868:	224b      	movs	r2, #75	; 0x4b
    686a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    686c:	1dfb      	adds	r3, r7, #7
    686e:	781b      	ldrb	r3, [r3, #0]
    6870:	b25b      	sxtb	r3, r3
    6872:	4a23      	ldr	r2, [pc, #140]	; (6900 <connect+0x108>)
    6874:	011b      	lsls	r3, r3, #4
    6876:	18d3      	adds	r3, r2, r3
    6878:	330b      	adds	r3, #11
    687a:	781b      	ldrb	r3, [r3, #0]
    687c:	b2da      	uxtb	r2, r3
    687e:	2308      	movs	r3, #8
    6880:	18fb      	adds	r3, r7, r3
    6882:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    6884:	2308      	movs	r3, #8
    6886:	18fb      	adds	r3, r7, r3
    6888:	1dfa      	adds	r2, r7, #7
    688a:	7812      	ldrb	r2, [r2, #0]
    688c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    688e:	6839      	ldr	r1, [r7, #0]
    6890:	2308      	movs	r3, #8
    6892:	18fb      	adds	r3, r7, r3
    6894:	2208      	movs	r2, #8
    6896:	0018      	movs	r0, r3
    6898:	4b1a      	ldr	r3, [pc, #104]	; (6904 <connect+0x10c>)
    689a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    689c:	1dfb      	adds	r3, r7, #7
    689e:	781b      	ldrb	r3, [r3, #0]
    68a0:	b25b      	sxtb	r3, r3
    68a2:	4a17      	ldr	r2, [pc, #92]	; (6900 <connect+0x108>)
    68a4:	011b      	lsls	r3, r3, #4
    68a6:	18d3      	adds	r3, r2, r3
    68a8:	3306      	adds	r3, #6
    68aa:	881b      	ldrh	r3, [r3, #0]
    68ac:	b29a      	uxth	r2, r3
    68ae:	2308      	movs	r3, #8
    68b0:	18fb      	adds	r3, r7, r3
    68b2:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    68b4:	2317      	movs	r3, #23
    68b6:	18fc      	adds	r4, r7, r3
    68b8:	2308      	movs	r3, #8
    68ba:	18fa      	adds	r2, r7, r3
    68bc:	2316      	movs	r3, #22
    68be:	18fb      	adds	r3, r7, r3
    68c0:	7819      	ldrb	r1, [r3, #0]
    68c2:	2300      	movs	r3, #0
    68c4:	9302      	str	r3, [sp, #8]
    68c6:	2300      	movs	r3, #0
    68c8:	9301      	str	r3, [sp, #4]
    68ca:	2300      	movs	r3, #0
    68cc:	9300      	str	r3, [sp, #0]
    68ce:	230c      	movs	r3, #12
    68d0:	2002      	movs	r0, #2
    68d2:	4d0d      	ldr	r5, [pc, #52]	; (6908 <connect+0x110>)
    68d4:	47a8      	blx	r5
    68d6:	0003      	movs	r3, r0
    68d8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    68da:	2317      	movs	r3, #23
    68dc:	18fb      	adds	r3, r7, r3
    68de:	781b      	ldrb	r3, [r3, #0]
    68e0:	b25b      	sxtb	r3, r3
    68e2:	2b00      	cmp	r3, #0
    68e4:	d003      	beq.n	68ee <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    68e6:	2317      	movs	r3, #23
    68e8:	18fb      	adds	r3, r7, r3
    68ea:	22f7      	movs	r2, #247	; 0xf7
    68ec:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    68ee:	2317      	movs	r3, #23
    68f0:	18fb      	adds	r3, r7, r3
    68f2:	781b      	ldrb	r3, [r3, #0]
    68f4:	b25b      	sxtb	r3, r3
}
    68f6:	0018      	movs	r0, r3
    68f8:	46bd      	mov	sp, r7
    68fa:	b006      	add	sp, #24
    68fc:	bdb0      	pop	{r4, r5, r7, pc}
    68fe:	46c0      	nop			; (mov r8, r8)
    6900:	20004660 	.word	0x20004660
    6904:	00002401 	.word	0x00002401
    6908:	00002819 	.word	0x00002819

0000690c <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    690c:	b590      	push	{r4, r7, lr}
    690e:	b08f      	sub	sp, #60	; 0x3c
    6910:	af04      	add	r7, sp, #16
    6912:	0004      	movs	r4, r0
    6914:	60b9      	str	r1, [r7, #8]
    6916:	0010      	movs	r0, r2
    6918:	0019      	movs	r1, r3
    691a:	230f      	movs	r3, #15
    691c:	18fb      	adds	r3, r7, r3
    691e:	1c22      	adds	r2, r4, #0
    6920:	701a      	strb	r2, [r3, #0]
    6922:	230c      	movs	r3, #12
    6924:	18fb      	adds	r3, r7, r3
    6926:	1c02      	adds	r2, r0, #0
    6928:	801a      	strh	r2, [r3, #0]
    692a:	1dbb      	adds	r3, r7, #6
    692c:	1c0a      	adds	r2, r1, #0
    692e:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    6930:	2326      	movs	r3, #38	; 0x26
    6932:	18fb      	adds	r3, r7, r3
    6934:	2206      	movs	r2, #6
    6936:	4252      	negs	r2, r2
    6938:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    693a:	230f      	movs	r3, #15
    693c:	18fb      	adds	r3, r7, r3
    693e:	781b      	ldrb	r3, [r3, #0]
    6940:	2b7f      	cmp	r3, #127	; 0x7f
    6942:	d900      	bls.n	6946 <send+0x3a>
    6944:	e087      	b.n	6a56 <send+0x14a>
    6946:	68bb      	ldr	r3, [r7, #8]
    6948:	2b00      	cmp	r3, #0
    694a:	d100      	bne.n	694e <send+0x42>
    694c:	e083      	b.n	6a56 <send+0x14a>
    694e:	230c      	movs	r3, #12
    6950:	18fb      	adds	r3, r7, r3
    6952:	881a      	ldrh	r2, [r3, #0]
    6954:	23af      	movs	r3, #175	; 0xaf
    6956:	00db      	lsls	r3, r3, #3
    6958:	429a      	cmp	r2, r3
    695a:	d900      	bls.n	695e <send+0x52>
    695c:	e07b      	b.n	6a56 <send+0x14a>
    695e:	230f      	movs	r3, #15
    6960:	18fb      	adds	r3, r7, r3
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	b25b      	sxtb	r3, r3
    6966:	4a40      	ldr	r2, [pc, #256]	; (6a68 <send+0x15c>)
    6968:	011b      	lsls	r3, r3, #4
    696a:	18d3      	adds	r3, r2, r3
    696c:	330a      	adds	r3, #10
    696e:	781b      	ldrb	r3, [r3, #0]
    6970:	b2db      	uxtb	r3, r3
    6972:	2b01      	cmp	r3, #1
    6974:	d16f      	bne.n	6a56 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    6976:	2323      	movs	r3, #35	; 0x23
    6978:	18fb      	adds	r3, r7, r3
    697a:	2245      	movs	r2, #69	; 0x45
    697c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    697e:	2324      	movs	r3, #36	; 0x24
    6980:	18fb      	adds	r3, r7, r3
    6982:	2250      	movs	r2, #80	; 0x50
    6984:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    6986:	2310      	movs	r3, #16
    6988:	18fb      	adds	r3, r7, r3
    698a:	220f      	movs	r2, #15
    698c:	18ba      	adds	r2, r7, r2
    698e:	7812      	ldrb	r2, [r2, #0]
    6990:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    6992:	2310      	movs	r3, #16
    6994:	18fb      	adds	r3, r7, r3
    6996:	220c      	movs	r2, #12
    6998:	18ba      	adds	r2, r7, r2
    699a:	8812      	ldrh	r2, [r2, #0]
    699c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    699e:	230f      	movs	r3, #15
    69a0:	18fb      	adds	r3, r7, r3
    69a2:	781b      	ldrb	r3, [r3, #0]
    69a4:	b25b      	sxtb	r3, r3
    69a6:	4a30      	ldr	r2, [pc, #192]	; (6a68 <send+0x15c>)
    69a8:	011b      	lsls	r3, r3, #4
    69aa:	18d3      	adds	r3, r2, r3
    69ac:	3306      	adds	r3, #6
    69ae:	881b      	ldrh	r3, [r3, #0]
    69b0:	b29a      	uxth	r2, r3
    69b2:	2310      	movs	r3, #16
    69b4:	18fb      	adds	r3, r7, r3
    69b6:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    69b8:	230f      	movs	r3, #15
    69ba:	18fb      	adds	r3, r7, r3
    69bc:	781b      	ldrb	r3, [r3, #0]
    69be:	b25b      	sxtb	r3, r3
    69c0:	2b06      	cmp	r3, #6
    69c2:	dd03      	ble.n	69cc <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    69c4:	2324      	movs	r3, #36	; 0x24
    69c6:	18fb      	adds	r3, r7, r3
    69c8:	2244      	movs	r2, #68	; 0x44
    69ca:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    69cc:	230f      	movs	r3, #15
    69ce:	18fb      	adds	r3, r7, r3
    69d0:	781b      	ldrb	r3, [r3, #0]
    69d2:	b25b      	sxtb	r3, r3
    69d4:	4a24      	ldr	r2, [pc, #144]	; (6a68 <send+0x15c>)
    69d6:	011b      	lsls	r3, r3, #4
    69d8:	18d3      	adds	r3, r2, r3
    69da:	330b      	adds	r3, #11
    69dc:	781b      	ldrb	r3, [r3, #0]
    69de:	b2db      	uxtb	r3, r3
    69e0:	001a      	movs	r2, r3
    69e2:	2301      	movs	r3, #1
    69e4:	4013      	ands	r3, r2
    69e6:	d00f      	beq.n	6a08 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    69e8:	2323      	movs	r3, #35	; 0x23
    69ea:	18fb      	adds	r3, r7, r3
    69ec:	224c      	movs	r2, #76	; 0x4c
    69ee:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    69f0:	230f      	movs	r3, #15
    69f2:	18fb      	adds	r3, r7, r3
    69f4:	2200      	movs	r2, #0
    69f6:	569a      	ldrsb	r2, [r3, r2]
    69f8:	2324      	movs	r3, #36	; 0x24
    69fa:	18fb      	adds	r3, r7, r3
    69fc:	491a      	ldr	r1, [pc, #104]	; (6a68 <send+0x15c>)
    69fe:	0112      	lsls	r2, r2, #4
    6a00:	188a      	adds	r2, r1, r2
    6a02:	3208      	adds	r2, #8
    6a04:	8812      	ldrh	r2, [r2, #0]
    6a06:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    6a08:	2323      	movs	r3, #35	; 0x23
    6a0a:	18fb      	adds	r3, r7, r3
    6a0c:	781b      	ldrb	r3, [r3, #0]
    6a0e:	2280      	movs	r2, #128	; 0x80
    6a10:	4252      	negs	r2, r2
    6a12:	4313      	orrs	r3, r2
    6a14:	b2d9      	uxtb	r1, r3
    6a16:	2310      	movs	r3, #16
    6a18:	18fa      	adds	r2, r7, r3
    6a1a:	2324      	movs	r3, #36	; 0x24
    6a1c:	18fb      	adds	r3, r7, r3
    6a1e:	881b      	ldrh	r3, [r3, #0]
    6a20:	9302      	str	r3, [sp, #8]
    6a22:	230c      	movs	r3, #12
    6a24:	18fb      	adds	r3, r7, r3
    6a26:	881b      	ldrh	r3, [r3, #0]
    6a28:	9301      	str	r3, [sp, #4]
    6a2a:	68bb      	ldr	r3, [r7, #8]
    6a2c:	9300      	str	r3, [sp, #0]
    6a2e:	2310      	movs	r3, #16
    6a30:	2002      	movs	r0, #2
    6a32:	4c0e      	ldr	r4, [pc, #56]	; (6a6c <send+0x160>)
    6a34:	47a0      	blx	r4
    6a36:	0003      	movs	r3, r0
    6a38:	001a      	movs	r2, r3
    6a3a:	2326      	movs	r3, #38	; 0x26
    6a3c:	18fb      	adds	r3, r7, r3
    6a3e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    6a40:	2326      	movs	r3, #38	; 0x26
    6a42:	18fb      	adds	r3, r7, r3
    6a44:	2200      	movs	r2, #0
    6a46:	5e9b      	ldrsh	r3, [r3, r2]
    6a48:	2b00      	cmp	r3, #0
    6a4a:	d004      	beq.n	6a56 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    6a4c:	2326      	movs	r3, #38	; 0x26
    6a4e:	18fb      	adds	r3, r7, r3
    6a50:	220e      	movs	r2, #14
    6a52:	4252      	negs	r2, r2
    6a54:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    6a56:	2326      	movs	r3, #38	; 0x26
    6a58:	18fb      	adds	r3, r7, r3
    6a5a:	2200      	movs	r2, #0
    6a5c:	5e9b      	ldrsh	r3, [r3, r2]
}
    6a5e:	0018      	movs	r0, r3
    6a60:	46bd      	mov	sp, r7
    6a62:	b00b      	add	sp, #44	; 0x2c
    6a64:	bd90      	pop	{r4, r7, pc}
    6a66:	46c0      	nop			; (mov r8, r8)
    6a68:	20004660 	.word	0x20004660
    6a6c:	00002819 	.word	0x00002819

00006a70 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    6a70:	b590      	push	{r4, r7, lr}
    6a72:	b08d      	sub	sp, #52	; 0x34
    6a74:	af04      	add	r7, sp, #16
    6a76:	60b9      	str	r1, [r7, #8]
    6a78:	0011      	movs	r1, r2
    6a7a:	607b      	str	r3, [r7, #4]
    6a7c:	230f      	movs	r3, #15
    6a7e:	18fb      	adds	r3, r7, r3
    6a80:	1c02      	adds	r2, r0, #0
    6a82:	701a      	strb	r2, [r3, #0]
    6a84:	230c      	movs	r3, #12
    6a86:	18fb      	adds	r3, r7, r3
    6a88:	1c0a      	adds	r2, r1, #0
    6a8a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    6a8c:	231e      	movs	r3, #30
    6a8e:	18fb      	adds	r3, r7, r3
    6a90:	2206      	movs	r2, #6
    6a92:	4252      	negs	r2, r2
    6a94:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    6a96:	230f      	movs	r3, #15
    6a98:	18fb      	adds	r3, r7, r3
    6a9a:	781b      	ldrb	r3, [r3, #0]
    6a9c:	2b7f      	cmp	r3, #127	; 0x7f
    6a9e:	d900      	bls.n	6aa2 <recv+0x32>
    6aa0:	e099      	b.n	6bd6 <recv+0x166>
    6aa2:	68bb      	ldr	r3, [r7, #8]
    6aa4:	2b00      	cmp	r3, #0
    6aa6:	d100      	bne.n	6aaa <recv+0x3a>
    6aa8:	e095      	b.n	6bd6 <recv+0x166>
    6aaa:	230c      	movs	r3, #12
    6aac:	18fb      	adds	r3, r7, r3
    6aae:	881b      	ldrh	r3, [r3, #0]
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	d100      	bne.n	6ab6 <recv+0x46>
    6ab4:	e08f      	b.n	6bd6 <recv+0x166>
    6ab6:	230f      	movs	r3, #15
    6ab8:	18fb      	adds	r3, r7, r3
    6aba:	781b      	ldrb	r3, [r3, #0]
    6abc:	b25b      	sxtb	r3, r3
    6abe:	4a4a      	ldr	r2, [pc, #296]	; (6be8 <recv+0x178>)
    6ac0:	011b      	lsls	r3, r3, #4
    6ac2:	18d3      	adds	r3, r2, r3
    6ac4:	330a      	adds	r3, #10
    6ac6:	781b      	ldrb	r3, [r3, #0]
    6ac8:	b2db      	uxtb	r3, r3
    6aca:	2b01      	cmp	r3, #1
    6acc:	d000      	beq.n	6ad0 <recv+0x60>
    6ace:	e082      	b.n	6bd6 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    6ad0:	231e      	movs	r3, #30
    6ad2:	18fb      	adds	r3, r7, r3
    6ad4:	2200      	movs	r2, #0
    6ad6:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    6ad8:	230f      	movs	r3, #15
    6ada:	18fb      	adds	r3, r7, r3
    6adc:	2200      	movs	r2, #0
    6ade:	569a      	ldrsb	r2, [r3, r2]
    6ae0:	4b41      	ldr	r3, [pc, #260]	; (6be8 <recv+0x178>)
    6ae2:	0112      	lsls	r2, r2, #4
    6ae4:	68b9      	ldr	r1, [r7, #8]
    6ae6:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    6ae8:	230f      	movs	r3, #15
    6aea:	18fb      	adds	r3, r7, r3
    6aec:	781b      	ldrb	r3, [r3, #0]
    6aee:	b25b      	sxtb	r3, r3
    6af0:	4a3d      	ldr	r2, [pc, #244]	; (6be8 <recv+0x178>)
    6af2:	011b      	lsls	r3, r3, #4
    6af4:	18d3      	adds	r3, r2, r3
    6af6:	3304      	adds	r3, #4
    6af8:	220c      	movs	r2, #12
    6afa:	18ba      	adds	r2, r7, r2
    6afc:	8812      	ldrh	r2, [r2, #0]
    6afe:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    6b00:	230f      	movs	r3, #15
    6b02:	18fb      	adds	r3, r7, r3
    6b04:	781b      	ldrb	r3, [r3, #0]
    6b06:	b25b      	sxtb	r3, r3
    6b08:	4a37      	ldr	r2, [pc, #220]	; (6be8 <recv+0x178>)
    6b0a:	011b      	lsls	r3, r3, #4
    6b0c:	18d3      	adds	r3, r2, r3
    6b0e:	330c      	adds	r3, #12
    6b10:	781b      	ldrb	r3, [r3, #0]
    6b12:	b2db      	uxtb	r3, r3
    6b14:	2b00      	cmp	r3, #0
    6b16:	d15e      	bne.n	6bd6 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    6b18:	231d      	movs	r3, #29
    6b1a:	18fb      	adds	r3, r7, r3
    6b1c:	2246      	movs	r2, #70	; 0x46
    6b1e:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    6b20:	230f      	movs	r3, #15
    6b22:	18fb      	adds	r3, r7, r3
    6b24:	781b      	ldrb	r3, [r3, #0]
    6b26:	b25b      	sxtb	r3, r3
    6b28:	4a2f      	ldr	r2, [pc, #188]	; (6be8 <recv+0x178>)
    6b2a:	011b      	lsls	r3, r3, #4
    6b2c:	18d3      	adds	r3, r2, r3
    6b2e:	330c      	adds	r3, #12
    6b30:	2201      	movs	r2, #1
    6b32:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6b34:	230f      	movs	r3, #15
    6b36:	18fb      	adds	r3, r7, r3
    6b38:	781b      	ldrb	r3, [r3, #0]
    6b3a:	b25b      	sxtb	r3, r3
    6b3c:	4a2a      	ldr	r2, [pc, #168]	; (6be8 <recv+0x178>)
    6b3e:	011b      	lsls	r3, r3, #4
    6b40:	18d3      	adds	r3, r2, r3
    6b42:	330b      	adds	r3, #11
    6b44:	781b      	ldrb	r3, [r3, #0]
    6b46:	b2db      	uxtb	r3, r3
    6b48:	001a      	movs	r2, r3
    6b4a:	2301      	movs	r3, #1
    6b4c:	4013      	ands	r3, r2
    6b4e:	d003      	beq.n	6b58 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    6b50:	231d      	movs	r3, #29
    6b52:	18fb      	adds	r3, r7, r3
    6b54:	224d      	movs	r2, #77	; 0x4d
    6b56:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    6b58:	687b      	ldr	r3, [r7, #4]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d105      	bne.n	6b6a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    6b5e:	2314      	movs	r3, #20
    6b60:	18fb      	adds	r3, r7, r3
    6b62:	2201      	movs	r2, #1
    6b64:	4252      	negs	r2, r2
    6b66:	601a      	str	r2, [r3, #0]
    6b68:	e003      	b.n	6b72 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    6b6a:	2314      	movs	r3, #20
    6b6c:	18fb      	adds	r3, r7, r3
    6b6e:	687a      	ldr	r2, [r7, #4]
    6b70:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    6b72:	2314      	movs	r3, #20
    6b74:	18fb      	adds	r3, r7, r3
    6b76:	220f      	movs	r2, #15
    6b78:	18ba      	adds	r2, r7, r2
    6b7a:	7812      	ldrb	r2, [r2, #0]
    6b7c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    6b7e:	230f      	movs	r3, #15
    6b80:	18fb      	adds	r3, r7, r3
    6b82:	781b      	ldrb	r3, [r3, #0]
    6b84:	b25b      	sxtb	r3, r3
    6b86:	4a18      	ldr	r2, [pc, #96]	; (6be8 <recv+0x178>)
    6b88:	011b      	lsls	r3, r3, #4
    6b8a:	18d3      	adds	r3, r2, r3
    6b8c:	3306      	adds	r3, #6
    6b8e:	881b      	ldrh	r3, [r3, #0]
    6b90:	b29a      	uxth	r2, r3
    6b92:	2314      	movs	r3, #20
    6b94:	18fb      	adds	r3, r7, r3
    6b96:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    6b98:	2314      	movs	r3, #20
    6b9a:	18fa      	adds	r2, r7, r3
    6b9c:	231d      	movs	r3, #29
    6b9e:	18fb      	adds	r3, r7, r3
    6ba0:	7819      	ldrb	r1, [r3, #0]
    6ba2:	2300      	movs	r3, #0
    6ba4:	9302      	str	r3, [sp, #8]
    6ba6:	2300      	movs	r3, #0
    6ba8:	9301      	str	r3, [sp, #4]
    6baa:	2300      	movs	r3, #0
    6bac:	9300      	str	r3, [sp, #0]
    6bae:	2308      	movs	r3, #8
    6bb0:	2002      	movs	r0, #2
    6bb2:	4c0e      	ldr	r4, [pc, #56]	; (6bec <recv+0x17c>)
    6bb4:	47a0      	blx	r4
    6bb6:	0003      	movs	r3, r0
    6bb8:	001a      	movs	r2, r3
    6bba:	231e      	movs	r3, #30
    6bbc:	18fb      	adds	r3, r7, r3
    6bbe:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    6bc0:	231e      	movs	r3, #30
    6bc2:	18fb      	adds	r3, r7, r3
    6bc4:	2200      	movs	r2, #0
    6bc6:	5e9b      	ldrsh	r3, [r3, r2]
    6bc8:	2b00      	cmp	r3, #0
    6bca:	d004      	beq.n	6bd6 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    6bcc:	231e      	movs	r3, #30
    6bce:	18fb      	adds	r3, r7, r3
    6bd0:	220e      	movs	r2, #14
    6bd2:	4252      	negs	r2, r2
    6bd4:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    6bd6:	231e      	movs	r3, #30
    6bd8:	18fb      	adds	r3, r7, r3
    6bda:	2200      	movs	r2, #0
    6bdc:	5e9b      	ldrsh	r3, [r3, r2]
}
    6bde:	0018      	movs	r0, r3
    6be0:	46bd      	mov	sp, r7
    6be2:	b009      	add	sp, #36	; 0x24
    6be4:	bd90      	pop	{r4, r7, pc}
    6be6:	46c0      	nop			; (mov r8, r8)
    6be8:	20004660 	.word	0x20004660
    6bec:	00002819 	.word	0x00002819

00006bf0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    6bf0:	b5b0      	push	{r4, r5, r7, lr}
    6bf2:	b088      	sub	sp, #32
    6bf4:	af04      	add	r7, sp, #16
    6bf6:	0002      	movs	r2, r0
    6bf8:	1dfb      	adds	r3, r7, #7
    6bfa:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    6bfc:	230f      	movs	r3, #15
    6bfe:	18fb      	adds	r3, r7, r3
    6c00:	22fa      	movs	r2, #250	; 0xfa
    6c02:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    6c04:	1dfb      	adds	r3, r7, #7
    6c06:	781b      	ldrb	r3, [r3, #0]
    6c08:	2b7f      	cmp	r3, #127	; 0x7f
    6c0a:	d86a      	bhi.n	6ce2 <close+0xf2>
    6c0c:	1dfb      	adds	r3, r7, #7
    6c0e:	781b      	ldrb	r3, [r3, #0]
    6c10:	b25b      	sxtb	r3, r3
    6c12:	4a38      	ldr	r2, [pc, #224]	; (6cf4 <close+0x104>)
    6c14:	011b      	lsls	r3, r3, #4
    6c16:	18d3      	adds	r3, r2, r3
    6c18:	330a      	adds	r3, #10
    6c1a:	781b      	ldrb	r3, [r3, #0]
    6c1c:	b2db      	uxtb	r3, r3
    6c1e:	2b01      	cmp	r3, #1
    6c20:	d15f      	bne.n	6ce2 <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    6c22:	230e      	movs	r3, #14
    6c24:	18fb      	adds	r3, r7, r3
    6c26:	2249      	movs	r2, #73	; 0x49
    6c28:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    6c2a:	2308      	movs	r3, #8
    6c2c:	18fb      	adds	r3, r7, r3
    6c2e:	1dfa      	adds	r2, r7, #7
    6c30:	7812      	ldrb	r2, [r2, #0]
    6c32:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    6c34:	1dfb      	adds	r3, r7, #7
    6c36:	781b      	ldrb	r3, [r3, #0]
    6c38:	b25b      	sxtb	r3, r3
    6c3a:	4a2e      	ldr	r2, [pc, #184]	; (6cf4 <close+0x104>)
    6c3c:	011b      	lsls	r3, r3, #4
    6c3e:	18d3      	adds	r3, r2, r3
    6c40:	3306      	adds	r3, #6
    6c42:	881b      	ldrh	r3, [r3, #0]
    6c44:	b29a      	uxth	r2, r3
    6c46:	2308      	movs	r3, #8
    6c48:	18fb      	adds	r3, r7, r3
    6c4a:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    6c4c:	1dfb      	adds	r3, r7, #7
    6c4e:	781b      	ldrb	r3, [r3, #0]
    6c50:	b25b      	sxtb	r3, r3
    6c52:	4a28      	ldr	r2, [pc, #160]	; (6cf4 <close+0x104>)
    6c54:	011b      	lsls	r3, r3, #4
    6c56:	18d3      	adds	r3, r2, r3
    6c58:	330a      	adds	r3, #10
    6c5a:	2200      	movs	r2, #0
    6c5c:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    6c5e:	1dfb      	adds	r3, r7, #7
    6c60:	781b      	ldrb	r3, [r3, #0]
    6c62:	b25b      	sxtb	r3, r3
    6c64:	4a23      	ldr	r2, [pc, #140]	; (6cf4 <close+0x104>)
    6c66:	011b      	lsls	r3, r3, #4
    6c68:	18d3      	adds	r3, r2, r3
    6c6a:	3306      	adds	r3, #6
    6c6c:	2200      	movs	r2, #0
    6c6e:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6c70:	1dfb      	adds	r3, r7, #7
    6c72:	781b      	ldrb	r3, [r3, #0]
    6c74:	b25b      	sxtb	r3, r3
    6c76:	4a1f      	ldr	r2, [pc, #124]	; (6cf4 <close+0x104>)
    6c78:	011b      	lsls	r3, r3, #4
    6c7a:	18d3      	adds	r3, r2, r3
    6c7c:	330b      	adds	r3, #11
    6c7e:	781b      	ldrb	r3, [r3, #0]
    6c80:	b2db      	uxtb	r3, r3
    6c82:	001a      	movs	r2, r3
    6c84:	2301      	movs	r3, #1
    6c86:	4013      	ands	r3, r2
    6c88:	d003      	beq.n	6c92 <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    6c8a:	230e      	movs	r3, #14
    6c8c:	18fb      	adds	r3, r7, r3
    6c8e:	224e      	movs	r2, #78	; 0x4e
    6c90:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    6c92:	230f      	movs	r3, #15
    6c94:	18fc      	adds	r4, r7, r3
    6c96:	2308      	movs	r3, #8
    6c98:	18fa      	adds	r2, r7, r3
    6c9a:	230e      	movs	r3, #14
    6c9c:	18fb      	adds	r3, r7, r3
    6c9e:	7819      	ldrb	r1, [r3, #0]
    6ca0:	2300      	movs	r3, #0
    6ca2:	9302      	str	r3, [sp, #8]
    6ca4:	2300      	movs	r3, #0
    6ca6:	9301      	str	r3, [sp, #4]
    6ca8:	2300      	movs	r3, #0
    6caa:	9300      	str	r3, [sp, #0]
    6cac:	2304      	movs	r3, #4
    6cae:	2002      	movs	r0, #2
    6cb0:	4d11      	ldr	r5, [pc, #68]	; (6cf8 <close+0x108>)
    6cb2:	47a8      	blx	r5
    6cb4:	0003      	movs	r3, r0
    6cb6:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    6cb8:	230f      	movs	r3, #15
    6cba:	18fb      	adds	r3, r7, r3
    6cbc:	781b      	ldrb	r3, [r3, #0]
    6cbe:	b25b      	sxtb	r3, r3
    6cc0:	2b00      	cmp	r3, #0
    6cc2:	d003      	beq.n	6ccc <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    6cc4:	230f      	movs	r3, #15
    6cc6:	18fb      	adds	r3, r7, r3
    6cc8:	22f7      	movs	r2, #247	; 0xf7
    6cca:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    6ccc:	1dfb      	adds	r3, r7, #7
    6cce:	781b      	ldrb	r3, [r3, #0]
    6cd0:	b25b      	sxtb	r3, r3
    6cd2:	011a      	lsls	r2, r3, #4
    6cd4:	4b07      	ldr	r3, [pc, #28]	; (6cf4 <close+0x104>)
    6cd6:	18d3      	adds	r3, r2, r3
    6cd8:	2210      	movs	r2, #16
    6cda:	2100      	movs	r1, #0
    6cdc:	0018      	movs	r0, r3
    6cde:	4b07      	ldr	r3, [pc, #28]	; (6cfc <close+0x10c>)
    6ce0:	4798      	blx	r3
	}
	return s8Ret;
    6ce2:	230f      	movs	r3, #15
    6ce4:	18fb      	adds	r3, r7, r3
    6ce6:	781b      	ldrb	r3, [r3, #0]
    6ce8:	b25b      	sxtb	r3, r3
}
    6cea:	0018      	movs	r0, r3
    6cec:	46bd      	mov	sp, r7
    6cee:	b004      	add	sp, #16
    6cf0:	bdb0      	pop	{r4, r5, r7, pc}
    6cf2:	46c0      	nop			; (mov r8, r8)
    6cf4:	20004660 	.word	0x20004660
    6cf8:	00002819 	.word	0x00002819
    6cfc:	0000243d 	.word	0x0000243d

00006d00 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    6d00:	b5b0      	push	{r4, r5, r7, lr}
    6d02:	b088      	sub	sp, #32
    6d04:	af04      	add	r7, sp, #16
    6d06:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    6d08:	230f      	movs	r3, #15
    6d0a:	18fb      	adds	r3, r7, r3
    6d0c:	22fa      	movs	r2, #250	; 0xfa
    6d0e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    6d10:	687b      	ldr	r3, [r7, #4]
    6d12:	0018      	movs	r0, r3
    6d14:	4b19      	ldr	r3, [pc, #100]	; (6d7c <gethostbyname+0x7c>)
    6d16:	4798      	blx	r3
    6d18:	0003      	movs	r3, r0
    6d1a:	001a      	movs	r2, r3
    6d1c:	230e      	movs	r3, #14
    6d1e:	18fb      	adds	r3, r7, r3
    6d20:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    6d22:	230e      	movs	r3, #14
    6d24:	18fb      	adds	r3, r7, r3
    6d26:	781b      	ldrb	r3, [r3, #0]
    6d28:	2b40      	cmp	r3, #64	; 0x40
    6d2a:	d81f      	bhi.n	6d6c <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    6d2c:	230e      	movs	r3, #14
    6d2e:	18fb      	adds	r3, r7, r3
    6d30:	781b      	ldrb	r3, [r3, #0]
    6d32:	b29b      	uxth	r3, r3
    6d34:	3301      	adds	r3, #1
    6d36:	b299      	uxth	r1, r3
    6d38:	230f      	movs	r3, #15
    6d3a:	18fc      	adds	r4, r7, r3
    6d3c:	687a      	ldr	r2, [r7, #4]
    6d3e:	2300      	movs	r3, #0
    6d40:	9302      	str	r3, [sp, #8]
    6d42:	2300      	movs	r3, #0
    6d44:	9301      	str	r3, [sp, #4]
    6d46:	2300      	movs	r3, #0
    6d48:	9300      	str	r3, [sp, #0]
    6d4a:	000b      	movs	r3, r1
    6d4c:	21ca      	movs	r1, #202	; 0xca
    6d4e:	2002      	movs	r0, #2
    6d50:	4d0b      	ldr	r5, [pc, #44]	; (6d80 <gethostbyname+0x80>)
    6d52:	47a8      	blx	r5
    6d54:	0003      	movs	r3, r0
    6d56:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    6d58:	230f      	movs	r3, #15
    6d5a:	18fb      	adds	r3, r7, r3
    6d5c:	781b      	ldrb	r3, [r3, #0]
    6d5e:	b25b      	sxtb	r3, r3
    6d60:	2b00      	cmp	r3, #0
    6d62:	d003      	beq.n	6d6c <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    6d64:	230f      	movs	r3, #15
    6d66:	18fb      	adds	r3, r7, r3
    6d68:	22f7      	movs	r2, #247	; 0xf7
    6d6a:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    6d6c:	230f      	movs	r3, #15
    6d6e:	18fb      	adds	r3, r7, r3
    6d70:	781b      	ldrb	r3, [r3, #0]
    6d72:	b25b      	sxtb	r3, r3
}
    6d74:	0018      	movs	r0, r3
    6d76:	46bd      	mov	sp, r7
    6d78:	b004      	add	sp, #16
    6d7a:	bdb0      	pop	{r4, r5, r7, pc}
    6d7c:	0000247d 	.word	0x0000247d
    6d80:	00002819 	.word	0x00002819

00006d84 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    6d84:	b580      	push	{r7, lr}
    6d86:	b082      	sub	sp, #8
    6d88:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    6d8a:	003b      	movs	r3, r7
    6d8c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    6d8e:	687b      	ldr	r3, [r7, #4]
    6d90:	22b9      	movs	r2, #185	; 0xb9
    6d92:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    6d94:	4b13      	ldr	r3, [pc, #76]	; (6de4 <spi_flash_enter_low_power_mode+0x60>)
    6d96:	2100      	movs	r1, #0
    6d98:	0018      	movs	r0, r3
    6d9a:	4b13      	ldr	r3, [pc, #76]	; (6de8 <spi_flash_enter_low_power_mode+0x64>)
    6d9c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    6d9e:	687b      	ldr	r3, [r7, #4]
    6da0:	781b      	ldrb	r3, [r3, #0]
    6da2:	001a      	movs	r2, r3
    6da4:	4b11      	ldr	r3, [pc, #68]	; (6dec <spi_flash_enter_low_power_mode+0x68>)
    6da6:	0011      	movs	r1, r2
    6da8:	0018      	movs	r0, r3
    6daa:	4b0f      	ldr	r3, [pc, #60]	; (6de8 <spi_flash_enter_low_power_mode+0x64>)
    6dac:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    6dae:	4b10      	ldr	r3, [pc, #64]	; (6df0 <spi_flash_enter_low_power_mode+0x6c>)
    6db0:	2101      	movs	r1, #1
    6db2:	0018      	movs	r0, r3
    6db4:	4b0c      	ldr	r3, [pc, #48]	; (6de8 <spi_flash_enter_low_power_mode+0x64>)
    6db6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    6db8:	4b0e      	ldr	r3, [pc, #56]	; (6df4 <spi_flash_enter_low_power_mode+0x70>)
    6dba:	2100      	movs	r1, #0
    6dbc:	0018      	movs	r0, r3
    6dbe:	4b0a      	ldr	r3, [pc, #40]	; (6de8 <spi_flash_enter_low_power_mode+0x64>)
    6dc0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    6dc2:	4b0d      	ldr	r3, [pc, #52]	; (6df8 <spi_flash_enter_low_power_mode+0x74>)
    6dc4:	2181      	movs	r1, #129	; 0x81
    6dc6:	0018      	movs	r0, r3
    6dc8:	4b07      	ldr	r3, [pc, #28]	; (6de8 <spi_flash_enter_low_power_mode+0x64>)
    6dca:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    6dcc:	46c0      	nop			; (mov r8, r8)
    6dce:	4b0b      	ldr	r3, [pc, #44]	; (6dfc <spi_flash_enter_low_power_mode+0x78>)
    6dd0:	0018      	movs	r0, r3
    6dd2:	4b0b      	ldr	r3, [pc, #44]	; (6e00 <spi_flash_enter_low_power_mode+0x7c>)
    6dd4:	4798      	blx	r3
    6dd6:	1e03      	subs	r3, r0, #0
    6dd8:	2b01      	cmp	r3, #1
    6dda:	d1f8      	bne.n	6dce <spi_flash_enter_low_power_mode+0x4a>
}
    6ddc:	46c0      	nop			; (mov r8, r8)
    6dde:	46bd      	mov	sp, r7
    6de0:	b002      	add	sp, #8
    6de2:	bd80      	pop	{r7, pc}
    6de4:	00010208 	.word	0x00010208
    6de8:	0000477d 	.word	0x0000477d
    6dec:	0001020c 	.word	0x0001020c
    6df0:	00010214 	.word	0x00010214
    6df4:	0001021c 	.word	0x0001021c
    6df8:	00010204 	.word	0x00010204
    6dfc:	00010218 	.word	0x00010218
    6e00:	00004739 	.word	0x00004739

00006e04 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    6e04:	b580      	push	{r7, lr}
    6e06:	b082      	sub	sp, #8
    6e08:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    6e0a:	003b      	movs	r3, r7
    6e0c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    6e0e:	687b      	ldr	r3, [r7, #4]
    6e10:	22ab      	movs	r2, #171	; 0xab
    6e12:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    6e14:	4b13      	ldr	r3, [pc, #76]	; (6e64 <spi_flash_leave_low_power_mode+0x60>)
    6e16:	2100      	movs	r1, #0
    6e18:	0018      	movs	r0, r3
    6e1a:	4b13      	ldr	r3, [pc, #76]	; (6e68 <spi_flash_leave_low_power_mode+0x64>)
    6e1c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    6e1e:	687b      	ldr	r3, [r7, #4]
    6e20:	781b      	ldrb	r3, [r3, #0]
    6e22:	001a      	movs	r2, r3
    6e24:	4b11      	ldr	r3, [pc, #68]	; (6e6c <spi_flash_leave_low_power_mode+0x68>)
    6e26:	0011      	movs	r1, r2
    6e28:	0018      	movs	r0, r3
    6e2a:	4b0f      	ldr	r3, [pc, #60]	; (6e68 <spi_flash_leave_low_power_mode+0x64>)
    6e2c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    6e2e:	4b10      	ldr	r3, [pc, #64]	; (6e70 <spi_flash_leave_low_power_mode+0x6c>)
    6e30:	2101      	movs	r1, #1
    6e32:	0018      	movs	r0, r3
    6e34:	4b0c      	ldr	r3, [pc, #48]	; (6e68 <spi_flash_leave_low_power_mode+0x64>)
    6e36:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    6e38:	4b0e      	ldr	r3, [pc, #56]	; (6e74 <spi_flash_leave_low_power_mode+0x70>)
    6e3a:	2100      	movs	r1, #0
    6e3c:	0018      	movs	r0, r3
    6e3e:	4b0a      	ldr	r3, [pc, #40]	; (6e68 <spi_flash_leave_low_power_mode+0x64>)
    6e40:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    6e42:	4b0d      	ldr	r3, [pc, #52]	; (6e78 <spi_flash_leave_low_power_mode+0x74>)
    6e44:	2181      	movs	r1, #129	; 0x81
    6e46:	0018      	movs	r0, r3
    6e48:	4b07      	ldr	r3, [pc, #28]	; (6e68 <spi_flash_leave_low_power_mode+0x64>)
    6e4a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    6e4c:	46c0      	nop			; (mov r8, r8)
    6e4e:	4b0b      	ldr	r3, [pc, #44]	; (6e7c <spi_flash_leave_low_power_mode+0x78>)
    6e50:	0018      	movs	r0, r3
    6e52:	4b0b      	ldr	r3, [pc, #44]	; (6e80 <spi_flash_leave_low_power_mode+0x7c>)
    6e54:	4798      	blx	r3
    6e56:	1e03      	subs	r3, r0, #0
    6e58:	2b01      	cmp	r3, #1
    6e5a:	d1f8      	bne.n	6e4e <spi_flash_leave_low_power_mode+0x4a>
}
    6e5c:	46c0      	nop			; (mov r8, r8)
    6e5e:	46bd      	mov	sp, r7
    6e60:	b002      	add	sp, #8
    6e62:	bd80      	pop	{r7, pc}
    6e64:	00010208 	.word	0x00010208
    6e68:	0000477d 	.word	0x0000477d
    6e6c:	0001020c 	.word	0x0001020c
    6e70:	00010214 	.word	0x00010214
    6e74:	0001021c 	.word	0x0001021c
    6e78:	00010204 	.word	0x00010204
    6e7c:	00010218 	.word	0x00010218
    6e80:	00004739 	.word	0x00004739

00006e84 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
    6e84:	b590      	push	{r4, r7, lr}
    6e86:	b085      	sub	sp, #20
    6e88:	af00      	add	r7, sp, #0
    6e8a:	0002      	movs	r2, r0
    6e8c:	1dfb      	adds	r3, r7, #7
    6e8e:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    6e90:	230f      	movs	r3, #15
    6e92:	18fb      	adds	r3, r7, r3
    6e94:	2200      	movs	r2, #0
    6e96:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    6e98:	4b24      	ldr	r3, [pc, #144]	; (6f2c <spi_flash_enable+0xa8>)
    6e9a:	4798      	blx	r3
    6e9c:	0003      	movs	r3, r0
    6e9e:	051b      	lsls	r3, r3, #20
    6ea0:	0d1b      	lsrs	r3, r3, #20
    6ea2:	4a23      	ldr	r2, [pc, #140]	; (6f30 <spi_flash_enable+0xac>)
    6ea4:	4293      	cmp	r3, r2
    6ea6:	d938      	bls.n	6f1a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    6ea8:	230f      	movs	r3, #15
    6eaa:	18fc      	adds	r4, r7, r3
    6eac:	2308      	movs	r3, #8
    6eae:	18fb      	adds	r3, r7, r3
    6eb0:	4a20      	ldr	r2, [pc, #128]	; (6f34 <spi_flash_enable+0xb0>)
    6eb2:	0019      	movs	r1, r3
    6eb4:	0010      	movs	r0, r2
    6eb6:	4b20      	ldr	r3, [pc, #128]	; (6f38 <spi_flash_enable+0xb4>)
    6eb8:	4798      	blx	r3
    6eba:	0003      	movs	r3, r0
    6ebc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    6ebe:	230f      	movs	r3, #15
    6ec0:	18fb      	adds	r3, r7, r3
    6ec2:	781b      	ldrb	r3, [r3, #0]
    6ec4:	b25b      	sxtb	r3, r3
    6ec6:	2b00      	cmp	r3, #0
    6ec8:	d126      	bne.n	6f18 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    6eca:	68bb      	ldr	r3, [r7, #8]
    6ecc:	4a1b      	ldr	r2, [pc, #108]	; (6f3c <spi_flash_enable+0xb8>)
    6ece:	4013      	ands	r3, r2
    6ed0:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    6ed2:	68bb      	ldr	r3, [r7, #8]
    6ed4:	4a1a      	ldr	r2, [pc, #104]	; (6f40 <spi_flash_enable+0xbc>)
    6ed6:	4313      	orrs	r3, r2
    6ed8:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    6eda:	68bb      	ldr	r3, [r7, #8]
    6edc:	4a15      	ldr	r2, [pc, #84]	; (6f34 <spi_flash_enable+0xb0>)
    6ede:	0019      	movs	r1, r3
    6ee0:	0010      	movs	r0, r2
    6ee2:	4b18      	ldr	r3, [pc, #96]	; (6f44 <spi_flash_enable+0xc0>)
    6ee4:	4798      	blx	r3
		if(enable) {
    6ee6:	1dfb      	adds	r3, r7, #7
    6ee8:	781b      	ldrb	r3, [r3, #0]
    6eea:	2b00      	cmp	r3, #0
    6eec:	d002      	beq.n	6ef4 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    6eee:	4b16      	ldr	r3, [pc, #88]	; (6f48 <spi_flash_enable+0xc4>)
    6ef0:	4798      	blx	r3
    6ef2:	e001      	b.n	6ef8 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    6ef4:	4b15      	ldr	r3, [pc, #84]	; (6f4c <spi_flash_enable+0xc8>)
    6ef6:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    6ef8:	68bb      	ldr	r3, [r7, #8]
    6efa:	4a10      	ldr	r2, [pc, #64]	; (6f3c <spi_flash_enable+0xb8>)
    6efc:	4013      	ands	r3, r2
    6efe:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    6f00:	68bb      	ldr	r3, [r7, #8]
    6f02:	2280      	movs	r2, #128	; 0x80
    6f04:	0252      	lsls	r2, r2, #9
    6f06:	4313      	orrs	r3, r2
    6f08:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    6f0a:	68bb      	ldr	r3, [r7, #8]
    6f0c:	4a09      	ldr	r2, [pc, #36]	; (6f34 <spi_flash_enable+0xb0>)
    6f0e:	0019      	movs	r1, r3
    6f10:	0010      	movs	r0, r2
    6f12:	4b0c      	ldr	r3, [pc, #48]	; (6f44 <spi_flash_enable+0xc0>)
    6f14:	4798      	blx	r3
    6f16:	e000      	b.n	6f1a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    6f18:	46c0      	nop			; (mov r8, r8)
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    6f1a:	230f      	movs	r3, #15
    6f1c:	18fb      	adds	r3, r7, r3
    6f1e:	781b      	ldrb	r3, [r3, #0]
    6f20:	b25b      	sxtb	r3, r3
}
    6f22:	0018      	movs	r0, r3
    6f24:	46bd      	mov	sp, r7
    6f26:	b005      	add	sp, #20
    6f28:	bd90      	pop	{r4, r7, pc}
    6f2a:	46c0      	nop			; (mov r8, r8)
    6f2c:	000040c5 	.word	0x000040c5
    6f30:	0000039f 	.word	0x0000039f
    6f34:	00001410 	.word	0x00001410
    6f38:	00004759 	.word	0x00004759
    6f3c:	f8888fff 	.word	0xf8888fff
    6f40:	01111000 	.word	0x01111000
    6f44:	0000477d 	.word	0x0000477d
    6f48:	00006e05 	.word	0x00006e05
    6f4c:	00006d85 	.word	0x00006d85

00006f50 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    6f50:	b580      	push	{r7, lr}
    6f52:	b082      	sub	sp, #8
    6f54:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    6f56:	4b10      	ldr	r3, [pc, #64]	; (6f98 <cpu_irq_enter_critical+0x48>)
    6f58:	681b      	ldr	r3, [r3, #0]
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d112      	bne.n	6f84 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6f5e:	f3ef 8310 	mrs	r3, PRIMASK
    6f62:	607b      	str	r3, [r7, #4]
  return(result);
    6f64:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    6f66:	2b00      	cmp	r3, #0
    6f68:	d109      	bne.n	6f7e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    6f6a:	b672      	cpsid	i
    6f6c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    6f70:	4b0a      	ldr	r3, [pc, #40]	; (6f9c <cpu_irq_enter_critical+0x4c>)
    6f72:	2200      	movs	r2, #0
    6f74:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6f76:	4b0a      	ldr	r3, [pc, #40]	; (6fa0 <cpu_irq_enter_critical+0x50>)
    6f78:	2201      	movs	r2, #1
    6f7a:	701a      	strb	r2, [r3, #0]
    6f7c:	e002      	b.n	6f84 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    6f7e:	4b08      	ldr	r3, [pc, #32]	; (6fa0 <cpu_irq_enter_critical+0x50>)
    6f80:	2200      	movs	r2, #0
    6f82:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    6f84:	4b04      	ldr	r3, [pc, #16]	; (6f98 <cpu_irq_enter_critical+0x48>)
    6f86:	681b      	ldr	r3, [r3, #0]
    6f88:	1c5a      	adds	r2, r3, #1
    6f8a:	4b03      	ldr	r3, [pc, #12]	; (6f98 <cpu_irq_enter_critical+0x48>)
    6f8c:	601a      	str	r2, [r3, #0]
}
    6f8e:	46c0      	nop			; (mov r8, r8)
    6f90:	46bd      	mov	sp, r7
    6f92:	b002      	add	sp, #8
    6f94:	bd80      	pop	{r7, pc}
    6f96:	46c0      	nop			; (mov r8, r8)
    6f98:	200000f0 	.word	0x200000f0
    6f9c:	20000018 	.word	0x20000018
    6fa0:	200000f4 	.word	0x200000f4

00006fa4 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    6fa4:	b580      	push	{r7, lr}
    6fa6:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    6fa8:	4b0b      	ldr	r3, [pc, #44]	; (6fd8 <cpu_irq_leave_critical+0x34>)
    6faa:	681b      	ldr	r3, [r3, #0]
    6fac:	1e5a      	subs	r2, r3, #1
    6fae:	4b0a      	ldr	r3, [pc, #40]	; (6fd8 <cpu_irq_leave_critical+0x34>)
    6fb0:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    6fb2:	4b09      	ldr	r3, [pc, #36]	; (6fd8 <cpu_irq_leave_critical+0x34>)
    6fb4:	681b      	ldr	r3, [r3, #0]
    6fb6:	2b00      	cmp	r3, #0
    6fb8:	d10a      	bne.n	6fd0 <cpu_irq_leave_critical+0x2c>
    6fba:	4b08      	ldr	r3, [pc, #32]	; (6fdc <cpu_irq_leave_critical+0x38>)
    6fbc:	781b      	ldrb	r3, [r3, #0]
    6fbe:	b2db      	uxtb	r3, r3
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d005      	beq.n	6fd0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    6fc4:	4b06      	ldr	r3, [pc, #24]	; (6fe0 <cpu_irq_leave_critical+0x3c>)
    6fc6:	2201      	movs	r2, #1
    6fc8:	701a      	strb	r2, [r3, #0]
    6fca:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    6fce:	b662      	cpsie	i
	}
}
    6fd0:	46c0      	nop			; (mov r8, r8)
    6fd2:	46bd      	mov	sp, r7
    6fd4:	bd80      	pop	{r7, pc}
    6fd6:	46c0      	nop			; (mov r8, r8)
    6fd8:	200000f0 	.word	0x200000f0
    6fdc:	200000f4 	.word	0x200000f4
    6fe0:	20000018 	.word	0x20000018

00006fe4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    6fe4:	b580      	push	{r7, lr}
    6fe6:	b084      	sub	sp, #16
    6fe8:	af00      	add	r7, sp, #0
    6fea:	0002      	movs	r2, r0
    6fec:	1dfb      	adds	r3, r7, #7
    6fee:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    6ff0:	230f      	movs	r3, #15
    6ff2:	18fb      	adds	r3, r7, r3
    6ff4:	1dfa      	adds	r2, r7, #7
    6ff6:	7812      	ldrb	r2, [r2, #0]
    6ff8:	09d2      	lsrs	r2, r2, #7
    6ffa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    6ffc:	230e      	movs	r3, #14
    6ffe:	18fb      	adds	r3, r7, r3
    7000:	1dfa      	adds	r2, r7, #7
    7002:	7812      	ldrb	r2, [r2, #0]
    7004:	0952      	lsrs	r2, r2, #5
    7006:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7008:	4b0d      	ldr	r3, [pc, #52]	; (7040 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    700a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    700c:	230f      	movs	r3, #15
    700e:	18fb      	adds	r3, r7, r3
    7010:	781b      	ldrb	r3, [r3, #0]
    7012:	2b00      	cmp	r3, #0
    7014:	d10f      	bne.n	7036 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    7016:	230f      	movs	r3, #15
    7018:	18fb      	adds	r3, r7, r3
    701a:	781b      	ldrb	r3, [r3, #0]
    701c:	009b      	lsls	r3, r3, #2
    701e:	2210      	movs	r2, #16
    7020:	4694      	mov	ip, r2
    7022:	44bc      	add	ip, r7
    7024:	4463      	add	r3, ip
    7026:	3b08      	subs	r3, #8
    7028:	681a      	ldr	r2, [r3, #0]
    702a:	230e      	movs	r3, #14
    702c:	18fb      	adds	r3, r7, r3
    702e:	781b      	ldrb	r3, [r3, #0]
    7030:	01db      	lsls	r3, r3, #7
    7032:	18d3      	adds	r3, r2, r3
    7034:	e000      	b.n	7038 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    7036:	2300      	movs	r3, #0
	}
}
    7038:	0018      	movs	r0, r3
    703a:	46bd      	mov	sp, r7
    703c:	b004      	add	sp, #16
    703e:	bd80      	pop	{r7, pc}
    7040:	41004400 	.word	0x41004400

00007044 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7044:	b580      	push	{r7, lr}
    7046:	b082      	sub	sp, #8
    7048:	af00      	add	r7, sp, #0
    704a:	0002      	movs	r2, r0
    704c:	1dfb      	adds	r3, r7, #7
    704e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    7050:	1dfb      	adds	r3, r7, #7
    7052:	781b      	ldrb	r3, [r3, #0]
    7054:	0018      	movs	r0, r3
    7056:	4b03      	ldr	r3, [pc, #12]	; (7064 <port_get_group_from_gpio_pin+0x20>)
    7058:	4798      	blx	r3
    705a:	0003      	movs	r3, r0
}
    705c:	0018      	movs	r0, r3
    705e:	46bd      	mov	sp, r7
    7060:	b002      	add	sp, #8
    7062:	bd80      	pop	{r7, pc}
    7064:	00006fe5 	.word	0x00006fe5

00007068 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    7068:	b580      	push	{r7, lr}
    706a:	b082      	sub	sp, #8
    706c:	af00      	add	r7, sp, #0
    706e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    7070:	687b      	ldr	r3, [r7, #4]
    7072:	2200      	movs	r2, #0
    7074:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    7076:	687b      	ldr	r3, [r7, #4]
    7078:	2201      	movs	r2, #1
    707a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    707c:	687b      	ldr	r3, [r7, #4]
    707e:	2200      	movs	r2, #0
    7080:	709a      	strb	r2, [r3, #2]
}
    7082:	46c0      	nop			; (mov r8, r8)
    7084:	46bd      	mov	sp, r7
    7086:	b002      	add	sp, #8
    7088:	bd80      	pop	{r7, pc}
    708a:	46c0      	nop			; (mov r8, r8)

0000708c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    708c:	b580      	push	{r7, lr}
    708e:	b084      	sub	sp, #16
    7090:	af00      	add	r7, sp, #0
    7092:	0002      	movs	r2, r0
    7094:	1dfb      	adds	r3, r7, #7
    7096:	701a      	strb	r2, [r3, #0]
    7098:	1dbb      	adds	r3, r7, #6
    709a:	1c0a      	adds	r2, r1, #0
    709c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    709e:	1dfb      	adds	r3, r7, #7
    70a0:	781b      	ldrb	r3, [r3, #0]
    70a2:	0018      	movs	r0, r3
    70a4:	4b0d      	ldr	r3, [pc, #52]	; (70dc <port_pin_set_output_level+0x50>)
    70a6:	4798      	blx	r3
    70a8:	0003      	movs	r3, r0
    70aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    70ac:	1dfb      	adds	r3, r7, #7
    70ae:	781b      	ldrb	r3, [r3, #0]
    70b0:	221f      	movs	r2, #31
    70b2:	4013      	ands	r3, r2
    70b4:	2201      	movs	r2, #1
    70b6:	409a      	lsls	r2, r3
    70b8:	0013      	movs	r3, r2
    70ba:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    70bc:	1dbb      	adds	r3, r7, #6
    70be:	781b      	ldrb	r3, [r3, #0]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d003      	beq.n	70cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    70c4:	68fb      	ldr	r3, [r7, #12]
    70c6:	68ba      	ldr	r2, [r7, #8]
    70c8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    70ca:	e002      	b.n	70d2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    70cc:	68fb      	ldr	r3, [r7, #12]
    70ce:	68ba      	ldr	r2, [r7, #8]
    70d0:	615a      	str	r2, [r3, #20]
	}
}
    70d2:	46c0      	nop			; (mov r8, r8)
    70d4:	46bd      	mov	sp, r7
    70d6:	b004      	add	sp, #16
    70d8:	bd80      	pop	{r7, pc}
    70da:	46c0      	nop			; (mov r8, r8)
    70dc:	00007045 	.word	0x00007045

000070e0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    70e0:	b580      	push	{r7, lr}
    70e2:	b082      	sub	sp, #8
    70e4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    70e6:	1d3b      	adds	r3, r7, #4
    70e8:	0018      	movs	r0, r3
    70ea:	4b0e      	ldr	r3, [pc, #56]	; (7124 <system_board_init+0x44>)
    70ec:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    70ee:	1d3b      	adds	r3, r7, #4
    70f0:	2201      	movs	r2, #1
    70f2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    70f4:	1d3b      	adds	r3, r7, #4
    70f6:	0019      	movs	r1, r3
    70f8:	2017      	movs	r0, #23
    70fa:	4b0b      	ldr	r3, [pc, #44]	; (7128 <system_board_init+0x48>)
    70fc:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    70fe:	2101      	movs	r1, #1
    7100:	2017      	movs	r0, #23
    7102:	4b0a      	ldr	r3, [pc, #40]	; (712c <system_board_init+0x4c>)
    7104:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    7106:	1d3b      	adds	r3, r7, #4
    7108:	2200      	movs	r2, #0
    710a:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    710c:	1d3b      	adds	r3, r7, #4
    710e:	2201      	movs	r2, #1
    7110:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    7112:	1d3b      	adds	r3, r7, #4
    7114:	0019      	movs	r1, r3
    7116:	2037      	movs	r0, #55	; 0x37
    7118:	4b03      	ldr	r3, [pc, #12]	; (7128 <system_board_init+0x48>)
    711a:	4798      	blx	r3
}
    711c:	46c0      	nop			; (mov r8, r8)
    711e:	46bd      	mov	sp, r7
    7120:	b002      	add	sp, #8
    7122:	bd80      	pop	{r7, pc}
    7124:	00007069 	.word	0x00007069
    7128:	00007931 	.word	0x00007931
    712c:	0000708d 	.word	0x0000708d

00007130 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    7130:	b580      	push	{r7, lr}
    7132:	b084      	sub	sp, #16
    7134:	af00      	add	r7, sp, #0
    7136:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    7138:	687b      	ldr	r3, [r7, #4]
    713a:	681b      	ldr	r3, [r3, #0]
    713c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    713e:	68fb      	ldr	r3, [r7, #12]
    7140:	7e5b      	ldrb	r3, [r3, #25]
    7142:	b2db      	uxtb	r3, r3
    7144:	b25b      	sxtb	r3, r3
    7146:	2b00      	cmp	r3, #0
    7148:	da01      	bge.n	714e <adc_is_syncing+0x1e>
		return true;
    714a:	2301      	movs	r3, #1
    714c:	e000      	b.n	7150 <adc_is_syncing+0x20>
	}

	return false;
    714e:	2300      	movs	r3, #0
}
    7150:	0018      	movs	r0, r3
    7152:	46bd      	mov	sp, r7
    7154:	b004      	add	sp, #16
    7156:	bd80      	pop	{r7, pc}

00007158 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    7158:	b580      	push	{r7, lr}
    715a:	b084      	sub	sp, #16
    715c:	af00      	add	r7, sp, #0
    715e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    7160:	687b      	ldr	r3, [r7, #4]
    7162:	681b      	ldr	r3, [r3, #0]
    7164:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    7166:	46c0      	nop			; (mov r8, r8)
    7168:	687b      	ldr	r3, [r7, #4]
    716a:	0018      	movs	r0, r3
    716c:	4b0b      	ldr	r3, [pc, #44]	; (719c <adc_start_conversion+0x44>)
    716e:	4798      	blx	r3
    7170:	1e03      	subs	r3, r0, #0
    7172:	d1f9      	bne.n	7168 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    7174:	68fb      	ldr	r3, [r7, #12]
    7176:	7b1b      	ldrb	r3, [r3, #12]
    7178:	b2db      	uxtb	r3, r3
    717a:	2202      	movs	r2, #2
    717c:	4313      	orrs	r3, r2
    717e:	b2da      	uxtb	r2, r3
    7180:	68fb      	ldr	r3, [r7, #12]
    7182:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    7184:	46c0      	nop			; (mov r8, r8)
    7186:	687b      	ldr	r3, [r7, #4]
    7188:	0018      	movs	r0, r3
    718a:	4b04      	ldr	r3, [pc, #16]	; (719c <adc_start_conversion+0x44>)
    718c:	4798      	blx	r3
    718e:	1e03      	subs	r3, r0, #0
    7190:	d1f9      	bne.n	7186 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    7192:	46c0      	nop			; (mov r8, r8)
    7194:	46bd      	mov	sp, r7
    7196:	b004      	add	sp, #16
    7198:	bd80      	pop	{r7, pc}
    719a:	46c0      	nop			; (mov r8, r8)
    719c:	00007131 	.word	0x00007131

000071a0 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    71a0:	b580      	push	{r7, lr}
    71a2:	b084      	sub	sp, #16
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
    71a8:	000a      	movs	r2, r1
    71aa:	1cfb      	adds	r3, r7, #3
    71ac:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    71ae:	687b      	ldr	r3, [r7, #4]
    71b0:	681b      	ldr	r3, [r3, #0]
    71b2:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    71b4:	68fb      	ldr	r3, [r7, #12]
    71b6:	1cfa      	adds	r2, r7, #3
    71b8:	7812      	ldrb	r2, [r2, #0]
    71ba:	759a      	strb	r2, [r3, #22]
}
    71bc:	46c0      	nop			; (mov r8, r8)
    71be:	46bd      	mov	sp, r7
    71c0:	b004      	add	sp, #16
    71c2:	bd80      	pop	{r7, pc}

000071c4 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    71c4:	b580      	push	{r7, lr}
    71c6:	b084      	sub	sp, #16
    71c8:	af00      	add	r7, sp, #0
    71ca:	0002      	movs	r2, r0
    71cc:	1dfb      	adds	r3, r7, #7
    71ce:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    71d0:	1dfb      	adds	r3, r7, #7
    71d2:	781a      	ldrb	r2, [r3, #0]
    71d4:	4b44      	ldr	r3, [pc, #272]	; (72e8 <_adc_interrupt_handler+0x124>)
    71d6:	0092      	lsls	r2, r2, #2
    71d8:	58d3      	ldr	r3, [r2, r3]
    71da:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    71dc:	68fb      	ldr	r3, [r7, #12]
    71de:	681b      	ldr	r3, [r3, #0]
    71e0:	7e1b      	ldrb	r3, [r3, #24]
    71e2:	b2db      	uxtb	r3, r3
    71e4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    71e6:	68bb      	ldr	r3, [r7, #8]
    71e8:	2201      	movs	r2, #1
    71ea:	4013      	ands	r3, r2
    71ec:	d045      	beq.n	727a <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    71ee:	68fb      	ldr	r3, [r7, #12]
    71f0:	7edb      	ldrb	r3, [r3, #27]
    71f2:	001a      	movs	r2, r3
    71f4:	2301      	movs	r3, #1
    71f6:	4013      	ands	r3, r2
    71f8:	d03f      	beq.n	727a <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    71fa:	68fb      	ldr	r3, [r7, #12]
    71fc:	7e9b      	ldrb	r3, [r3, #26]
    71fe:	001a      	movs	r2, r3
    7200:	2301      	movs	r3, #1
    7202:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    7204:	d039      	beq.n	727a <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    7206:	68fb      	ldr	r3, [r7, #12]
    7208:	681b      	ldr	r3, [r3, #0]
    720a:	2201      	movs	r2, #1
    720c:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    720e:	46c0      	nop			; (mov r8, r8)
    7210:	68fb      	ldr	r3, [r7, #12]
    7212:	0018      	movs	r0, r3
    7214:	4b35      	ldr	r3, [pc, #212]	; (72ec <_adc_interrupt_handler+0x128>)
    7216:	4798      	blx	r3
    7218:	1e03      	subs	r3, r0, #0
    721a:	d1f9      	bne.n	7210 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    721c:	68fb      	ldr	r3, [r7, #12]
    721e:	695b      	ldr	r3, [r3, #20]
    7220:	1c99      	adds	r1, r3, #2
    7222:	68fa      	ldr	r2, [r7, #12]
    7224:	6151      	str	r1, [r2, #20]
    7226:	68fa      	ldr	r2, [r7, #12]
    7228:	6812      	ldr	r2, [r2, #0]
    722a:	8b52      	ldrh	r2, [r2, #26]
    722c:	b292      	uxth	r2, r2
    722e:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    7230:	68fb      	ldr	r3, [r7, #12]
    7232:	8b1b      	ldrh	r3, [r3, #24]
    7234:	b29b      	uxth	r3, r3
    7236:	3b01      	subs	r3, #1
    7238:	b29b      	uxth	r3, r3
    723a:	68fa      	ldr	r2, [r7, #12]
    723c:	1c19      	adds	r1, r3, #0
    723e:	8311      	strh	r1, [r2, #24]
    7240:	2b00      	cmp	r3, #0
    7242:	d008      	beq.n	7256 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    7244:	68fb      	ldr	r3, [r7, #12]
    7246:	7f5b      	ldrb	r3, [r3, #29]
    7248:	2b00      	cmp	r3, #0
    724a:	d016      	beq.n	727a <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    724c:	68fb      	ldr	r3, [r7, #12]
    724e:	0018      	movs	r0, r3
    7250:	4b27      	ldr	r3, [pc, #156]	; (72f0 <_adc_interrupt_handler+0x12c>)
    7252:	4798      	blx	r3
    7254:	e011      	b.n	727a <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    7256:	68fb      	ldr	r3, [r7, #12]
    7258:	7f1b      	ldrb	r3, [r3, #28]
    725a:	b2db      	uxtb	r3, r3
    725c:	2b05      	cmp	r3, #5
    725e:	d10c      	bne.n	727a <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    7260:	68fb      	ldr	r3, [r7, #12]
    7262:	2200      	movs	r2, #0
    7264:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    7266:	68fb      	ldr	r3, [r7, #12]
    7268:	2101      	movs	r1, #1
    726a:	0018      	movs	r0, r3
    726c:	4b21      	ldr	r3, [pc, #132]	; (72f4 <_adc_interrupt_handler+0x130>)
    726e:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    7270:	68fb      	ldr	r3, [r7, #12]
    7272:	689b      	ldr	r3, [r3, #8]
    7274:	68fa      	ldr	r2, [r7, #12]
    7276:	0010      	movs	r0, r2
    7278:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    727a:	68bb      	ldr	r3, [r7, #8]
    727c:	2204      	movs	r2, #4
    727e:	4013      	ands	r3, r2
    7280:	d014      	beq.n	72ac <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    7282:	68fb      	ldr	r3, [r7, #12]
    7284:	681b      	ldr	r3, [r3, #0]
    7286:	2204      	movs	r2, #4
    7288:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    728a:	68fb      	ldr	r3, [r7, #12]
    728c:	7edb      	ldrb	r3, [r3, #27]
    728e:	001a      	movs	r2, r3
    7290:	2302      	movs	r3, #2
    7292:	4013      	ands	r3, r2
    7294:	d00a      	beq.n	72ac <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    7296:	68fb      	ldr	r3, [r7, #12]
    7298:	7e9b      	ldrb	r3, [r3, #26]
    729a:	001a      	movs	r2, r3
    729c:	2302      	movs	r3, #2
    729e:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    72a0:	d004      	beq.n	72ac <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    72a2:	68fb      	ldr	r3, [r7, #12]
    72a4:	68db      	ldr	r3, [r3, #12]
    72a6:	68fa      	ldr	r2, [r7, #12]
    72a8:	0010      	movs	r0, r2
    72aa:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    72ac:	68bb      	ldr	r3, [r7, #8]
    72ae:	2202      	movs	r2, #2
    72b0:	4013      	ands	r3, r2
    72b2:	d014      	beq.n	72de <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    72b4:	68fb      	ldr	r3, [r7, #12]
    72b6:	681b      	ldr	r3, [r3, #0]
    72b8:	2202      	movs	r2, #2
    72ba:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    72bc:	68fb      	ldr	r3, [r7, #12]
    72be:	7edb      	ldrb	r3, [r3, #27]
    72c0:	001a      	movs	r2, r3
    72c2:	2304      	movs	r3, #4
    72c4:	4013      	ands	r3, r2
    72c6:	d00a      	beq.n	72de <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    72c8:	68fb      	ldr	r3, [r7, #12]
    72ca:	7e9b      	ldrb	r3, [r3, #26]
    72cc:	001a      	movs	r2, r3
    72ce:	2304      	movs	r3, #4
    72d0:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    72d2:	d004      	beq.n	72de <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    72d4:	68fb      	ldr	r3, [r7, #12]
    72d6:	691b      	ldr	r3, [r3, #16]
    72d8:	68fa      	ldr	r2, [r7, #12]
    72da:	0010      	movs	r0, r2
    72dc:	4798      	blx	r3
		}
	}
}
    72de:	46c0      	nop			; (mov r8, r8)
    72e0:	46bd      	mov	sp, r7
    72e2:	b004      	add	sp, #16
    72e4:	bd80      	pop	{r7, pc}
    72e6:	46c0      	nop			; (mov r8, r8)
    72e8:	2000471c 	.word	0x2000471c
    72ec:	00007131 	.word	0x00007131
    72f0:	00007159 	.word	0x00007159
    72f4:	000071a1 	.word	0x000071a1

000072f8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    72f8:	b580      	push	{r7, lr}
    72fa:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    72fc:	2000      	movs	r0, #0
    72fe:	4b02      	ldr	r3, [pc, #8]	; (7308 <ADC_Handler+0x10>)
    7300:	4798      	blx	r3
}
    7302:	46c0      	nop			; (mov r8, r8)
    7304:	46bd      	mov	sp, r7
    7306:	bd80      	pop	{r7, pc}
    7308:	000071c5 	.word	0x000071c5

0000730c <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    730c:	b580      	push	{r7, lr}
    730e:	b084      	sub	sp, #16
    7310:	af00      	add	r7, sp, #0
    7312:	0002      	movs	r2, r0
    7314:	1dfb      	adds	r3, r7, #7
    7316:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    7318:	230f      	movs	r3, #15
    731a:	18fb      	adds	r3, r7, r3
    731c:	1dfa      	adds	r2, r7, #7
    731e:	7812      	ldrb	r2, [r2, #0]
    7320:	0952      	lsrs	r2, r2, #5
    7322:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    7324:	230f      	movs	r3, #15
    7326:	18fb      	adds	r3, r7, r3
    7328:	781b      	ldrb	r3, [r3, #0]
    732a:	2b00      	cmp	r3, #0
    732c:	d10c      	bne.n	7348 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    732e:	4b09      	ldr	r3, [pc, #36]	; (7354 <_extint_get_eic_from_channel+0x48>)
    7330:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    7332:	230f      	movs	r3, #15
    7334:	18fb      	adds	r3, r7, r3
    7336:	781b      	ldrb	r3, [r3, #0]
    7338:	009b      	lsls	r3, r3, #2
    733a:	2210      	movs	r2, #16
    733c:	4694      	mov	ip, r2
    733e:	44bc      	add	ip, r7
    7340:	4463      	add	r3, ip
    7342:	3b08      	subs	r3, #8
    7344:	681b      	ldr	r3, [r3, #0]
    7346:	e000      	b.n	734a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    7348:	2300      	movs	r3, #0
	}
}
    734a:	0018      	movs	r0, r3
    734c:	46bd      	mov	sp, r7
    734e:	b004      	add	sp, #16
    7350:	bd80      	pop	{r7, pc}
    7352:	46c0      	nop			; (mov r8, r8)
    7354:	40001800 	.word	0x40001800

00007358 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    7358:	b580      	push	{r7, lr}
    735a:	b084      	sub	sp, #16
    735c:	af00      	add	r7, sp, #0
    735e:	0002      	movs	r2, r0
    7360:	1dfb      	adds	r3, r7, #7
    7362:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    7364:	1dfb      	adds	r3, r7, #7
    7366:	781b      	ldrb	r3, [r3, #0]
    7368:	0018      	movs	r0, r3
    736a:	4b0b      	ldr	r3, [pc, #44]	; (7398 <extint_chan_is_detected+0x40>)
    736c:	4798      	blx	r3
    736e:	0003      	movs	r3, r0
    7370:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    7372:	1dfb      	adds	r3, r7, #7
    7374:	781b      	ldrb	r3, [r3, #0]
    7376:	221f      	movs	r2, #31
    7378:	4013      	ands	r3, r2
    737a:	2201      	movs	r2, #1
    737c:	409a      	lsls	r2, r3
    737e:	0013      	movs	r3, r2
    7380:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    7382:	68fb      	ldr	r3, [r7, #12]
    7384:	691b      	ldr	r3, [r3, #16]
    7386:	68ba      	ldr	r2, [r7, #8]
    7388:	4013      	ands	r3, r2
    738a:	1e5a      	subs	r2, r3, #1
    738c:	4193      	sbcs	r3, r2
    738e:	b2db      	uxtb	r3, r3
}
    7390:	0018      	movs	r0, r3
    7392:	46bd      	mov	sp, r7
    7394:	b004      	add	sp, #16
    7396:	bd80      	pop	{r7, pc}
    7398:	0000730d 	.word	0x0000730d

0000739c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    739c:	b580      	push	{r7, lr}
    739e:	b084      	sub	sp, #16
    73a0:	af00      	add	r7, sp, #0
    73a2:	0002      	movs	r2, r0
    73a4:	1dfb      	adds	r3, r7, #7
    73a6:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    73a8:	1dfb      	adds	r3, r7, #7
    73aa:	781b      	ldrb	r3, [r3, #0]
    73ac:	0018      	movs	r0, r3
    73ae:	4b09      	ldr	r3, [pc, #36]	; (73d4 <extint_chan_clear_detected+0x38>)
    73b0:	4798      	blx	r3
    73b2:	0003      	movs	r3, r0
    73b4:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    73b6:	1dfb      	adds	r3, r7, #7
    73b8:	781b      	ldrb	r3, [r3, #0]
    73ba:	221f      	movs	r2, #31
    73bc:	4013      	ands	r3, r2
    73be:	2201      	movs	r2, #1
    73c0:	409a      	lsls	r2, r3
    73c2:	0013      	movs	r3, r2
    73c4:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    73c6:	68fb      	ldr	r3, [r7, #12]
    73c8:	68ba      	ldr	r2, [r7, #8]
    73ca:	611a      	str	r2, [r3, #16]
}
    73cc:	46c0      	nop			; (mov r8, r8)
    73ce:	46bd      	mov	sp, r7
    73d0:	b004      	add	sp, #16
    73d2:	bd80      	pop	{r7, pc}
    73d4:	0000730d 	.word	0x0000730d

000073d8 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    73d8:	b580      	push	{r7, lr}
    73da:	b082      	sub	sp, #8
    73dc:	af00      	add	r7, sp, #0
    73de:	6078      	str	r0, [r7, #4]
    73e0:	0008      	movs	r0, r1
    73e2:	0011      	movs	r1, r2
    73e4:	1cfb      	adds	r3, r7, #3
    73e6:	1c02      	adds	r2, r0, #0
    73e8:	701a      	strb	r2, [r3, #0]
    73ea:	1cbb      	adds	r3, r7, #2
    73ec:	1c0a      	adds	r2, r1, #0
    73ee:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    73f0:	1cbb      	adds	r3, r7, #2
    73f2:	781b      	ldrb	r3, [r3, #0]
    73f4:	2b00      	cmp	r3, #0
    73f6:	d001      	beq.n	73fc <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    73f8:	2317      	movs	r3, #23
    73fa:	e019      	b.n	7430 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    73fc:	1cfb      	adds	r3, r7, #3
    73fe:	781a      	ldrb	r2, [r3, #0]
    7400:	4b0d      	ldr	r3, [pc, #52]	; (7438 <extint_register_callback+0x60>)
    7402:	0092      	lsls	r2, r2, #2
    7404:	58d3      	ldr	r3, [r2, r3]
    7406:	2b00      	cmp	r3, #0
    7408:	d107      	bne.n	741a <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    740a:	1cfb      	adds	r3, r7, #3
    740c:	781a      	ldrb	r2, [r3, #0]
    740e:	4b0a      	ldr	r3, [pc, #40]	; (7438 <extint_register_callback+0x60>)
    7410:	0092      	lsls	r2, r2, #2
    7412:	6879      	ldr	r1, [r7, #4]
    7414:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    7416:	2300      	movs	r3, #0
    7418:	e00a      	b.n	7430 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    741a:	1cfb      	adds	r3, r7, #3
    741c:	781a      	ldrb	r2, [r3, #0]
    741e:	4b06      	ldr	r3, [pc, #24]	; (7438 <extint_register_callback+0x60>)
    7420:	0092      	lsls	r2, r2, #2
    7422:	58d2      	ldr	r2, [r2, r3]
    7424:	687b      	ldr	r3, [r7, #4]
    7426:	429a      	cmp	r2, r3
    7428:	d101      	bne.n	742e <extint_register_callback+0x56>
		return STATUS_OK;
    742a:	2300      	movs	r3, #0
    742c:	e000      	b.n	7430 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    742e:	231d      	movs	r3, #29
}
    7430:	0018      	movs	r0, r3
    7432:	46bd      	mov	sp, r7
    7434:	b002      	add	sp, #8
    7436:	bd80      	pop	{r7, pc}
    7438:	20004724 	.word	0x20004724

0000743c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    743c:	b580      	push	{r7, lr}
    743e:	b084      	sub	sp, #16
    7440:	af00      	add	r7, sp, #0
    7442:	0002      	movs	r2, r0
    7444:	1dfb      	adds	r3, r7, #7
    7446:	701a      	strb	r2, [r3, #0]
    7448:	1dbb      	adds	r3, r7, #6
    744a:	1c0a      	adds	r2, r1, #0
    744c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    744e:	1dbb      	adds	r3, r7, #6
    7450:	781b      	ldrb	r3, [r3, #0]
    7452:	2b00      	cmp	r3, #0
    7454:	d10e      	bne.n	7474 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    7456:	1dfb      	adds	r3, r7, #7
    7458:	781b      	ldrb	r3, [r3, #0]
    745a:	0018      	movs	r0, r3
    745c:	4b08      	ldr	r3, [pc, #32]	; (7480 <extint_chan_enable_callback+0x44>)
    745e:	4798      	blx	r3
    7460:	0003      	movs	r3, r0
    7462:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    7464:	1dfb      	adds	r3, r7, #7
    7466:	781b      	ldrb	r3, [r3, #0]
    7468:	2201      	movs	r2, #1
    746a:	409a      	lsls	r2, r3
    746c:	68fb      	ldr	r3, [r7, #12]
    746e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    7470:	2300      	movs	r3, #0
    7472:	e000      	b.n	7476 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7474:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    7476:	0018      	movs	r0, r3
    7478:	46bd      	mov	sp, r7
    747a:	b004      	add	sp, #16
    747c:	bd80      	pop	{r7, pc}
    747e:	46c0      	nop			; (mov r8, r8)
    7480:	0000730d 	.word	0x0000730d

00007484 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    7484:	b580      	push	{r7, lr}
    7486:	b084      	sub	sp, #16
    7488:	af00      	add	r7, sp, #0
    748a:	0002      	movs	r2, r0
    748c:	1dfb      	adds	r3, r7, #7
    748e:	701a      	strb	r2, [r3, #0]
    7490:	1dbb      	adds	r3, r7, #6
    7492:	1c0a      	adds	r2, r1, #0
    7494:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7496:	1dbb      	adds	r3, r7, #6
    7498:	781b      	ldrb	r3, [r3, #0]
    749a:	2b00      	cmp	r3, #0
    749c:	d10e      	bne.n	74bc <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    749e:	1dfb      	adds	r3, r7, #7
    74a0:	781b      	ldrb	r3, [r3, #0]
    74a2:	0018      	movs	r0, r3
    74a4:	4b08      	ldr	r3, [pc, #32]	; (74c8 <extint_chan_disable_callback+0x44>)
    74a6:	4798      	blx	r3
    74a8:	0003      	movs	r3, r0
    74aa:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    74ac:	1dfb      	adds	r3, r7, #7
    74ae:	781b      	ldrb	r3, [r3, #0]
    74b0:	2201      	movs	r2, #1
    74b2:	409a      	lsls	r2, r3
    74b4:	68fb      	ldr	r3, [r7, #12]
    74b6:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    74b8:	2300      	movs	r3, #0
    74ba:	e000      	b.n	74be <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    74bc:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    74be:	0018      	movs	r0, r3
    74c0:	46bd      	mov	sp, r7
    74c2:	b004      	add	sp, #16
    74c4:	bd80      	pop	{r7, pc}
    74c6:	46c0      	nop			; (mov r8, r8)
    74c8:	0000730d 	.word	0x0000730d

000074cc <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    74cc:	b580      	push	{r7, lr}
    74ce:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    74d0:	4b15      	ldr	r3, [pc, #84]	; (7528 <EIC_Handler+0x5c>)
    74d2:	2200      	movs	r2, #0
    74d4:	701a      	strb	r2, [r3, #0]
    74d6:	e020      	b.n	751a <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    74d8:	4b13      	ldr	r3, [pc, #76]	; (7528 <EIC_Handler+0x5c>)
    74da:	781b      	ldrb	r3, [r3, #0]
    74dc:	0018      	movs	r0, r3
    74de:	4b13      	ldr	r3, [pc, #76]	; (752c <EIC_Handler+0x60>)
    74e0:	4798      	blx	r3
    74e2:	1e03      	subs	r3, r0, #0
    74e4:	d013      	beq.n	750e <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    74e6:	4b10      	ldr	r3, [pc, #64]	; (7528 <EIC_Handler+0x5c>)
    74e8:	781b      	ldrb	r3, [r3, #0]
    74ea:	0018      	movs	r0, r3
    74ec:	4b10      	ldr	r3, [pc, #64]	; (7530 <EIC_Handler+0x64>)
    74ee:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    74f0:	4b0d      	ldr	r3, [pc, #52]	; (7528 <EIC_Handler+0x5c>)
    74f2:	781b      	ldrb	r3, [r3, #0]
    74f4:	001a      	movs	r2, r3
    74f6:	4b0f      	ldr	r3, [pc, #60]	; (7534 <EIC_Handler+0x68>)
    74f8:	0092      	lsls	r2, r2, #2
    74fa:	58d3      	ldr	r3, [r2, r3]
    74fc:	2b00      	cmp	r3, #0
    74fe:	d006      	beq.n	750e <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    7500:	4b09      	ldr	r3, [pc, #36]	; (7528 <EIC_Handler+0x5c>)
    7502:	781b      	ldrb	r3, [r3, #0]
    7504:	001a      	movs	r2, r3
    7506:	4b0b      	ldr	r3, [pc, #44]	; (7534 <EIC_Handler+0x68>)
    7508:	0092      	lsls	r2, r2, #2
    750a:	58d3      	ldr	r3, [r2, r3]
    750c:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    750e:	4b06      	ldr	r3, [pc, #24]	; (7528 <EIC_Handler+0x5c>)
    7510:	781b      	ldrb	r3, [r3, #0]
    7512:	3301      	adds	r3, #1
    7514:	b2da      	uxtb	r2, r3
    7516:	4b04      	ldr	r3, [pc, #16]	; (7528 <EIC_Handler+0x5c>)
    7518:	701a      	strb	r2, [r3, #0]
    751a:	4b03      	ldr	r3, [pc, #12]	; (7528 <EIC_Handler+0x5c>)
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	2b0f      	cmp	r3, #15
    7520:	d9da      	bls.n	74d8 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    7522:	46c0      	nop			; (mov r8, r8)
    7524:	46bd      	mov	sp, r7
    7526:	bd80      	pop	{r7, pc}
    7528:	20004720 	.word	0x20004720
    752c:	00007359 	.word	0x00007359
    7530:	0000739d 	.word	0x0000739d
    7534:	20004724 	.word	0x20004724

00007538 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    7538:	b580      	push	{r7, lr}
    753a:	b082      	sub	sp, #8
    753c:	af00      	add	r7, sp, #0
    753e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    7540:	687b      	ldr	r3, [r7, #4]
    7542:	2200      	movs	r2, #0
    7544:	701a      	strb	r2, [r3, #0]
}
    7546:	46c0      	nop			; (mov r8, r8)
    7548:	46bd      	mov	sp, r7
    754a:	b002      	add	sp, #8
    754c:	bd80      	pop	{r7, pc}
    754e:	46c0      	nop			; (mov r8, r8)

00007550 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    7550:	b580      	push	{r7, lr}
    7552:	b082      	sub	sp, #8
    7554:	af00      	add	r7, sp, #0
    7556:	0002      	movs	r2, r0
    7558:	6039      	str	r1, [r7, #0]
    755a:	1dfb      	adds	r3, r7, #7
    755c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    755e:	1dfb      	adds	r3, r7, #7
    7560:	781b      	ldrb	r3, [r3, #0]
    7562:	2b01      	cmp	r3, #1
    7564:	d00a      	beq.n	757c <system_apb_clock_set_mask+0x2c>
    7566:	2b02      	cmp	r3, #2
    7568:	d00f      	beq.n	758a <system_apb_clock_set_mask+0x3a>
    756a:	2b00      	cmp	r3, #0
    756c:	d114      	bne.n	7598 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    756e:	4b0e      	ldr	r3, [pc, #56]	; (75a8 <system_apb_clock_set_mask+0x58>)
    7570:	4a0d      	ldr	r2, [pc, #52]	; (75a8 <system_apb_clock_set_mask+0x58>)
    7572:	6991      	ldr	r1, [r2, #24]
    7574:	683a      	ldr	r2, [r7, #0]
    7576:	430a      	orrs	r2, r1
    7578:	619a      	str	r2, [r3, #24]
			break;
    757a:	e00f      	b.n	759c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    757c:	4b0a      	ldr	r3, [pc, #40]	; (75a8 <system_apb_clock_set_mask+0x58>)
    757e:	4a0a      	ldr	r2, [pc, #40]	; (75a8 <system_apb_clock_set_mask+0x58>)
    7580:	69d1      	ldr	r1, [r2, #28]
    7582:	683a      	ldr	r2, [r7, #0]
    7584:	430a      	orrs	r2, r1
    7586:	61da      	str	r2, [r3, #28]
			break;
    7588:	e008      	b.n	759c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    758a:	4b07      	ldr	r3, [pc, #28]	; (75a8 <system_apb_clock_set_mask+0x58>)
    758c:	4a06      	ldr	r2, [pc, #24]	; (75a8 <system_apb_clock_set_mask+0x58>)
    758e:	6a11      	ldr	r1, [r2, #32]
    7590:	683a      	ldr	r2, [r7, #0]
    7592:	430a      	orrs	r2, r1
    7594:	621a      	str	r2, [r3, #32]
			break;
    7596:	e001      	b.n	759c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    7598:	2317      	movs	r3, #23
    759a:	e000      	b.n	759e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    759c:	2300      	movs	r3, #0
}
    759e:	0018      	movs	r0, r3
    75a0:	46bd      	mov	sp, r7
    75a2:	b002      	add	sp, #8
    75a4:	bd80      	pop	{r7, pc}
    75a6:	46c0      	nop			; (mov r8, r8)
    75a8:	40000400 	.word	0x40000400

000075ac <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    75ac:	b580      	push	{r7, lr}
    75ae:	b082      	sub	sp, #8
    75b0:	af00      	add	r7, sp, #0
    75b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    75b4:	687b      	ldr	r3, [r7, #4]
    75b6:	2280      	movs	r2, #128	; 0x80
    75b8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    75ba:	687b      	ldr	r3, [r7, #4]
    75bc:	2200      	movs	r2, #0
    75be:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    75c0:	687b      	ldr	r3, [r7, #4]
    75c2:	2201      	movs	r2, #1
    75c4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    75c6:	687b      	ldr	r3, [r7, #4]
    75c8:	2200      	movs	r2, #0
    75ca:	70da      	strb	r2, [r3, #3]
}
    75cc:	46c0      	nop			; (mov r8, r8)
    75ce:	46bd      	mov	sp, r7
    75d0:	b002      	add	sp, #8
    75d2:	bd80      	pop	{r7, pc}

000075d4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    75d4:	b580      	push	{r7, lr}
    75d6:	b082      	sub	sp, #8
    75d8:	af00      	add	r7, sp, #0
    75da:	0002      	movs	r2, r0
    75dc:	1dfb      	adds	r3, r7, #7
    75de:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    75e0:	4b06      	ldr	r3, [pc, #24]	; (75fc <system_interrupt_enable+0x28>)
    75e2:	1dfa      	adds	r2, r7, #7
    75e4:	7812      	ldrb	r2, [r2, #0]
    75e6:	0011      	movs	r1, r2
    75e8:	221f      	movs	r2, #31
    75ea:	400a      	ands	r2, r1
    75ec:	2101      	movs	r1, #1
    75ee:	4091      	lsls	r1, r2
    75f0:	000a      	movs	r2, r1
    75f2:	601a      	str	r2, [r3, #0]
}
    75f4:	46c0      	nop			; (mov r8, r8)
    75f6:	46bd      	mov	sp, r7
    75f8:	b002      	add	sp, #8
    75fa:	bd80      	pop	{r7, pc}
    75fc:	e000e100 	.word	0xe000e100

00007600 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    7600:	b580      	push	{r7, lr}
    7602:	b084      	sub	sp, #16
    7604:	af00      	add	r7, sp, #0
    7606:	0002      	movs	r2, r0
    7608:	1dfb      	adds	r3, r7, #7
    760a:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    760c:	230f      	movs	r3, #15
    760e:	18fb      	adds	r3, r7, r3
    7610:	1dfa      	adds	r2, r7, #7
    7612:	7812      	ldrb	r2, [r2, #0]
    7614:	0952      	lsrs	r2, r2, #5
    7616:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    7618:	230f      	movs	r3, #15
    761a:	18fb      	adds	r3, r7, r3
    761c:	781b      	ldrb	r3, [r3, #0]
    761e:	2b00      	cmp	r3, #0
    7620:	d10c      	bne.n	763c <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    7622:	4b09      	ldr	r3, [pc, #36]	; (7648 <_extint_get_eic_from_channel+0x48>)
    7624:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    7626:	230f      	movs	r3, #15
    7628:	18fb      	adds	r3, r7, r3
    762a:	781b      	ldrb	r3, [r3, #0]
    762c:	009b      	lsls	r3, r3, #2
    762e:	2210      	movs	r2, #16
    7630:	4694      	mov	ip, r2
    7632:	44bc      	add	ip, r7
    7634:	4463      	add	r3, ip
    7636:	3b08      	subs	r3, #8
    7638:	681b      	ldr	r3, [r3, #0]
    763a:	e000      	b.n	763e <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    763c:	2300      	movs	r3, #0
	}
}
    763e:	0018      	movs	r0, r3
    7640:	46bd      	mov	sp, r7
    7642:	b004      	add	sp, #16
    7644:	bd80      	pop	{r7, pc}
    7646:	46c0      	nop			; (mov r8, r8)
    7648:	40001800 	.word	0x40001800

0000764c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    764c:	b580      	push	{r7, lr}
    764e:	b082      	sub	sp, #8
    7650:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    7652:	4b0f      	ldr	r3, [pc, #60]	; (7690 <extint_is_syncing+0x44>)
    7654:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7656:	2300      	movs	r3, #0
    7658:	607b      	str	r3, [r7, #4]
    765a:	e011      	b.n	7680 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    765c:	687b      	ldr	r3, [r7, #4]
    765e:	009b      	lsls	r3, r3, #2
    7660:	2208      	movs	r2, #8
    7662:	4694      	mov	ip, r2
    7664:	44bc      	add	ip, r7
    7666:	4463      	add	r3, ip
    7668:	3b08      	subs	r3, #8
    766a:	681b      	ldr	r3, [r3, #0]
    766c:	785b      	ldrb	r3, [r3, #1]
    766e:	b2db      	uxtb	r3, r3
    7670:	b25b      	sxtb	r3, r3
    7672:	2b00      	cmp	r3, #0
    7674:	da01      	bge.n	767a <extint_is_syncing+0x2e>
			return true;
    7676:	2301      	movs	r3, #1
    7678:	e006      	b.n	7688 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    767a:	687b      	ldr	r3, [r7, #4]
    767c:	3301      	adds	r3, #1
    767e:	607b      	str	r3, [r7, #4]
    7680:	687b      	ldr	r3, [r7, #4]
    7682:	2b00      	cmp	r3, #0
    7684:	d0ea      	beq.n	765c <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    7686:	2300      	movs	r3, #0
}
    7688:	0018      	movs	r0, r3
    768a:	46bd      	mov	sp, r7
    768c:	b002      	add	sp, #8
    768e:	bd80      	pop	{r7, pc}
    7690:	40001800 	.word	0x40001800

00007694 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    7694:	b580      	push	{r7, lr}
    7696:	b084      	sub	sp, #16
    7698:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    769a:	4b2d      	ldr	r3, [pc, #180]	; (7750 <_system_extint_init+0xbc>)
    769c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    769e:	2140      	movs	r1, #64	; 0x40
    76a0:	2000      	movs	r0, #0
    76a2:	4b2c      	ldr	r3, [pc, #176]	; (7754 <_system_extint_init+0xc0>)
    76a4:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    76a6:	003b      	movs	r3, r7
    76a8:	0018      	movs	r0, r3
    76aa:	4b2b      	ldr	r3, [pc, #172]	; (7758 <_system_extint_init+0xc4>)
    76ac:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    76ae:	003b      	movs	r3, r7
    76b0:	2200      	movs	r2, #0
    76b2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    76b4:	003b      	movs	r3, r7
    76b6:	0019      	movs	r1, r3
    76b8:	2005      	movs	r0, #5
    76ba:	4b28      	ldr	r3, [pc, #160]	; (775c <_system_extint_init+0xc8>)
    76bc:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    76be:	2005      	movs	r0, #5
    76c0:	4b27      	ldr	r3, [pc, #156]	; (7760 <_system_extint_init+0xcc>)
    76c2:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    76c4:	2300      	movs	r3, #0
    76c6:	60fb      	str	r3, [r7, #12]
    76c8:	e018      	b.n	76fc <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    76ca:	68fb      	ldr	r3, [r7, #12]
    76cc:	009b      	lsls	r3, r3, #2
    76ce:	2210      	movs	r2, #16
    76d0:	4694      	mov	ip, r2
    76d2:	44bc      	add	ip, r7
    76d4:	4463      	add	r3, ip
    76d6:	3b0c      	subs	r3, #12
    76d8:	681a      	ldr	r2, [r3, #0]
    76da:	68fb      	ldr	r3, [r7, #12]
    76dc:	009b      	lsls	r3, r3, #2
    76de:	2110      	movs	r1, #16
    76e0:	468c      	mov	ip, r1
    76e2:	44bc      	add	ip, r7
    76e4:	4463      	add	r3, ip
    76e6:	3b0c      	subs	r3, #12
    76e8:	681b      	ldr	r3, [r3, #0]
    76ea:	781b      	ldrb	r3, [r3, #0]
    76ec:	b2db      	uxtb	r3, r3
    76ee:	2101      	movs	r1, #1
    76f0:	430b      	orrs	r3, r1
    76f2:	b2db      	uxtb	r3, r3
    76f4:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    76f6:	68fb      	ldr	r3, [r7, #12]
    76f8:	3301      	adds	r3, #1
    76fa:	60fb      	str	r3, [r7, #12]
    76fc:	68fb      	ldr	r3, [r7, #12]
    76fe:	2b00      	cmp	r3, #0
    7700:	d0e3      	beq.n	76ca <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    7702:	46c0      	nop			; (mov r8, r8)
    7704:	4b17      	ldr	r3, [pc, #92]	; (7764 <_system_extint_init+0xd0>)
    7706:	4798      	blx	r3
    7708:	1e03      	subs	r3, r0, #0
    770a:	d1fb      	bne.n	7704 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    770c:	230b      	movs	r3, #11
    770e:	18fb      	adds	r3, r7, r3
    7710:	2200      	movs	r2, #0
    7712:	701a      	strb	r2, [r3, #0]
    7714:	e00d      	b.n	7732 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    7716:	230b      	movs	r3, #11
    7718:	18fb      	adds	r3, r7, r3
    771a:	781a      	ldrb	r2, [r3, #0]
    771c:	4b12      	ldr	r3, [pc, #72]	; (7768 <_system_extint_init+0xd4>)
    771e:	0092      	lsls	r2, r2, #2
    7720:	2100      	movs	r1, #0
    7722:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    7724:	230b      	movs	r3, #11
    7726:	18fb      	adds	r3, r7, r3
    7728:	781a      	ldrb	r2, [r3, #0]
    772a:	230b      	movs	r3, #11
    772c:	18fb      	adds	r3, r7, r3
    772e:	3201      	adds	r2, #1
    7730:	701a      	strb	r2, [r3, #0]
    7732:	230b      	movs	r3, #11
    7734:	18fb      	adds	r3, r7, r3
    7736:	781b      	ldrb	r3, [r3, #0]
    7738:	2b0f      	cmp	r3, #15
    773a:	d9ec      	bls.n	7716 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    773c:	2004      	movs	r0, #4
    773e:	4b0b      	ldr	r3, [pc, #44]	; (776c <_system_extint_init+0xd8>)
    7740:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    7742:	4b0b      	ldr	r3, [pc, #44]	; (7770 <_system_extint_init+0xdc>)
    7744:	4798      	blx	r3
}
    7746:	46c0      	nop			; (mov r8, r8)
    7748:	46bd      	mov	sp, r7
    774a:	b004      	add	sp, #16
    774c:	bd80      	pop	{r7, pc}
    774e:	46c0      	nop			; (mov r8, r8)
    7750:	40001800 	.word	0x40001800
    7754:	00007551 	.word	0x00007551
    7758:	00007539 	.word	0x00007539
    775c:	0000a5cd 	.word	0x0000a5cd
    7760:	0000a611 	.word	0x0000a611
    7764:	0000764d 	.word	0x0000764d
    7768:	20004724 	.word	0x20004724
    776c:	000075d5 	.word	0x000075d5
    7770:	00007775 	.word	0x00007775

00007774 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    7774:	b580      	push	{r7, lr}
    7776:	b082      	sub	sp, #8
    7778:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    777a:	4b15      	ldr	r3, [pc, #84]	; (77d0 <_extint_enable+0x5c>)
    777c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    777e:	2300      	movs	r3, #0
    7780:	607b      	str	r3, [r7, #4]
    7782:	e018      	b.n	77b6 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    7784:	687b      	ldr	r3, [r7, #4]
    7786:	009b      	lsls	r3, r3, #2
    7788:	2208      	movs	r2, #8
    778a:	4694      	mov	ip, r2
    778c:	44bc      	add	ip, r7
    778e:	4463      	add	r3, ip
    7790:	3b08      	subs	r3, #8
    7792:	681a      	ldr	r2, [r3, #0]
    7794:	687b      	ldr	r3, [r7, #4]
    7796:	009b      	lsls	r3, r3, #2
    7798:	2108      	movs	r1, #8
    779a:	468c      	mov	ip, r1
    779c:	44bc      	add	ip, r7
    779e:	4463      	add	r3, ip
    77a0:	3b08      	subs	r3, #8
    77a2:	681b      	ldr	r3, [r3, #0]
    77a4:	781b      	ldrb	r3, [r3, #0]
    77a6:	b2db      	uxtb	r3, r3
    77a8:	2102      	movs	r1, #2
    77aa:	430b      	orrs	r3, r1
    77ac:	b2db      	uxtb	r3, r3
    77ae:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    77b0:	687b      	ldr	r3, [r7, #4]
    77b2:	3301      	adds	r3, #1
    77b4:	607b      	str	r3, [r7, #4]
    77b6:	687b      	ldr	r3, [r7, #4]
    77b8:	2b00      	cmp	r3, #0
    77ba:	d0e3      	beq.n	7784 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    77bc:	46c0      	nop			; (mov r8, r8)
    77be:	4b05      	ldr	r3, [pc, #20]	; (77d4 <_extint_enable+0x60>)
    77c0:	4798      	blx	r3
    77c2:	1e03      	subs	r3, r0, #0
    77c4:	d1fb      	bne.n	77be <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    77c6:	46c0      	nop			; (mov r8, r8)
    77c8:	46bd      	mov	sp, r7
    77ca:	b002      	add	sp, #8
    77cc:	bd80      	pop	{r7, pc}
    77ce:	46c0      	nop			; (mov r8, r8)
    77d0:	40001800 	.word	0x40001800
    77d4:	0000764d 	.word	0x0000764d

000077d8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    77d8:	b580      	push	{r7, lr}
    77da:	b082      	sub	sp, #8
    77dc:	af00      	add	r7, sp, #0
    77de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    77e0:	687b      	ldr	r3, [r7, #4]
    77e2:	2200      	movs	r2, #0
    77e4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    77e6:	687b      	ldr	r3, [r7, #4]
    77e8:	2200      	movs	r2, #0
    77ea:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    77ec:	687b      	ldr	r3, [r7, #4]
    77ee:	2201      	movs	r2, #1
    77f0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    77f2:	687b      	ldr	r3, [r7, #4]
    77f4:	2201      	movs	r2, #1
    77f6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    77f8:	687b      	ldr	r3, [r7, #4]
    77fa:	2200      	movs	r2, #0
    77fc:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    77fe:	687b      	ldr	r3, [r7, #4]
    7800:	2202      	movs	r2, #2
    7802:	72da      	strb	r2, [r3, #11]
}
    7804:	46c0      	nop			; (mov r8, r8)
    7806:	46bd      	mov	sp, r7
    7808:	b002      	add	sp, #8
    780a:	bd80      	pop	{r7, pc}

0000780c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    780c:	b580      	push	{r7, lr}
    780e:	b086      	sub	sp, #24
    7810:	af00      	add	r7, sp, #0
    7812:	0002      	movs	r2, r0
    7814:	6039      	str	r1, [r7, #0]
    7816:	1dfb      	adds	r3, r7, #7
    7818:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    781a:	2308      	movs	r3, #8
    781c:	18fb      	adds	r3, r7, r3
    781e:	0018      	movs	r0, r3
    7820:	4b36      	ldr	r3, [pc, #216]	; (78fc <extint_chan_set_config+0xf0>)
    7822:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    7824:	683b      	ldr	r3, [r7, #0]
    7826:	685b      	ldr	r3, [r3, #4]
    7828:	b2da      	uxtb	r2, r3
    782a:	2308      	movs	r3, #8
    782c:	18fb      	adds	r3, r7, r3
    782e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7830:	2308      	movs	r3, #8
    7832:	18fb      	adds	r3, r7, r3
    7834:	2200      	movs	r2, #0
    7836:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    7838:	683b      	ldr	r3, [r7, #0]
    783a:	7a1a      	ldrb	r2, [r3, #8]
    783c:	2308      	movs	r3, #8
    783e:	18fb      	adds	r3, r7, r3
    7840:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    7842:	683b      	ldr	r3, [r7, #0]
    7844:	681b      	ldr	r3, [r3, #0]
    7846:	b2db      	uxtb	r3, r3
    7848:	2208      	movs	r2, #8
    784a:	18ba      	adds	r2, r7, r2
    784c:	0011      	movs	r1, r2
    784e:	0018      	movs	r0, r3
    7850:	4b2b      	ldr	r3, [pc, #172]	; (7900 <extint_chan_set_config+0xf4>)
    7852:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    7854:	1dfb      	adds	r3, r7, #7
    7856:	781b      	ldrb	r3, [r3, #0]
    7858:	0018      	movs	r0, r3
    785a:	4b2a      	ldr	r3, [pc, #168]	; (7904 <extint_chan_set_config+0xf8>)
    785c:	4798      	blx	r3
    785e:	0003      	movs	r3, r0
    7860:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    7862:	1dfb      	adds	r3, r7, #7
    7864:	781b      	ldrb	r3, [r3, #0]
    7866:	2207      	movs	r2, #7
    7868:	4013      	ands	r3, r2
    786a:	009b      	lsls	r3, r3, #2
    786c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    786e:	683b      	ldr	r3, [r7, #0]
    7870:	7adb      	ldrb	r3, [r3, #11]
    7872:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    7874:	683b      	ldr	r3, [r7, #0]
    7876:	7a9b      	ldrb	r3, [r3, #10]
    7878:	2b00      	cmp	r3, #0
    787a:	d003      	beq.n	7884 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    787c:	697b      	ldr	r3, [r7, #20]
    787e:	2208      	movs	r2, #8
    7880:	4313      	orrs	r3, r2
    7882:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    7884:	1dfb      	adds	r3, r7, #7
    7886:	781b      	ldrb	r3, [r3, #0]
    7888:	08db      	lsrs	r3, r3, #3
    788a:	b2db      	uxtb	r3, r3
    788c:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    788e:	1dfb      	adds	r3, r7, #7
    7890:	781b      	ldrb	r3, [r3, #0]
    7892:	08db      	lsrs	r3, r3, #3
    7894:	b2db      	uxtb	r3, r3
    7896:	001a      	movs	r2, r3
    7898:	693b      	ldr	r3, [r7, #16]
    789a:	3206      	adds	r2, #6
    789c:	0092      	lsls	r2, r2, #2
    789e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    78a0:	210f      	movs	r1, #15
    78a2:	68fa      	ldr	r2, [r7, #12]
    78a4:	4091      	lsls	r1, r2
    78a6:	000a      	movs	r2, r1
    78a8:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    78aa:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    78ac:	6979      	ldr	r1, [r7, #20]
    78ae:	68fb      	ldr	r3, [r7, #12]
    78b0:	4099      	lsls	r1, r3
    78b2:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    78b4:	431a      	orrs	r2, r3
    78b6:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    78b8:	693b      	ldr	r3, [r7, #16]
    78ba:	1d82      	adds	r2, r0, #6
    78bc:	0092      	lsls	r2, r2, #2
    78be:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    78c0:	683b      	ldr	r3, [r7, #0]
    78c2:	7a5b      	ldrb	r3, [r3, #9]
    78c4:	2b00      	cmp	r3, #0
    78c6:	d00a      	beq.n	78de <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    78c8:	693b      	ldr	r3, [r7, #16]
    78ca:	695a      	ldr	r2, [r3, #20]
    78cc:	1dfb      	adds	r3, r7, #7
    78ce:	781b      	ldrb	r3, [r3, #0]
    78d0:	2101      	movs	r1, #1
    78d2:	4099      	lsls	r1, r3
    78d4:	000b      	movs	r3, r1
    78d6:	431a      	orrs	r2, r3
    78d8:	693b      	ldr	r3, [r7, #16]
    78da:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    78dc:	e00a      	b.n	78f4 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    78de:	693b      	ldr	r3, [r7, #16]
    78e0:	695b      	ldr	r3, [r3, #20]
    78e2:	1dfa      	adds	r2, r7, #7
    78e4:	7812      	ldrb	r2, [r2, #0]
    78e6:	2101      	movs	r1, #1
    78e8:	4091      	lsls	r1, r2
    78ea:	000a      	movs	r2, r1
    78ec:	43d2      	mvns	r2, r2
    78ee:	401a      	ands	r2, r3
    78f0:	693b      	ldr	r3, [r7, #16]
    78f2:	615a      	str	r2, [r3, #20]
	}
}
    78f4:	46c0      	nop			; (mov r8, r8)
    78f6:	46bd      	mov	sp, r7
    78f8:	b006      	add	sp, #24
    78fa:	bd80      	pop	{r7, pc}
    78fc:	000075ad 	.word	0x000075ad
    7900:	0000a8b9 	.word	0x0000a8b9
    7904:	00007601 	.word	0x00007601

00007908 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    7908:	b580      	push	{r7, lr}
    790a:	b082      	sub	sp, #8
    790c:	af00      	add	r7, sp, #0
    790e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7910:	687b      	ldr	r3, [r7, #4]
    7912:	2280      	movs	r2, #128	; 0x80
    7914:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7916:	687b      	ldr	r3, [r7, #4]
    7918:	2200      	movs	r2, #0
    791a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	2201      	movs	r2, #1
    7920:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7922:	687b      	ldr	r3, [r7, #4]
    7924:	2200      	movs	r2, #0
    7926:	70da      	strb	r2, [r3, #3]
}
    7928:	46c0      	nop			; (mov r8, r8)
    792a:	46bd      	mov	sp, r7
    792c:	b002      	add	sp, #8
    792e:	bd80      	pop	{r7, pc}

00007930 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7930:	b580      	push	{r7, lr}
    7932:	b084      	sub	sp, #16
    7934:	af00      	add	r7, sp, #0
    7936:	0002      	movs	r2, r0
    7938:	6039      	str	r1, [r7, #0]
    793a:	1dfb      	adds	r3, r7, #7
    793c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    793e:	230c      	movs	r3, #12
    7940:	18fb      	adds	r3, r7, r3
    7942:	0018      	movs	r0, r3
    7944:	4b10      	ldr	r3, [pc, #64]	; (7988 <port_pin_set_config+0x58>)
    7946:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    7948:	230c      	movs	r3, #12
    794a:	18fb      	adds	r3, r7, r3
    794c:	2280      	movs	r2, #128	; 0x80
    794e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7950:	683b      	ldr	r3, [r7, #0]
    7952:	781a      	ldrb	r2, [r3, #0]
    7954:	230c      	movs	r3, #12
    7956:	18fb      	adds	r3, r7, r3
    7958:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    795a:	683b      	ldr	r3, [r7, #0]
    795c:	785a      	ldrb	r2, [r3, #1]
    795e:	230c      	movs	r3, #12
    7960:	18fb      	adds	r3, r7, r3
    7962:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    7964:	683b      	ldr	r3, [r7, #0]
    7966:	789a      	ldrb	r2, [r3, #2]
    7968:	230c      	movs	r3, #12
    796a:	18fb      	adds	r3, r7, r3
    796c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    796e:	230c      	movs	r3, #12
    7970:	18fa      	adds	r2, r7, r3
    7972:	1dfb      	adds	r3, r7, #7
    7974:	781b      	ldrb	r3, [r3, #0]
    7976:	0011      	movs	r1, r2
    7978:	0018      	movs	r0, r3
    797a:	4b04      	ldr	r3, [pc, #16]	; (798c <port_pin_set_config+0x5c>)
    797c:	4798      	blx	r3
}
    797e:	46c0      	nop			; (mov r8, r8)
    7980:	46bd      	mov	sp, r7
    7982:	b004      	add	sp, #16
    7984:	bd80      	pop	{r7, pc}
    7986:	46c0      	nop			; (mov r8, r8)
    7988:	00007909 	.word	0x00007909
    798c:	0000a8b9 	.word	0x0000a8b9

00007990 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    7990:	b580      	push	{r7, lr}
    7992:	b086      	sub	sp, #24
    7994:	af00      	add	r7, sp, #0
    7996:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    7998:	4b28      	ldr	r3, [pc, #160]	; (7a3c <_rtc_interrupt_handler+0xac>)
    799a:	687a      	ldr	r2, [r7, #4]
    799c:	0092      	lsls	r2, r2, #2
    799e:	58d3      	ldr	r3, [r2, r3]
    79a0:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    79a2:	697b      	ldr	r3, [r7, #20]
    79a4:	681b      	ldr	r3, [r3, #0]
    79a6:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    79a8:	230e      	movs	r3, #14
    79aa:	18fb      	adds	r3, r7, r3
    79ac:	697a      	ldr	r2, [r7, #20]
    79ae:	8a52      	ldrh	r2, [r2, #18]
    79b0:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    79b2:	697b      	ldr	r3, [r7, #20]
    79b4:	8a1b      	ldrh	r3, [r3, #16]
    79b6:	b29a      	uxth	r2, r3
    79b8:	230e      	movs	r3, #14
    79ba:	18fb      	adds	r3, r7, r3
    79bc:	210e      	movs	r1, #14
    79be:	1879      	adds	r1, r7, r1
    79c0:	8809      	ldrh	r1, [r1, #0]
    79c2:	400a      	ands	r2, r1
    79c4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    79c6:	693b      	ldr	r3, [r7, #16]
    79c8:	7a1b      	ldrb	r3, [r3, #8]
    79ca:	b2da      	uxtb	r2, r3
    79cc:	230c      	movs	r3, #12
    79ce:	18fb      	adds	r3, r7, r3
    79d0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    79d2:	693b      	ldr	r3, [r7, #16]
    79d4:	79db      	ldrb	r3, [r3, #7]
    79d6:	b2db      	uxtb	r3, r3
    79d8:	b29a      	uxth	r2, r3
    79da:	230c      	movs	r3, #12
    79dc:	18fb      	adds	r3, r7, r3
    79de:	210c      	movs	r1, #12
    79e0:	1879      	adds	r1, r7, r1
    79e2:	8809      	ldrh	r1, [r1, #0]
    79e4:	400a      	ands	r2, r1
    79e6:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    79e8:	230c      	movs	r3, #12
    79ea:	18fb      	adds	r3, r7, r3
    79ec:	881b      	ldrh	r3, [r3, #0]
    79ee:	2280      	movs	r2, #128	; 0x80
    79f0:	4013      	ands	r3, r2
    79f2:	d00c      	beq.n	7a0e <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    79f4:	230e      	movs	r3, #14
    79f6:	18fb      	adds	r3, r7, r3
    79f8:	881b      	ldrh	r3, [r3, #0]
    79fa:	2202      	movs	r2, #2
    79fc:	4013      	ands	r3, r2
    79fe:	d002      	beq.n	7a06 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    7a00:	697b      	ldr	r3, [r7, #20]
    7a02:	68db      	ldr	r3, [r3, #12]
    7a04:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    7a06:	693b      	ldr	r3, [r7, #16]
    7a08:	2280      	movs	r2, #128	; 0x80
    7a0a:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    7a0c:	e011      	b.n	7a32 <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    7a0e:	230c      	movs	r3, #12
    7a10:	18fb      	adds	r3, r7, r3
    7a12:	881b      	ldrh	r3, [r3, #0]
    7a14:	2201      	movs	r2, #1
    7a16:	4013      	ands	r3, r2
    7a18:	d00b      	beq.n	7a32 <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    7a1a:	230e      	movs	r3, #14
    7a1c:	18fb      	adds	r3, r7, r3
    7a1e:	881b      	ldrh	r3, [r3, #0]
    7a20:	2201      	movs	r2, #1
    7a22:	4013      	ands	r3, r2
    7a24:	d002      	beq.n	7a2c <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    7a26:	697b      	ldr	r3, [r7, #20]
    7a28:	689b      	ldr	r3, [r3, #8]
    7a2a:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    7a2c:	693b      	ldr	r3, [r7, #16]
    7a2e:	2201      	movs	r2, #1
    7a30:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    7a32:	46c0      	nop			; (mov r8, r8)
    7a34:	46bd      	mov	sp, r7
    7a36:	b006      	add	sp, #24
    7a38:	bd80      	pop	{r7, pc}
    7a3a:	46c0      	nop			; (mov r8, r8)
    7a3c:	20004764 	.word	0x20004764

00007a40 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    7a40:	b580      	push	{r7, lr}
    7a42:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    7a44:	2000      	movs	r0, #0
    7a46:	4b02      	ldr	r3, [pc, #8]	; (7a50 <RTC_Handler+0x10>)
    7a48:	4798      	blx	r3
}
    7a4a:	46c0      	nop			; (mov r8, r8)
    7a4c:	46bd      	mov	sp, r7
    7a4e:	bd80      	pop	{r7, pc}
    7a50:	00007991 	.word	0x00007991

00007a54 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    7a54:	b580      	push	{r7, lr}
    7a56:	b082      	sub	sp, #8
    7a58:	af00      	add	r7, sp, #0
    7a5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    7a5c:	687b      	ldr	r3, [r7, #4]
    7a5e:	2200      	movs	r2, #0
    7a60:	701a      	strb	r2, [r3, #0]
}
    7a62:	46c0      	nop			; (mov r8, r8)
    7a64:	46bd      	mov	sp, r7
    7a66:	b002      	add	sp, #8
    7a68:	bd80      	pop	{r7, pc}
    7a6a:	46c0      	nop			; (mov r8, r8)

00007a6c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    7a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a6e:	b08d      	sub	sp, #52	; 0x34
    7a70:	af00      	add	r7, sp, #0
    7a72:	60b8      	str	r0, [r7, #8]
    7a74:	60f9      	str	r1, [r7, #12]
    7a76:	603a      	str	r2, [r7, #0]
    7a78:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    7a7a:	2300      	movs	r3, #0
    7a7c:	2400      	movs	r4, #0
    7a7e:	623b      	str	r3, [r7, #32]
    7a80:	627c      	str	r4, [r7, #36]	; 0x24
    7a82:	2300      	movs	r3, #0
    7a84:	2400      	movs	r4, #0
    7a86:	61bb      	str	r3, [r7, #24]
    7a88:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    7a8a:	233f      	movs	r3, #63	; 0x3f
    7a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    7a8e:	e053      	b.n	7b38 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    7a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7a92:	3b20      	subs	r3, #32
    7a94:	2b00      	cmp	r3, #0
    7a96:	db04      	blt.n	7aa2 <long_division+0x36>
    7a98:	2201      	movs	r2, #1
    7a9a:	409a      	lsls	r2, r3
    7a9c:	0013      	movs	r3, r2
    7a9e:	617b      	str	r3, [r7, #20]
    7aa0:	e00b      	b.n	7aba <long_division+0x4e>
    7aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7aa4:	2220      	movs	r2, #32
    7aa6:	1ad3      	subs	r3, r2, r3
    7aa8:	2201      	movs	r2, #1
    7aaa:	40da      	lsrs	r2, r3
    7aac:	0013      	movs	r3, r2
    7aae:	2100      	movs	r1, #0
    7ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7ab2:	4091      	lsls	r1, r2
    7ab4:	000a      	movs	r2, r1
    7ab6:	4313      	orrs	r3, r2
    7ab8:	617b      	str	r3, [r7, #20]
    7aba:	2201      	movs	r2, #1
    7abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7abe:	409a      	lsls	r2, r3
    7ac0:	0013      	movs	r3, r2
    7ac2:	613b      	str	r3, [r7, #16]

		r = r << 1;
    7ac4:	69bb      	ldr	r3, [r7, #24]
    7ac6:	69fc      	ldr	r4, [r7, #28]
    7ac8:	18db      	adds	r3, r3, r3
    7aca:	4164      	adcs	r4, r4
    7acc:	61bb      	str	r3, [r7, #24]
    7ace:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    7ad0:	68bb      	ldr	r3, [r7, #8]
    7ad2:	693a      	ldr	r2, [r7, #16]
    7ad4:	401a      	ands	r2, r3
    7ad6:	0015      	movs	r5, r2
    7ad8:	68fb      	ldr	r3, [r7, #12]
    7ada:	697a      	ldr	r2, [r7, #20]
    7adc:	401a      	ands	r2, r3
    7ade:	0016      	movs	r6, r2
    7ae0:	002b      	movs	r3, r5
    7ae2:	4333      	orrs	r3, r6
    7ae4:	d007      	beq.n	7af6 <long_division+0x8a>
			r |= 0x01;
    7ae6:	69bb      	ldr	r3, [r7, #24]
    7ae8:	2201      	movs	r2, #1
    7aea:	4313      	orrs	r3, r2
    7aec:	61bb      	str	r3, [r7, #24]
    7aee:	69fb      	ldr	r3, [r7, #28]
    7af0:	2200      	movs	r2, #0
    7af2:	4313      	orrs	r3, r2
    7af4:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    7af6:	687a      	ldr	r2, [r7, #4]
    7af8:	69fb      	ldr	r3, [r7, #28]
    7afa:	429a      	cmp	r2, r3
    7afc:	d819      	bhi.n	7b32 <long_division+0xc6>
    7afe:	687a      	ldr	r2, [r7, #4]
    7b00:	69fb      	ldr	r3, [r7, #28]
    7b02:	429a      	cmp	r2, r3
    7b04:	d103      	bne.n	7b0e <long_division+0xa2>
    7b06:	683a      	ldr	r2, [r7, #0]
    7b08:	69bb      	ldr	r3, [r7, #24]
    7b0a:	429a      	cmp	r2, r3
    7b0c:	d811      	bhi.n	7b32 <long_division+0xc6>
			r = r - d;
    7b0e:	69b9      	ldr	r1, [r7, #24]
    7b10:	69fa      	ldr	r2, [r7, #28]
    7b12:	683b      	ldr	r3, [r7, #0]
    7b14:	687c      	ldr	r4, [r7, #4]
    7b16:	1ac9      	subs	r1, r1, r3
    7b18:	41a2      	sbcs	r2, r4
    7b1a:	000b      	movs	r3, r1
    7b1c:	0014      	movs	r4, r2
    7b1e:	61bb      	str	r3, [r7, #24]
    7b20:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    7b22:	6a3a      	ldr	r2, [r7, #32]
    7b24:	693b      	ldr	r3, [r7, #16]
    7b26:	4313      	orrs	r3, r2
    7b28:	623b      	str	r3, [r7, #32]
    7b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7b2c:	697b      	ldr	r3, [r7, #20]
    7b2e:	4313      	orrs	r3, r2
    7b30:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    7b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b34:	3b01      	subs	r3, #1
    7b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    7b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	daa8      	bge.n	7a90 <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    7b3e:	6a3b      	ldr	r3, [r7, #32]
    7b40:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    7b42:	0018      	movs	r0, r3
    7b44:	0021      	movs	r1, r4
    7b46:	46bd      	mov	sp, r7
    7b48:	b00d      	add	sp, #52	; 0x34
    7b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007b4c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    7b4c:	b580      	push	{r7, lr}
    7b4e:	b086      	sub	sp, #24
    7b50:	af00      	add	r7, sp, #0
    7b52:	60f8      	str	r0, [r7, #12]
    7b54:	60b9      	str	r1, [r7, #8]
    7b56:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    7b58:	2316      	movs	r3, #22
    7b5a:	18fb      	adds	r3, r7, r3
    7b5c:	2200      	movs	r2, #0
    7b5e:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    7b60:	68bb      	ldr	r3, [r7, #8]
    7b62:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7b64:	68bb      	ldr	r3, [r7, #8]
    7b66:	085a      	lsrs	r2, r3, #1
    7b68:	68fb      	ldr	r3, [r7, #12]
    7b6a:	429a      	cmp	r2, r3
    7b6c:	d201      	bcs.n	7b72 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7b6e:	2340      	movs	r3, #64	; 0x40
    7b70:	e026      	b.n	7bc0 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    7b72:	68bb      	ldr	r3, [r7, #8]
    7b74:	085b      	lsrs	r3, r3, #1
    7b76:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    7b78:	e00a      	b.n	7b90 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    7b7a:	693a      	ldr	r2, [r7, #16]
    7b7c:	68fb      	ldr	r3, [r7, #12]
    7b7e:	1ad3      	subs	r3, r2, r3
    7b80:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    7b82:	2316      	movs	r3, #22
    7b84:	18fb      	adds	r3, r7, r3
    7b86:	881a      	ldrh	r2, [r3, #0]
    7b88:	2316      	movs	r3, #22
    7b8a:	18fb      	adds	r3, r7, r3
    7b8c:	3201      	adds	r2, #1
    7b8e:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    7b90:	693a      	ldr	r2, [r7, #16]
    7b92:	68fb      	ldr	r3, [r7, #12]
    7b94:	429a      	cmp	r2, r3
    7b96:	d2f0      	bcs.n	7b7a <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    7b98:	2316      	movs	r3, #22
    7b9a:	18fb      	adds	r3, r7, r3
    7b9c:	2216      	movs	r2, #22
    7b9e:	18ba      	adds	r2, r7, r2
    7ba0:	8812      	ldrh	r2, [r2, #0]
    7ba2:	3a01      	subs	r2, #1
    7ba4:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    7ba6:	2316      	movs	r3, #22
    7ba8:	18fb      	adds	r3, r7, r3
    7baa:	881b      	ldrh	r3, [r3, #0]
    7bac:	2bff      	cmp	r3, #255	; 0xff
    7bae:	d901      	bls.n	7bb4 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7bb0:	2340      	movs	r3, #64	; 0x40
    7bb2:	e005      	b.n	7bc0 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    7bb4:	687b      	ldr	r3, [r7, #4]
    7bb6:	2216      	movs	r2, #22
    7bb8:	18ba      	adds	r2, r7, r2
    7bba:	8812      	ldrh	r2, [r2, #0]
    7bbc:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    7bbe:	2300      	movs	r3, #0
	}
}
    7bc0:	0018      	movs	r0, r3
    7bc2:	46bd      	mov	sp, r7
    7bc4:	b006      	add	sp, #24
    7bc6:	bd80      	pop	{r7, pc}

00007bc8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bca:	b09d      	sub	sp, #116	; 0x74
    7bcc:	af00      	add	r7, sp, #0
    7bce:	63f8      	str	r0, [r7, #60]	; 0x3c
    7bd0:	63b9      	str	r1, [r7, #56]	; 0x38
    7bd2:	637a      	str	r2, [r7, #52]	; 0x34
    7bd4:	2233      	movs	r2, #51	; 0x33
    7bd6:	18ba      	adds	r2, r7, r2
    7bd8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    7bda:	2300      	movs	r3, #0
    7bdc:	2400      	movs	r4, #0
    7bde:	65bb      	str	r3, [r7, #88]	; 0x58
    7be0:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    7be2:	2300      	movs	r3, #0
    7be4:	2400      	movs	r4, #0
    7be6:	653b      	str	r3, [r7, #80]	; 0x50
    7be8:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    7bea:	2300      	movs	r3, #0
    7bec:	2400      	movs	r4, #0
    7bee:	66bb      	str	r3, [r7, #104]	; 0x68
    7bf0:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    7bf2:	2300      	movs	r3, #0
    7bf4:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    7bf6:	2358      	movs	r3, #88	; 0x58
    7bf8:	2230      	movs	r2, #48	; 0x30
    7bfa:	4694      	mov	ip, r2
    7bfc:	44bc      	add	ip, r7
    7bfe:	4463      	add	r3, ip
    7c00:	781a      	ldrb	r2, [r3, #0]
    7c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7c04:	435a      	muls	r2, r3
    7c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c08:	429a      	cmp	r2, r3
    7c0a:	d901      	bls.n	7c10 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7c0c:	2340      	movs	r3, #64	; 0x40
    7c0e:	e0c6      	b.n	7d9e <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    7c10:	2333      	movs	r3, #51	; 0x33
    7c12:	18fb      	adds	r3, r7, r3
    7c14:	781b      	ldrb	r3, [r3, #0]
    7c16:	2b00      	cmp	r3, #0
    7c18:	d13d      	bne.n	7c96 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    7c1a:	2358      	movs	r3, #88	; 0x58
    7c1c:	2230      	movs	r2, #48	; 0x30
    7c1e:	4694      	mov	ip, r2
    7c20:	44bc      	add	ip, r7
    7c22:	4463      	add	r3, ip
    7c24:	781b      	ldrb	r3, [r3, #0]
    7c26:	b2db      	uxtb	r3, r3
    7c28:	613b      	str	r3, [r7, #16]
    7c2a:	2300      	movs	r3, #0
    7c2c:	617b      	str	r3, [r7, #20]
    7c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7c30:	60bb      	str	r3, [r7, #8]
    7c32:	2300      	movs	r3, #0
    7c34:	60fb      	str	r3, [r7, #12]
    7c36:	4c5c      	ldr	r4, [pc, #368]	; (7da8 <_sercom_get_async_baud_val+0x1e0>)
    7c38:	68ba      	ldr	r2, [r7, #8]
    7c3a:	68fb      	ldr	r3, [r7, #12]
    7c3c:	6938      	ldr	r0, [r7, #16]
    7c3e:	6979      	ldr	r1, [r7, #20]
    7c40:	47a0      	blx	r4
    7c42:	0003      	movs	r3, r0
    7c44:	000c      	movs	r4, r1
    7c46:	001b      	movs	r3, r3
    7c48:	64fb      	str	r3, [r7, #76]	; 0x4c
    7c4a:	2300      	movs	r3, #0
    7c4c:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    7c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7c50:	603b      	str	r3, [r7, #0]
    7c52:	2300      	movs	r3, #0
    7c54:	607b      	str	r3, [r7, #4]
    7c56:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    7c58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    7c5a:	683a      	ldr	r2, [r7, #0]
    7c5c:	687b      	ldr	r3, [r7, #4]
    7c5e:	4c53      	ldr	r4, [pc, #332]	; (7dac <_sercom_get_async_baud_val+0x1e4>)
    7c60:	47a0      	blx	r4
    7c62:	0003      	movs	r3, r0
    7c64:	000c      	movs	r4, r1
    7c66:	65bb      	str	r3, [r7, #88]	; 0x58
    7c68:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    7c6a:	2100      	movs	r1, #0
    7c6c:	2201      	movs	r2, #1
    7c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    7c70:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    7c72:	1ac9      	subs	r1, r1, r3
    7c74:	41a2      	sbcs	r2, r4
    7c76:	000b      	movs	r3, r1
    7c78:	0014      	movs	r4, r2
    7c7a:	653b      	str	r3, [r7, #80]	; 0x50
    7c7c:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    7c7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7c80:	0c1b      	lsrs	r3, r3, #16
    7c82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    7c84:	0416      	lsls	r6, r2, #16
    7c86:	431e      	orrs	r6, r3
    7c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7c8a:	041d      	lsls	r5, r3, #16
    7c8c:	0033      	movs	r3, r6
    7c8e:	66bb      	str	r3, [r7, #104]	; 0x68
    7c90:	2300      	movs	r3, #0
    7c92:	66fb      	str	r3, [r7, #108]	; 0x6c
    7c94:	e07d      	b.n	7d92 <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    7c96:	2333      	movs	r3, #51	; 0x33
    7c98:	18fb      	adds	r3, r7, r3
    7c9a:	781b      	ldrb	r3, [r3, #0]
    7c9c:	2b01      	cmp	r3, #1
    7c9e:	d000      	beq.n	7ca2 <_sercom_get_async_baud_val+0xda>
    7ca0:	e077      	b.n	7d92 <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    7ca2:	2337      	movs	r3, #55	; 0x37
    7ca4:	2230      	movs	r2, #48	; 0x30
    7ca6:	4694      	mov	ip, r2
    7ca8:	44bc      	add	ip, r7
    7caa:	4463      	add	r3, ip
    7cac:	2200      	movs	r2, #0
    7cae:	701a      	strb	r2, [r3, #0]
    7cb0:	e04e      	b.n	7d50 <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    7cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    7cb6:	2300      	movs	r3, #0
    7cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    7cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    7cbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    7cbe:	0003      	movs	r3, r0
    7cc0:	0f5b      	lsrs	r3, r3, #29
    7cc2:	000a      	movs	r2, r1
    7cc4:	00d2      	lsls	r2, r2, #3
    7cc6:	4313      	orrs	r3, r2
    7cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    7cca:	0003      	movs	r3, r0
    7ccc:	00db      	lsls	r3, r3, #3
    7cce:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    7cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7cd2:	623b      	str	r3, [r7, #32]
    7cd4:	2300      	movs	r3, #0
    7cd6:	627b      	str	r3, [r7, #36]	; 0x24
    7cd8:	2358      	movs	r3, #88	; 0x58
    7cda:	2230      	movs	r2, #48	; 0x30
    7cdc:	4694      	mov	ip, r2
    7cde:	44bc      	add	ip, r7
    7ce0:	4463      	add	r3, ip
    7ce2:	781b      	ldrb	r3, [r3, #0]
    7ce4:	b2db      	uxtb	r3, r3
    7ce6:	61bb      	str	r3, [r7, #24]
    7ce8:	2300      	movs	r3, #0
    7cea:	61fb      	str	r3, [r7, #28]
    7cec:	4c2e      	ldr	r4, [pc, #184]	; (7da8 <_sercom_get_async_baud_val+0x1e0>)
    7cee:	69ba      	ldr	r2, [r7, #24]
    7cf0:	69fb      	ldr	r3, [r7, #28]
    7cf2:	6a38      	ldr	r0, [r7, #32]
    7cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7cf6:	47a0      	blx	r4
    7cf8:	0003      	movs	r3, r0
    7cfa:	000c      	movs	r4, r1
    7cfc:	643b      	str	r3, [r7, #64]	; 0x40
    7cfe:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    7d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7d02:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    7d04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    7d06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    7d08:	001a      	movs	r2, r3
    7d0a:	0023      	movs	r3, r4
    7d0c:	4c27      	ldr	r4, [pc, #156]	; (7dac <_sercom_get_async_baud_val+0x1e4>)
    7d0e:	47a0      	blx	r4
    7d10:	0003      	movs	r3, r0
    7d12:	000c      	movs	r4, r1
    7d14:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    7d16:	2337      	movs	r3, #55	; 0x37
    7d18:	2230      	movs	r2, #48	; 0x30
    7d1a:	4694      	mov	ip, r2
    7d1c:	44bc      	add	ip, r7
    7d1e:	4463      	add	r3, ip
    7d20:	781b      	ldrb	r3, [r3, #0]
    7d22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    7d24:	1ad3      	subs	r3, r2, r3
    7d26:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    7d28:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7d2a:	08db      	lsrs	r3, r3, #3
    7d2c:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    7d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7d30:	4a1f      	ldr	r2, [pc, #124]	; (7db0 <_sercom_get_async_baud_val+0x1e8>)
    7d32:	4293      	cmp	r3, r2
    7d34:	d915      	bls.n	7d62 <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    7d36:	2337      	movs	r3, #55	; 0x37
    7d38:	2230      	movs	r2, #48	; 0x30
    7d3a:	4694      	mov	ip, r2
    7d3c:	44bc      	add	ip, r7
    7d3e:	4463      	add	r3, ip
    7d40:	781a      	ldrb	r2, [r3, #0]
    7d42:	2337      	movs	r3, #55	; 0x37
    7d44:	2130      	movs	r1, #48	; 0x30
    7d46:	468c      	mov	ip, r1
    7d48:	44bc      	add	ip, r7
    7d4a:	4463      	add	r3, ip
    7d4c:	3201      	adds	r2, #1
    7d4e:	701a      	strb	r2, [r3, #0]
    7d50:	2337      	movs	r3, #55	; 0x37
    7d52:	2230      	movs	r2, #48	; 0x30
    7d54:	4694      	mov	ip, r2
    7d56:	44bc      	add	ip, r7
    7d58:	4463      	add	r3, ip
    7d5a:	781b      	ldrb	r3, [r3, #0]
    7d5c:	2b07      	cmp	r3, #7
    7d5e:	d9a8      	bls.n	7cb2 <_sercom_get_async_baud_val+0xea>
    7d60:	e000      	b.n	7d64 <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    7d62:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    7d64:	2337      	movs	r3, #55	; 0x37
    7d66:	2230      	movs	r2, #48	; 0x30
    7d68:	4694      	mov	ip, r2
    7d6a:	44bc      	add	ip, r7
    7d6c:	4463      	add	r3, ip
    7d6e:	781b      	ldrb	r3, [r3, #0]
    7d70:	2b08      	cmp	r3, #8
    7d72:	d101      	bne.n	7d78 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7d74:	2340      	movs	r3, #64	; 0x40
    7d76:	e012      	b.n	7d9e <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    7d78:	2337      	movs	r3, #55	; 0x37
    7d7a:	2230      	movs	r2, #48	; 0x30
    7d7c:	4694      	mov	ip, r2
    7d7e:	44bc      	add	ip, r7
    7d80:	4463      	add	r3, ip
    7d82:	781b      	ldrb	r3, [r3, #0]
    7d84:	035b      	lsls	r3, r3, #13
    7d86:	001a      	movs	r2, r3
    7d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7d8a:	4313      	orrs	r3, r2
    7d8c:	66bb      	str	r3, [r7, #104]	; 0x68
    7d8e:	2300      	movs	r3, #0
    7d90:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    7d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7d94:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    7d96:	b29a      	uxth	r2, r3
    7d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7d9a:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    7d9c:	2300      	movs	r3, #0
}
    7d9e:	0018      	movs	r0, r3
    7da0:	46bd      	mov	sp, r7
    7da2:	b01d      	add	sp, #116	; 0x74
    7da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7da6:	46c0      	nop			; (mov r8, r8)
    7da8:	0000ef25 	.word	0x0000ef25
    7dac:	00007a6d 	.word	0x00007a6d
    7db0:	00001fff 	.word	0x00001fff

00007db4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7db4:	b580      	push	{r7, lr}
    7db6:	b084      	sub	sp, #16
    7db8:	af00      	add	r7, sp, #0
    7dba:	0002      	movs	r2, r0
    7dbc:	1dfb      	adds	r3, r7, #7
    7dbe:	701a      	strb	r2, [r3, #0]
    7dc0:	1dbb      	adds	r3, r7, #6
    7dc2:	1c0a      	adds	r2, r1, #0
    7dc4:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    7dc6:	4b1a      	ldr	r3, [pc, #104]	; (7e30 <sercom_set_gclk_generator+0x7c>)
    7dc8:	781b      	ldrb	r3, [r3, #0]
    7dca:	2201      	movs	r2, #1
    7dcc:	4053      	eors	r3, r2
    7dce:	b2db      	uxtb	r3, r3
    7dd0:	2b00      	cmp	r3, #0
    7dd2:	d103      	bne.n	7ddc <sercom_set_gclk_generator+0x28>
    7dd4:	1dbb      	adds	r3, r7, #6
    7dd6:	781b      	ldrb	r3, [r3, #0]
    7dd8:	2b00      	cmp	r3, #0
    7dda:	d01b      	beq.n	7e14 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7ddc:	230c      	movs	r3, #12
    7dde:	18fb      	adds	r3, r7, r3
    7de0:	0018      	movs	r0, r3
    7de2:	4b14      	ldr	r3, [pc, #80]	; (7e34 <sercom_set_gclk_generator+0x80>)
    7de4:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    7de6:	230c      	movs	r3, #12
    7de8:	18fb      	adds	r3, r7, r3
    7dea:	1dfa      	adds	r2, r7, #7
    7dec:	7812      	ldrb	r2, [r2, #0]
    7dee:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    7df0:	230c      	movs	r3, #12
    7df2:	18fb      	adds	r3, r7, r3
    7df4:	0019      	movs	r1, r3
    7df6:	2013      	movs	r0, #19
    7df8:	4b0f      	ldr	r3, [pc, #60]	; (7e38 <sercom_set_gclk_generator+0x84>)
    7dfa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    7dfc:	2013      	movs	r0, #19
    7dfe:	4b0f      	ldr	r3, [pc, #60]	; (7e3c <sercom_set_gclk_generator+0x88>)
    7e00:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    7e02:	4b0b      	ldr	r3, [pc, #44]	; (7e30 <sercom_set_gclk_generator+0x7c>)
    7e04:	1dfa      	adds	r2, r7, #7
    7e06:	7812      	ldrb	r2, [r2, #0]
    7e08:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    7e0a:	4b09      	ldr	r3, [pc, #36]	; (7e30 <sercom_set_gclk_generator+0x7c>)
    7e0c:	2201      	movs	r2, #1
    7e0e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    7e10:	2300      	movs	r3, #0
    7e12:	e008      	b.n	7e26 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    7e14:	4b06      	ldr	r3, [pc, #24]	; (7e30 <sercom_set_gclk_generator+0x7c>)
    7e16:	785b      	ldrb	r3, [r3, #1]
    7e18:	1dfa      	adds	r2, r7, #7
    7e1a:	7812      	ldrb	r2, [r2, #0]
    7e1c:	429a      	cmp	r2, r3
    7e1e:	d101      	bne.n	7e24 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    7e20:	2300      	movs	r3, #0
    7e22:	e000      	b.n	7e26 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    7e24:	231d      	movs	r3, #29
}
    7e26:	0018      	movs	r0, r3
    7e28:	46bd      	mov	sp, r7
    7e2a:	b004      	add	sp, #16
    7e2c:	bd80      	pop	{r7, pc}
    7e2e:	46c0      	nop			; (mov r8, r8)
    7e30:	200000f8 	.word	0x200000f8
    7e34:	00007a55 	.word	0x00007a55
    7e38:	0000a5cd 	.word	0x0000a5cd
    7e3c:	0000a611 	.word	0x0000a611

00007e40 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    7e40:	b580      	push	{r7, lr}
    7e42:	b082      	sub	sp, #8
    7e44:	af00      	add	r7, sp, #0
    7e46:	6078      	str	r0, [r7, #4]
    7e48:	000a      	movs	r2, r1
    7e4a:	1cfb      	adds	r3, r7, #3
    7e4c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    7e4e:	687b      	ldr	r3, [r7, #4]
    7e50:	4a4d      	ldr	r2, [pc, #308]	; (7f88 <_sercom_get_default_pad+0x148>)
    7e52:	4293      	cmp	r3, r2
    7e54:	d03f      	beq.n	7ed6 <_sercom_get_default_pad+0x96>
    7e56:	4a4c      	ldr	r2, [pc, #304]	; (7f88 <_sercom_get_default_pad+0x148>)
    7e58:	4293      	cmp	r3, r2
    7e5a:	d806      	bhi.n	7e6a <_sercom_get_default_pad+0x2a>
    7e5c:	4a4b      	ldr	r2, [pc, #300]	; (7f8c <_sercom_get_default_pad+0x14c>)
    7e5e:	4293      	cmp	r3, r2
    7e60:	d00f      	beq.n	7e82 <_sercom_get_default_pad+0x42>
    7e62:	4a4b      	ldr	r2, [pc, #300]	; (7f90 <_sercom_get_default_pad+0x150>)
    7e64:	4293      	cmp	r3, r2
    7e66:	d021      	beq.n	7eac <_sercom_get_default_pad+0x6c>
    7e68:	e089      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7e6a:	4a4a      	ldr	r2, [pc, #296]	; (7f94 <_sercom_get_default_pad+0x154>)
    7e6c:	4293      	cmp	r3, r2
    7e6e:	d100      	bne.n	7e72 <_sercom_get_default_pad+0x32>
    7e70:	e05b      	b.n	7f2a <_sercom_get_default_pad+0xea>
    7e72:	4a49      	ldr	r2, [pc, #292]	; (7f98 <_sercom_get_default_pad+0x158>)
    7e74:	4293      	cmp	r3, r2
    7e76:	d100      	bne.n	7e7a <_sercom_get_default_pad+0x3a>
    7e78:	e06c      	b.n	7f54 <_sercom_get_default_pad+0x114>
    7e7a:	4a48      	ldr	r2, [pc, #288]	; (7f9c <_sercom_get_default_pad+0x15c>)
    7e7c:	4293      	cmp	r3, r2
    7e7e:	d03f      	beq.n	7f00 <_sercom_get_default_pad+0xc0>
    7e80:	e07d      	b.n	7f7e <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7e82:	1cfb      	adds	r3, r7, #3
    7e84:	781b      	ldrb	r3, [r3, #0]
    7e86:	2b01      	cmp	r3, #1
    7e88:	d00a      	beq.n	7ea0 <_sercom_get_default_pad+0x60>
    7e8a:	dc02      	bgt.n	7e92 <_sercom_get_default_pad+0x52>
    7e8c:	2b00      	cmp	r3, #0
    7e8e:	d005      	beq.n	7e9c <_sercom_get_default_pad+0x5c>
    7e90:	e075      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7e92:	2b02      	cmp	r3, #2
    7e94:	d006      	beq.n	7ea4 <_sercom_get_default_pad+0x64>
    7e96:	2b03      	cmp	r3, #3
    7e98:	d006      	beq.n	7ea8 <_sercom_get_default_pad+0x68>
    7e9a:	e070      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7e9c:	4b40      	ldr	r3, [pc, #256]	; (7fa0 <_sercom_get_default_pad+0x160>)
    7e9e:	e06f      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7ea0:	4b40      	ldr	r3, [pc, #256]	; (7fa4 <_sercom_get_default_pad+0x164>)
    7ea2:	e06d      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7ea4:	4b40      	ldr	r3, [pc, #256]	; (7fa8 <_sercom_get_default_pad+0x168>)
    7ea6:	e06b      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7ea8:	4b40      	ldr	r3, [pc, #256]	; (7fac <_sercom_get_default_pad+0x16c>)
    7eaa:	e069      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7eac:	1cfb      	adds	r3, r7, #3
    7eae:	781b      	ldrb	r3, [r3, #0]
    7eb0:	2b01      	cmp	r3, #1
    7eb2:	d00a      	beq.n	7eca <_sercom_get_default_pad+0x8a>
    7eb4:	dc02      	bgt.n	7ebc <_sercom_get_default_pad+0x7c>
    7eb6:	2b00      	cmp	r3, #0
    7eb8:	d005      	beq.n	7ec6 <_sercom_get_default_pad+0x86>
    7eba:	e060      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7ebc:	2b02      	cmp	r3, #2
    7ebe:	d006      	beq.n	7ece <_sercom_get_default_pad+0x8e>
    7ec0:	2b03      	cmp	r3, #3
    7ec2:	d006      	beq.n	7ed2 <_sercom_get_default_pad+0x92>
    7ec4:	e05b      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7ec6:	2303      	movs	r3, #3
    7ec8:	e05a      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7eca:	4b39      	ldr	r3, [pc, #228]	; (7fb0 <_sercom_get_default_pad+0x170>)
    7ecc:	e058      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7ece:	4b39      	ldr	r3, [pc, #228]	; (7fb4 <_sercom_get_default_pad+0x174>)
    7ed0:	e056      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7ed2:	4b39      	ldr	r3, [pc, #228]	; (7fb8 <_sercom_get_default_pad+0x178>)
    7ed4:	e054      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7ed6:	1cfb      	adds	r3, r7, #3
    7ed8:	781b      	ldrb	r3, [r3, #0]
    7eda:	2b01      	cmp	r3, #1
    7edc:	d00a      	beq.n	7ef4 <_sercom_get_default_pad+0xb4>
    7ede:	dc02      	bgt.n	7ee6 <_sercom_get_default_pad+0xa6>
    7ee0:	2b00      	cmp	r3, #0
    7ee2:	d005      	beq.n	7ef0 <_sercom_get_default_pad+0xb0>
    7ee4:	e04b      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7ee6:	2b02      	cmp	r3, #2
    7ee8:	d006      	beq.n	7ef8 <_sercom_get_default_pad+0xb8>
    7eea:	2b03      	cmp	r3, #3
    7eec:	d006      	beq.n	7efc <_sercom_get_default_pad+0xbc>
    7eee:	e046      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7ef0:	4b32      	ldr	r3, [pc, #200]	; (7fbc <_sercom_get_default_pad+0x17c>)
    7ef2:	e045      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7ef4:	4b32      	ldr	r3, [pc, #200]	; (7fc0 <_sercom_get_default_pad+0x180>)
    7ef6:	e043      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7ef8:	4b32      	ldr	r3, [pc, #200]	; (7fc4 <_sercom_get_default_pad+0x184>)
    7efa:	e041      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7efc:	4b32      	ldr	r3, [pc, #200]	; (7fc8 <_sercom_get_default_pad+0x188>)
    7efe:	e03f      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f00:	1cfb      	adds	r3, r7, #3
    7f02:	781b      	ldrb	r3, [r3, #0]
    7f04:	2b01      	cmp	r3, #1
    7f06:	d00a      	beq.n	7f1e <_sercom_get_default_pad+0xde>
    7f08:	dc02      	bgt.n	7f10 <_sercom_get_default_pad+0xd0>
    7f0a:	2b00      	cmp	r3, #0
    7f0c:	d005      	beq.n	7f1a <_sercom_get_default_pad+0xda>
    7f0e:	e036      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7f10:	2b02      	cmp	r3, #2
    7f12:	d006      	beq.n	7f22 <_sercom_get_default_pad+0xe2>
    7f14:	2b03      	cmp	r3, #3
    7f16:	d006      	beq.n	7f26 <_sercom_get_default_pad+0xe6>
    7f18:	e031      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7f1a:	4b2c      	ldr	r3, [pc, #176]	; (7fcc <_sercom_get_default_pad+0x18c>)
    7f1c:	e030      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f1e:	4b2c      	ldr	r3, [pc, #176]	; (7fd0 <_sercom_get_default_pad+0x190>)
    7f20:	e02e      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f22:	4b2c      	ldr	r3, [pc, #176]	; (7fd4 <_sercom_get_default_pad+0x194>)
    7f24:	e02c      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f26:	4b2c      	ldr	r3, [pc, #176]	; (7fd8 <_sercom_get_default_pad+0x198>)
    7f28:	e02a      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f2a:	1cfb      	adds	r3, r7, #3
    7f2c:	781b      	ldrb	r3, [r3, #0]
    7f2e:	2b01      	cmp	r3, #1
    7f30:	d00a      	beq.n	7f48 <_sercom_get_default_pad+0x108>
    7f32:	dc02      	bgt.n	7f3a <_sercom_get_default_pad+0xfa>
    7f34:	2b00      	cmp	r3, #0
    7f36:	d005      	beq.n	7f44 <_sercom_get_default_pad+0x104>
    7f38:	e021      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7f3a:	2b02      	cmp	r3, #2
    7f3c:	d006      	beq.n	7f4c <_sercom_get_default_pad+0x10c>
    7f3e:	2b03      	cmp	r3, #3
    7f40:	d006      	beq.n	7f50 <_sercom_get_default_pad+0x110>
    7f42:	e01c      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7f44:	4b25      	ldr	r3, [pc, #148]	; (7fdc <_sercom_get_default_pad+0x19c>)
    7f46:	e01b      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f48:	4b25      	ldr	r3, [pc, #148]	; (7fe0 <_sercom_get_default_pad+0x1a0>)
    7f4a:	e019      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f4c:	4b25      	ldr	r3, [pc, #148]	; (7fe4 <_sercom_get_default_pad+0x1a4>)
    7f4e:	e017      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f50:	4b25      	ldr	r3, [pc, #148]	; (7fe8 <_sercom_get_default_pad+0x1a8>)
    7f52:	e015      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f54:	1cfb      	adds	r3, r7, #3
    7f56:	781b      	ldrb	r3, [r3, #0]
    7f58:	2b01      	cmp	r3, #1
    7f5a:	d00a      	beq.n	7f72 <_sercom_get_default_pad+0x132>
    7f5c:	dc02      	bgt.n	7f64 <_sercom_get_default_pad+0x124>
    7f5e:	2b00      	cmp	r3, #0
    7f60:	d005      	beq.n	7f6e <_sercom_get_default_pad+0x12e>
    7f62:	e00c      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7f64:	2b02      	cmp	r3, #2
    7f66:	d006      	beq.n	7f76 <_sercom_get_default_pad+0x136>
    7f68:	2b03      	cmp	r3, #3
    7f6a:	d006      	beq.n	7f7a <_sercom_get_default_pad+0x13a>
    7f6c:	e007      	b.n	7f7e <_sercom_get_default_pad+0x13e>
    7f6e:	4b1f      	ldr	r3, [pc, #124]	; (7fec <_sercom_get_default_pad+0x1ac>)
    7f70:	e006      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f72:	4b1f      	ldr	r3, [pc, #124]	; (7ff0 <_sercom_get_default_pad+0x1b0>)
    7f74:	e004      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f76:	4b1f      	ldr	r3, [pc, #124]	; (7ff4 <_sercom_get_default_pad+0x1b4>)
    7f78:	e002      	b.n	7f80 <_sercom_get_default_pad+0x140>
    7f7a:	4b1f      	ldr	r3, [pc, #124]	; (7ff8 <_sercom_get_default_pad+0x1b8>)
    7f7c:	e000      	b.n	7f80 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    7f7e:	2300      	movs	r3, #0
}
    7f80:	0018      	movs	r0, r3
    7f82:	46bd      	mov	sp, r7
    7f84:	b002      	add	sp, #8
    7f86:	bd80      	pop	{r7, pc}
    7f88:	42001000 	.word	0x42001000
    7f8c:	42000800 	.word	0x42000800
    7f90:	42000c00 	.word	0x42000c00
    7f94:	42001800 	.word	0x42001800
    7f98:	42001c00 	.word	0x42001c00
    7f9c:	42001400 	.word	0x42001400
    7fa0:	00040003 	.word	0x00040003
    7fa4:	00050003 	.word	0x00050003
    7fa8:	00060003 	.word	0x00060003
    7fac:	00070003 	.word	0x00070003
    7fb0:	00010003 	.word	0x00010003
    7fb4:	001e0003 	.word	0x001e0003
    7fb8:	001f0003 	.word	0x001f0003
    7fbc:	00080003 	.word	0x00080003
    7fc0:	00090003 	.word	0x00090003
    7fc4:	000a0003 	.word	0x000a0003
    7fc8:	000b0003 	.word	0x000b0003
    7fcc:	00100003 	.word	0x00100003
    7fd0:	00110003 	.word	0x00110003
    7fd4:	00120003 	.word	0x00120003
    7fd8:	00130003 	.word	0x00130003
    7fdc:	000c0003 	.word	0x000c0003
    7fe0:	000d0003 	.word	0x000d0003
    7fe4:	000e0003 	.word	0x000e0003
    7fe8:	000f0003 	.word	0x000f0003
    7fec:	00160003 	.word	0x00160003
    7ff0:	00170003 	.word	0x00170003
    7ff4:	00180003 	.word	0x00180003
    7ff8:	00190003 	.word	0x00190003

00007ffc <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7ffc:	b590      	push	{r4, r7, lr}
    7ffe:	b08b      	sub	sp, #44	; 0x2c
    8000:	af00      	add	r7, sp, #0
    8002:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    8004:	230c      	movs	r3, #12
    8006:	18fb      	adds	r3, r7, r3
    8008:	4a0f      	ldr	r2, [pc, #60]	; (8048 <_sercom_get_sercom_inst_index+0x4c>)
    800a:	ca13      	ldmia	r2!, {r0, r1, r4}
    800c:	c313      	stmia	r3!, {r0, r1, r4}
    800e:	ca13      	ldmia	r2!, {r0, r1, r4}
    8010:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8012:	2300      	movs	r3, #0
    8014:	627b      	str	r3, [r7, #36]	; 0x24
    8016:	e00e      	b.n	8036 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    8018:	230c      	movs	r3, #12
    801a:	18fb      	adds	r3, r7, r3
    801c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    801e:	0092      	lsls	r2, r2, #2
    8020:	58d3      	ldr	r3, [r2, r3]
    8022:	1e1a      	subs	r2, r3, #0
    8024:	687b      	ldr	r3, [r7, #4]
    8026:	429a      	cmp	r2, r3
    8028:	d102      	bne.n	8030 <_sercom_get_sercom_inst_index+0x34>
			return i;
    802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    802c:	b2db      	uxtb	r3, r3
    802e:	e006      	b.n	803e <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8032:	3301      	adds	r3, #1
    8034:	627b      	str	r3, [r7, #36]	; 0x24
    8036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8038:	2b05      	cmp	r3, #5
    803a:	d9ed      	bls.n	8018 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    803c:	2300      	movs	r3, #0
}
    803e:	0018      	movs	r0, r3
    8040:	46bd      	mov	sp, r7
    8042:	b00b      	add	sp, #44	; 0x2c
    8044:	bd90      	pop	{r4, r7, pc}
    8046:	46c0      	nop			; (mov r8, r8)
    8048:	00011ee8 	.word	0x00011ee8

0000804c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    804c:	b580      	push	{r7, lr}
    804e:	b082      	sub	sp, #8
    8050:	af00      	add	r7, sp, #0
    8052:	0002      	movs	r2, r0
    8054:	1dfb      	adds	r3, r7, #7
    8056:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    8058:	46c0      	nop			; (mov r8, r8)
    805a:	46bd      	mov	sp, r7
    805c:	b002      	add	sp, #8
    805e:	bd80      	pop	{r7, pc}

00008060 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    8060:	b580      	push	{r7, lr}
    8062:	b084      	sub	sp, #16
    8064:	af00      	add	r7, sp, #0
    8066:	0002      	movs	r2, r0
    8068:	6039      	str	r1, [r7, #0]
    806a:	1dfb      	adds	r3, r7, #7
    806c:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    806e:	4b13      	ldr	r3, [pc, #76]	; (80bc <_sercom_set_handler+0x5c>)
    8070:	781b      	ldrb	r3, [r3, #0]
    8072:	2201      	movs	r2, #1
    8074:	4053      	eors	r3, r2
    8076:	b2db      	uxtb	r3, r3
    8078:	2b00      	cmp	r3, #0
    807a:	d015      	beq.n	80a8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    807c:	2300      	movs	r3, #0
    807e:	60fb      	str	r3, [r7, #12]
    8080:	e00c      	b.n	809c <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    8082:	4b0f      	ldr	r3, [pc, #60]	; (80c0 <_sercom_set_handler+0x60>)
    8084:	68fa      	ldr	r2, [r7, #12]
    8086:	0092      	lsls	r2, r2, #2
    8088:	490e      	ldr	r1, [pc, #56]	; (80c4 <_sercom_set_handler+0x64>)
    808a:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    808c:	4b0e      	ldr	r3, [pc, #56]	; (80c8 <_sercom_set_handler+0x68>)
    808e:	68fa      	ldr	r2, [r7, #12]
    8090:	0092      	lsls	r2, r2, #2
    8092:	2100      	movs	r1, #0
    8094:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8096:	68fb      	ldr	r3, [r7, #12]
    8098:	3301      	adds	r3, #1
    809a:	60fb      	str	r3, [r7, #12]
    809c:	68fb      	ldr	r3, [r7, #12]
    809e:	2b05      	cmp	r3, #5
    80a0:	d9ef      	bls.n	8082 <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    80a2:	4b06      	ldr	r3, [pc, #24]	; (80bc <_sercom_set_handler+0x5c>)
    80a4:	2201      	movs	r2, #1
    80a6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    80a8:	1dfb      	adds	r3, r7, #7
    80aa:	781a      	ldrb	r2, [r3, #0]
    80ac:	4b04      	ldr	r3, [pc, #16]	; (80c0 <_sercom_set_handler+0x60>)
    80ae:	0092      	lsls	r2, r2, #2
    80b0:	6839      	ldr	r1, [r7, #0]
    80b2:	50d1      	str	r1, [r2, r3]
}
    80b4:	46c0      	nop			; (mov r8, r8)
    80b6:	46bd      	mov	sp, r7
    80b8:	b004      	add	sp, #16
    80ba:	bd80      	pop	{r7, pc}
    80bc:	200000fa 	.word	0x200000fa
    80c0:	200000fc 	.word	0x200000fc
    80c4:	0000804d 	.word	0x0000804d
    80c8:	20004768 	.word	0x20004768

000080cc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    80cc:	b590      	push	{r4, r7, lr}
    80ce:	b085      	sub	sp, #20
    80d0:	af00      	add	r7, sp, #0
    80d2:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    80d4:	2308      	movs	r3, #8
    80d6:	18fa      	adds	r2, r7, r3
    80d8:	4b0c      	ldr	r3, [pc, #48]	; (810c <_sercom_get_interrupt_vector+0x40>)
    80da:	0010      	movs	r0, r2
    80dc:	0019      	movs	r1, r3
    80de:	2306      	movs	r3, #6
    80e0:	001a      	movs	r2, r3
    80e2:	4b0b      	ldr	r3, [pc, #44]	; (8110 <_sercom_get_interrupt_vector+0x44>)
    80e4:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    80e6:	230f      	movs	r3, #15
    80e8:	18fc      	adds	r4, r7, r3
    80ea:	687b      	ldr	r3, [r7, #4]
    80ec:	0018      	movs	r0, r3
    80ee:	4b09      	ldr	r3, [pc, #36]	; (8114 <_sercom_get_interrupt_vector+0x48>)
    80f0:	4798      	blx	r3
    80f2:	0003      	movs	r3, r0
    80f4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    80f6:	230f      	movs	r3, #15
    80f8:	18fb      	adds	r3, r7, r3
    80fa:	781b      	ldrb	r3, [r3, #0]
    80fc:	2208      	movs	r2, #8
    80fe:	18ba      	adds	r2, r7, r2
    8100:	5cd3      	ldrb	r3, [r2, r3]
    8102:	b25b      	sxtb	r3, r3
}
    8104:	0018      	movs	r0, r3
    8106:	46bd      	mov	sp, r7
    8108:	b005      	add	sp, #20
    810a:	bd90      	pop	{r4, r7, pc}
    810c:	00011f00 	.word	0x00011f00
    8110:	0000f769 	.word	0x0000f769
    8114:	00007ffd 	.word	0x00007ffd

00008118 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    8118:	b580      	push	{r7, lr}
    811a:	af00      	add	r7, sp, #0
    811c:	4b03      	ldr	r3, [pc, #12]	; (812c <SERCOM0_Handler+0x14>)
    811e:	681b      	ldr	r3, [r3, #0]
    8120:	2000      	movs	r0, #0
    8122:	4798      	blx	r3
    8124:	46c0      	nop			; (mov r8, r8)
    8126:	46bd      	mov	sp, r7
    8128:	bd80      	pop	{r7, pc}
    812a:	46c0      	nop			; (mov r8, r8)
    812c:	200000fc 	.word	0x200000fc

00008130 <SERCOM1_Handler>:
    8130:	b580      	push	{r7, lr}
    8132:	af00      	add	r7, sp, #0
    8134:	4b03      	ldr	r3, [pc, #12]	; (8144 <SERCOM1_Handler+0x14>)
    8136:	685b      	ldr	r3, [r3, #4]
    8138:	2001      	movs	r0, #1
    813a:	4798      	blx	r3
    813c:	46c0      	nop			; (mov r8, r8)
    813e:	46bd      	mov	sp, r7
    8140:	bd80      	pop	{r7, pc}
    8142:	46c0      	nop			; (mov r8, r8)
    8144:	200000fc 	.word	0x200000fc

00008148 <SERCOM2_Handler>:
    8148:	b580      	push	{r7, lr}
    814a:	af00      	add	r7, sp, #0
    814c:	4b03      	ldr	r3, [pc, #12]	; (815c <SERCOM2_Handler+0x14>)
    814e:	689b      	ldr	r3, [r3, #8]
    8150:	2002      	movs	r0, #2
    8152:	4798      	blx	r3
    8154:	46c0      	nop			; (mov r8, r8)
    8156:	46bd      	mov	sp, r7
    8158:	bd80      	pop	{r7, pc}
    815a:	46c0      	nop			; (mov r8, r8)
    815c:	200000fc 	.word	0x200000fc

00008160 <SERCOM3_Handler>:
    8160:	b580      	push	{r7, lr}
    8162:	af00      	add	r7, sp, #0
    8164:	4b03      	ldr	r3, [pc, #12]	; (8174 <SERCOM3_Handler+0x14>)
    8166:	68db      	ldr	r3, [r3, #12]
    8168:	2003      	movs	r0, #3
    816a:	4798      	blx	r3
    816c:	46c0      	nop			; (mov r8, r8)
    816e:	46bd      	mov	sp, r7
    8170:	bd80      	pop	{r7, pc}
    8172:	46c0      	nop			; (mov r8, r8)
    8174:	200000fc 	.word	0x200000fc

00008178 <SERCOM4_Handler>:
    8178:	b580      	push	{r7, lr}
    817a:	af00      	add	r7, sp, #0
    817c:	4b03      	ldr	r3, [pc, #12]	; (818c <SERCOM4_Handler+0x14>)
    817e:	691b      	ldr	r3, [r3, #16]
    8180:	2004      	movs	r0, #4
    8182:	4798      	blx	r3
    8184:	46c0      	nop			; (mov r8, r8)
    8186:	46bd      	mov	sp, r7
    8188:	bd80      	pop	{r7, pc}
    818a:	46c0      	nop			; (mov r8, r8)
    818c:	200000fc 	.word	0x200000fc

00008190 <SERCOM5_Handler>:
    8190:	b580      	push	{r7, lr}
    8192:	af00      	add	r7, sp, #0
    8194:	4b03      	ldr	r3, [pc, #12]	; (81a4 <SERCOM5_Handler+0x14>)
    8196:	695b      	ldr	r3, [r3, #20]
    8198:	2005      	movs	r0, #5
    819a:	4798      	blx	r3
    819c:	46c0      	nop			; (mov r8, r8)
    819e:	46bd      	mov	sp, r7
    81a0:	bd80      	pop	{r7, pc}
    81a2:	46c0      	nop			; (mov r8, r8)
    81a4:	200000fc 	.word	0x200000fc

000081a8 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    81a8:	b580      	push	{r7, lr}
    81aa:	b082      	sub	sp, #8
    81ac:	af00      	add	r7, sp, #0
    81ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    81b0:	687b      	ldr	r3, [r7, #4]
    81b2:	2280      	movs	r2, #128	; 0x80
    81b4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    81b6:	687b      	ldr	r3, [r7, #4]
    81b8:	2200      	movs	r2, #0
    81ba:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    81bc:	687b      	ldr	r3, [r7, #4]
    81be:	2201      	movs	r2, #1
    81c0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    81c2:	687b      	ldr	r3, [r7, #4]
    81c4:	2200      	movs	r2, #0
    81c6:	70da      	strb	r2, [r3, #3]
}
    81c8:	46c0      	nop			; (mov r8, r8)
    81ca:	46bd      	mov	sp, r7
    81cc:	b002      	add	sp, #8
    81ce:	bd80      	pop	{r7, pc}

000081d0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    81d0:	b580      	push	{r7, lr}
    81d2:	b084      	sub	sp, #16
    81d4:	af00      	add	r7, sp, #0
    81d6:	0002      	movs	r2, r0
    81d8:	1dfb      	adds	r3, r7, #7
    81da:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    81dc:	230f      	movs	r3, #15
    81de:	18fb      	adds	r3, r7, r3
    81e0:	1dfa      	adds	r2, r7, #7
    81e2:	7812      	ldrb	r2, [r2, #0]
    81e4:	09d2      	lsrs	r2, r2, #7
    81e6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    81e8:	230e      	movs	r3, #14
    81ea:	18fb      	adds	r3, r7, r3
    81ec:	1dfa      	adds	r2, r7, #7
    81ee:	7812      	ldrb	r2, [r2, #0]
    81f0:	0952      	lsrs	r2, r2, #5
    81f2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    81f4:	4b0d      	ldr	r3, [pc, #52]	; (822c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    81f6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    81f8:	230f      	movs	r3, #15
    81fa:	18fb      	adds	r3, r7, r3
    81fc:	781b      	ldrb	r3, [r3, #0]
    81fe:	2b00      	cmp	r3, #0
    8200:	d10f      	bne.n	8222 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    8202:	230f      	movs	r3, #15
    8204:	18fb      	adds	r3, r7, r3
    8206:	781b      	ldrb	r3, [r3, #0]
    8208:	009b      	lsls	r3, r3, #2
    820a:	2210      	movs	r2, #16
    820c:	4694      	mov	ip, r2
    820e:	44bc      	add	ip, r7
    8210:	4463      	add	r3, ip
    8212:	3b08      	subs	r3, #8
    8214:	681a      	ldr	r2, [r3, #0]
    8216:	230e      	movs	r3, #14
    8218:	18fb      	adds	r3, r7, r3
    821a:	781b      	ldrb	r3, [r3, #0]
    821c:	01db      	lsls	r3, r3, #7
    821e:	18d3      	adds	r3, r2, r3
    8220:	e000      	b.n	8224 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    8222:	2300      	movs	r3, #0
	}
}
    8224:	0018      	movs	r0, r3
    8226:	46bd      	mov	sp, r7
    8228:	b004      	add	sp, #16
    822a:	bd80      	pop	{r7, pc}
    822c:	41004400 	.word	0x41004400

00008230 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8230:	b580      	push	{r7, lr}
    8232:	b082      	sub	sp, #8
    8234:	af00      	add	r7, sp, #0
    8236:	0002      	movs	r2, r0
    8238:	1dfb      	adds	r3, r7, #7
    823a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    823c:	1dfb      	adds	r3, r7, #7
    823e:	781b      	ldrb	r3, [r3, #0]
    8240:	0018      	movs	r0, r3
    8242:	4b03      	ldr	r3, [pc, #12]	; (8250 <port_get_group_from_gpio_pin+0x20>)
    8244:	4798      	blx	r3
    8246:	0003      	movs	r3, r0
}
    8248:	0018      	movs	r0, r3
    824a:	46bd      	mov	sp, r7
    824c:	b002      	add	sp, #8
    824e:	bd80      	pop	{r7, pc}
    8250:	000081d1 	.word	0x000081d1

00008254 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8254:	b580      	push	{r7, lr}
    8256:	b084      	sub	sp, #16
    8258:	af00      	add	r7, sp, #0
    825a:	0002      	movs	r2, r0
    825c:	1dfb      	adds	r3, r7, #7
    825e:	701a      	strb	r2, [r3, #0]
    8260:	1dbb      	adds	r3, r7, #6
    8262:	1c0a      	adds	r2, r1, #0
    8264:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8266:	1dfb      	adds	r3, r7, #7
    8268:	781b      	ldrb	r3, [r3, #0]
    826a:	0018      	movs	r0, r3
    826c:	4b0d      	ldr	r3, [pc, #52]	; (82a4 <port_pin_set_output_level+0x50>)
    826e:	4798      	blx	r3
    8270:	0003      	movs	r3, r0
    8272:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8274:	1dfb      	adds	r3, r7, #7
    8276:	781b      	ldrb	r3, [r3, #0]
    8278:	221f      	movs	r2, #31
    827a:	4013      	ands	r3, r2
    827c:	2201      	movs	r2, #1
    827e:	409a      	lsls	r2, r3
    8280:	0013      	movs	r3, r2
    8282:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8284:	1dbb      	adds	r3, r7, #6
    8286:	781b      	ldrb	r3, [r3, #0]
    8288:	2b00      	cmp	r3, #0
    828a:	d003      	beq.n	8294 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    828c:	68fb      	ldr	r3, [r7, #12]
    828e:	68ba      	ldr	r2, [r7, #8]
    8290:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    8292:	e002      	b.n	829a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8294:	68fb      	ldr	r3, [r7, #12]
    8296:	68ba      	ldr	r2, [r7, #8]
    8298:	615a      	str	r2, [r3, #20]
	}
}
    829a:	46c0      	nop			; (mov r8, r8)
    829c:	46bd      	mov	sp, r7
    829e:	b004      	add	sp, #16
    82a0:	bd80      	pop	{r7, pc}
    82a2:	46c0      	nop			; (mov r8, r8)
    82a4:	00008231 	.word	0x00008231

000082a8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    82a8:	b580      	push	{r7, lr}
    82aa:	b082      	sub	sp, #8
    82ac:	af00      	add	r7, sp, #0
    82ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    82b0:	687b      	ldr	r3, [r7, #4]
    82b2:	2200      	movs	r2, #0
    82b4:	701a      	strb	r2, [r3, #0]
}
    82b6:	46c0      	nop			; (mov r8, r8)
    82b8:	46bd      	mov	sp, r7
    82ba:	b002      	add	sp, #8
    82bc:	bd80      	pop	{r7, pc}
    82be:	46c0      	nop			; (mov r8, r8)

000082c0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    82c0:	b580      	push	{r7, lr}
    82c2:	b082      	sub	sp, #8
    82c4:	af00      	add	r7, sp, #0
    82c6:	0002      	movs	r2, r0
    82c8:	6039      	str	r1, [r7, #0]
    82ca:	1dfb      	adds	r3, r7, #7
    82cc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    82ce:	1dfb      	adds	r3, r7, #7
    82d0:	781b      	ldrb	r3, [r3, #0]
    82d2:	2b01      	cmp	r3, #1
    82d4:	d00a      	beq.n	82ec <system_apb_clock_set_mask+0x2c>
    82d6:	2b02      	cmp	r3, #2
    82d8:	d00f      	beq.n	82fa <system_apb_clock_set_mask+0x3a>
    82da:	2b00      	cmp	r3, #0
    82dc:	d114      	bne.n	8308 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    82de:	4b0e      	ldr	r3, [pc, #56]	; (8318 <system_apb_clock_set_mask+0x58>)
    82e0:	4a0d      	ldr	r2, [pc, #52]	; (8318 <system_apb_clock_set_mask+0x58>)
    82e2:	6991      	ldr	r1, [r2, #24]
    82e4:	683a      	ldr	r2, [r7, #0]
    82e6:	430a      	orrs	r2, r1
    82e8:	619a      	str	r2, [r3, #24]
			break;
    82ea:	e00f      	b.n	830c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    82ec:	4b0a      	ldr	r3, [pc, #40]	; (8318 <system_apb_clock_set_mask+0x58>)
    82ee:	4a0a      	ldr	r2, [pc, #40]	; (8318 <system_apb_clock_set_mask+0x58>)
    82f0:	69d1      	ldr	r1, [r2, #28]
    82f2:	683a      	ldr	r2, [r7, #0]
    82f4:	430a      	orrs	r2, r1
    82f6:	61da      	str	r2, [r3, #28]
			break;
    82f8:	e008      	b.n	830c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    82fa:	4b07      	ldr	r3, [pc, #28]	; (8318 <system_apb_clock_set_mask+0x58>)
    82fc:	4a06      	ldr	r2, [pc, #24]	; (8318 <system_apb_clock_set_mask+0x58>)
    82fe:	6a11      	ldr	r1, [r2, #32]
    8300:	683a      	ldr	r2, [r7, #0]
    8302:	430a      	orrs	r2, r1
    8304:	621a      	str	r2, [r3, #32]
			break;
    8306:	e001      	b.n	830c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8308:	2317      	movs	r3, #23
    830a:	e000      	b.n	830e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    830c:	2300      	movs	r3, #0
}
    830e:	0018      	movs	r0, r3
    8310:	46bd      	mov	sp, r7
    8312:	b002      	add	sp, #8
    8314:	bd80      	pop	{r7, pc}
    8316:	46c0      	nop			; (mov r8, r8)
    8318:	40000400 	.word	0x40000400

0000831c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    831c:	b580      	push	{r7, lr}
    831e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    8320:	4b05      	ldr	r3, [pc, #20]	; (8338 <system_is_debugger_present+0x1c>)
    8322:	789b      	ldrb	r3, [r3, #2]
    8324:	b2db      	uxtb	r3, r3
    8326:	001a      	movs	r2, r3
    8328:	2302      	movs	r3, #2
    832a:	4013      	ands	r3, r2
    832c:	1e5a      	subs	r2, r3, #1
    832e:	4193      	sbcs	r3, r2
    8330:	b2db      	uxtb	r3, r3
}
    8332:	0018      	movs	r0, r3
    8334:	46bd      	mov	sp, r7
    8336:	bd80      	pop	{r7, pc}
    8338:	41002000 	.word	0x41002000

0000833c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    833c:	b580      	push	{r7, lr}
    833e:	b084      	sub	sp, #16
    8340:	af00      	add	r7, sp, #0
    8342:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8344:	687b      	ldr	r3, [r7, #4]
    8346:	681b      	ldr	r3, [r3, #0]
    8348:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    834a:	68fb      	ldr	r3, [r7, #12]
    834c:	7e1b      	ldrb	r3, [r3, #24]
    834e:	b2db      	uxtb	r3, r3
    8350:	001a      	movs	r2, r3
    8352:	2301      	movs	r3, #1
    8354:	4013      	ands	r3, r2
    8356:	1e5a      	subs	r2, r3, #1
    8358:	4193      	sbcs	r3, r2
    835a:	b2db      	uxtb	r3, r3
}
    835c:	0018      	movs	r0, r3
    835e:	46bd      	mov	sp, r7
    8360:	b004      	add	sp, #16
    8362:	bd80      	pop	{r7, pc}

00008364 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    8364:	b580      	push	{r7, lr}
    8366:	b084      	sub	sp, #16
    8368:	af00      	add	r7, sp, #0
    836a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    836c:	687b      	ldr	r3, [r7, #4]
    836e:	681b      	ldr	r3, [r3, #0]
    8370:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    8372:	68fb      	ldr	r3, [r7, #12]
    8374:	7e1b      	ldrb	r3, [r3, #24]
    8376:	b2db      	uxtb	r3, r3
    8378:	001a      	movs	r2, r3
    837a:	2304      	movs	r3, #4
    837c:	4013      	ands	r3, r2
    837e:	1e5a      	subs	r2, r3, #1
    8380:	4193      	sbcs	r3, r2
    8382:	b2db      	uxtb	r3, r3
}
    8384:	0018      	movs	r0, r3
    8386:	46bd      	mov	sp, r7
    8388:	b004      	add	sp, #16
    838a:	bd80      	pop	{r7, pc}

0000838c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    838c:	b580      	push	{r7, lr}
    838e:	b084      	sub	sp, #16
    8390:	af00      	add	r7, sp, #0
    8392:	6078      	str	r0, [r7, #4]
    8394:	000a      	movs	r2, r1
    8396:	1cbb      	adds	r3, r7, #2
    8398:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    839a:	687b      	ldr	r3, [r7, #4]
    839c:	681b      	ldr	r3, [r3, #0]
    839e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    83a0:	687b      	ldr	r3, [r7, #4]
    83a2:	0018      	movs	r0, r3
    83a4:	4b0a      	ldr	r3, [pc, #40]	; (83d0 <spi_write+0x44>)
    83a6:	4798      	blx	r3
    83a8:	0003      	movs	r3, r0
    83aa:	001a      	movs	r2, r3
    83ac:	2301      	movs	r3, #1
    83ae:	4053      	eors	r3, r2
    83b0:	b2db      	uxtb	r3, r3
    83b2:	2b00      	cmp	r3, #0
    83b4:	d001      	beq.n	83ba <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    83b6:	2305      	movs	r3, #5
    83b8:	e006      	b.n	83c8 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    83ba:	1cbb      	adds	r3, r7, #2
    83bc:	881b      	ldrh	r3, [r3, #0]
    83be:	05db      	lsls	r3, r3, #23
    83c0:	0dda      	lsrs	r2, r3, #23
    83c2:	68fb      	ldr	r3, [r7, #12]
    83c4:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    83c6:	2300      	movs	r3, #0
}
    83c8:	0018      	movs	r0, r3
    83ca:	46bd      	mov	sp, r7
    83cc:	b004      	add	sp, #16
    83ce:	bd80      	pop	{r7, pc}
    83d0:	0000833d 	.word	0x0000833d

000083d4 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    83d4:	b580      	push	{r7, lr}
    83d6:	b084      	sub	sp, #16
    83d8:	af00      	add	r7, sp, #0
    83da:	6078      	str	r0, [r7, #4]
    83dc:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	681b      	ldr	r3, [r3, #0]
    83e2:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    83e4:	687b      	ldr	r3, [r7, #4]
    83e6:	0018      	movs	r0, r3
    83e8:	4b1b      	ldr	r3, [pc, #108]	; (8458 <spi_read+0x84>)
    83ea:	4798      	blx	r3
    83ec:	0003      	movs	r3, r0
    83ee:	001a      	movs	r2, r3
    83f0:	2301      	movs	r3, #1
    83f2:	4053      	eors	r3, r2
    83f4:	b2db      	uxtb	r3, r3
    83f6:	2b00      	cmp	r3, #0
    83f8:	d001      	beq.n	83fe <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    83fa:	2310      	movs	r3, #16
    83fc:	e027      	b.n	844e <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    83fe:	230f      	movs	r3, #15
    8400:	18fb      	adds	r3, r7, r3
    8402:	2200      	movs	r2, #0
    8404:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8406:	68bb      	ldr	r3, [r7, #8]
    8408:	8b5b      	ldrh	r3, [r3, #26]
    840a:	b29b      	uxth	r3, r3
    840c:	001a      	movs	r2, r3
    840e:	2304      	movs	r3, #4
    8410:	4013      	ands	r3, r2
    8412:	d006      	beq.n	8422 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    8414:	230f      	movs	r3, #15
    8416:	18fb      	adds	r3, r7, r3
    8418:	221e      	movs	r2, #30
    841a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    841c:	68bb      	ldr	r3, [r7, #8]
    841e:	2204      	movs	r2, #4
    8420:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8422:	687b      	ldr	r3, [r7, #4]
    8424:	799b      	ldrb	r3, [r3, #6]
    8426:	2b01      	cmp	r3, #1
    8428:	d108      	bne.n	843c <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    842a:	68bb      	ldr	r3, [r7, #8]
    842c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    842e:	b29b      	uxth	r3, r3
    8430:	05db      	lsls	r3, r3, #23
    8432:	0ddb      	lsrs	r3, r3, #23
    8434:	b29a      	uxth	r2, r3
    8436:	683b      	ldr	r3, [r7, #0]
    8438:	801a      	strh	r2, [r3, #0]
    843a:	e005      	b.n	8448 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    843c:	68bb      	ldr	r3, [r7, #8]
    843e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8440:	b2db      	uxtb	r3, r3
    8442:	b29a      	uxth	r2, r3
    8444:	683b      	ldr	r3, [r7, #0]
    8446:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    8448:	230f      	movs	r3, #15
    844a:	18fb      	adds	r3, r7, r3
    844c:	781b      	ldrb	r3, [r3, #0]
}
    844e:	0018      	movs	r0, r3
    8450:	46bd      	mov	sp, r7
    8452:	b004      	add	sp, #16
    8454:	bd80      	pop	{r7, pc}
    8456:	46c0      	nop			; (mov r8, r8)
    8458:	00008365 	.word	0x00008365

0000845c <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    845c:	b590      	push	{r4, r7, lr}
    845e:	b093      	sub	sp, #76	; 0x4c
    8460:	af00      	add	r7, sp, #0
    8462:	6078      	str	r0, [r7, #4]
    8464:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8466:	687b      	ldr	r3, [r7, #4]
    8468:	681b      	ldr	r3, [r3, #0]
    846a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    846c:	687b      	ldr	r3, [r7, #4]
    846e:	681b      	ldr	r3, [r3, #0]
    8470:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    8472:	231c      	movs	r3, #28
    8474:	18fb      	adds	r3, r7, r3
    8476:	0018      	movs	r0, r3
    8478:	4b75      	ldr	r3, [pc, #468]	; (8650 <_spi_set_config+0x1f4>)
    847a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    847c:	231c      	movs	r3, #28
    847e:	18fb      	adds	r3, r7, r3
    8480:	2200      	movs	r2, #0
    8482:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    8484:	683b      	ldr	r3, [r7, #0]
    8486:	781b      	ldrb	r3, [r3, #0]
    8488:	2b00      	cmp	r3, #0
    848a:	d103      	bne.n	8494 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    848c:	231c      	movs	r3, #28
    848e:	18fb      	adds	r3, r7, r3
    8490:	2200      	movs	r2, #0
    8492:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    8494:	683b      	ldr	r3, [r7, #0]
    8496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    8498:	230c      	movs	r3, #12
    849a:	18fb      	adds	r3, r7, r3
    849c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    849e:	683b      	ldr	r3, [r7, #0]
    84a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    84a2:	230c      	movs	r3, #12
    84a4:	18fb      	adds	r3, r7, r3
    84a6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    84a8:	683b      	ldr	r3, [r7, #0]
    84aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    84ac:	230c      	movs	r3, #12
    84ae:	18fb      	adds	r3, r7, r3
    84b0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    84b2:	683b      	ldr	r3, [r7, #0]
    84b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    84b6:	230c      	movs	r3, #12
    84b8:	18fb      	adds	r3, r7, r3
    84ba:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    84bc:	2347      	movs	r3, #71	; 0x47
    84be:	18fb      	adds	r3, r7, r3
    84c0:	2200      	movs	r2, #0
    84c2:	701a      	strb	r2, [r3, #0]
    84c4:	e02c      	b.n	8520 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    84c6:	2347      	movs	r3, #71	; 0x47
    84c8:	18fb      	adds	r3, r7, r3
    84ca:	781a      	ldrb	r2, [r3, #0]
    84cc:	230c      	movs	r3, #12
    84ce:	18fb      	adds	r3, r7, r3
    84d0:	0092      	lsls	r2, r2, #2
    84d2:	58d3      	ldr	r3, [r2, r3]
    84d4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    84d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    84d8:	2b00      	cmp	r3, #0
    84da:	d109      	bne.n	84f0 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    84dc:	2347      	movs	r3, #71	; 0x47
    84de:	18fb      	adds	r3, r7, r3
    84e0:	781a      	ldrb	r2, [r3, #0]
    84e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    84e4:	0011      	movs	r1, r2
    84e6:	0018      	movs	r0, r3
    84e8:	4b5a      	ldr	r3, [pc, #360]	; (8654 <_spi_set_config+0x1f8>)
    84ea:	4798      	blx	r3
    84ec:	0003      	movs	r3, r0
    84ee:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    84f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    84f2:	3301      	adds	r3, #1
    84f4:	d00d      	beq.n	8512 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    84f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    84f8:	b2da      	uxtb	r2, r3
    84fa:	231c      	movs	r3, #28
    84fc:	18fb      	adds	r3, r7, r3
    84fe:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    8500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8502:	0c1b      	lsrs	r3, r3, #16
    8504:	b2db      	uxtb	r3, r3
    8506:	221c      	movs	r2, #28
    8508:	18ba      	adds	r2, r7, r2
    850a:	0011      	movs	r1, r2
    850c:	0018      	movs	r0, r3
    850e:	4b52      	ldr	r3, [pc, #328]	; (8658 <_spi_set_config+0x1fc>)
    8510:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    8512:	2347      	movs	r3, #71	; 0x47
    8514:	18fb      	adds	r3, r7, r3
    8516:	781a      	ldrb	r2, [r3, #0]
    8518:	2347      	movs	r3, #71	; 0x47
    851a:	18fb      	adds	r3, r7, r3
    851c:	3201      	adds	r2, #1
    851e:	701a      	strb	r2, [r3, #0]
    8520:	2347      	movs	r3, #71	; 0x47
    8522:	18fb      	adds	r3, r7, r3
    8524:	781b      	ldrb	r3, [r3, #0]
    8526:	2b03      	cmp	r3, #3
    8528:	d9cd      	bls.n	84c6 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    852a:	683b      	ldr	r3, [r7, #0]
    852c:	781a      	ldrb	r2, [r3, #0]
    852e:	687b      	ldr	r3, [r7, #4]
    8530:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    8532:	683b      	ldr	r3, [r7, #0]
    8534:	7c1a      	ldrb	r2, [r3, #16]
    8536:	687b      	ldr	r3, [r7, #4]
    8538:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    853a:	683b      	ldr	r3, [r7, #0]
    853c:	7c9a      	ldrb	r2, [r3, #18]
    853e:	687b      	ldr	r3, [r7, #4]
    8540:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    8542:	683b      	ldr	r3, [r7, #0]
    8544:	7d1a      	ldrb	r2, [r3, #20]
    8546:	687b      	ldr	r3, [r7, #4]
    8548:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    854a:	230a      	movs	r3, #10
    854c:	18fb      	adds	r3, r7, r3
    854e:	2200      	movs	r2, #0
    8550:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    8552:	2300      	movs	r3, #0
    8554:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    8556:	2300      	movs	r3, #0
    8558:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    855a:	683b      	ldr	r3, [r7, #0]
    855c:	781b      	ldrb	r3, [r3, #0]
    855e:	2b01      	cmp	r3, #1
    8560:	d129      	bne.n	85b6 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	681b      	ldr	r3, [r3, #0]
    8566:	0018      	movs	r0, r3
    8568:	4b3c      	ldr	r3, [pc, #240]	; (865c <_spi_set_config+0x200>)
    856a:	4798      	blx	r3
    856c:	0003      	movs	r3, r0
    856e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8572:	3314      	adds	r3, #20
    8574:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    8576:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8578:	b2db      	uxtb	r3, r3
    857a:	0018      	movs	r0, r3
    857c:	4b38      	ldr	r3, [pc, #224]	; (8660 <_spi_set_config+0x204>)
    857e:	4798      	blx	r3
    8580:	0003      	movs	r3, r0
    8582:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    8584:	683b      	ldr	r3, [r7, #0]
    8586:	699b      	ldr	r3, [r3, #24]
    8588:	2223      	movs	r2, #35	; 0x23
    858a:	18bc      	adds	r4, r7, r2
    858c:	220a      	movs	r2, #10
    858e:	18ba      	adds	r2, r7, r2
    8590:	6a79      	ldr	r1, [r7, #36]	; 0x24
    8592:	0018      	movs	r0, r3
    8594:	4b33      	ldr	r3, [pc, #204]	; (8664 <_spi_set_config+0x208>)
    8596:	4798      	blx	r3
    8598:	0003      	movs	r3, r0
    859a:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    859c:	2323      	movs	r3, #35	; 0x23
    859e:	18fb      	adds	r3, r7, r3
    85a0:	781b      	ldrb	r3, [r3, #0]
    85a2:	2b00      	cmp	r3, #0
    85a4:	d001      	beq.n	85aa <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    85a6:	2317      	movs	r3, #23
    85a8:	e04e      	b.n	8648 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    85aa:	230a      	movs	r3, #10
    85ac:	18fb      	adds	r3, r7, r3
    85ae:	881b      	ldrh	r3, [r3, #0]
    85b0:	b2da      	uxtb	r2, r3
    85b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    85b4:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    85b6:	683b      	ldr	r3, [r7, #0]
    85b8:	685b      	ldr	r3, [r3, #4]
    85ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    85bc:	4313      	orrs	r3, r2
    85be:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    85c0:	683b      	ldr	r3, [r7, #0]
    85c2:	689b      	ldr	r3, [r3, #8]
    85c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    85c6:	4313      	orrs	r3, r2
    85c8:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    85ca:	683b      	ldr	r3, [r7, #0]
    85cc:	68db      	ldr	r3, [r3, #12]
    85ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    85d0:	4313      	orrs	r3, r2
    85d2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    85d4:	683b      	ldr	r3, [r7, #0]
    85d6:	7c1b      	ldrb	r3, [r3, #16]
    85d8:	001a      	movs	r2, r3
    85da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    85dc:	4313      	orrs	r3, r2
    85de:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    85e0:	683b      	ldr	r3, [r7, #0]
    85e2:	7c5b      	ldrb	r3, [r3, #17]
    85e4:	2b00      	cmp	r3, #0
    85e6:	d103      	bne.n	85f0 <_spi_set_config+0x194>
    85e8:	4b1f      	ldr	r3, [pc, #124]	; (8668 <_spi_set_config+0x20c>)
    85ea:	4798      	blx	r3
    85ec:	1e03      	subs	r3, r0, #0
    85ee:	d003      	beq.n	85f8 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    85f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    85f2:	2280      	movs	r2, #128	; 0x80
    85f4:	4313      	orrs	r3, r2
    85f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    85f8:	683b      	ldr	r3, [r7, #0]
    85fa:	7c9b      	ldrb	r3, [r3, #18]
    85fc:	2b00      	cmp	r3, #0
    85fe:	d004      	beq.n	860a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    8600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8602:	2280      	movs	r2, #128	; 0x80
    8604:	0292      	lsls	r2, r2, #10
    8606:	4313      	orrs	r3, r2
    8608:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    860a:	683b      	ldr	r3, [r7, #0]
    860c:	7cdb      	ldrb	r3, [r3, #19]
    860e:	2b00      	cmp	r3, #0
    8610:	d004      	beq.n	861c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    8612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8614:	2280      	movs	r2, #128	; 0x80
    8616:	0092      	lsls	r2, r2, #2
    8618:	4313      	orrs	r3, r2
    861a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    861c:	683b      	ldr	r3, [r7, #0]
    861e:	7d1b      	ldrb	r3, [r3, #20]
    8620:	2b00      	cmp	r3, #0
    8622:	d004      	beq.n	862e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    8624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8626:	2280      	movs	r2, #128	; 0x80
    8628:	0192      	lsls	r2, r2, #6
    862a:	4313      	orrs	r3, r2
    862c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    862e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8630:	681a      	ldr	r2, [r3, #0]
    8632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8634:	431a      	orrs	r2, r3
    8636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8638:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    863a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    863c:	685a      	ldr	r2, [r3, #4]
    863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8640:	431a      	orrs	r2, r3
    8642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8644:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    8646:	2300      	movs	r3, #0
}
    8648:	0018      	movs	r0, r3
    864a:	46bd      	mov	sp, r7
    864c:	b013      	add	sp, #76	; 0x4c
    864e:	bd90      	pop	{r4, r7, pc}
    8650:	000081a9 	.word	0x000081a9
    8654:	00007e41 	.word	0x00007e41
    8658:	0000a8b9 	.word	0x0000a8b9
    865c:	00007ffd 	.word	0x00007ffd
    8660:	0000a6f1 	.word	0x0000a6f1
    8664:	00007b4d 	.word	0x00007b4d
    8668:	0000831d 	.word	0x0000831d

0000866c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    866c:	b590      	push	{r4, r7, lr}
    866e:	b08b      	sub	sp, #44	; 0x2c
    8670:	af00      	add	r7, sp, #0
    8672:	60f8      	str	r0, [r7, #12]
    8674:	60b9      	str	r1, [r7, #8]
    8676:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    8678:	68fb      	ldr	r3, [r7, #12]
    867a:	68ba      	ldr	r2, [r7, #8]
    867c:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    867e:	68fb      	ldr	r3, [r7, #12]
    8680:	681b      	ldr	r3, [r3, #0]
    8682:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    8684:	6a3b      	ldr	r3, [r7, #32]
    8686:	681b      	ldr	r3, [r3, #0]
    8688:	2202      	movs	r2, #2
    868a:	4013      	ands	r3, r2
    868c:	d001      	beq.n	8692 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    868e:	231c      	movs	r3, #28
    8690:	e09c      	b.n	87cc <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    8692:	6a3b      	ldr	r3, [r7, #32]
    8694:	681b      	ldr	r3, [r3, #0]
    8696:	2201      	movs	r2, #1
    8698:	4013      	ands	r3, r2
    869a:	d001      	beq.n	86a0 <spi_init+0x34>
		return STATUS_BUSY;
    869c:	2305      	movs	r3, #5
    869e:	e095      	b.n	87cc <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    86a0:	68fb      	ldr	r3, [r7, #12]
    86a2:	681b      	ldr	r3, [r3, #0]
    86a4:	0018      	movs	r0, r3
    86a6:	4b4b      	ldr	r3, [pc, #300]	; (87d4 <spi_init+0x168>)
    86a8:	4798      	blx	r3
    86aa:	0003      	movs	r3, r0
    86ac:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    86ae:	69fb      	ldr	r3, [r7, #28]
    86b0:	3302      	adds	r3, #2
    86b2:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    86b4:	69fb      	ldr	r3, [r7, #28]
    86b6:	3314      	adds	r3, #20
    86b8:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    86ba:	2201      	movs	r2, #1
    86bc:	69bb      	ldr	r3, [r7, #24]
    86be:	409a      	lsls	r2, r3
    86c0:	0013      	movs	r3, r2
    86c2:	0019      	movs	r1, r3
    86c4:	2002      	movs	r0, #2
    86c6:	4b44      	ldr	r3, [pc, #272]	; (87d8 <spi_init+0x16c>)
    86c8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    86ca:	2310      	movs	r3, #16
    86cc:	18fb      	adds	r3, r7, r3
    86ce:	0018      	movs	r0, r3
    86d0:	4b42      	ldr	r3, [pc, #264]	; (87dc <spi_init+0x170>)
    86d2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    86d4:	687b      	ldr	r3, [r7, #4]
    86d6:	2224      	movs	r2, #36	; 0x24
    86d8:	5c9a      	ldrb	r2, [r3, r2]
    86da:	2310      	movs	r3, #16
    86dc:	18fb      	adds	r3, r7, r3
    86de:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    86e0:	697b      	ldr	r3, [r7, #20]
    86e2:	b2db      	uxtb	r3, r3
    86e4:	2210      	movs	r2, #16
    86e6:	18ba      	adds	r2, r7, r2
    86e8:	0011      	movs	r1, r2
    86ea:	0018      	movs	r0, r3
    86ec:	4b3c      	ldr	r3, [pc, #240]	; (87e0 <spi_init+0x174>)
    86ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    86f0:	697b      	ldr	r3, [r7, #20]
    86f2:	b2db      	uxtb	r3, r3
    86f4:	0018      	movs	r0, r3
    86f6:	4b3b      	ldr	r3, [pc, #236]	; (87e4 <spi_init+0x178>)
    86f8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    86fa:	687b      	ldr	r3, [r7, #4]
    86fc:	2224      	movs	r2, #36	; 0x24
    86fe:	5c9b      	ldrb	r3, [r3, r2]
    8700:	2100      	movs	r1, #0
    8702:	0018      	movs	r0, r3
    8704:	4b38      	ldr	r3, [pc, #224]	; (87e8 <spi_init+0x17c>)
    8706:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    8708:	687b      	ldr	r3, [r7, #4]
    870a:	781b      	ldrb	r3, [r3, #0]
    870c:	2b01      	cmp	r3, #1
    870e:	d105      	bne.n	871c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    8710:	6a3b      	ldr	r3, [r7, #32]
    8712:	681b      	ldr	r3, [r3, #0]
    8714:	220c      	movs	r2, #12
    8716:	431a      	orrs	r2, r3
    8718:	6a3b      	ldr	r3, [r7, #32]
    871a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    871c:	2327      	movs	r3, #39	; 0x27
    871e:	18fb      	adds	r3, r7, r3
    8720:	2200      	movs	r2, #0
    8722:	701a      	strb	r2, [r3, #0]
    8724:	e010      	b.n	8748 <spi_init+0xdc>
		module->callback[i]        = NULL;
    8726:	2327      	movs	r3, #39	; 0x27
    8728:	18fb      	adds	r3, r7, r3
    872a:	781b      	ldrb	r3, [r3, #0]
    872c:	68fa      	ldr	r2, [r7, #12]
    872e:	3302      	adds	r3, #2
    8730:	009b      	lsls	r3, r3, #2
    8732:	18d3      	adds	r3, r2, r3
    8734:	3304      	adds	r3, #4
    8736:	2200      	movs	r2, #0
    8738:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    873a:	2327      	movs	r3, #39	; 0x27
    873c:	18fb      	adds	r3, r7, r3
    873e:	781a      	ldrb	r2, [r3, #0]
    8740:	2327      	movs	r3, #39	; 0x27
    8742:	18fb      	adds	r3, r7, r3
    8744:	3201      	adds	r2, #1
    8746:	701a      	strb	r2, [r3, #0]
    8748:	2327      	movs	r3, #39	; 0x27
    874a:	18fb      	adds	r3, r7, r3
    874c:	781b      	ldrb	r3, [r3, #0]
    874e:	2b06      	cmp	r3, #6
    8750:	d9e9      	bls.n	8726 <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    8752:	68fb      	ldr	r3, [r7, #12]
    8754:	2200      	movs	r2, #0
    8756:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    8758:	68fb      	ldr	r3, [r7, #12]
    875a:	2200      	movs	r2, #0
    875c:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    875e:	68fb      	ldr	r3, [r7, #12]
    8760:	2200      	movs	r2, #0
    8762:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    8764:	68fb      	ldr	r3, [r7, #12]
    8766:	2200      	movs	r2, #0
    8768:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    876a:	68fb      	ldr	r3, [r7, #12]
    876c:	2236      	movs	r2, #54	; 0x36
    876e:	2100      	movs	r1, #0
    8770:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    8772:	68fb      	ldr	r3, [r7, #12]
    8774:	2237      	movs	r2, #55	; 0x37
    8776:	2100      	movs	r1, #0
    8778:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    877a:	68fb      	ldr	r3, [r7, #12]
    877c:	2238      	movs	r2, #56	; 0x38
    877e:	2100      	movs	r1, #0
    8780:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    8782:	68fb      	ldr	r3, [r7, #12]
    8784:	2203      	movs	r2, #3
    8786:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    8788:	68fb      	ldr	r3, [r7, #12]
    878a:	2200      	movs	r2, #0
    878c:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    878e:	68fb      	ldr	r3, [r7, #12]
    8790:	681b      	ldr	r3, [r3, #0]
    8792:	2213      	movs	r2, #19
    8794:	18bc      	adds	r4, r7, r2
    8796:	0018      	movs	r0, r3
    8798:	4b0e      	ldr	r3, [pc, #56]	; (87d4 <spi_init+0x168>)
    879a:	4798      	blx	r3
    879c:	0003      	movs	r3, r0
    879e:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    87a0:	4a12      	ldr	r2, [pc, #72]	; (87ec <spi_init+0x180>)
    87a2:	2313      	movs	r3, #19
    87a4:	18fb      	adds	r3, r7, r3
    87a6:	781b      	ldrb	r3, [r3, #0]
    87a8:	0011      	movs	r1, r2
    87aa:	0018      	movs	r0, r3
    87ac:	4b10      	ldr	r3, [pc, #64]	; (87f0 <spi_init+0x184>)
    87ae:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    87b0:	2313      	movs	r3, #19
    87b2:	18fb      	adds	r3, r7, r3
    87b4:	781a      	ldrb	r2, [r3, #0]
    87b6:	4b0f      	ldr	r3, [pc, #60]	; (87f4 <spi_init+0x188>)
    87b8:	0092      	lsls	r2, r2, #2
    87ba:	68f9      	ldr	r1, [r7, #12]
    87bc:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    87be:	687a      	ldr	r2, [r7, #4]
    87c0:	68fb      	ldr	r3, [r7, #12]
    87c2:	0011      	movs	r1, r2
    87c4:	0018      	movs	r0, r3
    87c6:	4b0c      	ldr	r3, [pc, #48]	; (87f8 <spi_init+0x18c>)
    87c8:	4798      	blx	r3
    87ca:	0003      	movs	r3, r0
}
    87cc:	0018      	movs	r0, r3
    87ce:	46bd      	mov	sp, r7
    87d0:	b00b      	add	sp, #44	; 0x2c
    87d2:	bd90      	pop	{r4, r7, pc}
    87d4:	00007ffd 	.word	0x00007ffd
    87d8:	000082c1 	.word	0x000082c1
    87dc:	000082a9 	.word	0x000082a9
    87e0:	0000a5cd 	.word	0x0000a5cd
    87e4:	0000a611 	.word	0x0000a611
    87e8:	00007db5 	.word	0x00007db5
    87ec:	00008b79 	.word	0x00008b79
    87f0:	00008061 	.word	0x00008061
    87f4:	20004768 	.word	0x20004768
    87f8:	0000845d 	.word	0x0000845d

000087fc <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    87fc:	b590      	push	{r4, r7, lr}
    87fe:	b087      	sub	sp, #28
    8800:	af00      	add	r7, sp, #0
    8802:	60f8      	str	r0, [r7, #12]
    8804:	60b9      	str	r1, [r7, #8]
    8806:	0019      	movs	r1, r3
    8808:	1dbb      	adds	r3, r7, #6
    880a:	801a      	strh	r2, [r3, #0]
    880c:	1d3b      	adds	r3, r7, #4
    880e:	1c0a      	adds	r2, r1, #0
    8810:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    8812:	68fb      	ldr	r3, [r7, #12]
    8814:	2238      	movs	r2, #56	; 0x38
    8816:	5c9b      	ldrb	r3, [r3, r2]
    8818:	b2db      	uxtb	r3, r3
    881a:	2b05      	cmp	r3, #5
    881c:	d101      	bne.n	8822 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    881e:	2305      	movs	r3, #5
    8820:	e07a      	b.n	8918 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    8822:	1dbb      	adds	r3, r7, #6
    8824:	881b      	ldrh	r3, [r3, #0]
    8826:	2b00      	cmp	r3, #0
    8828:	d101      	bne.n	882e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    882a:	2317      	movs	r3, #23
    882c:	e074      	b.n	8918 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    882e:	68fb      	ldr	r3, [r7, #12]
    8830:	79db      	ldrb	r3, [r3, #7]
    8832:	2201      	movs	r2, #1
    8834:	4053      	eors	r3, r2
    8836:	b2db      	uxtb	r3, r3
    8838:	2b00      	cmp	r3, #0
    883a:	d001      	beq.n	8840 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    883c:	231c      	movs	r3, #28
    883e:	e06b      	b.n	8918 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    8840:	2316      	movs	r3, #22
    8842:	18fb      	adds	r3, r7, r3
    8844:	2200      	movs	r2, #0
    8846:	801a      	strh	r2, [r3, #0]

	while (length--) {
    8848:	e05e      	b.n	8908 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    884a:	68fb      	ldr	r3, [r7, #12]
    884c:	795b      	ldrb	r3, [r3, #5]
    884e:	2b01      	cmp	r3, #1
    8850:	d112      	bne.n	8878 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    8852:	46c0      	nop			; (mov r8, r8)
    8854:	68fb      	ldr	r3, [r7, #12]
    8856:	0018      	movs	r0, r3
    8858:	4b31      	ldr	r3, [pc, #196]	; (8920 <spi_read_buffer_wait+0x124>)
    885a:	4798      	blx	r3
    885c:	0003      	movs	r3, r0
    885e:	001a      	movs	r2, r3
    8860:	2301      	movs	r3, #1
    8862:	4053      	eors	r3, r2
    8864:	b2db      	uxtb	r3, r3
    8866:	2b00      	cmp	r3, #0
    8868:	d1f4      	bne.n	8854 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    886a:	1d3b      	adds	r3, r7, #4
    886c:	881a      	ldrh	r2, [r3, #0]
    886e:	68fb      	ldr	r3, [r7, #12]
    8870:	0011      	movs	r1, r2
    8872:	0018      	movs	r0, r3
    8874:	4b2b      	ldr	r3, [pc, #172]	; (8924 <spi_read_buffer_wait+0x128>)
    8876:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    8878:	46c0      	nop			; (mov r8, r8)
    887a:	68fb      	ldr	r3, [r7, #12]
    887c:	0018      	movs	r0, r3
    887e:	4b2a      	ldr	r3, [pc, #168]	; (8928 <spi_read_buffer_wait+0x12c>)
    8880:	4798      	blx	r3
    8882:	0003      	movs	r3, r0
    8884:	001a      	movs	r2, r3
    8886:	2301      	movs	r3, #1
    8888:	4053      	eors	r3, r2
    888a:	b2db      	uxtb	r3, r3
    888c:	2b00      	cmp	r3, #0
    888e:	d1f4      	bne.n	887a <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    8890:	2312      	movs	r3, #18
    8892:	18fb      	adds	r3, r7, r3
    8894:	2200      	movs	r2, #0
    8896:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    8898:	2315      	movs	r3, #21
    889a:	18fc      	adds	r4, r7, r3
    889c:	2312      	movs	r3, #18
    889e:	18fa      	adds	r2, r7, r3
    88a0:	68fb      	ldr	r3, [r7, #12]
    88a2:	0011      	movs	r1, r2
    88a4:	0018      	movs	r0, r3
    88a6:	4b21      	ldr	r3, [pc, #132]	; (892c <spi_read_buffer_wait+0x130>)
    88a8:	4798      	blx	r3
    88aa:	0003      	movs	r3, r0
    88ac:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    88ae:	2315      	movs	r3, #21
    88b0:	18fb      	adds	r3, r7, r3
    88b2:	781b      	ldrb	r3, [r3, #0]
    88b4:	2b00      	cmp	r3, #0
    88b6:	d003      	beq.n	88c0 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    88b8:	2315      	movs	r3, #21
    88ba:	18fb      	adds	r3, r7, r3
    88bc:	781b      	ldrb	r3, [r3, #0]
    88be:	e02b      	b.n	8918 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    88c0:	2316      	movs	r3, #22
    88c2:	18fb      	adds	r3, r7, r3
    88c4:	881b      	ldrh	r3, [r3, #0]
    88c6:	2216      	movs	r2, #22
    88c8:	18ba      	adds	r2, r7, r2
    88ca:	1c59      	adds	r1, r3, #1
    88cc:	8011      	strh	r1, [r2, #0]
    88ce:	001a      	movs	r2, r3
    88d0:	68bb      	ldr	r3, [r7, #8]
    88d2:	189b      	adds	r3, r3, r2
    88d4:	2212      	movs	r2, #18
    88d6:	18ba      	adds	r2, r7, r2
    88d8:	8812      	ldrh	r2, [r2, #0]
    88da:	b2d2      	uxtb	r2, r2
    88dc:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    88de:	68fb      	ldr	r3, [r7, #12]
    88e0:	799b      	ldrb	r3, [r3, #6]
    88e2:	2b01      	cmp	r3, #1
    88e4:	d110      	bne.n	8908 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    88e6:	2316      	movs	r3, #22
    88e8:	18fb      	adds	r3, r7, r3
    88ea:	881b      	ldrh	r3, [r3, #0]
    88ec:	2216      	movs	r2, #22
    88ee:	18ba      	adds	r2, r7, r2
    88f0:	1c59      	adds	r1, r3, #1
    88f2:	8011      	strh	r1, [r2, #0]
    88f4:	001a      	movs	r2, r3
    88f6:	68bb      	ldr	r3, [r7, #8]
    88f8:	189b      	adds	r3, r3, r2
    88fa:	2212      	movs	r2, #18
    88fc:	18ba      	adds	r2, r7, r2
    88fe:	8812      	ldrh	r2, [r2, #0]
    8900:	0a12      	lsrs	r2, r2, #8
    8902:	b292      	uxth	r2, r2
    8904:	b2d2      	uxtb	r2, r2
    8906:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    8908:	1dbb      	adds	r3, r7, #6
    890a:	881b      	ldrh	r3, [r3, #0]
    890c:	1dba      	adds	r2, r7, #6
    890e:	1e59      	subs	r1, r3, #1
    8910:	8011      	strh	r1, [r2, #0]
    8912:	2b00      	cmp	r3, #0
    8914:	d199      	bne.n	884a <spi_read_buffer_wait+0x4e>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    8916:	2300      	movs	r3, #0
}
    8918:	0018      	movs	r0, r3
    891a:	46bd      	mov	sp, r7
    891c:	b007      	add	sp, #28
    891e:	bd90      	pop	{r4, r7, pc}
    8920:	0000833d 	.word	0x0000833d
    8924:	0000838d 	.word	0x0000838d
    8928:	00008365 	.word	0x00008365
    892c:	000083d5 	.word	0x000083d5

00008930 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    8930:	b580      	push	{r7, lr}
    8932:	b086      	sub	sp, #24
    8934:	af00      	add	r7, sp, #0
    8936:	60f8      	str	r0, [r7, #12]
    8938:	60b9      	str	r1, [r7, #8]
    893a:	1dfb      	adds	r3, r7, #7
    893c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    893e:	68fb      	ldr	r3, [r7, #12]
    8940:	795b      	ldrb	r3, [r3, #5]
    8942:	2b01      	cmp	r3, #1
    8944:	d001      	beq.n	894a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    8946:	2315      	movs	r3, #21
    8948:	e05c      	b.n	8a04 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    894a:	68fb      	ldr	r3, [r7, #12]
    894c:	7a1b      	ldrb	r3, [r3, #8]
    894e:	2201      	movs	r2, #1
    8950:	4053      	eors	r3, r2
    8952:	b2db      	uxtb	r3, r3
    8954:	2b00      	cmp	r3, #0
    8956:	d054      	beq.n	8a02 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    8958:	1dfb      	adds	r3, r7, #7
    895a:	781b      	ldrb	r3, [r3, #0]
    895c:	2b00      	cmp	r3, #0
    895e:	d04a      	beq.n	89f6 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    8960:	68bb      	ldr	r3, [r7, #8]
    8962:	785b      	ldrb	r3, [r3, #1]
    8964:	2b00      	cmp	r3, #0
    8966:	d03f      	beq.n	89e8 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    8968:	68fb      	ldr	r3, [r7, #12]
    896a:	0018      	movs	r0, r3
    896c:	4b27      	ldr	r3, [pc, #156]	; (8a0c <spi_select_slave+0xdc>)
    896e:	4798      	blx	r3
    8970:	0003      	movs	r3, r0
    8972:	001a      	movs	r2, r3
    8974:	2301      	movs	r3, #1
    8976:	4053      	eors	r3, r2
    8978:	b2db      	uxtb	r3, r3
    897a:	2b00      	cmp	r3, #0
    897c:	d007      	beq.n	898e <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    897e:	68bb      	ldr	r3, [r7, #8]
    8980:	781b      	ldrb	r3, [r3, #0]
    8982:	2101      	movs	r1, #1
    8984:	0018      	movs	r0, r3
    8986:	4b22      	ldr	r3, [pc, #136]	; (8a10 <spi_select_slave+0xe0>)
    8988:	4798      	blx	r3
					return STATUS_BUSY;
    898a:	2305      	movs	r3, #5
    898c:	e03a      	b.n	8a04 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    898e:	68bb      	ldr	r3, [r7, #8]
    8990:	781b      	ldrb	r3, [r3, #0]
    8992:	2100      	movs	r1, #0
    8994:	0018      	movs	r0, r3
    8996:	4b1e      	ldr	r3, [pc, #120]	; (8a10 <spi_select_slave+0xe0>)
    8998:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    899a:	68bb      	ldr	r3, [r7, #8]
    899c:	789b      	ldrb	r3, [r3, #2]
    899e:	b29a      	uxth	r2, r3
    89a0:	68fb      	ldr	r3, [r7, #12]
    89a2:	0011      	movs	r1, r2
    89a4:	0018      	movs	r0, r3
    89a6:	4b1b      	ldr	r3, [pc, #108]	; (8a14 <spi_select_slave+0xe4>)
    89a8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    89aa:	68fb      	ldr	r3, [r7, #12]
    89ac:	79db      	ldrb	r3, [r3, #7]
    89ae:	2201      	movs	r2, #1
    89b0:	4053      	eors	r3, r2
    89b2:	b2db      	uxtb	r3, r3
    89b4:	2b00      	cmp	r3, #0
    89b6:	d024      	beq.n	8a02 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    89b8:	46c0      	nop			; (mov r8, r8)
    89ba:	68fb      	ldr	r3, [r7, #12]
    89bc:	0018      	movs	r0, r3
    89be:	4b16      	ldr	r3, [pc, #88]	; (8a18 <spi_select_slave+0xe8>)
    89c0:	4798      	blx	r3
    89c2:	0003      	movs	r3, r0
    89c4:	001a      	movs	r2, r3
    89c6:	2301      	movs	r3, #1
    89c8:	4053      	eors	r3, r2
    89ca:	b2db      	uxtb	r3, r3
    89cc:	2b00      	cmp	r3, #0
    89ce:	d1f4      	bne.n	89ba <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    89d0:	2316      	movs	r3, #22
    89d2:	18fb      	adds	r3, r7, r3
    89d4:	2200      	movs	r2, #0
    89d6:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    89d8:	2316      	movs	r3, #22
    89da:	18fa      	adds	r2, r7, r3
    89dc:	68fb      	ldr	r3, [r7, #12]
    89de:	0011      	movs	r1, r2
    89e0:	0018      	movs	r0, r3
    89e2:	4b0e      	ldr	r3, [pc, #56]	; (8a1c <spi_select_slave+0xec>)
    89e4:	4798      	blx	r3
    89e6:	e00c      	b.n	8a02 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    89e8:	68bb      	ldr	r3, [r7, #8]
    89ea:	781b      	ldrb	r3, [r3, #0]
    89ec:	2100      	movs	r1, #0
    89ee:	0018      	movs	r0, r3
    89f0:	4b07      	ldr	r3, [pc, #28]	; (8a10 <spi_select_slave+0xe0>)
    89f2:	4798      	blx	r3
    89f4:	e005      	b.n	8a02 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    89f6:	68bb      	ldr	r3, [r7, #8]
    89f8:	781b      	ldrb	r3, [r3, #0]
    89fa:	2101      	movs	r1, #1
    89fc:	0018      	movs	r0, r3
    89fe:	4b04      	ldr	r3, [pc, #16]	; (8a10 <spi_select_slave+0xe0>)
    8a00:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    8a02:	2300      	movs	r3, #0
}
    8a04:	0018      	movs	r0, r3
    8a06:	46bd      	mov	sp, r7
    8a08:	b006      	add	sp, #24
    8a0a:	bd80      	pop	{r7, pc}
    8a0c:	0000833d 	.word	0x0000833d
    8a10:	00008255 	.word	0x00008255
    8a14:	0000838d 	.word	0x0000838d
    8a18:	00008365 	.word	0x00008365
    8a1c:	000083d5 	.word	0x000083d5

00008a20 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    8a20:	b580      	push	{r7, lr}
    8a22:	b084      	sub	sp, #16
    8a24:	af00      	add	r7, sp, #0
    8a26:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8a28:	687b      	ldr	r3, [r7, #4]
    8a2a:	681b      	ldr	r3, [r3, #0]
    8a2c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    8a2e:	687b      	ldr	r3, [r7, #4]
    8a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8a32:	781b      	ldrb	r3, [r3, #0]
    8a34:	b2da      	uxtb	r2, r3
    8a36:	230e      	movs	r3, #14
    8a38:	18fb      	adds	r3, r7, r3
    8a3a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8a40:	1c5a      	adds	r2, r3, #1
    8a42:	687b      	ldr	r3, [r7, #4]
    8a44:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8a46:	687b      	ldr	r3, [r7, #4]
    8a48:	799b      	ldrb	r3, [r3, #6]
    8a4a:	2b01      	cmp	r3, #1
    8a4c:	d113      	bne.n	8a76 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    8a4e:	687b      	ldr	r3, [r7, #4]
    8a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8a52:	781b      	ldrb	r3, [r3, #0]
    8a54:	b2db      	uxtb	r3, r3
    8a56:	021b      	lsls	r3, r3, #8
    8a58:	b21a      	sxth	r2, r3
    8a5a:	230e      	movs	r3, #14
    8a5c:	18fb      	adds	r3, r7, r3
    8a5e:	2100      	movs	r1, #0
    8a60:	5e5b      	ldrsh	r3, [r3, r1]
    8a62:	4313      	orrs	r3, r2
    8a64:	b21a      	sxth	r2, r3
    8a66:	230e      	movs	r3, #14
    8a68:	18fb      	adds	r3, r7, r3
    8a6a:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    8a6c:	687b      	ldr	r3, [r7, #4]
    8a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8a70:	1c5a      	adds	r2, r3, #1
    8a72:	687b      	ldr	r3, [r7, #4]
    8a74:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    8a76:	230e      	movs	r3, #14
    8a78:	18fb      	adds	r3, r7, r3
    8a7a:	881b      	ldrh	r3, [r3, #0]
    8a7c:	05db      	lsls	r3, r3, #23
    8a7e:	0dda      	lsrs	r2, r3, #23
    8a80:	68bb      	ldr	r3, [r7, #8]
    8a82:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    8a84:	687b      	ldr	r3, [r7, #4]
    8a86:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8a88:	b29b      	uxth	r3, r3
    8a8a:	3b01      	subs	r3, #1
    8a8c:	b29a      	uxth	r2, r3
    8a8e:	687b      	ldr	r3, [r7, #4]
    8a90:	869a      	strh	r2, [r3, #52]	; 0x34
}
    8a92:	46c0      	nop			; (mov r8, r8)
    8a94:	46bd      	mov	sp, r7
    8a96:	b004      	add	sp, #16
    8a98:	bd80      	pop	{r7, pc}
    8a9a:	46c0      	nop			; (mov r8, r8)

00008a9c <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    8a9c:	b580      	push	{r7, lr}
    8a9e:	b084      	sub	sp, #16
    8aa0:	af00      	add	r7, sp, #0
    8aa2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8aa4:	687b      	ldr	r3, [r7, #4]
    8aa6:	681b      	ldr	r3, [r3, #0]
    8aa8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    8aaa:	4b08      	ldr	r3, [pc, #32]	; (8acc <_spi_write_dummy+0x30>)
    8aac:	881b      	ldrh	r3, [r3, #0]
    8aae:	001a      	movs	r2, r3
    8ab0:	68fb      	ldr	r3, [r7, #12]
    8ab2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    8ab4:	687b      	ldr	r3, [r7, #4]
    8ab6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8ab8:	b29b      	uxth	r3, r3
    8aba:	3b01      	subs	r3, #1
    8abc:	b29a      	uxth	r2, r3
    8abe:	687b      	ldr	r3, [r7, #4]
    8ac0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8ac2:	46c0      	nop			; (mov r8, r8)
    8ac4:	46bd      	mov	sp, r7
    8ac6:	b004      	add	sp, #16
    8ac8:	bd80      	pop	{r7, pc}
    8aca:	46c0      	nop			; (mov r8, r8)
    8acc:	20004780 	.word	0x20004780

00008ad0 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b084      	sub	sp, #16
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8ad8:	687b      	ldr	r3, [r7, #4]
    8ada:	681b      	ldr	r3, [r3, #0]
    8adc:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    8ade:	230a      	movs	r3, #10
    8ae0:	18fb      	adds	r3, r7, r3
    8ae2:	2200      	movs	r2, #0
    8ae4:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    8ae6:	68fb      	ldr	r3, [r7, #12]
    8ae8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8aea:	230a      	movs	r3, #10
    8aec:	18fb      	adds	r3, r7, r3
    8aee:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    8af0:	687b      	ldr	r3, [r7, #4]
    8af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8af4:	b29b      	uxth	r3, r3
    8af6:	3b01      	subs	r3, #1
    8af8:	b29a      	uxth	r2, r3
    8afa:	687b      	ldr	r3, [r7, #4]
    8afc:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8afe:	46c0      	nop			; (mov r8, r8)
    8b00:	46bd      	mov	sp, r7
    8b02:	b004      	add	sp, #16
    8b04:	bd80      	pop	{r7, pc}
    8b06:	46c0      	nop			; (mov r8, r8)

00008b08 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    8b08:	b580      	push	{r7, lr}
    8b0a:	b084      	sub	sp, #16
    8b0c:	af00      	add	r7, sp, #0
    8b0e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8b10:	687b      	ldr	r3, [r7, #4]
    8b12:	681b      	ldr	r3, [r3, #0]
    8b14:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    8b16:	68fb      	ldr	r3, [r7, #12]
    8b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b1a:	b29a      	uxth	r2, r3
    8b1c:	230a      	movs	r3, #10
    8b1e:	18fb      	adds	r3, r7, r3
    8b20:	05d2      	lsls	r2, r2, #23
    8b22:	0dd2      	lsrs	r2, r2, #23
    8b24:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    8b26:	687b      	ldr	r3, [r7, #4]
    8b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b2a:	220a      	movs	r2, #10
    8b2c:	18ba      	adds	r2, r7, r2
    8b2e:	8812      	ldrh	r2, [r2, #0]
    8b30:	b2d2      	uxtb	r2, r2
    8b32:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    8b34:	687b      	ldr	r3, [r7, #4]
    8b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b38:	1c5a      	adds	r2, r3, #1
    8b3a:	687b      	ldr	r3, [r7, #4]
    8b3c:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8b3e:	687b      	ldr	r3, [r7, #4]
    8b40:	799b      	ldrb	r3, [r3, #6]
    8b42:	2b01      	cmp	r3, #1
    8b44:	d10d      	bne.n	8b62 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    8b46:	687b      	ldr	r3, [r7, #4]
    8b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b4a:	220a      	movs	r2, #10
    8b4c:	18ba      	adds	r2, r7, r2
    8b4e:	8812      	ldrh	r2, [r2, #0]
    8b50:	0a12      	lsrs	r2, r2, #8
    8b52:	b292      	uxth	r2, r2
    8b54:	b2d2      	uxtb	r2, r2
    8b56:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    8b58:	687b      	ldr	r3, [r7, #4]
    8b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8b5c:	1c5a      	adds	r2, r3, #1
    8b5e:	687b      	ldr	r3, [r7, #4]
    8b60:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    8b62:	687b      	ldr	r3, [r7, #4]
    8b64:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    8b66:	b29b      	uxth	r3, r3
    8b68:	3b01      	subs	r3, #1
    8b6a:	b29a      	uxth	r2, r3
    8b6c:	687b      	ldr	r3, [r7, #4]
    8b6e:	861a      	strh	r2, [r3, #48]	; 0x30
}
    8b70:	46c0      	nop			; (mov r8, r8)
    8b72:	46bd      	mov	sp, r7
    8b74:	b004      	add	sp, #16
    8b76:	bd80      	pop	{r7, pc}

00008b78 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    8b78:	b580      	push	{r7, lr}
    8b7a:	b086      	sub	sp, #24
    8b7c:	af00      	add	r7, sp, #0
    8b7e:	0002      	movs	r2, r0
    8b80:	1dfb      	adds	r3, r7, #7
    8b82:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    8b84:	1dfb      	adds	r3, r7, #7
    8b86:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    8b88:	4b96      	ldr	r3, [pc, #600]	; (8de4 <_spi_interrupt_handler+0x26c>)
    8b8a:	0092      	lsls	r2, r2, #2
    8b8c:	58d3      	ldr	r3, [r2, r3]
    8b8e:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8b90:	697b      	ldr	r3, [r7, #20]
    8b92:	681b      	ldr	r3, [r3, #0]
    8b94:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    8b96:	697b      	ldr	r3, [r7, #20]
    8b98:	2237      	movs	r2, #55	; 0x37
    8b9a:	5c9a      	ldrb	r2, [r3, r2]
    8b9c:	697b      	ldr	r3, [r7, #20]
    8b9e:	2136      	movs	r1, #54	; 0x36
    8ba0:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    8ba2:	230f      	movs	r3, #15
    8ba4:	18fb      	adds	r3, r7, r3
    8ba6:	400a      	ands	r2, r1
    8ba8:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    8baa:	693b      	ldr	r3, [r7, #16]
    8bac:	7e1b      	ldrb	r3, [r3, #24]
    8bae:	b2da      	uxtb	r2, r3
    8bb0:	230c      	movs	r3, #12
    8bb2:	18fb      	adds	r3, r7, r3
    8bb4:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    8bb6:	693b      	ldr	r3, [r7, #16]
    8bb8:	7d9b      	ldrb	r3, [r3, #22]
    8bba:	b2db      	uxtb	r3, r3
    8bbc:	b29a      	uxth	r2, r3
    8bbe:	230c      	movs	r3, #12
    8bc0:	18fb      	adds	r3, r7, r3
    8bc2:	210c      	movs	r1, #12
    8bc4:	1879      	adds	r1, r7, r1
    8bc6:	8809      	ldrh	r1, [r1, #0]
    8bc8:	400a      	ands	r2, r1
    8bca:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    8bcc:	230c      	movs	r3, #12
    8bce:	18fb      	adds	r3, r7, r3
    8bd0:	881b      	ldrh	r3, [r3, #0]
    8bd2:	2201      	movs	r2, #1
    8bd4:	4013      	ands	r3, r2
    8bd6:	d038      	beq.n	8c4a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8bd8:	697b      	ldr	r3, [r7, #20]
    8bda:	795b      	ldrb	r3, [r3, #5]
    8bdc:	2b01      	cmp	r3, #1
    8bde:	d110      	bne.n	8c02 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    8be0:	697b      	ldr	r3, [r7, #20]
    8be2:	7a5b      	ldrb	r3, [r3, #9]
    8be4:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8be6:	2b00      	cmp	r3, #0
    8be8:	d10b      	bne.n	8c02 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    8bea:	697b      	ldr	r3, [r7, #20]
    8bec:	0018      	movs	r0, r3
    8bee:	4b7e      	ldr	r3, [pc, #504]	; (8de8 <_spi_interrupt_handler+0x270>)
    8bf0:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    8bf2:	697b      	ldr	r3, [r7, #20]
    8bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8bf6:	b29b      	uxth	r3, r3
    8bf8:	2b00      	cmp	r3, #0
    8bfa:	d102      	bne.n	8c02 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8bfc:	693b      	ldr	r3, [r7, #16]
    8bfe:	2201      	movs	r2, #1
    8c00:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    8c02:	697b      	ldr	r3, [r7, #20]
    8c04:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    8c06:	2b01      	cmp	r3, #1
    8c08:	d11f      	bne.n	8c4a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    8c0a:	697b      	ldr	r3, [r7, #20]
    8c0c:	7a5b      	ldrb	r3, [r3, #9]
    8c0e:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    8c10:	2b00      	cmp	r3, #0
    8c12:	d01a      	beq.n	8c4a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    8c14:	697b      	ldr	r3, [r7, #20]
    8c16:	0018      	movs	r0, r3
    8c18:	4b74      	ldr	r3, [pc, #464]	; (8dec <_spi_interrupt_handler+0x274>)
    8c1a:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    8c1c:	697b      	ldr	r3, [r7, #20]
    8c1e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8c20:	b29b      	uxth	r3, r3
    8c22:	2b00      	cmp	r3, #0
    8c24:	d111      	bne.n	8c4a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8c26:	693b      	ldr	r3, [r7, #16]
    8c28:	2201      	movs	r2, #1
    8c2a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    8c2c:	697b      	ldr	r3, [r7, #20]
    8c2e:	7a5b      	ldrb	r3, [r3, #9]
    8c30:	b2db      	uxtb	r3, r3
    8c32:	2b01      	cmp	r3, #1
    8c34:	d109      	bne.n	8c4a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    8c36:	697b      	ldr	r3, [r7, #20]
    8c38:	79db      	ldrb	r3, [r3, #7]
    8c3a:	2201      	movs	r2, #1
    8c3c:	4053      	eors	r3, r2
    8c3e:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    8c40:	2b00      	cmp	r3, #0
    8c42:	d002      	beq.n	8c4a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8c44:	693b      	ldr	r3, [r7, #16]
    8c46:	2202      	movs	r2, #2
    8c48:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    8c4a:	230c      	movs	r3, #12
    8c4c:	18fb      	adds	r3, r7, r3
    8c4e:	881b      	ldrh	r3, [r3, #0]
    8c50:	2204      	movs	r2, #4
    8c52:	4013      	ands	r3, r2
    8c54:	d100      	bne.n	8c58 <_spi_interrupt_handler+0xe0>
    8c56:	e07e      	b.n	8d56 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    8c58:	693b      	ldr	r3, [r7, #16]
    8c5a:	8b5b      	ldrh	r3, [r3, #26]
    8c5c:	b29b      	uxth	r3, r3
    8c5e:	001a      	movs	r2, r3
    8c60:	2304      	movs	r3, #4
    8c62:	4013      	ands	r3, r2
    8c64:	d022      	beq.n	8cac <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    8c66:	697b      	ldr	r3, [r7, #20]
    8c68:	7a5b      	ldrb	r3, [r3, #9]
    8c6a:	b2db      	uxtb	r3, r3
    8c6c:	2b01      	cmp	r3, #1
    8c6e:	d014      	beq.n	8c9a <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    8c70:	697b      	ldr	r3, [r7, #20]
    8c72:	2238      	movs	r2, #56	; 0x38
    8c74:	211e      	movs	r1, #30
    8c76:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    8c78:	697b      	ldr	r3, [r7, #20]
    8c7a:	2203      	movs	r2, #3
    8c7c:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    8c7e:	693b      	ldr	r3, [r7, #16]
    8c80:	2205      	movs	r2, #5
    8c82:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    8c84:	230f      	movs	r3, #15
    8c86:	18fb      	adds	r3, r7, r3
    8c88:	781b      	ldrb	r3, [r3, #0]
    8c8a:	2208      	movs	r2, #8
    8c8c:	4013      	ands	r3, r2
    8c8e:	d004      	beq.n	8c9a <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    8c90:	697b      	ldr	r3, [r7, #20]
    8c92:	699b      	ldr	r3, [r3, #24]
    8c94:	697a      	ldr	r2, [r7, #20]
    8c96:	0010      	movs	r0, r2
    8c98:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    8c9a:	693b      	ldr	r3, [r7, #16]
    8c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8c9e:	230a      	movs	r3, #10
    8ca0:	18fb      	adds	r3, r7, r3
    8ca2:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8ca4:	693b      	ldr	r3, [r7, #16]
    8ca6:	2204      	movs	r2, #4
    8ca8:	835a      	strh	r2, [r3, #26]
    8caa:	e054      	b.n	8d56 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    8cac:	697b      	ldr	r3, [r7, #20]
    8cae:	7a5b      	ldrb	r3, [r3, #9]
    8cb0:	b2db      	uxtb	r3, r3
    8cb2:	2b01      	cmp	r3, #1
    8cb4:	d11e      	bne.n	8cf4 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    8cb6:	697b      	ldr	r3, [r7, #20]
    8cb8:	0018      	movs	r0, r3
    8cba:	4b4d      	ldr	r3, [pc, #308]	; (8df0 <_spi_interrupt_handler+0x278>)
    8cbc:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    8cbe:	697b      	ldr	r3, [r7, #20]
    8cc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8cc2:	b29b      	uxth	r3, r3
    8cc4:	2b00      	cmp	r3, #0
    8cc6:	d146      	bne.n	8d56 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8cc8:	693b      	ldr	r3, [r7, #16]
    8cca:	2204      	movs	r2, #4
    8ccc:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    8cce:	697b      	ldr	r3, [r7, #20]
    8cd0:	2238      	movs	r2, #56	; 0x38
    8cd2:	2100      	movs	r1, #0
    8cd4:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    8cd6:	697b      	ldr	r3, [r7, #20]
    8cd8:	2203      	movs	r2, #3
    8cda:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    8cdc:	230f      	movs	r3, #15
    8cde:	18fb      	adds	r3, r7, r3
    8ce0:	781b      	ldrb	r3, [r3, #0]
    8ce2:	2201      	movs	r2, #1
    8ce4:	4013      	ands	r3, r2
    8ce6:	d036      	beq.n	8d56 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    8ce8:	697b      	ldr	r3, [r7, #20]
    8cea:	68db      	ldr	r3, [r3, #12]
    8cec:	697a      	ldr	r2, [r7, #20]
    8cee:	0010      	movs	r0, r2
    8cf0:	4798      	blx	r3
    8cf2:	e030      	b.n	8d56 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    8cf4:	697b      	ldr	r3, [r7, #20]
    8cf6:	0018      	movs	r0, r3
    8cf8:	4b3e      	ldr	r3, [pc, #248]	; (8df4 <_spi_interrupt_handler+0x27c>)
    8cfa:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    8cfc:	697b      	ldr	r3, [r7, #20]
    8cfe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    8d00:	b29b      	uxth	r3, r3
    8d02:	2b00      	cmp	r3, #0
    8d04:	d127      	bne.n	8d56 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    8d06:	697b      	ldr	r3, [r7, #20]
    8d08:	2238      	movs	r2, #56	; 0x38
    8d0a:	2100      	movs	r1, #0
    8d0c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8d0e:	693b      	ldr	r3, [r7, #16]
    8d10:	2204      	movs	r2, #4
    8d12:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    8d14:	697b      	ldr	r3, [r7, #20]
    8d16:	7a5b      	ldrb	r3, [r3, #9]
    8d18:	b2db      	uxtb	r3, r3
    8d1a:	2b02      	cmp	r3, #2
    8d1c:	d10b      	bne.n	8d36 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    8d1e:	230f      	movs	r3, #15
    8d20:	18fb      	adds	r3, r7, r3
    8d22:	781b      	ldrb	r3, [r3, #0]
    8d24:	2204      	movs	r2, #4
    8d26:	4013      	ands	r3, r2
    8d28:	d015      	beq.n	8d56 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    8d2a:	697b      	ldr	r3, [r7, #20]
    8d2c:	695b      	ldr	r3, [r3, #20]
    8d2e:	697a      	ldr	r2, [r7, #20]
    8d30:	0010      	movs	r0, r2
    8d32:	4798      	blx	r3
    8d34:	e00f      	b.n	8d56 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    8d36:	697b      	ldr	r3, [r7, #20]
    8d38:	7a5b      	ldrb	r3, [r3, #9]
    8d3a:	b2db      	uxtb	r3, r3
    8d3c:	2b00      	cmp	r3, #0
    8d3e:	d10a      	bne.n	8d56 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    8d40:	230f      	movs	r3, #15
    8d42:	18fb      	adds	r3, r7, r3
    8d44:	781b      	ldrb	r3, [r3, #0]
    8d46:	2202      	movs	r2, #2
    8d48:	4013      	ands	r3, r2
    8d4a:	d004      	beq.n	8d56 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    8d4c:	697b      	ldr	r3, [r7, #20]
    8d4e:	691b      	ldr	r3, [r3, #16]
    8d50:	697a      	ldr	r2, [r7, #20]
    8d52:	0010      	movs	r0, r2
    8d54:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    8d56:	230c      	movs	r3, #12
    8d58:	18fb      	adds	r3, r7, r3
    8d5a:	881b      	ldrh	r3, [r3, #0]
    8d5c:	2202      	movs	r2, #2
    8d5e:	4013      	ands	r3, r2
    8d60:	d024      	beq.n	8dac <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8d62:	697b      	ldr	r3, [r7, #20]
    8d64:	795b      	ldrb	r3, [r3, #5]
    8d66:	2b01      	cmp	r3, #1
    8d68:	d120      	bne.n	8dac <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    8d6a:	697b      	ldr	r3, [r7, #20]
    8d6c:	7a5b      	ldrb	r3, [r3, #9]
    8d6e:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8d70:	2b01      	cmp	r3, #1
    8d72:	d11b      	bne.n	8dac <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    8d74:	697b      	ldr	r3, [r7, #20]
    8d76:	79db      	ldrb	r3, [r3, #7]
    8d78:	2201      	movs	r2, #1
    8d7a:	4053      	eors	r3, r2
    8d7c:	b2db      	uxtb	r3, r3
    8d7e:	2b00      	cmp	r3, #0
    8d80:	d014      	beq.n	8dac <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8d82:	693b      	ldr	r3, [r7, #16]
    8d84:	2202      	movs	r2, #2
    8d86:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    8d88:	697b      	ldr	r3, [r7, #20]
    8d8a:	2203      	movs	r2, #3
    8d8c:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    8d8e:	697b      	ldr	r3, [r7, #20]
    8d90:	2238      	movs	r2, #56	; 0x38
    8d92:	2100      	movs	r1, #0
    8d94:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    8d96:	230f      	movs	r3, #15
    8d98:	18fb      	adds	r3, r7, r3
    8d9a:	781b      	ldrb	r3, [r3, #0]
    8d9c:	2201      	movs	r2, #1
    8d9e:	4013      	ands	r3, r2
    8da0:	d004      	beq.n	8dac <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    8da2:	697b      	ldr	r3, [r7, #20]
    8da4:	68db      	ldr	r3, [r3, #12]
    8da6:	697a      	ldr	r2, [r7, #20]
    8da8:	0010      	movs	r0, r2
    8daa:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    8dac:	230c      	movs	r3, #12
    8dae:	18fb      	adds	r3, r7, r3
    8db0:	881b      	ldrh	r3, [r3, #0]
    8db2:	2280      	movs	r2, #128	; 0x80
    8db4:	4013      	ands	r3, r2
    8db6:	d010      	beq.n	8dda <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    8db8:	693b      	ldr	r3, [r7, #16]
    8dba:	2280      	movs	r2, #128	; 0x80
    8dbc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    8dbe:	693b      	ldr	r3, [r7, #16]
    8dc0:	2280      	movs	r2, #128	; 0x80
    8dc2:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    8dc4:	230f      	movs	r3, #15
    8dc6:	18fb      	adds	r3, r7, r3
    8dc8:	781b      	ldrb	r3, [r3, #0]
    8dca:	2240      	movs	r2, #64	; 0x40
    8dcc:	4013      	ands	r3, r2
    8dce:	d004      	beq.n	8dda <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    8dd0:	697b      	ldr	r3, [r7, #20]
    8dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8dd4:	697a      	ldr	r2, [r7, #20]
    8dd6:	0010      	movs	r0, r2
    8dd8:	4798      	blx	r3
		}
	}
#  endif
}
    8dda:	46c0      	nop			; (mov r8, r8)
    8ddc:	46bd      	mov	sp, r7
    8dde:	b006      	add	sp, #24
    8de0:	bd80      	pop	{r7, pc}
    8de2:	46c0      	nop			; (mov r8, r8)
    8de4:	20004768 	.word	0x20004768
    8de8:	00008a9d 	.word	0x00008a9d
    8dec:	00008a21 	.word	0x00008a21
    8df0:	00008ad1 	.word	0x00008ad1
    8df4:	00008b09 	.word	0x00008b09

00008df8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    8df8:	b580      	push	{r7, lr}
    8dfa:	b082      	sub	sp, #8
    8dfc:	af00      	add	r7, sp, #0
    8dfe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    8e00:	687b      	ldr	r3, [r7, #4]
    8e02:	2200      	movs	r2, #0
    8e04:	701a      	strb	r2, [r3, #0]
}
    8e06:	46c0      	nop			; (mov r8, r8)
    8e08:	46bd      	mov	sp, r7
    8e0a:	b002      	add	sp, #8
    8e0c:	bd80      	pop	{r7, pc}
    8e0e:	46c0      	nop			; (mov r8, r8)

00008e10 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    8e10:	b580      	push	{r7, lr}
    8e12:	b082      	sub	sp, #8
    8e14:	af00      	add	r7, sp, #0
    8e16:	0002      	movs	r2, r0
    8e18:	6039      	str	r1, [r7, #0]
    8e1a:	1dfb      	adds	r3, r7, #7
    8e1c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8e1e:	1dfb      	adds	r3, r7, #7
    8e20:	781b      	ldrb	r3, [r3, #0]
    8e22:	2b01      	cmp	r3, #1
    8e24:	d00a      	beq.n	8e3c <system_apb_clock_set_mask+0x2c>
    8e26:	2b02      	cmp	r3, #2
    8e28:	d00f      	beq.n	8e4a <system_apb_clock_set_mask+0x3a>
    8e2a:	2b00      	cmp	r3, #0
    8e2c:	d114      	bne.n	8e58 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    8e2e:	4b0e      	ldr	r3, [pc, #56]	; (8e68 <system_apb_clock_set_mask+0x58>)
    8e30:	4a0d      	ldr	r2, [pc, #52]	; (8e68 <system_apb_clock_set_mask+0x58>)
    8e32:	6991      	ldr	r1, [r2, #24]
    8e34:	683a      	ldr	r2, [r7, #0]
    8e36:	430a      	orrs	r2, r1
    8e38:	619a      	str	r2, [r3, #24]
			break;
    8e3a:	e00f      	b.n	8e5c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8e3c:	4b0a      	ldr	r3, [pc, #40]	; (8e68 <system_apb_clock_set_mask+0x58>)
    8e3e:	4a0a      	ldr	r2, [pc, #40]	; (8e68 <system_apb_clock_set_mask+0x58>)
    8e40:	69d1      	ldr	r1, [r2, #28]
    8e42:	683a      	ldr	r2, [r7, #0]
    8e44:	430a      	orrs	r2, r1
    8e46:	61da      	str	r2, [r3, #28]
			break;
    8e48:	e008      	b.n	8e5c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    8e4a:	4b07      	ldr	r3, [pc, #28]	; (8e68 <system_apb_clock_set_mask+0x58>)
    8e4c:	4a06      	ldr	r2, [pc, #24]	; (8e68 <system_apb_clock_set_mask+0x58>)
    8e4e:	6a11      	ldr	r1, [r2, #32]
    8e50:	683a      	ldr	r2, [r7, #0]
    8e52:	430a      	orrs	r2, r1
    8e54:	621a      	str	r2, [r3, #32]
			break;
    8e56:	e001      	b.n	8e5c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    8e58:	2317      	movs	r3, #23
    8e5a:	e000      	b.n	8e5e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    8e5c:	2300      	movs	r3, #0
}
    8e5e:	0018      	movs	r0, r3
    8e60:	46bd      	mov	sp, r7
    8e62:	b002      	add	sp, #8
    8e64:	bd80      	pop	{r7, pc}
    8e66:	46c0      	nop			; (mov r8, r8)
    8e68:	40000400 	.word	0x40000400

00008e6c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    8e6c:	b580      	push	{r7, lr}
    8e6e:	b082      	sub	sp, #8
    8e70:	af00      	add	r7, sp, #0
    8e72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    8e74:	687b      	ldr	r3, [r7, #4]
    8e76:	2280      	movs	r2, #128	; 0x80
    8e78:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8e7a:	687b      	ldr	r3, [r7, #4]
    8e7c:	2200      	movs	r2, #0
    8e7e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8e80:	687b      	ldr	r3, [r7, #4]
    8e82:	2201      	movs	r2, #1
    8e84:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8e86:	687b      	ldr	r3, [r7, #4]
    8e88:	2200      	movs	r2, #0
    8e8a:	70da      	strb	r2, [r3, #3]
}
    8e8c:	46c0      	nop			; (mov r8, r8)
    8e8e:	46bd      	mov	sp, r7
    8e90:	b002      	add	sp, #8
    8e92:	bd80      	pop	{r7, pc}

00008e94 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    8e94:	b580      	push	{r7, lr}
    8e96:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    8e98:	4b05      	ldr	r3, [pc, #20]	; (8eb0 <system_is_debugger_present+0x1c>)
    8e9a:	789b      	ldrb	r3, [r3, #2]
    8e9c:	b2db      	uxtb	r3, r3
    8e9e:	001a      	movs	r2, r3
    8ea0:	2302      	movs	r3, #2
    8ea2:	4013      	ands	r3, r2
    8ea4:	1e5a      	subs	r2, r3, #1
    8ea6:	4193      	sbcs	r3, r2
    8ea8:	b2db      	uxtb	r3, r3
}
    8eaa:	0018      	movs	r0, r3
    8eac:	46bd      	mov	sp, r7
    8eae:	bd80      	pop	{r7, pc}
    8eb0:	41002000 	.word	0x41002000

00008eb4 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    8eb4:	b580      	push	{r7, lr}
    8eb6:	b084      	sub	sp, #16
    8eb8:	af00      	add	r7, sp, #0
    8eba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	681b      	ldr	r3, [r3, #0]
    8ec0:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    8ec2:	68fb      	ldr	r3, [r7, #12]
    8ec4:	69db      	ldr	r3, [r3, #28]
    8ec6:	1e5a      	subs	r2, r3, #1
    8ec8:	4193      	sbcs	r3, r2
    8eca:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    8ecc:	0018      	movs	r0, r3
    8ece:	46bd      	mov	sp, r7
    8ed0:	b004      	add	sp, #16
    8ed2:	bd80      	pop	{r7, pc}

00008ed4 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    8ed4:	b580      	push	{r7, lr}
    8ed6:	b082      	sub	sp, #8
    8ed8:	af00      	add	r7, sp, #0
    8eda:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    8edc:	46c0      	nop			; (mov r8, r8)
    8ede:	687b      	ldr	r3, [r7, #4]
    8ee0:	0018      	movs	r0, r3
    8ee2:	4b04      	ldr	r3, [pc, #16]	; (8ef4 <_usart_wait_for_sync+0x20>)
    8ee4:	4798      	blx	r3
    8ee6:	1e03      	subs	r3, r0, #0
    8ee8:	d1f9      	bne.n	8ede <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    8eea:	46c0      	nop			; (mov r8, r8)
    8eec:	46bd      	mov	sp, r7
    8eee:	b002      	add	sp, #8
    8ef0:	bd80      	pop	{r7, pc}
    8ef2:	46c0      	nop			; (mov r8, r8)
    8ef4:	00008eb5 	.word	0x00008eb5

00008ef8 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    8ef8:	b5b0      	push	{r4, r5, r7, lr}
    8efa:	b08c      	sub	sp, #48	; 0x30
    8efc:	af02      	add	r7, sp, #8
    8efe:	6078      	str	r0, [r7, #4]
    8f00:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    8f02:	687b      	ldr	r3, [r7, #4]
    8f04:	681b      	ldr	r3, [r3, #0]
    8f06:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8f08:	687b      	ldr	r3, [r7, #4]
    8f0a:	681b      	ldr	r3, [r3, #0]
    8f0c:	0018      	movs	r0, r3
    8f0e:	4ba8      	ldr	r3, [pc, #672]	; (91b0 <_usart_set_config+0x2b8>)
    8f10:	4798      	blx	r3
    8f12:	0003      	movs	r3, r0
    8f14:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8f16:	697b      	ldr	r3, [r7, #20]
    8f18:	3314      	adds	r3, #20
    8f1a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    8f1c:	2300      	movs	r3, #0
    8f1e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    8f20:	2300      	movs	r3, #0
    8f22:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    8f24:	230a      	movs	r3, #10
    8f26:	18fb      	adds	r3, r7, r3
    8f28:	2200      	movs	r2, #0
    8f2a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8f2c:	231f      	movs	r3, #31
    8f2e:	18fb      	adds	r3, r7, r3
    8f30:	2200      	movs	r2, #0
    8f32:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8f34:	231e      	movs	r3, #30
    8f36:	18fb      	adds	r3, r7, r3
    8f38:	2210      	movs	r2, #16
    8f3a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    8f3c:	683b      	ldr	r3, [r7, #0]
    8f3e:	8a1b      	ldrh	r3, [r3, #16]
    8f40:	2280      	movs	r2, #128	; 0x80
    8f42:	01d2      	lsls	r2, r2, #7
    8f44:	4293      	cmp	r3, r2
    8f46:	d01c      	beq.n	8f82 <_usart_set_config+0x8a>
    8f48:	2280      	movs	r2, #128	; 0x80
    8f4a:	01d2      	lsls	r2, r2, #7
    8f4c:	4293      	cmp	r3, r2
    8f4e:	dc06      	bgt.n	8f5e <_usart_set_config+0x66>
    8f50:	2b00      	cmp	r3, #0
    8f52:	d00d      	beq.n	8f70 <_usart_set_config+0x78>
    8f54:	2280      	movs	r2, #128	; 0x80
    8f56:	0192      	lsls	r2, r2, #6
    8f58:	4293      	cmp	r3, r2
    8f5a:	d024      	beq.n	8fa6 <_usart_set_config+0xae>
    8f5c:	e035      	b.n	8fca <_usart_set_config+0xd2>
    8f5e:	22c0      	movs	r2, #192	; 0xc0
    8f60:	01d2      	lsls	r2, r2, #7
    8f62:	4293      	cmp	r3, r2
    8f64:	d028      	beq.n	8fb8 <_usart_set_config+0xc0>
    8f66:	2280      	movs	r2, #128	; 0x80
    8f68:	0212      	lsls	r2, r2, #8
    8f6a:	4293      	cmp	r3, r2
    8f6c:	d012      	beq.n	8f94 <_usart_set_config+0x9c>
    8f6e:	e02c      	b.n	8fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8f70:	231f      	movs	r3, #31
    8f72:	18fb      	adds	r3, r7, r3
    8f74:	2200      	movs	r2, #0
    8f76:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8f78:	231e      	movs	r3, #30
    8f7a:	18fb      	adds	r3, r7, r3
    8f7c:	2210      	movs	r2, #16
    8f7e:	701a      	strb	r2, [r3, #0]
			break;
    8f80:	e023      	b.n	8fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8f82:	231f      	movs	r3, #31
    8f84:	18fb      	adds	r3, r7, r3
    8f86:	2200      	movs	r2, #0
    8f88:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    8f8a:	231e      	movs	r3, #30
    8f8c:	18fb      	adds	r3, r7, r3
    8f8e:	2208      	movs	r2, #8
    8f90:	701a      	strb	r2, [r3, #0]
			break;
    8f92:	e01a      	b.n	8fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    8f94:	231f      	movs	r3, #31
    8f96:	18fb      	adds	r3, r7, r3
    8f98:	2200      	movs	r2, #0
    8f9a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    8f9c:	231e      	movs	r3, #30
    8f9e:	18fb      	adds	r3, r7, r3
    8fa0:	2203      	movs	r2, #3
    8fa2:	701a      	strb	r2, [r3, #0]
			break;
    8fa4:	e011      	b.n	8fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    8fa6:	231f      	movs	r3, #31
    8fa8:	18fb      	adds	r3, r7, r3
    8faa:	2201      	movs	r2, #1
    8fac:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    8fae:	231e      	movs	r3, #30
    8fb0:	18fb      	adds	r3, r7, r3
    8fb2:	2210      	movs	r2, #16
    8fb4:	701a      	strb	r2, [r3, #0]
			break;
    8fb6:	e008      	b.n	8fca <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    8fb8:	231f      	movs	r3, #31
    8fba:	18fb      	adds	r3, r7, r3
    8fbc:	2201      	movs	r2, #1
    8fbe:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    8fc0:	231e      	movs	r3, #30
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	2208      	movs	r2, #8
    8fc6:	701a      	strb	r2, [r3, #0]
			break;
    8fc8:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    8fca:	683b      	ldr	r3, [r7, #0]
    8fcc:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    8fce:	683b      	ldr	r3, [r7, #0]
    8fd0:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    8fd2:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    8fd4:	683b      	ldr	r3, [r7, #0]
    8fd6:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    8fd8:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    8fda:	683a      	ldr	r2, [r7, #0]
    8fdc:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    8fde:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    8fe0:	683a      	ldr	r2, [r7, #0]
    8fe2:	7e12      	ldrb	r2, [r2, #24]
    8fe4:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    8fe6:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    8fe8:	683a      	ldr	r2, [r7, #0]
    8fea:	2126      	movs	r1, #38	; 0x26
    8fec:	5c52      	ldrb	r2, [r2, r1]
    8fee:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    8ff0:	4313      	orrs	r3, r2
    8ff2:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    8ff4:	231d      	movs	r3, #29
    8ff6:	18fb      	adds	r3, r7, r3
    8ff8:	2200      	movs	r2, #0
    8ffa:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    8ffc:	683b      	ldr	r3, [r7, #0]
    8ffe:	685b      	ldr	r3, [r3, #4]
    9000:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    9002:	68fb      	ldr	r3, [r7, #12]
    9004:	2b00      	cmp	r3, #0
    9006:	d01e      	beq.n	9046 <_usart_set_config+0x14e>
    9008:	2280      	movs	r2, #128	; 0x80
    900a:	0552      	lsls	r2, r2, #21
    900c:	4293      	cmp	r3, r2
    900e:	d14f      	bne.n	90b0 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    9010:	683b      	ldr	r3, [r7, #0]
    9012:	2227      	movs	r2, #39	; 0x27
    9014:	5c9b      	ldrb	r3, [r3, r2]
    9016:	2201      	movs	r2, #1
    9018:	4053      	eors	r3, r2
    901a:	b2db      	uxtb	r3, r3
    901c:	2b00      	cmp	r3, #0
    901e:	d046      	beq.n	90ae <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    9020:	683b      	ldr	r3, [r7, #0]
    9022:	6a1d      	ldr	r5, [r3, #32]
    9024:	693b      	ldr	r3, [r7, #16]
    9026:	b2db      	uxtb	r3, r3
    9028:	0018      	movs	r0, r3
    902a:	4b62      	ldr	r3, [pc, #392]	; (91b4 <_usart_set_config+0x2bc>)
    902c:	4798      	blx	r3
    902e:	0001      	movs	r1, r0
    9030:	231d      	movs	r3, #29
    9032:	18fc      	adds	r4, r7, r3
    9034:	230a      	movs	r3, #10
    9036:	18fb      	adds	r3, r7, r3
    9038:	001a      	movs	r2, r3
    903a:	0028      	movs	r0, r5
    903c:	4b5e      	ldr	r3, [pc, #376]	; (91b8 <_usart_set_config+0x2c0>)
    903e:	4798      	blx	r3
    9040:	0003      	movs	r3, r0
    9042:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    9044:	e033      	b.n	90ae <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    9046:	683b      	ldr	r3, [r7, #0]
    9048:	2227      	movs	r2, #39	; 0x27
    904a:	5c9b      	ldrb	r3, [r3, r2]
    904c:	2b00      	cmp	r3, #0
    904e:	d014      	beq.n	907a <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    9050:	683b      	ldr	r3, [r7, #0]
    9052:	6a18      	ldr	r0, [r3, #32]
    9054:	683b      	ldr	r3, [r7, #0]
    9056:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    9058:	231d      	movs	r3, #29
    905a:	18fc      	adds	r4, r7, r3
    905c:	231f      	movs	r3, #31
    905e:	18fb      	adds	r3, r7, r3
    9060:	781d      	ldrb	r5, [r3, #0]
    9062:	230a      	movs	r3, #10
    9064:	18fa      	adds	r2, r7, r3
    9066:	231e      	movs	r3, #30
    9068:	18fb      	adds	r3, r7, r3
    906a:	781b      	ldrb	r3, [r3, #0]
    906c:	9300      	str	r3, [sp, #0]
    906e:	002b      	movs	r3, r5
    9070:	4d52      	ldr	r5, [pc, #328]	; (91bc <_usart_set_config+0x2c4>)
    9072:	47a8      	blx	r5
    9074:	0003      	movs	r3, r0
    9076:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    9078:	e01a      	b.n	90b0 <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    907a:	683b      	ldr	r3, [r7, #0]
    907c:	6a1d      	ldr	r5, [r3, #32]
    907e:	693b      	ldr	r3, [r7, #16]
    9080:	b2db      	uxtb	r3, r3
    9082:	0018      	movs	r0, r3
    9084:	4b4b      	ldr	r3, [pc, #300]	; (91b4 <_usart_set_config+0x2bc>)
    9086:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    9088:	231d      	movs	r3, #29
    908a:	18fc      	adds	r4, r7, r3
    908c:	231f      	movs	r3, #31
    908e:	18fb      	adds	r3, r7, r3
    9090:	7819      	ldrb	r1, [r3, #0]
    9092:	230a      	movs	r3, #10
    9094:	18fa      	adds	r2, r7, r3
    9096:	231e      	movs	r3, #30
    9098:	18fb      	adds	r3, r7, r3
    909a:	781b      	ldrb	r3, [r3, #0]
    909c:	9300      	str	r3, [sp, #0]
    909e:	000b      	movs	r3, r1
    90a0:	0001      	movs	r1, r0
    90a2:	0028      	movs	r0, r5
    90a4:	4d45      	ldr	r5, [pc, #276]	; (91bc <_usart_set_config+0x2c4>)
    90a6:	47a8      	blx	r5
    90a8:	0003      	movs	r3, r0
    90aa:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    90ac:	e000      	b.n	90b0 <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    90ae:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    90b0:	231d      	movs	r3, #29
    90b2:	18fb      	adds	r3, r7, r3
    90b4:	781b      	ldrb	r3, [r3, #0]
    90b6:	2b00      	cmp	r3, #0
    90b8:	d003      	beq.n	90c2 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    90ba:	231d      	movs	r3, #29
    90bc:	18fb      	adds	r3, r7, r3
    90be:	781b      	ldrb	r3, [r3, #0]
    90c0:	e071      	b.n	91a6 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    90c2:	683b      	ldr	r3, [r7, #0]
    90c4:	7e5b      	ldrb	r3, [r3, #25]
    90c6:	2b00      	cmp	r3, #0
    90c8:	d003      	beq.n	90d2 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    90ca:	683b      	ldr	r3, [r7, #0]
    90cc:	7e9a      	ldrb	r2, [r3, #26]
    90ce:	69bb      	ldr	r3, [r7, #24]
    90d0:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	0018      	movs	r0, r3
    90d6:	4b3a      	ldr	r3, [pc, #232]	; (91c0 <_usart_set_config+0x2c8>)
    90d8:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    90da:	230a      	movs	r3, #10
    90dc:	18fb      	adds	r3, r7, r3
    90de:	881a      	ldrh	r2, [r3, #0]
    90e0:	69bb      	ldr	r3, [r7, #24]
    90e2:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    90e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    90e6:	68fb      	ldr	r3, [r7, #12]
    90e8:	4313      	orrs	r3, r2
    90ea:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    90ec:	683b      	ldr	r3, [r7, #0]
    90ee:	2227      	movs	r2, #39	; 0x27
    90f0:	5c9b      	ldrb	r3, [r3, r2]
    90f2:	2201      	movs	r2, #1
    90f4:	4053      	eors	r3, r2
    90f6:	b2db      	uxtb	r3, r3
    90f8:	2b00      	cmp	r3, #0
    90fa:	d003      	beq.n	9104 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    90fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    90fe:	2204      	movs	r2, #4
    9100:	4313      	orrs	r3, r2
    9102:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    9104:	683b      	ldr	r3, [r7, #0]
    9106:	7e5b      	ldrb	r3, [r3, #25]
    9108:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    910a:	683b      	ldr	r3, [r7, #0]
    910c:	7f1b      	ldrb	r3, [r3, #28]
    910e:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    9110:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    9112:	683b      	ldr	r3, [r7, #0]
    9114:	7f5b      	ldrb	r3, [r3, #29]
    9116:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    9118:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    911a:	683b      	ldr	r3, [r7, #0]
    911c:	2124      	movs	r1, #36	; 0x24
    911e:	5c5b      	ldrb	r3, [r3, r1]
    9120:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    9122:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    9124:	683b      	ldr	r3, [r7, #0]
    9126:	2125      	movs	r1, #37	; 0x25
    9128:	5c5b      	ldrb	r3, [r3, r1]
    912a:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    912c:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    912e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    9130:	683b      	ldr	r3, [r7, #0]
    9132:	7adb      	ldrb	r3, [r3, #11]
    9134:	001a      	movs	r2, r3
    9136:	6a3b      	ldr	r3, [r7, #32]
    9138:	4313      	orrs	r3, r2
    913a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    913c:	683b      	ldr	r3, [r7, #0]
    913e:	891b      	ldrh	r3, [r3, #8]
    9140:	2bff      	cmp	r3, #255	; 0xff
    9142:	d00b      	beq.n	915c <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    9144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9146:	2280      	movs	r2, #128	; 0x80
    9148:	0452      	lsls	r2, r2, #17
    914a:	4313      	orrs	r3, r2
    914c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    914e:	683b      	ldr	r3, [r7, #0]
    9150:	891b      	ldrh	r3, [r3, #8]
    9152:	001a      	movs	r2, r3
    9154:	6a3b      	ldr	r3, [r7, #32]
    9156:	4313      	orrs	r3, r2
    9158:	623b      	str	r3, [r7, #32]
    915a:	e008      	b.n	916e <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    915c:	683b      	ldr	r3, [r7, #0]
    915e:	7edb      	ldrb	r3, [r3, #27]
    9160:	2b00      	cmp	r3, #0
    9162:	d004      	beq.n	916e <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    9164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9166:	2280      	movs	r2, #128	; 0x80
    9168:	04d2      	lsls	r2, r2, #19
    916a:	4313      	orrs	r3, r2
    916c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    916e:	683b      	ldr	r3, [r7, #0]
    9170:	222c      	movs	r2, #44	; 0x2c
    9172:	5c9b      	ldrb	r3, [r3, r2]
    9174:	2b00      	cmp	r3, #0
    9176:	d103      	bne.n	9180 <_usart_set_config+0x288>
    9178:	4b12      	ldr	r3, [pc, #72]	; (91c4 <_usart_set_config+0x2cc>)
    917a:	4798      	blx	r3
    917c:	1e03      	subs	r3, r0, #0
    917e:	d003      	beq.n	9188 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    9180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9182:	2280      	movs	r2, #128	; 0x80
    9184:	4313      	orrs	r3, r2
    9186:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9188:	687b      	ldr	r3, [r7, #4]
    918a:	0018      	movs	r0, r3
    918c:	4b0c      	ldr	r3, [pc, #48]	; (91c0 <_usart_set_config+0x2c8>)
    918e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    9190:	69bb      	ldr	r3, [r7, #24]
    9192:	6a3a      	ldr	r2, [r7, #32]
    9194:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9196:	687b      	ldr	r3, [r7, #4]
    9198:	0018      	movs	r0, r3
    919a:	4b09      	ldr	r3, [pc, #36]	; (91c0 <_usart_set_config+0x2c8>)
    919c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    919e:	69bb      	ldr	r3, [r7, #24]
    91a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    91a2:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    91a4:	2300      	movs	r3, #0
}
    91a6:	0018      	movs	r0, r3
    91a8:	46bd      	mov	sp, r7
    91aa:	b00a      	add	sp, #40	; 0x28
    91ac:	bdb0      	pop	{r4, r5, r7, pc}
    91ae:	46c0      	nop			; (mov r8, r8)
    91b0:	00007ffd 	.word	0x00007ffd
    91b4:	0000a6f1 	.word	0x0000a6f1
    91b8:	00007b4d 	.word	0x00007b4d
    91bc:	00007bc9 	.word	0x00007bc9
    91c0:	00008ed5 	.word	0x00008ed5
    91c4:	00008e95 	.word	0x00008e95

000091c8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    91c8:	b590      	push	{r4, r7, lr}
    91ca:	b093      	sub	sp, #76	; 0x4c
    91cc:	af00      	add	r7, sp, #0
    91ce:	60f8      	str	r0, [r7, #12]
    91d0:	60b9      	str	r1, [r7, #8]
    91d2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    91d4:	233b      	movs	r3, #59	; 0x3b
    91d6:	18fb      	adds	r3, r7, r3
    91d8:	2200      	movs	r2, #0
    91da:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    91dc:	68fb      	ldr	r3, [r7, #12]
    91de:	68ba      	ldr	r2, [r7, #8]
    91e0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    91e2:	68fb      	ldr	r3, [r7, #12]
    91e4:	681b      	ldr	r3, [r3, #0]
    91e6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    91e8:	68fb      	ldr	r3, [r7, #12]
    91ea:	681b      	ldr	r3, [r3, #0]
    91ec:	0018      	movs	r0, r3
    91ee:	4b86      	ldr	r3, [pc, #536]	; (9408 <usart_init+0x240>)
    91f0:	4798      	blx	r3
    91f2:	0003      	movs	r3, r0
    91f4:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    91f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    91f8:	3302      	adds	r3, #2
    91fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    91fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    91fe:	3314      	adds	r3, #20
    9200:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    9202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9204:	681b      	ldr	r3, [r3, #0]
    9206:	2201      	movs	r2, #1
    9208:	4013      	ands	r3, r2
    920a:	d001      	beq.n	9210 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    920c:	2305      	movs	r3, #5
    920e:	e0f6      	b.n	93fe <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    9210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9212:	681b      	ldr	r3, [r3, #0]
    9214:	2202      	movs	r2, #2
    9216:	4013      	ands	r3, r2
    9218:	d001      	beq.n	921e <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    921a:	231c      	movs	r3, #28
    921c:	e0ef      	b.n	93fe <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    921e:	2201      	movs	r2, #1
    9220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9222:	409a      	lsls	r2, r3
    9224:	0013      	movs	r3, r2
    9226:	0019      	movs	r1, r3
    9228:	2002      	movs	r0, #2
    922a:	4b78      	ldr	r3, [pc, #480]	; (940c <usart_init+0x244>)
    922c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    922e:	2324      	movs	r3, #36	; 0x24
    9230:	18fb      	adds	r3, r7, r3
    9232:	0018      	movs	r0, r3
    9234:	4b76      	ldr	r3, [pc, #472]	; (9410 <usart_init+0x248>)
    9236:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	222d      	movs	r2, #45	; 0x2d
    923c:	5c9a      	ldrb	r2, [r3, r2]
    923e:	2324      	movs	r3, #36	; 0x24
    9240:	18fb      	adds	r3, r7, r3
    9242:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    9244:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9246:	b2db      	uxtb	r3, r3
    9248:	2224      	movs	r2, #36	; 0x24
    924a:	18ba      	adds	r2, r7, r2
    924c:	0011      	movs	r1, r2
    924e:	0018      	movs	r0, r3
    9250:	4b70      	ldr	r3, [pc, #448]	; (9414 <usart_init+0x24c>)
    9252:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9254:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9256:	b2db      	uxtb	r3, r3
    9258:	0018      	movs	r0, r3
    925a:	4b6f      	ldr	r3, [pc, #444]	; (9418 <usart_init+0x250>)
    925c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    925e:	687b      	ldr	r3, [r7, #4]
    9260:	222d      	movs	r2, #45	; 0x2d
    9262:	5c9b      	ldrb	r3, [r3, r2]
    9264:	2100      	movs	r1, #0
    9266:	0018      	movs	r0, r3
    9268:	4b6c      	ldr	r3, [pc, #432]	; (941c <usart_init+0x254>)
    926a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    926c:	687b      	ldr	r3, [r7, #4]
    926e:	7ada      	ldrb	r2, [r3, #11]
    9270:	68fb      	ldr	r3, [r7, #12]
    9272:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    9274:	687b      	ldr	r3, [r7, #4]
    9276:	2224      	movs	r2, #36	; 0x24
    9278:	5c9a      	ldrb	r2, [r3, r2]
    927a:	68fb      	ldr	r3, [r7, #12]
    927c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    927e:	687b      	ldr	r3, [r7, #4]
    9280:	2225      	movs	r2, #37	; 0x25
    9282:	5c9a      	ldrb	r2, [r3, r2]
    9284:	68fb      	ldr	r3, [r7, #12]
    9286:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    9288:	687b      	ldr	r3, [r7, #4]
    928a:	7eda      	ldrb	r2, [r3, #27]
    928c:	68fb      	ldr	r3, [r7, #12]
    928e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    9290:	687b      	ldr	r3, [r7, #4]
    9292:	7f1a      	ldrb	r2, [r3, #28]
    9294:	68fb      	ldr	r3, [r7, #12]
    9296:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    9298:	233b      	movs	r3, #59	; 0x3b
    929a:	18fc      	adds	r4, r7, r3
    929c:	687a      	ldr	r2, [r7, #4]
    929e:	68fb      	ldr	r3, [r7, #12]
    92a0:	0011      	movs	r1, r2
    92a2:	0018      	movs	r0, r3
    92a4:	4b5e      	ldr	r3, [pc, #376]	; (9420 <usart_init+0x258>)
    92a6:	4798      	blx	r3
    92a8:	0003      	movs	r3, r0
    92aa:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    92ac:	233b      	movs	r3, #59	; 0x3b
    92ae:	18fb      	adds	r3, r7, r3
    92b0:	781b      	ldrb	r3, [r3, #0]
    92b2:	2b00      	cmp	r3, #0
    92b4:	d003      	beq.n	92be <usart_init+0xf6>
		return status_code;
    92b6:	233b      	movs	r3, #59	; 0x3b
    92b8:	18fb      	adds	r3, r7, r3
    92ba:	781b      	ldrb	r3, [r3, #0]
    92bc:	e09f      	b.n	93fe <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    92be:	2320      	movs	r3, #32
    92c0:	18fb      	adds	r3, r7, r3
    92c2:	0018      	movs	r0, r3
    92c4:	4b57      	ldr	r3, [pc, #348]	; (9424 <usart_init+0x25c>)
    92c6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    92c8:	2320      	movs	r3, #32
    92ca:	18fb      	adds	r3, r7, r3
    92cc:	2200      	movs	r2, #0
    92ce:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    92d0:	2320      	movs	r3, #32
    92d2:	18fb      	adds	r3, r7, r3
    92d4:	2200      	movs	r2, #0
    92d6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    92d8:	687b      	ldr	r3, [r7, #4]
    92da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    92dc:	2310      	movs	r3, #16
    92de:	18fb      	adds	r3, r7, r3
    92e0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    92e2:	687b      	ldr	r3, [r7, #4]
    92e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    92e6:	2310      	movs	r3, #16
    92e8:	18fb      	adds	r3, r7, r3
    92ea:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    92ec:	687b      	ldr	r3, [r7, #4]
    92ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    92f0:	2310      	movs	r3, #16
    92f2:	18fb      	adds	r3, r7, r3
    92f4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    92f6:	687b      	ldr	r3, [r7, #4]
    92f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    92fa:	2310      	movs	r3, #16
    92fc:	18fb      	adds	r3, r7, r3
    92fe:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    9300:	2347      	movs	r3, #71	; 0x47
    9302:	18fb      	adds	r3, r7, r3
    9304:	2200      	movs	r2, #0
    9306:	701a      	strb	r2, [r3, #0]
    9308:	e02c      	b.n	9364 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    930a:	2347      	movs	r3, #71	; 0x47
    930c:	18fb      	adds	r3, r7, r3
    930e:	781a      	ldrb	r2, [r3, #0]
    9310:	2310      	movs	r3, #16
    9312:	18fb      	adds	r3, r7, r3
    9314:	0092      	lsls	r2, r2, #2
    9316:	58d3      	ldr	r3, [r2, r3]
    9318:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    931a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    931c:	2b00      	cmp	r3, #0
    931e:	d109      	bne.n	9334 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    9320:	2347      	movs	r3, #71	; 0x47
    9322:	18fb      	adds	r3, r7, r3
    9324:	781a      	ldrb	r2, [r3, #0]
    9326:	68bb      	ldr	r3, [r7, #8]
    9328:	0011      	movs	r1, r2
    932a:	0018      	movs	r0, r3
    932c:	4b3e      	ldr	r3, [pc, #248]	; (9428 <usart_init+0x260>)
    932e:	4798      	blx	r3
    9330:	0003      	movs	r3, r0
    9332:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    9334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9336:	3301      	adds	r3, #1
    9338:	d00d      	beq.n	9356 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    933a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    933c:	b2da      	uxtb	r2, r3
    933e:	2320      	movs	r3, #32
    9340:	18fb      	adds	r3, r7, r3
    9342:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    9344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    9346:	0c1b      	lsrs	r3, r3, #16
    9348:	b2db      	uxtb	r3, r3
    934a:	2220      	movs	r2, #32
    934c:	18ba      	adds	r2, r7, r2
    934e:	0011      	movs	r1, r2
    9350:	0018      	movs	r0, r3
    9352:	4b36      	ldr	r3, [pc, #216]	; (942c <usart_init+0x264>)
    9354:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    9356:	2347      	movs	r3, #71	; 0x47
    9358:	18fb      	adds	r3, r7, r3
    935a:	781a      	ldrb	r2, [r3, #0]
    935c:	2347      	movs	r3, #71	; 0x47
    935e:	18fb      	adds	r3, r7, r3
    9360:	3201      	adds	r2, #1
    9362:	701a      	strb	r2, [r3, #0]
    9364:	2347      	movs	r3, #71	; 0x47
    9366:	18fb      	adds	r3, r7, r3
    9368:	781b      	ldrb	r3, [r3, #0]
    936a:	2b03      	cmp	r3, #3
    936c:	d9cd      	bls.n	930a <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    936e:	2300      	movs	r3, #0
    9370:	63fb      	str	r3, [r7, #60]	; 0x3c
    9372:	e00a      	b.n	938a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    9374:	68fa      	ldr	r2, [r7, #12]
    9376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9378:	3302      	adds	r3, #2
    937a:	009b      	lsls	r3, r3, #2
    937c:	18d3      	adds	r3, r2, r3
    937e:	3304      	adds	r3, #4
    9380:	2200      	movs	r2, #0
    9382:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    9384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9386:	3301      	adds	r3, #1
    9388:	63fb      	str	r3, [r7, #60]	; 0x3c
    938a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    938c:	2b05      	cmp	r3, #5
    938e:	d9f1      	bls.n	9374 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    9390:	68fb      	ldr	r3, [r7, #12]
    9392:	2200      	movs	r2, #0
    9394:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    9396:	68fb      	ldr	r3, [r7, #12]
    9398:	2200      	movs	r2, #0
    939a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    939c:	68fb      	ldr	r3, [r7, #12]
    939e:	2200      	movs	r2, #0
    93a0:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    93a2:	68fb      	ldr	r3, [r7, #12]
    93a4:	2200      	movs	r2, #0
    93a6:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    93a8:	68fb      	ldr	r3, [r7, #12]
    93aa:	2230      	movs	r2, #48	; 0x30
    93ac:	2100      	movs	r1, #0
    93ae:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    93b0:	68fb      	ldr	r3, [r7, #12]
    93b2:	2231      	movs	r2, #49	; 0x31
    93b4:	2100      	movs	r1, #0
    93b6:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    93b8:	68fb      	ldr	r3, [r7, #12]
    93ba:	2232      	movs	r2, #50	; 0x32
    93bc:	2100      	movs	r1, #0
    93be:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    93c0:	68fb      	ldr	r3, [r7, #12]
    93c2:	2233      	movs	r2, #51	; 0x33
    93c4:	2100      	movs	r1, #0
    93c6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    93c8:	68fb      	ldr	r3, [r7, #12]
    93ca:	681b      	ldr	r3, [r3, #0]
    93cc:	2227      	movs	r2, #39	; 0x27
    93ce:	18bc      	adds	r4, r7, r2
    93d0:	0018      	movs	r0, r3
    93d2:	4b0d      	ldr	r3, [pc, #52]	; (9408 <usart_init+0x240>)
    93d4:	4798      	blx	r3
    93d6:	0003      	movs	r3, r0
    93d8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    93da:	4a15      	ldr	r2, [pc, #84]	; (9430 <usart_init+0x268>)
    93dc:	2327      	movs	r3, #39	; 0x27
    93de:	18fb      	adds	r3, r7, r3
    93e0:	781b      	ldrb	r3, [r3, #0]
    93e2:	0011      	movs	r1, r2
    93e4:	0018      	movs	r0, r3
    93e6:	4b13      	ldr	r3, [pc, #76]	; (9434 <usart_init+0x26c>)
    93e8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    93ea:	2327      	movs	r3, #39	; 0x27
    93ec:	18fb      	adds	r3, r7, r3
    93ee:	781a      	ldrb	r2, [r3, #0]
    93f0:	4b11      	ldr	r3, [pc, #68]	; (9438 <usart_init+0x270>)
    93f2:	0092      	lsls	r2, r2, #2
    93f4:	68f9      	ldr	r1, [r7, #12]
    93f6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    93f8:	233b      	movs	r3, #59	; 0x3b
    93fa:	18fb      	adds	r3, r7, r3
    93fc:	781b      	ldrb	r3, [r3, #0]
}
    93fe:	0018      	movs	r0, r3
    9400:	46bd      	mov	sp, r7
    9402:	b013      	add	sp, #76	; 0x4c
    9404:	bd90      	pop	{r4, r7, pc}
    9406:	46c0      	nop			; (mov r8, r8)
    9408:	00007ffd 	.word	0x00007ffd
    940c:	00008e11 	.word	0x00008e11
    9410:	00008df9 	.word	0x00008df9
    9414:	0000a5cd 	.word	0x0000a5cd
    9418:	0000a611 	.word	0x0000a611
    941c:	00007db5 	.word	0x00007db5
    9420:	00008ef9 	.word	0x00008ef9
    9424:	00008e6d 	.word	0x00008e6d
    9428:	00007e41 	.word	0x00007e41
    942c:	0000a8b9 	.word	0x0000a8b9
    9430:	000095d1 	.word	0x000095d1
    9434:	00008061 	.word	0x00008061
    9438:	20004768 	.word	0x20004768

0000943c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    943c:	b580      	push	{r7, lr}
    943e:	b084      	sub	sp, #16
    9440:	af00      	add	r7, sp, #0
    9442:	6078      	str	r0, [r7, #4]
    9444:	000a      	movs	r2, r1
    9446:	1cbb      	adds	r3, r7, #2
    9448:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    944a:	687b      	ldr	r3, [r7, #4]
    944c:	681b      	ldr	r3, [r3, #0]
    944e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    9450:	687b      	ldr	r3, [r7, #4]
    9452:	79db      	ldrb	r3, [r3, #7]
    9454:	2201      	movs	r2, #1
    9456:	4053      	eors	r3, r2
    9458:	b2db      	uxtb	r3, r3
    945a:	2b00      	cmp	r3, #0
    945c:	d001      	beq.n	9462 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    945e:	231c      	movs	r3, #28
    9460:	e017      	b.n	9492 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    9462:	687b      	ldr	r3, [r7, #4]
    9464:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9466:	b29b      	uxth	r3, r3
    9468:	2b00      	cmp	r3, #0
    946a:	d001      	beq.n	9470 <usart_write_wait+0x34>
		return STATUS_BUSY;
    946c:	2305      	movs	r3, #5
    946e:	e010      	b.n	9492 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9470:	687b      	ldr	r3, [r7, #4]
    9472:	0018      	movs	r0, r3
    9474:	4b09      	ldr	r3, [pc, #36]	; (949c <usart_write_wait+0x60>)
    9476:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    9478:	68fb      	ldr	r3, [r7, #12]
    947a:	1cba      	adds	r2, r7, #2
    947c:	8812      	ldrh	r2, [r2, #0]
    947e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    9480:	46c0      	nop			; (mov r8, r8)
    9482:	68fb      	ldr	r3, [r7, #12]
    9484:	7e1b      	ldrb	r3, [r3, #24]
    9486:	b2db      	uxtb	r3, r3
    9488:	001a      	movs	r2, r3
    948a:	2302      	movs	r3, #2
    948c:	4013      	ands	r3, r2
    948e:	d0f8      	beq.n	9482 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    9490:	2300      	movs	r3, #0
}
    9492:	0018      	movs	r0, r3
    9494:	46bd      	mov	sp, r7
    9496:	b004      	add	sp, #16
    9498:	bd80      	pop	{r7, pc}
    949a:	46c0      	nop			; (mov r8, r8)
    949c:	00008ed5 	.word	0x00008ed5

000094a0 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    94a0:	b580      	push	{r7, lr}
    94a2:	b084      	sub	sp, #16
    94a4:	af00      	add	r7, sp, #0
    94a6:	6078      	str	r0, [r7, #4]
    94a8:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    94aa:	687b      	ldr	r3, [r7, #4]
    94ac:	681b      	ldr	r3, [r3, #0]
    94ae:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    94b0:	687b      	ldr	r3, [r7, #4]
    94b2:	799b      	ldrb	r3, [r3, #6]
    94b4:	2201      	movs	r2, #1
    94b6:	4053      	eors	r3, r2
    94b8:	b2db      	uxtb	r3, r3
    94ba:	2b00      	cmp	r3, #0
    94bc:	d001      	beq.n	94c2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    94be:	231c      	movs	r3, #28
    94c0:	e05e      	b.n	9580 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    94c2:	687b      	ldr	r3, [r7, #4]
    94c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    94c6:	b29b      	uxth	r3, r3
    94c8:	2b00      	cmp	r3, #0
    94ca:	d001      	beq.n	94d0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    94cc:	2305      	movs	r3, #5
    94ce:	e057      	b.n	9580 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    94d0:	68fb      	ldr	r3, [r7, #12]
    94d2:	7e1b      	ldrb	r3, [r3, #24]
    94d4:	b2db      	uxtb	r3, r3
    94d6:	001a      	movs	r2, r3
    94d8:	2304      	movs	r3, #4
    94da:	4013      	ands	r3, r2
    94dc:	d101      	bne.n	94e2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    94de:	2305      	movs	r3, #5
    94e0:	e04e      	b.n	9580 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    94e2:	687b      	ldr	r3, [r7, #4]
    94e4:	0018      	movs	r0, r3
    94e6:	4b28      	ldr	r3, [pc, #160]	; (9588 <usart_read_wait+0xe8>)
    94e8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    94ea:	68fb      	ldr	r3, [r7, #12]
    94ec:	8b5b      	ldrh	r3, [r3, #26]
    94ee:	b29b      	uxth	r3, r3
    94f0:	b2da      	uxtb	r2, r3
    94f2:	230b      	movs	r3, #11
    94f4:	18fb      	adds	r3, r7, r3
    94f6:	213f      	movs	r1, #63	; 0x3f
    94f8:	400a      	ands	r2, r1
    94fa:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    94fc:	230b      	movs	r3, #11
    94fe:	18fb      	adds	r3, r7, r3
    9500:	781b      	ldrb	r3, [r3, #0]
    9502:	2b00      	cmp	r3, #0
    9504:	d036      	beq.n	9574 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    9506:	230b      	movs	r3, #11
    9508:	18fb      	adds	r3, r7, r3
    950a:	781b      	ldrb	r3, [r3, #0]
    950c:	2202      	movs	r2, #2
    950e:	4013      	ands	r3, r2
    9510:	d004      	beq.n	951c <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    9512:	68fb      	ldr	r3, [r7, #12]
    9514:	2202      	movs	r2, #2
    9516:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    9518:	231a      	movs	r3, #26
    951a:	e031      	b.n	9580 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    951c:	230b      	movs	r3, #11
    951e:	18fb      	adds	r3, r7, r3
    9520:	781b      	ldrb	r3, [r3, #0]
    9522:	2204      	movs	r2, #4
    9524:	4013      	ands	r3, r2
    9526:	d004      	beq.n	9532 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    9528:	68fb      	ldr	r3, [r7, #12]
    952a:	2204      	movs	r2, #4
    952c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    952e:	231e      	movs	r3, #30
    9530:	e026      	b.n	9580 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    9532:	230b      	movs	r3, #11
    9534:	18fb      	adds	r3, r7, r3
    9536:	781b      	ldrb	r3, [r3, #0]
    9538:	2201      	movs	r2, #1
    953a:	4013      	ands	r3, r2
    953c:	d004      	beq.n	9548 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    953e:	68fb      	ldr	r3, [r7, #12]
    9540:	2201      	movs	r2, #1
    9542:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    9544:	2313      	movs	r3, #19
    9546:	e01b      	b.n	9580 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    9548:	230b      	movs	r3, #11
    954a:	18fb      	adds	r3, r7, r3
    954c:	781b      	ldrb	r3, [r3, #0]
    954e:	2210      	movs	r2, #16
    9550:	4013      	ands	r3, r2
    9552:	d004      	beq.n	955e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    9554:	68fb      	ldr	r3, [r7, #12]
    9556:	2210      	movs	r2, #16
    9558:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    955a:	2342      	movs	r3, #66	; 0x42
    955c:	e010      	b.n	9580 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    955e:	230b      	movs	r3, #11
    9560:	18fb      	adds	r3, r7, r3
    9562:	781b      	ldrb	r3, [r3, #0]
    9564:	2220      	movs	r2, #32
    9566:	4013      	ands	r3, r2
    9568:	d004      	beq.n	9574 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    956a:	68fb      	ldr	r3, [r7, #12]
    956c:	2220      	movs	r2, #32
    956e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    9570:	2341      	movs	r3, #65	; 0x41
    9572:	e005      	b.n	9580 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    9574:	68fb      	ldr	r3, [r7, #12]
    9576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9578:	b29a      	uxth	r2, r3
    957a:	683b      	ldr	r3, [r7, #0]
    957c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    957e:	2300      	movs	r3, #0
}
    9580:	0018      	movs	r0, r3
    9582:	46bd      	mov	sp, r7
    9584:	b004      	add	sp, #16
    9586:	bd80      	pop	{r7, pc}
    9588:	00008ed5 	.word	0x00008ed5

0000958c <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    958c:	b580      	push	{r7, lr}
    958e:	b084      	sub	sp, #16
    9590:	af00      	add	r7, sp, #0
    9592:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    9594:	687b      	ldr	r3, [r7, #4]
    9596:	681b      	ldr	r3, [r3, #0]
    9598:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    959a:	68fb      	ldr	r3, [r7, #12]
    959c:	69db      	ldr	r3, [r3, #28]
    959e:	1e5a      	subs	r2, r3, #1
    95a0:	4193      	sbcs	r3, r2
    95a2:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    95a4:	0018      	movs	r0, r3
    95a6:	46bd      	mov	sp, r7
    95a8:	b004      	add	sp, #16
    95aa:	bd80      	pop	{r7, pc}

000095ac <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    95ac:	b580      	push	{r7, lr}
    95ae:	b082      	sub	sp, #8
    95b0:	af00      	add	r7, sp, #0
    95b2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    95b4:	46c0      	nop			; (mov r8, r8)
    95b6:	687b      	ldr	r3, [r7, #4]
    95b8:	0018      	movs	r0, r3
    95ba:	4b04      	ldr	r3, [pc, #16]	; (95cc <_usart_wait_for_sync+0x20>)
    95bc:	4798      	blx	r3
    95be:	1e03      	subs	r3, r0, #0
    95c0:	d1f9      	bne.n	95b6 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    95c2:	46c0      	nop			; (mov r8, r8)
    95c4:	46bd      	mov	sp, r7
    95c6:	b002      	add	sp, #8
    95c8:	bd80      	pop	{r7, pc}
    95ca:	46c0      	nop			; (mov r8, r8)
    95cc:	0000958d 	.word	0x0000958d

000095d0 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    95d0:	b580      	push	{r7, lr}
    95d2:	b088      	sub	sp, #32
    95d4:	af00      	add	r7, sp, #0
    95d6:	0002      	movs	r2, r0
    95d8:	1dfb      	adds	r3, r7, #7
    95da:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    95dc:	1dfb      	adds	r3, r7, #7
    95de:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    95e0:	4ba3      	ldr	r3, [pc, #652]	; (9870 <_usart_interrupt_handler+0x2a0>)
    95e2:	0092      	lsls	r2, r2, #2
    95e4:	58d3      	ldr	r3, [r2, r3]
    95e6:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    95e8:	69bb      	ldr	r3, [r7, #24]
    95ea:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    95ec:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    95ee:	69bb      	ldr	r3, [r7, #24]
    95f0:	0018      	movs	r0, r3
    95f2:	4ba0      	ldr	r3, [pc, #640]	; (9874 <_usart_interrupt_handler+0x2a4>)
    95f4:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    95f6:	697b      	ldr	r3, [r7, #20]
    95f8:	7e1b      	ldrb	r3, [r3, #24]
    95fa:	b2da      	uxtb	r2, r3
    95fc:	2312      	movs	r3, #18
    95fe:	18fb      	adds	r3, r7, r3
    9600:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    9602:	697b      	ldr	r3, [r7, #20]
    9604:	7d9b      	ldrb	r3, [r3, #22]
    9606:	b2db      	uxtb	r3, r3
    9608:	b29a      	uxth	r2, r3
    960a:	2312      	movs	r3, #18
    960c:	18fb      	adds	r3, r7, r3
    960e:	2112      	movs	r1, #18
    9610:	1879      	adds	r1, r7, r1
    9612:	8809      	ldrh	r1, [r1, #0]
    9614:	400a      	ands	r2, r1
    9616:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    9618:	69bb      	ldr	r3, [r7, #24]
    961a:	2230      	movs	r2, #48	; 0x30
    961c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    961e:	69ba      	ldr	r2, [r7, #24]
    9620:	2131      	movs	r1, #49	; 0x31
    9622:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    9624:	4013      	ands	r3, r2
    9626:	b2da      	uxtb	r2, r3
    9628:	2310      	movs	r3, #16
    962a:	18fb      	adds	r3, r7, r3
    962c:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    962e:	2312      	movs	r3, #18
    9630:	18fb      	adds	r3, r7, r3
    9632:	881b      	ldrh	r3, [r3, #0]
    9634:	2201      	movs	r2, #1
    9636:	4013      	ands	r3, r2
    9638:	d044      	beq.n	96c4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    963a:	69bb      	ldr	r3, [r7, #24]
    963c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    963e:	b29b      	uxth	r3, r3
    9640:	2b00      	cmp	r3, #0
    9642:	d03c      	beq.n	96be <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    9644:	69bb      	ldr	r3, [r7, #24]
    9646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9648:	781b      	ldrb	r3, [r3, #0]
    964a:	b2da      	uxtb	r2, r3
    964c:	231c      	movs	r3, #28
    964e:	18fb      	adds	r3, r7, r3
    9650:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    9652:	69bb      	ldr	r3, [r7, #24]
    9654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9656:	1c5a      	adds	r2, r3, #1
    9658:	69bb      	ldr	r3, [r7, #24]
    965a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    965c:	69bb      	ldr	r3, [r7, #24]
    965e:	795b      	ldrb	r3, [r3, #5]
    9660:	2b01      	cmp	r3, #1
    9662:	d113      	bne.n	968c <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    9664:	69bb      	ldr	r3, [r7, #24]
    9666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9668:	781b      	ldrb	r3, [r3, #0]
    966a:	b2db      	uxtb	r3, r3
    966c:	021b      	lsls	r3, r3, #8
    966e:	b21a      	sxth	r2, r3
    9670:	231c      	movs	r3, #28
    9672:	18fb      	adds	r3, r7, r3
    9674:	2100      	movs	r1, #0
    9676:	5e5b      	ldrsh	r3, [r3, r1]
    9678:	4313      	orrs	r3, r2
    967a:	b21a      	sxth	r2, r3
    967c:	231c      	movs	r3, #28
    967e:	18fb      	adds	r3, r7, r3
    9680:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    9682:	69bb      	ldr	r3, [r7, #24]
    9684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9686:	1c5a      	adds	r2, r3, #1
    9688:	69bb      	ldr	r3, [r7, #24]
    968a:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    968c:	231c      	movs	r3, #28
    968e:	18fb      	adds	r3, r7, r3
    9690:	881b      	ldrh	r3, [r3, #0]
    9692:	05db      	lsls	r3, r3, #23
    9694:	0ddb      	lsrs	r3, r3, #23
    9696:	b29a      	uxth	r2, r3
    9698:	697b      	ldr	r3, [r7, #20]
    969a:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    969c:	69bb      	ldr	r3, [r7, #24]
    969e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    96a0:	b29b      	uxth	r3, r3
    96a2:	3b01      	subs	r3, #1
    96a4:	b29b      	uxth	r3, r3
    96a6:	69ba      	ldr	r2, [r7, #24]
    96a8:	1c19      	adds	r1, r3, #0
    96aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
    96ac:	2b00      	cmp	r3, #0
    96ae:	d109      	bne.n	96c4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    96b0:	697b      	ldr	r3, [r7, #20]
    96b2:	2201      	movs	r2, #1
    96b4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    96b6:	697b      	ldr	r3, [r7, #20]
    96b8:	2202      	movs	r2, #2
    96ba:	759a      	strb	r2, [r3, #22]
    96bc:	e002      	b.n	96c4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    96be:	697b      	ldr	r3, [r7, #20]
    96c0:	2201      	movs	r2, #1
    96c2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    96c4:	2312      	movs	r3, #18
    96c6:	18fb      	adds	r3, r7, r3
    96c8:	881b      	ldrh	r3, [r3, #0]
    96ca:	2202      	movs	r2, #2
    96cc:	4013      	ands	r3, r2
    96ce:	d011      	beq.n	96f4 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    96d0:	697b      	ldr	r3, [r7, #20]
    96d2:	2202      	movs	r2, #2
    96d4:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    96d6:	69bb      	ldr	r3, [r7, #24]
    96d8:	2233      	movs	r2, #51	; 0x33
    96da:	2100      	movs	r1, #0
    96dc:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    96de:	2310      	movs	r3, #16
    96e0:	18fb      	adds	r3, r7, r3
    96e2:	881b      	ldrh	r3, [r3, #0]
    96e4:	2201      	movs	r2, #1
    96e6:	4013      	ands	r3, r2
    96e8:	d004      	beq.n	96f4 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    96ea:	69bb      	ldr	r3, [r7, #24]
    96ec:	68db      	ldr	r3, [r3, #12]
    96ee:	69ba      	ldr	r2, [r7, #24]
    96f0:	0010      	movs	r0, r2
    96f2:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    96f4:	2312      	movs	r3, #18
    96f6:	18fb      	adds	r3, r7, r3
    96f8:	881b      	ldrh	r3, [r3, #0]
    96fa:	2204      	movs	r2, #4
    96fc:	4013      	ands	r3, r2
    96fe:	d100      	bne.n	9702 <_usart_interrupt_handler+0x132>
    9700:	e0bd      	b.n	987e <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    9702:	69bb      	ldr	r3, [r7, #24]
    9704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9706:	b29b      	uxth	r3, r3
    9708:	2b00      	cmp	r3, #0
    970a:	d100      	bne.n	970e <_usart_interrupt_handler+0x13e>
    970c:	e0b4      	b.n	9878 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    970e:	697b      	ldr	r3, [r7, #20]
    9710:	8b5b      	ldrh	r3, [r3, #26]
    9712:	b29b      	uxth	r3, r3
    9714:	b2da      	uxtb	r2, r3
    9716:	231f      	movs	r3, #31
    9718:	18fb      	adds	r3, r7, r3
    971a:	213f      	movs	r1, #63	; 0x3f
    971c:	400a      	ands	r2, r1
    971e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    9720:	231f      	movs	r3, #31
    9722:	18fb      	adds	r3, r7, r3
    9724:	781b      	ldrb	r3, [r3, #0]
    9726:	2208      	movs	r2, #8
    9728:	4013      	ands	r3, r2
    972a:	d007      	beq.n	973c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    972c:	231f      	movs	r3, #31
    972e:	18fb      	adds	r3, r7, r3
    9730:	221f      	movs	r2, #31
    9732:	18ba      	adds	r2, r7, r2
    9734:	7812      	ldrb	r2, [r2, #0]
    9736:	2108      	movs	r1, #8
    9738:	438a      	bics	r2, r1
    973a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    973c:	231f      	movs	r3, #31
    973e:	18fb      	adds	r3, r7, r3
    9740:	781b      	ldrb	r3, [r3, #0]
    9742:	2b00      	cmp	r3, #0
    9744:	d050      	beq.n	97e8 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    9746:	231f      	movs	r3, #31
    9748:	18fb      	adds	r3, r7, r3
    974a:	781b      	ldrb	r3, [r3, #0]
    974c:	2202      	movs	r2, #2
    974e:	4013      	ands	r3, r2
    9750:	d007      	beq.n	9762 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    9752:	69bb      	ldr	r3, [r7, #24]
    9754:	2232      	movs	r2, #50	; 0x32
    9756:	211a      	movs	r1, #26
    9758:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    975a:	697b      	ldr	r3, [r7, #20]
    975c:	2202      	movs	r2, #2
    975e:	835a      	strh	r2, [r3, #26]
    9760:	e036      	b.n	97d0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    9762:	231f      	movs	r3, #31
    9764:	18fb      	adds	r3, r7, r3
    9766:	781b      	ldrb	r3, [r3, #0]
    9768:	2204      	movs	r2, #4
    976a:	4013      	ands	r3, r2
    976c:	d007      	beq.n	977e <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    976e:	69bb      	ldr	r3, [r7, #24]
    9770:	2232      	movs	r2, #50	; 0x32
    9772:	211e      	movs	r1, #30
    9774:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    9776:	697b      	ldr	r3, [r7, #20]
    9778:	2204      	movs	r2, #4
    977a:	835a      	strh	r2, [r3, #26]
    977c:	e028      	b.n	97d0 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    977e:	231f      	movs	r3, #31
    9780:	18fb      	adds	r3, r7, r3
    9782:	781b      	ldrb	r3, [r3, #0]
    9784:	2201      	movs	r2, #1
    9786:	4013      	ands	r3, r2
    9788:	d007      	beq.n	979a <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    978a:	69bb      	ldr	r3, [r7, #24]
    978c:	2232      	movs	r2, #50	; 0x32
    978e:	2113      	movs	r1, #19
    9790:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    9792:	697b      	ldr	r3, [r7, #20]
    9794:	2201      	movs	r2, #1
    9796:	835a      	strh	r2, [r3, #26]
    9798:	e01a      	b.n	97d0 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    979a:	231f      	movs	r3, #31
    979c:	18fb      	adds	r3, r7, r3
    979e:	781b      	ldrb	r3, [r3, #0]
    97a0:	2210      	movs	r2, #16
    97a2:	4013      	ands	r3, r2
    97a4:	d007      	beq.n	97b6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    97a6:	69bb      	ldr	r3, [r7, #24]
    97a8:	2232      	movs	r2, #50	; 0x32
    97aa:	2142      	movs	r1, #66	; 0x42
    97ac:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    97ae:	697b      	ldr	r3, [r7, #20]
    97b0:	2210      	movs	r2, #16
    97b2:	835a      	strh	r2, [r3, #26]
    97b4:	e00c      	b.n	97d0 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    97b6:	231f      	movs	r3, #31
    97b8:	18fb      	adds	r3, r7, r3
    97ba:	781b      	ldrb	r3, [r3, #0]
    97bc:	2220      	movs	r2, #32
    97be:	4013      	ands	r3, r2
    97c0:	d006      	beq.n	97d0 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    97c2:	69bb      	ldr	r3, [r7, #24]
    97c4:	2232      	movs	r2, #50	; 0x32
    97c6:	2141      	movs	r1, #65	; 0x41
    97c8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    97ca:	697b      	ldr	r3, [r7, #20]
    97cc:	2220      	movs	r2, #32
    97ce:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    97d0:	2310      	movs	r3, #16
    97d2:	18fb      	adds	r3, r7, r3
    97d4:	881b      	ldrh	r3, [r3, #0]
    97d6:	2204      	movs	r2, #4
    97d8:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    97da:	d050      	beq.n	987e <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    97dc:	69bb      	ldr	r3, [r7, #24]
    97de:	695b      	ldr	r3, [r3, #20]
    97e0:	69ba      	ldr	r2, [r7, #24]
    97e2:	0010      	movs	r0, r2
    97e4:	4798      	blx	r3
    97e6:	e04a      	b.n	987e <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    97e8:	697b      	ldr	r3, [r7, #20]
    97ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    97ec:	b29a      	uxth	r2, r3
    97ee:	230e      	movs	r3, #14
    97f0:	18fb      	adds	r3, r7, r3
    97f2:	05d2      	lsls	r2, r2, #23
    97f4:	0dd2      	lsrs	r2, r2, #23
    97f6:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    97f8:	69bb      	ldr	r3, [r7, #24]
    97fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    97fc:	220e      	movs	r2, #14
    97fe:	18ba      	adds	r2, r7, r2
    9800:	8812      	ldrh	r2, [r2, #0]
    9802:	b2d2      	uxtb	r2, r2
    9804:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    9806:	69bb      	ldr	r3, [r7, #24]
    9808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    980a:	1c5a      	adds	r2, r3, #1
    980c:	69bb      	ldr	r3, [r7, #24]
    980e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    9810:	69bb      	ldr	r3, [r7, #24]
    9812:	795b      	ldrb	r3, [r3, #5]
    9814:	2b01      	cmp	r3, #1
    9816:	d10d      	bne.n	9834 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    9818:	69bb      	ldr	r3, [r7, #24]
    981a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    981c:	220e      	movs	r2, #14
    981e:	18ba      	adds	r2, r7, r2
    9820:	8812      	ldrh	r2, [r2, #0]
    9822:	0a12      	lsrs	r2, r2, #8
    9824:	b292      	uxth	r2, r2
    9826:	b2d2      	uxtb	r2, r2
    9828:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    982a:	69bb      	ldr	r3, [r7, #24]
    982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    982e:	1c5a      	adds	r2, r3, #1
    9830:	69bb      	ldr	r3, [r7, #24]
    9832:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    9834:	69bb      	ldr	r3, [r7, #24]
    9836:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9838:	b29b      	uxth	r3, r3
    983a:	3b01      	subs	r3, #1
    983c:	b29b      	uxth	r3, r3
    983e:	69ba      	ldr	r2, [r7, #24]
    9840:	1c19      	adds	r1, r3, #0
    9842:	8591      	strh	r1, [r2, #44]	; 0x2c
    9844:	2b00      	cmp	r3, #0
    9846:	d11a      	bne.n	987e <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    9848:	697b      	ldr	r3, [r7, #20]
    984a:	2204      	movs	r2, #4
    984c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    984e:	69bb      	ldr	r3, [r7, #24]
    9850:	2232      	movs	r2, #50	; 0x32
    9852:	2100      	movs	r1, #0
    9854:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    9856:	2310      	movs	r3, #16
    9858:	18fb      	adds	r3, r7, r3
    985a:	881b      	ldrh	r3, [r3, #0]
    985c:	2202      	movs	r2, #2
    985e:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    9860:	d00d      	beq.n	987e <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    9862:	69bb      	ldr	r3, [r7, #24]
    9864:	691b      	ldr	r3, [r3, #16]
    9866:	69ba      	ldr	r2, [r7, #24]
    9868:	0010      	movs	r0, r2
    986a:	4798      	blx	r3
    986c:	e007      	b.n	987e <_usart_interrupt_handler+0x2ae>
    986e:	46c0      	nop			; (mov r8, r8)
    9870:	20004768 	.word	0x20004768
    9874:	000095ad 	.word	0x000095ad
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    9878:	697b      	ldr	r3, [r7, #20]
    987a:	2204      	movs	r2, #4
    987c:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    987e:	2312      	movs	r3, #18
    9880:	18fb      	adds	r3, r7, r3
    9882:	881b      	ldrh	r3, [r3, #0]
    9884:	2210      	movs	r2, #16
    9886:	4013      	ands	r3, r2
    9888:	d010      	beq.n	98ac <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    988a:	697b      	ldr	r3, [r7, #20]
    988c:	2210      	movs	r2, #16
    988e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    9890:	697b      	ldr	r3, [r7, #20]
    9892:	2210      	movs	r2, #16
    9894:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    9896:	2310      	movs	r3, #16
    9898:	18fb      	adds	r3, r7, r3
    989a:	881b      	ldrh	r3, [r3, #0]
    989c:	2210      	movs	r2, #16
    989e:	4013      	ands	r3, r2
    98a0:	d004      	beq.n	98ac <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    98a2:	69bb      	ldr	r3, [r7, #24]
    98a4:	69db      	ldr	r3, [r3, #28]
    98a6:	69ba      	ldr	r2, [r7, #24]
    98a8:	0010      	movs	r0, r2
    98aa:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    98ac:	2312      	movs	r3, #18
    98ae:	18fb      	adds	r3, r7, r3
    98b0:	881b      	ldrh	r3, [r3, #0]
    98b2:	2220      	movs	r2, #32
    98b4:	4013      	ands	r3, r2
    98b6:	d010      	beq.n	98da <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    98b8:	697b      	ldr	r3, [r7, #20]
    98ba:	2220      	movs	r2, #32
    98bc:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    98be:	697b      	ldr	r3, [r7, #20]
    98c0:	2220      	movs	r2, #32
    98c2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    98c4:	2310      	movs	r3, #16
    98c6:	18fb      	adds	r3, r7, r3
    98c8:	881b      	ldrh	r3, [r3, #0]
    98ca:	2208      	movs	r2, #8
    98cc:	4013      	ands	r3, r2
    98ce:	d004      	beq.n	98da <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    98d0:	69bb      	ldr	r3, [r7, #24]
    98d2:	699b      	ldr	r3, [r3, #24]
    98d4:	69ba      	ldr	r2, [r7, #24]
    98d6:	0010      	movs	r0, r2
    98d8:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    98da:	2312      	movs	r3, #18
    98dc:	18fb      	adds	r3, r7, r3
    98de:	881b      	ldrh	r3, [r3, #0]
    98e0:	2208      	movs	r2, #8
    98e2:	4013      	ands	r3, r2
    98e4:	d010      	beq.n	9908 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    98e6:	697b      	ldr	r3, [r7, #20]
    98e8:	2208      	movs	r2, #8
    98ea:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    98ec:	697b      	ldr	r3, [r7, #20]
    98ee:	2208      	movs	r2, #8
    98f0:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    98f2:	2310      	movs	r3, #16
    98f4:	18fb      	adds	r3, r7, r3
    98f6:	881b      	ldrh	r3, [r3, #0]
    98f8:	2220      	movs	r2, #32
    98fa:	4013      	ands	r3, r2
    98fc:	d004      	beq.n	9908 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    98fe:	69bb      	ldr	r3, [r7, #24]
    9900:	6a1b      	ldr	r3, [r3, #32]
    9902:	69ba      	ldr	r2, [r7, #24]
    9904:	0010      	movs	r0, r2
    9906:	4798      	blx	r3
		}
	}
#endif
}
    9908:	46c0      	nop			; (mov r8, r8)
    990a:	46bd      	mov	sp, r7
    990c:	b008      	add	sp, #32
    990e:	bd80      	pop	{r7, pc}

00009910 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    9910:	b580      	push	{r7, lr}
    9912:	b082      	sub	sp, #8
    9914:	af00      	add	r7, sp, #0
    9916:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    9918:	687b      	ldr	r3, [r7, #4]
    991a:	2201      	movs	r2, #1
    991c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    991e:	687b      	ldr	r3, [r7, #4]
    9920:	2200      	movs	r2, #0
    9922:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    9924:	687b      	ldr	r3, [r7, #4]
    9926:	2206      	movs	r2, #6
    9928:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    992a:	687b      	ldr	r3, [r7, #4]
    992c:	2200      	movs	r2, #0
    992e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    9930:	687b      	ldr	r3, [r7, #4]
    9932:	2200      	movs	r2, #0
    9934:	725a      	strb	r2, [r3, #9]
}
    9936:	46c0      	nop			; (mov r8, r8)
    9938:	46bd      	mov	sp, r7
    993a:	b002      	add	sp, #8
    993c:	bd80      	pop	{r7, pc}
    993e:	46c0      	nop			; (mov r8, r8)

00009940 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    9940:	b580      	push	{r7, lr}
    9942:	b082      	sub	sp, #8
    9944:	af00      	add	r7, sp, #0
    9946:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    9948:	687b      	ldr	r3, [r7, #4]
    994a:	2200      	movs	r2, #0
    994c:	701a      	strb	r2, [r3, #0]
}
    994e:	46c0      	nop			; (mov r8, r8)
    9950:	46bd      	mov	sp, r7
    9952:	b002      	add	sp, #8
    9954:	bd80      	pop	{r7, pc}
    9956:	46c0      	nop			; (mov r8, r8)

00009958 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    9958:	b580      	push	{r7, lr}
    995a:	b082      	sub	sp, #8
    995c:	af00      	add	r7, sp, #0
    995e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    9960:	687b      	ldr	r3, [r7, #4]
    9962:	2200      	movs	r2, #0
    9964:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    9966:	687b      	ldr	r3, [r7, #4]
    9968:	2204      	movs	r2, #4
    996a:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    996c:	687b      	ldr	r3, [r7, #4]
    996e:	2200      	movs	r2, #0
    9970:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    9972:	687b      	ldr	r3, [r7, #4]
    9974:	2280      	movs	r2, #128	; 0x80
    9976:	0212      	lsls	r2, r2, #8
    9978:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    997a:	687b      	ldr	r3, [r7, #4]
    997c:	2200      	movs	r2, #0
    997e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    9980:	687b      	ldr	r3, [r7, #4]
    9982:	2201      	movs	r2, #1
    9984:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    9986:	687b      	ldr	r3, [r7, #4]
    9988:	2200      	movs	r2, #0
    998a:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    998c:	687b      	ldr	r3, [r7, #4]
    998e:	2201      	movs	r2, #1
    9990:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    9992:	687b      	ldr	r3, [r7, #4]
    9994:	2200      	movs	r2, #0
    9996:	739a      	strb	r2, [r3, #14]
}
    9998:	46c0      	nop			; (mov r8, r8)
    999a:	46bd      	mov	sp, r7
    999c:	b002      	add	sp, #8
    999e:	bd80      	pop	{r7, pc}

000099a0 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    99a0:	b580      	push	{r7, lr}
    99a2:	b082      	sub	sp, #8
    99a4:	af00      	add	r7, sp, #0
    99a6:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    99a8:	687b      	ldr	r3, [r7, #4]
    99aa:	2203      	movs	r2, #3
    99ac:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    99ae:	687b      	ldr	r3, [r7, #4]
    99b0:	2200      	movs	r2, #0
    99b2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    99b4:	687b      	ldr	r3, [r7, #4]
    99b6:	2201      	movs	r2, #1
    99b8:	709a      	strb	r2, [r3, #2]
}
    99ba:	46c0      	nop			; (mov r8, r8)
    99bc:	46bd      	mov	sp, r7
    99be:	b002      	add	sp, #8
    99c0:	bd80      	pop	{r7, pc}
    99c2:	46c0      	nop			; (mov r8, r8)

000099c4 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    99c4:	b580      	push	{r7, lr}
    99c6:	b082      	sub	sp, #8
    99c8:	af00      	add	r7, sp, #0
    99ca:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    99cc:	687b      	ldr	r3, [r7, #4]
    99ce:	2200      	movs	r2, #0
    99d0:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    99d2:	687b      	ldr	r3, [r7, #4]
    99d4:	2200      	movs	r2, #0
    99d6:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    99d8:	687b      	ldr	r3, [r7, #4]
    99da:	2200      	movs	r2, #0
    99dc:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    99de:	687b      	ldr	r3, [r7, #4]
    99e0:	2200      	movs	r2, #0
    99e2:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    99e4:	687b      	ldr	r3, [r7, #4]
    99e6:	2200      	movs	r2, #0
    99e8:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    99ea:	687b      	ldr	r3, [r7, #4]
    99ec:	2201      	movs	r2, #1
    99ee:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	2207      	movs	r2, #7
    99f4:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    99f6:	687b      	ldr	r3, [r7, #4]
    99f8:	223f      	movs	r2, #63	; 0x3f
    99fa:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    99fc:	687b      	ldr	r3, [r7, #4]
    99fe:	2201      	movs	r2, #1
    9a00:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    9a02:	687b      	ldr	r3, [r7, #4]
    9a04:	2201      	movs	r2, #1
    9a06:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    9a08:	687b      	ldr	r3, [r7, #4]
    9a0a:	2206      	movs	r2, #6
    9a0c:	821a      	strh	r2, [r3, #16]
}
    9a0e:	46c0      	nop			; (mov r8, r8)
    9a10:	46bd      	mov	sp, r7
    9a12:	b002      	add	sp, #8
    9a14:	bd80      	pop	{r7, pc}
    9a16:	46c0      	nop			; (mov r8, r8)

00009a18 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    9a18:	b580      	push	{r7, lr}
    9a1a:	b082      	sub	sp, #8
    9a1c:	af00      	add	r7, sp, #0
    9a1e:	0002      	movs	r2, r0
    9a20:	1dfb      	adds	r3, r7, #7
    9a22:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    9a24:	4a03      	ldr	r2, [pc, #12]	; (9a34 <system_cpu_clock_set_divider+0x1c>)
    9a26:	1dfb      	adds	r3, r7, #7
    9a28:	781b      	ldrb	r3, [r3, #0]
    9a2a:	7213      	strb	r3, [r2, #8]
}
    9a2c:	46c0      	nop			; (mov r8, r8)
    9a2e:	46bd      	mov	sp, r7
    9a30:	b002      	add	sp, #8
    9a32:	bd80      	pop	{r7, pc}
    9a34:	40000400 	.word	0x40000400

00009a38 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    9a38:	b580      	push	{r7, lr}
    9a3a:	b082      	sub	sp, #8
    9a3c:	af00      	add	r7, sp, #0
    9a3e:	0002      	movs	r2, r0
    9a40:	1dfb      	adds	r3, r7, #7
    9a42:	701a      	strb	r2, [r3, #0]
    9a44:	1dbb      	adds	r3, r7, #6
    9a46:	1c0a      	adds	r2, r1, #0
    9a48:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9a4a:	1dfb      	adds	r3, r7, #7
    9a4c:	781b      	ldrb	r3, [r3, #0]
    9a4e:	2b01      	cmp	r3, #1
    9a50:	d008      	beq.n	9a64 <system_apb_clock_set_divider+0x2c>
    9a52:	2b02      	cmp	r3, #2
    9a54:	d00b      	beq.n	9a6e <system_apb_clock_set_divider+0x36>
    9a56:	2b00      	cmp	r3, #0
    9a58:	d10e      	bne.n	9a78 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    9a5a:	4a0b      	ldr	r2, [pc, #44]	; (9a88 <system_apb_clock_set_divider+0x50>)
    9a5c:	1dbb      	adds	r3, r7, #6
    9a5e:	781b      	ldrb	r3, [r3, #0]
    9a60:	7253      	strb	r3, [r2, #9]
			break;
    9a62:	e00b      	b.n	9a7c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    9a64:	4a08      	ldr	r2, [pc, #32]	; (9a88 <system_apb_clock_set_divider+0x50>)
    9a66:	1dbb      	adds	r3, r7, #6
    9a68:	781b      	ldrb	r3, [r3, #0]
    9a6a:	7293      	strb	r3, [r2, #10]
			break;
    9a6c:	e006      	b.n	9a7c <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    9a6e:	4a06      	ldr	r2, [pc, #24]	; (9a88 <system_apb_clock_set_divider+0x50>)
    9a70:	1dbb      	adds	r3, r7, #6
    9a72:	781b      	ldrb	r3, [r3, #0]
    9a74:	72d3      	strb	r3, [r2, #11]
			break;
    9a76:	e001      	b.n	9a7c <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    9a78:	2317      	movs	r3, #23
    9a7a:	e000      	b.n	9a7e <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    9a7c:	2300      	movs	r3, #0
}
    9a7e:	0018      	movs	r0, r3
    9a80:	46bd      	mov	sp, r7
    9a82:	b002      	add	sp, #8
    9a84:	bd80      	pop	{r7, pc}
    9a86:	46c0      	nop			; (mov r8, r8)
    9a88:	40000400 	.word	0x40000400

00009a8c <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    9a8c:	b580      	push	{r7, lr}
    9a8e:	b082      	sub	sp, #8
    9a90:	af00      	add	r7, sp, #0
    9a92:	0002      	movs	r2, r0
    9a94:	1dfb      	adds	r3, r7, #7
    9a96:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    9a98:	4a08      	ldr	r2, [pc, #32]	; (9abc <system_flash_set_waitstates+0x30>)
    9a9a:	1dfb      	adds	r3, r7, #7
    9a9c:	781b      	ldrb	r3, [r3, #0]
    9a9e:	210f      	movs	r1, #15
    9aa0:	400b      	ands	r3, r1
    9aa2:	b2d9      	uxtb	r1, r3
    9aa4:	6853      	ldr	r3, [r2, #4]
    9aa6:	200f      	movs	r0, #15
    9aa8:	4001      	ands	r1, r0
    9aaa:	0049      	lsls	r1, r1, #1
    9aac:	201e      	movs	r0, #30
    9aae:	4383      	bics	r3, r0
    9ab0:	430b      	orrs	r3, r1
    9ab2:	6053      	str	r3, [r2, #4]
}
    9ab4:	46c0      	nop			; (mov r8, r8)
    9ab6:	46bd      	mov	sp, r7
    9ab8:	b002      	add	sp, #8
    9aba:	bd80      	pop	{r7, pc}
    9abc:	41004000 	.word	0x41004000

00009ac0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    9ac0:	b580      	push	{r7, lr}
    9ac2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    9ac4:	46c0      	nop			; (mov r8, r8)
    9ac6:	4b04      	ldr	r3, [pc, #16]	; (9ad8 <_system_dfll_wait_for_sync+0x18>)
    9ac8:	68db      	ldr	r3, [r3, #12]
    9aca:	2210      	movs	r2, #16
    9acc:	4013      	ands	r3, r2
    9ace:	d0fa      	beq.n	9ac6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    9ad0:	46c0      	nop			; (mov r8, r8)
    9ad2:	46bd      	mov	sp, r7
    9ad4:	bd80      	pop	{r7, pc}
    9ad6:	46c0      	nop			; (mov r8, r8)
    9ad8:	40000800 	.word	0x40000800

00009adc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    9adc:	b580      	push	{r7, lr}
    9ade:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    9ae0:	4b0c      	ldr	r3, [pc, #48]	; (9b14 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9ae2:	2202      	movs	r2, #2
    9ae4:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    9ae6:	4b0c      	ldr	r3, [pc, #48]	; (9b18 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    9ae8:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    9aea:	4a0a      	ldr	r2, [pc, #40]	; (9b14 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9aec:	4b0b      	ldr	r3, [pc, #44]	; (9b1c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9aee:	689b      	ldr	r3, [r3, #8]
    9af0:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    9af2:	4a08      	ldr	r2, [pc, #32]	; (9b14 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9af4:	4b09      	ldr	r3, [pc, #36]	; (9b1c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9af6:	685b      	ldr	r3, [r3, #4]
    9af8:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    9afa:	4b06      	ldr	r3, [pc, #24]	; (9b14 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9afc:	2200      	movs	r2, #0
    9afe:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    9b00:	4b05      	ldr	r3, [pc, #20]	; (9b18 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    9b02:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    9b04:	4a03      	ldr	r2, [pc, #12]	; (9b14 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9b06:	4b05      	ldr	r3, [pc, #20]	; (9b1c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9b08:	681b      	ldr	r3, [r3, #0]
    9b0a:	b29b      	uxth	r3, r3
    9b0c:	8493      	strh	r3, [r2, #36]	; 0x24
}
    9b0e:	46c0      	nop			; (mov r8, r8)
    9b10:	46bd      	mov	sp, r7
    9b12:	bd80      	pop	{r7, pc}
    9b14:	40000800 	.word	0x40000800
    9b18:	00009ac1 	.word	0x00009ac1
    9b1c:	20000114 	.word	0x20000114

00009b20 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    9b20:	b580      	push	{r7, lr}
    9b22:	b082      	sub	sp, #8
    9b24:	af00      	add	r7, sp, #0
    9b26:	0002      	movs	r2, r0
    9b28:	1dfb      	adds	r3, r7, #7
    9b2a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    9b2c:	1dfb      	adds	r3, r7, #7
    9b2e:	781b      	ldrb	r3, [r3, #0]
    9b30:	2b08      	cmp	r3, #8
    9b32:	d840      	bhi.n	9bb6 <system_clock_source_get_hz+0x96>
    9b34:	009a      	lsls	r2, r3, #2
    9b36:	4b22      	ldr	r3, [pc, #136]	; (9bc0 <system_clock_source_get_hz+0xa0>)
    9b38:	18d3      	adds	r3, r2, r3
    9b3a:	681b      	ldr	r3, [r3, #0]
    9b3c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    9b3e:	4b21      	ldr	r3, [pc, #132]	; (9bc4 <system_clock_source_get_hz+0xa4>)
    9b40:	691b      	ldr	r3, [r3, #16]
    9b42:	e039      	b.n	9bb8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    9b44:	4b20      	ldr	r3, [pc, #128]	; (9bc8 <system_clock_source_get_hz+0xa8>)
    9b46:	6a1b      	ldr	r3, [r3, #32]
    9b48:	059b      	lsls	r3, r3, #22
    9b4a:	0f9b      	lsrs	r3, r3, #30
    9b4c:	b2db      	uxtb	r3, r3
    9b4e:	001a      	movs	r2, r3
    9b50:	4b1e      	ldr	r3, [pc, #120]	; (9bcc <system_clock_source_get_hz+0xac>)
    9b52:	40d3      	lsrs	r3, r2
    9b54:	e030      	b.n	9bb8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    9b56:	2380      	movs	r3, #128	; 0x80
    9b58:	021b      	lsls	r3, r3, #8
    9b5a:	e02d      	b.n	9bb8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    9b5c:	2380      	movs	r3, #128	; 0x80
    9b5e:	021b      	lsls	r3, r3, #8
    9b60:	e02a      	b.n	9bb8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    9b62:	4b18      	ldr	r3, [pc, #96]	; (9bc4 <system_clock_source_get_hz+0xa4>)
    9b64:	695b      	ldr	r3, [r3, #20]
    9b66:	e027      	b.n	9bb8 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    9b68:	4b16      	ldr	r3, [pc, #88]	; (9bc4 <system_clock_source_get_hz+0xa4>)
    9b6a:	681b      	ldr	r3, [r3, #0]
    9b6c:	2202      	movs	r2, #2
    9b6e:	4013      	ands	r3, r2
    9b70:	d101      	bne.n	9b76 <system_clock_source_get_hz+0x56>
			return 0;
    9b72:	2300      	movs	r3, #0
    9b74:	e020      	b.n	9bb8 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    9b76:	4b16      	ldr	r3, [pc, #88]	; (9bd0 <system_clock_source_get_hz+0xb0>)
    9b78:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    9b7a:	4b12      	ldr	r3, [pc, #72]	; (9bc4 <system_clock_source_get_hz+0xa4>)
    9b7c:	681b      	ldr	r3, [r3, #0]
    9b7e:	2204      	movs	r2, #4
    9b80:	4013      	ands	r3, r2
    9b82:	d009      	beq.n	9b98 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9b84:	2000      	movs	r0, #0
    9b86:	4b13      	ldr	r3, [pc, #76]	; (9bd4 <system_clock_source_get_hz+0xb4>)
    9b88:	4798      	blx	r3
    9b8a:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    9b8c:	4b0d      	ldr	r3, [pc, #52]	; (9bc4 <system_clock_source_get_hz+0xa4>)
    9b8e:	689b      	ldr	r3, [r3, #8]
    9b90:	041b      	lsls	r3, r3, #16
    9b92:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9b94:	4353      	muls	r3, r2
    9b96:	e00f      	b.n	9bb8 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    9b98:	4b0f      	ldr	r3, [pc, #60]	; (9bd8 <system_clock_source_get_hz+0xb8>)
    9b9a:	e00d      	b.n	9bb8 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    9b9c:	4a0a      	ldr	r2, [pc, #40]	; (9bc8 <system_clock_source_get_hz+0xa8>)
    9b9e:	2350      	movs	r3, #80	; 0x50
    9ba0:	5cd3      	ldrb	r3, [r2, r3]
    9ba2:	b2db      	uxtb	r3, r3
    9ba4:	001a      	movs	r2, r3
    9ba6:	2304      	movs	r3, #4
    9ba8:	4013      	ands	r3, r2
    9baa:	d101      	bne.n	9bb0 <system_clock_source_get_hz+0x90>
			return 0;
    9bac:	2300      	movs	r3, #0
    9bae:	e003      	b.n	9bb8 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    9bb0:	4b04      	ldr	r3, [pc, #16]	; (9bc4 <system_clock_source_get_hz+0xa4>)
    9bb2:	68db      	ldr	r3, [r3, #12]
    9bb4:	e000      	b.n	9bb8 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    9bb6:	2300      	movs	r3, #0
	}
}
    9bb8:	0018      	movs	r0, r3
    9bba:	46bd      	mov	sp, r7
    9bbc:	b002      	add	sp, #8
    9bbe:	bd80      	pop	{r7, pc}
    9bc0:	00011f08 	.word	0x00011f08
    9bc4:	20000114 	.word	0x20000114
    9bc8:	40000800 	.word	0x40000800
    9bcc:	007a1200 	.word	0x007a1200
    9bd0:	00009ac1 	.word	0x00009ac1
    9bd4:	0000a6f1 	.word	0x0000a6f1
    9bd8:	02dc6c00 	.word	0x02dc6c00

00009bdc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    9bdc:	b580      	push	{r7, lr}
    9bde:	b084      	sub	sp, #16
    9be0:	af00      	add	r7, sp, #0
    9be2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    9be4:	4b1a      	ldr	r3, [pc, #104]	; (9c50 <system_clock_source_osc8m_set_config+0x74>)
    9be6:	6a1b      	ldr	r3, [r3, #32]
    9be8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    9bea:	687b      	ldr	r3, [r7, #4]
    9bec:	781b      	ldrb	r3, [r3, #0]
    9bee:	1c1a      	adds	r2, r3, #0
    9bf0:	2303      	movs	r3, #3
    9bf2:	4013      	ands	r3, r2
    9bf4:	b2da      	uxtb	r2, r3
    9bf6:	230d      	movs	r3, #13
    9bf8:	18fb      	adds	r3, r7, r3
    9bfa:	2103      	movs	r1, #3
    9bfc:	400a      	ands	r2, r1
    9bfe:	0010      	movs	r0, r2
    9c00:	781a      	ldrb	r2, [r3, #0]
    9c02:	2103      	movs	r1, #3
    9c04:	438a      	bics	r2, r1
    9c06:	1c11      	adds	r1, r2, #0
    9c08:	1c02      	adds	r2, r0, #0
    9c0a:	430a      	orrs	r2, r1
    9c0c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    9c0e:	687b      	ldr	r3, [r7, #4]
    9c10:	789a      	ldrb	r2, [r3, #2]
    9c12:	230c      	movs	r3, #12
    9c14:	18fb      	adds	r3, r7, r3
    9c16:	01d0      	lsls	r0, r2, #7
    9c18:	781a      	ldrb	r2, [r3, #0]
    9c1a:	217f      	movs	r1, #127	; 0x7f
    9c1c:	400a      	ands	r2, r1
    9c1e:	1c11      	adds	r1, r2, #0
    9c20:	1c02      	adds	r2, r0, #0
    9c22:	430a      	orrs	r2, r1
    9c24:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    9c26:	687b      	ldr	r3, [r7, #4]
    9c28:	785a      	ldrb	r2, [r3, #1]
    9c2a:	230c      	movs	r3, #12
    9c2c:	18fb      	adds	r3, r7, r3
    9c2e:	2101      	movs	r1, #1
    9c30:	400a      	ands	r2, r1
    9c32:	0190      	lsls	r0, r2, #6
    9c34:	781a      	ldrb	r2, [r3, #0]
    9c36:	2140      	movs	r1, #64	; 0x40
    9c38:	438a      	bics	r2, r1
    9c3a:	1c11      	adds	r1, r2, #0
    9c3c:	1c02      	adds	r2, r0, #0
    9c3e:	430a      	orrs	r2, r1
    9c40:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    9c42:	4b03      	ldr	r3, [pc, #12]	; (9c50 <system_clock_source_osc8m_set_config+0x74>)
    9c44:	68fa      	ldr	r2, [r7, #12]
    9c46:	621a      	str	r2, [r3, #32]
}
    9c48:	46c0      	nop			; (mov r8, r8)
    9c4a:	46bd      	mov	sp, r7
    9c4c:	b004      	add	sp, #16
    9c4e:	bd80      	pop	{r7, pc}
    9c50:	40000800 	.word	0x40000800

00009c54 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    9c54:	b580      	push	{r7, lr}
    9c56:	b084      	sub	sp, #16
    9c58:	af00      	add	r7, sp, #0
    9c5a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    9c5c:	4a43      	ldr	r2, [pc, #268]	; (9d6c <system_clock_source_xosc32k_set_config+0x118>)
    9c5e:	230c      	movs	r3, #12
    9c60:	18fb      	adds	r3, r7, r3
    9c62:	8a92      	ldrh	r2, [r2, #20]
    9c64:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	785b      	ldrb	r3, [r3, #1]
    9c6a:	1c1a      	adds	r2, r3, #0
    9c6c:	2307      	movs	r3, #7
    9c6e:	4013      	ands	r3, r2
    9c70:	b2da      	uxtb	r2, r3
    9c72:	230c      	movs	r3, #12
    9c74:	18fb      	adds	r3, r7, r3
    9c76:	2107      	movs	r1, #7
    9c78:	400a      	ands	r2, r1
    9c7a:	0010      	movs	r0, r2
    9c7c:	785a      	ldrb	r2, [r3, #1]
    9c7e:	2107      	movs	r1, #7
    9c80:	438a      	bics	r2, r1
    9c82:	1c11      	adds	r1, r2, #0
    9c84:	1c02      	adds	r2, r0, #0
    9c86:	430a      	orrs	r2, r1
    9c88:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    9c8a:	687b      	ldr	r3, [r7, #4]
    9c8c:	781b      	ldrb	r3, [r3, #0]
    9c8e:	2b00      	cmp	r3, #0
    9c90:	d106      	bne.n	9ca0 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    9c92:	230c      	movs	r3, #12
    9c94:	18fb      	adds	r3, r7, r3
    9c96:	781a      	ldrb	r2, [r3, #0]
    9c98:	2104      	movs	r1, #4
    9c9a:	430a      	orrs	r2, r1
    9c9c:	701a      	strb	r2, [r3, #0]
    9c9e:	e005      	b.n	9cac <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    9ca0:	230c      	movs	r3, #12
    9ca2:	18fb      	adds	r3, r7, r3
    9ca4:	781a      	ldrb	r2, [r3, #0]
    9ca6:	2104      	movs	r1, #4
    9ca8:	438a      	bics	r2, r1
    9caa:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    9cac:	687b      	ldr	r3, [r7, #4]
    9cae:	789a      	ldrb	r2, [r3, #2]
    9cb0:	230c      	movs	r3, #12
    9cb2:	18fb      	adds	r3, r7, r3
    9cb4:	2101      	movs	r1, #1
    9cb6:	400a      	ands	r2, r1
    9cb8:	0150      	lsls	r0, r2, #5
    9cba:	781a      	ldrb	r2, [r3, #0]
    9cbc:	2120      	movs	r1, #32
    9cbe:	438a      	bics	r2, r1
    9cc0:	1c11      	adds	r1, r2, #0
    9cc2:	1c02      	adds	r2, r0, #0
    9cc4:	430a      	orrs	r2, r1
    9cc6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	78da      	ldrb	r2, [r3, #3]
    9ccc:	230c      	movs	r3, #12
    9cce:	18fb      	adds	r3, r7, r3
    9cd0:	2101      	movs	r1, #1
    9cd2:	400a      	ands	r2, r1
    9cd4:	0110      	lsls	r0, r2, #4
    9cd6:	781a      	ldrb	r2, [r3, #0]
    9cd8:	2110      	movs	r1, #16
    9cda:	438a      	bics	r2, r1
    9cdc:	1c11      	adds	r1, r2, #0
    9cde:	1c02      	adds	r2, r0, #0
    9ce0:	430a      	orrs	r2, r1
    9ce2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    9ce4:	687b      	ldr	r3, [r7, #4]
    9ce6:	791a      	ldrb	r2, [r3, #4]
    9ce8:	230c      	movs	r3, #12
    9cea:	18fb      	adds	r3, r7, r3
    9cec:	2101      	movs	r1, #1
    9cee:	400a      	ands	r2, r1
    9cf0:	00d0      	lsls	r0, r2, #3
    9cf2:	781a      	ldrb	r2, [r3, #0]
    9cf4:	2108      	movs	r1, #8
    9cf6:	438a      	bics	r2, r1
    9cf8:	1c11      	adds	r1, r2, #0
    9cfa:	1c02      	adds	r2, r0, #0
    9cfc:	430a      	orrs	r2, r1
    9cfe:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    9d00:	687b      	ldr	r3, [r7, #4]
    9d02:	7b5a      	ldrb	r2, [r3, #13]
    9d04:	230c      	movs	r3, #12
    9d06:	18fb      	adds	r3, r7, r3
    9d08:	01d0      	lsls	r0, r2, #7
    9d0a:	781a      	ldrb	r2, [r3, #0]
    9d0c:	217f      	movs	r1, #127	; 0x7f
    9d0e:	400a      	ands	r2, r1
    9d10:	1c11      	adds	r1, r2, #0
    9d12:	1c02      	adds	r2, r0, #0
    9d14:	430a      	orrs	r2, r1
    9d16:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	7b1a      	ldrb	r2, [r3, #12]
    9d1c:	230c      	movs	r3, #12
    9d1e:	18fb      	adds	r3, r7, r3
    9d20:	2101      	movs	r1, #1
    9d22:	400a      	ands	r2, r1
    9d24:	0190      	lsls	r0, r2, #6
    9d26:	781a      	ldrb	r2, [r3, #0]
    9d28:	2140      	movs	r1, #64	; 0x40
    9d2a:	438a      	bics	r2, r1
    9d2c:	1c11      	adds	r1, r2, #0
    9d2e:	1c02      	adds	r2, r0, #0
    9d30:	430a      	orrs	r2, r1
    9d32:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    9d34:	687b      	ldr	r3, [r7, #4]
    9d36:	7b9a      	ldrb	r2, [r3, #14]
    9d38:	230c      	movs	r3, #12
    9d3a:	18fb      	adds	r3, r7, r3
    9d3c:	2101      	movs	r1, #1
    9d3e:	400a      	ands	r2, r1
    9d40:	0110      	lsls	r0, r2, #4
    9d42:	785a      	ldrb	r2, [r3, #1]
    9d44:	2110      	movs	r1, #16
    9d46:	438a      	bics	r2, r1
    9d48:	1c11      	adds	r1, r2, #0
    9d4a:	1c02      	adds	r2, r0, #0
    9d4c:	430a      	orrs	r2, r1
    9d4e:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    9d50:	687b      	ldr	r3, [r7, #4]
    9d52:	689a      	ldr	r2, [r3, #8]
    9d54:	4b06      	ldr	r3, [pc, #24]	; (9d70 <system_clock_source_xosc32k_set_config+0x11c>)
    9d56:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    9d58:	4a04      	ldr	r2, [pc, #16]	; (9d6c <system_clock_source_xosc32k_set_config+0x118>)
    9d5a:	230c      	movs	r3, #12
    9d5c:	18fb      	adds	r3, r7, r3
    9d5e:	881b      	ldrh	r3, [r3, #0]
    9d60:	8293      	strh	r3, [r2, #20]
}
    9d62:	46c0      	nop			; (mov r8, r8)
    9d64:	46bd      	mov	sp, r7
    9d66:	b004      	add	sp, #16
    9d68:	bd80      	pop	{r7, pc}
    9d6a:	46c0      	nop			; (mov r8, r8)
    9d6c:	40000800 	.word	0x40000800
    9d70:	20000114 	.word	0x20000114

00009d74 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    9d74:	b580      	push	{r7, lr}
    9d76:	b082      	sub	sp, #8
    9d78:	af00      	add	r7, sp, #0
    9d7a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9d7c:	687b      	ldr	r3, [r7, #4]
    9d7e:	7a1b      	ldrb	r3, [r3, #8]
    9d80:	029b      	lsls	r3, r3, #10
    9d82:	041b      	lsls	r3, r3, #16
    9d84:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    9d86:	687b      	ldr	r3, [r7, #4]
    9d88:	895b      	ldrh	r3, [r3, #10]
    9d8a:	059b      	lsls	r3, r3, #22
    9d8c:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    9d8e:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    9d90:	4b2a      	ldr	r3, [pc, #168]	; (9e3c <system_clock_source_dfll_set_config+0xc8>)
    9d92:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    9d94:	687b      	ldr	r3, [r7, #4]
    9d96:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    9d98:	687b      	ldr	r3, [r7, #4]
    9d9a:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    9d9c:	4313      	orrs	r3, r2
    9d9e:	b2db      	uxtb	r3, r3
    9da0:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    9da2:	687b      	ldr	r3, [r7, #4]
    9da4:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    9da6:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    9da8:	687a      	ldr	r2, [r7, #4]
    9daa:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    9dac:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    9dae:	687b      	ldr	r3, [r7, #4]
    9db0:	785b      	ldrb	r3, [r3, #1]
    9db2:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    9db4:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    9db6:	4b21      	ldr	r3, [pc, #132]	; (9e3c <system_clock_source_dfll_set_config+0xc8>)
    9db8:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    9dba:	687b      	ldr	r3, [r7, #4]
    9dbc:	781b      	ldrb	r3, [r3, #0]
    9dbe:	2b04      	cmp	r3, #4
    9dc0:	d116      	bne.n	9df0 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9dc2:	687b      	ldr	r3, [r7, #4]
    9dc4:	7b1b      	ldrb	r3, [r3, #12]
    9dc6:	069b      	lsls	r3, r3, #26
    9dc8:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9dca:	687b      	ldr	r3, [r7, #4]
    9dcc:	89db      	ldrh	r3, [r3, #14]
    9dce:	041b      	lsls	r3, r3, #16
    9dd0:	0019      	movs	r1, r3
    9dd2:	4b1b      	ldr	r3, [pc, #108]	; (9e40 <system_clock_source_dfll_set_config+0xcc>)
    9dd4:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9dd6:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9dd8:	687a      	ldr	r2, [r7, #4]
    9dda:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9ddc:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    9dde:	4b17      	ldr	r3, [pc, #92]	; (9e3c <system_clock_source_dfll_set_config+0xc8>)
    9de0:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    9de2:	4b16      	ldr	r3, [pc, #88]	; (9e3c <system_clock_source_dfll_set_config+0xc8>)
    9de4:	681b      	ldr	r3, [r3, #0]
    9de6:	687a      	ldr	r2, [r7, #4]
    9de8:	7812      	ldrb	r2, [r2, #0]
    9dea:	431a      	orrs	r2, r3
    9dec:	4b13      	ldr	r3, [pc, #76]	; (9e3c <system_clock_source_dfll_set_config+0xc8>)
    9dee:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    9df0:	687b      	ldr	r3, [r7, #4]
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	2b20      	cmp	r3, #32
    9df6:	d11c      	bne.n	9e32 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9df8:	687b      	ldr	r3, [r7, #4]
    9dfa:	7b1b      	ldrb	r3, [r3, #12]
    9dfc:	069b      	lsls	r3, r3, #26
    9dfe:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9e00:	687b      	ldr	r3, [r7, #4]
    9e02:	89db      	ldrh	r3, [r3, #14]
    9e04:	041b      	lsls	r3, r3, #16
    9e06:	0019      	movs	r1, r3
    9e08:	4b0d      	ldr	r3, [pc, #52]	; (9e40 <system_clock_source_dfll_set_config+0xcc>)
    9e0a:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    9e0c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    9e0e:	687a      	ldr	r2, [r7, #4]
    9e10:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    9e12:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    9e14:	4b09      	ldr	r3, [pc, #36]	; (9e3c <system_clock_source_dfll_set_config+0xc8>)
    9e16:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    9e18:	4b08      	ldr	r3, [pc, #32]	; (9e3c <system_clock_source_dfll_set_config+0xc8>)
    9e1a:	681b      	ldr	r3, [r3, #0]
    9e1c:	687a      	ldr	r2, [r7, #4]
    9e1e:	7812      	ldrb	r2, [r2, #0]
    9e20:	2104      	movs	r1, #4
    9e22:	430a      	orrs	r2, r1
    9e24:	b2d2      	uxtb	r2, r2
    9e26:	4313      	orrs	r3, r2
    9e28:	2280      	movs	r2, #128	; 0x80
    9e2a:	00d2      	lsls	r2, r2, #3
    9e2c:	431a      	orrs	r2, r3
    9e2e:	4b03      	ldr	r3, [pc, #12]	; (9e3c <system_clock_source_dfll_set_config+0xc8>)
    9e30:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    9e32:	46c0      	nop			; (mov r8, r8)
    9e34:	46bd      	mov	sp, r7
    9e36:	b002      	add	sp, #8
    9e38:	bd80      	pop	{r7, pc}
    9e3a:	46c0      	nop			; (mov r8, r8)
    9e3c:	20000114 	.word	0x20000114
    9e40:	03ff0000 	.word	0x03ff0000

00009e44 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    9e44:	b580      	push	{r7, lr}
    9e46:	b082      	sub	sp, #8
    9e48:	af00      	add	r7, sp, #0
    9e4a:	0002      	movs	r2, r0
    9e4c:	1dfb      	adds	r3, r7, #7
    9e4e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    9e50:	1dfb      	adds	r3, r7, #7
    9e52:	781b      	ldrb	r3, [r3, #0]
    9e54:	2b08      	cmp	r3, #8
    9e56:	d83b      	bhi.n	9ed0 <system_clock_source_enable+0x8c>
    9e58:	009a      	lsls	r2, r3, #2
    9e5a:	4b21      	ldr	r3, [pc, #132]	; (9ee0 <system_clock_source_enable+0x9c>)
    9e5c:	18d3      	adds	r3, r2, r3
    9e5e:	681b      	ldr	r3, [r3, #0]
    9e60:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    9e62:	4b20      	ldr	r3, [pc, #128]	; (9ee4 <system_clock_source_enable+0xa0>)
    9e64:	4a1f      	ldr	r2, [pc, #124]	; (9ee4 <system_clock_source_enable+0xa0>)
    9e66:	6a12      	ldr	r2, [r2, #32]
    9e68:	2102      	movs	r1, #2
    9e6a:	430a      	orrs	r2, r1
    9e6c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    9e6e:	2300      	movs	r3, #0
    9e70:	e031      	b.n	9ed6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    9e72:	4b1c      	ldr	r3, [pc, #112]	; (9ee4 <system_clock_source_enable+0xa0>)
    9e74:	4a1b      	ldr	r2, [pc, #108]	; (9ee4 <system_clock_source_enable+0xa0>)
    9e76:	6992      	ldr	r2, [r2, #24]
    9e78:	2102      	movs	r1, #2
    9e7a:	430a      	orrs	r2, r1
    9e7c:	619a      	str	r2, [r3, #24]
		break;
    9e7e:	e029      	b.n	9ed4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    9e80:	4a18      	ldr	r2, [pc, #96]	; (9ee4 <system_clock_source_enable+0xa0>)
    9e82:	4b18      	ldr	r3, [pc, #96]	; (9ee4 <system_clock_source_enable+0xa0>)
    9e84:	8a1b      	ldrh	r3, [r3, #16]
    9e86:	b29b      	uxth	r3, r3
    9e88:	2102      	movs	r1, #2
    9e8a:	430b      	orrs	r3, r1
    9e8c:	b29b      	uxth	r3, r3
    9e8e:	8213      	strh	r3, [r2, #16]
		break;
    9e90:	e020      	b.n	9ed4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    9e92:	4a14      	ldr	r2, [pc, #80]	; (9ee4 <system_clock_source_enable+0xa0>)
    9e94:	4b13      	ldr	r3, [pc, #76]	; (9ee4 <system_clock_source_enable+0xa0>)
    9e96:	8a9b      	ldrh	r3, [r3, #20]
    9e98:	b29b      	uxth	r3, r3
    9e9a:	2102      	movs	r1, #2
    9e9c:	430b      	orrs	r3, r1
    9e9e:	b29b      	uxth	r3, r3
    9ea0:	8293      	strh	r3, [r2, #20]
		break;
    9ea2:	e017      	b.n	9ed4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    9ea4:	4b10      	ldr	r3, [pc, #64]	; (9ee8 <system_clock_source_enable+0xa4>)
    9ea6:	681b      	ldr	r3, [r3, #0]
    9ea8:	2202      	movs	r2, #2
    9eaa:	431a      	orrs	r2, r3
    9eac:	4b0e      	ldr	r3, [pc, #56]	; (9ee8 <system_clock_source_enable+0xa4>)
    9eae:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    9eb0:	4b0e      	ldr	r3, [pc, #56]	; (9eec <system_clock_source_enable+0xa8>)
    9eb2:	4798      	blx	r3
		break;
    9eb4:	e00e      	b.n	9ed4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    9eb6:	4a0b      	ldr	r2, [pc, #44]	; (9ee4 <system_clock_source_enable+0xa0>)
    9eb8:	490a      	ldr	r1, [pc, #40]	; (9ee4 <system_clock_source_enable+0xa0>)
    9eba:	2344      	movs	r3, #68	; 0x44
    9ebc:	5ccb      	ldrb	r3, [r1, r3]
    9ebe:	b2db      	uxtb	r3, r3
    9ec0:	2102      	movs	r1, #2
    9ec2:	430b      	orrs	r3, r1
    9ec4:	b2d9      	uxtb	r1, r3
    9ec6:	2344      	movs	r3, #68	; 0x44
    9ec8:	54d1      	strb	r1, [r2, r3]
		break;
    9eca:	e003      	b.n	9ed4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    9ecc:	2300      	movs	r3, #0
    9ece:	e002      	b.n	9ed6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    9ed0:	2317      	movs	r3, #23
    9ed2:	e000      	b.n	9ed6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    9ed4:	2300      	movs	r3, #0
}
    9ed6:	0018      	movs	r0, r3
    9ed8:	46bd      	mov	sp, r7
    9eda:	b002      	add	sp, #8
    9edc:	bd80      	pop	{r7, pc}
    9ede:	46c0      	nop			; (mov r8, r8)
    9ee0:	00011f2c 	.word	0x00011f2c
    9ee4:	40000800 	.word	0x40000800
    9ee8:	20000114 	.word	0x20000114
    9eec:	00009add 	.word	0x00009add

00009ef0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    9ef0:	b580      	push	{r7, lr}
    9ef2:	b084      	sub	sp, #16
    9ef4:	af00      	add	r7, sp, #0
    9ef6:	0002      	movs	r2, r0
    9ef8:	1dfb      	adds	r3, r7, #7
    9efa:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    9efc:	2300      	movs	r3, #0
    9efe:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    9f00:	1dfb      	adds	r3, r7, #7
    9f02:	781b      	ldrb	r3, [r3, #0]
    9f04:	2b08      	cmp	r3, #8
    9f06:	d821      	bhi.n	9f4c <system_clock_source_is_ready+0x5c>
    9f08:	009a      	lsls	r2, r3, #2
    9f0a:	4b18      	ldr	r3, [pc, #96]	; (9f6c <system_clock_source_is_ready+0x7c>)
    9f0c:	18d3      	adds	r3, r2, r3
    9f0e:	681b      	ldr	r3, [r3, #0]
    9f10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    9f12:	2308      	movs	r3, #8
    9f14:	60fb      	str	r3, [r7, #12]
		break;
    9f16:	e01b      	b.n	9f50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    9f18:	2304      	movs	r3, #4
    9f1a:	60fb      	str	r3, [r7, #12]
		break;
    9f1c:	e018      	b.n	9f50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    9f1e:	2301      	movs	r3, #1
    9f20:	60fb      	str	r3, [r7, #12]
		break;
    9f22:	e015      	b.n	9f50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    9f24:	2302      	movs	r3, #2
    9f26:	60fb      	str	r3, [r7, #12]
		break;
    9f28:	e012      	b.n	9f50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    9f2a:	23d0      	movs	r3, #208	; 0xd0
    9f2c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    9f2e:	e00f      	b.n	9f50 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    9f30:	4a0f      	ldr	r2, [pc, #60]	; (9f70 <system_clock_source_is_ready+0x80>)
    9f32:	2350      	movs	r3, #80	; 0x50
    9f34:	5cd3      	ldrb	r3, [r2, r3]
    9f36:	b2db      	uxtb	r3, r3
    9f38:	001a      	movs	r2, r3
    9f3a:	2303      	movs	r3, #3
    9f3c:	4013      	ands	r3, r2
    9f3e:	3b03      	subs	r3, #3
    9f40:	425a      	negs	r2, r3
    9f42:	4153      	adcs	r3, r2
    9f44:	b2db      	uxtb	r3, r3
    9f46:	e00c      	b.n	9f62 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    9f48:	2301      	movs	r3, #1
    9f4a:	e00a      	b.n	9f62 <system_clock_source_is_ready+0x72>

	default:
		return false;
    9f4c:	2300      	movs	r3, #0
    9f4e:	e008      	b.n	9f62 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    9f50:	4b07      	ldr	r3, [pc, #28]	; (9f70 <system_clock_source_is_ready+0x80>)
    9f52:	68db      	ldr	r3, [r3, #12]
    9f54:	68fa      	ldr	r2, [r7, #12]
    9f56:	401a      	ands	r2, r3
    9f58:	68fb      	ldr	r3, [r7, #12]
    9f5a:	1ad3      	subs	r3, r2, r3
    9f5c:	425a      	negs	r2, r3
    9f5e:	4153      	adcs	r3, r2
    9f60:	b2db      	uxtb	r3, r3
}
    9f62:	0018      	movs	r0, r3
    9f64:	46bd      	mov	sp, r7
    9f66:	b004      	add	sp, #16
    9f68:	bd80      	pop	{r7, pc}
    9f6a:	46c0      	nop			; (mov r8, r8)
    9f6c:	00011f50 	.word	0x00011f50
    9f70:	40000800 	.word	0x40000800

00009f74 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    9f74:	b580      	push	{r7, lr}
    9f76:	b082      	sub	sp, #8
    9f78:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    9f7a:	003b      	movs	r3, r7
    9f7c:	2202      	movs	r2, #2
    9f7e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9f80:	2300      	movs	r3, #0
    9f82:	607b      	str	r3, [r7, #4]
    9f84:	e009      	b.n	9f9a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    9f86:	687b      	ldr	r3, [r7, #4]
    9f88:	b2db      	uxtb	r3, r3
    9f8a:	003a      	movs	r2, r7
    9f8c:	0011      	movs	r1, r2
    9f8e:	0018      	movs	r0, r3
    9f90:	4b05      	ldr	r3, [pc, #20]	; (9fa8 <_switch_peripheral_gclk+0x34>)
    9f92:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    9f94:	687b      	ldr	r3, [r7, #4]
    9f96:	3301      	adds	r3, #1
    9f98:	607b      	str	r3, [r7, #4]
    9f9a:	687b      	ldr	r3, [r7, #4]
    9f9c:	2b24      	cmp	r3, #36	; 0x24
    9f9e:	d9f2      	bls.n	9f86 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    9fa0:	46c0      	nop			; (mov r8, r8)
    9fa2:	46bd      	mov	sp, r7
    9fa4:	b002      	add	sp, #8
    9fa6:	bd80      	pop	{r7, pc}
    9fa8:	0000a5cd 	.word	0x0000a5cd

00009fac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    9fac:	b580      	push	{r7, lr}
    9fae:	b0aa      	sub	sp, #168	; 0xa8
    9fb0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    9fb2:	4ba5      	ldr	r3, [pc, #660]	; (a248 <system_clock_init+0x29c>)
    9fb4:	22c2      	movs	r2, #194	; 0xc2
    9fb6:	00d2      	lsls	r2, r2, #3
    9fb8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    9fba:	2002      	movs	r0, #2
    9fbc:	4ba3      	ldr	r3, [pc, #652]	; (a24c <system_clock_init+0x2a0>)
    9fbe:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    9fc0:	4ba3      	ldr	r3, [pc, #652]	; (a250 <system_clock_init+0x2a4>)
    9fc2:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    9fc4:	2394      	movs	r3, #148	; 0x94
    9fc6:	18fb      	adds	r3, r7, r3
    9fc8:	0018      	movs	r0, r3
    9fca:	4ba2      	ldr	r3, [pc, #648]	; (a254 <system_clock_init+0x2a8>)
    9fcc:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    9fce:	2394      	movs	r3, #148	; 0x94
    9fd0:	18fb      	adds	r3, r7, r3
    9fd2:	2280      	movs	r2, #128	; 0x80
    9fd4:	0212      	lsls	r2, r2, #8
    9fd6:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    9fd8:	2394      	movs	r3, #148	; 0x94
    9fda:	18fb      	adds	r3, r7, r3
    9fdc:	2200      	movs	r2, #0
    9fde:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    9fe0:	2394      	movs	r3, #148	; 0x94
    9fe2:	18fb      	adds	r3, r7, r3
    9fe4:	2203      	movs	r2, #3
    9fe6:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    9fe8:	2394      	movs	r3, #148	; 0x94
    9fea:	18fb      	adds	r3, r7, r3
    9fec:	2200      	movs	r2, #0
    9fee:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    9ff0:	2394      	movs	r3, #148	; 0x94
    9ff2:	18fb      	adds	r3, r7, r3
    9ff4:	2200      	movs	r2, #0
    9ff6:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    9ff8:	2394      	movs	r3, #148	; 0x94
    9ffa:	18fb      	adds	r3, r7, r3
    9ffc:	2201      	movs	r2, #1
    9ffe:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    a000:	2394      	movs	r3, #148	; 0x94
    a002:	18fb      	adds	r3, r7, r3
    a004:	2200      	movs	r2, #0
    a006:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    a008:	2394      	movs	r3, #148	; 0x94
    a00a:	18fb      	adds	r3, r7, r3
    a00c:	2200      	movs	r2, #0
    a00e:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    a010:	2394      	movs	r3, #148	; 0x94
    a012:	18fb      	adds	r3, r7, r3
    a014:	0018      	movs	r0, r3
    a016:	4b90      	ldr	r3, [pc, #576]	; (a258 <system_clock_init+0x2ac>)
    a018:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    a01a:	2005      	movs	r0, #5
    a01c:	4b8f      	ldr	r3, [pc, #572]	; (a25c <system_clock_init+0x2b0>)
    a01e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    a020:	46c0      	nop			; (mov r8, r8)
    a022:	2005      	movs	r0, #5
    a024:	4b8e      	ldr	r3, [pc, #568]	; (a260 <system_clock_init+0x2b4>)
    a026:	4798      	blx	r3
    a028:	0003      	movs	r3, r0
    a02a:	001a      	movs	r2, r3
    a02c:	2301      	movs	r3, #1
    a02e:	4053      	eors	r3, r2
    a030:	b2db      	uxtb	r3, r3
    a032:	2b00      	cmp	r3, #0
    a034:	d1f5      	bne.n	a022 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    a036:	4a84      	ldr	r2, [pc, #528]	; (a248 <system_clock_init+0x29c>)
    a038:	8a93      	ldrh	r3, [r2, #20]
    a03a:	2180      	movs	r1, #128	; 0x80
    a03c:	430b      	orrs	r3, r1
    a03e:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    a040:	2380      	movs	r3, #128	; 0x80
    a042:	18fb      	adds	r3, r7, r3
    a044:	0018      	movs	r0, r3
    a046:	4b87      	ldr	r3, [pc, #540]	; (a264 <system_clock_init+0x2b8>)
    a048:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    a04a:	2380      	movs	r3, #128	; 0x80
    a04c:	18fb      	adds	r3, r7, r3
    a04e:	2204      	movs	r2, #4
    a050:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    a052:	2380      	movs	r3, #128	; 0x80
    a054:	18fb      	adds	r3, r7, r3
    a056:	2200      	movs	r2, #0
    a058:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    a05a:	4b83      	ldr	r3, [pc, #524]	; (a268 <system_clock_init+0x2bc>)
    a05c:	681b      	ldr	r3, [r3, #0]
    a05e:	0e9b      	lsrs	r3, r3, #26
    a060:	22a4      	movs	r2, #164	; 0xa4
    a062:	18ba      	adds	r2, r7, r2
    a064:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    a066:	23a4      	movs	r3, #164	; 0xa4
    a068:	18fb      	adds	r3, r7, r3
    a06a:	681b      	ldr	r3, [r3, #0]
    a06c:	2b3f      	cmp	r3, #63	; 0x3f
    a06e:	d103      	bne.n	a078 <system_clock_init+0xcc>
		coarse = 0x1f;
    a070:	231f      	movs	r3, #31
    a072:	22a4      	movs	r2, #164	; 0xa4
    a074:	18ba      	adds	r2, r7, r2
    a076:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    a078:	23a4      	movs	r3, #164	; 0xa4
    a07a:	18fb      	adds	r3, r7, r3
    a07c:	681b      	ldr	r3, [r3, #0]
    a07e:	b2da      	uxtb	r2, r3
    a080:	2380      	movs	r3, #128	; 0x80
    a082:	18fb      	adds	r3, r7, r3
    a084:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    a086:	2380      	movs	r3, #128	; 0x80
    a088:	18fb      	adds	r3, r7, r3
    a08a:	2200      	movs	r2, #0
    a08c:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    a08e:	2380      	movs	r3, #128	; 0x80
    a090:	18fb      	adds	r3, r7, r3
    a092:	2200      	movs	r2, #0
    a094:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    a096:	2380      	movs	r3, #128	; 0x80
    a098:	18fb      	adds	r3, r7, r3
    a09a:	2200      	movs	r2, #0
    a09c:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    a09e:	2380      	movs	r3, #128	; 0x80
    a0a0:	18fb      	adds	r3, r7, r3
    a0a2:	2200      	movs	r2, #0
    a0a4:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    a0a6:	2380      	movs	r3, #128	; 0x80
    a0a8:	18fb      	adds	r3, r7, r3
    a0aa:	4a70      	ldr	r2, [pc, #448]	; (a26c <system_clock_init+0x2c0>)
    a0ac:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    a0ae:	2380      	movs	r3, #128	; 0x80
    a0b0:	18fb      	adds	r3, r7, r3
    a0b2:	2207      	movs	r2, #7
    a0b4:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    a0b6:	2380      	movs	r3, #128	; 0x80
    a0b8:	18fb      	adds	r3, r7, r3
    a0ba:	223f      	movs	r2, #63	; 0x3f
    a0bc:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    a0be:	2380      	movs	r3, #128	; 0x80
    a0c0:	18fb      	adds	r3, r7, r3
    a0c2:	0018      	movs	r0, r3
    a0c4:	4b6a      	ldr	r3, [pc, #424]	; (a270 <system_clock_init+0x2c4>)
    a0c6:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    a0c8:	237c      	movs	r3, #124	; 0x7c
    a0ca:	18fb      	adds	r3, r7, r3
    a0cc:	0018      	movs	r0, r3
    a0ce:	4b69      	ldr	r3, [pc, #420]	; (a274 <system_clock_init+0x2c8>)
    a0d0:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    a0d2:	237c      	movs	r3, #124	; 0x7c
    a0d4:	18fb      	adds	r3, r7, r3
    a0d6:	2200      	movs	r2, #0
    a0d8:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    a0da:	237c      	movs	r3, #124	; 0x7c
    a0dc:	18fb      	adds	r3, r7, r3
    a0de:	2201      	movs	r2, #1
    a0e0:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    a0e2:	237c      	movs	r3, #124	; 0x7c
    a0e4:	18fb      	adds	r3, r7, r3
    a0e6:	2200      	movs	r2, #0
    a0e8:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    a0ea:	237c      	movs	r3, #124	; 0x7c
    a0ec:	18fb      	adds	r3, r7, r3
    a0ee:	0018      	movs	r0, r3
    a0f0:	4b61      	ldr	r3, [pc, #388]	; (a278 <system_clock_init+0x2cc>)
    a0f2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    a0f4:	2006      	movs	r0, #6
    a0f6:	4b59      	ldr	r3, [pc, #356]	; (a25c <system_clock_init+0x2b0>)
    a0f8:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    a0fa:	4b60      	ldr	r3, [pc, #384]	; (a27c <system_clock_init+0x2d0>)
    a0fc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    a0fe:	2364      	movs	r3, #100	; 0x64
    a100:	18fb      	adds	r3, r7, r3
    a102:	0018      	movs	r0, r3
    a104:	4b5e      	ldr	r3, [pc, #376]	; (a280 <system_clock_init+0x2d4>)
    a106:	4798      	blx	r3
    a108:	2364      	movs	r3, #100	; 0x64
    a10a:	18fb      	adds	r3, r7, r3
    a10c:	2205      	movs	r2, #5
    a10e:	701a      	strb	r2, [r3, #0]
    a110:	2364      	movs	r3, #100	; 0x64
    a112:	18fb      	adds	r3, r7, r3
    a114:	2201      	movs	r2, #1
    a116:	605a      	str	r2, [r3, #4]
    a118:	2364      	movs	r3, #100	; 0x64
    a11a:	18fb      	adds	r3, r7, r3
    a11c:	2200      	movs	r2, #0
    a11e:	721a      	strb	r2, [r3, #8]
    a120:	2364      	movs	r3, #100	; 0x64
    a122:	18fb      	adds	r3, r7, r3
    a124:	2200      	movs	r2, #0
    a126:	725a      	strb	r2, [r3, #9]
    a128:	2364      	movs	r3, #100	; 0x64
    a12a:	18fb      	adds	r3, r7, r3
    a12c:	0019      	movs	r1, r3
    a12e:	2001      	movs	r0, #1
    a130:	4b54      	ldr	r3, [pc, #336]	; (a284 <system_clock_init+0x2d8>)
    a132:	4798      	blx	r3
    a134:	2001      	movs	r0, #1
    a136:	4b54      	ldr	r3, [pc, #336]	; (a288 <system_clock_init+0x2dc>)
    a138:	4798      	blx	r3
    a13a:	2340      	movs	r3, #64	; 0x40
    a13c:	18fb      	adds	r3, r7, r3
    a13e:	0018      	movs	r0, r3
    a140:	4b4f      	ldr	r3, [pc, #316]	; (a280 <system_clock_init+0x2d4>)
    a142:	4798      	blx	r3
    a144:	2340      	movs	r3, #64	; 0x40
    a146:	18fb      	adds	r3, r7, r3
    a148:	2206      	movs	r2, #6
    a14a:	701a      	strb	r2, [r3, #0]
    a14c:	2340      	movs	r3, #64	; 0x40
    a14e:	18fb      	adds	r3, r7, r3
    a150:	2202      	movs	r2, #2
    a152:	605a      	str	r2, [r3, #4]
    a154:	2340      	movs	r3, #64	; 0x40
    a156:	18fb      	adds	r3, r7, r3
    a158:	2200      	movs	r2, #0
    a15a:	721a      	strb	r2, [r3, #8]
    a15c:	2340      	movs	r3, #64	; 0x40
    a15e:	18fb      	adds	r3, r7, r3
    a160:	2201      	movs	r2, #1
    a162:	725a      	strb	r2, [r3, #9]
    a164:	2340      	movs	r3, #64	; 0x40
    a166:	18fb      	adds	r3, r7, r3
    a168:	0019      	movs	r1, r3
    a16a:	2004      	movs	r0, #4
    a16c:	4b45      	ldr	r3, [pc, #276]	; (a284 <system_clock_init+0x2d8>)
    a16e:	4798      	blx	r3
    a170:	2004      	movs	r0, #4
    a172:	4b45      	ldr	r3, [pc, #276]	; (a288 <system_clock_init+0x2dc>)
    a174:	4798      	blx	r3
    a176:	2334      	movs	r3, #52	; 0x34
    a178:	18fb      	adds	r3, r7, r3
    a17a:	0018      	movs	r0, r3
    a17c:	4b40      	ldr	r3, [pc, #256]	; (a280 <system_clock_init+0x2d4>)
    a17e:	4798      	blx	r3
    a180:	2334      	movs	r3, #52	; 0x34
    a182:	18fb      	adds	r3, r7, r3
    a184:	2206      	movs	r2, #6
    a186:	701a      	strb	r2, [r3, #0]
    a188:	2334      	movs	r3, #52	; 0x34
    a18a:	18fb      	adds	r3, r7, r3
    a18c:	2210      	movs	r2, #16
    a18e:	605a      	str	r2, [r3, #4]
    a190:	2334      	movs	r3, #52	; 0x34
    a192:	18fb      	adds	r3, r7, r3
    a194:	2200      	movs	r2, #0
    a196:	721a      	strb	r2, [r3, #8]
    a198:	2334      	movs	r3, #52	; 0x34
    a19a:	18fb      	adds	r3, r7, r3
    a19c:	2201      	movs	r2, #1
    a19e:	725a      	strb	r2, [r3, #9]
    a1a0:	2334      	movs	r3, #52	; 0x34
    a1a2:	18fb      	adds	r3, r7, r3
    a1a4:	0019      	movs	r1, r3
    a1a6:	2005      	movs	r0, #5
    a1a8:	4b36      	ldr	r3, [pc, #216]	; (a284 <system_clock_init+0x2d8>)
    a1aa:	4798      	blx	r3
    a1ac:	2005      	movs	r0, #5
    a1ae:	4b36      	ldr	r3, [pc, #216]	; (a288 <system_clock_init+0x2dc>)
    a1b0:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    a1b2:	230c      	movs	r3, #12
    a1b4:	18fb      	adds	r3, r7, r3
    a1b6:	0018      	movs	r0, r3
    a1b8:	4b34      	ldr	r3, [pc, #208]	; (a28c <system_clock_init+0x2e0>)
    a1ba:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    a1bc:	230c      	movs	r3, #12
    a1be:	18fb      	adds	r3, r7, r3
    a1c0:	2201      	movs	r2, #1
    a1c2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    a1c4:	230c      	movs	r3, #12
    a1c6:	18fb      	adds	r3, r7, r3
    a1c8:	0019      	movs	r1, r3
    a1ca:	2000      	movs	r0, #0
    a1cc:	4b30      	ldr	r3, [pc, #192]	; (a290 <system_clock_init+0x2e4>)
    a1ce:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    a1d0:	2000      	movs	r0, #0
    a1d2:	4b30      	ldr	r3, [pc, #192]	; (a294 <system_clock_init+0x2e8>)
    a1d4:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    a1d6:	2007      	movs	r0, #7
    a1d8:	4b20      	ldr	r3, [pc, #128]	; (a25c <system_clock_init+0x2b0>)
    a1da:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    a1dc:	46c0      	nop			; (mov r8, r8)
    a1de:	2007      	movs	r0, #7
    a1e0:	4b1f      	ldr	r3, [pc, #124]	; (a260 <system_clock_init+0x2b4>)
    a1e2:	4798      	blx	r3
    a1e4:	0003      	movs	r3, r0
    a1e6:	001a      	movs	r2, r3
    a1e8:	2301      	movs	r3, #1
    a1ea:	4053      	eors	r3, r2
    a1ec:	b2db      	uxtb	r3, r3
    a1ee:	2b00      	cmp	r3, #0
    a1f0:	d1f5      	bne.n	a1de <system_clock_init+0x232>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    a1f2:	2000      	movs	r0, #0
    a1f4:	4b28      	ldr	r3, [pc, #160]	; (a298 <system_clock_init+0x2ec>)
    a1f6:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    a1f8:	2100      	movs	r1, #0
    a1fa:	2000      	movs	r0, #0
    a1fc:	4b27      	ldr	r3, [pc, #156]	; (a29c <system_clock_init+0x2f0>)
    a1fe:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    a200:	2100      	movs	r1, #0
    a202:	2001      	movs	r0, #1
    a204:	4b25      	ldr	r3, [pc, #148]	; (a29c <system_clock_init+0x2f0>)
    a206:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    a208:	2100      	movs	r1, #0
    a20a:	2002      	movs	r0, #2
    a20c:	4b23      	ldr	r3, [pc, #140]	; (a29c <system_clock_init+0x2f0>)
    a20e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    a210:	003b      	movs	r3, r7
    a212:	0018      	movs	r0, r3
    a214:	4b1a      	ldr	r3, [pc, #104]	; (a280 <system_clock_init+0x2d4>)
    a216:	4798      	blx	r3
    a218:	003b      	movs	r3, r7
    a21a:	2207      	movs	r2, #7
    a21c:	701a      	strb	r2, [r3, #0]
    a21e:	003b      	movs	r3, r7
    a220:	2201      	movs	r2, #1
    a222:	605a      	str	r2, [r3, #4]
    a224:	003b      	movs	r3, r7
    a226:	2200      	movs	r2, #0
    a228:	721a      	strb	r2, [r3, #8]
    a22a:	003b      	movs	r3, r7
    a22c:	2200      	movs	r2, #0
    a22e:	725a      	strb	r2, [r3, #9]
    a230:	003b      	movs	r3, r7
    a232:	0019      	movs	r1, r3
    a234:	2000      	movs	r0, #0
    a236:	4b13      	ldr	r3, [pc, #76]	; (a284 <system_clock_init+0x2d8>)
    a238:	4798      	blx	r3
    a23a:	2000      	movs	r0, #0
    a23c:	4b12      	ldr	r3, [pc, #72]	; (a288 <system_clock_init+0x2dc>)
    a23e:	4798      	blx	r3
#endif
}
    a240:	46c0      	nop			; (mov r8, r8)
    a242:	46bd      	mov	sp, r7
    a244:	b02a      	add	sp, #168	; 0xa8
    a246:	bd80      	pop	{r7, pc}
    a248:	40000800 	.word	0x40000800
    a24c:	00009a8d 	.word	0x00009a8d
    a250:	00009f75 	.word	0x00009f75
    a254:	00009959 	.word	0x00009959
    a258:	00009c55 	.word	0x00009c55
    a25c:	00009e45 	.word	0x00009e45
    a260:	00009ef1 	.word	0x00009ef1
    a264:	000099c5 	.word	0x000099c5
    a268:	00806024 	.word	0x00806024
    a26c:	000005b9 	.word	0x000005b9
    a270:	00009d75 	.word	0x00009d75
    a274:	000099a1 	.word	0x000099a1
    a278:	00009bdd 	.word	0x00009bdd
    a27c:	0000a345 	.word	0x0000a345
    a280:	00009911 	.word	0x00009911
    a284:	0000a375 	.word	0x0000a375
    a288:	0000a499 	.word	0x0000a499
    a28c:	00009941 	.word	0x00009941
    a290:	0000a5cd 	.word	0x0000a5cd
    a294:	0000a611 	.word	0x0000a611
    a298:	00009a19 	.word	0x00009a19
    a29c:	00009a39 	.word	0x00009a39

0000a2a0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    a2a0:	b580      	push	{r7, lr}
    a2a2:	b082      	sub	sp, #8
    a2a4:	af00      	add	r7, sp, #0
    a2a6:	0002      	movs	r2, r0
    a2a8:	6039      	str	r1, [r7, #0]
    a2aa:	1dfb      	adds	r3, r7, #7
    a2ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a2ae:	1dfb      	adds	r3, r7, #7
    a2b0:	781b      	ldrb	r3, [r3, #0]
    a2b2:	2b01      	cmp	r3, #1
    a2b4:	d00a      	beq.n	a2cc <system_apb_clock_set_mask+0x2c>
    a2b6:	2b02      	cmp	r3, #2
    a2b8:	d00f      	beq.n	a2da <system_apb_clock_set_mask+0x3a>
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	d114      	bne.n	a2e8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    a2be:	4b0e      	ldr	r3, [pc, #56]	; (a2f8 <system_apb_clock_set_mask+0x58>)
    a2c0:	4a0d      	ldr	r2, [pc, #52]	; (a2f8 <system_apb_clock_set_mask+0x58>)
    a2c2:	6991      	ldr	r1, [r2, #24]
    a2c4:	683a      	ldr	r2, [r7, #0]
    a2c6:	430a      	orrs	r2, r1
    a2c8:	619a      	str	r2, [r3, #24]
			break;
    a2ca:	e00f      	b.n	a2ec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    a2cc:	4b0a      	ldr	r3, [pc, #40]	; (a2f8 <system_apb_clock_set_mask+0x58>)
    a2ce:	4a0a      	ldr	r2, [pc, #40]	; (a2f8 <system_apb_clock_set_mask+0x58>)
    a2d0:	69d1      	ldr	r1, [r2, #28]
    a2d2:	683a      	ldr	r2, [r7, #0]
    a2d4:	430a      	orrs	r2, r1
    a2d6:	61da      	str	r2, [r3, #28]
			break;
    a2d8:	e008      	b.n	a2ec <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    a2da:	4b07      	ldr	r3, [pc, #28]	; (a2f8 <system_apb_clock_set_mask+0x58>)
    a2dc:	4a06      	ldr	r2, [pc, #24]	; (a2f8 <system_apb_clock_set_mask+0x58>)
    a2de:	6a11      	ldr	r1, [r2, #32]
    a2e0:	683a      	ldr	r2, [r7, #0]
    a2e2:	430a      	orrs	r2, r1
    a2e4:	621a      	str	r2, [r3, #32]
			break;
    a2e6:	e001      	b.n	a2ec <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    a2e8:	2317      	movs	r3, #23
    a2ea:	e000      	b.n	a2ee <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    a2ec:	2300      	movs	r3, #0
}
    a2ee:	0018      	movs	r0, r3
    a2f0:	46bd      	mov	sp, r7
    a2f2:	b002      	add	sp, #8
    a2f4:	bd80      	pop	{r7, pc}
    a2f6:	46c0      	nop			; (mov r8, r8)
    a2f8:	40000400 	.word	0x40000400

0000a2fc <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    a2fc:	b580      	push	{r7, lr}
    a2fe:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    a300:	4b02      	ldr	r3, [pc, #8]	; (a30c <system_interrupt_enter_critical_section+0x10>)
    a302:	4798      	blx	r3
}
    a304:	46c0      	nop			; (mov r8, r8)
    a306:	46bd      	mov	sp, r7
    a308:	bd80      	pop	{r7, pc}
    a30a:	46c0      	nop			; (mov r8, r8)
    a30c:	00006f51 	.word	0x00006f51

0000a310 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    a310:	b580      	push	{r7, lr}
    a312:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    a314:	4b02      	ldr	r3, [pc, #8]	; (a320 <system_interrupt_leave_critical_section+0x10>)
    a316:	4798      	blx	r3
}
    a318:	46c0      	nop			; (mov r8, r8)
    a31a:	46bd      	mov	sp, r7
    a31c:	bd80      	pop	{r7, pc}
    a31e:	46c0      	nop			; (mov r8, r8)
    a320:	00006fa5 	.word	0x00006fa5

0000a324 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    a324:	b580      	push	{r7, lr}
    a326:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a328:	4b05      	ldr	r3, [pc, #20]	; (a340 <system_gclk_is_syncing+0x1c>)
    a32a:	785b      	ldrb	r3, [r3, #1]
    a32c:	b2db      	uxtb	r3, r3
    a32e:	b25b      	sxtb	r3, r3
    a330:	2b00      	cmp	r3, #0
    a332:	da01      	bge.n	a338 <system_gclk_is_syncing+0x14>
		return true;
    a334:	2301      	movs	r3, #1
    a336:	e000      	b.n	a33a <system_gclk_is_syncing+0x16>
	}

	return false;
    a338:	2300      	movs	r3, #0
}
    a33a:	0018      	movs	r0, r3
    a33c:	46bd      	mov	sp, r7
    a33e:	bd80      	pop	{r7, pc}
    a340:	40000c00 	.word	0x40000c00

0000a344 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    a344:	b580      	push	{r7, lr}
    a346:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    a348:	2108      	movs	r1, #8
    a34a:	2000      	movs	r0, #0
    a34c:	4b07      	ldr	r3, [pc, #28]	; (a36c <system_gclk_init+0x28>)
    a34e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    a350:	4b07      	ldr	r3, [pc, #28]	; (a370 <system_gclk_init+0x2c>)
    a352:	2201      	movs	r2, #1
    a354:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    a356:	46c0      	nop			; (mov r8, r8)
    a358:	4b05      	ldr	r3, [pc, #20]	; (a370 <system_gclk_init+0x2c>)
    a35a:	781b      	ldrb	r3, [r3, #0]
    a35c:	b2db      	uxtb	r3, r3
    a35e:	001a      	movs	r2, r3
    a360:	2301      	movs	r3, #1
    a362:	4013      	ands	r3, r2
    a364:	d1f8      	bne.n	a358 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    a366:	46c0      	nop			; (mov r8, r8)
    a368:	46bd      	mov	sp, r7
    a36a:	bd80      	pop	{r7, pc}
    a36c:	0000a2a1 	.word	0x0000a2a1
    a370:	40000c00 	.word	0x40000c00

0000a374 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    a374:	b580      	push	{r7, lr}
    a376:	b086      	sub	sp, #24
    a378:	af00      	add	r7, sp, #0
    a37a:	0002      	movs	r2, r0
    a37c:	6039      	str	r1, [r7, #0]
    a37e:	1dfb      	adds	r3, r7, #7
    a380:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    a382:	1dfb      	adds	r3, r7, #7
    a384:	781b      	ldrb	r3, [r3, #0]
    a386:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    a388:	1dfb      	adds	r3, r7, #7
    a38a:	781b      	ldrb	r3, [r3, #0]
    a38c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    a38e:	683b      	ldr	r3, [r7, #0]
    a390:	781b      	ldrb	r3, [r3, #0]
    a392:	021b      	lsls	r3, r3, #8
    a394:	001a      	movs	r2, r3
    a396:	697b      	ldr	r3, [r7, #20]
    a398:	4313      	orrs	r3, r2
    a39a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    a39c:	683b      	ldr	r3, [r7, #0]
    a39e:	785b      	ldrb	r3, [r3, #1]
    a3a0:	2b00      	cmp	r3, #0
    a3a2:	d004      	beq.n	a3ae <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    a3a4:	697b      	ldr	r3, [r7, #20]
    a3a6:	2280      	movs	r2, #128	; 0x80
    a3a8:	02d2      	lsls	r2, r2, #11
    a3aa:	4313      	orrs	r3, r2
    a3ac:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    a3ae:	683b      	ldr	r3, [r7, #0]
    a3b0:	7a5b      	ldrb	r3, [r3, #9]
    a3b2:	2b00      	cmp	r3, #0
    a3b4:	d004      	beq.n	a3c0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    a3b6:	697b      	ldr	r3, [r7, #20]
    a3b8:	2280      	movs	r2, #128	; 0x80
    a3ba:	0312      	lsls	r2, r2, #12
    a3bc:	4313      	orrs	r3, r2
    a3be:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    a3c0:	683b      	ldr	r3, [r7, #0]
    a3c2:	685b      	ldr	r3, [r3, #4]
    a3c4:	2b01      	cmp	r3, #1
    a3c6:	d92c      	bls.n	a422 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    a3c8:	683b      	ldr	r3, [r7, #0]
    a3ca:	685a      	ldr	r2, [r3, #4]
    a3cc:	683b      	ldr	r3, [r7, #0]
    a3ce:	685b      	ldr	r3, [r3, #4]
    a3d0:	3b01      	subs	r3, #1
    a3d2:	4013      	ands	r3, r2
    a3d4:	d11a      	bne.n	a40c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    a3d6:	2300      	movs	r3, #0
    a3d8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    a3da:	2302      	movs	r3, #2
    a3dc:	60bb      	str	r3, [r7, #8]
    a3de:	e005      	b.n	a3ec <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    a3e0:	68fb      	ldr	r3, [r7, #12]
    a3e2:	3301      	adds	r3, #1
    a3e4:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    a3e6:	68bb      	ldr	r3, [r7, #8]
    a3e8:	005b      	lsls	r3, r3, #1
    a3ea:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    a3ec:	683b      	ldr	r3, [r7, #0]
    a3ee:	685a      	ldr	r2, [r3, #4]
    a3f0:	68bb      	ldr	r3, [r7, #8]
    a3f2:	429a      	cmp	r2, r3
    a3f4:	d8f4      	bhi.n	a3e0 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    a3f6:	68fb      	ldr	r3, [r7, #12]
    a3f8:	021b      	lsls	r3, r3, #8
    a3fa:	693a      	ldr	r2, [r7, #16]
    a3fc:	4313      	orrs	r3, r2
    a3fe:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    a400:	697b      	ldr	r3, [r7, #20]
    a402:	2280      	movs	r2, #128	; 0x80
    a404:	0352      	lsls	r2, r2, #13
    a406:	4313      	orrs	r3, r2
    a408:	617b      	str	r3, [r7, #20]
    a40a:	e00a      	b.n	a422 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    a40c:	683b      	ldr	r3, [r7, #0]
    a40e:	685b      	ldr	r3, [r3, #4]
    a410:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    a412:	693a      	ldr	r2, [r7, #16]
    a414:	4313      	orrs	r3, r2
    a416:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    a418:	697b      	ldr	r3, [r7, #20]
    a41a:	2280      	movs	r2, #128	; 0x80
    a41c:	0292      	lsls	r2, r2, #10
    a41e:	4313      	orrs	r3, r2
    a420:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    a422:	683b      	ldr	r3, [r7, #0]
    a424:	7a1b      	ldrb	r3, [r3, #8]
    a426:	2b00      	cmp	r3, #0
    a428:	d004      	beq.n	a434 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    a42a:	697b      	ldr	r3, [r7, #20]
    a42c:	2280      	movs	r2, #128	; 0x80
    a42e:	0392      	lsls	r2, r2, #14
    a430:	4313      	orrs	r3, r2
    a432:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    a434:	46c0      	nop			; (mov r8, r8)
    a436:	4b13      	ldr	r3, [pc, #76]	; (a484 <system_gclk_gen_set_config+0x110>)
    a438:	4798      	blx	r3
    a43a:	1e03      	subs	r3, r0, #0
    a43c:	d1fb      	bne.n	a436 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    a43e:	4b12      	ldr	r3, [pc, #72]	; (a488 <system_gclk_gen_set_config+0x114>)
    a440:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    a442:	4a12      	ldr	r2, [pc, #72]	; (a48c <system_gclk_gen_set_config+0x118>)
    a444:	1dfb      	adds	r3, r7, #7
    a446:	781b      	ldrb	r3, [r3, #0]
    a448:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    a44a:	46c0      	nop			; (mov r8, r8)
    a44c:	4b0d      	ldr	r3, [pc, #52]	; (a484 <system_gclk_gen_set_config+0x110>)
    a44e:	4798      	blx	r3
    a450:	1e03      	subs	r3, r0, #0
    a452:	d1fb      	bne.n	a44c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    a454:	4b0e      	ldr	r3, [pc, #56]	; (a490 <system_gclk_gen_set_config+0x11c>)
    a456:	693a      	ldr	r2, [r7, #16]
    a458:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    a45a:	46c0      	nop			; (mov r8, r8)
    a45c:	4b09      	ldr	r3, [pc, #36]	; (a484 <system_gclk_gen_set_config+0x110>)
    a45e:	4798      	blx	r3
    a460:	1e03      	subs	r3, r0, #0
    a462:	d1fb      	bne.n	a45c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    a464:	4b0a      	ldr	r3, [pc, #40]	; (a490 <system_gclk_gen_set_config+0x11c>)
    a466:	4a0a      	ldr	r2, [pc, #40]	; (a490 <system_gclk_gen_set_config+0x11c>)
    a468:	6851      	ldr	r1, [r2, #4]
    a46a:	2280      	movs	r2, #128	; 0x80
    a46c:	0252      	lsls	r2, r2, #9
    a46e:	4011      	ands	r1, r2
    a470:	697a      	ldr	r2, [r7, #20]
    a472:	430a      	orrs	r2, r1
    a474:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    a476:	4b07      	ldr	r3, [pc, #28]	; (a494 <system_gclk_gen_set_config+0x120>)
    a478:	4798      	blx	r3
}
    a47a:	46c0      	nop			; (mov r8, r8)
    a47c:	46bd      	mov	sp, r7
    a47e:	b006      	add	sp, #24
    a480:	bd80      	pop	{r7, pc}
    a482:	46c0      	nop			; (mov r8, r8)
    a484:	0000a325 	.word	0x0000a325
    a488:	0000a2fd 	.word	0x0000a2fd
    a48c:	40000c08 	.word	0x40000c08
    a490:	40000c00 	.word	0x40000c00
    a494:	0000a311 	.word	0x0000a311

0000a498 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    a498:	b580      	push	{r7, lr}
    a49a:	b082      	sub	sp, #8
    a49c:	af00      	add	r7, sp, #0
    a49e:	0002      	movs	r2, r0
    a4a0:	1dfb      	adds	r3, r7, #7
    a4a2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    a4a4:	46c0      	nop			; (mov r8, r8)
    a4a6:	4b0e      	ldr	r3, [pc, #56]	; (a4e0 <system_gclk_gen_enable+0x48>)
    a4a8:	4798      	blx	r3
    a4aa:	1e03      	subs	r3, r0, #0
    a4ac:	d1fb      	bne.n	a4a6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    a4ae:	4b0d      	ldr	r3, [pc, #52]	; (a4e4 <system_gclk_gen_enable+0x4c>)
    a4b0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a4b2:	4a0d      	ldr	r2, [pc, #52]	; (a4e8 <system_gclk_gen_enable+0x50>)
    a4b4:	1dfb      	adds	r3, r7, #7
    a4b6:	781b      	ldrb	r3, [r3, #0]
    a4b8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    a4ba:	46c0      	nop			; (mov r8, r8)
    a4bc:	4b08      	ldr	r3, [pc, #32]	; (a4e0 <system_gclk_gen_enable+0x48>)
    a4be:	4798      	blx	r3
    a4c0:	1e03      	subs	r3, r0, #0
    a4c2:	d1fb      	bne.n	a4bc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    a4c4:	4b09      	ldr	r3, [pc, #36]	; (a4ec <system_gclk_gen_enable+0x54>)
    a4c6:	4a09      	ldr	r2, [pc, #36]	; (a4ec <system_gclk_gen_enable+0x54>)
    a4c8:	6852      	ldr	r2, [r2, #4]
    a4ca:	2180      	movs	r1, #128	; 0x80
    a4cc:	0249      	lsls	r1, r1, #9
    a4ce:	430a      	orrs	r2, r1
    a4d0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    a4d2:	4b07      	ldr	r3, [pc, #28]	; (a4f0 <system_gclk_gen_enable+0x58>)
    a4d4:	4798      	blx	r3
}
    a4d6:	46c0      	nop			; (mov r8, r8)
    a4d8:	46bd      	mov	sp, r7
    a4da:	b002      	add	sp, #8
    a4dc:	bd80      	pop	{r7, pc}
    a4de:	46c0      	nop			; (mov r8, r8)
    a4e0:	0000a325 	.word	0x0000a325
    a4e4:	0000a2fd 	.word	0x0000a2fd
    a4e8:	40000c04 	.word	0x40000c04
    a4ec:	40000c00 	.word	0x40000c00
    a4f0:	0000a311 	.word	0x0000a311

0000a4f4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    a4f4:	b580      	push	{r7, lr}
    a4f6:	b086      	sub	sp, #24
    a4f8:	af00      	add	r7, sp, #0
    a4fa:	0002      	movs	r2, r0
    a4fc:	1dfb      	adds	r3, r7, #7
    a4fe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    a500:	46c0      	nop			; (mov r8, r8)
    a502:	4b2a      	ldr	r3, [pc, #168]	; (a5ac <system_gclk_gen_get_hz+0xb8>)
    a504:	4798      	blx	r3
    a506:	1e03      	subs	r3, r0, #0
    a508:	d1fb      	bne.n	a502 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    a50a:	4b29      	ldr	r3, [pc, #164]	; (a5b0 <system_gclk_gen_get_hz+0xbc>)
    a50c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a50e:	4a29      	ldr	r2, [pc, #164]	; (a5b4 <system_gclk_gen_get_hz+0xc0>)
    a510:	1dfb      	adds	r3, r7, #7
    a512:	781b      	ldrb	r3, [r3, #0]
    a514:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    a516:	46c0      	nop			; (mov r8, r8)
    a518:	4b24      	ldr	r3, [pc, #144]	; (a5ac <system_gclk_gen_get_hz+0xb8>)
    a51a:	4798      	blx	r3
    a51c:	1e03      	subs	r3, r0, #0
    a51e:	d1fb      	bne.n	a518 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    a520:	4b25      	ldr	r3, [pc, #148]	; (a5b8 <system_gclk_gen_get_hz+0xc4>)
    a522:	685b      	ldr	r3, [r3, #4]
    a524:	04db      	lsls	r3, r3, #19
    a526:	0edb      	lsrs	r3, r3, #27
    a528:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    a52a:	0018      	movs	r0, r3
    a52c:	4b23      	ldr	r3, [pc, #140]	; (a5bc <system_gclk_gen_get_hz+0xc8>)
    a52e:	4798      	blx	r3
    a530:	0003      	movs	r3, r0
    a532:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a534:	4a1f      	ldr	r2, [pc, #124]	; (a5b4 <system_gclk_gen_get_hz+0xc0>)
    a536:	1dfb      	adds	r3, r7, #7
    a538:	781b      	ldrb	r3, [r3, #0]
    a53a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    a53c:	4b1e      	ldr	r3, [pc, #120]	; (a5b8 <system_gclk_gen_get_hz+0xc4>)
    a53e:	685b      	ldr	r3, [r3, #4]
    a540:	02db      	lsls	r3, r3, #11
    a542:	0fdb      	lsrs	r3, r3, #31
    a544:	b2da      	uxtb	r2, r3
    a546:	2313      	movs	r3, #19
    a548:	18fb      	adds	r3, r7, r3
    a54a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    a54c:	4a1c      	ldr	r2, [pc, #112]	; (a5c0 <system_gclk_gen_get_hz+0xcc>)
    a54e:	1dfb      	adds	r3, r7, #7
    a550:	781b      	ldrb	r3, [r3, #0]
    a552:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    a554:	46c0      	nop			; (mov r8, r8)
    a556:	4b15      	ldr	r3, [pc, #84]	; (a5ac <system_gclk_gen_get_hz+0xb8>)
    a558:	4798      	blx	r3
    a55a:	1e03      	subs	r3, r0, #0
    a55c:	d1fb      	bne.n	a556 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    a55e:	4b16      	ldr	r3, [pc, #88]	; (a5b8 <system_gclk_gen_get_hz+0xc4>)
    a560:	689b      	ldr	r3, [r3, #8]
    a562:	021b      	lsls	r3, r3, #8
    a564:	0c1b      	lsrs	r3, r3, #16
    a566:	b29b      	uxth	r3, r3
    a568:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    a56a:	4b16      	ldr	r3, [pc, #88]	; (a5c4 <system_gclk_gen_get_hz+0xd0>)
    a56c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    a56e:	2313      	movs	r3, #19
    a570:	18fb      	adds	r3, r7, r3
    a572:	781b      	ldrb	r3, [r3, #0]
    a574:	2b00      	cmp	r3, #0
    a576:	d109      	bne.n	a58c <system_gclk_gen_get_hz+0x98>
    a578:	68fb      	ldr	r3, [r7, #12]
    a57a:	2b01      	cmp	r3, #1
    a57c:	d906      	bls.n	a58c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    a57e:	4b12      	ldr	r3, [pc, #72]	; (a5c8 <system_gclk_gen_get_hz+0xd4>)
    a580:	68f9      	ldr	r1, [r7, #12]
    a582:	6978      	ldr	r0, [r7, #20]
    a584:	4798      	blx	r3
    a586:	0003      	movs	r3, r0
    a588:	617b      	str	r3, [r7, #20]
    a58a:	e00a      	b.n	a5a2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    a58c:	2313      	movs	r3, #19
    a58e:	18fb      	adds	r3, r7, r3
    a590:	781b      	ldrb	r3, [r3, #0]
    a592:	2b00      	cmp	r3, #0
    a594:	d005      	beq.n	a5a2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    a596:	68fb      	ldr	r3, [r7, #12]
    a598:	3301      	adds	r3, #1
    a59a:	697a      	ldr	r2, [r7, #20]
    a59c:	40da      	lsrs	r2, r3
    a59e:	0013      	movs	r3, r2
    a5a0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    a5a2:	697b      	ldr	r3, [r7, #20]
}
    a5a4:	0018      	movs	r0, r3
    a5a6:	46bd      	mov	sp, r7
    a5a8:	b006      	add	sp, #24
    a5aa:	bd80      	pop	{r7, pc}
    a5ac:	0000a325 	.word	0x0000a325
    a5b0:	0000a2fd 	.word	0x0000a2fd
    a5b4:	40000c04 	.word	0x40000c04
    a5b8:	40000c00 	.word	0x40000c00
    a5bc:	00009b21 	.word	0x00009b21
    a5c0:	40000c08 	.word	0x40000c08
    a5c4:	0000a311 	.word	0x0000a311
    a5c8:	0000ebf9 	.word	0x0000ebf9

0000a5cc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    a5cc:	b580      	push	{r7, lr}
    a5ce:	b084      	sub	sp, #16
    a5d0:	af00      	add	r7, sp, #0
    a5d2:	0002      	movs	r2, r0
    a5d4:	6039      	str	r1, [r7, #0]
    a5d6:	1dfb      	adds	r3, r7, #7
    a5d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    a5da:	1dfb      	adds	r3, r7, #7
    a5dc:	781b      	ldrb	r3, [r3, #0]
    a5de:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    a5e0:	683b      	ldr	r3, [r7, #0]
    a5e2:	781b      	ldrb	r3, [r3, #0]
    a5e4:	021b      	lsls	r3, r3, #8
    a5e6:	001a      	movs	r2, r3
    a5e8:	68fb      	ldr	r3, [r7, #12]
    a5ea:	4313      	orrs	r3, r2
    a5ec:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    a5ee:	1dfb      	adds	r3, r7, #7
    a5f0:	781b      	ldrb	r3, [r3, #0]
    a5f2:	0018      	movs	r0, r3
    a5f4:	4b04      	ldr	r3, [pc, #16]	; (a608 <system_gclk_chan_set_config+0x3c>)
    a5f6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    a5f8:	4b04      	ldr	r3, [pc, #16]	; (a60c <system_gclk_chan_set_config+0x40>)
    a5fa:	68fa      	ldr	r2, [r7, #12]
    a5fc:	b292      	uxth	r2, r2
    a5fe:	805a      	strh	r2, [r3, #2]
}
    a600:	46c0      	nop			; (mov r8, r8)
    a602:	46bd      	mov	sp, r7
    a604:	b004      	add	sp, #16
    a606:	bd80      	pop	{r7, pc}
    a608:	0000a659 	.word	0x0000a659
    a60c:	40000c00 	.word	0x40000c00

0000a610 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    a610:	b580      	push	{r7, lr}
    a612:	b082      	sub	sp, #8
    a614:	af00      	add	r7, sp, #0
    a616:	0002      	movs	r2, r0
    a618:	1dfb      	adds	r3, r7, #7
    a61a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    a61c:	4b0a      	ldr	r3, [pc, #40]	; (a648 <system_gclk_chan_enable+0x38>)
    a61e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a620:	4a0a      	ldr	r2, [pc, #40]	; (a64c <system_gclk_chan_enable+0x3c>)
    a622:	1dfb      	adds	r3, r7, #7
    a624:	781b      	ldrb	r3, [r3, #0]
    a626:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    a628:	4909      	ldr	r1, [pc, #36]	; (a650 <system_gclk_chan_enable+0x40>)
    a62a:	4b09      	ldr	r3, [pc, #36]	; (a650 <system_gclk_chan_enable+0x40>)
    a62c:	885b      	ldrh	r3, [r3, #2]
    a62e:	b29b      	uxth	r3, r3
    a630:	2280      	movs	r2, #128	; 0x80
    a632:	01d2      	lsls	r2, r2, #7
    a634:	4313      	orrs	r3, r2
    a636:	b29b      	uxth	r3, r3
    a638:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    a63a:	4b06      	ldr	r3, [pc, #24]	; (a654 <system_gclk_chan_enable+0x44>)
    a63c:	4798      	blx	r3
}
    a63e:	46c0      	nop			; (mov r8, r8)
    a640:	46bd      	mov	sp, r7
    a642:	b002      	add	sp, #8
    a644:	bd80      	pop	{r7, pc}
    a646:	46c0      	nop			; (mov r8, r8)
    a648:	0000a2fd 	.word	0x0000a2fd
    a64c:	40000c02 	.word	0x40000c02
    a650:	40000c00 	.word	0x40000c00
    a654:	0000a311 	.word	0x0000a311

0000a658 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    a658:	b580      	push	{r7, lr}
    a65a:	b084      	sub	sp, #16
    a65c:	af00      	add	r7, sp, #0
    a65e:	0002      	movs	r2, r0
    a660:	1dfb      	adds	r3, r7, #7
    a662:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    a664:	4b1c      	ldr	r3, [pc, #112]	; (a6d8 <system_gclk_chan_disable+0x80>)
    a666:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a668:	4a1c      	ldr	r2, [pc, #112]	; (a6dc <system_gclk_chan_disable+0x84>)
    a66a:	1dfb      	adds	r3, r7, #7
    a66c:	781b      	ldrb	r3, [r3, #0]
    a66e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    a670:	4b1b      	ldr	r3, [pc, #108]	; (a6e0 <system_gclk_chan_disable+0x88>)
    a672:	885b      	ldrh	r3, [r3, #2]
    a674:	051b      	lsls	r3, r3, #20
    a676:	0f1b      	lsrs	r3, r3, #28
    a678:	b2db      	uxtb	r3, r3
    a67a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    a67c:	4a18      	ldr	r2, [pc, #96]	; (a6e0 <system_gclk_chan_disable+0x88>)
    a67e:	8853      	ldrh	r3, [r2, #2]
    a680:	4918      	ldr	r1, [pc, #96]	; (a6e4 <system_gclk_chan_disable+0x8c>)
    a682:	400b      	ands	r3, r1
    a684:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    a686:	4a16      	ldr	r2, [pc, #88]	; (a6e0 <system_gclk_chan_disable+0x88>)
    a688:	4b15      	ldr	r3, [pc, #84]	; (a6e0 <system_gclk_chan_disable+0x88>)
    a68a:	885b      	ldrh	r3, [r3, #2]
    a68c:	b29b      	uxth	r3, r3
    a68e:	4916      	ldr	r1, [pc, #88]	; (a6e8 <system_gclk_chan_disable+0x90>)
    a690:	400b      	ands	r3, r1
    a692:	b29b      	uxth	r3, r3
    a694:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    a696:	46c0      	nop			; (mov r8, r8)
    a698:	4b11      	ldr	r3, [pc, #68]	; (a6e0 <system_gclk_chan_disable+0x88>)
    a69a:	885b      	ldrh	r3, [r3, #2]
    a69c:	b29b      	uxth	r3, r3
    a69e:	001a      	movs	r2, r3
    a6a0:	2380      	movs	r3, #128	; 0x80
    a6a2:	01db      	lsls	r3, r3, #7
    a6a4:	4013      	ands	r3, r2
    a6a6:	d1f7      	bne.n	a698 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    a6a8:	4a0d      	ldr	r2, [pc, #52]	; (a6e0 <system_gclk_chan_disable+0x88>)
    a6aa:	68fb      	ldr	r3, [r7, #12]
    a6ac:	b2db      	uxtb	r3, r3
    a6ae:	1c19      	adds	r1, r3, #0
    a6b0:	230f      	movs	r3, #15
    a6b2:	400b      	ands	r3, r1
    a6b4:	b2d9      	uxtb	r1, r3
    a6b6:	8853      	ldrh	r3, [r2, #2]
    a6b8:	1c08      	adds	r0, r1, #0
    a6ba:	210f      	movs	r1, #15
    a6bc:	4001      	ands	r1, r0
    a6be:	0208      	lsls	r0, r1, #8
    a6c0:	4908      	ldr	r1, [pc, #32]	; (a6e4 <system_gclk_chan_disable+0x8c>)
    a6c2:	400b      	ands	r3, r1
    a6c4:	1c19      	adds	r1, r3, #0
    a6c6:	1c03      	adds	r3, r0, #0
    a6c8:	430b      	orrs	r3, r1
    a6ca:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    a6cc:	4b07      	ldr	r3, [pc, #28]	; (a6ec <system_gclk_chan_disable+0x94>)
    a6ce:	4798      	blx	r3
}
    a6d0:	46c0      	nop			; (mov r8, r8)
    a6d2:	46bd      	mov	sp, r7
    a6d4:	b004      	add	sp, #16
    a6d6:	bd80      	pop	{r7, pc}
    a6d8:	0000a2fd 	.word	0x0000a2fd
    a6dc:	40000c02 	.word	0x40000c02
    a6e0:	40000c00 	.word	0x40000c00
    a6e4:	fffff0ff 	.word	0xfffff0ff
    a6e8:	ffffbfff 	.word	0xffffbfff
    a6ec:	0000a311 	.word	0x0000a311

0000a6f0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    a6f0:	b580      	push	{r7, lr}
    a6f2:	b084      	sub	sp, #16
    a6f4:	af00      	add	r7, sp, #0
    a6f6:	0002      	movs	r2, r0
    a6f8:	1dfb      	adds	r3, r7, #7
    a6fa:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    a6fc:	4b0d      	ldr	r3, [pc, #52]	; (a734 <system_gclk_chan_get_hz+0x44>)
    a6fe:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a700:	4a0d      	ldr	r2, [pc, #52]	; (a738 <system_gclk_chan_get_hz+0x48>)
    a702:	1dfb      	adds	r3, r7, #7
    a704:	781b      	ldrb	r3, [r3, #0]
    a706:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    a708:	4b0c      	ldr	r3, [pc, #48]	; (a73c <system_gclk_chan_get_hz+0x4c>)
    a70a:	885b      	ldrh	r3, [r3, #2]
    a70c:	051b      	lsls	r3, r3, #20
    a70e:	0f1b      	lsrs	r3, r3, #28
    a710:	b2da      	uxtb	r2, r3
    a712:	230f      	movs	r3, #15
    a714:	18fb      	adds	r3, r7, r3
    a716:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    a718:	4b09      	ldr	r3, [pc, #36]	; (a740 <system_gclk_chan_get_hz+0x50>)
    a71a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    a71c:	230f      	movs	r3, #15
    a71e:	18fb      	adds	r3, r7, r3
    a720:	781b      	ldrb	r3, [r3, #0]
    a722:	0018      	movs	r0, r3
    a724:	4b07      	ldr	r3, [pc, #28]	; (a744 <system_gclk_chan_get_hz+0x54>)
    a726:	4798      	blx	r3
    a728:	0003      	movs	r3, r0
}
    a72a:	0018      	movs	r0, r3
    a72c:	46bd      	mov	sp, r7
    a72e:	b004      	add	sp, #16
    a730:	bd80      	pop	{r7, pc}
    a732:	46c0      	nop			; (mov r8, r8)
    a734:	0000a2fd 	.word	0x0000a2fd
    a738:	40000c02 	.word	0x40000c02
    a73c:	40000c00 	.word	0x40000c00
    a740:	0000a311 	.word	0x0000a311
    a744:	0000a4f5 	.word	0x0000a4f5

0000a748 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    a748:	b580      	push	{r7, lr}
    a74a:	b084      	sub	sp, #16
    a74c:	af00      	add	r7, sp, #0
    a74e:	0002      	movs	r2, r0
    a750:	1dfb      	adds	r3, r7, #7
    a752:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    a754:	230f      	movs	r3, #15
    a756:	18fb      	adds	r3, r7, r3
    a758:	1dfa      	adds	r2, r7, #7
    a75a:	7812      	ldrb	r2, [r2, #0]
    a75c:	09d2      	lsrs	r2, r2, #7
    a75e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    a760:	230e      	movs	r3, #14
    a762:	18fb      	adds	r3, r7, r3
    a764:	1dfa      	adds	r2, r7, #7
    a766:	7812      	ldrb	r2, [r2, #0]
    a768:	0952      	lsrs	r2, r2, #5
    a76a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    a76c:	4b0d      	ldr	r3, [pc, #52]	; (a7a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    a76e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    a770:	230f      	movs	r3, #15
    a772:	18fb      	adds	r3, r7, r3
    a774:	781b      	ldrb	r3, [r3, #0]
    a776:	2b00      	cmp	r3, #0
    a778:	d10f      	bne.n	a79a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    a77a:	230f      	movs	r3, #15
    a77c:	18fb      	adds	r3, r7, r3
    a77e:	781b      	ldrb	r3, [r3, #0]
    a780:	009b      	lsls	r3, r3, #2
    a782:	2210      	movs	r2, #16
    a784:	4694      	mov	ip, r2
    a786:	44bc      	add	ip, r7
    a788:	4463      	add	r3, ip
    a78a:	3b08      	subs	r3, #8
    a78c:	681a      	ldr	r2, [r3, #0]
    a78e:	230e      	movs	r3, #14
    a790:	18fb      	adds	r3, r7, r3
    a792:	781b      	ldrb	r3, [r3, #0]
    a794:	01db      	lsls	r3, r3, #7
    a796:	18d3      	adds	r3, r2, r3
    a798:	e000      	b.n	a79c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    a79a:	2300      	movs	r3, #0
	}
}
    a79c:	0018      	movs	r0, r3
    a79e:	46bd      	mov	sp, r7
    a7a0:	b004      	add	sp, #16
    a7a2:	bd80      	pop	{r7, pc}
    a7a4:	41004400 	.word	0x41004400

0000a7a8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    a7a8:	b580      	push	{r7, lr}
    a7aa:	b088      	sub	sp, #32
    a7ac:	af00      	add	r7, sp, #0
    a7ae:	60f8      	str	r0, [r7, #12]
    a7b0:	60b9      	str	r1, [r7, #8]
    a7b2:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    a7b4:	2300      	movs	r3, #0
    a7b6:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    a7b8:	687b      	ldr	r3, [r7, #4]
    a7ba:	78db      	ldrb	r3, [r3, #3]
    a7bc:	2201      	movs	r2, #1
    a7be:	4053      	eors	r3, r2
    a7c0:	b2db      	uxtb	r3, r3
    a7c2:	2b00      	cmp	r3, #0
    a7c4:	d035      	beq.n	a832 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    a7c6:	687b      	ldr	r3, [r7, #4]
    a7c8:	781b      	ldrb	r3, [r3, #0]
    a7ca:	2b80      	cmp	r3, #128	; 0x80
    a7cc:	d00b      	beq.n	a7e6 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    a7ce:	69fb      	ldr	r3, [r7, #28]
    a7d0:	2280      	movs	r2, #128	; 0x80
    a7d2:	0252      	lsls	r2, r2, #9
    a7d4:	4313      	orrs	r3, r2
    a7d6:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    a7d8:	687b      	ldr	r3, [r7, #4]
    a7da:	781b      	ldrb	r3, [r3, #0]
    a7dc:	061b      	lsls	r3, r3, #24
    a7de:	001a      	movs	r2, r3
    a7e0:	69fb      	ldr	r3, [r7, #28]
    a7e2:	4313      	orrs	r3, r2
    a7e4:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    a7e6:	687b      	ldr	r3, [r7, #4]
    a7e8:	785b      	ldrb	r3, [r3, #1]
    a7ea:	2b00      	cmp	r3, #0
    a7ec:	d003      	beq.n	a7f6 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    a7ee:	687b      	ldr	r3, [r7, #4]
    a7f0:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    a7f2:	2b02      	cmp	r3, #2
    a7f4:	d110      	bne.n	a818 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    a7f6:	69fb      	ldr	r3, [r7, #28]
    a7f8:	2280      	movs	r2, #128	; 0x80
    a7fa:	0292      	lsls	r2, r2, #10
    a7fc:	4313      	orrs	r3, r2
    a7fe:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    a800:	687b      	ldr	r3, [r7, #4]
    a802:	789b      	ldrb	r3, [r3, #2]
    a804:	2b00      	cmp	r3, #0
    a806:	d004      	beq.n	a812 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    a808:	69fb      	ldr	r3, [r7, #28]
    a80a:	2280      	movs	r2, #128	; 0x80
    a80c:	02d2      	lsls	r2, r2, #11
    a80e:	4313      	orrs	r3, r2
    a810:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    a812:	68fb      	ldr	r3, [r7, #12]
    a814:	68ba      	ldr	r2, [r7, #8]
    a816:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a818:	687b      	ldr	r3, [r7, #4]
    a81a:	785b      	ldrb	r3, [r3, #1]
    a81c:	2b01      	cmp	r3, #1
    a81e:	d003      	beq.n	a828 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    a820:	687b      	ldr	r3, [r7, #4]
    a822:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a824:	2b02      	cmp	r3, #2
    a826:	d107      	bne.n	a838 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    a828:	69fb      	ldr	r3, [r7, #28]
    a82a:	4a22      	ldr	r2, [pc, #136]	; (a8b4 <_system_pinmux_config+0x10c>)
    a82c:	4013      	ands	r3, r2
    a82e:	61fb      	str	r3, [r7, #28]
    a830:	e002      	b.n	a838 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    a832:	68fb      	ldr	r3, [r7, #12]
    a834:	68ba      	ldr	r2, [r7, #8]
    a836:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    a838:	68bb      	ldr	r3, [r7, #8]
    a83a:	041b      	lsls	r3, r3, #16
    a83c:	0c1b      	lsrs	r3, r3, #16
    a83e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    a840:	68bb      	ldr	r3, [r7, #8]
    a842:	0c1b      	lsrs	r3, r3, #16
    a844:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a846:	69ba      	ldr	r2, [r7, #24]
    a848:	69fb      	ldr	r3, [r7, #28]
    a84a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    a84c:	22a0      	movs	r2, #160	; 0xa0
    a84e:	05d2      	lsls	r2, r2, #23
    a850:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a852:	68fb      	ldr	r3, [r7, #12]
    a854:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a856:	697a      	ldr	r2, [r7, #20]
    a858:	69fb      	ldr	r3, [r7, #28]
    a85a:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    a85c:	22d0      	movs	r2, #208	; 0xd0
    a85e:	0612      	lsls	r2, r2, #24
    a860:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    a862:	68fb      	ldr	r3, [r7, #12]
    a864:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    a866:	687b      	ldr	r3, [r7, #4]
    a868:	78db      	ldrb	r3, [r3, #3]
    a86a:	2201      	movs	r2, #1
    a86c:	4053      	eors	r3, r2
    a86e:	b2db      	uxtb	r3, r3
    a870:	2b00      	cmp	r3, #0
    a872:	d01a      	beq.n	a8aa <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    a874:	69fa      	ldr	r2, [r7, #28]
    a876:	2380      	movs	r3, #128	; 0x80
    a878:	02db      	lsls	r3, r3, #11
    a87a:	4013      	ands	r3, r2
    a87c:	d00a      	beq.n	a894 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    a87e:	687b      	ldr	r3, [r7, #4]
    a880:	789b      	ldrb	r3, [r3, #2]
    a882:	2b01      	cmp	r3, #1
    a884:	d103      	bne.n	a88e <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    a886:	68fb      	ldr	r3, [r7, #12]
    a888:	68ba      	ldr	r2, [r7, #8]
    a88a:	619a      	str	r2, [r3, #24]
    a88c:	e002      	b.n	a894 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    a88e:	68fb      	ldr	r3, [r7, #12]
    a890:	68ba      	ldr	r2, [r7, #8]
    a892:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a894:	687b      	ldr	r3, [r7, #4]
    a896:	785b      	ldrb	r3, [r3, #1]
    a898:	2b01      	cmp	r3, #1
    a89a:	d003      	beq.n	a8a4 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    a89c:	687b      	ldr	r3, [r7, #4]
    a89e:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    a8a0:	2b02      	cmp	r3, #2
    a8a2:	d102      	bne.n	a8aa <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    a8a4:	68fb      	ldr	r3, [r7, #12]
    a8a6:	68ba      	ldr	r2, [r7, #8]
    a8a8:	609a      	str	r2, [r3, #8]
		}
	}
}
    a8aa:	46c0      	nop			; (mov r8, r8)
    a8ac:	46bd      	mov	sp, r7
    a8ae:	b008      	add	sp, #32
    a8b0:	bd80      	pop	{r7, pc}
    a8b2:	46c0      	nop			; (mov r8, r8)
    a8b4:	fffbffff 	.word	0xfffbffff

0000a8b8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    a8b8:	b580      	push	{r7, lr}
    a8ba:	b084      	sub	sp, #16
    a8bc:	af00      	add	r7, sp, #0
    a8be:	0002      	movs	r2, r0
    a8c0:	6039      	str	r1, [r7, #0]
    a8c2:	1dfb      	adds	r3, r7, #7
    a8c4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    a8c6:	1dfb      	adds	r3, r7, #7
    a8c8:	781b      	ldrb	r3, [r3, #0]
    a8ca:	0018      	movs	r0, r3
    a8cc:	4b0a      	ldr	r3, [pc, #40]	; (a8f8 <system_pinmux_pin_set_config+0x40>)
    a8ce:	4798      	blx	r3
    a8d0:	0003      	movs	r3, r0
    a8d2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    a8d4:	1dfb      	adds	r3, r7, #7
    a8d6:	781b      	ldrb	r3, [r3, #0]
    a8d8:	221f      	movs	r2, #31
    a8da:	4013      	ands	r3, r2
    a8dc:	2201      	movs	r2, #1
    a8de:	409a      	lsls	r2, r3
    a8e0:	0013      	movs	r3, r2
    a8e2:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    a8e4:	683a      	ldr	r2, [r7, #0]
    a8e6:	68b9      	ldr	r1, [r7, #8]
    a8e8:	68fb      	ldr	r3, [r7, #12]
    a8ea:	0018      	movs	r0, r3
    a8ec:	4b03      	ldr	r3, [pc, #12]	; (a8fc <system_pinmux_pin_set_config+0x44>)
    a8ee:	4798      	blx	r3
}
    a8f0:	46c0      	nop			; (mov r8, r8)
    a8f2:	46bd      	mov	sp, r7
    a8f4:	b004      	add	sp, #16
    a8f6:	bd80      	pop	{r7, pc}
    a8f8:	0000a749 	.word	0x0000a749
    a8fc:	0000a7a9 	.word	0x0000a7a9

0000a900 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    a900:	b580      	push	{r7, lr}
    a902:	af00      	add	r7, sp, #0
	return;
    a904:	46c0      	nop			; (mov r8, r8)
}
    a906:	46bd      	mov	sp, r7
    a908:	bd80      	pop	{r7, pc}
    a90a:	46c0      	nop			; (mov r8, r8)

0000a90c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    a90c:	b580      	push	{r7, lr}
    a90e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    a910:	4b06      	ldr	r3, [pc, #24]	; (a92c <system_init+0x20>)
    a912:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    a914:	4b06      	ldr	r3, [pc, #24]	; (a930 <system_init+0x24>)
    a916:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    a918:	4b06      	ldr	r3, [pc, #24]	; (a934 <system_init+0x28>)
    a91a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    a91c:	4b06      	ldr	r3, [pc, #24]	; (a938 <system_init+0x2c>)
    a91e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    a920:	4b06      	ldr	r3, [pc, #24]	; (a93c <system_init+0x30>)
    a922:	4798      	blx	r3
}
    a924:	46c0      	nop			; (mov r8, r8)
    a926:	46bd      	mov	sp, r7
    a928:	bd80      	pop	{r7, pc}
    a92a:	46c0      	nop			; (mov r8, r8)
    a92c:	00009fad 	.word	0x00009fad
    a930:	000070e1 	.word	0x000070e1
    a934:	0000a901 	.word	0x0000a901
    a938:	00007695 	.word	0x00007695
    a93c:	0000a901 	.word	0x0000a901

0000a940 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    a940:	b580      	push	{r7, lr}
    a942:	af00      	add	r7, sp, #0
    a944:	2000      	movs	r0, #0
    a946:	4b02      	ldr	r3, [pc, #8]	; (a950 <TCC0_Handler+0x10>)
    a948:	4798      	blx	r3
    a94a:	46c0      	nop			; (mov r8, r8)
    a94c:	46bd      	mov	sp, r7
    a94e:	bd80      	pop	{r7, pc}
    a950:	0000a97d 	.word	0x0000a97d

0000a954 <TCC1_Handler>:
    a954:	b580      	push	{r7, lr}
    a956:	af00      	add	r7, sp, #0
    a958:	2001      	movs	r0, #1
    a95a:	4b02      	ldr	r3, [pc, #8]	; (a964 <TCC1_Handler+0x10>)
    a95c:	4798      	blx	r3
    a95e:	46c0      	nop			; (mov r8, r8)
    a960:	46bd      	mov	sp, r7
    a962:	bd80      	pop	{r7, pc}
    a964:	0000a97d 	.word	0x0000a97d

0000a968 <TCC2_Handler>:
    a968:	b580      	push	{r7, lr}
    a96a:	af00      	add	r7, sp, #0
    a96c:	2002      	movs	r0, #2
    a96e:	4b02      	ldr	r3, [pc, #8]	; (a978 <TCC2_Handler+0x10>)
    a970:	4798      	blx	r3
    a972:	46c0      	nop			; (mov r8, r8)
    a974:	46bd      	mov	sp, r7
    a976:	bd80      	pop	{r7, pc}
    a978:	0000a97d 	.word	0x0000a97d

0000a97c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    a97c:	b580      	push	{r7, lr}
    a97e:	b086      	sub	sp, #24
    a980:	af00      	add	r7, sp, #0
    a982:	0002      	movs	r2, r0
    a984:	1dfb      	adds	r3, r7, #7
    a986:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    a988:	1dfb      	adds	r3, r7, #7
    a98a:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    a98c:	4b18      	ldr	r3, [pc, #96]	; (a9f0 <_tcc_interrupt_handler+0x74>)
    a98e:	0092      	lsls	r2, r2, #2
    a990:	58d3      	ldr	r3, [r2, r3]
    a992:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    a994:	693b      	ldr	r3, [r7, #16]
    a996:	681b      	ldr	r3, [r3, #0]
    a998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    a99a:	693b      	ldr	r3, [r7, #16]
    a99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    a99e:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    a9a0:	693b      	ldr	r3, [r7, #16]
    a9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    a9a4:	4013      	ands	r3, r2
    a9a6:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    a9a8:	2300      	movs	r3, #0
    a9aa:	617b      	str	r3, [r7, #20]
    a9ac:	e019      	b.n	a9e2 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    a9ae:	4b11      	ldr	r3, [pc, #68]	; (a9f4 <_tcc_interrupt_handler+0x78>)
    a9b0:	697a      	ldr	r2, [r7, #20]
    a9b2:	0092      	lsls	r2, r2, #2
    a9b4:	58d3      	ldr	r3, [r2, r3]
    a9b6:	68fa      	ldr	r2, [r7, #12]
    a9b8:	4013      	ands	r3, r2
    a9ba:	d00f      	beq.n	a9dc <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    a9bc:	693a      	ldr	r2, [r7, #16]
    a9be:	697b      	ldr	r3, [r7, #20]
    a9c0:	009b      	lsls	r3, r3, #2
    a9c2:	18d3      	adds	r3, r2, r3
    a9c4:	3304      	adds	r3, #4
    a9c6:	681b      	ldr	r3, [r3, #0]
    a9c8:	693a      	ldr	r2, [r7, #16]
    a9ca:	0010      	movs	r0, r2
    a9cc:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    a9ce:	693b      	ldr	r3, [r7, #16]
    a9d0:	681b      	ldr	r3, [r3, #0]
    a9d2:	4a08      	ldr	r2, [pc, #32]	; (a9f4 <_tcc_interrupt_handler+0x78>)
    a9d4:	6979      	ldr	r1, [r7, #20]
    a9d6:	0089      	lsls	r1, r1, #2
    a9d8:	588a      	ldr	r2, [r1, r2]
    a9da:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    a9dc:	697b      	ldr	r3, [r7, #20]
    a9de:	3301      	adds	r3, #1
    a9e0:	617b      	str	r3, [r7, #20]
    a9e2:	697b      	ldr	r3, [r7, #20]
    a9e4:	2b0b      	cmp	r3, #11
    a9e6:	dde2      	ble.n	a9ae <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    a9e8:	46c0      	nop			; (mov r8, r8)
    a9ea:	46bd      	mov	sp, r7
    a9ec:	b006      	add	sp, #24
    a9ee:	bd80      	pop	{r7, pc}
    a9f0:	20004784 	.word	0x20004784
    a9f4:	00011f74 	.word	0x00011f74

0000a9f8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    a9f8:	b580      	push	{r7, lr}
    a9fa:	b082      	sub	sp, #8
    a9fc:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    a9fe:	4b2f      	ldr	r3, [pc, #188]	; (aabc <Reset_Handler+0xc4>)
    aa00:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    aa02:	4b2f      	ldr	r3, [pc, #188]	; (aac0 <Reset_Handler+0xc8>)
    aa04:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    aa06:	687a      	ldr	r2, [r7, #4]
    aa08:	683b      	ldr	r3, [r7, #0]
    aa0a:	429a      	cmp	r2, r3
    aa0c:	d00c      	beq.n	aa28 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    aa0e:	e007      	b.n	aa20 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    aa10:	683b      	ldr	r3, [r7, #0]
    aa12:	1d1a      	adds	r2, r3, #4
    aa14:	603a      	str	r2, [r7, #0]
    aa16:	687a      	ldr	r2, [r7, #4]
    aa18:	1d11      	adds	r1, r2, #4
    aa1a:	6079      	str	r1, [r7, #4]
    aa1c:	6812      	ldr	r2, [r2, #0]
    aa1e:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    aa20:	683a      	ldr	r2, [r7, #0]
    aa22:	4b28      	ldr	r3, [pc, #160]	; (aac4 <Reset_Handler+0xcc>)
    aa24:	429a      	cmp	r2, r3
    aa26:	d3f3      	bcc.n	aa10 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    aa28:	4b27      	ldr	r3, [pc, #156]	; (aac8 <Reset_Handler+0xd0>)
    aa2a:	603b      	str	r3, [r7, #0]
    aa2c:	e004      	b.n	aa38 <Reset_Handler+0x40>
                *pDest++ = 0;
    aa2e:	683b      	ldr	r3, [r7, #0]
    aa30:	1d1a      	adds	r2, r3, #4
    aa32:	603a      	str	r2, [r7, #0]
    aa34:	2200      	movs	r2, #0
    aa36:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    aa38:	683a      	ldr	r2, [r7, #0]
    aa3a:	4b24      	ldr	r3, [pc, #144]	; (aacc <Reset_Handler+0xd4>)
    aa3c:	429a      	cmp	r2, r3
    aa3e:	d3f6      	bcc.n	aa2e <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    aa40:	4b23      	ldr	r3, [pc, #140]	; (aad0 <Reset_Handler+0xd8>)
    aa42:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    aa44:	4b23      	ldr	r3, [pc, #140]	; (aad4 <Reset_Handler+0xdc>)
    aa46:	687a      	ldr	r2, [r7, #4]
    aa48:	21ff      	movs	r1, #255	; 0xff
    aa4a:	438a      	bics	r2, r1
    aa4c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    aa4e:	4a22      	ldr	r2, [pc, #136]	; (aad8 <Reset_Handler+0xe0>)
    aa50:	2390      	movs	r3, #144	; 0x90
    aa52:	005b      	lsls	r3, r3, #1
    aa54:	2102      	movs	r1, #2
    aa56:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    aa58:	4a20      	ldr	r2, [pc, #128]	; (aadc <Reset_Handler+0xe4>)
    aa5a:	78d3      	ldrb	r3, [r2, #3]
    aa5c:	2103      	movs	r1, #3
    aa5e:	438b      	bics	r3, r1
    aa60:	1c19      	adds	r1, r3, #0
    aa62:	2302      	movs	r3, #2
    aa64:	430b      	orrs	r3, r1
    aa66:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    aa68:	4a1c      	ldr	r2, [pc, #112]	; (aadc <Reset_Handler+0xe4>)
    aa6a:	78d3      	ldrb	r3, [r2, #3]
    aa6c:	210c      	movs	r1, #12
    aa6e:	438b      	bics	r3, r1
    aa70:	1c19      	adds	r1, r3, #0
    aa72:	2308      	movs	r3, #8
    aa74:	430b      	orrs	r3, r1
    aa76:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    aa78:	4a19      	ldr	r2, [pc, #100]	; (aae0 <Reset_Handler+0xe8>)
    aa7a:	7b93      	ldrb	r3, [r2, #14]
    aa7c:	2130      	movs	r1, #48	; 0x30
    aa7e:	438b      	bics	r3, r1
    aa80:	1c19      	adds	r1, r3, #0
    aa82:	2320      	movs	r3, #32
    aa84:	430b      	orrs	r3, r1
    aa86:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    aa88:	4a15      	ldr	r2, [pc, #84]	; (aae0 <Reset_Handler+0xe8>)
    aa8a:	7b93      	ldrb	r3, [r2, #14]
    aa8c:	210c      	movs	r1, #12
    aa8e:	438b      	bics	r3, r1
    aa90:	1c19      	adds	r1, r3, #0
    aa92:	2308      	movs	r3, #8
    aa94:	430b      	orrs	r3, r1
    aa96:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    aa98:	4a11      	ldr	r2, [pc, #68]	; (aae0 <Reset_Handler+0xe8>)
    aa9a:	7b93      	ldrb	r3, [r2, #14]
    aa9c:	2103      	movs	r1, #3
    aa9e:	438b      	bics	r3, r1
    aaa0:	1c19      	adds	r1, r3, #0
    aaa2:	2302      	movs	r3, #2
    aaa4:	430b      	orrs	r3, r1
    aaa6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    aaa8:	4a0e      	ldr	r2, [pc, #56]	; (aae4 <Reset_Handler+0xec>)
    aaaa:	6853      	ldr	r3, [r2, #4]
    aaac:	2180      	movs	r1, #128	; 0x80
    aaae:	430b      	orrs	r3, r1
    aab0:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    aab2:	4b0d      	ldr	r3, [pc, #52]	; (aae8 <Reset_Handler+0xf0>)
    aab4:	4798      	blx	r3

        /* Branch to main function */
        main();
    aab6:	4b0d      	ldr	r3, [pc, #52]	; (aaec <Reset_Handler+0xf4>)
    aab8:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    aaba:	e7fe      	b.n	aaba <Reset_Handler+0xc2>
    aabc:	00012878 	.word	0x00012878
    aac0:	20000000 	.word	0x20000000
    aac4:	2000009c 	.word	0x2000009c
    aac8:	2000009c 	.word	0x2000009c
    aacc:	200047d8 	.word	0x200047d8
    aad0:	00000000 	.word	0x00000000
    aad4:	e000ed00 	.word	0xe000ed00
    aad8:	41007000 	.word	0x41007000
    aadc:	41005000 	.word	0x41005000
    aae0:	41004800 	.word	0x41004800
    aae4:	41004000 	.word	0x41004000
    aae8:	0000f71d 	.word	0x0000f71d
    aaec:	0000dc39 	.word	0x0000dc39

0000aaf0 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
 uint32_t phantomISR = 9999;
void Dummy_Handler(void)
{
    aaf0:	b580      	push	{r7, lr}
    aaf2:	b082      	sub	sp, #8
    aaf4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    aaf6:	f3ef 8305 	mrs	r3, IPSR
    aafa:	607b      	str	r3, [r7, #4]
  return(result);
    aafc:	687a      	ldr	r2, [r7, #4]
        while (1) {
            phantomISR = __get_IPSR();
    aafe:	4b01      	ldr	r3, [pc, #4]	; (ab04 <Dummy_Handler+0x14>)
    ab00:	601a      	str	r2, [r3, #0]
        }
    ab02:	e7f8      	b.n	aaf6 <Dummy_Handler+0x6>
    ab04:	2000001c 	.word	0x2000001c

0000ab08 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    ab08:	b580      	push	{r7, lr}
    ab0a:	b086      	sub	sp, #24
    ab0c:	af00      	add	r7, sp, #0
    ab0e:	60f8      	str	r0, [r7, #12]
    ab10:	60b9      	str	r1, [r7, #8]
    ab12:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    ab14:	2300      	movs	r3, #0
    ab16:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    ab18:	68fb      	ldr	r3, [r7, #12]
    ab1a:	2b00      	cmp	r3, #0
    ab1c:	d012      	beq.n	ab44 <_read+0x3c>
		return -1;
    ab1e:	2301      	movs	r3, #1
    ab20:	425b      	negs	r3, r3
    ab22:	e013      	b.n	ab4c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    ab24:	4b0b      	ldr	r3, [pc, #44]	; (ab54 <_read+0x4c>)
    ab26:	681a      	ldr	r2, [r3, #0]
    ab28:	4b0b      	ldr	r3, [pc, #44]	; (ab58 <_read+0x50>)
    ab2a:	681b      	ldr	r3, [r3, #0]
    ab2c:	68b9      	ldr	r1, [r7, #8]
    ab2e:	0018      	movs	r0, r3
    ab30:	4790      	blx	r2
		ptr++;
    ab32:	68bb      	ldr	r3, [r7, #8]
    ab34:	3301      	adds	r3, #1
    ab36:	60bb      	str	r3, [r7, #8]
		nChars++;
    ab38:	697b      	ldr	r3, [r7, #20]
    ab3a:	3301      	adds	r3, #1
    ab3c:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    ab3e:	687b      	ldr	r3, [r7, #4]
    ab40:	3b01      	subs	r3, #1
    ab42:	607b      	str	r3, [r7, #4]
    ab44:	687b      	ldr	r3, [r7, #4]
    ab46:	2b00      	cmp	r3, #0
    ab48:	dcec      	bgt.n	ab24 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    ab4a:	697b      	ldr	r3, [r7, #20]
}
    ab4c:	0018      	movs	r0, r3
    ab4e:	46bd      	mov	sp, r7
    ab50:	b006      	add	sp, #24
    ab52:	bd80      	pop	{r7, pc}
    ab54:	20004790 	.word	0x20004790
    ab58:	20004798 	.word	0x20004798

0000ab5c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    ab5c:	b580      	push	{r7, lr}
    ab5e:	b086      	sub	sp, #24
    ab60:	af00      	add	r7, sp, #0
    ab62:	60f8      	str	r0, [r7, #12]
    ab64:	60b9      	str	r1, [r7, #8]
    ab66:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    ab68:	2300      	movs	r3, #0
    ab6a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    ab6c:	68fb      	ldr	r3, [r7, #12]
    ab6e:	2b01      	cmp	r3, #1
    ab70:	d01d      	beq.n	abae <_write+0x52>
    ab72:	68fb      	ldr	r3, [r7, #12]
    ab74:	2b02      	cmp	r3, #2
    ab76:	d01a      	beq.n	abae <_write+0x52>
    ab78:	68fb      	ldr	r3, [r7, #12]
    ab7a:	2b03      	cmp	r3, #3
    ab7c:	d017      	beq.n	abae <_write+0x52>
		return -1;
    ab7e:	2301      	movs	r3, #1
    ab80:	425b      	negs	r3, r3
    ab82:	e018      	b.n	abb6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    ab84:	4b0e      	ldr	r3, [pc, #56]	; (abc0 <_write+0x64>)
    ab86:	681a      	ldr	r2, [r3, #0]
    ab88:	4b0e      	ldr	r3, [pc, #56]	; (abc4 <_write+0x68>)
    ab8a:	6818      	ldr	r0, [r3, #0]
    ab8c:	68bb      	ldr	r3, [r7, #8]
    ab8e:	1c59      	adds	r1, r3, #1
    ab90:	60b9      	str	r1, [r7, #8]
    ab92:	781b      	ldrb	r3, [r3, #0]
    ab94:	0019      	movs	r1, r3
    ab96:	4790      	blx	r2
    ab98:	1e03      	subs	r3, r0, #0
    ab9a:	da02      	bge.n	aba2 <_write+0x46>
			return -1;
    ab9c:	2301      	movs	r3, #1
    ab9e:	425b      	negs	r3, r3
    aba0:	e009      	b.n	abb6 <_write+0x5a>
		}
		++nChars;
    aba2:	697b      	ldr	r3, [r7, #20]
    aba4:	3301      	adds	r3, #1
    aba6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    aba8:	687b      	ldr	r3, [r7, #4]
    abaa:	3b01      	subs	r3, #1
    abac:	607b      	str	r3, [r7, #4]
    abae:	687b      	ldr	r3, [r7, #4]
    abb0:	2b00      	cmp	r3, #0
    abb2:	d1e7      	bne.n	ab84 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    abb4:	697b      	ldr	r3, [r7, #20]
}
    abb6:	0018      	movs	r0, r3
    abb8:	46bd      	mov	sp, r7
    abba:	b006      	add	sp, #24
    abbc:	bd80      	pop	{r7, pc}
    abbe:	46c0      	nop			; (mov r8, r8)
    abc0:	20004794 	.word	0x20004794
    abc4:	20004798 	.word	0x20004798

0000abc8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    abc8:	b580      	push	{r7, lr}
    abca:	b084      	sub	sp, #16
    abcc:	af00      	add	r7, sp, #0
    abce:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    abd0:	4b0a      	ldr	r3, [pc, #40]	; (abfc <_sbrk+0x34>)
    abd2:	681b      	ldr	r3, [r3, #0]
    abd4:	2b00      	cmp	r3, #0
    abd6:	d102      	bne.n	abde <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    abd8:	4b08      	ldr	r3, [pc, #32]	; (abfc <_sbrk+0x34>)
    abda:	4a09      	ldr	r2, [pc, #36]	; (ac00 <_sbrk+0x38>)
    abdc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    abde:	4b07      	ldr	r3, [pc, #28]	; (abfc <_sbrk+0x34>)
    abe0:	681b      	ldr	r3, [r3, #0]
    abe2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    abe4:	4b05      	ldr	r3, [pc, #20]	; (abfc <_sbrk+0x34>)
    abe6:	681a      	ldr	r2, [r3, #0]
    abe8:	687b      	ldr	r3, [r7, #4]
    abea:	18d2      	adds	r2, r2, r3
    abec:	4b03      	ldr	r3, [pc, #12]	; (abfc <_sbrk+0x34>)
    abee:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    abf0:	68fb      	ldr	r3, [r7, #12]
}
    abf2:	0018      	movs	r0, r3
    abf4:	46bd      	mov	sp, r7
    abf6:	b004      	add	sp, #16
    abf8:	bd80      	pop	{r7, pc}
    abfa:	46c0      	nop			; (mov r8, r8)
    abfc:	2000012c 	.word	0x2000012c
    ac00:	200067d8 	.word	0x200067d8

0000ac04 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    ac04:	b580      	push	{r7, lr}
    ac06:	b082      	sub	sp, #8
    ac08:	af00      	add	r7, sp, #0
    ac0a:	6078      	str	r0, [r7, #4]
	return -1;
    ac0c:	2301      	movs	r3, #1
    ac0e:	425b      	negs	r3, r3
}
    ac10:	0018      	movs	r0, r3
    ac12:	46bd      	mov	sp, r7
    ac14:	b002      	add	sp, #8
    ac16:	bd80      	pop	{r7, pc}

0000ac18 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    ac18:	b580      	push	{r7, lr}
    ac1a:	b082      	sub	sp, #8
    ac1c:	af00      	add	r7, sp, #0
    ac1e:	6078      	str	r0, [r7, #4]
    ac20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    ac22:	683b      	ldr	r3, [r7, #0]
    ac24:	2280      	movs	r2, #128	; 0x80
    ac26:	0192      	lsls	r2, r2, #6
    ac28:	605a      	str	r2, [r3, #4]

	return 0;
    ac2a:	2300      	movs	r3, #0
}
    ac2c:	0018      	movs	r0, r3
    ac2e:	46bd      	mov	sp, r7
    ac30:	b002      	add	sp, #8
    ac32:	bd80      	pop	{r7, pc}

0000ac34 <_isatty>:

extern int _isatty(int file)
{
    ac34:	b580      	push	{r7, lr}
    ac36:	b082      	sub	sp, #8
    ac38:	af00      	add	r7, sp, #0
    ac3a:	6078      	str	r0, [r7, #4]
	return 1;
    ac3c:	2301      	movs	r3, #1
}
    ac3e:	0018      	movs	r0, r3
    ac40:	46bd      	mov	sp, r7
    ac42:	b002      	add	sp, #8
    ac44:	bd80      	pop	{r7, pc}
    ac46:	46c0      	nop			; (mov r8, r8)

0000ac48 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    ac48:	b580      	push	{r7, lr}
    ac4a:	b084      	sub	sp, #16
    ac4c:	af00      	add	r7, sp, #0
    ac4e:	60f8      	str	r0, [r7, #12]
    ac50:	60b9      	str	r1, [r7, #8]
    ac52:	607a      	str	r2, [r7, #4]
	return 0;
    ac54:	2300      	movs	r3, #0
}
    ac56:	0018      	movs	r0, r3
    ac58:	46bd      	mov	sp, r7
    ac5a:	b004      	add	sp, #16
    ac5c:	bd80      	pop	{r7, pc}
    ac5e:	46c0      	nop			; (mov r8, r8)

0000ac60 <_exit>:

extern void _exit(int status)
{
    ac60:	b580      	push	{r7, lr}
    ac62:	b082      	sub	sp, #8
    ac64:	af00      	add	r7, sp, #0
    ac66:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    ac68:	be00      	bkpt	0x0000
}
    ac6a:	46c0      	nop			; (mov r8, r8)
    ac6c:	46bd      	mov	sp, r7
    ac6e:	b002      	add	sp, #8
    ac70:	bd80      	pop	{r7, pc}
    ac72:	46c0      	nop			; (mov r8, r8)

0000ac74 <_kill>:

extern void _kill(int pid, int sig)
{
    ac74:	b580      	push	{r7, lr}
    ac76:	b082      	sub	sp, #8
    ac78:	af00      	add	r7, sp, #0
    ac7a:	6078      	str	r0, [r7, #4]
    ac7c:	6039      	str	r1, [r7, #0]
	return;
    ac7e:	46c0      	nop			; (mov r8, r8)
}
    ac80:	46bd      	mov	sp, r7
    ac82:	b002      	add	sp, #8
    ac84:	bd80      	pop	{r7, pc}
    ac86:	46c0      	nop			; (mov r8, r8)

0000ac88 <_getpid>:

extern int _getpid(void)
{
    ac88:	b580      	push	{r7, lr}
    ac8a:	af00      	add	r7, sp, #0
	return -1;
    ac8c:	2301      	movs	r3, #1
    ac8e:	425b      	negs	r3, r3
}
    ac90:	0018      	movs	r0, r3
    ac92:	46bd      	mov	sp, r7
    ac94:	bd80      	pop	{r7, pc}
    ac96:	46c0      	nop			; (mov r8, r8)

0000ac98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    ac98:	b580      	push	{r7, lr}
    ac9a:	b082      	sub	sp, #8
    ac9c:	af00      	add	r7, sp, #0
    ac9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    aca0:	687b      	ldr	r3, [r7, #4]
    aca2:	3308      	adds	r3, #8
    aca4:	001a      	movs	r2, r3
    aca6:	687b      	ldr	r3, [r7, #4]
    aca8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    acaa:	687b      	ldr	r3, [r7, #4]
    acac:	2201      	movs	r2, #1
    acae:	4252      	negs	r2, r2
    acb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    acb2:	687b      	ldr	r3, [r7, #4]
    acb4:	3308      	adds	r3, #8
    acb6:	001a      	movs	r2, r3
    acb8:	687b      	ldr	r3, [r7, #4]
    acba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    acbc:	687b      	ldr	r3, [r7, #4]
    acbe:	3308      	adds	r3, #8
    acc0:	001a      	movs	r2, r3
    acc2:	687b      	ldr	r3, [r7, #4]
    acc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    acc6:	687b      	ldr	r3, [r7, #4]
    acc8:	2200      	movs	r2, #0
    acca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    accc:	46c0      	nop			; (mov r8, r8)
    acce:	46bd      	mov	sp, r7
    acd0:	b002      	add	sp, #8
    acd2:	bd80      	pop	{r7, pc}

0000acd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    acd4:	b580      	push	{r7, lr}
    acd6:	b082      	sub	sp, #8
    acd8:	af00      	add	r7, sp, #0
    acda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    acdc:	687b      	ldr	r3, [r7, #4]
    acde:	2200      	movs	r2, #0
    ace0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    ace2:	46c0      	nop			; (mov r8, r8)
    ace4:	46bd      	mov	sp, r7
    ace6:	b002      	add	sp, #8
    ace8:	bd80      	pop	{r7, pc}
    acea:	46c0      	nop			; (mov r8, r8)

0000acec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    acec:	b580      	push	{r7, lr}
    acee:	b084      	sub	sp, #16
    acf0:	af00      	add	r7, sp, #0
    acf2:	6078      	str	r0, [r7, #4]
    acf4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    acf6:	687b      	ldr	r3, [r7, #4]
    acf8:	685b      	ldr	r3, [r3, #4]
    acfa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    acfc:	683b      	ldr	r3, [r7, #0]
    acfe:	68fa      	ldr	r2, [r7, #12]
    ad00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    ad02:	68fb      	ldr	r3, [r7, #12]
    ad04:	689a      	ldr	r2, [r3, #8]
    ad06:	683b      	ldr	r3, [r7, #0]
    ad08:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    ad0a:	68fb      	ldr	r3, [r7, #12]
    ad0c:	689b      	ldr	r3, [r3, #8]
    ad0e:	683a      	ldr	r2, [r7, #0]
    ad10:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    ad12:	68fb      	ldr	r3, [r7, #12]
    ad14:	683a      	ldr	r2, [r7, #0]
    ad16:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    ad18:	683b      	ldr	r3, [r7, #0]
    ad1a:	687a      	ldr	r2, [r7, #4]
    ad1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    ad1e:	687b      	ldr	r3, [r7, #4]
    ad20:	681b      	ldr	r3, [r3, #0]
    ad22:	1c5a      	adds	r2, r3, #1
    ad24:	687b      	ldr	r3, [r7, #4]
    ad26:	601a      	str	r2, [r3, #0]
}
    ad28:	46c0      	nop			; (mov r8, r8)
    ad2a:	46bd      	mov	sp, r7
    ad2c:	b004      	add	sp, #16
    ad2e:	bd80      	pop	{r7, pc}

0000ad30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    ad30:	b580      	push	{r7, lr}
    ad32:	b084      	sub	sp, #16
    ad34:	af00      	add	r7, sp, #0
    ad36:	6078      	str	r0, [r7, #4]
    ad38:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    ad3a:	683b      	ldr	r3, [r7, #0]
    ad3c:	681b      	ldr	r3, [r3, #0]
    ad3e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    ad40:	68bb      	ldr	r3, [r7, #8]
    ad42:	3301      	adds	r3, #1
    ad44:	d103      	bne.n	ad4e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    ad46:	687b      	ldr	r3, [r7, #4]
    ad48:	691b      	ldr	r3, [r3, #16]
    ad4a:	60fb      	str	r3, [r7, #12]
    ad4c:	e00c      	b.n	ad68 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    ad4e:	687b      	ldr	r3, [r7, #4]
    ad50:	3308      	adds	r3, #8
    ad52:	60fb      	str	r3, [r7, #12]
    ad54:	e002      	b.n	ad5c <vListInsert+0x2c>
    ad56:	68fb      	ldr	r3, [r7, #12]
    ad58:	685b      	ldr	r3, [r3, #4]
    ad5a:	60fb      	str	r3, [r7, #12]
    ad5c:	68fb      	ldr	r3, [r7, #12]
    ad5e:	685b      	ldr	r3, [r3, #4]
    ad60:	681a      	ldr	r2, [r3, #0]
    ad62:	68bb      	ldr	r3, [r7, #8]
    ad64:	429a      	cmp	r2, r3
    ad66:	d9f6      	bls.n	ad56 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    ad68:	68fb      	ldr	r3, [r7, #12]
    ad6a:	685a      	ldr	r2, [r3, #4]
    ad6c:	683b      	ldr	r3, [r7, #0]
    ad6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    ad70:	683b      	ldr	r3, [r7, #0]
    ad72:	685b      	ldr	r3, [r3, #4]
    ad74:	683a      	ldr	r2, [r7, #0]
    ad76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    ad78:	683b      	ldr	r3, [r7, #0]
    ad7a:	68fa      	ldr	r2, [r7, #12]
    ad7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    ad7e:	68fb      	ldr	r3, [r7, #12]
    ad80:	683a      	ldr	r2, [r7, #0]
    ad82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    ad84:	683b      	ldr	r3, [r7, #0]
    ad86:	687a      	ldr	r2, [r7, #4]
    ad88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    ad8a:	687b      	ldr	r3, [r7, #4]
    ad8c:	681b      	ldr	r3, [r3, #0]
    ad8e:	1c5a      	adds	r2, r3, #1
    ad90:	687b      	ldr	r3, [r7, #4]
    ad92:	601a      	str	r2, [r3, #0]
}
    ad94:	46c0      	nop			; (mov r8, r8)
    ad96:	46bd      	mov	sp, r7
    ad98:	b004      	add	sp, #16
    ad9a:	bd80      	pop	{r7, pc}

0000ad9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    ad9c:	b580      	push	{r7, lr}
    ad9e:	b084      	sub	sp, #16
    ada0:	af00      	add	r7, sp, #0
    ada2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    ada4:	687b      	ldr	r3, [r7, #4]
    ada6:	691b      	ldr	r3, [r3, #16]
    ada8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    adaa:	687b      	ldr	r3, [r7, #4]
    adac:	685b      	ldr	r3, [r3, #4]
    adae:	687a      	ldr	r2, [r7, #4]
    adb0:	6892      	ldr	r2, [r2, #8]
    adb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	689b      	ldr	r3, [r3, #8]
    adb8:	687a      	ldr	r2, [r7, #4]
    adba:	6852      	ldr	r2, [r2, #4]
    adbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    adbe:	68fb      	ldr	r3, [r7, #12]
    adc0:	685a      	ldr	r2, [r3, #4]
    adc2:	687b      	ldr	r3, [r7, #4]
    adc4:	429a      	cmp	r2, r3
    adc6:	d103      	bne.n	add0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    adc8:	687b      	ldr	r3, [r7, #4]
    adca:	689a      	ldr	r2, [r3, #8]
    adcc:	68fb      	ldr	r3, [r7, #12]
    adce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    add0:	687b      	ldr	r3, [r7, #4]
    add2:	2200      	movs	r2, #0
    add4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    add6:	68fb      	ldr	r3, [r7, #12]
    add8:	681b      	ldr	r3, [r3, #0]
    adda:	1e5a      	subs	r2, r3, #1
    addc:	68fb      	ldr	r3, [r7, #12]
    adde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    ade0:	68fb      	ldr	r3, [r7, #12]
    ade2:	681b      	ldr	r3, [r3, #0]
}
    ade4:	0018      	movs	r0, r3
    ade6:	46bd      	mov	sp, r7
    ade8:	b004      	add	sp, #16
    adea:	bd80      	pop	{r7, pc}

0000adec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    adec:	b580      	push	{r7, lr}
    adee:	b084      	sub	sp, #16
    adf0:	af00      	add	r7, sp, #0
    adf2:	60f8      	str	r0, [r7, #12]
    adf4:	60b9      	str	r1, [r7, #8]
    adf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    adf8:	68fb      	ldr	r3, [r7, #12]
    adfa:	3b04      	subs	r3, #4
    adfc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    adfe:	68fb      	ldr	r3, [r7, #12]
    ae00:	2280      	movs	r2, #128	; 0x80
    ae02:	0452      	lsls	r2, r2, #17
    ae04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    ae06:	68fb      	ldr	r3, [r7, #12]
    ae08:	3b04      	subs	r3, #4
    ae0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    ae0c:	68ba      	ldr	r2, [r7, #8]
    ae0e:	68fb      	ldr	r3, [r7, #12]
    ae10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    ae12:	68fb      	ldr	r3, [r7, #12]
    ae14:	3b04      	subs	r3, #4
    ae16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    ae18:	4a08      	ldr	r2, [pc, #32]	; (ae3c <pxPortInitialiseStack+0x50>)
    ae1a:	68fb      	ldr	r3, [r7, #12]
    ae1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    ae1e:	68fb      	ldr	r3, [r7, #12]
    ae20:	3b14      	subs	r3, #20
    ae22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    ae24:	687a      	ldr	r2, [r7, #4]
    ae26:	68fb      	ldr	r3, [r7, #12]
    ae28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    ae2a:	68fb      	ldr	r3, [r7, #12]
    ae2c:	3b20      	subs	r3, #32
    ae2e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    ae30:	68fb      	ldr	r3, [r7, #12]
}
    ae32:	0018      	movs	r0, r3
    ae34:	46bd      	mov	sp, r7
    ae36:	b004      	add	sp, #16
    ae38:	bd80      	pop	{r7, pc}
    ae3a:	46c0      	nop			; (mov r8, r8)
    ae3c:	0000ae41 	.word	0x0000ae41

0000ae40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    ae40:	b580      	push	{r7, lr}
    ae42:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    ae44:	4b03      	ldr	r3, [pc, #12]	; (ae54 <prvTaskExitError+0x14>)
    ae46:	681b      	ldr	r3, [r3, #0]
    ae48:	3301      	adds	r3, #1
    ae4a:	d001      	beq.n	ae50 <prvTaskExitError+0x10>
    ae4c:	b672      	cpsid	i
    ae4e:	e7fe      	b.n	ae4e <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    ae50:	b672      	cpsid	i
	for( ;; );
    ae52:	e7fe      	b.n	ae52 <prvTaskExitError+0x12>
    ae54:	20000020 	.word	0x20000020

0000ae58 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    ae58:	b580      	push	{r7, lr}
    ae5a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    ae5c:	46c0      	nop			; (mov r8, r8)
    ae5e:	46bd      	mov	sp, r7
    ae60:	bd80      	pop	{r7, pc}
    ae62:	46c0      	nop			; (mov r8, r8)
	...

0000ae70 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    ae70:	4a0b      	ldr	r2, [pc, #44]	; (aea0 <pxCurrentTCBConst2>)
    ae72:	6813      	ldr	r3, [r2, #0]
    ae74:	6818      	ldr	r0, [r3, #0]
    ae76:	3020      	adds	r0, #32
    ae78:	f380 8809 	msr	PSP, r0
    ae7c:	2002      	movs	r0, #2
    ae7e:	f380 8814 	msr	CONTROL, r0
    ae82:	f3bf 8f6f 	isb	sy
    ae86:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    ae88:	46ae      	mov	lr, r5
    ae8a:	bc08      	pop	{r3}
    ae8c:	bc04      	pop	{r2}
    ae8e:	b662      	cpsie	i
    ae90:	4718      	bx	r3
    ae92:	46c0      	nop			; (mov r8, r8)
    ae94:	46c0      	nop			; (mov r8, r8)
    ae96:	46c0      	nop			; (mov r8, r8)
    ae98:	46c0      	nop			; (mov r8, r8)
    ae9a:	46c0      	nop			; (mov r8, r8)
    ae9c:	46c0      	nop			; (mov r8, r8)
    ae9e:	46c0      	nop			; (mov r8, r8)

0000aea0 <pxCurrentTCBConst2>:
    aea0:	20003d38 	.word	0x20003d38
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    aea4:	46c0      	nop			; (mov r8, r8)
    aea6:	46c0      	nop			; (mov r8, r8)

0000aea8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    aea8:	b580      	push	{r7, lr}
    aeaa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    aeac:	4b0d      	ldr	r3, [pc, #52]	; (aee4 <xPortStartScheduler+0x3c>)
    aeae:	4a0d      	ldr	r2, [pc, #52]	; (aee4 <xPortStartScheduler+0x3c>)
    aeb0:	6812      	ldr	r2, [r2, #0]
    aeb2:	21ff      	movs	r1, #255	; 0xff
    aeb4:	0409      	lsls	r1, r1, #16
    aeb6:	430a      	orrs	r2, r1
    aeb8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    aeba:	4b0a      	ldr	r3, [pc, #40]	; (aee4 <xPortStartScheduler+0x3c>)
    aebc:	4a09      	ldr	r2, [pc, #36]	; (aee4 <xPortStartScheduler+0x3c>)
    aebe:	6812      	ldr	r2, [r2, #0]
    aec0:	21ff      	movs	r1, #255	; 0xff
    aec2:	0609      	lsls	r1, r1, #24
    aec4:	430a      	orrs	r2, r1
    aec6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    aec8:	4b07      	ldr	r3, [pc, #28]	; (aee8 <xPortStartScheduler+0x40>)
    aeca:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    aecc:	4b07      	ldr	r3, [pc, #28]	; (aeec <xPortStartScheduler+0x44>)
    aece:	2200      	movs	r2, #0
    aed0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    aed2:	4b07      	ldr	r3, [pc, #28]	; (aef0 <xPortStartScheduler+0x48>)
    aed4:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    aed6:	4b07      	ldr	r3, [pc, #28]	; (aef4 <xPortStartScheduler+0x4c>)
    aed8:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    aeda:	2300      	movs	r3, #0
}
    aedc:	0018      	movs	r0, r3
    aede:	46bd      	mov	sp, r7
    aee0:	bd80      	pop	{r7, pc}
    aee2:	46c0      	nop			; (mov r8, r8)
    aee4:	e000ed20 	.word	0xe000ed20
    aee8:	0000b009 	.word	0x0000b009
    aeec:	20000020 	.word	0x20000020
    aef0:	0000ae71 	.word	0x0000ae71
    aef4:	0000ae41 	.word	0x0000ae41

0000aef8 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    aef8:	b580      	push	{r7, lr}
    aefa:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    aefc:	4b05      	ldr	r3, [pc, #20]	; (af14 <vPortYield+0x1c>)
    aefe:	2280      	movs	r2, #128	; 0x80
    af00:	0552      	lsls	r2, r2, #21
    af02:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    af04:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    af08:	f3bf 8f6f 	isb	sy
}
    af0c:	46c0      	nop			; (mov r8, r8)
    af0e:	46bd      	mov	sp, r7
    af10:	bd80      	pop	{r7, pc}
    af12:	46c0      	nop			; (mov r8, r8)
    af14:	e000ed04 	.word	0xe000ed04

0000af18 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    af18:	b580      	push	{r7, lr}
    af1a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    af1c:	b672      	cpsid	i
    uxCriticalNesting++;
    af1e:	4b06      	ldr	r3, [pc, #24]	; (af38 <vPortEnterCritical+0x20>)
    af20:	681b      	ldr	r3, [r3, #0]
    af22:	1c5a      	adds	r2, r3, #1
    af24:	4b04      	ldr	r3, [pc, #16]	; (af38 <vPortEnterCritical+0x20>)
    af26:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    af28:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    af2c:	f3bf 8f6f 	isb	sy
}
    af30:	46c0      	nop			; (mov r8, r8)
    af32:	46bd      	mov	sp, r7
    af34:	bd80      	pop	{r7, pc}
    af36:	46c0      	nop			; (mov r8, r8)
    af38:	20000020 	.word	0x20000020

0000af3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    af3c:	b580      	push	{r7, lr}
    af3e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    af40:	4b09      	ldr	r3, [pc, #36]	; (af68 <vPortExitCritical+0x2c>)
    af42:	681b      	ldr	r3, [r3, #0]
    af44:	2b00      	cmp	r3, #0
    af46:	d101      	bne.n	af4c <vPortExitCritical+0x10>
    af48:	b672      	cpsid	i
    af4a:	e7fe      	b.n	af4a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    af4c:	4b06      	ldr	r3, [pc, #24]	; (af68 <vPortExitCritical+0x2c>)
    af4e:	681b      	ldr	r3, [r3, #0]
    af50:	1e5a      	subs	r2, r3, #1
    af52:	4b05      	ldr	r3, [pc, #20]	; (af68 <vPortExitCritical+0x2c>)
    af54:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    af56:	4b04      	ldr	r3, [pc, #16]	; (af68 <vPortExitCritical+0x2c>)
    af58:	681b      	ldr	r3, [r3, #0]
    af5a:	2b00      	cmp	r3, #0
    af5c:	d100      	bne.n	af60 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    af5e:	b662      	cpsie	i
    }
}
    af60:	46c0      	nop			; (mov r8, r8)
    af62:	46bd      	mov	sp, r7
    af64:	bd80      	pop	{r7, pc}
    af66:	46c0      	nop			; (mov r8, r8)
    af68:	20000020 	.word	0x20000020

0000af6c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    af6c:	f3ef 8010 	mrs	r0, PRIMASK
    af70:	b672      	cpsid	i
    af72:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	//return 0;
}
    af74:	46c0      	nop			; (mov r8, r8)
    af76:	0018      	movs	r0, r3

0000af78 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    af78:	f380 8810 	msr	PRIMASK, r0
    af7c:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	//( void ) ulMask;
}
    af7e:	46c0      	nop			; (mov r8, r8)

0000af80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    af80:	f3ef 8009 	mrs	r0, PSP
    af84:	4b0e      	ldr	r3, [pc, #56]	; (afc0 <pxCurrentTCBConst>)
    af86:	681a      	ldr	r2, [r3, #0]
    af88:	3820      	subs	r0, #32
    af8a:	6010      	str	r0, [r2, #0]
    af8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    af8e:	4644      	mov	r4, r8
    af90:	464d      	mov	r5, r9
    af92:	4656      	mov	r6, sl
    af94:	465f      	mov	r7, fp
    af96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    af98:	b508      	push	{r3, lr}
    af9a:	b672      	cpsid	i
    af9c:	f001 f98c 	bl	c2b8 <vTaskSwitchContext>
    afa0:	b662      	cpsie	i
    afa2:	bc0c      	pop	{r2, r3}
    afa4:	6811      	ldr	r1, [r2, #0]
    afa6:	6808      	ldr	r0, [r1, #0]
    afa8:	3010      	adds	r0, #16
    afaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    afac:	46a0      	mov	r8, r4
    afae:	46a9      	mov	r9, r5
    afb0:	46b2      	mov	sl, r6
    afb2:	46bb      	mov	fp, r7
    afb4:	f380 8809 	msr	PSP, r0
    afb8:	3820      	subs	r0, #32
    afba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    afbc:	4718      	bx	r3
    afbe:	46c0      	nop			; (mov r8, r8)

0000afc0 <pxCurrentTCBConst>:
    afc0:	20003d38 	.word	0x20003d38
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    afc4:	46c0      	nop			; (mov r8, r8)
    afc6:	46c0      	nop			; (mov r8, r8)

0000afc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    afc8:	b580      	push	{r7, lr}
    afca:	b082      	sub	sp, #8
    afcc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    afce:	4b0a      	ldr	r3, [pc, #40]	; (aff8 <SysTick_Handler+0x30>)
    afd0:	4798      	blx	r3
    afd2:	0003      	movs	r3, r0
    afd4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    afd6:	4b09      	ldr	r3, [pc, #36]	; (affc <SysTick_Handler+0x34>)
    afd8:	4798      	blx	r3
    afda:	1e03      	subs	r3, r0, #0
    afdc:	d003      	beq.n	afe6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    afde:	4b08      	ldr	r3, [pc, #32]	; (b000 <SysTick_Handler+0x38>)
    afe0:	2280      	movs	r2, #128	; 0x80
    afe2:	0552      	lsls	r2, r2, #21
    afe4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    afe6:	687b      	ldr	r3, [r7, #4]
    afe8:	0018      	movs	r0, r3
    afea:	4b06      	ldr	r3, [pc, #24]	; (b004 <SysTick_Handler+0x3c>)
    afec:	4798      	blx	r3
}
    afee:	46c0      	nop			; (mov r8, r8)
    aff0:	46bd      	mov	sp, r7
    aff2:	b002      	add	sp, #8
    aff4:	bd80      	pop	{r7, pc}
    aff6:	46c0      	nop			; (mov r8, r8)
    aff8:	0000af6d 	.word	0x0000af6d
    affc:	0000c161 	.word	0x0000c161
    b000:	e000ed04 	.word	0xe000ed04
    b004:	0000af79 	.word	0x0000af79

0000b008 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    b008:	b580      	push	{r7, lr}
    b00a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    b00c:	4b04      	ldr	r3, [pc, #16]	; (b020 <prvSetupTimerInterrupt+0x18>)
    b00e:	4a05      	ldr	r2, [pc, #20]	; (b024 <prvSetupTimerInterrupt+0x1c>)
    b010:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    b012:	4b05      	ldr	r3, [pc, #20]	; (b028 <prvSetupTimerInterrupt+0x20>)
    b014:	2207      	movs	r2, #7
    b016:	601a      	str	r2, [r3, #0]
}
    b018:	46c0      	nop			; (mov r8, r8)
    b01a:	46bd      	mov	sp, r7
    b01c:	bd80      	pop	{r7, pc}
    b01e:	46c0      	nop			; (mov r8, r8)
    b020:	e000e014 	.word	0xe000e014
    b024:	0000bb7f 	.word	0x0000bb7f
    b028:	e000e010 	.word	0xe000e010

0000b02c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    b02c:	b580      	push	{r7, lr}
    b02e:	b084      	sub	sp, #16
    b030:	af00      	add	r7, sp, #0
    b032:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    b034:	2300      	movs	r3, #0
    b036:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    b038:	687b      	ldr	r3, [r7, #4]
    b03a:	2207      	movs	r2, #7
    b03c:	4013      	ands	r3, r2
    b03e:	d004      	beq.n	b04a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    b040:	687b      	ldr	r3, [r7, #4]
    b042:	2207      	movs	r2, #7
    b044:	4393      	bics	r3, r2
    b046:	3308      	adds	r3, #8
    b048:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    b04a:	4b19      	ldr	r3, [pc, #100]	; (b0b0 <pvPortMalloc+0x84>)
    b04c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    b04e:	4b19      	ldr	r3, [pc, #100]	; (b0b4 <pvPortMalloc+0x88>)
    b050:	681b      	ldr	r3, [r3, #0]
    b052:	2b00      	cmp	r3, #0
    b054:	d105      	bne.n	b062 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    b056:	4b18      	ldr	r3, [pc, #96]	; (b0b8 <pvPortMalloc+0x8c>)
    b058:	2207      	movs	r2, #7
    b05a:	4393      	bics	r3, r2
    b05c:	001a      	movs	r2, r3
    b05e:	4b15      	ldr	r3, [pc, #84]	; (b0b4 <pvPortMalloc+0x88>)
    b060:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    b062:	4b16      	ldr	r3, [pc, #88]	; (b0bc <pvPortMalloc+0x90>)
    b064:	681a      	ldr	r2, [r3, #0]
    b066:	687b      	ldr	r3, [r7, #4]
    b068:	18d3      	adds	r3, r2, r3
    b06a:	4a15      	ldr	r2, [pc, #84]	; (b0c0 <pvPortMalloc+0x94>)
    b06c:	4293      	cmp	r3, r2
    b06e:	d813      	bhi.n	b098 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    b070:	4b12      	ldr	r3, [pc, #72]	; (b0bc <pvPortMalloc+0x90>)
    b072:	681a      	ldr	r2, [r3, #0]
    b074:	687b      	ldr	r3, [r7, #4]
    b076:	18d2      	adds	r2, r2, r3
    b078:	4b10      	ldr	r3, [pc, #64]	; (b0bc <pvPortMalloc+0x90>)
    b07a:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    b07c:	429a      	cmp	r2, r3
    b07e:	d90b      	bls.n	b098 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    b080:	4b0c      	ldr	r3, [pc, #48]	; (b0b4 <pvPortMalloc+0x88>)
    b082:	681a      	ldr	r2, [r3, #0]
    b084:	4b0d      	ldr	r3, [pc, #52]	; (b0bc <pvPortMalloc+0x90>)
    b086:	681b      	ldr	r3, [r3, #0]
    b088:	18d3      	adds	r3, r2, r3
    b08a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    b08c:	4b0b      	ldr	r3, [pc, #44]	; (b0bc <pvPortMalloc+0x90>)
    b08e:	681a      	ldr	r2, [r3, #0]
    b090:	687b      	ldr	r3, [r7, #4]
    b092:	18d2      	adds	r2, r2, r3
    b094:	4b09      	ldr	r3, [pc, #36]	; (b0bc <pvPortMalloc+0x90>)
    b096:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    b098:	4b0a      	ldr	r3, [pc, #40]	; (b0c4 <pvPortMalloc+0x98>)
    b09a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    b09c:	68fb      	ldr	r3, [r7, #12]
    b09e:	2b00      	cmp	r3, #0
    b0a0:	d101      	bne.n	b0a6 <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    b0a2:	4b09      	ldr	r3, [pc, #36]	; (b0c8 <pvPortMalloc+0x9c>)
    b0a4:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    b0a6:	68fb      	ldr	r3, [r7, #12]
}
    b0a8:	0018      	movs	r0, r3
    b0aa:	46bd      	mov	sp, r7
    b0ac:	b004      	add	sp, #16
    b0ae:	bd80      	pop	{r7, pc}
    b0b0:	0000bff9 	.word	0x0000bff9
    b0b4:	20003d34 	.word	0x20003d34
    b0b8:	20000138 	.word	0x20000138
    b0bc:	20003d30 	.word	0x20003d30
    b0c0:	00003bf7 	.word	0x00003bf7
    b0c4:	0000c011 	.word	0x0000c011
    b0c8:	0000dc21 	.word	0x0000dc21

0000b0cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    b0cc:	b580      	push	{r7, lr}
    b0ce:	b082      	sub	sp, #8
    b0d0:	af00      	add	r7, sp, #0
    b0d2:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    b0d4:	687b      	ldr	r3, [r7, #4]
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	d001      	beq.n	b0de <vPortFree+0x12>
    b0da:	b672      	cpsid	i
    b0dc:	e7fe      	b.n	b0dc <vPortFree+0x10>
}
    b0de:	46c0      	nop			; (mov r8, r8)
    b0e0:	46bd      	mov	sp, r7
    b0e2:	b002      	add	sp, #8
    b0e4:	bd80      	pop	{r7, pc}
    b0e6:	46c0      	nop			; (mov r8, r8)

0000b0e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    b0e8:	b580      	push	{r7, lr}
    b0ea:	b084      	sub	sp, #16
    b0ec:	af00      	add	r7, sp, #0
    b0ee:	6078      	str	r0, [r7, #4]
    b0f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b0f2:	687b      	ldr	r3, [r7, #4]
    b0f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    b0f6:	68fb      	ldr	r3, [r7, #12]
    b0f8:	2b00      	cmp	r3, #0
    b0fa:	d101      	bne.n	b100 <xQueueGenericReset+0x18>
    b0fc:	b672      	cpsid	i
    b0fe:	e7fe      	b.n	b0fe <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    b100:	4b23      	ldr	r3, [pc, #140]	; (b190 <xQueueGenericReset+0xa8>)
    b102:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    b104:	68fb      	ldr	r3, [r7, #12]
    b106:	681a      	ldr	r2, [r3, #0]
    b108:	68fb      	ldr	r3, [r7, #12]
    b10a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    b10c:	68fb      	ldr	r3, [r7, #12]
    b10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b110:	434b      	muls	r3, r1
    b112:	18d2      	adds	r2, r2, r3
    b114:	68fb      	ldr	r3, [r7, #12]
    b116:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    b118:	68fb      	ldr	r3, [r7, #12]
    b11a:	2200      	movs	r2, #0
    b11c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    b11e:	68fb      	ldr	r3, [r7, #12]
    b120:	681a      	ldr	r2, [r3, #0]
    b122:	68fb      	ldr	r3, [r7, #12]
    b124:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    b126:	68fb      	ldr	r3, [r7, #12]
    b128:	681a      	ldr	r2, [r3, #0]
    b12a:	68fb      	ldr	r3, [r7, #12]
    b12c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b12e:	1e59      	subs	r1, r3, #1
    b130:	68fb      	ldr	r3, [r7, #12]
    b132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b134:	434b      	muls	r3, r1
    b136:	18d2      	adds	r2, r2, r3
    b138:	68fb      	ldr	r3, [r7, #12]
    b13a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    b13c:	68fb      	ldr	r3, [r7, #12]
    b13e:	2244      	movs	r2, #68	; 0x44
    b140:	21ff      	movs	r1, #255	; 0xff
    b142:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    b144:	68fb      	ldr	r3, [r7, #12]
    b146:	2245      	movs	r2, #69	; 0x45
    b148:	21ff      	movs	r1, #255	; 0xff
    b14a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    b14c:	683b      	ldr	r3, [r7, #0]
    b14e:	2b00      	cmp	r3, #0
    b150:	d10d      	bne.n	b16e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b152:	68fb      	ldr	r3, [r7, #12]
    b154:	691b      	ldr	r3, [r3, #16]
    b156:	2b00      	cmp	r3, #0
    b158:	d013      	beq.n	b182 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b15a:	68fb      	ldr	r3, [r7, #12]
    b15c:	3310      	adds	r3, #16
    b15e:	0018      	movs	r0, r3
    b160:	4b0c      	ldr	r3, [pc, #48]	; (b194 <xQueueGenericReset+0xac>)
    b162:	4798      	blx	r3
    b164:	1e03      	subs	r3, r0, #0
    b166:	d00c      	beq.n	b182 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    b168:	4b0b      	ldr	r3, [pc, #44]	; (b198 <xQueueGenericReset+0xb0>)
    b16a:	4798      	blx	r3
    b16c:	e009      	b.n	b182 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    b16e:	68fb      	ldr	r3, [r7, #12]
    b170:	3310      	adds	r3, #16
    b172:	0018      	movs	r0, r3
    b174:	4b09      	ldr	r3, [pc, #36]	; (b19c <xQueueGenericReset+0xb4>)
    b176:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    b178:	68fb      	ldr	r3, [r7, #12]
    b17a:	3324      	adds	r3, #36	; 0x24
    b17c:	0018      	movs	r0, r3
    b17e:	4b07      	ldr	r3, [pc, #28]	; (b19c <xQueueGenericReset+0xb4>)
    b180:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    b182:	4b07      	ldr	r3, [pc, #28]	; (b1a0 <xQueueGenericReset+0xb8>)
    b184:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    b186:	2301      	movs	r3, #1
}
    b188:	0018      	movs	r0, r3
    b18a:	46bd      	mov	sp, r7
    b18c:	b004      	add	sp, #16
    b18e:	bd80      	pop	{r7, pc}
    b190:	0000af19 	.word	0x0000af19
    b194:	0000c419 	.word	0x0000c419
    b198:	0000aef9 	.word	0x0000aef9
    b19c:	0000ac99 	.word	0x0000ac99
    b1a0:	0000af3d 	.word	0x0000af3d

0000b1a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    b1a4:	b590      	push	{r4, r7, lr}
    b1a6:	b08b      	sub	sp, #44	; 0x2c
    b1a8:	af02      	add	r7, sp, #8
    b1aa:	60f8      	str	r0, [r7, #12]
    b1ac:	60b9      	str	r1, [r7, #8]
    b1ae:	1dfb      	adds	r3, r7, #7
    b1b0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    b1b2:	68fb      	ldr	r3, [r7, #12]
    b1b4:	2b00      	cmp	r3, #0
    b1b6:	d101      	bne.n	b1bc <xQueueGenericCreate+0x18>
    b1b8:	b672      	cpsid	i
    b1ba:	e7fe      	b.n	b1ba <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    b1bc:	68bb      	ldr	r3, [r7, #8]
    b1be:	2b00      	cmp	r3, #0
    b1c0:	d102      	bne.n	b1c8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    b1c2:	2300      	movs	r3, #0
    b1c4:	61fb      	str	r3, [r7, #28]
    b1c6:	e003      	b.n	b1d0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b1c8:	68fb      	ldr	r3, [r7, #12]
    b1ca:	68ba      	ldr	r2, [r7, #8]
    b1cc:	4353      	muls	r3, r2
    b1ce:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    b1d0:	69fb      	ldr	r3, [r7, #28]
    b1d2:	334c      	adds	r3, #76	; 0x4c
    b1d4:	0018      	movs	r0, r3
    b1d6:	4b0c      	ldr	r3, [pc, #48]	; (b208 <xQueueGenericCreate+0x64>)
    b1d8:	4798      	blx	r3
    b1da:	0003      	movs	r3, r0
    b1dc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    b1de:	69bb      	ldr	r3, [r7, #24]
    b1e0:	2b00      	cmp	r3, #0
    b1e2:	d00c      	beq.n	b1fe <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    b1e4:	69bb      	ldr	r3, [r7, #24]
    b1e6:	334c      	adds	r3, #76	; 0x4c
    b1e8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    b1ea:	1dfb      	adds	r3, r7, #7
    b1ec:	781c      	ldrb	r4, [r3, #0]
    b1ee:	697a      	ldr	r2, [r7, #20]
    b1f0:	68b9      	ldr	r1, [r7, #8]
    b1f2:	68f8      	ldr	r0, [r7, #12]
    b1f4:	69bb      	ldr	r3, [r7, #24]
    b1f6:	9300      	str	r3, [sp, #0]
    b1f8:	0023      	movs	r3, r4
    b1fa:	4c04      	ldr	r4, [pc, #16]	; (b20c <xQueueGenericCreate+0x68>)
    b1fc:	47a0      	blx	r4
		}

		return pxNewQueue;
    b1fe:	69bb      	ldr	r3, [r7, #24]
	}
    b200:	0018      	movs	r0, r3
    b202:	46bd      	mov	sp, r7
    b204:	b009      	add	sp, #36	; 0x24
    b206:	bd90      	pop	{r4, r7, pc}
    b208:	0000b02d 	.word	0x0000b02d
    b20c:	0000b211 	.word	0x0000b211

0000b210 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    b210:	b580      	push	{r7, lr}
    b212:	b084      	sub	sp, #16
    b214:	af00      	add	r7, sp, #0
    b216:	60f8      	str	r0, [r7, #12]
    b218:	60b9      	str	r1, [r7, #8]
    b21a:	607a      	str	r2, [r7, #4]
    b21c:	001a      	movs	r2, r3
    b21e:	1cfb      	adds	r3, r7, #3
    b220:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    b222:	68bb      	ldr	r3, [r7, #8]
    b224:	2b00      	cmp	r3, #0
    b226:	d103      	bne.n	b230 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    b228:	69bb      	ldr	r3, [r7, #24]
    b22a:	69ba      	ldr	r2, [r7, #24]
    b22c:	601a      	str	r2, [r3, #0]
    b22e:	e002      	b.n	b236 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    b230:	69bb      	ldr	r3, [r7, #24]
    b232:	687a      	ldr	r2, [r7, #4]
    b234:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    b236:	69bb      	ldr	r3, [r7, #24]
    b238:	68fa      	ldr	r2, [r7, #12]
    b23a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    b23c:	69bb      	ldr	r3, [r7, #24]
    b23e:	68ba      	ldr	r2, [r7, #8]
    b240:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    b242:	69bb      	ldr	r3, [r7, #24]
    b244:	2101      	movs	r1, #1
    b246:	0018      	movs	r0, r3
    b248:	4b04      	ldr	r3, [pc, #16]	; (b25c <prvInitialiseNewQueue+0x4c>)
    b24a:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    b24c:	69bb      	ldr	r3, [r7, #24]
    b24e:	2200      	movs	r2, #0
    b250:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    b252:	46c0      	nop			; (mov r8, r8)
    b254:	46bd      	mov	sp, r7
    b256:	b004      	add	sp, #16
    b258:	bd80      	pop	{r7, pc}
    b25a:	46c0      	nop			; (mov r8, r8)
    b25c:	0000b0e9 	.word	0x0000b0e9

0000b260 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    b260:	b590      	push	{r4, r7, lr}
    b262:	b083      	sub	sp, #12
    b264:	af00      	add	r7, sp, #0
    b266:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    b268:	687b      	ldr	r3, [r7, #4]
    b26a:	2b00      	cmp	r3, #0
    b26c:	d00e      	beq.n	b28c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    b26e:	687b      	ldr	r3, [r7, #4]
    b270:	2200      	movs	r2, #0
    b272:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    b274:	687b      	ldr	r3, [r7, #4]
    b276:	2200      	movs	r2, #0
    b278:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    b27a:	687b      	ldr	r3, [r7, #4]
    b27c:	2200      	movs	r2, #0
    b27e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    b280:	6878      	ldr	r0, [r7, #4]
    b282:	2300      	movs	r3, #0
    b284:	2200      	movs	r2, #0
    b286:	2100      	movs	r1, #0
    b288:	4c02      	ldr	r4, [pc, #8]	; (b294 <prvInitialiseMutex+0x34>)
    b28a:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    b28c:	46c0      	nop			; (mov r8, r8)
    b28e:	46bd      	mov	sp, r7
    b290:	b003      	add	sp, #12
    b292:	bd90      	pop	{r4, r7, pc}
    b294:	0000b2d9 	.word	0x0000b2d9

0000b298 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    b298:	b580      	push	{r7, lr}
    b29a:	b086      	sub	sp, #24
    b29c:	af00      	add	r7, sp, #0
    b29e:	0002      	movs	r2, r0
    b2a0:	1dfb      	adds	r3, r7, #7
    b2a2:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    b2a4:	2301      	movs	r3, #1
    b2a6:	617b      	str	r3, [r7, #20]
    b2a8:	2300      	movs	r3, #0
    b2aa:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    b2ac:	1dfb      	adds	r3, r7, #7
    b2ae:	781a      	ldrb	r2, [r3, #0]
    b2b0:	6939      	ldr	r1, [r7, #16]
    b2b2:	697b      	ldr	r3, [r7, #20]
    b2b4:	0018      	movs	r0, r3
    b2b6:	4b06      	ldr	r3, [pc, #24]	; (b2d0 <xQueueCreateMutex+0x38>)
    b2b8:	4798      	blx	r3
    b2ba:	0003      	movs	r3, r0
    b2bc:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    b2be:	68fb      	ldr	r3, [r7, #12]
    b2c0:	0018      	movs	r0, r3
    b2c2:	4b04      	ldr	r3, [pc, #16]	; (b2d4 <xQueueCreateMutex+0x3c>)
    b2c4:	4798      	blx	r3

		return pxNewQueue;
    b2c6:	68fb      	ldr	r3, [r7, #12]
	}
    b2c8:	0018      	movs	r0, r3
    b2ca:	46bd      	mov	sp, r7
    b2cc:	b006      	add	sp, #24
    b2ce:	bd80      	pop	{r7, pc}
    b2d0:	0000b1a5 	.word	0x0000b1a5
    b2d4:	0000b261 	.word	0x0000b261

0000b2d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    b2d8:	b580      	push	{r7, lr}
    b2da:	b08a      	sub	sp, #40	; 0x28
    b2dc:	af00      	add	r7, sp, #0
    b2de:	60f8      	str	r0, [r7, #12]
    b2e0:	60b9      	str	r1, [r7, #8]
    b2e2:	607a      	str	r2, [r7, #4]
    b2e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    b2e6:	2300      	movs	r3, #0
    b2e8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b2ea:	68fb      	ldr	r3, [r7, #12]
    b2ec:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    b2ee:	6a3b      	ldr	r3, [r7, #32]
    b2f0:	2b00      	cmp	r3, #0
    b2f2:	d101      	bne.n	b2f8 <xQueueGenericSend+0x20>
    b2f4:	b672      	cpsid	i
    b2f6:	e7fe      	b.n	b2f6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b2f8:	68bb      	ldr	r3, [r7, #8]
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d103      	bne.n	b306 <xQueueGenericSend+0x2e>
    b2fe:	6a3b      	ldr	r3, [r7, #32]
    b300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b302:	2b00      	cmp	r3, #0
    b304:	d101      	bne.n	b30a <xQueueGenericSend+0x32>
    b306:	2301      	movs	r3, #1
    b308:	e000      	b.n	b30c <xQueueGenericSend+0x34>
    b30a:	2300      	movs	r3, #0
    b30c:	2b00      	cmp	r3, #0
    b30e:	d101      	bne.n	b314 <xQueueGenericSend+0x3c>
    b310:	b672      	cpsid	i
    b312:	e7fe      	b.n	b312 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    b314:	683b      	ldr	r3, [r7, #0]
    b316:	2b02      	cmp	r3, #2
    b318:	d103      	bne.n	b322 <xQueueGenericSend+0x4a>
    b31a:	6a3b      	ldr	r3, [r7, #32]
    b31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b31e:	2b01      	cmp	r3, #1
    b320:	d101      	bne.n	b326 <xQueueGenericSend+0x4e>
    b322:	2301      	movs	r3, #1
    b324:	e000      	b.n	b328 <xQueueGenericSend+0x50>
    b326:	2300      	movs	r3, #0
    b328:	2b00      	cmp	r3, #0
    b32a:	d101      	bne.n	b330 <xQueueGenericSend+0x58>
    b32c:	b672      	cpsid	i
    b32e:	e7fe      	b.n	b32e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    b330:	4b53      	ldr	r3, [pc, #332]	; (b480 <xQueueGenericSend+0x1a8>)
    b332:	4798      	blx	r3
    b334:	1e03      	subs	r3, r0, #0
    b336:	d102      	bne.n	b33e <xQueueGenericSend+0x66>
    b338:	687b      	ldr	r3, [r7, #4]
    b33a:	2b00      	cmp	r3, #0
    b33c:	d101      	bne.n	b342 <xQueueGenericSend+0x6a>
    b33e:	2301      	movs	r3, #1
    b340:	e000      	b.n	b344 <xQueueGenericSend+0x6c>
    b342:	2300      	movs	r3, #0
    b344:	2b00      	cmp	r3, #0
    b346:	d101      	bne.n	b34c <xQueueGenericSend+0x74>
    b348:	b672      	cpsid	i
    b34a:	e7fe      	b.n	b34a <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    b34c:	4b4d      	ldr	r3, [pc, #308]	; (b484 <xQueueGenericSend+0x1ac>)
    b34e:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    b350:	6a3b      	ldr	r3, [r7, #32]
    b352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b354:	6a3b      	ldr	r3, [r7, #32]
    b356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b358:	429a      	cmp	r2, r3
    b35a:	d302      	bcc.n	b362 <xQueueGenericSend+0x8a>
    b35c:	683b      	ldr	r3, [r7, #0]
    b35e:	2b02      	cmp	r3, #2
    b360:	d12d      	bne.n	b3be <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    b362:	683a      	ldr	r2, [r7, #0]
    b364:	68b9      	ldr	r1, [r7, #8]
    b366:	6a3b      	ldr	r3, [r7, #32]
    b368:	0018      	movs	r0, r3
    b36a:	4b47      	ldr	r3, [pc, #284]	; (b488 <xQueueGenericSend+0x1b0>)
    b36c:	4798      	blx	r3
    b36e:	0003      	movs	r3, r0
    b370:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    b372:	6a3b      	ldr	r3, [r7, #32]
    b374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b376:	2b00      	cmp	r3, #0
    b378:	d00a      	beq.n	b390 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    b37a:	683a      	ldr	r2, [r7, #0]
    b37c:	6a3b      	ldr	r3, [r7, #32]
    b37e:	0011      	movs	r1, r2
    b380:	0018      	movs	r0, r3
    b382:	4b42      	ldr	r3, [pc, #264]	; (b48c <xQueueGenericSend+0x1b4>)
    b384:	4798      	blx	r3
    b386:	1e03      	subs	r3, r0, #0
    b388:	d015      	beq.n	b3b6 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    b38a:	4b41      	ldr	r3, [pc, #260]	; (b490 <xQueueGenericSend+0x1b8>)
    b38c:	4798      	blx	r3
    b38e:	e012      	b.n	b3b6 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b390:	6a3b      	ldr	r3, [r7, #32]
    b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b394:	2b00      	cmp	r3, #0
    b396:	d009      	beq.n	b3ac <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b398:	6a3b      	ldr	r3, [r7, #32]
    b39a:	3324      	adds	r3, #36	; 0x24
    b39c:	0018      	movs	r0, r3
    b39e:	4b3d      	ldr	r3, [pc, #244]	; (b494 <xQueueGenericSend+0x1bc>)
    b3a0:	4798      	blx	r3
    b3a2:	1e03      	subs	r3, r0, #0
    b3a4:	d007      	beq.n	b3b6 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    b3a6:	4b3a      	ldr	r3, [pc, #232]	; (b490 <xQueueGenericSend+0x1b8>)
    b3a8:	4798      	blx	r3
    b3aa:	e004      	b.n	b3b6 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    b3ac:	69fb      	ldr	r3, [r7, #28]
    b3ae:	2b00      	cmp	r3, #0
    b3b0:	d001      	beq.n	b3b6 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    b3b2:	4b37      	ldr	r3, [pc, #220]	; (b490 <xQueueGenericSend+0x1b8>)
    b3b4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    b3b6:	4b38      	ldr	r3, [pc, #224]	; (b498 <xQueueGenericSend+0x1c0>)
    b3b8:	4798      	blx	r3
				return pdPASS;
    b3ba:	2301      	movs	r3, #1
    b3bc:	e05c      	b.n	b478 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    b3be:	687b      	ldr	r3, [r7, #4]
    b3c0:	2b00      	cmp	r3, #0
    b3c2:	d103      	bne.n	b3cc <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    b3c4:	4b34      	ldr	r3, [pc, #208]	; (b498 <xQueueGenericSend+0x1c0>)
    b3c6:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    b3c8:	2300      	movs	r3, #0
    b3ca:	e055      	b.n	b478 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b3ce:	2b00      	cmp	r3, #0
    b3d0:	d106      	bne.n	b3e0 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    b3d2:	2314      	movs	r3, #20
    b3d4:	18fb      	adds	r3, r7, r3
    b3d6:	0018      	movs	r0, r3
    b3d8:	4b30      	ldr	r3, [pc, #192]	; (b49c <xQueueGenericSend+0x1c4>)
    b3da:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    b3dc:	2301      	movs	r3, #1
    b3de:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    b3e0:	4b2d      	ldr	r3, [pc, #180]	; (b498 <xQueueGenericSend+0x1c0>)
    b3e2:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    b3e4:	4b2e      	ldr	r3, [pc, #184]	; (b4a0 <xQueueGenericSend+0x1c8>)
    b3e6:	4798      	blx	r3
		prvLockQueue( pxQueue );
    b3e8:	4b26      	ldr	r3, [pc, #152]	; (b484 <xQueueGenericSend+0x1ac>)
    b3ea:	4798      	blx	r3
    b3ec:	6a3b      	ldr	r3, [r7, #32]
    b3ee:	2244      	movs	r2, #68	; 0x44
    b3f0:	5c9b      	ldrb	r3, [r3, r2]
    b3f2:	b25b      	sxtb	r3, r3
    b3f4:	3301      	adds	r3, #1
    b3f6:	d103      	bne.n	b400 <xQueueGenericSend+0x128>
    b3f8:	6a3b      	ldr	r3, [r7, #32]
    b3fa:	2244      	movs	r2, #68	; 0x44
    b3fc:	2100      	movs	r1, #0
    b3fe:	5499      	strb	r1, [r3, r2]
    b400:	6a3b      	ldr	r3, [r7, #32]
    b402:	2245      	movs	r2, #69	; 0x45
    b404:	5c9b      	ldrb	r3, [r3, r2]
    b406:	b25b      	sxtb	r3, r3
    b408:	3301      	adds	r3, #1
    b40a:	d103      	bne.n	b414 <xQueueGenericSend+0x13c>
    b40c:	6a3b      	ldr	r3, [r7, #32]
    b40e:	2245      	movs	r2, #69	; 0x45
    b410:	2100      	movs	r1, #0
    b412:	5499      	strb	r1, [r3, r2]
    b414:	4b20      	ldr	r3, [pc, #128]	; (b498 <xQueueGenericSend+0x1c0>)
    b416:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b418:	1d3a      	adds	r2, r7, #4
    b41a:	2314      	movs	r3, #20
    b41c:	18fb      	adds	r3, r7, r3
    b41e:	0011      	movs	r1, r2
    b420:	0018      	movs	r0, r3
    b422:	4b20      	ldr	r3, [pc, #128]	; (b4a4 <xQueueGenericSend+0x1cc>)
    b424:	4798      	blx	r3
    b426:	1e03      	subs	r3, r0, #0
    b428:	d11f      	bne.n	b46a <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    b42a:	6a3b      	ldr	r3, [r7, #32]
    b42c:	0018      	movs	r0, r3
    b42e:	4b1e      	ldr	r3, [pc, #120]	; (b4a8 <xQueueGenericSend+0x1d0>)
    b430:	4798      	blx	r3
    b432:	1e03      	subs	r3, r0, #0
    b434:	d012      	beq.n	b45c <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    b436:	6a3b      	ldr	r3, [r7, #32]
    b438:	3310      	adds	r3, #16
    b43a:	687a      	ldr	r2, [r7, #4]
    b43c:	0011      	movs	r1, r2
    b43e:	0018      	movs	r0, r3
    b440:	4b1a      	ldr	r3, [pc, #104]	; (b4ac <xQueueGenericSend+0x1d4>)
    b442:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    b444:	6a3b      	ldr	r3, [r7, #32]
    b446:	0018      	movs	r0, r3
    b448:	4b19      	ldr	r3, [pc, #100]	; (b4b0 <xQueueGenericSend+0x1d8>)
    b44a:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    b44c:	4b19      	ldr	r3, [pc, #100]	; (b4b4 <xQueueGenericSend+0x1dc>)
    b44e:	4798      	blx	r3
    b450:	1e03      	subs	r3, r0, #0
    b452:	d000      	beq.n	b456 <xQueueGenericSend+0x17e>
    b454:	e77a      	b.n	b34c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    b456:	4b0e      	ldr	r3, [pc, #56]	; (b490 <xQueueGenericSend+0x1b8>)
    b458:	4798      	blx	r3
    b45a:	e777      	b.n	b34c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    b45c:	6a3b      	ldr	r3, [r7, #32]
    b45e:	0018      	movs	r0, r3
    b460:	4b13      	ldr	r3, [pc, #76]	; (b4b0 <xQueueGenericSend+0x1d8>)
    b462:	4798      	blx	r3
				( void ) xTaskResumeAll();
    b464:	4b13      	ldr	r3, [pc, #76]	; (b4b4 <xQueueGenericSend+0x1dc>)
    b466:	4798      	blx	r3
    b468:	e770      	b.n	b34c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    b46a:	6a3b      	ldr	r3, [r7, #32]
    b46c:	0018      	movs	r0, r3
    b46e:	4b10      	ldr	r3, [pc, #64]	; (b4b0 <xQueueGenericSend+0x1d8>)
    b470:	4798      	blx	r3
			( void ) xTaskResumeAll();
    b472:	4b10      	ldr	r3, [pc, #64]	; (b4b4 <xQueueGenericSend+0x1dc>)
    b474:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    b476:	2300      	movs	r3, #0
		}
	}
}
    b478:	0018      	movs	r0, r3
    b47a:	46bd      	mov	sp, r7
    b47c:	b00a      	add	sp, #40	; 0x28
    b47e:	bd80      	pop	{r7, pc}
    b480:	0000c76d 	.word	0x0000c76d
    b484:	0000af19 	.word	0x0000af19
    b488:	0000b7dd 	.word	0x0000b7dd
    b48c:	0000bb31 	.word	0x0000bb31
    b490:	0000aef9 	.word	0x0000aef9
    b494:	0000c419 	.word	0x0000c419
    b498:	0000af3d 	.word	0x0000af3d
    b49c:	0000c4d9 	.word	0x0000c4d9
    b4a0:	0000bff9 	.word	0x0000bff9
    b4a4:	0000c50d 	.word	0x0000c50d
    b4a8:	0000ba31 	.word	0x0000ba31
    b4ac:	0000c381 	.word	0x0000c381
    b4b0:	0000b90d 	.word	0x0000b90d
    b4b4:	0000c011 	.word	0x0000c011

0000b4b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    b4b8:	b580      	push	{r7, lr}
    b4ba:	b088      	sub	sp, #32
    b4bc:	af00      	add	r7, sp, #0
    b4be:	60f8      	str	r0, [r7, #12]
    b4c0:	60b9      	str	r1, [r7, #8]
    b4c2:	607a      	str	r2, [r7, #4]
    b4c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b4c6:	68fb      	ldr	r3, [r7, #12]
    b4c8:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    b4ca:	69bb      	ldr	r3, [r7, #24]
    b4cc:	2b00      	cmp	r3, #0
    b4ce:	d101      	bne.n	b4d4 <xQueueGenericSendFromISR+0x1c>
    b4d0:	b672      	cpsid	i
    b4d2:	e7fe      	b.n	b4d2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b4d4:	68bb      	ldr	r3, [r7, #8]
    b4d6:	2b00      	cmp	r3, #0
    b4d8:	d103      	bne.n	b4e2 <xQueueGenericSendFromISR+0x2a>
    b4da:	69bb      	ldr	r3, [r7, #24]
    b4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b4de:	2b00      	cmp	r3, #0
    b4e0:	d101      	bne.n	b4e6 <xQueueGenericSendFromISR+0x2e>
    b4e2:	2301      	movs	r3, #1
    b4e4:	e000      	b.n	b4e8 <xQueueGenericSendFromISR+0x30>
    b4e6:	2300      	movs	r3, #0
    b4e8:	2b00      	cmp	r3, #0
    b4ea:	d101      	bne.n	b4f0 <xQueueGenericSendFromISR+0x38>
    b4ec:	b672      	cpsid	i
    b4ee:	e7fe      	b.n	b4ee <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    b4f0:	683b      	ldr	r3, [r7, #0]
    b4f2:	2b02      	cmp	r3, #2
    b4f4:	d103      	bne.n	b4fe <xQueueGenericSendFromISR+0x46>
    b4f6:	69bb      	ldr	r3, [r7, #24]
    b4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b4fa:	2b01      	cmp	r3, #1
    b4fc:	d101      	bne.n	b502 <xQueueGenericSendFromISR+0x4a>
    b4fe:	2301      	movs	r3, #1
    b500:	e000      	b.n	b504 <xQueueGenericSendFromISR+0x4c>
    b502:	2300      	movs	r3, #0
    b504:	2b00      	cmp	r3, #0
    b506:	d101      	bne.n	b50c <xQueueGenericSendFromISR+0x54>
    b508:	b672      	cpsid	i
    b50a:	e7fe      	b.n	b50a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    b50c:	4b2d      	ldr	r3, [pc, #180]	; (b5c4 <xQueueGenericSendFromISR+0x10c>)
    b50e:	4798      	blx	r3
    b510:	0003      	movs	r3, r0
    b512:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    b514:	69bb      	ldr	r3, [r7, #24]
    b516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b518:	69bb      	ldr	r3, [r7, #24]
    b51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b51c:	429a      	cmp	r2, r3
    b51e:	d302      	bcc.n	b526 <xQueueGenericSendFromISR+0x6e>
    b520:	683b      	ldr	r3, [r7, #0]
    b522:	2b02      	cmp	r3, #2
    b524:	d142      	bne.n	b5ac <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    b526:	2313      	movs	r3, #19
    b528:	18fb      	adds	r3, r7, r3
    b52a:	69ba      	ldr	r2, [r7, #24]
    b52c:	2145      	movs	r1, #69	; 0x45
    b52e:	5c52      	ldrb	r2, [r2, r1]
    b530:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    b532:	683a      	ldr	r2, [r7, #0]
    b534:	68b9      	ldr	r1, [r7, #8]
    b536:	69bb      	ldr	r3, [r7, #24]
    b538:	0018      	movs	r0, r3
    b53a:	4b23      	ldr	r3, [pc, #140]	; (b5c8 <xQueueGenericSendFromISR+0x110>)
    b53c:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    b53e:	2313      	movs	r3, #19
    b540:	18fb      	adds	r3, r7, r3
    b542:	781b      	ldrb	r3, [r3, #0]
    b544:	b25b      	sxtb	r3, r3
    b546:	3301      	adds	r3, #1
    b548:	d124      	bne.n	b594 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    b54a:	69bb      	ldr	r3, [r7, #24]
    b54c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b54e:	2b00      	cmp	r3, #0
    b550:	d00e      	beq.n	b570 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    b552:	683a      	ldr	r2, [r7, #0]
    b554:	69bb      	ldr	r3, [r7, #24]
    b556:	0011      	movs	r1, r2
    b558:	0018      	movs	r0, r3
    b55a:	4b1c      	ldr	r3, [pc, #112]	; (b5cc <xQueueGenericSendFromISR+0x114>)
    b55c:	4798      	blx	r3
    b55e:	1e03      	subs	r3, r0, #0
    b560:	d021      	beq.n	b5a6 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    b562:	687b      	ldr	r3, [r7, #4]
    b564:	2b00      	cmp	r3, #0
    b566:	d01e      	beq.n	b5a6 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    b568:	687b      	ldr	r3, [r7, #4]
    b56a:	2201      	movs	r2, #1
    b56c:	601a      	str	r2, [r3, #0]
    b56e:	e01a      	b.n	b5a6 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b570:	69bb      	ldr	r3, [r7, #24]
    b572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b574:	2b00      	cmp	r3, #0
    b576:	d016      	beq.n	b5a6 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b578:	69bb      	ldr	r3, [r7, #24]
    b57a:	3324      	adds	r3, #36	; 0x24
    b57c:	0018      	movs	r0, r3
    b57e:	4b14      	ldr	r3, [pc, #80]	; (b5d0 <xQueueGenericSendFromISR+0x118>)
    b580:	4798      	blx	r3
    b582:	1e03      	subs	r3, r0, #0
    b584:	d00f      	beq.n	b5a6 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    b586:	687b      	ldr	r3, [r7, #4]
    b588:	2b00      	cmp	r3, #0
    b58a:	d00c      	beq.n	b5a6 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    b58c:	687b      	ldr	r3, [r7, #4]
    b58e:	2201      	movs	r2, #1
    b590:	601a      	str	r2, [r3, #0]
    b592:	e008      	b.n	b5a6 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    b594:	2313      	movs	r3, #19
    b596:	18fb      	adds	r3, r7, r3
    b598:	781b      	ldrb	r3, [r3, #0]
    b59a:	3301      	adds	r3, #1
    b59c:	b2db      	uxtb	r3, r3
    b59e:	b259      	sxtb	r1, r3
    b5a0:	69bb      	ldr	r3, [r7, #24]
    b5a2:	2245      	movs	r2, #69	; 0x45
    b5a4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    b5a6:	2301      	movs	r3, #1
    b5a8:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    b5aa:	e001      	b.n	b5b0 <xQueueGenericSendFromISR+0xf8>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    b5ac:	2300      	movs	r3, #0
    b5ae:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    b5b0:	697b      	ldr	r3, [r7, #20]
    b5b2:	0018      	movs	r0, r3
    b5b4:	4b07      	ldr	r3, [pc, #28]	; (b5d4 <xQueueGenericSendFromISR+0x11c>)
    b5b6:	4798      	blx	r3

	return xReturn;
    b5b8:	69fb      	ldr	r3, [r7, #28]
}
    b5ba:	0018      	movs	r0, r3
    b5bc:	46bd      	mov	sp, r7
    b5be:	b008      	add	sp, #32
    b5c0:	bd80      	pop	{r7, pc}
    b5c2:	46c0      	nop			; (mov r8, r8)
    b5c4:	0000af6d 	.word	0x0000af6d
    b5c8:	0000b7dd 	.word	0x0000b7dd
    b5cc:	0000bb31 	.word	0x0000bb31
    b5d0:	0000c419 	.word	0x0000c419
    b5d4:	0000af79 	.word	0x0000af79

0000b5d8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    b5d8:	b580      	push	{r7, lr}
    b5da:	b08a      	sub	sp, #40	; 0x28
    b5dc:	af00      	add	r7, sp, #0
    b5de:	60f8      	str	r0, [r7, #12]
    b5e0:	60b9      	str	r1, [r7, #8]
    b5e2:	607a      	str	r2, [r7, #4]
    b5e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    b5e6:	2300      	movs	r3, #0
    b5e8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b5ea:	68fb      	ldr	r3, [r7, #12]
    b5ec:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    b5ee:	6a3b      	ldr	r3, [r7, #32]
    b5f0:	2b00      	cmp	r3, #0
    b5f2:	d101      	bne.n	b5f8 <xQueueGenericReceive+0x20>
    b5f4:	b672      	cpsid	i
    b5f6:	e7fe      	b.n	b5f6 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b5f8:	68bb      	ldr	r3, [r7, #8]
    b5fa:	2b00      	cmp	r3, #0
    b5fc:	d103      	bne.n	b606 <xQueueGenericReceive+0x2e>
    b5fe:	6a3b      	ldr	r3, [r7, #32]
    b600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b602:	2b00      	cmp	r3, #0
    b604:	d101      	bne.n	b60a <xQueueGenericReceive+0x32>
    b606:	2301      	movs	r3, #1
    b608:	e000      	b.n	b60c <xQueueGenericReceive+0x34>
    b60a:	2300      	movs	r3, #0
    b60c:	2b00      	cmp	r3, #0
    b60e:	d101      	bne.n	b614 <xQueueGenericReceive+0x3c>
    b610:	b672      	cpsid	i
    b612:	e7fe      	b.n	b612 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    b614:	4b62      	ldr	r3, [pc, #392]	; (b7a0 <xQueueGenericReceive+0x1c8>)
    b616:	4798      	blx	r3
    b618:	1e03      	subs	r3, r0, #0
    b61a:	d102      	bne.n	b622 <xQueueGenericReceive+0x4a>
    b61c:	687b      	ldr	r3, [r7, #4]
    b61e:	2b00      	cmp	r3, #0
    b620:	d101      	bne.n	b626 <xQueueGenericReceive+0x4e>
    b622:	2301      	movs	r3, #1
    b624:	e000      	b.n	b628 <xQueueGenericReceive+0x50>
    b626:	2300      	movs	r3, #0
    b628:	2b00      	cmp	r3, #0
    b62a:	d101      	bne.n	b630 <xQueueGenericReceive+0x58>
    b62c:	b672      	cpsid	i
    b62e:	e7fe      	b.n	b62e <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    b630:	4b5c      	ldr	r3, [pc, #368]	; (b7a4 <xQueueGenericReceive+0x1cc>)
    b632:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b634:	6a3b      	ldr	r3, [r7, #32]
    b636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b638:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b63a:	69fb      	ldr	r3, [r7, #28]
    b63c:	2b00      	cmp	r3, #0
    b63e:	d03a      	beq.n	b6b6 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    b640:	6a3b      	ldr	r3, [r7, #32]
    b642:	68db      	ldr	r3, [r3, #12]
    b644:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    b646:	68ba      	ldr	r2, [r7, #8]
    b648:	6a3b      	ldr	r3, [r7, #32]
    b64a:	0011      	movs	r1, r2
    b64c:	0018      	movs	r0, r3
    b64e:	4b56      	ldr	r3, [pc, #344]	; (b7a8 <xQueueGenericReceive+0x1d0>)
    b650:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    b652:	683b      	ldr	r3, [r7, #0]
    b654:	2b00      	cmp	r3, #0
    b656:	d11a      	bne.n	b68e <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    b658:	69fb      	ldr	r3, [r7, #28]
    b65a:	1e5a      	subs	r2, r3, #1
    b65c:	6a3b      	ldr	r3, [r7, #32]
    b65e:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b660:	6a3b      	ldr	r3, [r7, #32]
    b662:	681b      	ldr	r3, [r3, #0]
    b664:	2b00      	cmp	r3, #0
    b666:	d104      	bne.n	b672 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    b668:	4b50      	ldr	r3, [pc, #320]	; (b7ac <xQueueGenericReceive+0x1d4>)
    b66a:	4798      	blx	r3
    b66c:	0002      	movs	r2, r0
    b66e:	6a3b      	ldr	r3, [r7, #32]
    b670:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b672:	6a3b      	ldr	r3, [r7, #32]
    b674:	691b      	ldr	r3, [r3, #16]
    b676:	2b00      	cmp	r3, #0
    b678:	d019      	beq.n	b6ae <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b67a:	6a3b      	ldr	r3, [r7, #32]
    b67c:	3310      	adds	r3, #16
    b67e:	0018      	movs	r0, r3
    b680:	4b4b      	ldr	r3, [pc, #300]	; (b7b0 <xQueueGenericReceive+0x1d8>)
    b682:	4798      	blx	r3
    b684:	1e03      	subs	r3, r0, #0
    b686:	d012      	beq.n	b6ae <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    b688:	4b4a      	ldr	r3, [pc, #296]	; (b7b4 <xQueueGenericReceive+0x1dc>)
    b68a:	4798      	blx	r3
    b68c:	e00f      	b.n	b6ae <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    b68e:	6a3b      	ldr	r3, [r7, #32]
    b690:	69ba      	ldr	r2, [r7, #24]
    b692:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b694:	6a3b      	ldr	r3, [r7, #32]
    b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b698:	2b00      	cmp	r3, #0
    b69a:	d008      	beq.n	b6ae <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b69c:	6a3b      	ldr	r3, [r7, #32]
    b69e:	3324      	adds	r3, #36	; 0x24
    b6a0:	0018      	movs	r0, r3
    b6a2:	4b43      	ldr	r3, [pc, #268]	; (b7b0 <xQueueGenericReceive+0x1d8>)
    b6a4:	4798      	blx	r3
    b6a6:	1e03      	subs	r3, r0, #0
    b6a8:	d001      	beq.n	b6ae <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    b6aa:	4b42      	ldr	r3, [pc, #264]	; (b7b4 <xQueueGenericReceive+0x1dc>)
    b6ac:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    b6ae:	4b42      	ldr	r3, [pc, #264]	; (b7b8 <xQueueGenericReceive+0x1e0>)
    b6b0:	4798      	blx	r3
				return pdPASS;
    b6b2:	2301      	movs	r3, #1
    b6b4:	e070      	b.n	b798 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    b6b6:	687b      	ldr	r3, [r7, #4]
    b6b8:	2b00      	cmp	r3, #0
    b6ba:	d103      	bne.n	b6c4 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    b6bc:	4b3e      	ldr	r3, [pc, #248]	; (b7b8 <xQueueGenericReceive+0x1e0>)
    b6be:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    b6c0:	2300      	movs	r3, #0
    b6c2:	e069      	b.n	b798 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
    b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b6c6:	2b00      	cmp	r3, #0
    b6c8:	d106      	bne.n	b6d8 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    b6ca:	2310      	movs	r3, #16
    b6cc:	18fb      	adds	r3, r7, r3
    b6ce:	0018      	movs	r0, r3
    b6d0:	4b3a      	ldr	r3, [pc, #232]	; (b7bc <xQueueGenericReceive+0x1e4>)
    b6d2:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    b6d4:	2301      	movs	r3, #1
    b6d6:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    b6d8:	4b37      	ldr	r3, [pc, #220]	; (b7b8 <xQueueGenericReceive+0x1e0>)
    b6da:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    b6dc:	4b38      	ldr	r3, [pc, #224]	; (b7c0 <xQueueGenericReceive+0x1e8>)
    b6de:	4798      	blx	r3
		prvLockQueue( pxQueue );
    b6e0:	4b30      	ldr	r3, [pc, #192]	; (b7a4 <xQueueGenericReceive+0x1cc>)
    b6e2:	4798      	blx	r3
    b6e4:	6a3b      	ldr	r3, [r7, #32]
    b6e6:	2244      	movs	r2, #68	; 0x44
    b6e8:	5c9b      	ldrb	r3, [r3, r2]
    b6ea:	b25b      	sxtb	r3, r3
    b6ec:	3301      	adds	r3, #1
    b6ee:	d103      	bne.n	b6f8 <xQueueGenericReceive+0x120>
    b6f0:	6a3b      	ldr	r3, [r7, #32]
    b6f2:	2244      	movs	r2, #68	; 0x44
    b6f4:	2100      	movs	r1, #0
    b6f6:	5499      	strb	r1, [r3, r2]
    b6f8:	6a3b      	ldr	r3, [r7, #32]
    b6fa:	2245      	movs	r2, #69	; 0x45
    b6fc:	5c9b      	ldrb	r3, [r3, r2]
    b6fe:	b25b      	sxtb	r3, r3
    b700:	3301      	adds	r3, #1
    b702:	d103      	bne.n	b70c <xQueueGenericReceive+0x134>
    b704:	6a3b      	ldr	r3, [r7, #32]
    b706:	2245      	movs	r2, #69	; 0x45
    b708:	2100      	movs	r1, #0
    b70a:	5499      	strb	r1, [r3, r2]
    b70c:	4b2a      	ldr	r3, [pc, #168]	; (b7b8 <xQueueGenericReceive+0x1e0>)
    b70e:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b710:	1d3a      	adds	r2, r7, #4
    b712:	2310      	movs	r3, #16
    b714:	18fb      	adds	r3, r7, r3
    b716:	0011      	movs	r1, r2
    b718:	0018      	movs	r0, r3
    b71a:	4b2a      	ldr	r3, [pc, #168]	; (b7c4 <xQueueGenericReceive+0x1ec>)
    b71c:	4798      	blx	r3
    b71e:	1e03      	subs	r3, r0, #0
    b720:	d12c      	bne.n	b77c <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b722:	6a3b      	ldr	r3, [r7, #32]
    b724:	0018      	movs	r0, r3
    b726:	4b28      	ldr	r3, [pc, #160]	; (b7c8 <xQueueGenericReceive+0x1f0>)
    b728:	4798      	blx	r3
    b72a:	1e03      	subs	r3, r0, #0
    b72c:	d01f      	beq.n	b76e <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b72e:	6a3b      	ldr	r3, [r7, #32]
    b730:	681b      	ldr	r3, [r3, #0]
    b732:	2b00      	cmp	r3, #0
    b734:	d108      	bne.n	b748 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
    b736:	4b1b      	ldr	r3, [pc, #108]	; (b7a4 <xQueueGenericReceive+0x1cc>)
    b738:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    b73a:	6a3b      	ldr	r3, [r7, #32]
    b73c:	685b      	ldr	r3, [r3, #4]
    b73e:	0018      	movs	r0, r3
    b740:	4b22      	ldr	r3, [pc, #136]	; (b7cc <xQueueGenericReceive+0x1f4>)
    b742:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    b744:	4b1c      	ldr	r3, [pc, #112]	; (b7b8 <xQueueGenericReceive+0x1e0>)
    b746:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    b748:	6a3b      	ldr	r3, [r7, #32]
    b74a:	3324      	adds	r3, #36	; 0x24
    b74c:	687a      	ldr	r2, [r7, #4]
    b74e:	0011      	movs	r1, r2
    b750:	0018      	movs	r0, r3
    b752:	4b1f      	ldr	r3, [pc, #124]	; (b7d0 <xQueueGenericReceive+0x1f8>)
    b754:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    b756:	6a3b      	ldr	r3, [r7, #32]
    b758:	0018      	movs	r0, r3
    b75a:	4b1e      	ldr	r3, [pc, #120]	; (b7d4 <xQueueGenericReceive+0x1fc>)
    b75c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    b75e:	4b1e      	ldr	r3, [pc, #120]	; (b7d8 <xQueueGenericReceive+0x200>)
    b760:	4798      	blx	r3
    b762:	1e03      	subs	r3, r0, #0
    b764:	d000      	beq.n	b768 <xQueueGenericReceive+0x190>
    b766:	e763      	b.n	b630 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
    b768:	4b12      	ldr	r3, [pc, #72]	; (b7b4 <xQueueGenericReceive+0x1dc>)
    b76a:	4798      	blx	r3
    b76c:	e760      	b.n	b630 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    b76e:	6a3b      	ldr	r3, [r7, #32]
    b770:	0018      	movs	r0, r3
    b772:	4b18      	ldr	r3, [pc, #96]	; (b7d4 <xQueueGenericReceive+0x1fc>)
    b774:	4798      	blx	r3
				( void ) xTaskResumeAll();
    b776:	4b18      	ldr	r3, [pc, #96]	; (b7d8 <xQueueGenericReceive+0x200>)
    b778:	4798      	blx	r3
    b77a:	e759      	b.n	b630 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    b77c:	6a3b      	ldr	r3, [r7, #32]
    b77e:	0018      	movs	r0, r3
    b780:	4b14      	ldr	r3, [pc, #80]	; (b7d4 <xQueueGenericReceive+0x1fc>)
    b782:	4798      	blx	r3
			( void ) xTaskResumeAll();
    b784:	4b14      	ldr	r3, [pc, #80]	; (b7d8 <xQueueGenericReceive+0x200>)
    b786:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    b788:	6a3b      	ldr	r3, [r7, #32]
    b78a:	0018      	movs	r0, r3
    b78c:	4b0e      	ldr	r3, [pc, #56]	; (b7c8 <xQueueGenericReceive+0x1f0>)
    b78e:	4798      	blx	r3
    b790:	1e03      	subs	r3, r0, #0
    b792:	d100      	bne.n	b796 <xQueueGenericReceive+0x1be>
    b794:	e74c      	b.n	b630 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    b796:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    b798:	0018      	movs	r0, r3
    b79a:	46bd      	mov	sp, r7
    b79c:	b00a      	add	sp, #40	; 0x28
    b79e:	bd80      	pop	{r7, pc}
    b7a0:	0000c76d 	.word	0x0000c76d
    b7a4:	0000af19 	.word	0x0000af19
    b7a8:	0000b8bd 	.word	0x0000b8bd
    b7ac:	0000c929 	.word	0x0000c929
    b7b0:	0000c419 	.word	0x0000c419
    b7b4:	0000aef9 	.word	0x0000aef9
    b7b8:	0000af3d 	.word	0x0000af3d
    b7bc:	0000c4d9 	.word	0x0000c4d9
    b7c0:	0000bff9 	.word	0x0000bff9
    b7c4:	0000c50d 	.word	0x0000c50d
    b7c8:	0000b9fd 	.word	0x0000b9fd
    b7cc:	0000c7a5 	.word	0x0000c7a5
    b7d0:	0000c381 	.word	0x0000c381
    b7d4:	0000b90d 	.word	0x0000b90d
    b7d8:	0000c011 	.word	0x0000c011

0000b7dc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    b7dc:	b580      	push	{r7, lr}
    b7de:	b086      	sub	sp, #24
    b7e0:	af00      	add	r7, sp, #0
    b7e2:	60f8      	str	r0, [r7, #12]
    b7e4:	60b9      	str	r1, [r7, #8]
    b7e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    b7e8:	2300      	movs	r3, #0
    b7ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b7ec:	68fb      	ldr	r3, [r7, #12]
    b7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b7f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    b7f2:	68fb      	ldr	r3, [r7, #12]
    b7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	d10e      	bne.n	b818 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    b7fa:	68fb      	ldr	r3, [r7, #12]
    b7fc:	681b      	ldr	r3, [r3, #0]
    b7fe:	2b00      	cmp	r3, #0
    b800:	d14e      	bne.n	b8a0 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    b802:	68fb      	ldr	r3, [r7, #12]
    b804:	685b      	ldr	r3, [r3, #4]
    b806:	0018      	movs	r0, r3
    b808:	4b2a      	ldr	r3, [pc, #168]	; (b8b4 <prvCopyDataToQueue+0xd8>)
    b80a:	4798      	blx	r3
    b80c:	0003      	movs	r3, r0
    b80e:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    b810:	68fb      	ldr	r3, [r7, #12]
    b812:	2200      	movs	r2, #0
    b814:	605a      	str	r2, [r3, #4]
    b816:	e043      	b.n	b8a0 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    b818:	687b      	ldr	r3, [r7, #4]
    b81a:	2b00      	cmp	r3, #0
    b81c:	d119      	bne.n	b852 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    b81e:	68fb      	ldr	r3, [r7, #12]
    b820:	6898      	ldr	r0, [r3, #8]
    b822:	68fb      	ldr	r3, [r7, #12]
    b824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b826:	68bb      	ldr	r3, [r7, #8]
    b828:	0019      	movs	r1, r3
    b82a:	4b23      	ldr	r3, [pc, #140]	; (b8b8 <prvCopyDataToQueue+0xdc>)
    b82c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    b82e:	68fb      	ldr	r3, [r7, #12]
    b830:	689a      	ldr	r2, [r3, #8]
    b832:	68fb      	ldr	r3, [r7, #12]
    b834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b836:	18d2      	adds	r2, r2, r3
    b838:	68fb      	ldr	r3, [r7, #12]
    b83a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    b83c:	68fb      	ldr	r3, [r7, #12]
    b83e:	689a      	ldr	r2, [r3, #8]
    b840:	68fb      	ldr	r3, [r7, #12]
    b842:	685b      	ldr	r3, [r3, #4]
    b844:	429a      	cmp	r2, r3
    b846:	d32b      	bcc.n	b8a0 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    b848:	68fb      	ldr	r3, [r7, #12]
    b84a:	681a      	ldr	r2, [r3, #0]
    b84c:	68fb      	ldr	r3, [r7, #12]
    b84e:	609a      	str	r2, [r3, #8]
    b850:	e026      	b.n	b8a0 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b852:	68fb      	ldr	r3, [r7, #12]
    b854:	68d8      	ldr	r0, [r3, #12]
    b856:	68fb      	ldr	r3, [r7, #12]
    b858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b85a:	68bb      	ldr	r3, [r7, #8]
    b85c:	0019      	movs	r1, r3
    b85e:	4b16      	ldr	r3, [pc, #88]	; (b8b8 <prvCopyDataToQueue+0xdc>)
    b860:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    b862:	68fb      	ldr	r3, [r7, #12]
    b864:	68da      	ldr	r2, [r3, #12]
    b866:	68fb      	ldr	r3, [r7, #12]
    b868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b86a:	425b      	negs	r3, r3
    b86c:	18d2      	adds	r2, r2, r3
    b86e:	68fb      	ldr	r3, [r7, #12]
    b870:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    b872:	68fb      	ldr	r3, [r7, #12]
    b874:	68da      	ldr	r2, [r3, #12]
    b876:	68fb      	ldr	r3, [r7, #12]
    b878:	681b      	ldr	r3, [r3, #0]
    b87a:	429a      	cmp	r2, r3
    b87c:	d207      	bcs.n	b88e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    b87e:	68fb      	ldr	r3, [r7, #12]
    b880:	685a      	ldr	r2, [r3, #4]
    b882:	68fb      	ldr	r3, [r7, #12]
    b884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b886:	425b      	negs	r3, r3
    b888:	18d2      	adds	r2, r2, r3
    b88a:	68fb      	ldr	r3, [r7, #12]
    b88c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    b88e:	687b      	ldr	r3, [r7, #4]
    b890:	2b02      	cmp	r3, #2
    b892:	d105      	bne.n	b8a0 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b894:	693b      	ldr	r3, [r7, #16]
    b896:	2b00      	cmp	r3, #0
    b898:	d002      	beq.n	b8a0 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    b89a:	693b      	ldr	r3, [r7, #16]
    b89c:	3b01      	subs	r3, #1
    b89e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    b8a0:	693b      	ldr	r3, [r7, #16]
    b8a2:	1c5a      	adds	r2, r3, #1
    b8a4:	68fb      	ldr	r3, [r7, #12]
    b8a6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    b8a8:	697b      	ldr	r3, [r7, #20]
}
    b8aa:	0018      	movs	r0, r3
    b8ac:	46bd      	mov	sp, r7
    b8ae:	b006      	add	sp, #24
    b8b0:	bd80      	pop	{r7, pc}
    b8b2:	46c0      	nop			; (mov r8, r8)
    b8b4:	0000c869 	.word	0x0000c869
    b8b8:	0000f769 	.word	0x0000f769

0000b8bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    b8bc:	b580      	push	{r7, lr}
    b8be:	b082      	sub	sp, #8
    b8c0:	af00      	add	r7, sp, #0
    b8c2:	6078      	str	r0, [r7, #4]
    b8c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    b8c6:	687b      	ldr	r3, [r7, #4]
    b8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b8ca:	2b00      	cmp	r3, #0
    b8cc:	d018      	beq.n	b900 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    b8ce:	687b      	ldr	r3, [r7, #4]
    b8d0:	68da      	ldr	r2, [r3, #12]
    b8d2:	687b      	ldr	r3, [r7, #4]
    b8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b8d6:	18d2      	adds	r2, r2, r3
    b8d8:	687b      	ldr	r3, [r7, #4]
    b8da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    b8dc:	687b      	ldr	r3, [r7, #4]
    b8de:	68da      	ldr	r2, [r3, #12]
    b8e0:	687b      	ldr	r3, [r7, #4]
    b8e2:	685b      	ldr	r3, [r3, #4]
    b8e4:	429a      	cmp	r2, r3
    b8e6:	d303      	bcc.n	b8f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    b8e8:	687b      	ldr	r3, [r7, #4]
    b8ea:	681a      	ldr	r2, [r3, #0]
    b8ec:	687b      	ldr	r3, [r7, #4]
    b8ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    b8f0:	687b      	ldr	r3, [r7, #4]
    b8f2:	68d9      	ldr	r1, [r3, #12]
    b8f4:	687b      	ldr	r3, [r7, #4]
    b8f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    b8f8:	683b      	ldr	r3, [r7, #0]
    b8fa:	0018      	movs	r0, r3
    b8fc:	4b02      	ldr	r3, [pc, #8]	; (b908 <prvCopyDataFromQueue+0x4c>)
    b8fe:	4798      	blx	r3
	}
}
    b900:	46c0      	nop			; (mov r8, r8)
    b902:	46bd      	mov	sp, r7
    b904:	b002      	add	sp, #8
    b906:	bd80      	pop	{r7, pc}
    b908:	0000f769 	.word	0x0000f769

0000b90c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    b90c:	b580      	push	{r7, lr}
    b90e:	b084      	sub	sp, #16
    b910:	af00      	add	r7, sp, #0
    b912:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    b914:	4b34      	ldr	r3, [pc, #208]	; (b9e8 <prvUnlockQueue+0xdc>)
    b916:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    b918:	230f      	movs	r3, #15
    b91a:	18fb      	adds	r3, r7, r3
    b91c:	687a      	ldr	r2, [r7, #4]
    b91e:	2145      	movs	r1, #69	; 0x45
    b920:	5c52      	ldrb	r2, [r2, r1]
    b922:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    b924:	e022      	b.n	b96c <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    b926:	687b      	ldr	r3, [r7, #4]
    b928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b92a:	2b00      	cmp	r3, #0
    b92c:	d009      	beq.n	b942 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    b92e:	687b      	ldr	r3, [r7, #4]
    b930:	2100      	movs	r1, #0
    b932:	0018      	movs	r0, r3
    b934:	4b2d      	ldr	r3, [pc, #180]	; (b9ec <prvUnlockQueue+0xe0>)
    b936:	4798      	blx	r3
    b938:	1e03      	subs	r3, r0, #0
    b93a:	d00f      	beq.n	b95c <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    b93c:	4b2c      	ldr	r3, [pc, #176]	; (b9f0 <prvUnlockQueue+0xe4>)
    b93e:	4798      	blx	r3
    b940:	e00c      	b.n	b95c <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b942:	687b      	ldr	r3, [r7, #4]
    b944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b946:	2b00      	cmp	r3, #0
    b948:	d017      	beq.n	b97a <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b94a:	687b      	ldr	r3, [r7, #4]
    b94c:	3324      	adds	r3, #36	; 0x24
    b94e:	0018      	movs	r0, r3
    b950:	4b28      	ldr	r3, [pc, #160]	; (b9f4 <prvUnlockQueue+0xe8>)
    b952:	4798      	blx	r3
    b954:	1e03      	subs	r3, r0, #0
    b956:	d001      	beq.n	b95c <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    b958:	4b25      	ldr	r3, [pc, #148]	; (b9f0 <prvUnlockQueue+0xe4>)
    b95a:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    b95c:	230f      	movs	r3, #15
    b95e:	18fb      	adds	r3, r7, r3
    b960:	781b      	ldrb	r3, [r3, #0]
    b962:	3b01      	subs	r3, #1
    b964:	b2da      	uxtb	r2, r3
    b966:	230f      	movs	r3, #15
    b968:	18fb      	adds	r3, r7, r3
    b96a:	701a      	strb	r2, [r3, #0]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    b96c:	230f      	movs	r3, #15
    b96e:	18fb      	adds	r3, r7, r3
    b970:	781b      	ldrb	r3, [r3, #0]
    b972:	b25b      	sxtb	r3, r3
    b974:	2b00      	cmp	r3, #0
    b976:	dcd6      	bgt.n	b926 <prvUnlockQueue+0x1a>
    b978:	e000      	b.n	b97c <prvUnlockQueue+0x70>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    b97a:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    b97c:	687b      	ldr	r3, [r7, #4]
    b97e:	2245      	movs	r2, #69	; 0x45
    b980:	21ff      	movs	r1, #255	; 0xff
    b982:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    b984:	4b1c      	ldr	r3, [pc, #112]	; (b9f8 <prvUnlockQueue+0xec>)
    b986:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    b988:	4b17      	ldr	r3, [pc, #92]	; (b9e8 <prvUnlockQueue+0xdc>)
    b98a:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    b98c:	230e      	movs	r3, #14
    b98e:	18fb      	adds	r3, r7, r3
    b990:	687a      	ldr	r2, [r7, #4]
    b992:	2144      	movs	r1, #68	; 0x44
    b994:	5c52      	ldrb	r2, [r2, r1]
    b996:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    b998:	e014      	b.n	b9c4 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b99a:	687b      	ldr	r3, [r7, #4]
    b99c:	691b      	ldr	r3, [r3, #16]
    b99e:	2b00      	cmp	r3, #0
    b9a0:	d017      	beq.n	b9d2 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b9a2:	687b      	ldr	r3, [r7, #4]
    b9a4:	3310      	adds	r3, #16
    b9a6:	0018      	movs	r0, r3
    b9a8:	4b12      	ldr	r3, [pc, #72]	; (b9f4 <prvUnlockQueue+0xe8>)
    b9aa:	4798      	blx	r3
    b9ac:	1e03      	subs	r3, r0, #0
    b9ae:	d001      	beq.n	b9b4 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    b9b0:	4b0f      	ldr	r3, [pc, #60]	; (b9f0 <prvUnlockQueue+0xe4>)
    b9b2:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    b9b4:	230e      	movs	r3, #14
    b9b6:	18fb      	adds	r3, r7, r3
    b9b8:	781b      	ldrb	r3, [r3, #0]
    b9ba:	3b01      	subs	r3, #1
    b9bc:	b2da      	uxtb	r2, r3
    b9be:	230e      	movs	r3, #14
    b9c0:	18fb      	adds	r3, r7, r3
    b9c2:	701a      	strb	r2, [r3, #0]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    b9c4:	230e      	movs	r3, #14
    b9c6:	18fb      	adds	r3, r7, r3
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	b25b      	sxtb	r3, r3
    b9cc:	2b00      	cmp	r3, #0
    b9ce:	dce4      	bgt.n	b99a <prvUnlockQueue+0x8e>
    b9d0:	e000      	b.n	b9d4 <prvUnlockQueue+0xc8>

				--cRxLock;
			}
			else
			{
				break;
    b9d2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    b9d4:	687b      	ldr	r3, [r7, #4]
    b9d6:	2244      	movs	r2, #68	; 0x44
    b9d8:	21ff      	movs	r1, #255	; 0xff
    b9da:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    b9dc:	4b06      	ldr	r3, [pc, #24]	; (b9f8 <prvUnlockQueue+0xec>)
    b9de:	4798      	blx	r3
}
    b9e0:	46c0      	nop			; (mov r8, r8)
    b9e2:	46bd      	mov	sp, r7
    b9e4:	b004      	add	sp, #16
    b9e6:	bd80      	pop	{r7, pc}
    b9e8:	0000af19 	.word	0x0000af19
    b9ec:	0000bb31 	.word	0x0000bb31
    b9f0:	0000c5b5 	.word	0x0000c5b5
    b9f4:	0000c419 	.word	0x0000c419
    b9f8:	0000af3d 	.word	0x0000af3d

0000b9fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    b9fc:	b580      	push	{r7, lr}
    b9fe:	b084      	sub	sp, #16
    ba00:	af00      	add	r7, sp, #0
    ba02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    ba04:	4b08      	ldr	r3, [pc, #32]	; (ba28 <prvIsQueueEmpty+0x2c>)
    ba06:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    ba08:	687b      	ldr	r3, [r7, #4]
    ba0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    ba0c:	2b00      	cmp	r3, #0
    ba0e:	d102      	bne.n	ba16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    ba10:	2301      	movs	r3, #1
    ba12:	60fb      	str	r3, [r7, #12]
    ba14:	e001      	b.n	ba1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    ba16:	2300      	movs	r3, #0
    ba18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    ba1a:	4b04      	ldr	r3, [pc, #16]	; (ba2c <prvIsQueueEmpty+0x30>)
    ba1c:	4798      	blx	r3

	return xReturn;
    ba1e:	68fb      	ldr	r3, [r7, #12]
}
    ba20:	0018      	movs	r0, r3
    ba22:	46bd      	mov	sp, r7
    ba24:	b004      	add	sp, #16
    ba26:	bd80      	pop	{r7, pc}
    ba28:	0000af19 	.word	0x0000af19
    ba2c:	0000af3d 	.word	0x0000af3d

0000ba30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    ba30:	b580      	push	{r7, lr}
    ba32:	b084      	sub	sp, #16
    ba34:	af00      	add	r7, sp, #0
    ba36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    ba38:	4b09      	ldr	r3, [pc, #36]	; (ba60 <prvIsQueueFull+0x30>)
    ba3a:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    ba3c:	687b      	ldr	r3, [r7, #4]
    ba3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    ba40:	687b      	ldr	r3, [r7, #4]
    ba42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ba44:	429a      	cmp	r2, r3
    ba46:	d102      	bne.n	ba4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    ba48:	2301      	movs	r3, #1
    ba4a:	60fb      	str	r3, [r7, #12]
    ba4c:	e001      	b.n	ba52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    ba4e:	2300      	movs	r3, #0
    ba50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    ba52:	4b04      	ldr	r3, [pc, #16]	; (ba64 <prvIsQueueFull+0x34>)
    ba54:	4798      	blx	r3

	return xReturn;
    ba56:	68fb      	ldr	r3, [r7, #12]
}
    ba58:	0018      	movs	r0, r3
    ba5a:	46bd      	mov	sp, r7
    ba5c:	b004      	add	sp, #16
    ba5e:	bd80      	pop	{r7, pc}
    ba60:	0000af19 	.word	0x0000af19
    ba64:	0000af3d 	.word	0x0000af3d

0000ba68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    ba68:	b580      	push	{r7, lr}
    ba6a:	b084      	sub	sp, #16
    ba6c:	af00      	add	r7, sp, #0
    ba6e:	6078      	str	r0, [r7, #4]
    ba70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    ba72:	2300      	movs	r3, #0
    ba74:	60fb      	str	r3, [r7, #12]
    ba76:	e015      	b.n	baa4 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    ba78:	4b0e      	ldr	r3, [pc, #56]	; (bab4 <vQueueAddToRegistry+0x4c>)
    ba7a:	68fa      	ldr	r2, [r7, #12]
    ba7c:	00d2      	lsls	r2, r2, #3
    ba7e:	58d3      	ldr	r3, [r2, r3]
    ba80:	2b00      	cmp	r3, #0
    ba82:	d10c      	bne.n	ba9e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    ba84:	4b0b      	ldr	r3, [pc, #44]	; (bab4 <vQueueAddToRegistry+0x4c>)
    ba86:	68fa      	ldr	r2, [r7, #12]
    ba88:	00d2      	lsls	r2, r2, #3
    ba8a:	6839      	ldr	r1, [r7, #0]
    ba8c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    ba8e:	4a09      	ldr	r2, [pc, #36]	; (bab4 <vQueueAddToRegistry+0x4c>)
    ba90:	68fb      	ldr	r3, [r7, #12]
    ba92:	00db      	lsls	r3, r3, #3
    ba94:	18d3      	adds	r3, r2, r3
    ba96:	3304      	adds	r3, #4
    ba98:	687a      	ldr	r2, [r7, #4]
    ba9a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    ba9c:	e005      	b.n	baaa <vQueueAddToRegistry+0x42>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    ba9e:	68fb      	ldr	r3, [r7, #12]
    baa0:	3301      	adds	r3, #1
    baa2:	60fb      	str	r3, [r7, #12]
    baa4:	68fb      	ldr	r3, [r7, #12]
    baa6:	2b04      	cmp	r3, #4
    baa8:	d9e6      	bls.n	ba78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    baaa:	46c0      	nop			; (mov r8, r8)
    baac:	46bd      	mov	sp, r7
    baae:	b004      	add	sp, #16
    bab0:	bd80      	pop	{r7, pc}
    bab2:	46c0      	nop			; (mov r8, r8)
    bab4:	2000479c 	.word	0x2000479c

0000bab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    bab8:	b580      	push	{r7, lr}
    baba:	b086      	sub	sp, #24
    babc:	af00      	add	r7, sp, #0
    babe:	60f8      	str	r0, [r7, #12]
    bac0:	60b9      	str	r1, [r7, #8]
    bac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    bac4:	68fb      	ldr	r3, [r7, #12]
    bac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    bac8:	4b15      	ldr	r3, [pc, #84]	; (bb20 <vQueueWaitForMessageRestricted+0x68>)
    baca:	4798      	blx	r3
    bacc:	697b      	ldr	r3, [r7, #20]
    bace:	2244      	movs	r2, #68	; 0x44
    bad0:	5c9b      	ldrb	r3, [r3, r2]
    bad2:	b25b      	sxtb	r3, r3
    bad4:	3301      	adds	r3, #1
    bad6:	d103      	bne.n	bae0 <vQueueWaitForMessageRestricted+0x28>
    bad8:	697b      	ldr	r3, [r7, #20]
    bada:	2244      	movs	r2, #68	; 0x44
    badc:	2100      	movs	r1, #0
    bade:	5499      	strb	r1, [r3, r2]
    bae0:	697b      	ldr	r3, [r7, #20]
    bae2:	2245      	movs	r2, #69	; 0x45
    bae4:	5c9b      	ldrb	r3, [r3, r2]
    bae6:	b25b      	sxtb	r3, r3
    bae8:	3301      	adds	r3, #1
    baea:	d103      	bne.n	baf4 <vQueueWaitForMessageRestricted+0x3c>
    baec:	697b      	ldr	r3, [r7, #20]
    baee:	2245      	movs	r2, #69	; 0x45
    baf0:	2100      	movs	r1, #0
    baf2:	5499      	strb	r1, [r3, r2]
    baf4:	4b0b      	ldr	r3, [pc, #44]	; (bb24 <vQueueWaitForMessageRestricted+0x6c>)
    baf6:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    baf8:	697b      	ldr	r3, [r7, #20]
    bafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    bafc:	2b00      	cmp	r3, #0
    bafe:	d106      	bne.n	bb0e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    bb00:	697b      	ldr	r3, [r7, #20]
    bb02:	3324      	adds	r3, #36	; 0x24
    bb04:	687a      	ldr	r2, [r7, #4]
    bb06:	68b9      	ldr	r1, [r7, #8]
    bb08:	0018      	movs	r0, r3
    bb0a:	4b07      	ldr	r3, [pc, #28]	; (bb28 <vQueueWaitForMessageRestricted+0x70>)
    bb0c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    bb0e:	697b      	ldr	r3, [r7, #20]
    bb10:	0018      	movs	r0, r3
    bb12:	4b06      	ldr	r3, [pc, #24]	; (bb2c <vQueueWaitForMessageRestricted+0x74>)
    bb14:	4798      	blx	r3
	}
    bb16:	46c0      	nop			; (mov r8, r8)
    bb18:	46bd      	mov	sp, r7
    bb1a:	b006      	add	sp, #24
    bb1c:	bd80      	pop	{r7, pc}
    bb1e:	46c0      	nop			; (mov r8, r8)
    bb20:	0000af19 	.word	0x0000af19
    bb24:	0000af3d 	.word	0x0000af3d
    bb28:	0000c3c5 	.word	0x0000c3c5
    bb2c:	0000b90d 	.word	0x0000b90d

0000bb30 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    bb30:	b580      	push	{r7, lr}
    bb32:	b086      	sub	sp, #24
    bb34:	af00      	add	r7, sp, #0
    bb36:	6078      	str	r0, [r7, #4]
    bb38:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    bb3a:	687b      	ldr	r3, [r7, #4]
    bb3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    bb3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    bb40:	2300      	movs	r3, #0
    bb42:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    bb44:	693b      	ldr	r3, [r7, #16]
    bb46:	2b00      	cmp	r3, #0
    bb48:	d101      	bne.n	bb4e <prvNotifyQueueSetContainer+0x1e>
    bb4a:	b672      	cpsid	i
    bb4c:	e7fe      	b.n	bb4c <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    bb4e:	693b      	ldr	r3, [r7, #16]
    bb50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    bb52:	693b      	ldr	r3, [r7, #16]
    bb54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    bb56:	429a      	cmp	r2, r3
    bb58:	d301      	bcc.n	bb5e <prvNotifyQueueSetContainer+0x2e>
    bb5a:	b672      	cpsid	i
    bb5c:	e7fe      	b.n	bb5c <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    bb5e:	693b      	ldr	r3, [r7, #16]
    bb60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    bb62:	693b      	ldr	r3, [r7, #16]
    bb64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    bb66:	429a      	cmp	r2, r3
    bb68:	d22a      	bcs.n	bbc0 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    bb6a:	230f      	movs	r3, #15
    bb6c:	18fb      	adds	r3, r7, r3
    bb6e:	693a      	ldr	r2, [r7, #16]
    bb70:	2145      	movs	r1, #69	; 0x45
    bb72:	5c52      	ldrb	r2, [r2, r1]
    bb74:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    bb76:	683a      	ldr	r2, [r7, #0]
    bb78:	1d39      	adds	r1, r7, #4
    bb7a:	693b      	ldr	r3, [r7, #16]
    bb7c:	0018      	movs	r0, r3
    bb7e:	4b13      	ldr	r3, [pc, #76]	; (bbcc <prvNotifyQueueSetContainer+0x9c>)
    bb80:	4798      	blx	r3
    bb82:	0003      	movs	r3, r0
    bb84:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    bb86:	230f      	movs	r3, #15
    bb88:	18fb      	adds	r3, r7, r3
    bb8a:	781b      	ldrb	r3, [r3, #0]
    bb8c:	b25b      	sxtb	r3, r3
    bb8e:	3301      	adds	r3, #1
    bb90:	d10d      	bne.n	bbae <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    bb92:	693b      	ldr	r3, [r7, #16]
    bb94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bb96:	2b00      	cmp	r3, #0
    bb98:	d012      	beq.n	bbc0 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    bb9a:	693b      	ldr	r3, [r7, #16]
    bb9c:	3324      	adds	r3, #36	; 0x24
    bb9e:	0018      	movs	r0, r3
    bba0:	4b0b      	ldr	r3, [pc, #44]	; (bbd0 <prvNotifyQueueSetContainer+0xa0>)
    bba2:	4798      	blx	r3
    bba4:	1e03      	subs	r3, r0, #0
    bba6:	d00b      	beq.n	bbc0 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    bba8:	2301      	movs	r3, #1
    bbaa:	617b      	str	r3, [r7, #20]
    bbac:	e008      	b.n	bbc0 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    bbae:	230f      	movs	r3, #15
    bbb0:	18fb      	adds	r3, r7, r3
    bbb2:	781b      	ldrb	r3, [r3, #0]
    bbb4:	3301      	adds	r3, #1
    bbb6:	b2db      	uxtb	r3, r3
    bbb8:	b259      	sxtb	r1, r3
    bbba:	693b      	ldr	r3, [r7, #16]
    bbbc:	2245      	movs	r2, #69	; 0x45
    bbbe:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    bbc0:	697b      	ldr	r3, [r7, #20]
	}
    bbc2:	0018      	movs	r0, r3
    bbc4:	46bd      	mov	sp, r7
    bbc6:	b006      	add	sp, #24
    bbc8:	bd80      	pop	{r7, pc}
    bbca:	46c0      	nop			; (mov r8, r8)
    bbcc:	0000b7dd 	.word	0x0000b7dd
    bbd0:	0000c419 	.word	0x0000c419

0000bbd4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    bbd4:	b590      	push	{r4, r7, lr}
    bbd6:	b08d      	sub	sp, #52	; 0x34
    bbd8:	af04      	add	r7, sp, #16
    bbda:	60f8      	str	r0, [r7, #12]
    bbdc:	60b9      	str	r1, [r7, #8]
    bbde:	603b      	str	r3, [r7, #0]
    bbe0:	1dbb      	adds	r3, r7, #6
    bbe2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    bbe4:	1dbb      	adds	r3, r7, #6
    bbe6:	881b      	ldrh	r3, [r3, #0]
    bbe8:	009b      	lsls	r3, r3, #2
    bbea:	0018      	movs	r0, r3
    bbec:	4b1d      	ldr	r3, [pc, #116]	; (bc64 <xTaskCreate+0x90>)
    bbee:	4798      	blx	r3
    bbf0:	0003      	movs	r3, r0
    bbf2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    bbf4:	697b      	ldr	r3, [r7, #20]
    bbf6:	2b00      	cmp	r3, #0
    bbf8:	d010      	beq.n	bc1c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    bbfa:	2050      	movs	r0, #80	; 0x50
    bbfc:	4b19      	ldr	r3, [pc, #100]	; (bc64 <xTaskCreate+0x90>)
    bbfe:	4798      	blx	r3
    bc00:	0003      	movs	r3, r0
    bc02:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    bc04:	69fb      	ldr	r3, [r7, #28]
    bc06:	2b00      	cmp	r3, #0
    bc08:	d003      	beq.n	bc12 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    bc0a:	69fb      	ldr	r3, [r7, #28]
    bc0c:	697a      	ldr	r2, [r7, #20]
    bc0e:	631a      	str	r2, [r3, #48]	; 0x30
    bc10:	e006      	b.n	bc20 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    bc12:	697b      	ldr	r3, [r7, #20]
    bc14:	0018      	movs	r0, r3
    bc16:	4b14      	ldr	r3, [pc, #80]	; (bc68 <xTaskCreate+0x94>)
    bc18:	4798      	blx	r3
    bc1a:	e001      	b.n	bc20 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    bc1c:	2300      	movs	r3, #0
    bc1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    bc20:	69fb      	ldr	r3, [r7, #28]
    bc22:	2b00      	cmp	r3, #0
    bc24:	d016      	beq.n	bc54 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    bc26:	1dbb      	adds	r3, r7, #6
    bc28:	881a      	ldrh	r2, [r3, #0]
    bc2a:	683c      	ldr	r4, [r7, #0]
    bc2c:	68b9      	ldr	r1, [r7, #8]
    bc2e:	68f8      	ldr	r0, [r7, #12]
    bc30:	2300      	movs	r3, #0
    bc32:	9303      	str	r3, [sp, #12]
    bc34:	69fb      	ldr	r3, [r7, #28]
    bc36:	9302      	str	r3, [sp, #8]
    bc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bc3a:	9301      	str	r3, [sp, #4]
    bc3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bc3e:	9300      	str	r3, [sp, #0]
    bc40:	0023      	movs	r3, r4
    bc42:	4c0a      	ldr	r4, [pc, #40]	; (bc6c <xTaskCreate+0x98>)
    bc44:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    bc46:	69fb      	ldr	r3, [r7, #28]
    bc48:	0018      	movs	r0, r3
    bc4a:	4b09      	ldr	r3, [pc, #36]	; (bc70 <xTaskCreate+0x9c>)
    bc4c:	4798      	blx	r3
			xReturn = pdPASS;
    bc4e:	2301      	movs	r3, #1
    bc50:	61bb      	str	r3, [r7, #24]
    bc52:	e002      	b.n	bc5a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    bc54:	2301      	movs	r3, #1
    bc56:	425b      	negs	r3, r3
    bc58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    bc5a:	69bb      	ldr	r3, [r7, #24]
	}
    bc5c:	0018      	movs	r0, r3
    bc5e:	46bd      	mov	sp, r7
    bc60:	b009      	add	sp, #36	; 0x24
    bc62:	bd90      	pop	{r4, r7, pc}
    bc64:	0000b02d 	.word	0x0000b02d
    bc68:	0000b0cd 	.word	0x0000b0cd
    bc6c:	0000bc75 	.word	0x0000bc75
    bc70:	0000bd71 	.word	0x0000bd71

0000bc74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    bc74:	b580      	push	{r7, lr}
    bc76:	b086      	sub	sp, #24
    bc78:	af00      	add	r7, sp, #0
    bc7a:	60f8      	str	r0, [r7, #12]
    bc7c:	60b9      	str	r1, [r7, #8]
    bc7e:	607a      	str	r2, [r7, #4]
    bc80:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    bc82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bc84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    bc86:	687b      	ldr	r3, [r7, #4]
    bc88:	4936      	ldr	r1, [pc, #216]	; (bd64 <prvInitialiseNewTask+0xf0>)
    bc8a:	468c      	mov	ip, r1
    bc8c:	4463      	add	r3, ip
    bc8e:	009b      	lsls	r3, r3, #2
    bc90:	18d3      	adds	r3, r2, r3
    bc92:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    bc94:	693b      	ldr	r3, [r7, #16]
    bc96:	2207      	movs	r2, #7
    bc98:	4393      	bics	r3, r2
    bc9a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    bc9c:	693b      	ldr	r3, [r7, #16]
    bc9e:	2207      	movs	r2, #7
    bca0:	4013      	ands	r3, r2
    bca2:	d001      	beq.n	bca8 <prvInitialiseNewTask+0x34>
    bca4:	b672      	cpsid	i
    bca6:	e7fe      	b.n	bca6 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    bca8:	2300      	movs	r3, #0
    bcaa:	617b      	str	r3, [r7, #20]
    bcac:	e013      	b.n	bcd6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    bcae:	68ba      	ldr	r2, [r7, #8]
    bcb0:	697b      	ldr	r3, [r7, #20]
    bcb2:	18d3      	adds	r3, r2, r3
    bcb4:	7818      	ldrb	r0, [r3, #0]
    bcb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bcb8:	2134      	movs	r1, #52	; 0x34
    bcba:	697b      	ldr	r3, [r7, #20]
    bcbc:	18d3      	adds	r3, r2, r3
    bcbe:	185b      	adds	r3, r3, r1
    bcc0:	1c02      	adds	r2, r0, #0
    bcc2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    bcc4:	68ba      	ldr	r2, [r7, #8]
    bcc6:	697b      	ldr	r3, [r7, #20]
    bcc8:	18d3      	adds	r3, r2, r3
    bcca:	781b      	ldrb	r3, [r3, #0]
    bccc:	2b00      	cmp	r3, #0
    bcce:	d006      	beq.n	bcde <prvInitialiseNewTask+0x6a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    bcd0:	697b      	ldr	r3, [r7, #20]
    bcd2:	3301      	adds	r3, #1
    bcd4:	617b      	str	r3, [r7, #20]
    bcd6:	697b      	ldr	r3, [r7, #20]
    bcd8:	2b0b      	cmp	r3, #11
    bcda:	d9e8      	bls.n	bcae <prvInitialiseNewTask+0x3a>
    bcdc:	e000      	b.n	bce0 <prvInitialiseNewTask+0x6c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    bcde:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    bce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bce2:	223f      	movs	r2, #63	; 0x3f
    bce4:	2100      	movs	r1, #0
    bce6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    bce8:	6a3b      	ldr	r3, [r7, #32]
    bcea:	2b04      	cmp	r3, #4
    bcec:	d901      	bls.n	bcf2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    bcee:	2304      	movs	r3, #4
    bcf0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    bcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bcf4:	6a3a      	ldr	r2, [r7, #32]
    bcf6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    bcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bcfa:	6a3a      	ldr	r2, [r7, #32]
    bcfc:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    bcfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd00:	2200      	movs	r2, #0
    bd02:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd06:	3304      	adds	r3, #4
    bd08:	0018      	movs	r0, r3
    bd0a:	4b17      	ldr	r3, [pc, #92]	; (bd68 <prvInitialiseNewTask+0xf4>)
    bd0c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd10:	3318      	adds	r3, #24
    bd12:	0018      	movs	r0, r3
    bd14:	4b14      	ldr	r3, [pc, #80]	; (bd68 <prvInitialiseNewTask+0xf4>)
    bd16:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    bd18:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bd1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    bd1e:	6a3b      	ldr	r3, [r7, #32]
    bd20:	2205      	movs	r2, #5
    bd22:	1ad2      	subs	r2, r2, r3
    bd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    bd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bd2c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    bd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd30:	2200      	movs	r2, #0
    bd32:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    bd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd36:	224c      	movs	r2, #76	; 0x4c
    bd38:	2100      	movs	r1, #0
    bd3a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    bd3c:	683a      	ldr	r2, [r7, #0]
    bd3e:	68f9      	ldr	r1, [r7, #12]
    bd40:	693b      	ldr	r3, [r7, #16]
    bd42:	0018      	movs	r0, r3
    bd44:	4b09      	ldr	r3, [pc, #36]	; (bd6c <prvInitialiseNewTask+0xf8>)
    bd46:	4798      	blx	r3
    bd48:	0002      	movs	r2, r0
    bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    bd4c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bd50:	2b00      	cmp	r3, #0
    bd52:	d002      	beq.n	bd5a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    bd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    bd56:	6aba      	ldr	r2, [r7, #40]	; 0x28
    bd58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    bd5a:	46c0      	nop			; (mov r8, r8)
    bd5c:	46bd      	mov	sp, r7
    bd5e:	b006      	add	sp, #24
    bd60:	bd80      	pop	{r7, pc}
    bd62:	46c0      	nop			; (mov r8, r8)
    bd64:	3fffffff 	.word	0x3fffffff
    bd68:	0000acd5 	.word	0x0000acd5
    bd6c:	0000aded 	.word	0x0000aded

0000bd70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    bd70:	b580      	push	{r7, lr}
    bd72:	b082      	sub	sp, #8
    bd74:	af00      	add	r7, sp, #0
    bd76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    bd78:	4b29      	ldr	r3, [pc, #164]	; (be20 <prvAddNewTaskToReadyList+0xb0>)
    bd7a:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    bd7c:	4b29      	ldr	r3, [pc, #164]	; (be24 <prvAddNewTaskToReadyList+0xb4>)
    bd7e:	681b      	ldr	r3, [r3, #0]
    bd80:	1c5a      	adds	r2, r3, #1
    bd82:	4b28      	ldr	r3, [pc, #160]	; (be24 <prvAddNewTaskToReadyList+0xb4>)
    bd84:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    bd86:	4b28      	ldr	r3, [pc, #160]	; (be28 <prvAddNewTaskToReadyList+0xb8>)
    bd88:	681b      	ldr	r3, [r3, #0]
    bd8a:	2b00      	cmp	r3, #0
    bd8c:	d109      	bne.n	bda2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    bd8e:	4b26      	ldr	r3, [pc, #152]	; (be28 <prvAddNewTaskToReadyList+0xb8>)
    bd90:	687a      	ldr	r2, [r7, #4]
    bd92:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    bd94:	4b23      	ldr	r3, [pc, #140]	; (be24 <prvAddNewTaskToReadyList+0xb4>)
    bd96:	681b      	ldr	r3, [r3, #0]
    bd98:	2b01      	cmp	r3, #1
    bd9a:	d110      	bne.n	bdbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    bd9c:	4b23      	ldr	r3, [pc, #140]	; (be2c <prvAddNewTaskToReadyList+0xbc>)
    bd9e:	4798      	blx	r3
    bda0:	e00d      	b.n	bdbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    bda2:	4b23      	ldr	r3, [pc, #140]	; (be30 <prvAddNewTaskToReadyList+0xc0>)
    bda4:	681b      	ldr	r3, [r3, #0]
    bda6:	2b00      	cmp	r3, #0
    bda8:	d109      	bne.n	bdbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    bdaa:	4b1f      	ldr	r3, [pc, #124]	; (be28 <prvAddNewTaskToReadyList+0xb8>)
    bdac:	681b      	ldr	r3, [r3, #0]
    bdae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdb0:	687b      	ldr	r3, [r7, #4]
    bdb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    bdb4:	429a      	cmp	r2, r3
    bdb6:	d802      	bhi.n	bdbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    bdb8:	4b1b      	ldr	r3, [pc, #108]	; (be28 <prvAddNewTaskToReadyList+0xb8>)
    bdba:	687a      	ldr	r2, [r7, #4]
    bdbc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    bdbe:	4b1d      	ldr	r3, [pc, #116]	; (be34 <prvAddNewTaskToReadyList+0xc4>)
    bdc0:	681b      	ldr	r3, [r3, #0]
    bdc2:	1c5a      	adds	r2, r3, #1
    bdc4:	4b1b      	ldr	r3, [pc, #108]	; (be34 <prvAddNewTaskToReadyList+0xc4>)
    bdc6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    bdc8:	687b      	ldr	r3, [r7, #4]
    bdca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdcc:	4b1a      	ldr	r3, [pc, #104]	; (be38 <prvAddNewTaskToReadyList+0xc8>)
    bdce:	681b      	ldr	r3, [r3, #0]
    bdd0:	429a      	cmp	r2, r3
    bdd2:	d903      	bls.n	bddc <prvAddNewTaskToReadyList+0x6c>
    bdd4:	687b      	ldr	r3, [r7, #4]
    bdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bdd8:	4b17      	ldr	r3, [pc, #92]	; (be38 <prvAddNewTaskToReadyList+0xc8>)
    bdda:	601a      	str	r2, [r3, #0]
    bddc:	687b      	ldr	r3, [r7, #4]
    bdde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    bde0:	0013      	movs	r3, r2
    bde2:	009b      	lsls	r3, r3, #2
    bde4:	189b      	adds	r3, r3, r2
    bde6:	009b      	lsls	r3, r3, #2
    bde8:	4a14      	ldr	r2, [pc, #80]	; (be3c <prvAddNewTaskToReadyList+0xcc>)
    bdea:	189a      	adds	r2, r3, r2
    bdec:	687b      	ldr	r3, [r7, #4]
    bdee:	3304      	adds	r3, #4
    bdf0:	0019      	movs	r1, r3
    bdf2:	0010      	movs	r0, r2
    bdf4:	4b12      	ldr	r3, [pc, #72]	; (be40 <prvAddNewTaskToReadyList+0xd0>)
    bdf6:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    bdf8:	4b12      	ldr	r3, [pc, #72]	; (be44 <prvAddNewTaskToReadyList+0xd4>)
    bdfa:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    bdfc:	4b0c      	ldr	r3, [pc, #48]	; (be30 <prvAddNewTaskToReadyList+0xc0>)
    bdfe:	681b      	ldr	r3, [r3, #0]
    be00:	2b00      	cmp	r3, #0
    be02:	d008      	beq.n	be16 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    be04:	4b08      	ldr	r3, [pc, #32]	; (be28 <prvAddNewTaskToReadyList+0xb8>)
    be06:	681b      	ldr	r3, [r3, #0]
    be08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    be0a:	687b      	ldr	r3, [r7, #4]
    be0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    be0e:	429a      	cmp	r2, r3
    be10:	d201      	bcs.n	be16 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    be12:	4b0d      	ldr	r3, [pc, #52]	; (be48 <prvAddNewTaskToReadyList+0xd8>)
    be14:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    be16:	46c0      	nop			; (mov r8, r8)
    be18:	46bd      	mov	sp, r7
    be1a:	b002      	add	sp, #8
    be1c:	bd80      	pop	{r7, pc}
    be1e:	46c0      	nop			; (mov r8, r8)
    be20:	0000af19 	.word	0x0000af19
    be24:	20003e10 	.word	0x20003e10
    be28:	20003d38 	.word	0x20003d38
    be2c:	0000c5e5 	.word	0x0000c5e5
    be30:	20003e1c 	.word	0x20003e1c
    be34:	20003e2c 	.word	0x20003e2c
    be38:	20003e18 	.word	0x20003e18
    be3c:	20003d3c 	.word	0x20003d3c
    be40:	0000aced 	.word	0x0000aced
    be44:	0000af3d 	.word	0x0000af3d
    be48:	0000aef9 	.word	0x0000aef9

0000be4c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    be4c:	b580      	push	{r7, lr}
    be4e:	b086      	sub	sp, #24
    be50:	af00      	add	r7, sp, #0
    be52:	6078      	str	r0, [r7, #4]
    be54:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    be56:	2300      	movs	r3, #0
    be58:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    be5a:	687b      	ldr	r3, [r7, #4]
    be5c:	2b00      	cmp	r3, #0
    be5e:	d101      	bne.n	be64 <vTaskDelayUntil+0x18>
    be60:	b672      	cpsid	i
    be62:	e7fe      	b.n	be62 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    be64:	683b      	ldr	r3, [r7, #0]
    be66:	2b00      	cmp	r3, #0
    be68:	d101      	bne.n	be6e <vTaskDelayUntil+0x22>
    be6a:	b672      	cpsid	i
    be6c:	e7fe      	b.n	be6c <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    be6e:	4b23      	ldr	r3, [pc, #140]	; (befc <vTaskDelayUntil+0xb0>)
    be70:	681b      	ldr	r3, [r3, #0]
    be72:	2b00      	cmp	r3, #0
    be74:	d001      	beq.n	be7a <vTaskDelayUntil+0x2e>
    be76:	b672      	cpsid	i
    be78:	e7fe      	b.n	be78 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    be7a:	4b21      	ldr	r3, [pc, #132]	; (bf00 <vTaskDelayUntil+0xb4>)
    be7c:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    be7e:	4b21      	ldr	r3, [pc, #132]	; (bf04 <vTaskDelayUntil+0xb8>)
    be80:	681b      	ldr	r3, [r3, #0]
    be82:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    be84:	687b      	ldr	r3, [r7, #4]
    be86:	681a      	ldr	r2, [r3, #0]
    be88:	683b      	ldr	r3, [r7, #0]
    be8a:	18d3      	adds	r3, r2, r3
    be8c:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    be8e:	687b      	ldr	r3, [r7, #4]
    be90:	681a      	ldr	r2, [r3, #0]
    be92:	693b      	ldr	r3, [r7, #16]
    be94:	429a      	cmp	r2, r3
    be96:	d90b      	bls.n	beb0 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    be98:	687b      	ldr	r3, [r7, #4]
    be9a:	681a      	ldr	r2, [r3, #0]
    be9c:	68fb      	ldr	r3, [r7, #12]
    be9e:	429a      	cmp	r2, r3
    bea0:	d911      	bls.n	bec6 <vTaskDelayUntil+0x7a>
    bea2:	68fa      	ldr	r2, [r7, #12]
    bea4:	693b      	ldr	r3, [r7, #16]
    bea6:	429a      	cmp	r2, r3
    bea8:	d90d      	bls.n	bec6 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    beaa:	2301      	movs	r3, #1
    beac:	617b      	str	r3, [r7, #20]
    beae:	e00a      	b.n	bec6 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    beb0:	687b      	ldr	r3, [r7, #4]
    beb2:	681a      	ldr	r2, [r3, #0]
    beb4:	68fb      	ldr	r3, [r7, #12]
    beb6:	429a      	cmp	r2, r3
    beb8:	d803      	bhi.n	bec2 <vTaskDelayUntil+0x76>
    beba:	68fa      	ldr	r2, [r7, #12]
    bebc:	693b      	ldr	r3, [r7, #16]
    bebe:	429a      	cmp	r2, r3
    bec0:	d901      	bls.n	bec6 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    bec2:	2301      	movs	r3, #1
    bec4:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    bec6:	687b      	ldr	r3, [r7, #4]
    bec8:	68fa      	ldr	r2, [r7, #12]
    beca:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    becc:	697b      	ldr	r3, [r7, #20]
    bece:	2b00      	cmp	r3, #0
    bed0:	d006      	beq.n	bee0 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    bed2:	68fa      	ldr	r2, [r7, #12]
    bed4:	693b      	ldr	r3, [r7, #16]
    bed6:	1ad3      	subs	r3, r2, r3
    bed8:	2100      	movs	r1, #0
    beda:	0018      	movs	r0, r3
    bedc:	4b0a      	ldr	r3, [pc, #40]	; (bf08 <vTaskDelayUntil+0xbc>)
    bede:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    bee0:	4b0a      	ldr	r3, [pc, #40]	; (bf0c <vTaskDelayUntil+0xc0>)
    bee2:	4798      	blx	r3
    bee4:	0003      	movs	r3, r0
    bee6:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    bee8:	68bb      	ldr	r3, [r7, #8]
    beea:	2b00      	cmp	r3, #0
    beec:	d101      	bne.n	bef2 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    beee:	4b08      	ldr	r3, [pc, #32]	; (bf10 <vTaskDelayUntil+0xc4>)
    bef0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    bef2:	46c0      	nop			; (mov r8, r8)
    bef4:	46bd      	mov	sp, r7
    bef6:	b006      	add	sp, #24
    bef8:	bd80      	pop	{r7, pc}
    befa:	46c0      	nop			; (mov r8, r8)
    befc:	20003e38 	.word	0x20003e38
    bf00:	0000bff9 	.word	0x0000bff9
    bf04:	20003e14 	.word	0x20003e14
    bf08:	0000c94d 	.word	0x0000c94d
    bf0c:	0000c011 	.word	0x0000c011
    bf10:	0000aef9 	.word	0x0000aef9

0000bf14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    bf14:	b580      	push	{r7, lr}
    bf16:	b084      	sub	sp, #16
    bf18:	af00      	add	r7, sp, #0
    bf1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    bf1c:	2300      	movs	r3, #0
    bf1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    bf20:	687b      	ldr	r3, [r7, #4]
    bf22:	2b00      	cmp	r3, #0
    bf24:	d010      	beq.n	bf48 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    bf26:	4b0d      	ldr	r3, [pc, #52]	; (bf5c <vTaskDelay+0x48>)
    bf28:	681b      	ldr	r3, [r3, #0]
    bf2a:	2b00      	cmp	r3, #0
    bf2c:	d001      	beq.n	bf32 <vTaskDelay+0x1e>
    bf2e:	b672      	cpsid	i
    bf30:	e7fe      	b.n	bf30 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    bf32:	4b0b      	ldr	r3, [pc, #44]	; (bf60 <vTaskDelay+0x4c>)
    bf34:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    bf36:	687b      	ldr	r3, [r7, #4]
    bf38:	2100      	movs	r1, #0
    bf3a:	0018      	movs	r0, r3
    bf3c:	4b09      	ldr	r3, [pc, #36]	; (bf64 <vTaskDelay+0x50>)
    bf3e:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    bf40:	4b09      	ldr	r3, [pc, #36]	; (bf68 <vTaskDelay+0x54>)
    bf42:	4798      	blx	r3
    bf44:	0003      	movs	r3, r0
    bf46:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    bf48:	68fb      	ldr	r3, [r7, #12]
    bf4a:	2b00      	cmp	r3, #0
    bf4c:	d101      	bne.n	bf52 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    bf4e:	4b07      	ldr	r3, [pc, #28]	; (bf6c <vTaskDelay+0x58>)
    bf50:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    bf52:	46c0      	nop			; (mov r8, r8)
    bf54:	46bd      	mov	sp, r7
    bf56:	b004      	add	sp, #16
    bf58:	bd80      	pop	{r7, pc}
    bf5a:	46c0      	nop			; (mov r8, r8)
    bf5c:	20003e38 	.word	0x20003e38
    bf60:	0000bff9 	.word	0x0000bff9
    bf64:	0000c94d 	.word	0x0000c94d
    bf68:	0000c011 	.word	0x0000c011
    bf6c:	0000aef9 	.word	0x0000aef9

0000bf70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    bf70:	b590      	push	{r4, r7, lr}
    bf72:	b085      	sub	sp, #20
    bf74:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    bf76:	2380      	movs	r3, #128	; 0x80
    bf78:	009a      	lsls	r2, r3, #2
    bf7a:	4916      	ldr	r1, [pc, #88]	; (bfd4 <vTaskStartScheduler+0x64>)
    bf7c:	4816      	ldr	r0, [pc, #88]	; (bfd8 <vTaskStartScheduler+0x68>)
    bf7e:	4b17      	ldr	r3, [pc, #92]	; (bfdc <vTaskStartScheduler+0x6c>)
    bf80:	9301      	str	r3, [sp, #4]
    bf82:	2300      	movs	r3, #0
    bf84:	9300      	str	r3, [sp, #0]
    bf86:	2300      	movs	r3, #0
    bf88:	4c15      	ldr	r4, [pc, #84]	; (bfe0 <vTaskStartScheduler+0x70>)
    bf8a:	47a0      	blx	r4
    bf8c:	0003      	movs	r3, r0
    bf8e:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    bf90:	687b      	ldr	r3, [r7, #4]
    bf92:	2b01      	cmp	r3, #1
    bf94:	d103      	bne.n	bf9e <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
    bf96:	4b13      	ldr	r3, [pc, #76]	; (bfe4 <vTaskStartScheduler+0x74>)
    bf98:	4798      	blx	r3
    bf9a:	0003      	movs	r3, r0
    bf9c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    bf9e:	687b      	ldr	r3, [r7, #4]
    bfa0:	2b01      	cmp	r3, #1
    bfa2:	d10d      	bne.n	bfc0 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    bfa4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    bfa6:	4b10      	ldr	r3, [pc, #64]	; (bfe8 <vTaskStartScheduler+0x78>)
    bfa8:	2201      	movs	r2, #1
    bfaa:	4252      	negs	r2, r2
    bfac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    bfae:	4b0f      	ldr	r3, [pc, #60]	; (bfec <vTaskStartScheduler+0x7c>)
    bfb0:	2201      	movs	r2, #1
    bfb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    bfb4:	4b0e      	ldr	r3, [pc, #56]	; (bff0 <vTaskStartScheduler+0x80>)
    bfb6:	2200      	movs	r2, #0
    bfb8:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    bfba:	4b0e      	ldr	r3, [pc, #56]	; (bff4 <vTaskStartScheduler+0x84>)
    bfbc:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    bfbe:	e004      	b.n	bfca <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    bfc0:	687b      	ldr	r3, [r7, #4]
    bfc2:	3301      	adds	r3, #1
    bfc4:	d101      	bne.n	bfca <vTaskStartScheduler+0x5a>
    bfc6:	b672      	cpsid	i
    bfc8:	e7fe      	b.n	bfc8 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    bfca:	46c0      	nop			; (mov r8, r8)
    bfcc:	46bd      	mov	sp, r7
    bfce:	b003      	add	sp, #12
    bfd0:	bd90      	pop	{r4, r7, pc}
    bfd2:	46c0      	nop			; (mov r8, r8)
    bfd4:	00011fa4 	.word	0x00011fa4
    bfd8:	0000c5c9 	.word	0x0000c5c9
    bfdc:	20003e34 	.word	0x20003e34
    bfe0:	0000bbd5 	.word	0x0000bbd5
    bfe4:	0000ca01 	.word	0x0000ca01
    bfe8:	20003e30 	.word	0x20003e30
    bfec:	20003e1c 	.word	0x20003e1c
    bff0:	20003e14 	.word	0x20003e14
    bff4:	0000aea9 	.word	0x0000aea9

0000bff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    bff8:	b580      	push	{r7, lr}
    bffa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    bffc:	4b03      	ldr	r3, [pc, #12]	; (c00c <vTaskSuspendAll+0x14>)
    bffe:	681b      	ldr	r3, [r3, #0]
    c000:	1c5a      	adds	r2, r3, #1
    c002:	4b02      	ldr	r3, [pc, #8]	; (c00c <vTaskSuspendAll+0x14>)
    c004:	601a      	str	r2, [r3, #0]
}
    c006:	46c0      	nop			; (mov r8, r8)
    c008:	46bd      	mov	sp, r7
    c00a:	bd80      	pop	{r7, pc}
    c00c:	20003e38 	.word	0x20003e38

0000c010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    c010:	b580      	push	{r7, lr}
    c012:	b084      	sub	sp, #16
    c014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    c016:	2300      	movs	r3, #0
    c018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    c01a:	2300      	movs	r3, #0
    c01c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    c01e:	4b3a      	ldr	r3, [pc, #232]	; (c108 <xTaskResumeAll+0xf8>)
    c020:	681b      	ldr	r3, [r3, #0]
    c022:	2b00      	cmp	r3, #0
    c024:	d101      	bne.n	c02a <xTaskResumeAll+0x1a>
    c026:	b672      	cpsid	i
    c028:	e7fe      	b.n	c028 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    c02a:	4b38      	ldr	r3, [pc, #224]	; (c10c <xTaskResumeAll+0xfc>)
    c02c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    c02e:	4b36      	ldr	r3, [pc, #216]	; (c108 <xTaskResumeAll+0xf8>)
    c030:	681b      	ldr	r3, [r3, #0]
    c032:	1e5a      	subs	r2, r3, #1
    c034:	4b34      	ldr	r3, [pc, #208]	; (c108 <xTaskResumeAll+0xf8>)
    c036:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c038:	4b33      	ldr	r3, [pc, #204]	; (c108 <xTaskResumeAll+0xf8>)
    c03a:	681b      	ldr	r3, [r3, #0]
    c03c:	2b00      	cmp	r3, #0
    c03e:	d15b      	bne.n	c0f8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    c040:	4b33      	ldr	r3, [pc, #204]	; (c110 <xTaskResumeAll+0x100>)
    c042:	681b      	ldr	r3, [r3, #0]
    c044:	2b00      	cmp	r3, #0
    c046:	d057      	beq.n	c0f8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    c048:	e02f      	b.n	c0aa <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    c04a:	4b32      	ldr	r3, [pc, #200]	; (c114 <xTaskResumeAll+0x104>)
    c04c:	68db      	ldr	r3, [r3, #12]
    c04e:	68db      	ldr	r3, [r3, #12]
    c050:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    c052:	68fb      	ldr	r3, [r7, #12]
    c054:	3318      	adds	r3, #24
    c056:	0018      	movs	r0, r3
    c058:	4b2f      	ldr	r3, [pc, #188]	; (c118 <xTaskResumeAll+0x108>)
    c05a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c05c:	68fb      	ldr	r3, [r7, #12]
    c05e:	3304      	adds	r3, #4
    c060:	0018      	movs	r0, r3
    c062:	4b2d      	ldr	r3, [pc, #180]	; (c118 <xTaskResumeAll+0x108>)
    c064:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    c066:	68fb      	ldr	r3, [r7, #12]
    c068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c06a:	4b2c      	ldr	r3, [pc, #176]	; (c11c <xTaskResumeAll+0x10c>)
    c06c:	681b      	ldr	r3, [r3, #0]
    c06e:	429a      	cmp	r2, r3
    c070:	d903      	bls.n	c07a <xTaskResumeAll+0x6a>
    c072:	68fb      	ldr	r3, [r7, #12]
    c074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c076:	4b29      	ldr	r3, [pc, #164]	; (c11c <xTaskResumeAll+0x10c>)
    c078:	601a      	str	r2, [r3, #0]
    c07a:	68fb      	ldr	r3, [r7, #12]
    c07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c07e:	0013      	movs	r3, r2
    c080:	009b      	lsls	r3, r3, #2
    c082:	189b      	adds	r3, r3, r2
    c084:	009b      	lsls	r3, r3, #2
    c086:	4a26      	ldr	r2, [pc, #152]	; (c120 <xTaskResumeAll+0x110>)
    c088:	189a      	adds	r2, r3, r2
    c08a:	68fb      	ldr	r3, [r7, #12]
    c08c:	3304      	adds	r3, #4
    c08e:	0019      	movs	r1, r3
    c090:	0010      	movs	r0, r2
    c092:	4b24      	ldr	r3, [pc, #144]	; (c124 <xTaskResumeAll+0x114>)
    c094:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    c096:	68fb      	ldr	r3, [r7, #12]
    c098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c09a:	4b23      	ldr	r3, [pc, #140]	; (c128 <xTaskResumeAll+0x118>)
    c09c:	681b      	ldr	r3, [r3, #0]
    c09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c0a0:	429a      	cmp	r2, r3
    c0a2:	d302      	bcc.n	c0aa <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    c0a4:	4b21      	ldr	r3, [pc, #132]	; (c12c <xTaskResumeAll+0x11c>)
    c0a6:	2201      	movs	r2, #1
    c0a8:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    c0aa:	4b1a      	ldr	r3, [pc, #104]	; (c114 <xTaskResumeAll+0x104>)
    c0ac:	681b      	ldr	r3, [r3, #0]
    c0ae:	2b00      	cmp	r3, #0
    c0b0:	d1cb      	bne.n	c04a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    c0b2:	68fb      	ldr	r3, [r7, #12]
    c0b4:	2b00      	cmp	r3, #0
    c0b6:	d001      	beq.n	c0bc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    c0b8:	4b1d      	ldr	r3, [pc, #116]	; (c130 <xTaskResumeAll+0x120>)
    c0ba:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    c0bc:	4b1d      	ldr	r3, [pc, #116]	; (c134 <xTaskResumeAll+0x124>)
    c0be:	681b      	ldr	r3, [r3, #0]
    c0c0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    c0c2:	687b      	ldr	r3, [r7, #4]
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d00f      	beq.n	c0e8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    c0c8:	4b1b      	ldr	r3, [pc, #108]	; (c138 <xTaskResumeAll+0x128>)
    c0ca:	4798      	blx	r3
    c0cc:	1e03      	subs	r3, r0, #0
    c0ce:	d002      	beq.n	c0d6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    c0d0:	4b16      	ldr	r3, [pc, #88]	; (c12c <xTaskResumeAll+0x11c>)
    c0d2:	2201      	movs	r2, #1
    c0d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    c0d6:	687b      	ldr	r3, [r7, #4]
    c0d8:	3b01      	subs	r3, #1
    c0da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    c0dc:	687b      	ldr	r3, [r7, #4]
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d1f2      	bne.n	c0c8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    c0e2:	4b14      	ldr	r3, [pc, #80]	; (c134 <xTaskResumeAll+0x124>)
    c0e4:	2200      	movs	r2, #0
    c0e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    c0e8:	4b10      	ldr	r3, [pc, #64]	; (c12c <xTaskResumeAll+0x11c>)
    c0ea:	681b      	ldr	r3, [r3, #0]
    c0ec:	2b00      	cmp	r3, #0
    c0ee:	d003      	beq.n	c0f8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    c0f0:	2301      	movs	r3, #1
    c0f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    c0f4:	4b11      	ldr	r3, [pc, #68]	; (c13c <xTaskResumeAll+0x12c>)
    c0f6:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    c0f8:	4b11      	ldr	r3, [pc, #68]	; (c140 <xTaskResumeAll+0x130>)
    c0fa:	4798      	blx	r3

	return xAlreadyYielded;
    c0fc:	68bb      	ldr	r3, [r7, #8]
}
    c0fe:	0018      	movs	r0, r3
    c100:	46bd      	mov	sp, r7
    c102:	b004      	add	sp, #16
    c104:	bd80      	pop	{r7, pc}
    c106:	46c0      	nop			; (mov r8, r8)
    c108:	20003e38 	.word	0x20003e38
    c10c:	0000af19 	.word	0x0000af19
    c110:	20003e10 	.word	0x20003e10
    c114:	20003dd0 	.word	0x20003dd0
    c118:	0000ad9d 	.word	0x0000ad9d
    c11c:	20003e18 	.word	0x20003e18
    c120:	20003d3c 	.word	0x20003d3c
    c124:	0000aced 	.word	0x0000aced
    c128:	20003d38 	.word	0x20003d38
    c12c:	20003e24 	.word	0x20003e24
    c130:	0000c725 	.word	0x0000c725
    c134:	20003e20 	.word	0x20003e20
    c138:	0000c161 	.word	0x0000c161
    c13c:	0000aef9 	.word	0x0000aef9
    c140:	0000af3d 	.word	0x0000af3d

0000c144 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    c144:	b580      	push	{r7, lr}
    c146:	b082      	sub	sp, #8
    c148:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    c14a:	4b04      	ldr	r3, [pc, #16]	; (c15c <xTaskGetTickCount+0x18>)
    c14c:	681b      	ldr	r3, [r3, #0]
    c14e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    c150:	687b      	ldr	r3, [r7, #4]
}
    c152:	0018      	movs	r0, r3
    c154:	46bd      	mov	sp, r7
    c156:	b002      	add	sp, #8
    c158:	bd80      	pop	{r7, pc}
    c15a:	46c0      	nop			; (mov r8, r8)
    c15c:	20003e14 	.word	0x20003e14

0000c160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    c160:	b580      	push	{r7, lr}
    c162:	b086      	sub	sp, #24
    c164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    c166:	2300      	movs	r3, #0
    c168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c16a:	4b45      	ldr	r3, [pc, #276]	; (c280 <xTaskIncrementTick+0x120>)
    c16c:	681b      	ldr	r3, [r3, #0]
    c16e:	2b00      	cmp	r3, #0
    c170:	d000      	beq.n	c174 <xTaskIncrementTick+0x14>
    c172:	e075      	b.n	c260 <xTaskIncrementTick+0x100>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    c174:	4b43      	ldr	r3, [pc, #268]	; (c284 <xTaskIncrementTick+0x124>)
    c176:	681b      	ldr	r3, [r3, #0]
    c178:	3301      	adds	r3, #1
    c17a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    c17c:	4b41      	ldr	r3, [pc, #260]	; (c284 <xTaskIncrementTick+0x124>)
    c17e:	693a      	ldr	r2, [r7, #16]
    c180:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    c182:	693b      	ldr	r3, [r7, #16]
    c184:	2b00      	cmp	r3, #0
    c186:	d117      	bne.n	c1b8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    c188:	4b3f      	ldr	r3, [pc, #252]	; (c288 <xTaskIncrementTick+0x128>)
    c18a:	681b      	ldr	r3, [r3, #0]
    c18c:	681b      	ldr	r3, [r3, #0]
    c18e:	2b00      	cmp	r3, #0
    c190:	d001      	beq.n	c196 <xTaskIncrementTick+0x36>
    c192:	b672      	cpsid	i
    c194:	e7fe      	b.n	c194 <xTaskIncrementTick+0x34>
    c196:	4b3c      	ldr	r3, [pc, #240]	; (c288 <xTaskIncrementTick+0x128>)
    c198:	681b      	ldr	r3, [r3, #0]
    c19a:	60fb      	str	r3, [r7, #12]
    c19c:	4b3b      	ldr	r3, [pc, #236]	; (c28c <xTaskIncrementTick+0x12c>)
    c19e:	681a      	ldr	r2, [r3, #0]
    c1a0:	4b39      	ldr	r3, [pc, #228]	; (c288 <xTaskIncrementTick+0x128>)
    c1a2:	601a      	str	r2, [r3, #0]
    c1a4:	4b39      	ldr	r3, [pc, #228]	; (c28c <xTaskIncrementTick+0x12c>)
    c1a6:	68fa      	ldr	r2, [r7, #12]
    c1a8:	601a      	str	r2, [r3, #0]
    c1aa:	4b39      	ldr	r3, [pc, #228]	; (c290 <xTaskIncrementTick+0x130>)
    c1ac:	681b      	ldr	r3, [r3, #0]
    c1ae:	1c5a      	adds	r2, r3, #1
    c1b0:	4b37      	ldr	r3, [pc, #220]	; (c290 <xTaskIncrementTick+0x130>)
    c1b2:	601a      	str	r2, [r3, #0]
    c1b4:	4b37      	ldr	r3, [pc, #220]	; (c294 <xTaskIncrementTick+0x134>)
    c1b6:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    c1b8:	4b37      	ldr	r3, [pc, #220]	; (c298 <xTaskIncrementTick+0x138>)
    c1ba:	681b      	ldr	r3, [r3, #0]
    c1bc:	693a      	ldr	r2, [r7, #16]
    c1be:	429a      	cmp	r2, r3
    c1c0:	d353      	bcc.n	c26a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    c1c2:	4b31      	ldr	r3, [pc, #196]	; (c288 <xTaskIncrementTick+0x128>)
    c1c4:	681b      	ldr	r3, [r3, #0]
    c1c6:	681b      	ldr	r3, [r3, #0]
    c1c8:	2b00      	cmp	r3, #0
    c1ca:	d101      	bne.n	c1d0 <xTaskIncrementTick+0x70>
    c1cc:	2301      	movs	r3, #1
    c1ce:	e000      	b.n	c1d2 <xTaskIncrementTick+0x72>
    c1d0:	2300      	movs	r3, #0
    c1d2:	2b00      	cmp	r3, #0
    c1d4:	d004      	beq.n	c1e0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c1d6:	4b30      	ldr	r3, [pc, #192]	; (c298 <xTaskIncrementTick+0x138>)
    c1d8:	2201      	movs	r2, #1
    c1da:	4252      	negs	r2, r2
    c1dc:	601a      	str	r2, [r3, #0]
					break;
    c1de:	e044      	b.n	c26a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    c1e0:	4b29      	ldr	r3, [pc, #164]	; (c288 <xTaskIncrementTick+0x128>)
    c1e2:	681b      	ldr	r3, [r3, #0]
    c1e4:	68db      	ldr	r3, [r3, #12]
    c1e6:	68db      	ldr	r3, [r3, #12]
    c1e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    c1ea:	68bb      	ldr	r3, [r7, #8]
    c1ec:	685b      	ldr	r3, [r3, #4]
    c1ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    c1f0:	693a      	ldr	r2, [r7, #16]
    c1f2:	687b      	ldr	r3, [r7, #4]
    c1f4:	429a      	cmp	r2, r3
    c1f6:	d203      	bcs.n	c200 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    c1f8:	4b27      	ldr	r3, [pc, #156]	; (c298 <xTaskIncrementTick+0x138>)
    c1fa:	687a      	ldr	r2, [r7, #4]
    c1fc:	601a      	str	r2, [r3, #0]
						break;
    c1fe:	e034      	b.n	c26a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c200:	68bb      	ldr	r3, [r7, #8]
    c202:	3304      	adds	r3, #4
    c204:	0018      	movs	r0, r3
    c206:	4b25      	ldr	r3, [pc, #148]	; (c29c <xTaskIncrementTick+0x13c>)
    c208:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    c20a:	68bb      	ldr	r3, [r7, #8]
    c20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c20e:	2b00      	cmp	r3, #0
    c210:	d004      	beq.n	c21c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    c212:	68bb      	ldr	r3, [r7, #8]
    c214:	3318      	adds	r3, #24
    c216:	0018      	movs	r0, r3
    c218:	4b20      	ldr	r3, [pc, #128]	; (c29c <xTaskIncrementTick+0x13c>)
    c21a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    c21c:	68bb      	ldr	r3, [r7, #8]
    c21e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c220:	4b1f      	ldr	r3, [pc, #124]	; (c2a0 <xTaskIncrementTick+0x140>)
    c222:	681b      	ldr	r3, [r3, #0]
    c224:	429a      	cmp	r2, r3
    c226:	d903      	bls.n	c230 <xTaskIncrementTick+0xd0>
    c228:	68bb      	ldr	r3, [r7, #8]
    c22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c22c:	4b1c      	ldr	r3, [pc, #112]	; (c2a0 <xTaskIncrementTick+0x140>)
    c22e:	601a      	str	r2, [r3, #0]
    c230:	68bb      	ldr	r3, [r7, #8]
    c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c234:	0013      	movs	r3, r2
    c236:	009b      	lsls	r3, r3, #2
    c238:	189b      	adds	r3, r3, r2
    c23a:	009b      	lsls	r3, r3, #2
    c23c:	4a19      	ldr	r2, [pc, #100]	; (c2a4 <xTaskIncrementTick+0x144>)
    c23e:	189a      	adds	r2, r3, r2
    c240:	68bb      	ldr	r3, [r7, #8]
    c242:	3304      	adds	r3, #4
    c244:	0019      	movs	r1, r3
    c246:	0010      	movs	r0, r2
    c248:	4b17      	ldr	r3, [pc, #92]	; (c2a8 <xTaskIncrementTick+0x148>)
    c24a:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    c24c:	68bb      	ldr	r3, [r7, #8]
    c24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c250:	4b16      	ldr	r3, [pc, #88]	; (c2ac <xTaskIncrementTick+0x14c>)
    c252:	681b      	ldr	r3, [r3, #0]
    c254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c256:	429a      	cmp	r2, r3
    c258:	d3b3      	bcc.n	c1c2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    c25a:	2301      	movs	r3, #1
    c25c:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    c25e:	e7b0      	b.n	c1c2 <xTaskIncrementTick+0x62>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    c260:	4b13      	ldr	r3, [pc, #76]	; (c2b0 <xTaskIncrementTick+0x150>)
    c262:	681b      	ldr	r3, [r3, #0]
    c264:	1c5a      	adds	r2, r3, #1
    c266:	4b12      	ldr	r3, [pc, #72]	; (c2b0 <xTaskIncrementTick+0x150>)
    c268:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    c26a:	4b12      	ldr	r3, [pc, #72]	; (c2b4 <xTaskIncrementTick+0x154>)
    c26c:	681b      	ldr	r3, [r3, #0]
    c26e:	2b00      	cmp	r3, #0
    c270:	d001      	beq.n	c276 <xTaskIncrementTick+0x116>
		{
			xSwitchRequired = pdTRUE;
    c272:	2301      	movs	r3, #1
    c274:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    c276:	697b      	ldr	r3, [r7, #20]
}
    c278:	0018      	movs	r0, r3
    c27a:	46bd      	mov	sp, r7
    c27c:	b006      	add	sp, #24
    c27e:	bd80      	pop	{r7, pc}
    c280:	20003e38 	.word	0x20003e38
    c284:	20003e14 	.word	0x20003e14
    c288:	20003dc8 	.word	0x20003dc8
    c28c:	20003dcc 	.word	0x20003dcc
    c290:	20003e28 	.word	0x20003e28
    c294:	0000c725 	.word	0x0000c725
    c298:	20003e30 	.word	0x20003e30
    c29c:	0000ad9d 	.word	0x0000ad9d
    c2a0:	20003e18 	.word	0x20003e18
    c2a4:	20003d3c 	.word	0x20003d3c
    c2a8:	0000aced 	.word	0x0000aced
    c2ac:	20003d38 	.word	0x20003d38
    c2b0:	20003e20 	.word	0x20003e20
    c2b4:	20003e24 	.word	0x20003e24

0000c2b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    c2b8:	b580      	push	{r7, lr}
    c2ba:	b082      	sub	sp, #8
    c2bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    c2be:	4b2a      	ldr	r3, [pc, #168]	; (c368 <vTaskSwitchContext+0xb0>)
    c2c0:	681b      	ldr	r3, [r3, #0]
    c2c2:	2b00      	cmp	r3, #0
    c2c4:	d003      	beq.n	c2ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    c2c6:	4b29      	ldr	r3, [pc, #164]	; (c36c <vTaskSwitchContext+0xb4>)
    c2c8:	2201      	movs	r2, #1
    c2ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    c2cc:	e048      	b.n	c360 <vTaskSwitchContext+0xa8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    c2ce:	4b27      	ldr	r3, [pc, #156]	; (c36c <vTaskSwitchContext+0xb4>)
    c2d0:	2200      	movs	r2, #0
    c2d2:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    c2d4:	4b26      	ldr	r3, [pc, #152]	; (c370 <vTaskSwitchContext+0xb8>)
    c2d6:	681b      	ldr	r3, [r3, #0]
    c2d8:	681a      	ldr	r2, [r3, #0]
    c2da:	4b25      	ldr	r3, [pc, #148]	; (c370 <vTaskSwitchContext+0xb8>)
    c2dc:	681b      	ldr	r3, [r3, #0]
    c2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c2e0:	429a      	cmp	r2, r3
    c2e2:	d808      	bhi.n	c2f6 <vTaskSwitchContext+0x3e>
    c2e4:	4b22      	ldr	r3, [pc, #136]	; (c370 <vTaskSwitchContext+0xb8>)
    c2e6:	681a      	ldr	r2, [r3, #0]
    c2e8:	4b21      	ldr	r3, [pc, #132]	; (c370 <vTaskSwitchContext+0xb8>)
    c2ea:	681b      	ldr	r3, [r3, #0]
    c2ec:	3334      	adds	r3, #52	; 0x34
    c2ee:	0019      	movs	r1, r3
    c2f0:	0010      	movs	r0, r2
    c2f2:	4b20      	ldr	r3, [pc, #128]	; (c374 <vTaskSwitchContext+0xbc>)
    c2f4:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    c2f6:	4b20      	ldr	r3, [pc, #128]	; (c378 <vTaskSwitchContext+0xc0>)
    c2f8:	681b      	ldr	r3, [r3, #0]
    c2fa:	607b      	str	r3, [r7, #4]
    c2fc:	e007      	b.n	c30e <vTaskSwitchContext+0x56>
    c2fe:	687b      	ldr	r3, [r7, #4]
    c300:	2b00      	cmp	r3, #0
    c302:	d101      	bne.n	c308 <vTaskSwitchContext+0x50>
    c304:	b672      	cpsid	i
    c306:	e7fe      	b.n	c306 <vTaskSwitchContext+0x4e>
    c308:	687b      	ldr	r3, [r7, #4]
    c30a:	3b01      	subs	r3, #1
    c30c:	607b      	str	r3, [r7, #4]
    c30e:	491b      	ldr	r1, [pc, #108]	; (c37c <vTaskSwitchContext+0xc4>)
    c310:	687a      	ldr	r2, [r7, #4]
    c312:	0013      	movs	r3, r2
    c314:	009b      	lsls	r3, r3, #2
    c316:	189b      	adds	r3, r3, r2
    c318:	009b      	lsls	r3, r3, #2
    c31a:	585b      	ldr	r3, [r3, r1]
    c31c:	2b00      	cmp	r3, #0
    c31e:	d0ee      	beq.n	c2fe <vTaskSwitchContext+0x46>
    c320:	687a      	ldr	r2, [r7, #4]
    c322:	0013      	movs	r3, r2
    c324:	009b      	lsls	r3, r3, #2
    c326:	189b      	adds	r3, r3, r2
    c328:	009b      	lsls	r3, r3, #2
    c32a:	4a14      	ldr	r2, [pc, #80]	; (c37c <vTaskSwitchContext+0xc4>)
    c32c:	189b      	adds	r3, r3, r2
    c32e:	603b      	str	r3, [r7, #0]
    c330:	683b      	ldr	r3, [r7, #0]
    c332:	685b      	ldr	r3, [r3, #4]
    c334:	685a      	ldr	r2, [r3, #4]
    c336:	683b      	ldr	r3, [r7, #0]
    c338:	605a      	str	r2, [r3, #4]
    c33a:	683b      	ldr	r3, [r7, #0]
    c33c:	685a      	ldr	r2, [r3, #4]
    c33e:	683b      	ldr	r3, [r7, #0]
    c340:	3308      	adds	r3, #8
    c342:	429a      	cmp	r2, r3
    c344:	d104      	bne.n	c350 <vTaskSwitchContext+0x98>
    c346:	683b      	ldr	r3, [r7, #0]
    c348:	685b      	ldr	r3, [r3, #4]
    c34a:	685a      	ldr	r2, [r3, #4]
    c34c:	683b      	ldr	r3, [r7, #0]
    c34e:	605a      	str	r2, [r3, #4]
    c350:	683b      	ldr	r3, [r7, #0]
    c352:	685b      	ldr	r3, [r3, #4]
    c354:	68da      	ldr	r2, [r3, #12]
    c356:	4b06      	ldr	r3, [pc, #24]	; (c370 <vTaskSwitchContext+0xb8>)
    c358:	601a      	str	r2, [r3, #0]
    c35a:	4b07      	ldr	r3, [pc, #28]	; (c378 <vTaskSwitchContext+0xc0>)
    c35c:	687a      	ldr	r2, [r7, #4]
    c35e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    c360:	46c0      	nop			; (mov r8, r8)
    c362:	46bd      	mov	sp, r7
    c364:	b002      	add	sp, #8
    c366:	bd80      	pop	{r7, pc}
    c368:	20003e38 	.word	0x20003e38
    c36c:	20003e24 	.word	0x20003e24
    c370:	20003d38 	.word	0x20003d38
    c374:	0000dc01 	.word	0x0000dc01
    c378:	20003e18 	.word	0x20003e18
    c37c:	20003d3c 	.word	0x20003d3c

0000c380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    c380:	b580      	push	{r7, lr}
    c382:	b082      	sub	sp, #8
    c384:	af00      	add	r7, sp, #0
    c386:	6078      	str	r0, [r7, #4]
    c388:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    c38a:	687b      	ldr	r3, [r7, #4]
    c38c:	2b00      	cmp	r3, #0
    c38e:	d101      	bne.n	c394 <vTaskPlaceOnEventList+0x14>
    c390:	b672      	cpsid	i
    c392:	e7fe      	b.n	c392 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    c394:	4b08      	ldr	r3, [pc, #32]	; (c3b8 <vTaskPlaceOnEventList+0x38>)
    c396:	681b      	ldr	r3, [r3, #0]
    c398:	3318      	adds	r3, #24
    c39a:	001a      	movs	r2, r3
    c39c:	687b      	ldr	r3, [r7, #4]
    c39e:	0011      	movs	r1, r2
    c3a0:	0018      	movs	r0, r3
    c3a2:	4b06      	ldr	r3, [pc, #24]	; (c3bc <vTaskPlaceOnEventList+0x3c>)
    c3a4:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    c3a6:	683b      	ldr	r3, [r7, #0]
    c3a8:	2101      	movs	r1, #1
    c3aa:	0018      	movs	r0, r3
    c3ac:	4b04      	ldr	r3, [pc, #16]	; (c3c0 <vTaskPlaceOnEventList+0x40>)
    c3ae:	4798      	blx	r3
}
    c3b0:	46c0      	nop			; (mov r8, r8)
    c3b2:	46bd      	mov	sp, r7
    c3b4:	b002      	add	sp, #8
    c3b6:	bd80      	pop	{r7, pc}
    c3b8:	20003d38 	.word	0x20003d38
    c3bc:	0000ad31 	.word	0x0000ad31
    c3c0:	0000c94d 	.word	0x0000c94d

0000c3c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    c3c4:	b580      	push	{r7, lr}
    c3c6:	b084      	sub	sp, #16
    c3c8:	af00      	add	r7, sp, #0
    c3ca:	60f8      	str	r0, [r7, #12]
    c3cc:	60b9      	str	r1, [r7, #8]
    c3ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    c3d0:	68fb      	ldr	r3, [r7, #12]
    c3d2:	2b00      	cmp	r3, #0
    c3d4:	d101      	bne.n	c3da <vTaskPlaceOnEventListRestricted+0x16>
    c3d6:	b672      	cpsid	i
    c3d8:	e7fe      	b.n	c3d8 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    c3da:	4b0c      	ldr	r3, [pc, #48]	; (c40c <vTaskPlaceOnEventListRestricted+0x48>)
    c3dc:	681b      	ldr	r3, [r3, #0]
    c3de:	3318      	adds	r3, #24
    c3e0:	001a      	movs	r2, r3
    c3e2:	68fb      	ldr	r3, [r7, #12]
    c3e4:	0011      	movs	r1, r2
    c3e6:	0018      	movs	r0, r3
    c3e8:	4b09      	ldr	r3, [pc, #36]	; (c410 <vTaskPlaceOnEventListRestricted+0x4c>)
    c3ea:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    c3ec:	687b      	ldr	r3, [r7, #4]
    c3ee:	2b00      	cmp	r3, #0
    c3f0:	d002      	beq.n	c3f8 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    c3f2:	2301      	movs	r3, #1
    c3f4:	425b      	negs	r3, r3
    c3f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    c3f8:	687a      	ldr	r2, [r7, #4]
    c3fa:	68bb      	ldr	r3, [r7, #8]
    c3fc:	0011      	movs	r1, r2
    c3fe:	0018      	movs	r0, r3
    c400:	4b04      	ldr	r3, [pc, #16]	; (c414 <vTaskPlaceOnEventListRestricted+0x50>)
    c402:	4798      	blx	r3
	}
    c404:	46c0      	nop			; (mov r8, r8)
    c406:	46bd      	mov	sp, r7
    c408:	b004      	add	sp, #16
    c40a:	bd80      	pop	{r7, pc}
    c40c:	20003d38 	.word	0x20003d38
    c410:	0000aced 	.word	0x0000aced
    c414:	0000c94d 	.word	0x0000c94d

0000c418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    c418:	b580      	push	{r7, lr}
    c41a:	b084      	sub	sp, #16
    c41c:	af00      	add	r7, sp, #0
    c41e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    c420:	687b      	ldr	r3, [r7, #4]
    c422:	68db      	ldr	r3, [r3, #12]
    c424:	68db      	ldr	r3, [r3, #12]
    c426:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    c428:	68bb      	ldr	r3, [r7, #8]
    c42a:	2b00      	cmp	r3, #0
    c42c:	d101      	bne.n	c432 <xTaskRemoveFromEventList+0x1a>
    c42e:	b672      	cpsid	i
    c430:	e7fe      	b.n	c430 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    c432:	68bb      	ldr	r3, [r7, #8]
    c434:	3318      	adds	r3, #24
    c436:	0018      	movs	r0, r3
    c438:	4b1f      	ldr	r3, [pc, #124]	; (c4b8 <xTaskRemoveFromEventList+0xa0>)
    c43a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c43c:	4b1f      	ldr	r3, [pc, #124]	; (c4bc <xTaskRemoveFromEventList+0xa4>)
    c43e:	681b      	ldr	r3, [r3, #0]
    c440:	2b00      	cmp	r3, #0
    c442:	d11d      	bne.n	c480 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    c444:	68bb      	ldr	r3, [r7, #8]
    c446:	3304      	adds	r3, #4
    c448:	0018      	movs	r0, r3
    c44a:	4b1b      	ldr	r3, [pc, #108]	; (c4b8 <xTaskRemoveFromEventList+0xa0>)
    c44c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    c44e:	68bb      	ldr	r3, [r7, #8]
    c450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c452:	4b1b      	ldr	r3, [pc, #108]	; (c4c0 <xTaskRemoveFromEventList+0xa8>)
    c454:	681b      	ldr	r3, [r3, #0]
    c456:	429a      	cmp	r2, r3
    c458:	d903      	bls.n	c462 <xTaskRemoveFromEventList+0x4a>
    c45a:	68bb      	ldr	r3, [r7, #8]
    c45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c45e:	4b18      	ldr	r3, [pc, #96]	; (c4c0 <xTaskRemoveFromEventList+0xa8>)
    c460:	601a      	str	r2, [r3, #0]
    c462:	68bb      	ldr	r3, [r7, #8]
    c464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c466:	0013      	movs	r3, r2
    c468:	009b      	lsls	r3, r3, #2
    c46a:	189b      	adds	r3, r3, r2
    c46c:	009b      	lsls	r3, r3, #2
    c46e:	4a15      	ldr	r2, [pc, #84]	; (c4c4 <xTaskRemoveFromEventList+0xac>)
    c470:	189a      	adds	r2, r3, r2
    c472:	68bb      	ldr	r3, [r7, #8]
    c474:	3304      	adds	r3, #4
    c476:	0019      	movs	r1, r3
    c478:	0010      	movs	r0, r2
    c47a:	4b13      	ldr	r3, [pc, #76]	; (c4c8 <xTaskRemoveFromEventList+0xb0>)
    c47c:	4798      	blx	r3
    c47e:	e007      	b.n	c490 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    c480:	68bb      	ldr	r3, [r7, #8]
    c482:	3318      	adds	r3, #24
    c484:	001a      	movs	r2, r3
    c486:	4b11      	ldr	r3, [pc, #68]	; (c4cc <xTaskRemoveFromEventList+0xb4>)
    c488:	0011      	movs	r1, r2
    c48a:	0018      	movs	r0, r3
    c48c:	4b0e      	ldr	r3, [pc, #56]	; (c4c8 <xTaskRemoveFromEventList+0xb0>)
    c48e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    c490:	68bb      	ldr	r3, [r7, #8]
    c492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c494:	4b0e      	ldr	r3, [pc, #56]	; (c4d0 <xTaskRemoveFromEventList+0xb8>)
    c496:	681b      	ldr	r3, [r3, #0]
    c498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c49a:	429a      	cmp	r2, r3
    c49c:	d905      	bls.n	c4aa <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    c49e:	2301      	movs	r3, #1
    c4a0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    c4a2:	4b0c      	ldr	r3, [pc, #48]	; (c4d4 <xTaskRemoveFromEventList+0xbc>)
    c4a4:	2201      	movs	r2, #1
    c4a6:	601a      	str	r2, [r3, #0]
    c4a8:	e001      	b.n	c4ae <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    c4aa:	2300      	movs	r3, #0
    c4ac:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    c4ae:	68fb      	ldr	r3, [r7, #12]
}
    c4b0:	0018      	movs	r0, r3
    c4b2:	46bd      	mov	sp, r7
    c4b4:	b004      	add	sp, #16
    c4b6:	bd80      	pop	{r7, pc}
    c4b8:	0000ad9d 	.word	0x0000ad9d
    c4bc:	20003e38 	.word	0x20003e38
    c4c0:	20003e18 	.word	0x20003e18
    c4c4:	20003d3c 	.word	0x20003d3c
    c4c8:	0000aced 	.word	0x0000aced
    c4cc:	20003dd0 	.word	0x20003dd0
    c4d0:	20003d38 	.word	0x20003d38
    c4d4:	20003e24 	.word	0x20003e24

0000c4d8 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    c4d8:	b580      	push	{r7, lr}
    c4da:	b082      	sub	sp, #8
    c4dc:	af00      	add	r7, sp, #0
    c4de:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    c4e0:	687b      	ldr	r3, [r7, #4]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d101      	bne.n	c4ea <vTaskSetTimeOutState+0x12>
    c4e6:	b672      	cpsid	i
    c4e8:	e7fe      	b.n	c4e8 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    c4ea:	4b06      	ldr	r3, [pc, #24]	; (c504 <vTaskSetTimeOutState+0x2c>)
    c4ec:	681a      	ldr	r2, [r3, #0]
    c4ee:	687b      	ldr	r3, [r7, #4]
    c4f0:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    c4f2:	4b05      	ldr	r3, [pc, #20]	; (c508 <vTaskSetTimeOutState+0x30>)
    c4f4:	681a      	ldr	r2, [r3, #0]
    c4f6:	687b      	ldr	r3, [r7, #4]
    c4f8:	605a      	str	r2, [r3, #4]
}
    c4fa:	46c0      	nop			; (mov r8, r8)
    c4fc:	46bd      	mov	sp, r7
    c4fe:	b002      	add	sp, #8
    c500:	bd80      	pop	{r7, pc}
    c502:	46c0      	nop			; (mov r8, r8)
    c504:	20003e28 	.word	0x20003e28
    c508:	20003e14 	.word	0x20003e14

0000c50c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    c50c:	b580      	push	{r7, lr}
    c50e:	b084      	sub	sp, #16
    c510:	af00      	add	r7, sp, #0
    c512:	6078      	str	r0, [r7, #4]
    c514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    c516:	687b      	ldr	r3, [r7, #4]
    c518:	2b00      	cmp	r3, #0
    c51a:	d101      	bne.n	c520 <xTaskCheckForTimeOut+0x14>
    c51c:	b672      	cpsid	i
    c51e:	e7fe      	b.n	c51e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    c520:	683b      	ldr	r3, [r7, #0]
    c522:	2b00      	cmp	r3, #0
    c524:	d101      	bne.n	c52a <xTaskCheckForTimeOut+0x1e>
    c526:	b672      	cpsid	i
    c528:	e7fe      	b.n	c528 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    c52a:	4b1d      	ldr	r3, [pc, #116]	; (c5a0 <xTaskCheckForTimeOut+0x94>)
    c52c:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    c52e:	4b1d      	ldr	r3, [pc, #116]	; (c5a4 <xTaskCheckForTimeOut+0x98>)
    c530:	681b      	ldr	r3, [r3, #0]
    c532:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    c534:	683b      	ldr	r3, [r7, #0]
    c536:	681b      	ldr	r3, [r3, #0]
    c538:	3301      	adds	r3, #1
    c53a:	d102      	bne.n	c542 <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    c53c:	2300      	movs	r3, #0
    c53e:	60fb      	str	r3, [r7, #12]
    c540:	e027      	b.n	c592 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    c542:	687b      	ldr	r3, [r7, #4]
    c544:	681a      	ldr	r2, [r3, #0]
    c546:	4b18      	ldr	r3, [pc, #96]	; (c5a8 <xTaskCheckForTimeOut+0x9c>)
    c548:	681b      	ldr	r3, [r3, #0]
    c54a:	429a      	cmp	r2, r3
    c54c:	d007      	beq.n	c55e <xTaskCheckForTimeOut+0x52>
    c54e:	687b      	ldr	r3, [r7, #4]
    c550:	685a      	ldr	r2, [r3, #4]
    c552:	68bb      	ldr	r3, [r7, #8]
    c554:	429a      	cmp	r2, r3
    c556:	d802      	bhi.n	c55e <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    c558:	2301      	movs	r3, #1
    c55a:	60fb      	str	r3, [r7, #12]
    c55c:	e019      	b.n	c592 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    c55e:	687b      	ldr	r3, [r7, #4]
    c560:	685b      	ldr	r3, [r3, #4]
    c562:	68ba      	ldr	r2, [r7, #8]
    c564:	1ad2      	subs	r2, r2, r3
    c566:	683b      	ldr	r3, [r7, #0]
    c568:	681b      	ldr	r3, [r3, #0]
    c56a:	429a      	cmp	r2, r3
    c56c:	d20f      	bcs.n	c58e <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    c56e:	683b      	ldr	r3, [r7, #0]
    c570:	681a      	ldr	r2, [r3, #0]
    c572:	687b      	ldr	r3, [r7, #4]
    c574:	6859      	ldr	r1, [r3, #4]
    c576:	68bb      	ldr	r3, [r7, #8]
    c578:	1acb      	subs	r3, r1, r3
    c57a:	18d2      	adds	r2, r2, r3
    c57c:	683b      	ldr	r3, [r7, #0]
    c57e:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    c580:	687b      	ldr	r3, [r7, #4]
    c582:	0018      	movs	r0, r3
    c584:	4b09      	ldr	r3, [pc, #36]	; (c5ac <xTaskCheckForTimeOut+0xa0>)
    c586:	4798      	blx	r3
			xReturn = pdFALSE;
    c588:	2300      	movs	r3, #0
    c58a:	60fb      	str	r3, [r7, #12]
    c58c:	e001      	b.n	c592 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    c58e:	2301      	movs	r3, #1
    c590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    c592:	4b07      	ldr	r3, [pc, #28]	; (c5b0 <xTaskCheckForTimeOut+0xa4>)
    c594:	4798      	blx	r3

	return xReturn;
    c596:	68fb      	ldr	r3, [r7, #12]
}
    c598:	0018      	movs	r0, r3
    c59a:	46bd      	mov	sp, r7
    c59c:	b004      	add	sp, #16
    c59e:	bd80      	pop	{r7, pc}
    c5a0:	0000af19 	.word	0x0000af19
    c5a4:	20003e14 	.word	0x20003e14
    c5a8:	20003e28 	.word	0x20003e28
    c5ac:	0000c4d9 	.word	0x0000c4d9
    c5b0:	0000af3d 	.word	0x0000af3d

0000c5b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    c5b4:	b580      	push	{r7, lr}
    c5b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    c5b8:	4b02      	ldr	r3, [pc, #8]	; (c5c4 <vTaskMissedYield+0x10>)
    c5ba:	2201      	movs	r2, #1
    c5bc:	601a      	str	r2, [r3, #0]
}
    c5be:	46c0      	nop			; (mov r8, r8)
    c5c0:	46bd      	mov	sp, r7
    c5c2:	bd80      	pop	{r7, pc}
    c5c4:	20003e24 	.word	0x20003e24

0000c5c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    c5c8:	b580      	push	{r7, lr}
    c5ca:	b082      	sub	sp, #8
    c5cc:	af00      	add	r7, sp, #0
    c5ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    c5d0:	4b02      	ldr	r3, [pc, #8]	; (c5dc <prvIdleTask+0x14>)
    c5d2:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    c5d4:	4b02      	ldr	r3, [pc, #8]	; (c5e0 <prvIdleTask+0x18>)
    c5d6:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    c5d8:	e7fa      	b.n	c5d0 <prvIdleTask+0x8>
    c5da:	46c0      	nop			; (mov r8, r8)
    c5dc:	0000c671 	.word	0x0000c671
    c5e0:	0000dbe5 	.word	0x0000dbe5

0000c5e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    c5e4:	b580      	push	{r7, lr}
    c5e6:	b082      	sub	sp, #8
    c5e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    c5ea:	2300      	movs	r3, #0
    c5ec:	607b      	str	r3, [r7, #4]
    c5ee:	e00c      	b.n	c60a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    c5f0:	687a      	ldr	r2, [r7, #4]
    c5f2:	0013      	movs	r3, r2
    c5f4:	009b      	lsls	r3, r3, #2
    c5f6:	189b      	adds	r3, r3, r2
    c5f8:	009b      	lsls	r3, r3, #2
    c5fa:	4a14      	ldr	r2, [pc, #80]	; (c64c <prvInitialiseTaskLists+0x68>)
    c5fc:	189b      	adds	r3, r3, r2
    c5fe:	0018      	movs	r0, r3
    c600:	4b13      	ldr	r3, [pc, #76]	; (c650 <prvInitialiseTaskLists+0x6c>)
    c602:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    c604:	687b      	ldr	r3, [r7, #4]
    c606:	3301      	adds	r3, #1
    c608:	607b      	str	r3, [r7, #4]
    c60a:	687b      	ldr	r3, [r7, #4]
    c60c:	2b04      	cmp	r3, #4
    c60e:	d9ef      	bls.n	c5f0 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    c610:	4b10      	ldr	r3, [pc, #64]	; (c654 <prvInitialiseTaskLists+0x70>)
    c612:	0018      	movs	r0, r3
    c614:	4b0e      	ldr	r3, [pc, #56]	; (c650 <prvInitialiseTaskLists+0x6c>)
    c616:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    c618:	4b0f      	ldr	r3, [pc, #60]	; (c658 <prvInitialiseTaskLists+0x74>)
    c61a:	0018      	movs	r0, r3
    c61c:	4b0c      	ldr	r3, [pc, #48]	; (c650 <prvInitialiseTaskLists+0x6c>)
    c61e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    c620:	4b0e      	ldr	r3, [pc, #56]	; (c65c <prvInitialiseTaskLists+0x78>)
    c622:	0018      	movs	r0, r3
    c624:	4b0a      	ldr	r3, [pc, #40]	; (c650 <prvInitialiseTaskLists+0x6c>)
    c626:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    c628:	4b0d      	ldr	r3, [pc, #52]	; (c660 <prvInitialiseTaskLists+0x7c>)
    c62a:	0018      	movs	r0, r3
    c62c:	4b08      	ldr	r3, [pc, #32]	; (c650 <prvInitialiseTaskLists+0x6c>)
    c62e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    c630:	4b0c      	ldr	r3, [pc, #48]	; (c664 <prvInitialiseTaskLists+0x80>)
    c632:	0018      	movs	r0, r3
    c634:	4b06      	ldr	r3, [pc, #24]	; (c650 <prvInitialiseTaskLists+0x6c>)
    c636:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    c638:	4b0b      	ldr	r3, [pc, #44]	; (c668 <prvInitialiseTaskLists+0x84>)
    c63a:	4a06      	ldr	r2, [pc, #24]	; (c654 <prvInitialiseTaskLists+0x70>)
    c63c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    c63e:	4b0b      	ldr	r3, [pc, #44]	; (c66c <prvInitialiseTaskLists+0x88>)
    c640:	4a05      	ldr	r2, [pc, #20]	; (c658 <prvInitialiseTaskLists+0x74>)
    c642:	601a      	str	r2, [r3, #0]
}
    c644:	46c0      	nop			; (mov r8, r8)
    c646:	46bd      	mov	sp, r7
    c648:	b002      	add	sp, #8
    c64a:	bd80      	pop	{r7, pc}
    c64c:	20003d3c 	.word	0x20003d3c
    c650:	0000ac99 	.word	0x0000ac99
    c654:	20003da0 	.word	0x20003da0
    c658:	20003db4 	.word	0x20003db4
    c65c:	20003dd0 	.word	0x20003dd0
    c660:	20003de4 	.word	0x20003de4
    c664:	20003dfc 	.word	0x20003dfc
    c668:	20003dc8 	.word	0x20003dc8
    c66c:	20003dcc 	.word	0x20003dcc

0000c670 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    c670:	b580      	push	{r7, lr}
    c672:	b082      	sub	sp, #8
    c674:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    c676:	e027      	b.n	c6c8 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    c678:	4b17      	ldr	r3, [pc, #92]	; (c6d8 <prvCheckTasksWaitingTermination+0x68>)
    c67a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    c67c:	4b17      	ldr	r3, [pc, #92]	; (c6dc <prvCheckTasksWaitingTermination+0x6c>)
    c67e:	681b      	ldr	r3, [r3, #0]
    c680:	425a      	negs	r2, r3
    c682:	4153      	adcs	r3, r2
    c684:	b2db      	uxtb	r3, r3
    c686:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    c688:	4b15      	ldr	r3, [pc, #84]	; (c6e0 <prvCheckTasksWaitingTermination+0x70>)
    c68a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    c68c:	687b      	ldr	r3, [r7, #4]
    c68e:	2b00      	cmp	r3, #0
    c690:	d11a      	bne.n	c6c8 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    c692:	4b14      	ldr	r3, [pc, #80]	; (c6e4 <prvCheckTasksWaitingTermination+0x74>)
    c694:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    c696:	4b11      	ldr	r3, [pc, #68]	; (c6dc <prvCheckTasksWaitingTermination+0x6c>)
    c698:	68db      	ldr	r3, [r3, #12]
    c69a:	68db      	ldr	r3, [r3, #12]
    c69c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c69e:	683b      	ldr	r3, [r7, #0]
    c6a0:	3304      	adds	r3, #4
    c6a2:	0018      	movs	r0, r3
    c6a4:	4b10      	ldr	r3, [pc, #64]	; (c6e8 <prvCheckTasksWaitingTermination+0x78>)
    c6a6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    c6a8:	4b10      	ldr	r3, [pc, #64]	; (c6ec <prvCheckTasksWaitingTermination+0x7c>)
    c6aa:	681b      	ldr	r3, [r3, #0]
    c6ac:	1e5a      	subs	r2, r3, #1
    c6ae:	4b0f      	ldr	r3, [pc, #60]	; (c6ec <prvCheckTasksWaitingTermination+0x7c>)
    c6b0:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
    c6b2:	4b0f      	ldr	r3, [pc, #60]	; (c6f0 <prvCheckTasksWaitingTermination+0x80>)
    c6b4:	681b      	ldr	r3, [r3, #0]
    c6b6:	1e5a      	subs	r2, r3, #1
    c6b8:	4b0d      	ldr	r3, [pc, #52]	; (c6f0 <prvCheckTasksWaitingTermination+0x80>)
    c6ba:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    c6bc:	4b0d      	ldr	r3, [pc, #52]	; (c6f4 <prvCheckTasksWaitingTermination+0x84>)
    c6be:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    c6c0:	683b      	ldr	r3, [r7, #0]
    c6c2:	0018      	movs	r0, r3
    c6c4:	4b0c      	ldr	r3, [pc, #48]	; (c6f8 <prvCheckTasksWaitingTermination+0x88>)
    c6c6:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    c6c8:	4b09      	ldr	r3, [pc, #36]	; (c6f0 <prvCheckTasksWaitingTermination+0x80>)
    c6ca:	681b      	ldr	r3, [r3, #0]
    c6cc:	2b00      	cmp	r3, #0
    c6ce:	d1d3      	bne.n	c678 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    c6d0:	46c0      	nop			; (mov r8, r8)
    c6d2:	46bd      	mov	sp, r7
    c6d4:	b002      	add	sp, #8
    c6d6:	bd80      	pop	{r7, pc}
    c6d8:	0000bff9 	.word	0x0000bff9
    c6dc:	20003de4 	.word	0x20003de4
    c6e0:	0000c011 	.word	0x0000c011
    c6e4:	0000af19 	.word	0x0000af19
    c6e8:	0000ad9d 	.word	0x0000ad9d
    c6ec:	20003e10 	.word	0x20003e10
    c6f0:	20003df8 	.word	0x20003df8
    c6f4:	0000af3d 	.word	0x0000af3d
    c6f8:	0000c6fd 	.word	0x0000c6fd

0000c6fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    c6fc:	b580      	push	{r7, lr}
    c6fe:	b082      	sub	sp, #8
    c700:	af00      	add	r7, sp, #0
    c702:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    c704:	687b      	ldr	r3, [r7, #4]
    c706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c708:	0018      	movs	r0, r3
    c70a:	4b05      	ldr	r3, [pc, #20]	; (c720 <prvDeleteTCB+0x24>)
    c70c:	4798      	blx	r3
			vPortFree( pxTCB );
    c70e:	687b      	ldr	r3, [r7, #4]
    c710:	0018      	movs	r0, r3
    c712:	4b03      	ldr	r3, [pc, #12]	; (c720 <prvDeleteTCB+0x24>)
    c714:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    c716:	46c0      	nop			; (mov r8, r8)
    c718:	46bd      	mov	sp, r7
    c71a:	b002      	add	sp, #8
    c71c:	bd80      	pop	{r7, pc}
    c71e:	46c0      	nop			; (mov r8, r8)
    c720:	0000b0cd 	.word	0x0000b0cd

0000c724 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    c724:	b580      	push	{r7, lr}
    c726:	b082      	sub	sp, #8
    c728:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    c72a:	4b0e      	ldr	r3, [pc, #56]	; (c764 <prvResetNextTaskUnblockTime+0x40>)
    c72c:	681b      	ldr	r3, [r3, #0]
    c72e:	681b      	ldr	r3, [r3, #0]
    c730:	2b00      	cmp	r3, #0
    c732:	d101      	bne.n	c738 <prvResetNextTaskUnblockTime+0x14>
    c734:	2301      	movs	r3, #1
    c736:	e000      	b.n	c73a <prvResetNextTaskUnblockTime+0x16>
    c738:	2300      	movs	r3, #0
    c73a:	2b00      	cmp	r3, #0
    c73c:	d004      	beq.n	c748 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    c73e:	4b0a      	ldr	r3, [pc, #40]	; (c768 <prvResetNextTaskUnblockTime+0x44>)
    c740:	2201      	movs	r2, #1
    c742:	4252      	negs	r2, r2
    c744:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    c746:	e008      	b.n	c75a <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    c748:	4b06      	ldr	r3, [pc, #24]	; (c764 <prvResetNextTaskUnblockTime+0x40>)
    c74a:	681b      	ldr	r3, [r3, #0]
    c74c:	68db      	ldr	r3, [r3, #12]
    c74e:	68db      	ldr	r3, [r3, #12]
    c750:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    c752:	687b      	ldr	r3, [r7, #4]
    c754:	685a      	ldr	r2, [r3, #4]
    c756:	4b04      	ldr	r3, [pc, #16]	; (c768 <prvResetNextTaskUnblockTime+0x44>)
    c758:	601a      	str	r2, [r3, #0]
	}
}
    c75a:	46c0      	nop			; (mov r8, r8)
    c75c:	46bd      	mov	sp, r7
    c75e:	b002      	add	sp, #8
    c760:	bd80      	pop	{r7, pc}
    c762:	46c0      	nop			; (mov r8, r8)
    c764:	20003dc8 	.word	0x20003dc8
    c768:	20003e30 	.word	0x20003e30

0000c76c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    c76c:	b580      	push	{r7, lr}
    c76e:	b082      	sub	sp, #8
    c770:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    c772:	4b0a      	ldr	r3, [pc, #40]	; (c79c <xTaskGetSchedulerState+0x30>)
    c774:	681b      	ldr	r3, [r3, #0]
    c776:	2b00      	cmp	r3, #0
    c778:	d102      	bne.n	c780 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    c77a:	2301      	movs	r3, #1
    c77c:	607b      	str	r3, [r7, #4]
    c77e:	e008      	b.n	c792 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c780:	4b07      	ldr	r3, [pc, #28]	; (c7a0 <xTaskGetSchedulerState+0x34>)
    c782:	681b      	ldr	r3, [r3, #0]
    c784:	2b00      	cmp	r3, #0
    c786:	d102      	bne.n	c78e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    c788:	2302      	movs	r3, #2
    c78a:	607b      	str	r3, [r7, #4]
    c78c:	e001      	b.n	c792 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    c78e:	2300      	movs	r3, #0
    c790:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    c792:	687b      	ldr	r3, [r7, #4]
	}
    c794:	0018      	movs	r0, r3
    c796:	46bd      	mov	sp, r7
    c798:	b002      	add	sp, #8
    c79a:	bd80      	pop	{r7, pc}
    c79c:	20003e1c 	.word	0x20003e1c
    c7a0:	20003e38 	.word	0x20003e38

0000c7a4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    c7a4:	b580      	push	{r7, lr}
    c7a6:	b084      	sub	sp, #16
    c7a8:	af00      	add	r7, sp, #0
    c7aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    c7ac:	687b      	ldr	r3, [r7, #4]
    c7ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    c7b0:	687b      	ldr	r3, [r7, #4]
    c7b2:	2b00      	cmp	r3, #0
    c7b4:	d04a      	beq.n	c84c <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    c7b6:	68fb      	ldr	r3, [r7, #12]
    c7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c7ba:	4b26      	ldr	r3, [pc, #152]	; (c854 <vTaskPriorityInherit+0xb0>)
    c7bc:	681b      	ldr	r3, [r3, #0]
    c7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c7c0:	429a      	cmp	r2, r3
    c7c2:	d243      	bcs.n	c84c <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    c7c4:	68fb      	ldr	r3, [r7, #12]
    c7c6:	699b      	ldr	r3, [r3, #24]
    c7c8:	2b00      	cmp	r3, #0
    c7ca:	db06      	blt.n	c7da <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c7cc:	4b21      	ldr	r3, [pc, #132]	; (c854 <vTaskPriorityInherit+0xb0>)
    c7ce:	681b      	ldr	r3, [r3, #0]
    c7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c7d2:	2205      	movs	r2, #5
    c7d4:	1ad2      	subs	r2, r2, r3
    c7d6:	68fb      	ldr	r3, [r7, #12]
    c7d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    c7da:	68fb      	ldr	r3, [r7, #12]
    c7dc:	6959      	ldr	r1, [r3, #20]
    c7de:	68fb      	ldr	r3, [r7, #12]
    c7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c7e2:	0013      	movs	r3, r2
    c7e4:	009b      	lsls	r3, r3, #2
    c7e6:	189b      	adds	r3, r3, r2
    c7e8:	009b      	lsls	r3, r3, #2
    c7ea:	4a1b      	ldr	r2, [pc, #108]	; (c858 <vTaskPriorityInherit+0xb4>)
    c7ec:	189b      	adds	r3, r3, r2
    c7ee:	4299      	cmp	r1, r3
    c7f0:	d101      	bne.n	c7f6 <vTaskPriorityInherit+0x52>
    c7f2:	2301      	movs	r3, #1
    c7f4:	e000      	b.n	c7f8 <vTaskPriorityInherit+0x54>
    c7f6:	2300      	movs	r3, #0
    c7f8:	2b00      	cmp	r3, #0
    c7fa:	d022      	beq.n	c842 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c7fc:	68fb      	ldr	r3, [r7, #12]
    c7fe:	3304      	adds	r3, #4
    c800:	0018      	movs	r0, r3
    c802:	4b16      	ldr	r3, [pc, #88]	; (c85c <vTaskPriorityInherit+0xb8>)
    c804:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    c806:	4b13      	ldr	r3, [pc, #76]	; (c854 <vTaskPriorityInherit+0xb0>)
    c808:	681b      	ldr	r3, [r3, #0]
    c80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c80c:	68fb      	ldr	r3, [r7, #12]
    c80e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    c810:	68fb      	ldr	r3, [r7, #12]
    c812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c814:	4b12      	ldr	r3, [pc, #72]	; (c860 <vTaskPriorityInherit+0xbc>)
    c816:	681b      	ldr	r3, [r3, #0]
    c818:	429a      	cmp	r2, r3
    c81a:	d903      	bls.n	c824 <vTaskPriorityInherit+0x80>
    c81c:	68fb      	ldr	r3, [r7, #12]
    c81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c820:	4b0f      	ldr	r3, [pc, #60]	; (c860 <vTaskPriorityInherit+0xbc>)
    c822:	601a      	str	r2, [r3, #0]
    c824:	68fb      	ldr	r3, [r7, #12]
    c826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c828:	0013      	movs	r3, r2
    c82a:	009b      	lsls	r3, r3, #2
    c82c:	189b      	adds	r3, r3, r2
    c82e:	009b      	lsls	r3, r3, #2
    c830:	4a09      	ldr	r2, [pc, #36]	; (c858 <vTaskPriorityInherit+0xb4>)
    c832:	189a      	adds	r2, r3, r2
    c834:	68fb      	ldr	r3, [r7, #12]
    c836:	3304      	adds	r3, #4
    c838:	0019      	movs	r1, r3
    c83a:	0010      	movs	r0, r2
    c83c:	4b09      	ldr	r3, [pc, #36]	; (c864 <vTaskPriorityInherit+0xc0>)
    c83e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    c840:	e004      	b.n	c84c <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    c842:	4b04      	ldr	r3, [pc, #16]	; (c854 <vTaskPriorityInherit+0xb0>)
    c844:	681b      	ldr	r3, [r3, #0]
    c846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c848:	68fb      	ldr	r3, [r7, #12]
    c84a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    c84c:	46c0      	nop			; (mov r8, r8)
    c84e:	46bd      	mov	sp, r7
    c850:	b004      	add	sp, #16
    c852:	bd80      	pop	{r7, pc}
    c854:	20003d38 	.word	0x20003d38
    c858:	20003d3c 	.word	0x20003d3c
    c85c:	0000ad9d 	.word	0x0000ad9d
    c860:	20003e18 	.word	0x20003e18
    c864:	0000aced 	.word	0x0000aced

0000c868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    c868:	b580      	push	{r7, lr}
    c86a:	b084      	sub	sp, #16
    c86c:	af00      	add	r7, sp, #0
    c86e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    c870:	687b      	ldr	r3, [r7, #4]
    c872:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    c874:	2300      	movs	r3, #0
    c876:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    c878:	687b      	ldr	r3, [r7, #4]
    c87a:	2b00      	cmp	r3, #0
    c87c:	d044      	beq.n	c908 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    c87e:	4b25      	ldr	r3, [pc, #148]	; (c914 <xTaskPriorityDisinherit+0xac>)
    c880:	681b      	ldr	r3, [r3, #0]
    c882:	68ba      	ldr	r2, [r7, #8]
    c884:	429a      	cmp	r2, r3
    c886:	d001      	beq.n	c88c <xTaskPriorityDisinherit+0x24>
    c888:	b672      	cpsid	i
    c88a:	e7fe      	b.n	c88a <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
    c88c:	68bb      	ldr	r3, [r7, #8]
    c88e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c890:	2b00      	cmp	r3, #0
    c892:	d101      	bne.n	c898 <xTaskPriorityDisinherit+0x30>
    c894:	b672      	cpsid	i
    c896:	e7fe      	b.n	c896 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    c898:	68bb      	ldr	r3, [r7, #8]
    c89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c89c:	1e5a      	subs	r2, r3, #1
    c89e:	68bb      	ldr	r3, [r7, #8]
    c8a0:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    c8a2:	68bb      	ldr	r3, [r7, #8]
    c8a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c8a6:	68bb      	ldr	r3, [r7, #8]
    c8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c8aa:	429a      	cmp	r2, r3
    c8ac:	d02c      	beq.n	c908 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    c8ae:	68bb      	ldr	r3, [r7, #8]
    c8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c8b2:	2b00      	cmp	r3, #0
    c8b4:	d128      	bne.n	c908 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c8b6:	68bb      	ldr	r3, [r7, #8]
    c8b8:	3304      	adds	r3, #4
    c8ba:	0018      	movs	r0, r3
    c8bc:	4b16      	ldr	r3, [pc, #88]	; (c918 <xTaskPriorityDisinherit+0xb0>)
    c8be:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    c8c0:	68bb      	ldr	r3, [r7, #8]
    c8c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    c8c4:	68bb      	ldr	r3, [r7, #8]
    c8c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c8c8:	68bb      	ldr	r3, [r7, #8]
    c8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c8cc:	2205      	movs	r2, #5
    c8ce:	1ad2      	subs	r2, r2, r3
    c8d0:	68bb      	ldr	r3, [r7, #8]
    c8d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    c8d4:	68bb      	ldr	r3, [r7, #8]
    c8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c8d8:	4b10      	ldr	r3, [pc, #64]	; (c91c <xTaskPriorityDisinherit+0xb4>)
    c8da:	681b      	ldr	r3, [r3, #0]
    c8dc:	429a      	cmp	r2, r3
    c8de:	d903      	bls.n	c8e8 <xTaskPriorityDisinherit+0x80>
    c8e0:	68bb      	ldr	r3, [r7, #8]
    c8e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c8e4:	4b0d      	ldr	r3, [pc, #52]	; (c91c <xTaskPriorityDisinherit+0xb4>)
    c8e6:	601a      	str	r2, [r3, #0]
    c8e8:	68bb      	ldr	r3, [r7, #8]
    c8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c8ec:	0013      	movs	r3, r2
    c8ee:	009b      	lsls	r3, r3, #2
    c8f0:	189b      	adds	r3, r3, r2
    c8f2:	009b      	lsls	r3, r3, #2
    c8f4:	4a0a      	ldr	r2, [pc, #40]	; (c920 <xTaskPriorityDisinherit+0xb8>)
    c8f6:	189a      	adds	r2, r3, r2
    c8f8:	68bb      	ldr	r3, [r7, #8]
    c8fa:	3304      	adds	r3, #4
    c8fc:	0019      	movs	r1, r3
    c8fe:	0010      	movs	r0, r2
    c900:	4b08      	ldr	r3, [pc, #32]	; (c924 <xTaskPriorityDisinherit+0xbc>)
    c902:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    c904:	2301      	movs	r3, #1
    c906:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    c908:	68fb      	ldr	r3, [r7, #12]
	}
    c90a:	0018      	movs	r0, r3
    c90c:	46bd      	mov	sp, r7
    c90e:	b004      	add	sp, #16
    c910:	bd80      	pop	{r7, pc}
    c912:	46c0      	nop			; (mov r8, r8)
    c914:	20003d38 	.word	0x20003d38
    c918:	0000ad9d 	.word	0x0000ad9d
    c91c:	20003e18 	.word	0x20003e18
    c920:	20003d3c 	.word	0x20003d3c
    c924:	0000aced 	.word	0x0000aced

0000c928 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    c928:	b580      	push	{r7, lr}
    c92a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    c92c:	4b06      	ldr	r3, [pc, #24]	; (c948 <pvTaskIncrementMutexHeldCount+0x20>)
    c92e:	681b      	ldr	r3, [r3, #0]
    c930:	2b00      	cmp	r3, #0
    c932:	d004      	beq.n	c93e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    c934:	4b04      	ldr	r3, [pc, #16]	; (c948 <pvTaskIncrementMutexHeldCount+0x20>)
    c936:	681b      	ldr	r3, [r3, #0]
    c938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    c93a:	3201      	adds	r2, #1
    c93c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    c93e:	4b02      	ldr	r3, [pc, #8]	; (c948 <pvTaskIncrementMutexHeldCount+0x20>)
    c940:	681b      	ldr	r3, [r3, #0]
	}
    c942:	0018      	movs	r0, r3
    c944:	46bd      	mov	sp, r7
    c946:	bd80      	pop	{r7, pc}
    c948:	20003d38 	.word	0x20003d38

0000c94c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    c94c:	b580      	push	{r7, lr}
    c94e:	b084      	sub	sp, #16
    c950:	af00      	add	r7, sp, #0
    c952:	6078      	str	r0, [r7, #4]
    c954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    c956:	4b21      	ldr	r3, [pc, #132]	; (c9dc <prvAddCurrentTaskToDelayedList+0x90>)
    c958:	681b      	ldr	r3, [r3, #0]
    c95a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    c95c:	4b20      	ldr	r3, [pc, #128]	; (c9e0 <prvAddCurrentTaskToDelayedList+0x94>)
    c95e:	681b      	ldr	r3, [r3, #0]
    c960:	3304      	adds	r3, #4
    c962:	0018      	movs	r0, r3
    c964:	4b1f      	ldr	r3, [pc, #124]	; (c9e4 <prvAddCurrentTaskToDelayedList+0x98>)
    c966:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    c968:	687b      	ldr	r3, [r7, #4]
    c96a:	3301      	adds	r3, #1
    c96c:	d10b      	bne.n	c986 <prvAddCurrentTaskToDelayedList+0x3a>
    c96e:	683b      	ldr	r3, [r7, #0]
    c970:	2b00      	cmp	r3, #0
    c972:	d008      	beq.n	c986 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c974:	4b1a      	ldr	r3, [pc, #104]	; (c9e0 <prvAddCurrentTaskToDelayedList+0x94>)
    c976:	681b      	ldr	r3, [r3, #0]
    c978:	1d1a      	adds	r2, r3, #4
    c97a:	4b1b      	ldr	r3, [pc, #108]	; (c9e8 <prvAddCurrentTaskToDelayedList+0x9c>)
    c97c:	0011      	movs	r1, r2
    c97e:	0018      	movs	r0, r3
    c980:	4b1a      	ldr	r3, [pc, #104]	; (c9ec <prvAddCurrentTaskToDelayedList+0xa0>)
    c982:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c984:	e026      	b.n	c9d4 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    c986:	68fa      	ldr	r2, [r7, #12]
    c988:	687b      	ldr	r3, [r7, #4]
    c98a:	18d3      	adds	r3, r2, r3
    c98c:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    c98e:	4b14      	ldr	r3, [pc, #80]	; (c9e0 <prvAddCurrentTaskToDelayedList+0x94>)
    c990:	681b      	ldr	r3, [r3, #0]
    c992:	68ba      	ldr	r2, [r7, #8]
    c994:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    c996:	68ba      	ldr	r2, [r7, #8]
    c998:	68fb      	ldr	r3, [r7, #12]
    c99a:	429a      	cmp	r2, r3
    c99c:	d209      	bcs.n	c9b2 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c99e:	4b14      	ldr	r3, [pc, #80]	; (c9f0 <prvAddCurrentTaskToDelayedList+0xa4>)
    c9a0:	681a      	ldr	r2, [r3, #0]
    c9a2:	4b0f      	ldr	r3, [pc, #60]	; (c9e0 <prvAddCurrentTaskToDelayedList+0x94>)
    c9a4:	681b      	ldr	r3, [r3, #0]
    c9a6:	3304      	adds	r3, #4
    c9a8:	0019      	movs	r1, r3
    c9aa:	0010      	movs	r0, r2
    c9ac:	4b11      	ldr	r3, [pc, #68]	; (c9f4 <prvAddCurrentTaskToDelayedList+0xa8>)
    c9ae:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c9b0:	e010      	b.n	c9d4 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    c9b2:	4b11      	ldr	r3, [pc, #68]	; (c9f8 <prvAddCurrentTaskToDelayedList+0xac>)
    c9b4:	681a      	ldr	r2, [r3, #0]
    c9b6:	4b0a      	ldr	r3, [pc, #40]	; (c9e0 <prvAddCurrentTaskToDelayedList+0x94>)
    c9b8:	681b      	ldr	r3, [r3, #0]
    c9ba:	3304      	adds	r3, #4
    c9bc:	0019      	movs	r1, r3
    c9be:	0010      	movs	r0, r2
    c9c0:	4b0c      	ldr	r3, [pc, #48]	; (c9f4 <prvAddCurrentTaskToDelayedList+0xa8>)
    c9c2:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    c9c4:	4b0d      	ldr	r3, [pc, #52]	; (c9fc <prvAddCurrentTaskToDelayedList+0xb0>)
    c9c6:	681b      	ldr	r3, [r3, #0]
    c9c8:	68ba      	ldr	r2, [r7, #8]
    c9ca:	429a      	cmp	r2, r3
    c9cc:	d202      	bcs.n	c9d4 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    c9ce:	4b0b      	ldr	r3, [pc, #44]	; (c9fc <prvAddCurrentTaskToDelayedList+0xb0>)
    c9d0:	68ba      	ldr	r2, [r7, #8]
    c9d2:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    c9d4:	46c0      	nop			; (mov r8, r8)
    c9d6:	46bd      	mov	sp, r7
    c9d8:	b004      	add	sp, #16
    c9da:	bd80      	pop	{r7, pc}
    c9dc:	20003e14 	.word	0x20003e14
    c9e0:	20003d38 	.word	0x20003d38
    c9e4:	0000ad9d 	.word	0x0000ad9d
    c9e8:	20003dfc 	.word	0x20003dfc
    c9ec:	0000aced 	.word	0x0000aced
    c9f0:	20003dcc 	.word	0x20003dcc
    c9f4:	0000ad31 	.word	0x0000ad31
    c9f8:	20003dc8 	.word	0x20003dc8
    c9fc:	20003e30 	.word	0x20003e30

0000ca00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    ca00:	b590      	push	{r4, r7, lr}
    ca02:	b085      	sub	sp, #20
    ca04:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    ca06:	2300      	movs	r3, #0
    ca08:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    ca0a:	4b0e      	ldr	r3, [pc, #56]	; (ca44 <xTimerCreateTimerTask+0x44>)
    ca0c:	4798      	blx	r3

	if( xTimerQueue != NULL )
    ca0e:	4b0e      	ldr	r3, [pc, #56]	; (ca48 <xTimerCreateTimerTask+0x48>)
    ca10:	681b      	ldr	r3, [r3, #0]
    ca12:	2b00      	cmp	r3, #0
    ca14:	d00b      	beq.n	ca2e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    ca16:	490d      	ldr	r1, [pc, #52]	; (ca4c <xTimerCreateTimerTask+0x4c>)
    ca18:	480d      	ldr	r0, [pc, #52]	; (ca50 <xTimerCreateTimerTask+0x50>)
    ca1a:	4b0e      	ldr	r3, [pc, #56]	; (ca54 <xTimerCreateTimerTask+0x54>)
    ca1c:	9301      	str	r3, [sp, #4]
    ca1e:	2302      	movs	r3, #2
    ca20:	9300      	str	r3, [sp, #0]
    ca22:	2300      	movs	r3, #0
    ca24:	2250      	movs	r2, #80	; 0x50
    ca26:	4c0c      	ldr	r4, [pc, #48]	; (ca58 <xTimerCreateTimerTask+0x58>)
    ca28:	47a0      	blx	r4
    ca2a:	0003      	movs	r3, r0
    ca2c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    ca2e:	687b      	ldr	r3, [r7, #4]
    ca30:	2b00      	cmp	r3, #0
    ca32:	d101      	bne.n	ca38 <xTimerCreateTimerTask+0x38>
    ca34:	b672      	cpsid	i
    ca36:	e7fe      	b.n	ca36 <xTimerCreateTimerTask+0x36>
	return xReturn;
    ca38:	687b      	ldr	r3, [r7, #4]
}
    ca3a:	0018      	movs	r0, r3
    ca3c:	46bd      	mov	sp, r7
    ca3e:	b003      	add	sp, #12
    ca40:	bd90      	pop	{r4, r7, pc}
    ca42:	46c0      	nop			; (mov r8, r8)
    ca44:	0000cf41 	.word	0x0000cf41
    ca48:	20003e6c 	.word	0x20003e6c
    ca4c:	00011fac 	.word	0x00011fac
    ca50:	0000cb81 	.word	0x0000cb81
    ca54:	20003e70 	.word	0x20003e70
    ca58:	0000bbd5 	.word	0x0000bbd5

0000ca5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    ca5c:	b590      	push	{r4, r7, lr}
    ca5e:	b089      	sub	sp, #36	; 0x24
    ca60:	af00      	add	r7, sp, #0
    ca62:	60f8      	str	r0, [r7, #12]
    ca64:	60b9      	str	r1, [r7, #8]
    ca66:	607a      	str	r2, [r7, #4]
    ca68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    ca6a:	2300      	movs	r3, #0
    ca6c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    ca6e:	68fb      	ldr	r3, [r7, #12]
    ca70:	2b00      	cmp	r3, #0
    ca72:	d101      	bne.n	ca78 <xTimerGenericCommand+0x1c>
    ca74:	b672      	cpsid	i
    ca76:	e7fe      	b.n	ca76 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    ca78:	4b1e      	ldr	r3, [pc, #120]	; (caf4 <xTimerGenericCommand+0x98>)
    ca7a:	681b      	ldr	r3, [r3, #0]
    ca7c:	2b00      	cmp	r3, #0
    ca7e:	d033      	beq.n	cae8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    ca80:	2310      	movs	r3, #16
    ca82:	18fb      	adds	r3, r7, r3
    ca84:	68ba      	ldr	r2, [r7, #8]
    ca86:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    ca88:	2310      	movs	r3, #16
    ca8a:	18fb      	adds	r3, r7, r3
    ca8c:	687a      	ldr	r2, [r7, #4]
    ca8e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    ca90:	2310      	movs	r3, #16
    ca92:	18fb      	adds	r3, r7, r3
    ca94:	68fa      	ldr	r2, [r7, #12]
    ca96:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    ca98:	68bb      	ldr	r3, [r7, #8]
    ca9a:	2b05      	cmp	r3, #5
    ca9c:	dc1a      	bgt.n	cad4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    ca9e:	4b16      	ldr	r3, [pc, #88]	; (caf8 <xTimerGenericCommand+0x9c>)
    caa0:	4798      	blx	r3
    caa2:	1e03      	subs	r3, r0, #0
    caa4:	2b02      	cmp	r3, #2
    caa6:	d10a      	bne.n	cabe <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    caa8:	4b12      	ldr	r3, [pc, #72]	; (caf4 <xTimerGenericCommand+0x98>)
    caaa:	6818      	ldr	r0, [r3, #0]
    caac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    caae:	2310      	movs	r3, #16
    cab0:	18f9      	adds	r1, r7, r3
    cab2:	2300      	movs	r3, #0
    cab4:	4c11      	ldr	r4, [pc, #68]	; (cafc <xTimerGenericCommand+0xa0>)
    cab6:	47a0      	blx	r4
    cab8:	0003      	movs	r3, r0
    caba:	61fb      	str	r3, [r7, #28]
    cabc:	e014      	b.n	cae8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    cabe:	4b0d      	ldr	r3, [pc, #52]	; (caf4 <xTimerGenericCommand+0x98>)
    cac0:	6818      	ldr	r0, [r3, #0]
    cac2:	2310      	movs	r3, #16
    cac4:	18f9      	adds	r1, r7, r3
    cac6:	2300      	movs	r3, #0
    cac8:	2200      	movs	r2, #0
    caca:	4c0c      	ldr	r4, [pc, #48]	; (cafc <xTimerGenericCommand+0xa0>)
    cacc:	47a0      	blx	r4
    cace:	0003      	movs	r3, r0
    cad0:	61fb      	str	r3, [r7, #28]
    cad2:	e009      	b.n	cae8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    cad4:	4b07      	ldr	r3, [pc, #28]	; (caf4 <xTimerGenericCommand+0x98>)
    cad6:	6818      	ldr	r0, [r3, #0]
    cad8:	683a      	ldr	r2, [r7, #0]
    cada:	2310      	movs	r3, #16
    cadc:	18f9      	adds	r1, r7, r3
    cade:	2300      	movs	r3, #0
    cae0:	4c07      	ldr	r4, [pc, #28]	; (cb00 <xTimerGenericCommand+0xa4>)
    cae2:	47a0      	blx	r4
    cae4:	0003      	movs	r3, r0
    cae6:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    cae8:	69fb      	ldr	r3, [r7, #28]
}
    caea:	0018      	movs	r0, r3
    caec:	46bd      	mov	sp, r7
    caee:	b009      	add	sp, #36	; 0x24
    caf0:	bd90      	pop	{r4, r7, pc}
    caf2:	46c0      	nop			; (mov r8, r8)
    caf4:	20003e6c 	.word	0x20003e6c
    caf8:	0000c76d 	.word	0x0000c76d
    cafc:	0000b2d9 	.word	0x0000b2d9
    cb00:	0000b4b9 	.word	0x0000b4b9

0000cb04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    cb04:	b590      	push	{r4, r7, lr}
    cb06:	b087      	sub	sp, #28
    cb08:	af02      	add	r7, sp, #8
    cb0a:	6078      	str	r0, [r7, #4]
    cb0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    cb0e:	4b18      	ldr	r3, [pc, #96]	; (cb70 <prvProcessExpiredTimer+0x6c>)
    cb10:	681b      	ldr	r3, [r3, #0]
    cb12:	68db      	ldr	r3, [r3, #12]
    cb14:	68db      	ldr	r3, [r3, #12]
    cb16:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    cb18:	68fb      	ldr	r3, [r7, #12]
    cb1a:	3304      	adds	r3, #4
    cb1c:	0018      	movs	r0, r3
    cb1e:	4b15      	ldr	r3, [pc, #84]	; (cb74 <prvProcessExpiredTimer+0x70>)
    cb20:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    cb22:	68fb      	ldr	r3, [r7, #12]
    cb24:	69db      	ldr	r3, [r3, #28]
    cb26:	2b01      	cmp	r3, #1
    cb28:	d119      	bne.n	cb5e <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    cb2a:	68fb      	ldr	r3, [r7, #12]
    cb2c:	699a      	ldr	r2, [r3, #24]
    cb2e:	687b      	ldr	r3, [r7, #4]
    cb30:	18d1      	adds	r1, r2, r3
    cb32:	687b      	ldr	r3, [r7, #4]
    cb34:	683a      	ldr	r2, [r7, #0]
    cb36:	68f8      	ldr	r0, [r7, #12]
    cb38:	4c0f      	ldr	r4, [pc, #60]	; (cb78 <prvProcessExpiredTimer+0x74>)
    cb3a:	47a0      	blx	r4
    cb3c:	1e03      	subs	r3, r0, #0
    cb3e:	d00e      	beq.n	cb5e <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    cb40:	687a      	ldr	r2, [r7, #4]
    cb42:	68f8      	ldr	r0, [r7, #12]
    cb44:	2300      	movs	r3, #0
    cb46:	9300      	str	r3, [sp, #0]
    cb48:	2300      	movs	r3, #0
    cb4a:	2100      	movs	r1, #0
    cb4c:	4c0b      	ldr	r4, [pc, #44]	; (cb7c <prvProcessExpiredTimer+0x78>)
    cb4e:	47a0      	blx	r4
    cb50:	0003      	movs	r3, r0
    cb52:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    cb54:	68bb      	ldr	r3, [r7, #8]
    cb56:	2b00      	cmp	r3, #0
    cb58:	d101      	bne.n	cb5e <prvProcessExpiredTimer+0x5a>
    cb5a:	b672      	cpsid	i
    cb5c:	e7fe      	b.n	cb5c <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    cb5e:	68fb      	ldr	r3, [r7, #12]
    cb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cb62:	68fa      	ldr	r2, [r7, #12]
    cb64:	0010      	movs	r0, r2
    cb66:	4798      	blx	r3
}
    cb68:	46c0      	nop			; (mov r8, r8)
    cb6a:	46bd      	mov	sp, r7
    cb6c:	b005      	add	sp, #20
    cb6e:	bd90      	pop	{r4, r7, pc}
    cb70:	20003e64 	.word	0x20003e64
    cb74:	0000ad9d 	.word	0x0000ad9d
    cb78:	0000cce1 	.word	0x0000cce1
    cb7c:	0000ca5d 	.word	0x0000ca5d

0000cb80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    cb80:	b580      	push	{r7, lr}
    cb82:	b084      	sub	sp, #16
    cb84:	af00      	add	r7, sp, #0
    cb86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    cb88:	2308      	movs	r3, #8
    cb8a:	18fb      	adds	r3, r7, r3
    cb8c:	0018      	movs	r0, r3
    cb8e:	4b06      	ldr	r3, [pc, #24]	; (cba8 <prvTimerTask+0x28>)
    cb90:	4798      	blx	r3
    cb92:	0003      	movs	r3, r0
    cb94:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    cb96:	68ba      	ldr	r2, [r7, #8]
    cb98:	68fb      	ldr	r3, [r7, #12]
    cb9a:	0011      	movs	r1, r2
    cb9c:	0018      	movs	r0, r3
    cb9e:	4b03      	ldr	r3, [pc, #12]	; (cbac <prvTimerTask+0x2c>)
    cba0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    cba2:	4b03      	ldr	r3, [pc, #12]	; (cbb0 <prvTimerTask+0x30>)
    cba4:	4798      	blx	r3
	}
    cba6:	e7ef      	b.n	cb88 <prvTimerTask+0x8>
    cba8:	0000cc59 	.word	0x0000cc59
    cbac:	0000cbb5 	.word	0x0000cbb5
    cbb0:	0000cd69 	.word	0x0000cd69

0000cbb4 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    cbb4:	b580      	push	{r7, lr}
    cbb6:	b084      	sub	sp, #16
    cbb8:	af00      	add	r7, sp, #0
    cbba:	6078      	str	r0, [r7, #4]
    cbbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    cbbe:	4b1e      	ldr	r3, [pc, #120]	; (cc38 <prvProcessTimerOrBlockTask+0x84>)
    cbc0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    cbc2:	2308      	movs	r3, #8
    cbc4:	18fb      	adds	r3, r7, r3
    cbc6:	0018      	movs	r0, r3
    cbc8:	4b1c      	ldr	r3, [pc, #112]	; (cc3c <prvProcessTimerOrBlockTask+0x88>)
    cbca:	4798      	blx	r3
    cbcc:	0003      	movs	r3, r0
    cbce:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    cbd0:	68bb      	ldr	r3, [r7, #8]
    cbd2:	2b00      	cmp	r3, #0
    cbd4:	d129      	bne.n	cc2a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    cbd6:	683b      	ldr	r3, [r7, #0]
    cbd8:	2b00      	cmp	r3, #0
    cbda:	d10c      	bne.n	cbf6 <prvProcessTimerOrBlockTask+0x42>
    cbdc:	687a      	ldr	r2, [r7, #4]
    cbde:	68fb      	ldr	r3, [r7, #12]
    cbe0:	429a      	cmp	r2, r3
    cbe2:	d808      	bhi.n	cbf6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    cbe4:	4b16      	ldr	r3, [pc, #88]	; (cc40 <prvProcessTimerOrBlockTask+0x8c>)
    cbe6:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    cbe8:	68fa      	ldr	r2, [r7, #12]
    cbea:	687b      	ldr	r3, [r7, #4]
    cbec:	0011      	movs	r1, r2
    cbee:	0018      	movs	r0, r3
    cbf0:	4b14      	ldr	r3, [pc, #80]	; (cc44 <prvProcessTimerOrBlockTask+0x90>)
    cbf2:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    cbf4:	e01b      	b.n	cc2e <prvProcessTimerOrBlockTask+0x7a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
    cbf6:	683b      	ldr	r3, [r7, #0]
    cbf8:	2b00      	cmp	r3, #0
    cbfa:	d006      	beq.n	cc0a <prvProcessTimerOrBlockTask+0x56>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    cbfc:	4b12      	ldr	r3, [pc, #72]	; (cc48 <prvProcessTimerOrBlockTask+0x94>)
    cbfe:	681b      	ldr	r3, [r3, #0]
    cc00:	681b      	ldr	r3, [r3, #0]
    cc02:	425a      	negs	r2, r3
    cc04:	4153      	adcs	r3, r2
    cc06:	b2db      	uxtb	r3, r3
    cc08:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    cc0a:	4b10      	ldr	r3, [pc, #64]	; (cc4c <prvProcessTimerOrBlockTask+0x98>)
    cc0c:	6818      	ldr	r0, [r3, #0]
    cc0e:	687a      	ldr	r2, [r7, #4]
    cc10:	68fb      	ldr	r3, [r7, #12]
    cc12:	1ad3      	subs	r3, r2, r3
    cc14:	683a      	ldr	r2, [r7, #0]
    cc16:	0019      	movs	r1, r3
    cc18:	4b0d      	ldr	r3, [pc, #52]	; (cc50 <prvProcessTimerOrBlockTask+0x9c>)
    cc1a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    cc1c:	4b08      	ldr	r3, [pc, #32]	; (cc40 <prvProcessTimerOrBlockTask+0x8c>)
    cc1e:	4798      	blx	r3
    cc20:	1e03      	subs	r3, r0, #0
    cc22:	d104      	bne.n	cc2e <prvProcessTimerOrBlockTask+0x7a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    cc24:	4b0b      	ldr	r3, [pc, #44]	; (cc54 <prvProcessTimerOrBlockTask+0xa0>)
    cc26:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    cc28:	e001      	b.n	cc2e <prvProcessTimerOrBlockTask+0x7a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    cc2a:	4b05      	ldr	r3, [pc, #20]	; (cc40 <prvProcessTimerOrBlockTask+0x8c>)
    cc2c:	4798      	blx	r3
		}
	}
}
    cc2e:	46c0      	nop			; (mov r8, r8)
    cc30:	46bd      	mov	sp, r7
    cc32:	b004      	add	sp, #16
    cc34:	bd80      	pop	{r7, pc}
    cc36:	46c0      	nop			; (mov r8, r8)
    cc38:	0000bff9 	.word	0x0000bff9
    cc3c:	0000cc99 	.word	0x0000cc99
    cc40:	0000c011 	.word	0x0000c011
    cc44:	0000cb05 	.word	0x0000cb05
    cc48:	20003e68 	.word	0x20003e68
    cc4c:	20003e6c 	.word	0x20003e6c
    cc50:	0000bab9 	.word	0x0000bab9
    cc54:	0000aef9 	.word	0x0000aef9

0000cc58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    cc58:	b580      	push	{r7, lr}
    cc5a:	b084      	sub	sp, #16
    cc5c:	af00      	add	r7, sp, #0
    cc5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    cc60:	4b0c      	ldr	r3, [pc, #48]	; (cc94 <prvGetNextExpireTime+0x3c>)
    cc62:	681b      	ldr	r3, [r3, #0]
    cc64:	681b      	ldr	r3, [r3, #0]
    cc66:	425a      	negs	r2, r3
    cc68:	4153      	adcs	r3, r2
    cc6a:	b2db      	uxtb	r3, r3
    cc6c:	001a      	movs	r2, r3
    cc6e:	687b      	ldr	r3, [r7, #4]
    cc70:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    cc72:	687b      	ldr	r3, [r7, #4]
    cc74:	681b      	ldr	r3, [r3, #0]
    cc76:	2b00      	cmp	r3, #0
    cc78:	d105      	bne.n	cc86 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    cc7a:	4b06      	ldr	r3, [pc, #24]	; (cc94 <prvGetNextExpireTime+0x3c>)
    cc7c:	681b      	ldr	r3, [r3, #0]
    cc7e:	68db      	ldr	r3, [r3, #12]
    cc80:	681b      	ldr	r3, [r3, #0]
    cc82:	60fb      	str	r3, [r7, #12]
    cc84:	e001      	b.n	cc8a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    cc86:	2300      	movs	r3, #0
    cc88:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    cc8a:	68fb      	ldr	r3, [r7, #12]
}
    cc8c:	0018      	movs	r0, r3
    cc8e:	46bd      	mov	sp, r7
    cc90:	b004      	add	sp, #16
    cc92:	bd80      	pop	{r7, pc}
    cc94:	20003e64 	.word	0x20003e64

0000cc98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    cc98:	b580      	push	{r7, lr}
    cc9a:	b084      	sub	sp, #16
    cc9c:	af00      	add	r7, sp, #0
    cc9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    cca0:	4b0c      	ldr	r3, [pc, #48]	; (ccd4 <prvSampleTimeNow+0x3c>)
    cca2:	4798      	blx	r3
    cca4:	0003      	movs	r3, r0
    cca6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    cca8:	4b0b      	ldr	r3, [pc, #44]	; (ccd8 <prvSampleTimeNow+0x40>)
    ccaa:	681b      	ldr	r3, [r3, #0]
    ccac:	68fa      	ldr	r2, [r7, #12]
    ccae:	429a      	cmp	r2, r3
    ccb0:	d205      	bcs.n	ccbe <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    ccb2:	4b0a      	ldr	r3, [pc, #40]	; (ccdc <prvSampleTimeNow+0x44>)
    ccb4:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    ccb6:	687b      	ldr	r3, [r7, #4]
    ccb8:	2201      	movs	r2, #1
    ccba:	601a      	str	r2, [r3, #0]
    ccbc:	e002      	b.n	ccc4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    ccbe:	687b      	ldr	r3, [r7, #4]
    ccc0:	2200      	movs	r2, #0
    ccc2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    ccc4:	4b04      	ldr	r3, [pc, #16]	; (ccd8 <prvSampleTimeNow+0x40>)
    ccc6:	68fa      	ldr	r2, [r7, #12]
    ccc8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    ccca:	68fb      	ldr	r3, [r7, #12]
}
    cccc:	0018      	movs	r0, r3
    ccce:	46bd      	mov	sp, r7
    ccd0:	b004      	add	sp, #16
    ccd2:	bd80      	pop	{r7, pc}
    ccd4:	0000c145 	.word	0x0000c145
    ccd8:	20003e74 	.word	0x20003e74
    ccdc:	0000ce81 	.word	0x0000ce81

0000cce0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    cce0:	b580      	push	{r7, lr}
    cce2:	b086      	sub	sp, #24
    cce4:	af00      	add	r7, sp, #0
    cce6:	60f8      	str	r0, [r7, #12]
    cce8:	60b9      	str	r1, [r7, #8]
    ccea:	607a      	str	r2, [r7, #4]
    ccec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    ccee:	2300      	movs	r3, #0
    ccf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    ccf2:	68fb      	ldr	r3, [r7, #12]
    ccf4:	68ba      	ldr	r2, [r7, #8]
    ccf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    ccf8:	68fb      	ldr	r3, [r7, #12]
    ccfa:	68fa      	ldr	r2, [r7, #12]
    ccfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    ccfe:	68ba      	ldr	r2, [r7, #8]
    cd00:	687b      	ldr	r3, [r7, #4]
    cd02:	429a      	cmp	r2, r3
    cd04:	d812      	bhi.n	cd2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    cd06:	687a      	ldr	r2, [r7, #4]
    cd08:	683b      	ldr	r3, [r7, #0]
    cd0a:	1ad2      	subs	r2, r2, r3
    cd0c:	68fb      	ldr	r3, [r7, #12]
    cd0e:	699b      	ldr	r3, [r3, #24]
    cd10:	429a      	cmp	r2, r3
    cd12:	d302      	bcc.n	cd1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    cd14:	2301      	movs	r3, #1
    cd16:	617b      	str	r3, [r7, #20]
    cd18:	e01b      	b.n	cd52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    cd1a:	4b10      	ldr	r3, [pc, #64]	; (cd5c <prvInsertTimerInActiveList+0x7c>)
    cd1c:	681a      	ldr	r2, [r3, #0]
    cd1e:	68fb      	ldr	r3, [r7, #12]
    cd20:	3304      	adds	r3, #4
    cd22:	0019      	movs	r1, r3
    cd24:	0010      	movs	r0, r2
    cd26:	4b0e      	ldr	r3, [pc, #56]	; (cd60 <prvInsertTimerInActiveList+0x80>)
    cd28:	4798      	blx	r3
    cd2a:	e012      	b.n	cd52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    cd2c:	687a      	ldr	r2, [r7, #4]
    cd2e:	683b      	ldr	r3, [r7, #0]
    cd30:	429a      	cmp	r2, r3
    cd32:	d206      	bcs.n	cd42 <prvInsertTimerInActiveList+0x62>
    cd34:	68ba      	ldr	r2, [r7, #8]
    cd36:	683b      	ldr	r3, [r7, #0]
    cd38:	429a      	cmp	r2, r3
    cd3a:	d302      	bcc.n	cd42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    cd3c:	2301      	movs	r3, #1
    cd3e:	617b      	str	r3, [r7, #20]
    cd40:	e007      	b.n	cd52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    cd42:	4b08      	ldr	r3, [pc, #32]	; (cd64 <prvInsertTimerInActiveList+0x84>)
    cd44:	681a      	ldr	r2, [r3, #0]
    cd46:	68fb      	ldr	r3, [r7, #12]
    cd48:	3304      	adds	r3, #4
    cd4a:	0019      	movs	r1, r3
    cd4c:	0010      	movs	r0, r2
    cd4e:	4b04      	ldr	r3, [pc, #16]	; (cd60 <prvInsertTimerInActiveList+0x80>)
    cd50:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    cd52:	697b      	ldr	r3, [r7, #20]
}
    cd54:	0018      	movs	r0, r3
    cd56:	46bd      	mov	sp, r7
    cd58:	b006      	add	sp, #24
    cd5a:	bd80      	pop	{r7, pc}
    cd5c:	20003e68 	.word	0x20003e68
    cd60:	0000ad31 	.word	0x0000ad31
    cd64:	20003e64 	.word	0x20003e64

0000cd68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    cd68:	b590      	push	{r4, r7, lr}
    cd6a:	b08b      	sub	sp, #44	; 0x2c
    cd6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    cd6e:	e068      	b.n	ce42 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    cd70:	2308      	movs	r3, #8
    cd72:	18fb      	adds	r3, r7, r3
    cd74:	681b      	ldr	r3, [r3, #0]
    cd76:	2b00      	cmp	r3, #0
    cd78:	db63      	blt.n	ce42 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    cd7a:	2308      	movs	r3, #8
    cd7c:	18fb      	adds	r3, r7, r3
    cd7e:	689b      	ldr	r3, [r3, #8]
    cd80:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    cd82:	69fb      	ldr	r3, [r7, #28]
    cd84:	695b      	ldr	r3, [r3, #20]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d004      	beq.n	cd94 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    cd8a:	69fb      	ldr	r3, [r7, #28]
    cd8c:	3304      	adds	r3, #4
    cd8e:	0018      	movs	r0, r3
    cd90:	4b33      	ldr	r3, [pc, #204]	; (ce60 <prvProcessReceivedCommands+0xf8>)
    cd92:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    cd94:	1d3b      	adds	r3, r7, #4
    cd96:	0018      	movs	r0, r3
    cd98:	4b32      	ldr	r3, [pc, #200]	; (ce64 <prvProcessReceivedCommands+0xfc>)
    cd9a:	4798      	blx	r3
    cd9c:	0003      	movs	r3, r0
    cd9e:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    cda0:	2308      	movs	r3, #8
    cda2:	18fb      	adds	r3, r7, r3
    cda4:	681b      	ldr	r3, [r3, #0]
    cda6:	2b09      	cmp	r3, #9
    cda8:	d84a      	bhi.n	ce40 <prvProcessReceivedCommands+0xd8>
    cdaa:	009a      	lsls	r2, r3, #2
    cdac:	4b2e      	ldr	r3, [pc, #184]	; (ce68 <prvProcessReceivedCommands+0x100>)
    cdae:	18d3      	adds	r3, r2, r3
    cdb0:	681b      	ldr	r3, [r3, #0]
    cdb2:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    cdb4:	2308      	movs	r3, #8
    cdb6:	18fb      	adds	r3, r7, r3
    cdb8:	685a      	ldr	r2, [r3, #4]
    cdba:	69fb      	ldr	r3, [r7, #28]
    cdbc:	699b      	ldr	r3, [r3, #24]
    cdbe:	18d1      	adds	r1, r2, r3
    cdc0:	2308      	movs	r3, #8
    cdc2:	18fb      	adds	r3, r7, r3
    cdc4:	685b      	ldr	r3, [r3, #4]
    cdc6:	69ba      	ldr	r2, [r7, #24]
    cdc8:	69f8      	ldr	r0, [r7, #28]
    cdca:	4c28      	ldr	r4, [pc, #160]	; (ce6c <prvProcessReceivedCommands+0x104>)
    cdcc:	47a0      	blx	r4
    cdce:	1e03      	subs	r3, r0, #0
    cdd0:	d037      	beq.n	ce42 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    cdd2:	69fb      	ldr	r3, [r7, #28]
    cdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cdd6:	69fa      	ldr	r2, [r7, #28]
    cdd8:	0010      	movs	r0, r2
    cdda:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    cddc:	69fb      	ldr	r3, [r7, #28]
    cdde:	69db      	ldr	r3, [r3, #28]
    cde0:	2b01      	cmp	r3, #1
    cde2:	d12e      	bne.n	ce42 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    cde4:	2308      	movs	r3, #8
    cde6:	18fb      	adds	r3, r7, r3
    cde8:	685a      	ldr	r2, [r3, #4]
    cdea:	69fb      	ldr	r3, [r7, #28]
    cdec:	699b      	ldr	r3, [r3, #24]
    cdee:	18d2      	adds	r2, r2, r3
    cdf0:	69f8      	ldr	r0, [r7, #28]
    cdf2:	2300      	movs	r3, #0
    cdf4:	9300      	str	r3, [sp, #0]
    cdf6:	2300      	movs	r3, #0
    cdf8:	2100      	movs	r1, #0
    cdfa:	4c1d      	ldr	r4, [pc, #116]	; (ce70 <prvProcessReceivedCommands+0x108>)
    cdfc:	47a0      	blx	r4
    cdfe:	0003      	movs	r3, r0
    ce00:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    ce02:	697b      	ldr	r3, [r7, #20]
    ce04:	2b00      	cmp	r3, #0
    ce06:	d11c      	bne.n	ce42 <prvProcessReceivedCommands+0xda>
    ce08:	b672      	cpsid	i
    ce0a:	e7fe      	b.n	ce0a <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    ce0c:	2308      	movs	r3, #8
    ce0e:	18fb      	adds	r3, r7, r3
    ce10:	685a      	ldr	r2, [r3, #4]
    ce12:	69fb      	ldr	r3, [r7, #28]
    ce14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    ce16:	69fb      	ldr	r3, [r7, #28]
    ce18:	699b      	ldr	r3, [r3, #24]
    ce1a:	2b00      	cmp	r3, #0
    ce1c:	d101      	bne.n	ce22 <prvProcessReceivedCommands+0xba>
    ce1e:	b672      	cpsid	i
    ce20:	e7fe      	b.n	ce20 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    ce22:	69fb      	ldr	r3, [r7, #28]
    ce24:	699a      	ldr	r2, [r3, #24]
    ce26:	69bb      	ldr	r3, [r7, #24]
    ce28:	18d1      	adds	r1, r2, r3
    ce2a:	69bb      	ldr	r3, [r7, #24]
    ce2c:	69ba      	ldr	r2, [r7, #24]
    ce2e:	69f8      	ldr	r0, [r7, #28]
    ce30:	4c0e      	ldr	r4, [pc, #56]	; (ce6c <prvProcessReceivedCommands+0x104>)
    ce32:	47a0      	blx	r4
					break;
    ce34:	e005      	b.n	ce42 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    ce36:	69fb      	ldr	r3, [r7, #28]
    ce38:	0018      	movs	r0, r3
    ce3a:	4b0e      	ldr	r3, [pc, #56]	; (ce74 <prvProcessReceivedCommands+0x10c>)
    ce3c:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    ce3e:	e000      	b.n	ce42 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    ce40:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    ce42:	4b0d      	ldr	r3, [pc, #52]	; (ce78 <prvProcessReceivedCommands+0x110>)
    ce44:	6818      	ldr	r0, [r3, #0]
    ce46:	2308      	movs	r3, #8
    ce48:	18f9      	adds	r1, r7, r3
    ce4a:	2300      	movs	r3, #0
    ce4c:	2200      	movs	r2, #0
    ce4e:	4c0b      	ldr	r4, [pc, #44]	; (ce7c <prvProcessReceivedCommands+0x114>)
    ce50:	47a0      	blx	r4
    ce52:	1e03      	subs	r3, r0, #0
    ce54:	d18c      	bne.n	cd70 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    ce56:	46c0      	nop			; (mov r8, r8)
    ce58:	46bd      	mov	sp, r7
    ce5a:	b009      	add	sp, #36	; 0x24
    ce5c:	bd90      	pop	{r4, r7, pc}
    ce5e:	46c0      	nop			; (mov r8, r8)
    ce60:	0000ad9d 	.word	0x0000ad9d
    ce64:	0000cc99 	.word	0x0000cc99
    ce68:	00011fbc 	.word	0x00011fbc
    ce6c:	0000cce1 	.word	0x0000cce1
    ce70:	0000ca5d 	.word	0x0000ca5d
    ce74:	0000b0cd 	.word	0x0000b0cd
    ce78:	20003e6c 	.word	0x20003e6c
    ce7c:	0000b5d9 	.word	0x0000b5d9

0000ce80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    ce80:	b590      	push	{r4, r7, lr}
    ce82:	b089      	sub	sp, #36	; 0x24
    ce84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    ce86:	e03e      	b.n	cf06 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    ce88:	4b28      	ldr	r3, [pc, #160]	; (cf2c <prvSwitchTimerLists+0xac>)
    ce8a:	681b      	ldr	r3, [r3, #0]
    ce8c:	68db      	ldr	r3, [r3, #12]
    ce8e:	681b      	ldr	r3, [r3, #0]
    ce90:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    ce92:	4b26      	ldr	r3, [pc, #152]	; (cf2c <prvSwitchTimerLists+0xac>)
    ce94:	681b      	ldr	r3, [r3, #0]
    ce96:	68db      	ldr	r3, [r3, #12]
    ce98:	68db      	ldr	r3, [r3, #12]
    ce9a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    ce9c:	693b      	ldr	r3, [r7, #16]
    ce9e:	3304      	adds	r3, #4
    cea0:	0018      	movs	r0, r3
    cea2:	4b23      	ldr	r3, [pc, #140]	; (cf30 <prvSwitchTimerLists+0xb0>)
    cea4:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    cea6:	693b      	ldr	r3, [r7, #16]
    cea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ceaa:	693a      	ldr	r2, [r7, #16]
    ceac:	0010      	movs	r0, r2
    ceae:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    ceb0:	693b      	ldr	r3, [r7, #16]
    ceb2:	69db      	ldr	r3, [r3, #28]
    ceb4:	2b01      	cmp	r3, #1
    ceb6:	d126      	bne.n	cf06 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    ceb8:	693b      	ldr	r3, [r7, #16]
    ceba:	699a      	ldr	r2, [r3, #24]
    cebc:	697b      	ldr	r3, [r7, #20]
    cebe:	18d3      	adds	r3, r2, r3
    cec0:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    cec2:	68fa      	ldr	r2, [r7, #12]
    cec4:	697b      	ldr	r3, [r7, #20]
    cec6:	429a      	cmp	r2, r3
    cec8:	d90e      	bls.n	cee8 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    ceca:	693b      	ldr	r3, [r7, #16]
    cecc:	68fa      	ldr	r2, [r7, #12]
    cece:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    ced0:	693b      	ldr	r3, [r7, #16]
    ced2:	693a      	ldr	r2, [r7, #16]
    ced4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    ced6:	4b15      	ldr	r3, [pc, #84]	; (cf2c <prvSwitchTimerLists+0xac>)
    ced8:	681a      	ldr	r2, [r3, #0]
    ceda:	693b      	ldr	r3, [r7, #16]
    cedc:	3304      	adds	r3, #4
    cede:	0019      	movs	r1, r3
    cee0:	0010      	movs	r0, r2
    cee2:	4b14      	ldr	r3, [pc, #80]	; (cf34 <prvSwitchTimerLists+0xb4>)
    cee4:	4798      	blx	r3
    cee6:	e00e      	b.n	cf06 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    cee8:	697a      	ldr	r2, [r7, #20]
    ceea:	6938      	ldr	r0, [r7, #16]
    ceec:	2300      	movs	r3, #0
    ceee:	9300      	str	r3, [sp, #0]
    cef0:	2300      	movs	r3, #0
    cef2:	2100      	movs	r1, #0
    cef4:	4c10      	ldr	r4, [pc, #64]	; (cf38 <prvSwitchTimerLists+0xb8>)
    cef6:	47a0      	blx	r4
    cef8:	0003      	movs	r3, r0
    cefa:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    cefc:	68bb      	ldr	r3, [r7, #8]
    cefe:	2b00      	cmp	r3, #0
    cf00:	d101      	bne.n	cf06 <prvSwitchTimerLists+0x86>
    cf02:	b672      	cpsid	i
    cf04:	e7fe      	b.n	cf04 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    cf06:	4b09      	ldr	r3, [pc, #36]	; (cf2c <prvSwitchTimerLists+0xac>)
    cf08:	681b      	ldr	r3, [r3, #0]
    cf0a:	681b      	ldr	r3, [r3, #0]
    cf0c:	2b00      	cmp	r3, #0
    cf0e:	d1bb      	bne.n	ce88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    cf10:	4b06      	ldr	r3, [pc, #24]	; (cf2c <prvSwitchTimerLists+0xac>)
    cf12:	681b      	ldr	r3, [r3, #0]
    cf14:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    cf16:	4b09      	ldr	r3, [pc, #36]	; (cf3c <prvSwitchTimerLists+0xbc>)
    cf18:	681a      	ldr	r2, [r3, #0]
    cf1a:	4b04      	ldr	r3, [pc, #16]	; (cf2c <prvSwitchTimerLists+0xac>)
    cf1c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    cf1e:	4b07      	ldr	r3, [pc, #28]	; (cf3c <prvSwitchTimerLists+0xbc>)
    cf20:	687a      	ldr	r2, [r7, #4]
    cf22:	601a      	str	r2, [r3, #0]
}
    cf24:	46c0      	nop			; (mov r8, r8)
    cf26:	46bd      	mov	sp, r7
    cf28:	b007      	add	sp, #28
    cf2a:	bd90      	pop	{r4, r7, pc}
    cf2c:	20003e64 	.word	0x20003e64
    cf30:	0000ad9d 	.word	0x0000ad9d
    cf34:	0000ad31 	.word	0x0000ad31
    cf38:	0000ca5d 	.word	0x0000ca5d
    cf3c:	20003e68 	.word	0x20003e68

0000cf40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    cf40:	b580      	push	{r7, lr}
    cf42:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    cf44:	4b15      	ldr	r3, [pc, #84]	; (cf9c <prvCheckForValidListAndQueue+0x5c>)
    cf46:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    cf48:	4b15      	ldr	r3, [pc, #84]	; (cfa0 <prvCheckForValidListAndQueue+0x60>)
    cf4a:	681b      	ldr	r3, [r3, #0]
    cf4c:	2b00      	cmp	r3, #0
    cf4e:	d120      	bne.n	cf92 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
    cf50:	4b14      	ldr	r3, [pc, #80]	; (cfa4 <prvCheckForValidListAndQueue+0x64>)
    cf52:	0018      	movs	r0, r3
    cf54:	4b14      	ldr	r3, [pc, #80]	; (cfa8 <prvCheckForValidListAndQueue+0x68>)
    cf56:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    cf58:	4b14      	ldr	r3, [pc, #80]	; (cfac <prvCheckForValidListAndQueue+0x6c>)
    cf5a:	0018      	movs	r0, r3
    cf5c:	4b12      	ldr	r3, [pc, #72]	; (cfa8 <prvCheckForValidListAndQueue+0x68>)
    cf5e:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    cf60:	4b13      	ldr	r3, [pc, #76]	; (cfb0 <prvCheckForValidListAndQueue+0x70>)
    cf62:	4a10      	ldr	r2, [pc, #64]	; (cfa4 <prvCheckForValidListAndQueue+0x64>)
    cf64:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    cf66:	4b13      	ldr	r3, [pc, #76]	; (cfb4 <prvCheckForValidListAndQueue+0x74>)
    cf68:	4a10      	ldr	r2, [pc, #64]	; (cfac <prvCheckForValidListAndQueue+0x6c>)
    cf6a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    cf6c:	2200      	movs	r2, #0
    cf6e:	210c      	movs	r1, #12
    cf70:	2002      	movs	r0, #2
    cf72:	4b11      	ldr	r3, [pc, #68]	; (cfb8 <prvCheckForValidListAndQueue+0x78>)
    cf74:	4798      	blx	r3
    cf76:	0002      	movs	r2, r0
    cf78:	4b09      	ldr	r3, [pc, #36]	; (cfa0 <prvCheckForValidListAndQueue+0x60>)
    cf7a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    cf7c:	4b08      	ldr	r3, [pc, #32]	; (cfa0 <prvCheckForValidListAndQueue+0x60>)
    cf7e:	681b      	ldr	r3, [r3, #0]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d006      	beq.n	cf92 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    cf84:	4b06      	ldr	r3, [pc, #24]	; (cfa0 <prvCheckForValidListAndQueue+0x60>)
    cf86:	681b      	ldr	r3, [r3, #0]
    cf88:	4a0c      	ldr	r2, [pc, #48]	; (cfbc <prvCheckForValidListAndQueue+0x7c>)
    cf8a:	0011      	movs	r1, r2
    cf8c:	0018      	movs	r0, r3
    cf8e:	4b0c      	ldr	r3, [pc, #48]	; (cfc0 <prvCheckForValidListAndQueue+0x80>)
    cf90:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    cf92:	4b0c      	ldr	r3, [pc, #48]	; (cfc4 <prvCheckForValidListAndQueue+0x84>)
    cf94:	4798      	blx	r3
}
    cf96:	46c0      	nop			; (mov r8, r8)
    cf98:	46bd      	mov	sp, r7
    cf9a:	bd80      	pop	{r7, pc}
    cf9c:	0000af19 	.word	0x0000af19
    cfa0:	20003e6c 	.word	0x20003e6c
    cfa4:	20003e3c 	.word	0x20003e3c
    cfa8:	0000ac99 	.word	0x0000ac99
    cfac:	20003e50 	.word	0x20003e50
    cfb0:	20003e64 	.word	0x20003e64
    cfb4:	20003e68 	.word	0x20003e68
    cfb8:	0000b1a5 	.word	0x0000b1a5
    cfbc:	00011fb4 	.word	0x00011fb4
    cfc0:	0000ba69 	.word	0x0000ba69
    cfc4:	0000af3d 	.word	0x0000af3d

0000cfc8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    cfc8:	b580      	push	{r7, lr}
    cfca:	b084      	sub	sp, #16
    cfcc:	af00      	add	r7, sp, #0
    cfce:	0002      	movs	r2, r0
    cfd0:	1dfb      	adds	r3, r7, #7
    cfd2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    cfd4:	230f      	movs	r3, #15
    cfd6:	18fb      	adds	r3, r7, r3
    cfd8:	1dfa      	adds	r2, r7, #7
    cfda:	7812      	ldrb	r2, [r2, #0]
    cfdc:	09d2      	lsrs	r2, r2, #7
    cfde:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    cfe0:	230e      	movs	r3, #14
    cfe2:	18fb      	adds	r3, r7, r3
    cfe4:	1dfa      	adds	r2, r7, #7
    cfe6:	7812      	ldrb	r2, [r2, #0]
    cfe8:	0952      	lsrs	r2, r2, #5
    cfea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    cfec:	4b0d      	ldr	r3, [pc, #52]	; (d024 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    cfee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    cff0:	230f      	movs	r3, #15
    cff2:	18fb      	adds	r3, r7, r3
    cff4:	781b      	ldrb	r3, [r3, #0]
    cff6:	2b00      	cmp	r3, #0
    cff8:	d10f      	bne.n	d01a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    cffa:	230f      	movs	r3, #15
    cffc:	18fb      	adds	r3, r7, r3
    cffe:	781b      	ldrb	r3, [r3, #0]
    d000:	009b      	lsls	r3, r3, #2
    d002:	2210      	movs	r2, #16
    d004:	4694      	mov	ip, r2
    d006:	44bc      	add	ip, r7
    d008:	4463      	add	r3, ip
    d00a:	3b08      	subs	r3, #8
    d00c:	681a      	ldr	r2, [r3, #0]
    d00e:	230e      	movs	r3, #14
    d010:	18fb      	adds	r3, r7, r3
    d012:	781b      	ldrb	r3, [r3, #0]
    d014:	01db      	lsls	r3, r3, #7
    d016:	18d3      	adds	r3, r2, r3
    d018:	e000      	b.n	d01c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    d01a:	2300      	movs	r3, #0
	}
}
    d01c:	0018      	movs	r0, r3
    d01e:	46bd      	mov	sp, r7
    d020:	b004      	add	sp, #16
    d022:	bd80      	pop	{r7, pc}
    d024:	41004400 	.word	0x41004400

0000d028 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    d028:	b580      	push	{r7, lr}
    d02a:	b082      	sub	sp, #8
    d02c:	af00      	add	r7, sp, #0
    d02e:	0002      	movs	r2, r0
    d030:	1dfb      	adds	r3, r7, #7
    d032:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d034:	4b06      	ldr	r3, [pc, #24]	; (d050 <system_interrupt_enable+0x28>)
    d036:	1dfa      	adds	r2, r7, #7
    d038:	7812      	ldrb	r2, [r2, #0]
    d03a:	0011      	movs	r1, r2
    d03c:	221f      	movs	r2, #31
    d03e:	400a      	ands	r2, r1
    d040:	2101      	movs	r1, #1
    d042:	4091      	lsls	r1, r2
    d044:	000a      	movs	r2, r1
    d046:	601a      	str	r2, [r3, #0]
}
    d048:	46c0      	nop			; (mov r8, r8)
    d04a:	46bd      	mov	sp, r7
    d04c:	b002      	add	sp, #8
    d04e:	bd80      	pop	{r7, pc}
    d050:	e000e100 	.word	0xe000e100

0000d054 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    d054:	b580      	push	{r7, lr}
    d056:	b082      	sub	sp, #8
    d058:	af00      	add	r7, sp, #0
    d05a:	0002      	movs	r2, r0
    d05c:	1dfb      	adds	r3, r7, #7
    d05e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d060:	1dfb      	adds	r3, r7, #7
    d062:	781b      	ldrb	r3, [r3, #0]
    d064:	0018      	movs	r0, r3
    d066:	4b03      	ldr	r3, [pc, #12]	; (d074 <port_get_group_from_gpio_pin+0x20>)
    d068:	4798      	blx	r3
    d06a:	0003      	movs	r3, r0
}
    d06c:	0018      	movs	r0, r3
    d06e:	46bd      	mov	sp, r7
    d070:	b002      	add	sp, #8
    d072:	bd80      	pop	{r7, pc}
    d074:	0000cfc9 	.word	0x0000cfc9

0000d078 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    d078:	b580      	push	{r7, lr}
    d07a:	b084      	sub	sp, #16
    d07c:	af00      	add	r7, sp, #0
    d07e:	0002      	movs	r2, r0
    d080:	1dfb      	adds	r3, r7, #7
    d082:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d084:	1dfb      	adds	r3, r7, #7
    d086:	781b      	ldrb	r3, [r3, #0]
    d088:	0018      	movs	r0, r3
    d08a:	4b0b      	ldr	r3, [pc, #44]	; (d0b8 <port_pin_get_output_level+0x40>)
    d08c:	4798      	blx	r3
    d08e:	0003      	movs	r3, r0
    d090:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d092:	1dfb      	adds	r3, r7, #7
    d094:	781b      	ldrb	r3, [r3, #0]
    d096:	221f      	movs	r2, #31
    d098:	4013      	ands	r3, r2
    d09a:	2201      	movs	r2, #1
    d09c:	409a      	lsls	r2, r3
    d09e:	0013      	movs	r3, r2
    d0a0:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    d0a2:	68fb      	ldr	r3, [r7, #12]
    d0a4:	691b      	ldr	r3, [r3, #16]
    d0a6:	68ba      	ldr	r2, [r7, #8]
    d0a8:	4013      	ands	r3, r2
    d0aa:	1e5a      	subs	r2, r3, #1
    d0ac:	4193      	sbcs	r3, r2
    d0ae:	b2db      	uxtb	r3, r3
}
    d0b0:	0018      	movs	r0, r3
    d0b2:	46bd      	mov	sp, r7
    d0b4:	b004      	add	sp, #16
    d0b6:	bd80      	pop	{r7, pc}
    d0b8:	0000d055 	.word	0x0000d055

0000d0bc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    d0bc:	b580      	push	{r7, lr}
    d0be:	b084      	sub	sp, #16
    d0c0:	af00      	add	r7, sp, #0
    d0c2:	0002      	movs	r2, r0
    d0c4:	1dfb      	adds	r3, r7, #7
    d0c6:	701a      	strb	r2, [r3, #0]
    d0c8:	1dbb      	adds	r3, r7, #6
    d0ca:	1c0a      	adds	r2, r1, #0
    d0cc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d0ce:	1dfb      	adds	r3, r7, #7
    d0d0:	781b      	ldrb	r3, [r3, #0]
    d0d2:	0018      	movs	r0, r3
    d0d4:	4b0d      	ldr	r3, [pc, #52]	; (d10c <port_pin_set_output_level+0x50>)
    d0d6:	4798      	blx	r3
    d0d8:	0003      	movs	r3, r0
    d0da:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d0dc:	1dfb      	adds	r3, r7, #7
    d0de:	781b      	ldrb	r3, [r3, #0]
    d0e0:	221f      	movs	r2, #31
    d0e2:	4013      	ands	r3, r2
    d0e4:	2201      	movs	r2, #1
    d0e6:	409a      	lsls	r2, r3
    d0e8:	0013      	movs	r3, r2
    d0ea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    d0ec:	1dbb      	adds	r3, r7, #6
    d0ee:	781b      	ldrb	r3, [r3, #0]
    d0f0:	2b00      	cmp	r3, #0
    d0f2:	d003      	beq.n	d0fc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d0f4:	68fb      	ldr	r3, [r7, #12]
    d0f6:	68ba      	ldr	r2, [r7, #8]
    d0f8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    d0fa:	e002      	b.n	d102 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    d0fc:	68fb      	ldr	r3, [r7, #12]
    d0fe:	68ba      	ldr	r2, [r7, #8]
    d100:	615a      	str	r2, [r3, #20]
	}
}
    d102:	46c0      	nop			; (mov r8, r8)
    d104:	46bd      	mov	sp, r7
    d106:	b004      	add	sp, #16
    d108:	bd80      	pop	{r7, pc}
    d10a:	46c0      	nop			; (mov r8, r8)
    d10c:	0000d055 	.word	0x0000d055

0000d110 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    d110:	b580      	push	{r7, lr}
    d112:	b084      	sub	sp, #16
    d114:	af00      	add	r7, sp, #0
    d116:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    d118:	687b      	ldr	r3, [r7, #4]
    d11a:	681b      	ldr	r3, [r3, #0]
    d11c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    d11e:	68fb      	ldr	r3, [r7, #12]
    d120:	69db      	ldr	r3, [r3, #28]
    d122:	1e5a      	subs	r2, r3, #1
    d124:	4193      	sbcs	r3, r2
    d126:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    d128:	0018      	movs	r0, r3
    d12a:	46bd      	mov	sp, r7
    d12c:	b004      	add	sp, #16
    d12e:	bd80      	pop	{r7, pc}

0000d130 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    d130:	b580      	push	{r7, lr}
    d132:	b082      	sub	sp, #8
    d134:	af00      	add	r7, sp, #0
    d136:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    d138:	46c0      	nop			; (mov r8, r8)
    d13a:	687b      	ldr	r3, [r7, #4]
    d13c:	0018      	movs	r0, r3
    d13e:	4b04      	ldr	r3, [pc, #16]	; (d150 <_usart_wait_for_sync+0x20>)
    d140:	4798      	blx	r3
    d142:	1e03      	subs	r3, r0, #0
    d144:	d1f9      	bne.n	d13a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    d146:	46c0      	nop			; (mov r8, r8)
    d148:	46bd      	mov	sp, r7
    d14a:	b002      	add	sp, #8
    d14c:	bd80      	pop	{r7, pc}
    d14e:	46c0      	nop			; (mov r8, r8)
    d150:	0000d111 	.word	0x0000d111

0000d154 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    d154:	b580      	push	{r7, lr}
    d156:	b082      	sub	sp, #8
    d158:	af00      	add	r7, sp, #0
    d15a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    d15c:	687b      	ldr	r3, [r7, #4]
    d15e:	2280      	movs	r2, #128	; 0x80
    d160:	05d2      	lsls	r2, r2, #23
    d162:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    d164:	687b      	ldr	r3, [r7, #4]
    d166:	2200      	movs	r2, #0
    d168:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    d16a:	687b      	ldr	r3, [r7, #4]
    d16c:	22ff      	movs	r2, #255	; 0xff
    d16e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    d170:	687b      	ldr	r3, [r7, #4]
    d172:	2200      	movs	r2, #0
    d174:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    d176:	687b      	ldr	r3, [r7, #4]
    d178:	2200      	movs	r2, #0
    d17a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    d17c:	687b      	ldr	r3, [r7, #4]
    d17e:	2296      	movs	r2, #150	; 0x96
    d180:	0192      	lsls	r2, r2, #6
    d182:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    d184:	687b      	ldr	r3, [r7, #4]
    d186:	2224      	movs	r2, #36	; 0x24
    d188:	2101      	movs	r1, #1
    d18a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    d18c:	687b      	ldr	r3, [r7, #4]
    d18e:	2225      	movs	r2, #37	; 0x25
    d190:	2101      	movs	r1, #1
    d192:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    d194:	687b      	ldr	r3, [r7, #4]
    d196:	2226      	movs	r2, #38	; 0x26
    d198:	2100      	movs	r1, #0
    d19a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    d19c:	687b      	ldr	r3, [r7, #4]
    d19e:	2227      	movs	r2, #39	; 0x27
    d1a0:	2100      	movs	r1, #0
    d1a2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    d1a4:	687b      	ldr	r3, [r7, #4]
    d1a6:	2200      	movs	r2, #0
    d1a8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    d1aa:	687b      	ldr	r3, [r7, #4]
    d1ac:	2288      	movs	r2, #136	; 0x88
    d1ae:	0352      	lsls	r2, r2, #13
    d1b0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    d1b2:	687b      	ldr	r3, [r7, #4]
    d1b4:	222c      	movs	r2, #44	; 0x2c
    d1b6:	2100      	movs	r1, #0
    d1b8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    d1ba:	687b      	ldr	r3, [r7, #4]
    d1bc:	222d      	movs	r2, #45	; 0x2d
    d1be:	2100      	movs	r1, #0
    d1c0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    d1c2:	687b      	ldr	r3, [r7, #4]
    d1c4:	2200      	movs	r2, #0
    d1c6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    d1c8:	687b      	ldr	r3, [r7, #4]
    d1ca:	2200      	movs	r2, #0
    d1cc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    d1ce:	687b      	ldr	r3, [r7, #4]
    d1d0:	2200      	movs	r2, #0
    d1d2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    d1d4:	687b      	ldr	r3, [r7, #4]
    d1d6:	2200      	movs	r2, #0
    d1d8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    d1da:	687b      	ldr	r3, [r7, #4]
    d1dc:	2200      	movs	r2, #0
    d1de:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    d1e0:	687b      	ldr	r3, [r7, #4]
    d1e2:	2200      	movs	r2, #0
    d1e4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    d1e6:	687b      	ldr	r3, [r7, #4]
    d1e8:	2200      	movs	r2, #0
    d1ea:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    d1ec:	687b      	ldr	r3, [r7, #4]
    d1ee:	2200      	movs	r2, #0
    d1f0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    d1f2:	687b      	ldr	r3, [r7, #4]
    d1f4:	2200      	movs	r2, #0
    d1f6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    d1f8:	687b      	ldr	r3, [r7, #4]
    d1fa:	2200      	movs	r2, #0
    d1fc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    d1fe:	687b      	ldr	r3, [r7, #4]
    d200:	2213      	movs	r2, #19
    d202:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    d204:	687b      	ldr	r3, [r7, #4]
    d206:	2200      	movs	r2, #0
    d208:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    d20a:	46c0      	nop			; (mov r8, r8)
    d20c:	46bd      	mov	sp, r7
    d20e:	b002      	add	sp, #8
    d210:	bd80      	pop	{r7, pc}
    d212:	46c0      	nop			; (mov r8, r8)

0000d214 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    d214:	b580      	push	{r7, lr}
    d216:	b084      	sub	sp, #16
    d218:	af00      	add	r7, sp, #0
    d21a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d21c:	687b      	ldr	r3, [r7, #4]
    d21e:	681b      	ldr	r3, [r3, #0]
    d220:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d222:	687b      	ldr	r3, [r7, #4]
    d224:	681b      	ldr	r3, [r3, #0]
    d226:	0018      	movs	r0, r3
    d228:	4b09      	ldr	r3, [pc, #36]	; (d250 <usart_enable+0x3c>)
    d22a:	4798      	blx	r3
    d22c:	0003      	movs	r3, r0
    d22e:	0018      	movs	r0, r3
    d230:	4b08      	ldr	r3, [pc, #32]	; (d254 <usart_enable+0x40>)
    d232:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    d234:	687b      	ldr	r3, [r7, #4]
    d236:	0018      	movs	r0, r3
    d238:	4b07      	ldr	r3, [pc, #28]	; (d258 <usart_enable+0x44>)
    d23a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    d23c:	68fb      	ldr	r3, [r7, #12]
    d23e:	681b      	ldr	r3, [r3, #0]
    d240:	2202      	movs	r2, #2
    d242:	431a      	orrs	r2, r3
    d244:	68fb      	ldr	r3, [r7, #12]
    d246:	601a      	str	r2, [r3, #0]
}
    d248:	46c0      	nop			; (mov r8, r8)
    d24a:	46bd      	mov	sp, r7
    d24c:	b004      	add	sp, #16
    d24e:	bd80      	pop	{r7, pc}
    d250:	000080cd 	.word	0x000080cd
    d254:	0000d029 	.word	0x0000d029
    d258:	0000d131 	.word	0x0000d131

0000d25c <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    d25c:	b580      	push	{r7, lr}
    d25e:	b084      	sub	sp, #16
    d260:	af00      	add	r7, sp, #0
    d262:	60f8      	str	r0, [r7, #12]
    d264:	60b9      	str	r1, [r7, #8]
    d266:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    d268:	687a      	ldr	r2, [r7, #4]
    d26a:	68b9      	ldr	r1, [r7, #8]
    d26c:	68fb      	ldr	r3, [r7, #12]
    d26e:	0018      	movs	r0, r3
    d270:	4b05      	ldr	r3, [pc, #20]	; (d288 <usart_serial_init+0x2c>)
    d272:	4798      	blx	r3
    d274:	1e03      	subs	r3, r0, #0
    d276:	d101      	bne.n	d27c <usart_serial_init+0x20>
		return true;
    d278:	2301      	movs	r3, #1
    d27a:	e000      	b.n	d27e <usart_serial_init+0x22>
	}
	else {
		return false;
    d27c:	2300      	movs	r3, #0
	}
}
    d27e:	0018      	movs	r0, r3
    d280:	46bd      	mov	sp, r7
    d282:	b004      	add	sp, #16
    d284:	bd80      	pop	{r7, pc}
    d286:	46c0      	nop			; (mov r8, r8)
    d288:	000091c9 	.word	0x000091c9

0000d28c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    d28c:	b580      	push	{r7, lr}
    d28e:	b082      	sub	sp, #8
    d290:	af00      	add	r7, sp, #0
    d292:	6078      	str	r0, [r7, #4]
    d294:	000a      	movs	r2, r1
    d296:	1cfb      	adds	r3, r7, #3
    d298:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    d29a:	46c0      	nop			; (mov r8, r8)
    d29c:	1cfb      	adds	r3, r7, #3
    d29e:	781b      	ldrb	r3, [r3, #0]
    d2a0:	b29a      	uxth	r2, r3
    d2a2:	687b      	ldr	r3, [r7, #4]
    d2a4:	0011      	movs	r1, r2
    d2a6:	0018      	movs	r0, r3
    d2a8:	4b04      	ldr	r3, [pc, #16]	; (d2bc <usart_serial_putchar+0x30>)
    d2aa:	4798      	blx	r3
    d2ac:	1e03      	subs	r3, r0, #0
    d2ae:	d1f5      	bne.n	d29c <usart_serial_putchar+0x10>

	return STATUS_OK;
    d2b0:	2300      	movs	r3, #0
}
    d2b2:	0018      	movs	r0, r3
    d2b4:	46bd      	mov	sp, r7
    d2b6:	b002      	add	sp, #8
    d2b8:	bd80      	pop	{r7, pc}
    d2ba:	46c0      	nop			; (mov r8, r8)
    d2bc:	0000943d 	.word	0x0000943d

0000d2c0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    d2c0:	b580      	push	{r7, lr}
    d2c2:	b084      	sub	sp, #16
    d2c4:	af00      	add	r7, sp, #0
    d2c6:	6078      	str	r0, [r7, #4]
    d2c8:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    d2ca:	230e      	movs	r3, #14
    d2cc:	18fb      	adds	r3, r7, r3
    d2ce:	2200      	movs	r2, #0
    d2d0:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    d2d2:	46c0      	nop			; (mov r8, r8)
    d2d4:	230e      	movs	r3, #14
    d2d6:	18fa      	adds	r2, r7, r3
    d2d8:	687b      	ldr	r3, [r7, #4]
    d2da:	0011      	movs	r1, r2
    d2dc:	0018      	movs	r0, r3
    d2de:	4b07      	ldr	r3, [pc, #28]	; (d2fc <usart_serial_getchar+0x3c>)
    d2e0:	4798      	blx	r3
    d2e2:	1e03      	subs	r3, r0, #0
    d2e4:	d1f6      	bne.n	d2d4 <usart_serial_getchar+0x14>

	*c = temp;
    d2e6:	230e      	movs	r3, #14
    d2e8:	18fb      	adds	r3, r7, r3
    d2ea:	881b      	ldrh	r3, [r3, #0]
    d2ec:	b2da      	uxtb	r2, r3
    d2ee:	683b      	ldr	r3, [r7, #0]
    d2f0:	701a      	strb	r2, [r3, #0]
}
    d2f2:	46c0      	nop			; (mov r8, r8)
    d2f4:	46bd      	mov	sp, r7
    d2f6:	b004      	add	sp, #16
    d2f8:	bd80      	pop	{r7, pc}
    d2fa:	46c0      	nop			; (mov r8, r8)
    d2fc:	000094a1 	.word	0x000094a1

0000d300 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    d300:	b580      	push	{r7, lr}
    d302:	b084      	sub	sp, #16
    d304:	af00      	add	r7, sp, #0
    d306:	60f8      	str	r0, [r7, #12]
    d308:	60b9      	str	r1, [r7, #8]
    d30a:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    d30c:	4b10      	ldr	r3, [pc, #64]	; (d350 <stdio_serial_init+0x50>)
    d30e:	68fa      	ldr	r2, [r7, #12]
    d310:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    d312:	4b10      	ldr	r3, [pc, #64]	; (d354 <stdio_serial_init+0x54>)
    d314:	4a10      	ldr	r2, [pc, #64]	; (d358 <stdio_serial_init+0x58>)
    d316:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    d318:	4b10      	ldr	r3, [pc, #64]	; (d35c <stdio_serial_init+0x5c>)
    d31a:	4a11      	ldr	r2, [pc, #68]	; (d360 <stdio_serial_init+0x60>)
    d31c:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    d31e:	687a      	ldr	r2, [r7, #4]
    d320:	68b9      	ldr	r1, [r7, #8]
    d322:	68fb      	ldr	r3, [r7, #12]
    d324:	0018      	movs	r0, r3
    d326:	4b0f      	ldr	r3, [pc, #60]	; (d364 <stdio_serial_init+0x64>)
    d328:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    d32a:	4b0f      	ldr	r3, [pc, #60]	; (d368 <stdio_serial_init+0x68>)
    d32c:	681b      	ldr	r3, [r3, #0]
    d32e:	689b      	ldr	r3, [r3, #8]
    d330:	2100      	movs	r1, #0
    d332:	0018      	movs	r0, r3
    d334:	4b0d      	ldr	r3, [pc, #52]	; (d36c <stdio_serial_init+0x6c>)
    d336:	4798      	blx	r3
	setbuf(stdin, NULL);
    d338:	4b0b      	ldr	r3, [pc, #44]	; (d368 <stdio_serial_init+0x68>)
    d33a:	681b      	ldr	r3, [r3, #0]
    d33c:	685b      	ldr	r3, [r3, #4]
    d33e:	2100      	movs	r1, #0
    d340:	0018      	movs	r0, r3
    d342:	4b0a      	ldr	r3, [pc, #40]	; (d36c <stdio_serial_init+0x6c>)
    d344:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    d346:	46c0      	nop			; (mov r8, r8)
    d348:	46bd      	mov	sp, r7
    d34a:	b004      	add	sp, #16
    d34c:	bd80      	pop	{r7, pc}
    d34e:	46c0      	nop			; (mov r8, r8)
    d350:	20004798 	.word	0x20004798
    d354:	20004794 	.word	0x20004794
    d358:	0000d28d 	.word	0x0000d28d
    d35c:	20004790 	.word	0x20004790
    d360:	0000d2c1 	.word	0x0000d2c1
    d364:	0000d25d 	.word	0x0000d25d
    d368:	20000094 	.word	0x20000094
    d36c:	0000fe65 	.word	0x0000fe65

0000d370 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    d370:	b580      	push	{r7, lr}
    d372:	b084      	sub	sp, #16
    d374:	af00      	add	r7, sp, #0
    d376:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d378:	687b      	ldr	r3, [r7, #4]
    d37a:	681b      	ldr	r3, [r3, #0]
    d37c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    d37e:	68fb      	ldr	r3, [r7, #12]
    d380:	7bdb      	ldrb	r3, [r3, #15]
    d382:	b2db      	uxtb	r3, r3
    d384:	001a      	movs	r2, r3
    d386:	2380      	movs	r3, #128	; 0x80
    d388:	4013      	ands	r3, r2
    d38a:	1e5a      	subs	r2, r3, #1
    d38c:	4193      	sbcs	r3, r2
    d38e:	b2db      	uxtb	r3, r3
#endif
}
    d390:	0018      	movs	r0, r3
    d392:	46bd      	mov	sp, r7
    d394:	b004      	add	sp, #16
    d396:	bd80      	pop	{r7, pc}

0000d398 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    d398:	b580      	push	{r7, lr}
    d39a:	b082      	sub	sp, #8
    d39c:	af00      	add	r7, sp, #0
    d39e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    d3a0:	687b      	ldr	r3, [r7, #4]
    d3a2:	2200      	movs	r2, #0
    d3a4:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d3a6:	687b      	ldr	r3, [r7, #4]
    d3a8:	2200      	movs	r2, #0
    d3aa:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d3ac:	687b      	ldr	r3, [r7, #4]
    d3ae:	2200      	movs	r2, #0
    d3b0:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d3b2:	687b      	ldr	r3, [r7, #4]
    d3b4:	2200      	movs	r2, #0
    d3b6:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d3b8:	687b      	ldr	r3, [r7, #4]
    d3ba:	2200      	movs	r2, #0
    d3bc:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    d3be:	687b      	ldr	r3, [r7, #4]
    d3c0:	2200      	movs	r2, #0
    d3c2:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d3c4:	687b      	ldr	r3, [r7, #4]
    d3c6:	2200      	movs	r2, #0
    d3c8:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d3ca:	687b      	ldr	r3, [r7, #4]
    d3cc:	2200      	movs	r2, #0
    d3ce:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d3d0:	687b      	ldr	r3, [r7, #4]
    d3d2:	2200      	movs	r2, #0
    d3d4:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d3d6:	687b      	ldr	r3, [r7, #4]
    d3d8:	2200      	movs	r2, #0
    d3da:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    d3dc:	687b      	ldr	r3, [r7, #4]
    d3de:	2200      	movs	r2, #0
    d3e0:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d3e2:	687b      	ldr	r3, [r7, #4]
    d3e4:	2200      	movs	r2, #0
    d3e6:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d3e8:	687b      	ldr	r3, [r7, #4]
    d3ea:	2200      	movs	r2, #0
    d3ec:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d3ee:	687b      	ldr	r3, [r7, #4]
    d3f0:	2200      	movs	r2, #0
    d3f2:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d3f4:	687b      	ldr	r3, [r7, #4]
    d3f6:	2200      	movs	r2, #0
    d3f8:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d3fa:	687b      	ldr	r3, [r7, #4]
    d3fc:	2200      	movs	r2, #0
    d3fe:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d400:	687b      	ldr	r3, [r7, #4]
    d402:	2200      	movs	r2, #0
    d404:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    d406:	687b      	ldr	r3, [r7, #4]
    d408:	2200      	movs	r2, #0
    d40a:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    d40c:	687b      	ldr	r3, [r7, #4]
    d40e:	2200      	movs	r2, #0
    d410:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d412:	687b      	ldr	r3, [r7, #4]
    d414:	2200      	movs	r2, #0
    d416:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    d418:	46c0      	nop			; (mov r8, r8)
    d41a:	46bd      	mov	sp, r7
    d41c:	b002      	add	sp, #8
    d41e:	bd80      	pop	{r7, pc}

0000d420 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    d420:	b580      	push	{r7, lr}
    d422:	b084      	sub	sp, #16
    d424:	af00      	add	r7, sp, #0
    d426:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d428:	687b      	ldr	r3, [r7, #4]
    d42a:	681b      	ldr	r3, [r3, #0]
    d42c:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    d42e:	46c0      	nop			; (mov r8, r8)
    d430:	687b      	ldr	r3, [r7, #4]
    d432:	0018      	movs	r0, r3
    d434:	4b07      	ldr	r3, [pc, #28]	; (d454 <tc_enable+0x34>)
    d436:	4798      	blx	r3
    d438:	1e03      	subs	r3, r0, #0
    d43a:	d1f9      	bne.n	d430 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d43c:	68fb      	ldr	r3, [r7, #12]
    d43e:	881b      	ldrh	r3, [r3, #0]
    d440:	b29b      	uxth	r3, r3
    d442:	2202      	movs	r2, #2
    d444:	4313      	orrs	r3, r2
    d446:	b29a      	uxth	r2, r3
    d448:	68fb      	ldr	r3, [r7, #12]
    d44a:	801a      	strh	r2, [r3, #0]
}
    d44c:	46c0      	nop			; (mov r8, r8)
    d44e:	46bd      	mov	sp, r7
    d450:	b004      	add	sp, #16
    d452:	bd80      	pop	{r7, pc}
    d454:	0000d371 	.word	0x0000d371

0000d458 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    d458:	b580      	push	{r7, lr}
    d45a:	b084      	sub	sp, #16
    d45c:	af00      	add	r7, sp, #0
    d45e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d460:	687b      	ldr	r3, [r7, #4]
    d462:	681b      	ldr	r3, [r3, #0]
    d464:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    d466:	46c0      	nop			; (mov r8, r8)
    d468:	687b      	ldr	r3, [r7, #4]
    d46a:	0018      	movs	r0, r3
    d46c:	4b0a      	ldr	r3, [pc, #40]	; (d498 <tc_disable+0x40>)
    d46e:	4798      	blx	r3
    d470:	1e03      	subs	r3, r0, #0
    d472:	d1f9      	bne.n	d468 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    d474:	68fb      	ldr	r3, [r7, #12]
    d476:	223b      	movs	r2, #59	; 0x3b
    d478:	731a      	strb	r2, [r3, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    d47a:	68fb      	ldr	r3, [r7, #12]
    d47c:	223b      	movs	r2, #59	; 0x3b
    d47e:	739a      	strb	r2, [r3, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    d480:	68fb      	ldr	r3, [r7, #12]
    d482:	881b      	ldrh	r3, [r3, #0]
    d484:	b29b      	uxth	r3, r3
    d486:	2202      	movs	r2, #2
    d488:	4393      	bics	r3, r2
    d48a:	b29a      	uxth	r2, r3
    d48c:	68fb      	ldr	r3, [r7, #12]
    d48e:	801a      	strh	r2, [r3, #0]
}
    d490:	46c0      	nop			; (mov r8, r8)
    d492:	46bd      	mov	sp, r7
    d494:	b004      	add	sp, #16
    d496:	bd80      	pop	{r7, pc}
    d498:	0000d371 	.word	0x0000d371

0000d49c <m2m_tcp_socket_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void m2m_tcp_socket_handler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    d49c:	b580      	push	{r7, lr}
    d49e:	b082      	sub	sp, #8
    d4a0:	af00      	add	r7, sp, #0
    d4a2:	603a      	str	r2, [r7, #0]
    d4a4:	1dfb      	adds	r3, r7, #7
    d4a6:	1c02      	adds	r2, r0, #0
    d4a8:	701a      	strb	r2, [r3, #0]
    d4aa:	1dbb      	adds	r3, r7, #6
    d4ac:	1c0a      	adds	r2, r1, #0
    d4ae:	701a      	strb	r2, [r3, #0]
	handle_tcpip(sock, u8Msg, pvMsg);
    d4b0:	683a      	ldr	r2, [r7, #0]
    d4b2:	1dbb      	adds	r3, r7, #6
    d4b4:	7819      	ldrb	r1, [r3, #0]
    d4b6:	1dfb      	adds	r3, r7, #7
    d4b8:	781b      	ldrb	r3, [r3, #0]
    d4ba:	b25b      	sxtb	r3, r3
    d4bc:	0018      	movs	r0, r3
    d4be:	4b03      	ldr	r3, [pc, #12]	; (d4cc <m2m_tcp_socket_handler+0x30>)
    d4c0:	4798      	blx	r3
}
    d4c2:	46c0      	nop			; (mov r8, r8)
    d4c4:	46bd      	mov	sp, r7
    d4c6:	b002      	add	sp, #8
    d4c8:	bd80      	pop	{r7, pc}
    d4ca:	46c0      	nop			; (mov r8, r8)
    d4cc:	0000e65d 	.word	0x0000e65d

0000d4d0 <socket_resolve_cb>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
    d4d0:	b5b0      	push	{r4, r5, r7, lr}
    d4d2:	b084      	sub	sp, #16
    d4d4:	af02      	add	r7, sp, #8
    d4d6:	6078      	str	r0, [r7, #4]
    d4d8:	6039      	str	r1, [r7, #0]
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d4da:	683b      	ldr	r3, [r7, #0]
    d4dc:	22ff      	movs	r2, #255	; 0xff
    d4de:	4013      	ands	r3, r2
    d4e0:	001c      	movs	r4, r3
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
    d4e2:	683b      	ldr	r3, [r7, #0]
    d4e4:	0a1b      	lsrs	r3, r3, #8
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d4e6:	001a      	movs	r2, r3
    d4e8:	23ff      	movs	r3, #255	; 0xff
    d4ea:	401a      	ands	r2, r3
    d4ec:	0015      	movs	r5, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    d4ee:	683b      	ldr	r3, [r7, #0]
    d4f0:	0c1b      	lsrs	r3, r3, #16
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d4f2:	001a      	movs	r2, r3
    d4f4:	23ff      	movs	r3, #255	; 0xff
    d4f6:	4013      	ands	r3, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    d4f8:	683a      	ldr	r2, [r7, #0]
    d4fa:	0e12      	lsrs	r2, r2, #24
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d4fc:	6879      	ldr	r1, [r7, #4]
    d4fe:	4808      	ldr	r0, [pc, #32]	; (d520 <socket_resolve_cb+0x50>)
    d500:	9201      	str	r2, [sp, #4]
    d502:	9300      	str	r3, [sp, #0]
    d504:	002b      	movs	r3, r5
    d506:	0022      	movs	r2, r4
    d508:	4c06      	ldr	r4, [pc, #24]	; (d524 <socket_resolve_cb+0x54>)
    d50a:	47a0      	blx	r4
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
	handle_dns_found((char *)hostName, hostIp);
    d50c:	683a      	ldr	r2, [r7, #0]
    d50e:	687b      	ldr	r3, [r7, #4]
    d510:	0011      	movs	r1, r2
    d512:	0018      	movs	r0, r3
    d514:	4b04      	ldr	r3, [pc, #16]	; (d528 <socket_resolve_cb+0x58>)
    d516:	4798      	blx	r3
}
    d518:	46c0      	nop			; (mov r8, r8)
    d51a:	46bd      	mov	sp, r7
    d51c:	b002      	add	sp, #8
    d51e:	bdb0      	pop	{r4, r5, r7, pc}
    d520:	00011ff4 	.word	0x00011ff4
    d524:	0000fd31 	.word	0x0000fd31
    d528:	0000e5ed 	.word	0x0000e5ed

0000d52c <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
    d52c:	b590      	push	{r4, r7, lr}
    d52e:	b087      	sub	sp, #28
    d530:	af02      	add	r7, sp, #8
    d532:	0002      	movs	r2, r0
    d534:	6039      	str	r1, [r7, #0]
    d536:	1dfb      	adds	r3, r7, #7
    d538:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    d53a:	1dfb      	adds	r3, r7, #7
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	2b2c      	cmp	r3, #44	; 0x2c
    d540:	d002      	beq.n	d548 <m2m_wifi_state+0x1c>
    d542:	2b32      	cmp	r3, #50	; 0x32
    d544:	d025      	beq.n	d592 <m2m_wifi_state+0x66>
		break;
	}

	default:
	{
		break;
    d546:	e042      	b.n	d5ce <m2m_wifi_state+0xa2>
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    d548:	683b      	ldr	r3, [r7, #0]
    d54a:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    d54c:	68fb      	ldr	r3, [r7, #12]
    d54e:	781b      	ldrb	r3, [r3, #0]
    d550:	2b01      	cmp	r3, #1
    d552:	d104      	bne.n	d55e <m2m_wifi_state+0x32>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    d554:	4b20      	ldr	r3, [pc, #128]	; (d5d8 <m2m_wifi_state+0xac>)
    d556:	0018      	movs	r0, r3
    d558:	4b20      	ldr	r3, [pc, #128]	; (d5dc <m2m_wifi_state+0xb0>)
    d55a:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    d55c:	e036      	b.n	d5cc <m2m_wifi_state+0xa0>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    d55e:	68fb      	ldr	r3, [r7, #12]
    d560:	781b      	ldrb	r3, [r3, #0]
    d562:	2b00      	cmp	r3, #0
    d564:	d132      	bne.n	d5cc <m2m_wifi_state+0xa0>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    d566:	4b1e      	ldr	r3, [pc, #120]	; (d5e0 <m2m_wifi_state+0xb4>)
    d568:	0018      	movs	r0, r3
    d56a:	4b1c      	ldr	r3, [pc, #112]	; (d5dc <m2m_wifi_state+0xb0>)
    d56c:	4798      	blx	r3
			if (WifiStateConnected == gWifiState) {
    d56e:	4b1d      	ldr	r3, [pc, #116]	; (d5e4 <m2m_wifi_state+0xb8>)
    d570:	781b      	ldrb	r3, [r3, #0]
    d572:	b2db      	uxtb	r3, r3
    d574:	2b03      	cmp	r3, #3
    d576:	d129      	bne.n	d5cc <m2m_wifi_state+0xa0>
				gWifiState = WifiStateDisConnected;
    d578:	4b1a      	ldr	r3, [pc, #104]	; (d5e4 <m2m_wifi_state+0xb8>)
    d57a:	2204      	movs	r2, #4
    d57c:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    d57e:	4a1a      	ldr	r2, [pc, #104]	; (d5e8 <m2m_wifi_state+0xbc>)
    d580:	481a      	ldr	r0, [pc, #104]	; (d5ec <m2m_wifi_state+0xc0>)
    d582:	23ff      	movs	r3, #255	; 0xff
    d584:	9300      	str	r3, [sp, #0]
    d586:	0013      	movs	r3, r2
    d588:	2202      	movs	r2, #2
    d58a:	211b      	movs	r1, #27
    d58c:	4c18      	ldr	r4, [pc, #96]	; (d5f0 <m2m_wifi_state+0xc4>)
    d58e:	47a0      	blx	r4
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    d590:	e01c      	b.n	d5cc <m2m_wifi_state+0xa0>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    d592:	683b      	ldr	r3, [r7, #0]
    d594:	60bb      	str	r3, [r7, #8]
		gu32connectEndTime = gu32MsTicks;
    d596:	4b17      	ldr	r3, [pc, #92]	; (d5f4 <m2m_wifi_state+0xc8>)
    d598:	681a      	ldr	r2, [r3, #0]
    d59a:	4b17      	ldr	r3, [pc, #92]	; (d5f8 <m2m_wifi_state+0xcc>)
    d59c:	601a      	str	r2, [r3, #0]
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d59e:	68bb      	ldr	r3, [r7, #8]
    d5a0:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d5a2:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d5a4:	68bb      	ldr	r3, [r7, #8]
    d5a6:	3301      	adds	r3, #1
    d5a8:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d5aa:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d5ac:	68bb      	ldr	r3, [r7, #8]
    d5ae:	3302      	adds	r3, #2
    d5b0:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d5b2:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d5b4:	68bb      	ldr	r3, [r7, #8]
    d5b6:	3303      	adds	r3, #3
    d5b8:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d5ba:	4810      	ldr	r0, [pc, #64]	; (d5fc <m2m_wifi_state+0xd0>)
    d5bc:	9300      	str	r3, [sp, #0]
    d5be:	0023      	movs	r3, r4
    d5c0:	4c0f      	ldr	r4, [pc, #60]	; (d600 <m2m_wifi_state+0xd4>)
    d5c2:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gWifiState = WifiStateConnected;
    d5c4:	4b07      	ldr	r3, [pc, #28]	; (d5e4 <m2m_wifi_state+0xb8>)
    d5c6:	2203      	movs	r2, #3
    d5c8:	701a      	strb	r2, [r3, #0]

		break;
    d5ca:	e000      	b.n	d5ce <m2m_wifi_state+0xa2>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    d5cc:	46c0      	nop			; (mov r8, r8)
	default:
	{
		break;
	}
	}
}
    d5ce:	46c0      	nop			; (mov r8, r8)
    d5d0:	46bd      	mov	sp, r7
    d5d2:	b005      	add	sp, #20
    d5d4:	bd90      	pop	{r4, r7, pc}
    d5d6:	46c0      	nop			; (mov r8, r8)
    d5d8:	0001202c 	.word	0x0001202c
    d5dc:	0000fe51 	.word	0x0000fe51
    d5e0:	00012068 	.word	0x00012068
    d5e4:	20003e78 	.word	0x20003e78
    d5e8:	000120a8 	.word	0x000120a8
    d5ec:	000120b4 	.word	0x000120b4
    d5f0:	0000381d 	.word	0x0000381d
    d5f4:	20003e7c 	.word	0x20003e7c
    d5f8:	20003e8c 	.word	0x20003e8c
    d5fc:	000120d0 	.word	0x000120d0
    d600:	0000fd31 	.word	0x0000fd31

0000d604 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    d604:	b580      	push	{r7, lr}
    d606:	b090      	sub	sp, #64	; 0x40
    d608:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    d60a:	003b      	movs	r3, r7
    d60c:	0018      	movs	r0, r3
    d60e:	4b13      	ldr	r3, [pc, #76]	; (d65c <configure_console+0x58>)
    d610:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    d612:	003b      	movs	r3, r7
    d614:	22c4      	movs	r2, #196	; 0xc4
    d616:	0392      	lsls	r2, r2, #14
    d618:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    d61a:	003b      	movs	r3, r7
    d61c:	2201      	movs	r2, #1
    d61e:	4252      	negs	r2, r2
    d620:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    d622:	003b      	movs	r3, r7
    d624:	2201      	movs	r2, #1
    d626:	4252      	negs	r2, r2
    d628:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    d62a:	003b      	movs	r3, r7
    d62c:	4a0c      	ldr	r2, [pc, #48]	; (d660 <configure_console+0x5c>)
    d62e:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    d630:	003b      	movs	r3, r7
    d632:	4a0c      	ldr	r2, [pc, #48]	; (d664 <configure_console+0x60>)
    d634:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    d636:	003b      	movs	r3, r7
    d638:	22e1      	movs	r2, #225	; 0xe1
    d63a:	0252      	lsls	r2, r2, #9
    d63c:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    d63e:	003a      	movs	r2, r7
    d640:	4909      	ldr	r1, [pc, #36]	; (d668 <configure_console+0x64>)
    d642:	4b0a      	ldr	r3, [pc, #40]	; (d66c <configure_console+0x68>)
    d644:	0018      	movs	r0, r3
    d646:	4b0a      	ldr	r3, [pc, #40]	; (d670 <configure_console+0x6c>)
    d648:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    d64a:	4b08      	ldr	r3, [pc, #32]	; (d66c <configure_console+0x68>)
    d64c:	0018      	movs	r0, r3
    d64e:	4b09      	ldr	r3, [pc, #36]	; (d674 <configure_console+0x70>)
    d650:	4798      	blx	r3
}
    d652:	46c0      	nop			; (mov r8, r8)
    d654:	46bd      	mov	sp, r7
    d656:	b010      	add	sp, #64	; 0x40
    d658:	bd80      	pop	{r7, pc}
    d65a:	46c0      	nop			; (mov r8, r8)
    d65c:	0000d155 	.word	0x0000d155
    d660:	00180002 	.word	0x00180002
    d664:	00190002 	.word	0x00190002
    d668:	42001400 	.word	0x42001400
    d66c:	20003e94 	.word	0x20003e94
    d670:	0000d301 	.word	0x0000d301
    d674:	0000d215 	.word	0x0000d215

0000d678 <set_dev_name_to_mac>:

static void set_dev_name_to_mac(uint8 *name, uint8 *mac_addr)
{
    d678:	b590      	push	{r4, r7, lr}
    d67a:	b085      	sub	sp, #20
    d67c:	af00      	add	r7, sp, #0
    d67e:	6078      	str	r0, [r7, #4]
    d680:	6039      	str	r1, [r7, #0]
	/* Name must be in the format WINC1500_00:00 */
	uint16 len;

	len = m2m_strlen(name);
    d682:	230e      	movs	r3, #14
    d684:	18fc      	adds	r4, r7, r3
    d686:	687b      	ldr	r3, [r7, #4]
    d688:	0018      	movs	r0, r3
    d68a:	4b47      	ldr	r3, [pc, #284]	; (d7a8 <set_dev_name_to_mac+0x130>)
    d68c:	4798      	blx	r3
    d68e:	0003      	movs	r3, r0
    d690:	8023      	strh	r3, [r4, #0]
	if (len >= 5) {
    d692:	230e      	movs	r3, #14
    d694:	18fb      	adds	r3, r7, r3
    d696:	881b      	ldrh	r3, [r3, #0]
    d698:	2b04      	cmp	r3, #4
    d69a:	d800      	bhi.n	d69e <set_dev_name_to_mac+0x26>
    d69c:	e07f      	b.n	d79e <set_dev_name_to_mac+0x126>
		name[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
    d69e:	230e      	movs	r3, #14
    d6a0:	18fb      	adds	r3, r7, r3
    d6a2:	881b      	ldrh	r3, [r3, #0]
    d6a4:	3b01      	subs	r3, #1
    d6a6:	687a      	ldr	r2, [r7, #4]
    d6a8:	18d2      	adds	r2, r2, r3
    d6aa:	683b      	ldr	r3, [r7, #0]
    d6ac:	3305      	adds	r3, #5
    d6ae:	781b      	ldrb	r3, [r3, #0]
    d6b0:	0019      	movs	r1, r3
    d6b2:	230f      	movs	r3, #15
    d6b4:	400b      	ands	r3, r1
    d6b6:	2b09      	cmp	r3, #9
    d6b8:	dd08      	ble.n	d6cc <set_dev_name_to_mac+0x54>
    d6ba:	683b      	ldr	r3, [r7, #0]
    d6bc:	3305      	adds	r3, #5
    d6be:	781b      	ldrb	r3, [r3, #0]
    d6c0:	210f      	movs	r1, #15
    d6c2:	400b      	ands	r3, r1
    d6c4:	b2db      	uxtb	r3, r3
    d6c6:	3337      	adds	r3, #55	; 0x37
    d6c8:	b2db      	uxtb	r3, r3
    d6ca:	e007      	b.n	d6dc <set_dev_name_to_mac+0x64>
    d6cc:	683b      	ldr	r3, [r7, #0]
    d6ce:	3305      	adds	r3, #5
    d6d0:	781b      	ldrb	r3, [r3, #0]
    d6d2:	210f      	movs	r1, #15
    d6d4:	400b      	ands	r3, r1
    d6d6:	b2db      	uxtb	r3, r3
    d6d8:	3330      	adds	r3, #48	; 0x30
    d6da:	b2db      	uxtb	r3, r3
    d6dc:	7013      	strb	r3, [r2, #0]
		name[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
    d6de:	230e      	movs	r3, #14
    d6e0:	18fb      	adds	r3, r7, r3
    d6e2:	881b      	ldrh	r3, [r3, #0]
    d6e4:	3b02      	subs	r3, #2
    d6e6:	687a      	ldr	r2, [r7, #4]
    d6e8:	18d2      	adds	r2, r2, r3
    d6ea:	683b      	ldr	r3, [r7, #0]
    d6ec:	3305      	adds	r3, #5
    d6ee:	781b      	ldrb	r3, [r3, #0]
    d6f0:	091b      	lsrs	r3, r3, #4
    d6f2:	b2db      	uxtb	r3, r3
    d6f4:	0019      	movs	r1, r3
    d6f6:	230f      	movs	r3, #15
    d6f8:	400b      	ands	r3, r1
    d6fa:	2b09      	cmp	r3, #9
    d6fc:	dd07      	ble.n	d70e <set_dev_name_to_mac+0x96>
    d6fe:	683b      	ldr	r3, [r7, #0]
    d700:	3305      	adds	r3, #5
    d702:	781b      	ldrb	r3, [r3, #0]
    d704:	091b      	lsrs	r3, r3, #4
    d706:	b2db      	uxtb	r3, r3
    d708:	3337      	adds	r3, #55	; 0x37
    d70a:	b2db      	uxtb	r3, r3
    d70c:	e006      	b.n	d71c <set_dev_name_to_mac+0xa4>
    d70e:	683b      	ldr	r3, [r7, #0]
    d710:	3305      	adds	r3, #5
    d712:	781b      	ldrb	r3, [r3, #0]
    d714:	091b      	lsrs	r3, r3, #4
    d716:	b2db      	uxtb	r3, r3
    d718:	3330      	adds	r3, #48	; 0x30
    d71a:	b2db      	uxtb	r3, r3
    d71c:	7013      	strb	r3, [r2, #0]
		name[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
    d71e:	230e      	movs	r3, #14
    d720:	18fb      	adds	r3, r7, r3
    d722:	881b      	ldrh	r3, [r3, #0]
    d724:	3b04      	subs	r3, #4
    d726:	687a      	ldr	r2, [r7, #4]
    d728:	18d2      	adds	r2, r2, r3
    d72a:	683b      	ldr	r3, [r7, #0]
    d72c:	3304      	adds	r3, #4
    d72e:	781b      	ldrb	r3, [r3, #0]
    d730:	0019      	movs	r1, r3
    d732:	230f      	movs	r3, #15
    d734:	400b      	ands	r3, r1
    d736:	2b09      	cmp	r3, #9
    d738:	dd08      	ble.n	d74c <set_dev_name_to_mac+0xd4>
    d73a:	683b      	ldr	r3, [r7, #0]
    d73c:	3304      	adds	r3, #4
    d73e:	781b      	ldrb	r3, [r3, #0]
    d740:	210f      	movs	r1, #15
    d742:	400b      	ands	r3, r1
    d744:	b2db      	uxtb	r3, r3
    d746:	3337      	adds	r3, #55	; 0x37
    d748:	b2db      	uxtb	r3, r3
    d74a:	e007      	b.n	d75c <set_dev_name_to_mac+0xe4>
    d74c:	683b      	ldr	r3, [r7, #0]
    d74e:	3304      	adds	r3, #4
    d750:	781b      	ldrb	r3, [r3, #0]
    d752:	210f      	movs	r1, #15
    d754:	400b      	ands	r3, r1
    d756:	b2db      	uxtb	r3, r3
    d758:	3330      	adds	r3, #48	; 0x30
    d75a:	b2db      	uxtb	r3, r3
    d75c:	7013      	strb	r3, [r2, #0]
		name[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
    d75e:	230e      	movs	r3, #14
    d760:	18fb      	adds	r3, r7, r3
    d762:	881b      	ldrh	r3, [r3, #0]
    d764:	3b05      	subs	r3, #5
    d766:	687a      	ldr	r2, [r7, #4]
    d768:	18d2      	adds	r2, r2, r3
    d76a:	683b      	ldr	r3, [r7, #0]
    d76c:	3304      	adds	r3, #4
    d76e:	781b      	ldrb	r3, [r3, #0]
    d770:	091b      	lsrs	r3, r3, #4
    d772:	b2db      	uxtb	r3, r3
    d774:	0019      	movs	r1, r3
    d776:	230f      	movs	r3, #15
    d778:	400b      	ands	r3, r1
    d77a:	2b09      	cmp	r3, #9
    d77c:	dd07      	ble.n	d78e <set_dev_name_to_mac+0x116>
    d77e:	683b      	ldr	r3, [r7, #0]
    d780:	3304      	adds	r3, #4
    d782:	781b      	ldrb	r3, [r3, #0]
    d784:	091b      	lsrs	r3, r3, #4
    d786:	b2db      	uxtb	r3, r3
    d788:	3337      	adds	r3, #55	; 0x37
    d78a:	b2db      	uxtb	r3, r3
    d78c:	e006      	b.n	d79c <set_dev_name_to_mac+0x124>
    d78e:	683b      	ldr	r3, [r7, #0]
    d790:	3304      	adds	r3, #4
    d792:	781b      	ldrb	r3, [r3, #0]
    d794:	091b      	lsrs	r3, r3, #4
    d796:	b2db      	uxtb	r3, r3
    d798:	3330      	adds	r3, #48	; 0x30
    d79a:	b2db      	uxtb	r3, r3
    d79c:	7013      	strb	r3, [r2, #0]
	}
}
    d79e:	46c0      	nop			; (mov r8, r8)
    d7a0:	46bd      	mov	sp, r7
    d7a2:	b005      	add	sp, #20
    d7a4:	bd90      	pop	{r4, r7, pc}
    d7a6:	46c0      	nop			; (mov r8, r8)
    d7a8:	0000247d 	.word	0x0000247d

0000d7ac <task_3s>:
	adc_enable(&adc_instance);
}


static void task_3s(void *args)
{
    d7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7ae:	b0cd      	sub	sp, #308	; 0x134
    d7b0:	af04      	add	r7, sp, #16
    d7b2:	6078      	str	r0, [r7, #4]
    double temperature = 0;
    d7b4:	2300      	movs	r3, #0
    d7b6:	2400      	movs	r4, #0
    d7b8:	228c      	movs	r2, #140	; 0x8c
    d7ba:	0052      	lsls	r2, r2, #1
    d7bc:	18ba      	adds	r2, r7, r2
    d7be:	6013      	str	r3, [r2, #0]
    d7c0:	6054      	str	r4, [r2, #4]
    uint16_t light = 0;
    d7c2:	238b      	movs	r3, #139	; 0x8b
    d7c4:	005b      	lsls	r3, r3, #1
    d7c6:	18fb      	adds	r3, r7, r3
    d7c8:	2200      	movs	r2, #0
    d7ca:	801a      	strh	r2, [r3, #0]
    char buf[256] = {0};
    d7cc:	4b49      	ldr	r3, [pc, #292]	; (d8f4 <task_3s+0x148>)
    d7ce:	2290      	movs	r2, #144	; 0x90
    d7d0:	0052      	lsls	r2, r2, #1
    d7d2:	4694      	mov	ip, r2
    d7d4:	44bc      	add	ip, r7
    d7d6:	4463      	add	r3, ip
    d7d8:	0018      	movs	r0, r3
    d7da:	2380      	movs	r3, #128	; 0x80
    d7dc:	005b      	lsls	r3, r3, #1
    d7de:	001a      	movs	r2, r3
    d7e0:	2100      	movs	r1, #0
    d7e2:	4b45      	ldr	r3, [pc, #276]	; (d8f8 <task_3s+0x14c>)
    d7e4:	4798      	blx	r3
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(3000);
    d7e6:	4b45      	ldr	r3, [pc, #276]	; (d8fc <task_3s+0x150>)
    d7e8:	2288      	movs	r2, #136	; 0x88
    d7ea:	0052      	lsls	r2, r2, #1
    d7ec:	18ba      	adds	r2, r7, r2
    d7ee:	6013      	str	r3, [r2, #0]

    lastTimer = xTaskGetTickCount();
    d7f0:	4b43      	ldr	r3, [pc, #268]	; (d900 <task_3s+0x154>)
    d7f2:	4798      	blx	r3
    d7f4:	0003      	movs	r3, r0
    d7f6:	60fb      	str	r3, [r7, #12]
    for ( ;; )
    {
        vTaskDelayUntil(&lastTimer, delay_time);        
    d7f8:	2388      	movs	r3, #136	; 0x88
    d7fa:	005b      	lsls	r3, r3, #1
    d7fc:	18fb      	adds	r3, r7, r3
    d7fe:	681a      	ldr	r2, [r3, #0]
    d800:	230c      	movs	r3, #12
    d802:	18fb      	adds	r3, r7, r3
    d804:	0011      	movs	r1, r2
    d806:	0018      	movs	r0, r3
    d808:	4b3e      	ldr	r3, [pc, #248]	; (d904 <task_3s+0x158>)
    d80a:	4798      	blx	r3

        if (gWifiState == WifiStateConnected) {
    d80c:	4b3e      	ldr	r3, [pc, #248]	; (d908 <task_3s+0x15c>)
    d80e:	781b      	ldrb	r3, [r3, #0]
    d810:	b2db      	uxtb	r3, r3
    d812:	2b03      	cmp	r3, #3
    d814:	d1f0      	bne.n	d7f8 <task_3s+0x4c>
            gu32publishDelay = gu32MsTicks;
    d816:	4b3d      	ldr	r3, [pc, #244]	; (d90c <task_3s+0x160>)
    d818:	681a      	ldr	r2, [r3, #0]
    d81a:	4b3d      	ldr	r3, [pc, #244]	; (d910 <task_3s+0x164>)
    d81c:	601a      	str	r2, [r3, #0]
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
    d81e:	2300      	movs	r3, #0
    d820:	2400      	movs	r4, #0
    d822:	228c      	movs	r2, #140	; 0x8c
    d824:	0052      	lsls	r2, r2, #1
    d826:	18ba      	adds	r2, r7, r2
    d828:	6013      	str	r3, [r2, #0]
    d82a:	6054      	str	r4, [r2, #4]
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    d82c:	4b39      	ldr	r3, [pc, #228]	; (d914 <task_3s+0x168>)
    d82e:	228c      	movs	r2, #140	; 0x8c
    d830:	0052      	lsls	r2, r2, #1
    d832:	18ba      	adds	r2, r7, r2
    d834:	6810      	ldr	r0, [r2, #0]
    d836:	6851      	ldr	r1, [r2, #4]
    d838:	4798      	blx	r3
    d83a:	0006      	movs	r6, r0
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
    d83c:	4c36      	ldr	r4, [pc, #216]	; (d918 <task_3s+0x16c>)
    d83e:	2200      	movs	r2, #0
    d840:	4b36      	ldr	r3, [pc, #216]	; (d91c <task_3s+0x170>)
    d842:	218c      	movs	r1, #140	; 0x8c
    d844:	0049      	lsls	r1, r1, #1
    d846:	1879      	adds	r1, r7, r1
    d848:	6808      	ldr	r0, [r1, #0]
    d84a:	6849      	ldr	r1, [r1, #4]
    d84c:	47a0      	blx	r4
    d84e:	0003      	movs	r3, r0
    d850:	000c      	movs	r4, r1
    d852:	0019      	movs	r1, r3
    d854:	0022      	movs	r2, r4
    d856:	4b2f      	ldr	r3, [pc, #188]	; (d914 <task_3s+0x168>)
    d858:	0008      	movs	r0, r1
    d85a:	0011      	movs	r1, r2
    d85c:	4798      	blx	r3
    d85e:	0002      	movs	r2, r0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    d860:	4b2f      	ldr	r3, [pc, #188]	; (d920 <task_3s+0x174>)
    d862:	2164      	movs	r1, #100	; 0x64
    d864:	0010      	movs	r0, r2
    d866:	4798      	blx	r3
    d868:	000b      	movs	r3, r1
    d86a:	001c      	movs	r4, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
    d86c:	238b      	movs	r3, #139	; 0x8b
    d86e:	005b      	lsls	r3, r3, #1
    d870:	18fb      	adds	r3, r7, r3
    d872:	881b      	ldrh	r3, [r3, #0]
    d874:	2280      	movs	r2, #128	; 0x80
    d876:	0152      	lsls	r2, r2, #5
    d878:	1ad3      	subs	r3, r2, r3
    d87a:	2264      	movs	r2, #100	; 0x64
    d87c:	4353      	muls	r3, r2
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    d87e:	2b00      	cmp	r3, #0
    d880:	da02      	bge.n	d888 <task_3s+0xdc>
    d882:	4a28      	ldr	r2, [pc, #160]	; (d924 <task_3s+0x178>)
    d884:	4694      	mov	ip, r2
    d886:	4463      	add	r3, ip
    d888:	131b      	asrs	r3, r3, #12
    d88a:	001d      	movs	r5, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
    d88c:	2017      	movs	r0, #23
    d88e:	4b26      	ldr	r3, [pc, #152]	; (d928 <task_3s+0x17c>)
    d890:	4798      	blx	r3
    d892:	1e03      	subs	r3, r0, #0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    d894:	d001      	beq.n	d89a <task_3s+0xee>
    d896:	4b25      	ldr	r3, [pc, #148]	; (d92c <task_3s+0x180>)
    d898:	e000      	b.n	d89c <task_3s+0xf0>
    d89a:	4b25      	ldr	r3, [pc, #148]	; (d930 <task_3s+0x184>)
    d89c:	4a25      	ldr	r2, [pc, #148]	; (d934 <task_3s+0x188>)
    d89e:	4926      	ldr	r1, [pc, #152]	; (d938 <task_3s+0x18c>)
    d8a0:	2010      	movs	r0, #16
    d8a2:	1838      	adds	r0, r7, r0
    d8a4:	9302      	str	r3, [sp, #8]
    d8a6:	9501      	str	r5, [sp, #4]
    d8a8:	9400      	str	r4, [sp, #0]
    d8aa:	0033      	movs	r3, r6
    d8ac:	4c23      	ldr	r4, [pc, #140]	; (d93c <task_3s+0x190>)
    d8ae:	47a0      	blx	r4
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
            printf("main: publish event: {%s}\r\n", buf);
    d8b0:	2310      	movs	r3, #16
    d8b2:	18fa      	adds	r2, r7, r3
    d8b4:	4b22      	ldr	r3, [pc, #136]	; (d940 <task_3s+0x194>)
    d8b6:	0011      	movs	r1, r2
    d8b8:	0018      	movs	r0, r3
    d8ba:	4b22      	ldr	r3, [pc, #136]	; (d944 <task_3s+0x198>)
    d8bc:	4798      	blx	r3
            close(pPubNubCfg->tcp_socket);
    d8be:	4b22      	ldr	r3, [pc, #136]	; (d948 <task_3s+0x19c>)
    d8c0:	681b      	ldr	r3, [r3, #0]
    d8c2:	2253      	movs	r2, #83	; 0x53
    d8c4:	569b      	ldrsb	r3, [r3, r2]
    d8c6:	0018      	movs	r0, r3
    d8c8:	4b20      	ldr	r3, [pc, #128]	; (d94c <task_3s+0x1a0>)
    d8ca:	4798      	blx	r3
            pPubNubCfg->state = PS_IDLE;
    d8cc:	4b1e      	ldr	r3, [pc, #120]	; (d948 <task_3s+0x19c>)
    d8ce:	681b      	ldr	r3, [r3, #0]
    d8d0:	2252      	movs	r2, #82	; 0x52
    d8d2:	2100      	movs	r1, #0
    d8d4:	5499      	strb	r1, [r3, r2]
            pPubNubCfg->last_result = PNR_IO_ERROR;
    d8d6:	4b1c      	ldr	r3, [pc, #112]	; (d948 <task_3s+0x19c>)
    d8d8:	681b      	ldr	r3, [r3, #0]
    d8da:	2250      	movs	r2, #80	; 0x50
    d8dc:	2102      	movs	r1, #2
    d8de:	5499      	strb	r1, [r3, r2]
            pubnub_publish(pPubNubCfg, PubNubChannel, buf);            
    d8e0:	4b19      	ldr	r3, [pc, #100]	; (d948 <task_3s+0x19c>)
    d8e2:	681b      	ldr	r3, [r3, #0]
    d8e4:	2210      	movs	r2, #16
    d8e6:	18ba      	adds	r2, r7, r2
    d8e8:	4912      	ldr	r1, [pc, #72]	; (d934 <task_3s+0x188>)
    d8ea:	0018      	movs	r0, r3
    d8ec:	4b18      	ldr	r3, [pc, #96]	; (d950 <task_3s+0x1a4>)
    d8ee:	4798      	blx	r3
        }        
    }
    d8f0:	e782      	b.n	d7f8 <task_3s+0x4c>
    d8f2:	46c0      	nop			; (mov r8, r8)
    d8f4:	fffffef0 	.word	0xfffffef0
    d8f8:	0000f77b 	.word	0x0000f77b
    d8fc:	00000bb8 	.word	0x00000bb8
    d900:	0000c145 	.word	0x0000c145
    d904:	0000be4d 	.word	0x0000be4d
    d908:	20003e78 	.word	0x20003e78
    d90c:	20003e7c 	.word	0x20003e7c
    d910:	20003e80 	.word	0x20003e80
    d914:	0000f5f1 	.word	0x0000f5f1
    d918:	0000f0fd 	.word	0x0000f0fd
    d91c:	40590000 	.word	0x40590000
    d920:	0000eed9 	.word	0x0000eed9
    d924:	00000fff 	.word	0x00000fff
    d928:	0000d079 	.word	0x0000d079
    d92c:	0001210c 	.word	0x0001210c
    d930:	00012110 	.word	0x00012110
    d934:	20000024 	.word	0x20000024
    d938:	00012114 	.word	0x00012114
    d93c:	0001003d 	.word	0x0001003d
    d940:	00012158 	.word	0x00012158
    d944:	0000fd31 	.word	0x0000fd31
    d948:	20003e90 	.word	0x20003e90
    d94c:	00006bf1 	.word	0x00006bf1
    d950:	0000e7d9 	.word	0x0000e7d9

0000d954 <task_1s>:
}

static void task_1s(void *args)
{
    d954:	b580      	push	{r7, lr}
    d956:	b086      	sub	sp, #24
    d958:	af00      	add	r7, sp, #0
    d95a:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    d95c:	4b47      	ldr	r3, [pc, #284]	; (da7c <task_1s+0x128>)
    d95e:	4798      	blx	r3
    d960:	0003      	movs	r3, r0
    d962:	60fb      	str	r3, [r7, #12]
    TickType_t delay_time = pdMS_TO_TICKS(1000);
    d964:	23fa      	movs	r3, #250	; 0xfa
    d966:	009b      	lsls	r3, r3, #2
    d968:	617b      	str	r3, [r7, #20]

    while (1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    d96a:	697a      	ldr	r2, [r7, #20]
    d96c:	230c      	movs	r3, #12
    d96e:	18fb      	adds	r3, r7, r3
    d970:	0011      	movs	r1, r2
    d972:	0018      	movs	r0, r3
    d974:	4b42      	ldr	r3, [pc, #264]	; (da80 <task_1s+0x12c>)
    d976:	4798      	blx	r3

        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
    d978:	4b42      	ldr	r3, [pc, #264]	; (da84 <task_1s+0x130>)
    d97a:	781b      	ldrb	r3, [r3, #0]
    d97c:	b2db      	uxtb	r3, r3
    d97e:	2b03      	cmp	r3, #3
    d980:	d000      	beq.n	d984 <task_1s+0x30>
    d982:	e078      	b.n	da76 <task_1s+0x122>
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
    d984:	4b40      	ldr	r3, [pc, #256]	; (da88 <task_1s+0x134>)
    d986:	681b      	ldr	r3, [r3, #0]
    d988:	2252      	movs	r2, #82	; 0x52
    d98a:	5c9b      	ldrb	r3, [r3, r2]
    d98c:	2b00      	cmp	r3, #0
    d98e:	d000      	beq.n	d992 <task_1s+0x3e>
    d990:	e071      	b.n	da76 <task_1s+0x122>
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    d992:	4b3d      	ldr	r3, [pc, #244]	; (da88 <task_1s+0x134>)
    d994:	681b      	ldr	r3, [r3, #0]
    d996:	2251      	movs	r2, #81	; 0x51
    d998:	5c9b      	ldrb	r3, [r3, r2]
    d99a:	2b00      	cmp	r3, #0
    d99c:	d00b      	beq.n	d9b6 <task_1s+0x62>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    d99e:	4b3a      	ldr	r3, [pc, #232]	; (da88 <task_1s+0x134>)
    d9a0:	681b      	ldr	r3, [r3, #0]
    d9a2:	2251      	movs	r2, #81	; 0x51
    d9a4:	5c9b      	ldrb	r3, [r3, r2]
        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    d9a6:	2b02      	cmp	r3, #2
    d9a8:	d110      	bne.n	d9cc <task_1s+0x78>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    d9aa:	4b37      	ldr	r3, [pc, #220]	; (da88 <task_1s+0x134>)
    d9ac:	681b      	ldr	r3, [r3, #0]
    d9ae:	2250      	movs	r2, #80	; 0x50
    d9b0:	5c9b      	ldrb	r3, [r3, r2]
    d9b2:	2b00      	cmp	r3, #0
    d9b4:	d10a      	bne.n	d9cc <task_1s+0x78>
                    printf("main: subscribe event, PNR_OK\r\n");
    d9b6:	4b35      	ldr	r3, [pc, #212]	; (da8c <task_1s+0x138>)
    d9b8:	0018      	movs	r0, r3
    d9ba:	4b35      	ldr	r3, [pc, #212]	; (da90 <task_1s+0x13c>)
    d9bc:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    d9be:	4b32      	ldr	r3, [pc, #200]	; (da88 <task_1s+0x134>)
    d9c0:	681b      	ldr	r3, [r3, #0]
    d9c2:	4a34      	ldr	r2, [pc, #208]	; (da94 <task_1s+0x140>)
    d9c4:	0011      	movs	r1, r2
    d9c6:	0018      	movs	r0, r3
    d9c8:	4b33      	ldr	r3, [pc, #204]	; (da98 <task_1s+0x144>)
    d9ca:	4798      	blx	r3
                }

                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
    d9cc:	4b2e      	ldr	r3, [pc, #184]	; (da88 <task_1s+0x134>)
    d9ce:	681b      	ldr	r3, [r3, #0]
    d9d0:	0018      	movs	r0, r3
    d9d2:	4b32      	ldr	r3, [pc, #200]	; (da9c <task_1s+0x148>)
    d9d4:	4798      	blx	r3
    d9d6:	0003      	movs	r3, r0
    d9d8:	613b      	str	r3, [r7, #16]
                    if (NULL == msg) {
    d9da:	693b      	ldr	r3, [r7, #16]
    d9dc:	2b00      	cmp	r3, #0
    d9de:	d031      	beq.n	da44 <task_1s+0xf0>
                        /* No more message to process. */
                        break;
                    }

                    if (0 == (strncmp(&msg[2], "led", strlen("led")))) {
    d9e0:	693b      	ldr	r3, [r7, #16]
    d9e2:	3302      	adds	r3, #2
    d9e4:	492e      	ldr	r1, [pc, #184]	; (daa0 <task_1s+0x14c>)
    d9e6:	2203      	movs	r2, #3
    d9e8:	0018      	movs	r0, r3
    d9ea:	4b2e      	ldr	r3, [pc, #184]	; (daa4 <task_1s+0x150>)
    d9ec:	4798      	blx	r3
    d9ee:	1e03      	subs	r3, r0, #0
    d9f0:	d121      	bne.n	da36 <task_1s+0xe2>
                        /* LED control message. */
                        printf("main: received LED control message: %s\r\n", msg);
    d9f2:	693a      	ldr	r2, [r7, #16]
    d9f4:	4b2c      	ldr	r3, [pc, #176]	; (daa8 <task_1s+0x154>)
    d9f6:	0011      	movs	r1, r2
    d9f8:	0018      	movs	r0, r3
    d9fa:	4b2c      	ldr	r3, [pc, #176]	; (daac <task_1s+0x158>)
    d9fc:	4798      	blx	r3
                        if (0 == (strncmp(&msg[8], "on", strlen("on")))) {
    d9fe:	693b      	ldr	r3, [r7, #16]
    da00:	3308      	adds	r3, #8
    da02:	492b      	ldr	r1, [pc, #172]	; (dab0 <task_1s+0x15c>)
    da04:	2202      	movs	r2, #2
    da06:	0018      	movs	r0, r3
    da08:	4b26      	ldr	r3, [pc, #152]	; (daa4 <task_1s+0x150>)
    da0a:	4798      	blx	r3
    da0c:	1e03      	subs	r3, r0, #0
    da0e:	d104      	bne.n	da1a <task_1s+0xc6>
                            port_pin_set_output_level(LED0_PIN, LED0_ACTIVE);
    da10:	2100      	movs	r1, #0
    da12:	2017      	movs	r0, #23
    da14:	4b27      	ldr	r3, [pc, #156]	; (dab4 <task_1s+0x160>)
    da16:	4798      	blx	r3
    da18:	e7d8      	b.n	d9cc <task_1s+0x78>
                            } else if (0 == (strncmp(&msg[8], "off", strlen("off")))) {
    da1a:	693b      	ldr	r3, [r7, #16]
    da1c:	3308      	adds	r3, #8
    da1e:	4926      	ldr	r1, [pc, #152]	; (dab8 <task_1s+0x164>)
    da20:	2203      	movs	r2, #3
    da22:	0018      	movs	r0, r3
    da24:	4b1f      	ldr	r3, [pc, #124]	; (daa4 <task_1s+0x150>)
    da26:	4798      	blx	r3
    da28:	1e03      	subs	r3, r0, #0
    da2a:	d1cf      	bne.n	d9cc <task_1s+0x78>
                            port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
    da2c:	2101      	movs	r1, #1
    da2e:	2017      	movs	r0, #23
    da30:	4b20      	ldr	r3, [pc, #128]	; (dab4 <task_1s+0x160>)
    da32:	4798      	blx	r3
    da34:	e7ca      	b.n	d9cc <task_1s+0x78>
                        }
                        } else {
                        /* Any other type of JSON message. */
                        printf("main: received message: %s\r\n", msg);
    da36:	693a      	ldr	r2, [r7, #16]
    da38:	4b20      	ldr	r3, [pc, #128]	; (dabc <task_1s+0x168>)
    da3a:	0011      	movs	r1, r2
    da3c:	0018      	movs	r0, r3
    da3e:	4b1b      	ldr	r3, [pc, #108]	; (daac <task_1s+0x158>)
    da40:	4798      	blx	r3
                    }
                }
    da42:	e7c3      	b.n	d9cc <task_1s+0x78>
                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
                    if (NULL == msg) {
                        /* No more message to process. */
                        break;
    da44:	46c0      	nop			; (mov r8, r8)
                        printf("main: received message: %s\r\n", msg);
                    }
                }

                /* Subscribe to receive pending messages. */
                if (gu32MsTicks - gu32subscribeDelay > MAIN_PUBNUB_SUBSCRIBE_INTERVAL) {
    da46:	4b1e      	ldr	r3, [pc, #120]	; (dac0 <task_1s+0x16c>)
    da48:	681a      	ldr	r2, [r3, #0]
    da4a:	4b1e      	ldr	r3, [pc, #120]	; (dac4 <task_1s+0x170>)
    da4c:	681b      	ldr	r3, [r3, #0]
    da4e:	1ad2      	subs	r2, r2, r3
    da50:	23fa      	movs	r3, #250	; 0xfa
    da52:	009b      	lsls	r3, r3, #2
    da54:	429a      	cmp	r2, r3
    da56:	d90e      	bls.n	da76 <task_1s+0x122>
                    gu32subscribeDelay = gu32MsTicks;
    da58:	4b19      	ldr	r3, [pc, #100]	; (dac0 <task_1s+0x16c>)
    da5a:	681a      	ldr	r2, [r3, #0]
    da5c:	4b19      	ldr	r3, [pc, #100]	; (dac4 <task_1s+0x170>)
    da5e:	601a      	str	r2, [r3, #0]
                    printf("main: subscribe event, interval.\r\n");
    da60:	4b19      	ldr	r3, [pc, #100]	; (dac8 <task_1s+0x174>)
    da62:	0018      	movs	r0, r3
    da64:	4b0a      	ldr	r3, [pc, #40]	; (da90 <task_1s+0x13c>)
    da66:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    da68:	4b07      	ldr	r3, [pc, #28]	; (da88 <task_1s+0x134>)
    da6a:	681b      	ldr	r3, [r3, #0]
    da6c:	4a09      	ldr	r2, [pc, #36]	; (da94 <task_1s+0x140>)
    da6e:	0011      	movs	r1, r2
    da70:	0018      	movs	r0, r3
    da72:	4b09      	ldr	r3, [pc, #36]	; (da98 <task_1s+0x144>)
    da74:	4798      	blx	r3
                }
            }
        }    
        
       display_led_test_1Hz();
    da76:	4b15      	ldr	r3, [pc, #84]	; (dacc <task_1s+0x178>)
    da78:	4798      	blx	r3
    }
    da7a:	e776      	b.n	d96a <task_1s+0x16>
    da7c:	0000c145 	.word	0x0000c145
    da80:	0000be4d 	.word	0x0000be4d
    da84:	20003e78 	.word	0x20003e78
    da88:	20003e90 	.word	0x20003e90
    da8c:	00012174 	.word	0x00012174
    da90:	0000fe51 	.word	0x0000fe51
    da94:	20000024 	.word	0x20000024
    da98:	0000e9d1 	.word	0x0000e9d1
    da9c:	0000eb4d 	.word	0x0000eb4d
    daa0:	00012194 	.word	0x00012194
    daa4:	000100b3 	.word	0x000100b3
    daa8:	00012198 	.word	0x00012198
    daac:	0000fd31 	.word	0x0000fd31
    dab0:	000121c4 	.word	0x000121c4
    dab4:	0000d0bd 	.word	0x0000d0bd
    dab8:	000121c8 	.word	0x000121c8
    dabc:	000121cc 	.word	0x000121cc
    dac0:	20003e7c 	.word	0x20003e7c
    dac4:	20003e84 	.word	0x20003e84
    dac8:	000121ec 	.word	0x000121ec
    dacc:	00000d95 	.word	0x00000d95

0000dad0 <task_33Hz>:

}

#include "tm1640.h"
static void task_33Hz(void *args)
{
    dad0:	b580      	push	{r7, lr}
    dad2:	b084      	sub	sp, #16
    dad4:	af00      	add	r7, sp, #0
    dad6:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    // Turn on the display
    tm1640_display_on(1);
    dad8:	2001      	movs	r0, #1
    dada:	4b09      	ldr	r3, [pc, #36]	; (db00 <task_33Hz+0x30>)
    dadc:	4798      	blx	r3

    lastTimer = xTaskGetTickCount();
    dade:	4b09      	ldr	r3, [pc, #36]	; (db04 <task_33Hz+0x34>)
    dae0:	4798      	blx	r3
    dae2:	0003      	movs	r3, r0
    dae4:	60bb      	str	r3, [r7, #8]
    TickType_t delay_time = pdMS_TO_TICKS(MAIN_33HZ_TASK_INTERVAL);        
    dae6:	231e      	movs	r3, #30
    dae8:	60fb      	str	r3, [r7, #12]

    while(1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    daea:	68fa      	ldr	r2, [r7, #12]
    daec:	2308      	movs	r3, #8
    daee:	18fb      	adds	r3, r7, r3
    daf0:	0011      	movs	r1, r2
    daf2:	0018      	movs	r0, r3
    daf4:	4b04      	ldr	r3, [pc, #16]	; (db08 <task_33Hz+0x38>)
    daf6:	4798      	blx	r3

        display_update_33Hz();
    daf8:	4b04      	ldr	r3, [pc, #16]	; (db0c <task_33Hz+0x3c>)
    dafa:	4798      	blx	r3

    }
    dafc:	e7f5      	b.n	daea <task_33Hz+0x1a>
    dafe:	46c0      	nop			; (mov r8, r8)
    db00:	00001239 	.word	0x00001239
    db04:	0000c145 	.word	0x0000c145
    db08:	0000be4d 	.word	0x0000be4d
    db0c:	00000c89 	.word	0x00000c89

0000db10 <task_Buzzer>:
}

static void task_Buzzer(void *args)
{
    db10:	b590      	push	{r4, r7, lr}
    db12:	b099      	sub	sp, #100	; 0x64
    db14:	af00      	add	r7, sp, #0
    db16:	6078      	str	r0, [r7, #4]
    struct tc_module buzz_module;
    struct tc_config buzz_config;

    TickType_t lastTimer;

    tc_get_config_defaults(&buzz_config);
    db18:	230c      	movs	r3, #12
    db1a:	18fb      	adds	r3, r7, r3
    db1c:	0018      	movs	r0, r3
    db1e:	4b26      	ldr	r3, [pc, #152]	; (dbb8 <task_Buzzer+0xa8>)
    db20:	4798      	blx	r3
    buzz_config.clock_source = GCLK_GENERATOR_5; // ~500kHz
    db22:	230c      	movs	r3, #12
    db24:	18fb      	adds	r3, r7, r3
    db26:	2205      	movs	r2, #5
    db28:	701a      	strb	r2, [r3, #0]
    buzz_config.run_in_standby = true;
    db2a:	230c      	movs	r3, #12
    db2c:	18fb      	adds	r3, r7, r3
    db2e:	2201      	movs	r2, #1
    db30:	705a      	strb	r2, [r3, #1]
    buzz_config.counter_size = TC_COUNTER_SIZE_8BIT;
    db32:	230c      	movs	r3, #12
    db34:	18fb      	adds	r3, r7, r3
    db36:	2204      	movs	r2, #4
    db38:	709a      	strb	r2, [r3, #2]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = true;
    db3a:	230c      	movs	r3, #12
    db3c:	18fb      	adds	r3, r7, r3
    db3e:	2201      	movs	r2, #1
    db40:	771a      	strb	r2, [r3, #28]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = (PINMUX_PB11E_TC5_WO1) >> 16;
    db42:	230c      	movs	r3, #12
    db44:	18fb      	adds	r3, r7, r3
    db46:	222b      	movs	r2, #43	; 0x2b
    db48:	621a      	str	r2, [r3, #32]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = PINMUX_PB11E_TC5_WO1;
    db4a:	230c      	movs	r3, #12
    db4c:	18fb      	adds	r3, r7, r3
    db4e:	4a1b      	ldr	r2, [pc, #108]	; (dbbc <task_Buzzer+0xac>)
    db50:	625a      	str	r2, [r3, #36]	; 0x24
    buzz_config.counter_8_bit.period = (500000 / BUZZER_FREQUENCY) / 2;
    db52:	230c      	movs	r3, #12
    db54:	18fb      	adds	r3, r7, r3
    db56:	2229      	movs	r2, #41	; 0x29
    db58:	213e      	movs	r1, #62	; 0x3e
    db5a:	5499      	strb	r1, [r3, r2]
    buzz_config.counter_8_bit.value = 0;
    db5c:	230c      	movs	r3, #12
    db5e:	18fb      	adds	r3, r7, r3
    db60:	2228      	movs	r2, #40	; 0x28
    db62:	2100      	movs	r1, #0
    db64:	5499      	strb	r1, [r3, r2]

    tc_init(&buzz_module, TC5, &buzz_config);    
    db66:	230c      	movs	r3, #12
    db68:	18fa      	adds	r2, r7, r3
    db6a:	4915      	ldr	r1, [pc, #84]	; (dbc0 <task_Buzzer+0xb0>)
    db6c:	2340      	movs	r3, #64	; 0x40
    db6e:	18fb      	adds	r3, r7, r3
    db70:	0018      	movs	r0, r3
    db72:	4b14      	ldr	r3, [pc, #80]	; (dbc4 <task_Buzzer+0xb4>)
    db74:	4798      	blx	r3

    while(1) {
        xSemaphoreTake(buzzer_sem, portMAX_DELAY);
    db76:	4b14      	ldr	r3, [pc, #80]	; (dbc8 <task_Buzzer+0xb8>)
    db78:	6818      	ldr	r0, [r3, #0]
    db7a:	2301      	movs	r3, #1
    db7c:	425a      	negs	r2, r3
    db7e:	2300      	movs	r3, #0
    db80:	2100      	movs	r1, #0
    db82:	4c12      	ldr	r4, [pc, #72]	; (dbcc <task_Buzzer+0xbc>)
    db84:	47a0      	blx	r4

        // When another task gives up the semaphore, the buzzer will run 
        // for the set delay time.
        tc_set_count_value(&buzz_module, 0);
    db86:	2340      	movs	r3, #64	; 0x40
    db88:	18fb      	adds	r3, r7, r3
    db8a:	2100      	movs	r1, #0
    db8c:	0018      	movs	r0, r3
    db8e:	4b10      	ldr	r3, [pc, #64]	; (dbd0 <task_Buzzer+0xc0>)
    db90:	4798      	blx	r3
        tc_enable(&buzz_module);
    db92:	2340      	movs	r3, #64	; 0x40
    db94:	18fb      	adds	r3, r7, r3
    db96:	0018      	movs	r0, r3
    db98:	4b0e      	ldr	r3, [pc, #56]	; (dbd4 <task_Buzzer+0xc4>)
    db9a:	4798      	blx	r3
        lastTimer = xTaskGetTickCount();
    db9c:	4b0e      	ldr	r3, [pc, #56]	; (dbd8 <task_Buzzer+0xc8>)
    db9e:	4798      	blx	r3
    dba0:	0003      	movs	r3, r0
    dba2:	65fb      	str	r3, [r7, #92]	; 0x5c
        vTaskDelay(pdMS_TO_TICKS(BUZZER_ON_TIME));
    dba4:	20fa      	movs	r0, #250	; 0xfa
    dba6:	4b0d      	ldr	r3, [pc, #52]	; (dbdc <task_Buzzer+0xcc>)
    dba8:	4798      	blx	r3
        tc_disable(&buzz_module);
    dbaa:	2340      	movs	r3, #64	; 0x40
    dbac:	18fb      	adds	r3, r7, r3
    dbae:	0018      	movs	r0, r3
    dbb0:	4b0b      	ldr	r3, [pc, #44]	; (dbe0 <task_Buzzer+0xd0>)
    dbb2:	4798      	blx	r3
    }
    dbb4:	e7df      	b.n	db76 <task_Buzzer+0x66>
    dbb6:	46c0      	nop			; (mov r8, r8)
    dbb8:	0000d399 	.word	0x0000d399
    dbbc:	002b0004 	.word	0x002b0004
    dbc0:	42003400 	.word	0x42003400
    dbc4:	00000321 	.word	0x00000321
    dbc8:	20004618 	.word	0x20004618
    dbcc:	0000b5d9 	.word	0x0000b5d9
    dbd0:	0000077d 	.word	0x0000077d
    dbd4:	0000d421 	.word	0x0000d421
    dbd8:	0000c145 	.word	0x0000c145
    dbdc:	0000bf15 	.word	0x0000bf15
    dbe0:	0000d459 	.word	0x0000d459

0000dbe4 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);
void vApplicationIdleHook(void)
{      
    dbe4:	b580      	push	{r7, lr}
    dbe6:	af00      	add	r7, sp, #0
   m2m_wifi_handle_events(NULL);   
    dbe8:	2000      	movs	r0, #0
    dbea:	4b03      	ldr	r3, [pc, #12]	; (dbf8 <vApplicationIdleHook+0x14>)
    dbec:	4798      	blx	r3
   display_idle();
    dbee:	4b03      	ldr	r3, [pc, #12]	; (dbfc <vApplicationIdleHook+0x18>)
    dbf0:	4798      	blx	r3
}
    dbf2:	46c0      	nop			; (mov r8, r8)
    dbf4:	46bd      	mov	sp, r7
    dbf6:	bd80      	pop	{r7, pc}
    dbf8:	00003801 	.word	0x00003801
    dbfc:	00000c29 	.word	0x00000c29

0000dc00 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    dc00:	b580      	push	{r7, lr}
    dc02:	b082      	sub	sp, #8
    dc04:	af00      	add	r7, sp, #0
    dc06:	6078      	str	r0, [r7, #4]
    dc08:	6039      	str	r1, [r7, #0]
    printf("Stack overflow!: %s\n\r", pcTaskName);
    dc0a:	683a      	ldr	r2, [r7, #0]
    dc0c:	4b02      	ldr	r3, [pc, #8]	; (dc18 <vApplicationStackOverflowHook+0x18>)
    dc0e:	0011      	movs	r1, r2
    dc10:	0018      	movs	r0, r3
    dc12:	4b02      	ldr	r3, [pc, #8]	; (dc1c <vApplicationStackOverflowHook+0x1c>)
    dc14:	4798      	blx	r3
    while (1) {}
    dc16:	e7fe      	b.n	dc16 <vApplicationStackOverflowHook+0x16>
    dc18:	00012210 	.word	0x00012210
    dc1c:	0000fd31 	.word	0x0000fd31

0000dc20 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook(void);
void vApplicationMallocFailedHook(void)
{
    dc20:	b580      	push	{r7, lr}
    dc22:	af00      	add	r7, sp, #0
    printf("Malloc failed!\n\r");
    dc24:	4b02      	ldr	r3, [pc, #8]	; (dc30 <vApplicationMallocFailedHook+0x10>)
    dc26:	0018      	movs	r0, r3
    dc28:	4b02      	ldr	r3, [pc, #8]	; (dc34 <vApplicationMallocFailedHook+0x14>)
    dc2a:	4798      	blx	r3
    while(1) {}
    dc2c:	e7fe      	b.n	dc2c <vApplicationMallocFailedHook+0xc>
    dc2e:	46c0      	nop			; (mov r8, r8)
    dc30:	00012228 	.word	0x00012228
    dc34:	0000fd31 	.word	0x0000fd31

0000dc38 <main>:
 * Publish and subscribe event to pubnub.
 *
 * \return program return value.
 */
int main(void)
{
    dc38:	b590      	push	{r4, r7, lr}
    dc3a:	b08d      	sub	sp, #52	; 0x34
    dc3c:	af02      	add	r7, sp, #8
	int8_t s8InitStatus;
	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;	

	/* Initialize the board. */
	system_init();
    dc3e:	4b5b      	ldr	r3, [pc, #364]	; (ddac <main+0x174>)
    dc40:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    dc42:	4b5b      	ldr	r3, [pc, #364]	; (ddb0 <main+0x178>)
    dc44:	4798      	blx	r3

	/* Output example information. */
	//printf(STRING_HEADER);

	/* Initialize the delay driver. */
	delay_init();	
    dc46:	4b5b      	ldr	r3, [pc, #364]	; (ddb4 <main+0x17c>)
    dc48:	4798      	blx	r3

    /* Initialize the display */
    display_init();
    dc4a:	4b5b      	ldr	r3, [pc, #364]	; (ddb8 <main+0x180>)
    dc4c:	4798      	blx	r3

	/* Initialize the Button/LED. */
	//configure_button_led();

	/* Initialize the Wi-Fi BSP. */
	nm_bsp_init();
    dc4e:	4b5b      	ldr	r3, [pc, #364]	; (ddbc <main+0x184>)
    dc50:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&wifiInitParam, 0, sizeof(tstrWifiInitParam));
    dc52:	230c      	movs	r3, #12
    dc54:	18fb      	adds	r3, r7, r3
    dc56:	2218      	movs	r2, #24
    dc58:	2100      	movs	r1, #0
    dc5a:	0018      	movs	r0, r3
    dc5c:	4b58      	ldr	r3, [pc, #352]	; (ddc0 <main+0x188>)
    dc5e:	4798      	blx	r3
	wifiInitParam.pfAppWifiCb = m2m_wifi_state;
    dc60:	230c      	movs	r3, #12
    dc62:	18fb      	adds	r3, r7, r3
    dc64:	4a57      	ldr	r2, [pc, #348]	; (ddc4 <main+0x18c>)
    dc66:	601a      	str	r2, [r3, #0]

    gu32connectStartTime = gu32MsTicks;
    dc68:	4b57      	ldr	r3, [pc, #348]	; (ddc8 <main+0x190>)
    dc6a:	681a      	ldr	r2, [r3, #0]
    dc6c:	4b57      	ldr	r3, [pc, #348]	; (ddcc <main+0x194>)
    dc6e:	601a      	str	r2, [r3, #0]
	/* Initialize WINC1500 Wi-Fi driver with data and status callbacks. */
	s8InitStatus = m2m_wifi_init(&wifiInitParam);
    dc70:	2327      	movs	r3, #39	; 0x27
    dc72:	18fc      	adds	r4, r7, r3
    dc74:	230c      	movs	r3, #12
    dc76:	18fb      	adds	r3, r7, r3
    dc78:	0018      	movs	r0, r3
    dc7a:	4b55      	ldr	r3, [pc, #340]	; (ddd0 <main+0x198>)
    dc7c:	4798      	blx	r3
    dc7e:	0003      	movs	r3, r0
    dc80:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != s8InitStatus) {
    dc82:	2327      	movs	r3, #39	; 0x27
    dc84:	18fb      	adds	r3, r7, r3
    dc86:	781b      	ldrb	r3, [r3, #0]
    dc88:	b25b      	sxtb	r3, r3
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	d004      	beq.n	dc98 <main+0x60>
		printf("main: m2m_wifi_init call error!\r\n");
    dc8e:	4b51      	ldr	r3, [pc, #324]	; (ddd4 <main+0x19c>)
    dc90:	0018      	movs	r0, r3
    dc92:	4b51      	ldr	r3, [pc, #324]	; (ddd8 <main+0x1a0>)
    dc94:	4798      	blx	r3
		while (1) {
		}
    dc96:	e7fe      	b.n	dc96 <main+0x5e>
	}

	/* Initialize Socket API. */
	socketInit();
    dc98:	4b50      	ldr	r3, [pc, #320]	; (dddc <main+0x1a4>)
    dc9a:	4798      	blx	r3
	registerSocketCallback(m2m_tcp_socket_handler, socket_resolve_cb);
    dc9c:	4a50      	ldr	r2, [pc, #320]	; (dde0 <main+0x1a8>)
    dc9e:	4b51      	ldr	r3, [pc, #324]	; (dde4 <main+0x1ac>)
    dca0:	0011      	movs	r1, r2
    dca2:	0018      	movs	r0, r3
    dca4:	4b50      	ldr	r3, [pc, #320]	; (dde8 <main+0x1b0>)
    dca6:	4798      	blx	r3

	/* Read MAC address to customize device name and AP name if enabled. */
	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
    dca8:	1cfa      	adds	r2, r7, #3
    dcaa:	1d3b      	adds	r3, r7, #4
    dcac:	0011      	movs	r1, r2
    dcae:	0018      	movs	r0, r3
    dcb0:	4b4e      	ldr	r3, [pc, #312]	; (ddec <main+0x1b4>)
    dcb2:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
    dcb4:	1cfb      	adds	r3, r7, #3
    dcb6:	781b      	ldrb	r3, [r3, #0]
    dcb8:	2b00      	cmp	r3, #0
    dcba:	d108      	bne.n	dcce <main+0x96>
		printf("main: MAC address fuse bit has not been configured!\r\n");
    dcbc:	4b4c      	ldr	r3, [pc, #304]	; (ddf0 <main+0x1b8>)
    dcbe:	0018      	movs	r0, r3
    dcc0:	4b45      	ldr	r3, [pc, #276]	; (ddd8 <main+0x1a0>)
    dcc2:	4798      	blx	r3
		printf("main: Use m2m_wifi_set_mac_address() API to set MAC address via software.\r\n");
    dcc4:	4b4b      	ldr	r3, [pc, #300]	; (ddf4 <main+0x1bc>)
    dcc6:	0018      	movs	r0, r3
    dcc8:	4b43      	ldr	r3, [pc, #268]	; (ddd8 <main+0x1a0>)
    dcca:	4798      	blx	r3
		while (1) {
		}
    dccc:	e7fe      	b.n	dccc <main+0x94>
	}
	m2m_wifi_get_mac_address(mac_addr);
    dcce:	1d3b      	adds	r3, r7, #4
    dcd0:	0018      	movs	r0, r3
    dcd2:	4b49      	ldr	r3, [pc, #292]	; (ddf8 <main+0x1c0>)
    dcd4:	4798      	blx	r3
	set_dev_name_to_mac((uint8 *)PubNubChannel, mac_addr);
    dcd6:	1d3a      	adds	r2, r7, #4
    dcd8:	4b48      	ldr	r3, [pc, #288]	; (ddfc <main+0x1c4>)
    dcda:	0011      	movs	r1, r2
    dcdc:	0018      	movs	r0, r3
    dcde:	4b48      	ldr	r3, [pc, #288]	; (de00 <main+0x1c8>)
    dce0:	4798      	blx	r3
	printf("\r\n");
    dce2:	4b48      	ldr	r3, [pc, #288]	; (de04 <main+0x1cc>)
    dce4:	0018      	movs	r0, r3
    dce6:	4b3c      	ldr	r3, [pc, #240]	; (ddd8 <main+0x1a0>)
    dce8:	4798      	blx	r3

	/* Initialize PubNub API. */
	printf("main: PubNub configured with following settings:\r\n");
    dcea:	4b47      	ldr	r3, [pc, #284]	; (de08 <main+0x1d0>)
    dcec:	0018      	movs	r0, r3
    dcee:	4b3a      	ldr	r3, [pc, #232]	; (ddd8 <main+0x1a0>)
    dcf0:	4798      	blx	r3
	printf("main:  - Publish key: \"%s\", Subscribe key: \"%s\", Channel: \"%s\".\r\n\r\n",
    dcf2:	4b42      	ldr	r3, [pc, #264]	; (ddfc <main+0x1c4>)
    dcf4:	4a45      	ldr	r2, [pc, #276]	; (de0c <main+0x1d4>)
    dcf6:	4946      	ldr	r1, [pc, #280]	; (de10 <main+0x1d8>)
    dcf8:	4846      	ldr	r0, [pc, #280]	; (de14 <main+0x1dc>)
    dcfa:	4c47      	ldr	r4, [pc, #284]	; (de18 <main+0x1e0>)
    dcfc:	47a0      	blx	r4
	PubNubPublishKey, PubNubSubscribeKey, PubNubChannel);
	pPubNubCfg = pubnub_get_ctx(0);
    dcfe:	2000      	movs	r0, #0
    dd00:	4b46      	ldr	r3, [pc, #280]	; (de1c <main+0x1e4>)
    dd02:	4798      	blx	r3
    dd04:	0002      	movs	r2, r0
    dd06:	4b46      	ldr	r3, [pc, #280]	; (de20 <main+0x1e8>)
    dd08:	601a      	str	r2, [r3, #0]
	pubnub_init(pPubNubCfg, PubNubPublishKey, PubNubSubscribeKey);
    dd0a:	4b45      	ldr	r3, [pc, #276]	; (de20 <main+0x1e8>)
    dd0c:	681b      	ldr	r3, [r3, #0]
    dd0e:	4a3f      	ldr	r2, [pc, #252]	; (de0c <main+0x1d4>)
    dd10:	493f      	ldr	r1, [pc, #252]	; (de10 <main+0x1d8>)
    dd12:	0018      	movs	r0, r3
    dd14:	4b43      	ldr	r3, [pc, #268]	; (de24 <main+0x1ec>)
    dd16:	4798      	blx	r3

	/* Connect to AP using Wi-Fi settings from main.h. */
	printf("main: Wi-Fi connecting to AP using hardcoded credentials...\r\n");
    dd18:	4b43      	ldr	r3, [pc, #268]	; (de28 <main+0x1f0>)
    dd1a:	0018      	movs	r0, r3
    dd1c:	4b2e      	ldr	r3, [pc, #184]	; (ddd8 <main+0x1a0>)
    dd1e:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    dd20:	4a42      	ldr	r2, [pc, #264]	; (de2c <main+0x1f4>)
    dd22:	4843      	ldr	r0, [pc, #268]	; (de30 <main+0x1f8>)
    dd24:	23ff      	movs	r3, #255	; 0xff
    dd26:	9300      	str	r3, [sp, #0]
    dd28:	0013      	movs	r3, r2
    dd2a:	2202      	movs	r2, #2
    dd2c:	211b      	movs	r1, #27
    dd2e:	4c41      	ldr	r4, [pc, #260]	; (de34 <main+0x1fc>)
    dd30:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);    

    xTaskCreate(task_3s, "task_3s", configMINIMAL_STACK_SIZE, 0, TASK_3S_PRIORITY, NULL);
    dd32:	2380      	movs	r3, #128	; 0x80
    dd34:	009a      	lsls	r2, r3, #2
    dd36:	4940      	ldr	r1, [pc, #256]	; (de38 <main+0x200>)
    dd38:	4840      	ldr	r0, [pc, #256]	; (de3c <main+0x204>)
    dd3a:	2300      	movs	r3, #0
    dd3c:	9301      	str	r3, [sp, #4]
    dd3e:	2301      	movs	r3, #1
    dd40:	9300      	str	r3, [sp, #0]
    dd42:	2300      	movs	r3, #0
    dd44:	4c3e      	ldr	r4, [pc, #248]	; (de40 <main+0x208>)
    dd46:	47a0      	blx	r4
    xTaskCreate(task_1s, "task_1s", configMINIMAL_STACK_SIZE, 0, TASK_1S_PRIORITY, NULL);    
    dd48:	2380      	movs	r3, #128	; 0x80
    dd4a:	009a      	lsls	r2, r3, #2
    dd4c:	493d      	ldr	r1, [pc, #244]	; (de44 <main+0x20c>)
    dd4e:	483e      	ldr	r0, [pc, #248]	; (de48 <main+0x210>)
    dd50:	2300      	movs	r3, #0
    dd52:	9301      	str	r3, [sp, #4]
    dd54:	2301      	movs	r3, #1
    dd56:	9300      	str	r3, [sp, #0]
    dd58:	2300      	movs	r3, #0
    dd5a:	4c39      	ldr	r4, [pc, #228]	; (de40 <main+0x208>)
    dd5c:	47a0      	blx	r4
    xTaskCreate(task_33Hz, "task_33Hz", configMINIMAL_STACK_SIZE, 0, TASK_50HZ_PRIORITY, NULL); 
    dd5e:	2380      	movs	r3, #128	; 0x80
    dd60:	009a      	lsls	r2, r3, #2
    dd62:	493a      	ldr	r1, [pc, #232]	; (de4c <main+0x214>)
    dd64:	483a      	ldr	r0, [pc, #232]	; (de50 <main+0x218>)
    dd66:	2300      	movs	r3, #0
    dd68:	9301      	str	r3, [sp, #4]
    dd6a:	2301      	movs	r3, #1
    dd6c:	9300      	str	r3, [sp, #0]
    dd6e:	2300      	movs	r3, #0
    dd70:	4c33      	ldr	r4, [pc, #204]	; (de40 <main+0x208>)
    dd72:	47a0      	blx	r4
    xTaskCreate(task_Buzzer, "task_Buzzer", 100, 0, tskIDLE_PRIORITY, NULL);
    dd74:	4937      	ldr	r1, [pc, #220]	; (de54 <main+0x21c>)
    dd76:	4838      	ldr	r0, [pc, #224]	; (de58 <main+0x220>)
    dd78:	2300      	movs	r3, #0
    dd7a:	9301      	str	r3, [sp, #4]
    dd7c:	2300      	movs	r3, #0
    dd7e:	9300      	str	r3, [sp, #0]
    dd80:	2300      	movs	r3, #0
    dd82:	2264      	movs	r2, #100	; 0x64
    dd84:	4c2e      	ldr	r4, [pc, #184]	; (de40 <main+0x208>)
    dd86:	47a0      	blx	r4
    display_mutex = xSemaphoreCreateMutex();
    dd88:	2001      	movs	r0, #1
    dd8a:	4b34      	ldr	r3, [pc, #208]	; (de5c <main+0x224>)
    dd8c:	4798      	blx	r3
    dd8e:	0002      	movs	r2, r0
    dd90:	4b33      	ldr	r3, [pc, #204]	; (de60 <main+0x228>)
    dd92:	601a      	str	r2, [r3, #0]
    buzzer_sem = xSemaphoreCreateBinary();
    dd94:	2203      	movs	r2, #3
    dd96:	2100      	movs	r1, #0
    dd98:	2001      	movs	r0, #1
    dd9a:	4b32      	ldr	r3, [pc, #200]	; (de64 <main+0x22c>)
    dd9c:	4798      	blx	r3
    dd9e:	0002      	movs	r2, r0
    dda0:	4b31      	ldr	r3, [pc, #196]	; (de68 <main+0x230>)
    dda2:	601a      	str	r2, [r3, #0]

    vTaskStartScheduler();
    dda4:	4b31      	ldr	r3, [pc, #196]	; (de6c <main+0x234>)
    dda6:	4798      	blx	r3

    while(1) {}
    dda8:	e7fe      	b.n	dda8 <main+0x170>
    ddaa:	46c0      	nop			; (mov r8, r8)
    ddac:	0000a90d 	.word	0x0000a90d
    ddb0:	0000d605 	.word	0x0000d605
    ddb4:	00000115 	.word	0x00000115
    ddb8:	00000ba9 	.word	0x00000ba9
    ddbc:	00001ac5 	.word	0x00001ac5
    ddc0:	0000f77b 	.word	0x0000f77b
    ddc4:	0000d52d 	.word	0x0000d52d
    ddc8:	20003e7c 	.word	0x20003e7c
    ddcc:	20003e88 	.word	0x20003e88
    ddd0:	00003675 	.word	0x00003675
    ddd4:	0001223c 	.word	0x0001223c
    ddd8:	0000fe51 	.word	0x0000fe51
    dddc:	00006629 	.word	0x00006629
    dde0:	0000d4d1 	.word	0x0000d4d1
    dde4:	0000d49d 	.word	0x0000d49d
    dde8:	00006679 	.word	0x00006679
    ddec:	00003cd9 	.word	0x00003cd9
    ddf0:	00012260 	.word	0x00012260
    ddf4:	00012298 	.word	0x00012298
    ddf8:	00003d4d 	.word	0x00003d4d
    ddfc:	20000024 	.word	0x20000024
    de00:	0000d679 	.word	0x0000d679
    de04:	000122e4 	.word	0x000122e4
    de08:	000122e8 	.word	0x000122e8
    de0c:	00011fec 	.word	0x00011fec
    de10:	00011fe4 	.word	0x00011fe4
    de14:	0001231c 	.word	0x0001231c
    de18:	0000fd31 	.word	0x0000fd31
    de1c:	0000e705 	.word	0x0000e705
    de20:	20003e90 	.word	0x20003e90
    de24:	0000e755 	.word	0x0000e755
    de28:	00012360 	.word	0x00012360
    de2c:	000120a8 	.word	0x000120a8
    de30:	000120b4 	.word	0x000120b4
    de34:	0000381d 	.word	0x0000381d
    de38:	000123a0 	.word	0x000123a0
    de3c:	0000d7ad 	.word	0x0000d7ad
    de40:	0000bbd5 	.word	0x0000bbd5
    de44:	000123a8 	.word	0x000123a8
    de48:	0000d955 	.word	0x0000d955
    de4c:	000123b0 	.word	0x000123b0
    de50:	0000dad1 	.word	0x0000dad1
    de54:	000123bc 	.word	0x000123bc
    de58:	0000db11 	.word	0x0000db11
    de5c:	0000b299 	.word	0x0000b299
    de60:	200045fc 	.word	0x200045fc
    de64:	0000b1a5 	.word	0x0000b1a5
    de68:	20004618 	.word	0x20004618
    de6c:	0000bf71 	.word	0x0000bf71

0000de70 <HardFault_Handler>:

	return 0;
}

void HardFault_Handler(void)
{
    de70:	b580      	push	{r7, lr}
    de72:	af00      	add	r7, sp, #0
    __asm volatile
    de74:	f3ef 8009 	mrs	r0, PSP
    de78:	6981      	ldr	r1, [r0, #24]
    (
        "mrs r0,psp         \n"
        "ldr r1,[r0,#24]    \n"    // r1 will contain the address where the hard fault occurred
    );    
}
    de7a:	46c0      	nop			; (mov r8, r8)
    de7c:	46bd      	mov	sp, r7
    de7e:	bd80      	pop	{r7, pc}

0000de80 <handle_transaction>:

static struct pubnub m_aCtx[PUBNUB_CTX_MAX];
struct sockaddr_in pubnub_origin_addr;

static void handle_transaction(pubnub_t *pb)
{
    de80:	b590      	push	{r4, r7, lr}
    de82:	b0dd      	sub	sp, #372	; 0x174
    de84:	af00      	add	r7, sp, #0
    de86:	6078      	str	r0, [r7, #4]
	if (pb->state == PS_WAIT_SEND) {
    de88:	687b      	ldr	r3, [r7, #4]
    de8a:	2252      	movs	r2, #82	; 0x52
    de8c:	5c9b      	ldrb	r3, [r3, r2]
    de8e:	2b03      	cmp	r3, #3
    de90:	d126      	bne.n	dee0 <handle_transaction+0x60>
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
    de92:	4b1e      	ldr	r3, [pc, #120]	; (df0c <handle_transaction+0x8c>)
    de94:	22b8      	movs	r2, #184	; 0xb8
    de96:	0052      	lsls	r2, r2, #1
    de98:	4694      	mov	ip, r2
    de9a:	44bc      	add	ip, r7
    de9c:	4463      	add	r3, ip
    de9e:	0018      	movs	r0, r3
    dea0:	2366      	movs	r3, #102	; 0x66
    dea2:	33ff      	adds	r3, #255	; 0xff
    dea4:	001a      	movs	r2, r3
    dea6:	2100      	movs	r1, #0
    dea8:	4b19      	ldr	r3, [pc, #100]	; (df10 <handle_transaction+0x90>)
    deaa:	4798      	blx	r3
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
    deac:	687b      	ldr	r3, [r7, #4]
    deae:	3354      	adds	r3, #84	; 0x54
    deb0:	001a      	movs	r2, r3
    deb2:	4b18      	ldr	r3, [pc, #96]	; (df14 <handle_transaction+0x94>)
    deb4:	4918      	ldr	r1, [pc, #96]	; (df18 <handle_transaction+0x98>)
    deb6:	2008      	movs	r0, #8
    deb8:	1838      	adds	r0, r7, r0
    deba:	4c18      	ldr	r4, [pc, #96]	; (df1c <handle_transaction+0x9c>)
    debc:	47a0      	blx	r4
		send(pb->tcp_socket, buf, strlen(buf), 0);
    debe:	687b      	ldr	r3, [r7, #4]
    dec0:	2253      	movs	r2, #83	; 0x53
    dec2:	569c      	ldrsb	r4, [r3, r2]
    dec4:	2308      	movs	r3, #8
    dec6:	18fb      	adds	r3, r7, r3
    dec8:	0018      	movs	r0, r3
    deca:	4b15      	ldr	r3, [pc, #84]	; (df20 <handle_transaction+0xa0>)
    decc:	4798      	blx	r3
    dece:	0003      	movs	r3, r0
    ded0:	b29a      	uxth	r2, r3
    ded2:	2308      	movs	r3, #8
    ded4:	18f9      	adds	r1, r7, r3
    ded6:	2300      	movs	r3, #0
    ded8:	0020      	movs	r0, r4
    deda:	4c12      	ldr	r4, [pc, #72]	; (df24 <handle_transaction+0xa4>)
    dedc:	47a0      	blx	r4
	} else if (pb->state == PS_WAIT_RECV) {
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
	} else if (pb->state == PS_RECV) {
	}
}
    dede:	e010      	b.n	df02 <handle_transaction+0x82>
	if (pb->state == PS_WAIT_SEND) {
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
		send(pb->tcp_socket, buf, strlen(buf), 0);
		PUBNUB_PRINTF(("handle_transaction: buf = %s", buf));
	} else if (pb->state == PS_WAIT_RECV) {
    dee0:	687b      	ldr	r3, [r7, #4]
    dee2:	2252      	movs	r2, #82	; 0x52
    dee4:	5c9b      	ldrb	r3, [r3, r2]
    dee6:	2b04      	cmp	r3, #4
    dee8:	d10b      	bne.n	df02 <handle_transaction+0x82>
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    deea:	687b      	ldr	r3, [r7, #4]
    deec:	2253      	movs	r2, #83	; 0x53
    deee:	5698      	ldrsb	r0, [r3, r2]
    def0:	687b      	ldr	r3, [r7, #4]
    def2:	3354      	adds	r3, #84	; 0x54
    def4:	0019      	movs	r1, r3
    def6:	4c0c      	ldr	r4, [pc, #48]	; (df28 <handle_transaction+0xa8>)
    def8:	2380      	movs	r3, #128	; 0x80
    defa:	005a      	lsls	r2, r3, #1
    defc:	0023      	movs	r3, r4
    defe:	4c0b      	ldr	r4, [pc, #44]	; (df2c <handle_transaction+0xac>)
    df00:	47a0      	blx	r4
	} else if (pb->state == PS_RECV) {
	}
}
    df02:	46c0      	nop			; (mov r8, r8)
    df04:	46bd      	mov	sp, r7
    df06:	b05d      	add	sp, #372	; 0x174
    df08:	bd90      	pop	{r4, r7, pc}
    df0a:	46c0      	nop			; (mov r8, r8)
    df0c:	fffffe98 	.word	0xfffffe98
    df10:	0000f77b 	.word	0x0000f77b
    df14:	000123c8 	.word	0x000123c8
    df18:	000123dc 	.word	0x000123dc
    df1c:	0001003d 	.word	0x0001003d
    df20:	000100a5 	.word	0x000100a5
    df24:	0000690d 	.word	0x0000690d
    df28:	00007530 	.word	0x00007530
    df2c:	00006a71 	.word	0x00006a71

0000df30 <valid_ctx_prt>:

static bool valid_ctx_prt(pubnub_t const *pb)
{
    df30:	b580      	push	{r7, lr}
    df32:	b082      	sub	sp, #8
    df34:	af00      	add	r7, sp, #0
    df36:	6078      	str	r0, [r7, #4]
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    df38:	687a      	ldr	r2, [r7, #4]
    df3a:	4b09      	ldr	r3, [pc, #36]	; (df60 <valid_ctx_prt+0x30>)
    df3c:	429a      	cmp	r2, r3
    df3e:	d305      	bcc.n	df4c <valid_ctx_prt+0x1c>
    df40:	4b08      	ldr	r3, [pc, #32]	; (df64 <valid_ctx_prt+0x34>)
    df42:	687a      	ldr	r2, [r7, #4]
    df44:	429a      	cmp	r2, r3
    df46:	d201      	bcs.n	df4c <valid_ctx_prt+0x1c>
    df48:	2301      	movs	r3, #1
    df4a:	e000      	b.n	df4e <valid_ctx_prt+0x1e>
    df4c:	2300      	movs	r3, #0
    df4e:	1c1a      	adds	r2, r3, #0
    df50:	2301      	movs	r3, #1
    df52:	4013      	ands	r3, r2
    df54:	b2db      	uxtb	r3, r3
}
    df56:	0018      	movs	r0, r3
    df58:	46bd      	mov	sp, r7
    df5a:	b002      	add	sp, #8
    df5c:	bd80      	pop	{r7, pc}
    df5e:	46c0      	nop			; (mov r8, r8)
    df60:	20003ec8 	.word	0x20003ec8
    df64:	200045a8 	.word	0x200045a8

0000df68 <pubnub_find_ctx>:

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
    df68:	b580      	push	{r7, lr}
    df6a:	b084      	sub	sp, #16
    df6c:	af00      	add	r7, sp, #0
    df6e:	0002      	movs	r2, r0
    df70:	1dfb      	adds	r3, r7, #7
    df72:	701a      	strb	r2, [r3, #0]
    df74:	1dbb      	adds	r3, r7, #6
    df76:	1c0a      	adds	r2, r1, #0
    df78:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    df7a:	4b11      	ldr	r3, [pc, #68]	; (dfc0 <pubnub_find_ctx+0x58>)
    df7c:	60fb      	str	r3, [r7, #12]
    df7e:	e016      	b.n	dfae <pubnub_find_ctx+0x46>
		if (pb->state == state && pb->tcp_socket == sock) {
    df80:	68fb      	ldr	r3, [r7, #12]
    df82:	2252      	movs	r2, #82	; 0x52
    df84:	5c9b      	ldrb	r3, [r3, r2]
    df86:	1dba      	adds	r2, r7, #6
    df88:	7812      	ldrb	r2, [r2, #0]
    df8a:	429a      	cmp	r2, r3
    df8c:	d109      	bne.n	dfa2 <pubnub_find_ctx+0x3a>
    df8e:	68fb      	ldr	r3, [r7, #12]
    df90:	2253      	movs	r2, #83	; 0x53
    df92:	569b      	ldrsb	r3, [r3, r2]
    df94:	1dfa      	adds	r2, r7, #7
    df96:	7812      	ldrb	r2, [r2, #0]
    df98:	b252      	sxtb	r2, r2
    df9a:	429a      	cmp	r2, r3
    df9c:	d101      	bne.n	dfa2 <pubnub_find_ctx+0x3a>
			return pb;
    df9e:	68fb      	ldr	r3, [r7, #12]
    dfa0:	e00a      	b.n	dfb8 <pubnub_find_ctx+0x50>

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    dfa2:	68fb      	ldr	r3, [r7, #12]
    dfa4:	22dc      	movs	r2, #220	; 0xdc
    dfa6:	0092      	lsls	r2, r2, #2
    dfa8:	4694      	mov	ip, r2
    dfaa:	4463      	add	r3, ip
    dfac:	60fb      	str	r3, [r7, #12]
    dfae:	4b05      	ldr	r3, [pc, #20]	; (dfc4 <pubnub_find_ctx+0x5c>)
    dfb0:	68fa      	ldr	r2, [r7, #12]
    dfb2:	429a      	cmp	r2, r3
    dfb4:	d1e4      	bne.n	df80 <pubnub_find_ctx+0x18>
		if (pb->state == state && pb->tcp_socket == sock) {
			return pb;
		}
	}

	return NULL;
    dfb6:	2300      	movs	r3, #0
}
    dfb8:	0018      	movs	r0, r3
    dfba:	46bd      	mov	sp, r7
    dfbc:	b004      	add	sp, #16
    dfbe:	bd80      	pop	{r7, pc}
    dfc0:	20003ec8 	.word	0x20003ec8
    dfc4:	200045a8 	.word	0x200045a8

0000dfc8 <handle_start_connect>:

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    dfc8:	b590      	push	{r4, r7, lr}
    dfca:	b083      	sub	sp, #12
    dfcc:	af00      	add	r7, sp, #0
    dfce:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    dfd0:	687b      	ldr	r3, [r7, #4]
    dfd2:	0018      	movs	r0, r3
    dfd4:	4b2f      	ldr	r3, [pc, #188]	; (e094 <handle_start_connect+0xcc>)
    dfd6:	4798      	blx	r3
    dfd8:	1e03      	subs	r3, r0, #0
    dfda:	d105      	bne.n	dfe8 <handle_start_connect+0x20>
    dfdc:	4b2e      	ldr	r3, [pc, #184]	; (e098 <handle_start_connect+0xd0>)
    dfde:	4a2f      	ldr	r2, [pc, #188]	; (e09c <handle_start_connect+0xd4>)
    dfe0:	482f      	ldr	r0, [pc, #188]	; (e0a0 <handle_start_connect+0xd8>)
    dfe2:	2154      	movs	r1, #84	; 0x54
    dfe4:	4c2f      	ldr	r4, [pc, #188]	; (e0a4 <handle_start_connect+0xdc>)
    dfe6:	47a0      	blx	r4
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    dfe8:	687b      	ldr	r3, [r7, #4]
    dfea:	2252      	movs	r2, #82	; 0x52
    dfec:	5c9b      	ldrb	r3, [r3, r2]
    dfee:	2b00      	cmp	r3, #0
    dff0:	d00f      	beq.n	e012 <handle_start_connect+0x4a>
    dff2:	687b      	ldr	r3, [r7, #4]
    dff4:	2252      	movs	r2, #82	; 0x52
    dff6:	5c9b      	ldrb	r3, [r3, r2]
    dff8:	2b01      	cmp	r3, #1
    dffa:	d00a      	beq.n	e012 <handle_start_connect+0x4a>
    dffc:	687b      	ldr	r3, [r7, #4]
    dffe:	2252      	movs	r2, #82	; 0x52
    e000:	5c9b      	ldrb	r3, [r3, r2]
    e002:	2b02      	cmp	r3, #2
    e004:	d005      	beq.n	e012 <handle_start_connect+0x4a>
    e006:	4b28      	ldr	r3, [pc, #160]	; (e0a8 <handle_start_connect+0xe0>)
    e008:	4a24      	ldr	r2, [pc, #144]	; (e09c <handle_start_connect+0xd4>)
    e00a:	4825      	ldr	r0, [pc, #148]	; (e0a0 <handle_start_connect+0xd8>)
    e00c:	2155      	movs	r1, #85	; 0x55
    e00e:	4c25      	ldr	r4, [pc, #148]	; (e0a4 <handle_start_connect+0xdc>)
    e010:	47a0      	blx	r4

	if (pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    e012:	687b      	ldr	r3, [r7, #4]
    e014:	2252      	movs	r2, #82	; 0x52
    e016:	5c9b      	ldrb	r3, [r3, r2]
    e018:	2b00      	cmp	r3, #0
    e01a:	d12c      	bne.n	e076 <handle_start_connect+0xae>
    e01c:	687b      	ldr	r3, [r7, #4]
    e01e:	2253      	movs	r2, #83	; 0x53
    e020:	569b      	ldrsb	r3, [r3, r2]
    e022:	2b00      	cmp	r3, #0
    e024:	dc27      	bgt.n	e076 <handle_start_connect+0xae>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    e026:	2200      	movs	r2, #0
    e028:	2101      	movs	r1, #1
    e02a:	2002      	movs	r0, #2
    e02c:	4b1f      	ldr	r3, [pc, #124]	; (e0ac <handle_start_connect+0xe4>)
    e02e:	4798      	blx	r3
    e030:	0003      	movs	r3, r0
    e032:	0019      	movs	r1, r3
    e034:	687b      	ldr	r3, [r7, #4]
    e036:	2253      	movs	r2, #83	; 0x53
    e038:	5499      	strb	r1, [r3, r2]
    e03a:	687b      	ldr	r3, [r7, #4]
    e03c:	2253      	movs	r2, #83	; 0x53
    e03e:	569b      	ldrsb	r3, [r3, r2]
    e040:	2b00      	cmp	r3, #0
    e042:	da04      	bge.n	e04e <handle_start_connect+0x86>
			CONF_WINC_PRINTF("failed to create TCP client socket error!\r\n");
    e044:	4b1a      	ldr	r3, [pc, #104]	; (e0b0 <handle_start_connect+0xe8>)
    e046:	0018      	movs	r0, r3
    e048:	4b1a      	ldr	r3, [pc, #104]	; (e0b4 <handle_start_connect+0xec>)
    e04a:	4798      	blx	r3
			return;
    e04c:	e01f      	b.n	e08e <handle_start_connect+0xc6>
		}

		if (pubnub_origin_addr.sin_addr.s_addr <= 0) {
    e04e:	4b1a      	ldr	r3, [pc, #104]	; (e0b8 <handle_start_connect+0xf0>)
    e050:	685b      	ldr	r3, [r3, #4]
    e052:	2b00      	cmp	r3, #0
    e054:	d10f      	bne.n	e076 <handle_start_connect+0xae>
			pubnub_origin_addr.sin_family = AF_INET;
    e056:	4b18      	ldr	r3, [pc, #96]	; (e0b8 <handle_start_connect+0xf0>)
    e058:	2202      	movs	r2, #2
    e05a:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    e05c:	4b16      	ldr	r3, [pc, #88]	; (e0b8 <handle_start_connect+0xf0>)
    e05e:	22a0      	movs	r2, #160	; 0xa0
    e060:	01d2      	lsls	r2, r2, #7
    e062:	805a      	strh	r2, [r3, #2]

			pb->state = PS_WAIT_DNS;
    e064:	687b      	ldr	r3, [r7, #4]
    e066:	2252      	movs	r2, #82	; 0x52
    e068:	2101      	movs	r1, #1
    e06a:	5499      	strb	r1, [r3, r2]
			gethostbyname((uint8 *)PUBNUB_ORIGIN);
    e06c:	4b13      	ldr	r3, [pc, #76]	; (e0bc <handle_start_connect+0xf4>)
    e06e:	0018      	movs	r0, r3
    e070:	4b13      	ldr	r3, [pc, #76]	; (e0c0 <handle_start_connect+0xf8>)
    e072:	4798      	blx	r3
			return;
    e074:	e00b      	b.n	e08e <handle_start_connect+0xc6>
		}
	}

	connect(pb->tcp_socket, (struct sockaddr *)&pubnub_origin_addr, sizeof(struct sockaddr_in));
    e076:	687b      	ldr	r3, [r7, #4]
    e078:	2253      	movs	r2, #83	; 0x53
    e07a:	569b      	ldrsb	r3, [r3, r2]
    e07c:	490e      	ldr	r1, [pc, #56]	; (e0b8 <handle_start_connect+0xf0>)
    e07e:	2210      	movs	r2, #16
    e080:	0018      	movs	r0, r3
    e082:	4b10      	ldr	r3, [pc, #64]	; (e0c4 <handle_start_connect+0xfc>)
    e084:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    e086:	687b      	ldr	r3, [r7, #4]
    e088:	2252      	movs	r2, #82	; 0x52
    e08a:	2102      	movs	r1, #2
    e08c:	5499      	strb	r1, [r3, r2]
}
    e08e:	46bd      	mov	sp, r7
    e090:	b003      	add	sp, #12
    e092:	bd90      	pop	{r4, r7, pc}
    e094:	0000df31 	.word	0x0000df31
    e098:	00012430 	.word	0x00012430
    e09c:	000125d4 	.word	0x000125d4
    e0a0:	00012444 	.word	0x00012444
    e0a4:	0000f6b1 	.word	0x0000f6b1
    e0a8:	00012454 	.word	0x00012454
    e0ac:	000066a1 	.word	0x000066a1
    e0b0:	000124ac 	.word	0x000124ac
    e0b4:	0000fe51 	.word	0x0000fe51
    e0b8:	200047c4 	.word	0x200047c4
    e0bc:	000123c8 	.word	0x000123c8
    e0c0:	00006d01 	.word	0x00006d01
    e0c4:	000067f9 	.word	0x000067f9

0000e0c8 <find_string_start>:

/* Find the beginning of a JSON string that comes after comma and ends
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
    e0c8:	b580      	push	{r7, lr}
    e0ca:	b084      	sub	sp, #16
    e0cc:	af00      	add	r7, sp, #0
    e0ce:	6078      	str	r0, [r7, #4]
    e0d0:	6039      	str	r1, [r7, #0]
	int i;
	for (i = len - 1; i > 0; i--) {
    e0d2:	683b      	ldr	r3, [r7, #0]
    e0d4:	3b01      	subs	r3, #1
    e0d6:	60fb      	str	r3, [r7, #12]
    e0d8:	e014      	b.n	e104 <find_string_start+0x3c>
		if (buf[i] == '"') {
    e0da:	68fb      	ldr	r3, [r7, #12]
    e0dc:	687a      	ldr	r2, [r7, #4]
    e0de:	18d3      	adds	r3, r2, r3
    e0e0:	781b      	ldrb	r3, [r3, #0]
    e0e2:	2b22      	cmp	r3, #34	; 0x22
    e0e4:	d10b      	bne.n	e0fe <find_string_start+0x36>
			return (buf[i - 1] == ',') ? i : -1;
    e0e6:	68fb      	ldr	r3, [r7, #12]
    e0e8:	3b01      	subs	r3, #1
    e0ea:	687a      	ldr	r2, [r7, #4]
    e0ec:	18d3      	adds	r3, r2, r3
    e0ee:	781b      	ldrb	r3, [r3, #0]
    e0f0:	2b2c      	cmp	r3, #44	; 0x2c
    e0f2:	d101      	bne.n	e0f8 <find_string_start+0x30>
    e0f4:	68fb      	ldr	r3, [r7, #12]
    e0f6:	e00a      	b.n	e10e <find_string_start+0x46>
    e0f8:	2301      	movs	r3, #1
    e0fa:	425b      	negs	r3, r3
    e0fc:	e007      	b.n	e10e <find_string_start+0x46>
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
	int i;
	for (i = len - 1; i > 0; i--) {
    e0fe:	68fb      	ldr	r3, [r7, #12]
    e100:	3b01      	subs	r3, #1
    e102:	60fb      	str	r3, [r7, #12]
    e104:	68fb      	ldr	r3, [r7, #12]
    e106:	2b00      	cmp	r3, #0
    e108:	dce7      	bgt.n	e0da <find_string_start+0x12>
		if (buf[i] == '"') {
			return (buf[i - 1] == ',') ? i : -1;
		}
	}
	return -1;
    e10a:	2301      	movs	r3, #1
    e10c:	425b      	negs	r3, r3
}
    e10e:	0018      	movs	r0, r3
    e110:	46bd      	mov	sp, r7
    e112:	b004      	add	sp, #16
    e114:	bd80      	pop	{r7, pc}
    e116:	46c0      	nop			; (mov r8, r8)

0000e118 <split_array>:

/** Split @p buf string containing a JSON array (with arbitrary
 * contents) to multiple NUL-terminated C strings, in-place.
 */
static bool split_array(char *buf)
{
    e118:	b580      	push	{r7, lr}
    e11a:	b084      	sub	sp, #16
    e11c:	af00      	add	r7, sp, #0
    e11e:	6078      	str	r0, [r7, #4]
	bool escaped = false;
    e120:	230f      	movs	r3, #15
    e122:	18fb      	adds	r3, r7, r3
    e124:	2200      	movs	r2, #0
    e126:	701a      	strb	r2, [r3, #0]
	bool in_string = false;
    e128:	230e      	movs	r3, #14
    e12a:	18fb      	adds	r3, r7, r3
    e12c:	2200      	movs	r2, #0
    e12e:	701a      	strb	r2, [r3, #0]
	int bracket_level = 0;
    e130:	2300      	movs	r3, #0
    e132:	60bb      	str	r3, [r7, #8]

	for (; *buf != '\0'; ++buf) {
    e134:	e04e      	b.n	e1d4 <split_array+0xbc>
		if (escaped) {
    e136:	230f      	movs	r3, #15
    e138:	18fb      	adds	r3, r7, r3
    e13a:	781b      	ldrb	r3, [r3, #0]
    e13c:	2b00      	cmp	r3, #0
    e13e:	d004      	beq.n	e14a <split_array+0x32>
			escaped = false;
    e140:	230f      	movs	r3, #15
    e142:	18fb      	adds	r3, r7, r3
    e144:	2200      	movs	r2, #0
    e146:	701a      	strb	r2, [r3, #0]
    e148:	e041      	b.n	e1ce <split_array+0xb6>
		} else if ('"' == *buf) {
    e14a:	687b      	ldr	r3, [r7, #4]
    e14c:	781b      	ldrb	r3, [r3, #0]
    e14e:	2b22      	cmp	r3, #34	; 0x22
    e150:	d111      	bne.n	e176 <split_array+0x5e>
			in_string = !in_string;
    e152:	230e      	movs	r3, #14
    e154:	18fb      	adds	r3, r7, r3
    e156:	781b      	ldrb	r3, [r3, #0]
    e158:	1e5a      	subs	r2, r3, #1
    e15a:	4193      	sbcs	r3, r2
    e15c:	b2db      	uxtb	r3, r3
    e15e:	2201      	movs	r2, #1
    e160:	4053      	eors	r3, r2
    e162:	b2db      	uxtb	r3, r3
    e164:	001a      	movs	r2, r3
    e166:	230e      	movs	r3, #14
    e168:	18fb      	adds	r3, r7, r3
    e16a:	701a      	strb	r2, [r3, #0]
    e16c:	781a      	ldrb	r2, [r3, #0]
    e16e:	2101      	movs	r1, #1
    e170:	400a      	ands	r2, r1
    e172:	701a      	strb	r2, [r3, #0]
    e174:	e02b      	b.n	e1ce <split_array+0xb6>
		} else if (in_string) {
    e176:	230e      	movs	r3, #14
    e178:	18fb      	adds	r3, r7, r3
    e17a:	781b      	ldrb	r3, [r3, #0]
    e17c:	2b00      	cmp	r3, #0
    e17e:	d008      	beq.n	e192 <split_array+0x7a>
			escaped = ('\\' == *buf);
    e180:	687b      	ldr	r3, [r7, #4]
    e182:	781a      	ldrb	r2, [r3, #0]
    e184:	230f      	movs	r3, #15
    e186:	18fb      	adds	r3, r7, r3
    e188:	3a5c      	subs	r2, #92	; 0x5c
    e18a:	4251      	negs	r1, r2
    e18c:	414a      	adcs	r2, r1
    e18e:	701a      	strb	r2, [r3, #0]
    e190:	e01d      	b.n	e1ce <split_array+0xb6>
		} else {
			switch (*buf) {
    e192:	687b      	ldr	r3, [r7, #4]
    e194:	781b      	ldrb	r3, [r3, #0]
    e196:	2b5d      	cmp	r3, #93	; 0x5d
    e198:	d00e      	beq.n	e1b8 <split_array+0xa0>
    e19a:	dc04      	bgt.n	e1a6 <split_array+0x8e>
    e19c:	2b2c      	cmp	r3, #44	; 0x2c
    e19e:	d00f      	beq.n	e1c0 <split_array+0xa8>
    e1a0:	2b5b      	cmp	r3, #91	; 0x5b
    e1a2:	d005      	beq.n	e1b0 <split_array+0x98>
				}

				break;

			default:
				break;
    e1a4:	e013      	b.n	e1ce <split_array+0xb6>
		} else if ('"' == *buf) {
			in_string = !in_string;
		} else if (in_string) {
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
    e1a6:	2b7b      	cmp	r3, #123	; 0x7b
    e1a8:	d002      	beq.n	e1b0 <split_array+0x98>
    e1aa:	2b7d      	cmp	r3, #125	; 0x7d
    e1ac:	d004      	beq.n	e1b8 <split_array+0xa0>
				}

				break;

			default:
				break;
    e1ae:	e00e      	b.n	e1ce <split_array+0xb6>
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
			case '[':
			case '{':
				bracket_level++; break;
    e1b0:	68bb      	ldr	r3, [r7, #8]
    e1b2:	3301      	adds	r3, #1
    e1b4:	60bb      	str	r3, [r7, #8]
    e1b6:	e00a      	b.n	e1ce <split_array+0xb6>

			case ']':
			case '}':
				bracket_level--; break;
    e1b8:	68bb      	ldr	r3, [r7, #8]
    e1ba:	3b01      	subs	r3, #1
    e1bc:	60bb      	str	r3, [r7, #8]
    e1be:	e006      	b.n	e1ce <split_array+0xb6>

			/* if at root, split! */
			case ',':
				if (bracket_level == 0) {
    e1c0:	68bb      	ldr	r3, [r7, #8]
    e1c2:	2b00      	cmp	r3, #0
    e1c4:	d102      	bne.n	e1cc <split_array+0xb4>
					*buf = '\0';
    e1c6:	687b      	ldr	r3, [r7, #4]
    e1c8:	2200      	movs	r2, #0
    e1ca:	701a      	strb	r2, [r3, #0]
				}

				break;
    e1cc:	46c0      	nop			; (mov r8, r8)
{
	bool escaped = false;
	bool in_string = false;
	int bracket_level = 0;

	for (; *buf != '\0'; ++buf) {
    e1ce:	687b      	ldr	r3, [r7, #4]
    e1d0:	3301      	adds	r3, #1
    e1d2:	607b      	str	r3, [r7, #4]
    e1d4:	687b      	ldr	r3, [r7, #4]
    e1d6:	781b      	ldrb	r3, [r3, #0]
    e1d8:	2b00      	cmp	r3, #0
    e1da:	d1ac      	bne.n	e136 <split_array+0x1e>
				break;
			}
		}
	}

	return !(escaped || in_string || (bracket_level > 0));
    e1dc:	230f      	movs	r3, #15
    e1de:	18fb      	adds	r3, r7, r3
    e1e0:	781b      	ldrb	r3, [r3, #0]
    e1e2:	2201      	movs	r2, #1
    e1e4:	4053      	eors	r3, r2
    e1e6:	b2db      	uxtb	r3, r3
    e1e8:	2b00      	cmp	r3, #0
    e1ea:	d00c      	beq.n	e206 <split_array+0xee>
    e1ec:	230e      	movs	r3, #14
    e1ee:	18fb      	adds	r3, r7, r3
    e1f0:	781b      	ldrb	r3, [r3, #0]
    e1f2:	2201      	movs	r2, #1
    e1f4:	4053      	eors	r3, r2
    e1f6:	b2db      	uxtb	r3, r3
    e1f8:	2b00      	cmp	r3, #0
    e1fa:	d004      	beq.n	e206 <split_array+0xee>
    e1fc:	68bb      	ldr	r3, [r7, #8]
    e1fe:	2b00      	cmp	r3, #0
    e200:	dc01      	bgt.n	e206 <split_array+0xee>
    e202:	2301      	movs	r3, #1
    e204:	e000      	b.n	e208 <split_array+0xf0>
    e206:	2300      	movs	r3, #0
    e208:	1c1a      	adds	r2, r3, #0
    e20a:	2301      	movs	r3, #1
    e20c:	4013      	ands	r3, r2
    e20e:	b2db      	uxtb	r3, r3
}
    e210:	0018      	movs	r0, r3
    e212:	46bd      	mov	sp, r7
    e214:	b004      	add	sp, #16
    e216:	bd80      	pop	{r7, pc}

0000e218 <parse_subscribe_response>:

static int parse_subscribe_response(pubnub_t *p)
{
    e218:	b580      	push	{r7, lr}
    e21a:	b086      	sub	sp, #24
    e21c:	af00      	add	r7, sp, #0
    e21e:	6078      	str	r0, [r7, #4]
	char *reply = p->http_reply;
    e220:	687b      	ldr	r3, [r7, #4]
    e222:	3366      	adds	r3, #102	; 0x66
    e224:	33ff      	adds	r3, #255	; 0xff
    e226:	60bb      	str	r3, [r7, #8]
	unsigned int replylen = strlen(reply);
    e228:	68bb      	ldr	r3, [r7, #8]
    e22a:	0018      	movs	r0, r3
    e22c:	4b62      	ldr	r3, [pc, #392]	; (e3b8 <parse_subscribe_response+0x1a0>)
    e22e:	4798      	blx	r3
    e230:	0003      	movs	r3, r0
    e232:	617b      	str	r3, [r7, #20]
	if (reply[replylen - 1] != ']' && replylen > 2) {
    e234:	697b      	ldr	r3, [r7, #20]
    e236:	3b01      	subs	r3, #1
    e238:	68ba      	ldr	r2, [r7, #8]
    e23a:	18d3      	adds	r3, r2, r3
    e23c:	781b      	ldrb	r3, [r3, #0]
    e23e:	2b5d      	cmp	r3, #93	; 0x5d
    e240:	d005      	beq.n	e24e <parse_subscribe_response+0x36>
    e242:	697b      	ldr	r3, [r7, #20]
    e244:	2b02      	cmp	r3, #2
    e246:	d902      	bls.n	e24e <parse_subscribe_response+0x36>
		replylen -= 2; /* XXX: this seems required by Manxiang */
    e248:	697b      	ldr	r3, [r7, #20]
    e24a:	3b02      	subs	r3, #2
    e24c:	617b      	str	r3, [r7, #20]
	}

	if ((reply[0] != '[') || (reply[replylen - 1] != ']') || (reply[replylen - 2] != '"')) {
    e24e:	68bb      	ldr	r3, [r7, #8]
    e250:	781b      	ldrb	r3, [r3, #0]
    e252:	2b5b      	cmp	r3, #91	; 0x5b
    e254:	d10d      	bne.n	e272 <parse_subscribe_response+0x5a>
    e256:	697b      	ldr	r3, [r7, #20]
    e258:	3b01      	subs	r3, #1
    e25a:	68ba      	ldr	r2, [r7, #8]
    e25c:	18d3      	adds	r3, r2, r3
    e25e:	781b      	ldrb	r3, [r3, #0]
    e260:	2b5d      	cmp	r3, #93	; 0x5d
    e262:	d106      	bne.n	e272 <parse_subscribe_response+0x5a>
    e264:	697b      	ldr	r3, [r7, #20]
    e266:	3b02      	subs	r3, #2
    e268:	68ba      	ldr	r2, [r7, #8]
    e26a:	18d3      	adds	r3, r2, r3
    e26c:	781b      	ldrb	r3, [r3, #0]
    e26e:	2b22      	cmp	r3, #34	; 0x22
    e270:	d002      	beq.n	e278 <parse_subscribe_response+0x60>
		return -1;
    e272:	2301      	movs	r3, #1
    e274:	425b      	negs	r3, r3
    e276:	e09a      	b.n	e3ae <parse_subscribe_response+0x196>
	}

	/* Extract the last argument. */
	int i = find_string_start(reply, replylen - 2);
    e278:	697b      	ldr	r3, [r7, #20]
    e27a:	3b02      	subs	r3, #2
    e27c:	001a      	movs	r2, r3
    e27e:	68bb      	ldr	r3, [r7, #8]
    e280:	0011      	movs	r1, r2
    e282:	0018      	movs	r0, r3
    e284:	4b4d      	ldr	r3, [pc, #308]	; (e3bc <parse_subscribe_response+0x1a4>)
    e286:	4798      	blx	r3
    e288:	0003      	movs	r3, r0
    e28a:	613b      	str	r3, [r7, #16]
	if (i < 0) {
    e28c:	693b      	ldr	r3, [r7, #16]
    e28e:	2b00      	cmp	r3, #0
    e290:	da02      	bge.n	e298 <parse_subscribe_response+0x80>
		return -1;
    e292:	2301      	movs	r3, #1
    e294:	425b      	negs	r3, r3
    e296:	e08a      	b.n	e3ae <parse_subscribe_response+0x196>
	}

	reply[replylen - 2] = 0;
    e298:	697b      	ldr	r3, [r7, #20]
    e29a:	3b02      	subs	r3, #2
    e29c:	68ba      	ldr	r2, [r7, #8]
    e29e:	18d3      	adds	r3, r2, r3
    e2a0:	2200      	movs	r2, #0
    e2a2:	701a      	strb	r2, [r3, #0]

	/* Now, the last argument may either be a timetoken or a channel list. */
	if (reply[i - 2] == '"') {
    e2a4:	693b      	ldr	r3, [r7, #16]
    e2a6:	3b02      	subs	r3, #2
    e2a8:	68ba      	ldr	r2, [r7, #8]
    e2aa:	18d3      	adds	r3, r2, r3
    e2ac:	781b      	ldrb	r3, [r3, #0]
    e2ae:	2b22      	cmp	r3, #34	; 0x22
    e2b0:	d13f      	bne.n	e332 <parse_subscribe_response+0x11a>
		int k;

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
    e2b2:	693b      	ldr	r3, [r7, #16]
    e2b4:	b29b      	uxth	r3, r3
    e2b6:	3301      	adds	r3, #1
    e2b8:	b299      	uxth	r1, r3
    e2ba:	687b      	ldr	r3, [r7, #4]
    e2bc:	4a40      	ldr	r2, [pc, #256]	; (e3c0 <parse_subscribe_response+0x1a8>)
    e2be:	5299      	strh	r1, [r3, r2]
		p->chan_end = replylen - 1;
    e2c0:	697b      	ldr	r3, [r7, #20]
    e2c2:	b29b      	uxth	r3, r3
    e2c4:	3b01      	subs	r3, #1
    e2c6:	b299      	uxth	r1, r3
    e2c8:	687a      	ldr	r2, [r7, #4]
    e2ca:	23db      	movs	r3, #219	; 0xdb
    e2cc:	009b      	lsls	r3, r3, #2
    e2ce:	52d1      	strh	r1, [r2, r3]
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    e2d0:	687a      	ldr	r2, [r7, #4]
    e2d2:	23db      	movs	r3, #219	; 0xdb
    e2d4:	009b      	lsls	r3, r3, #2
    e2d6:	5ad3      	ldrh	r3, [r2, r3]
    e2d8:	3b01      	subs	r3, #1
    e2da:	60fb      	str	r3, [r7, #12]
    e2dc:	e00d      	b.n	e2fa <parse_subscribe_response+0xe2>
			if (reply[k] == ',') {
    e2de:	68fb      	ldr	r3, [r7, #12]
    e2e0:	68ba      	ldr	r2, [r7, #8]
    e2e2:	18d3      	adds	r3, r2, r3
    e2e4:	781b      	ldrb	r3, [r3, #0]
    e2e6:	2b2c      	cmp	r3, #44	; 0x2c
    e2e8:	d104      	bne.n	e2f4 <parse_subscribe_response+0xdc>
				reply[k] = 0;
    e2ea:	68fb      	ldr	r3, [r7, #12]
    e2ec:	68ba      	ldr	r2, [r7, #8]
    e2ee:	18d3      	adds	r3, r2, r3
    e2f0:	2200      	movs	r2, #0
    e2f2:	701a      	strb	r2, [r3, #0]

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
		p->chan_end = replylen - 1;
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    e2f4:	68fb      	ldr	r3, [r7, #12]
    e2f6:	3b01      	subs	r3, #1
    e2f8:	60fb      	str	r3, [r7, #12]
    e2fa:	687b      	ldr	r3, [r7, #4]
    e2fc:	4a30      	ldr	r2, [pc, #192]	; (e3c0 <parse_subscribe_response+0x1a8>)
    e2fe:	5a9b      	ldrh	r3, [r3, r2]
    e300:	1e1a      	subs	r2, r3, #0
    e302:	68fb      	ldr	r3, [r7, #12]
    e304:	429a      	cmp	r2, r3
    e306:	dbea      	blt.n	e2de <parse_subscribe_response+0xc6>
				reply[k] = 0;
			}
		}

		/* ... and look for timetoken again. */
		reply[i - 2] = 0;
    e308:	693b      	ldr	r3, [r7, #16]
    e30a:	3b02      	subs	r3, #2
    e30c:	68ba      	ldr	r2, [r7, #8]
    e30e:	18d3      	adds	r3, r2, r3
    e310:	2200      	movs	r2, #0
    e312:	701a      	strb	r2, [r3, #0]
		i = find_string_start(reply, i - 2);
    e314:	693b      	ldr	r3, [r7, #16]
    e316:	1e9a      	subs	r2, r3, #2
    e318:	68bb      	ldr	r3, [r7, #8]
    e31a:	0011      	movs	r1, r2
    e31c:	0018      	movs	r0, r3
    e31e:	4b27      	ldr	r3, [pc, #156]	; (e3bc <parse_subscribe_response+0x1a4>)
    e320:	4798      	blx	r3
    e322:	0003      	movs	r3, r0
    e324:	613b      	str	r3, [r7, #16]
		if (i < 0) {
    e326:	693b      	ldr	r3, [r7, #16]
    e328:	2b00      	cmp	r3, #0
    e32a:	da0b      	bge.n	e344 <parse_subscribe_response+0x12c>
			return -1;
    e32c:	2301      	movs	r3, #1
    e32e:	425b      	negs	r3, r3
    e330:	e03d      	b.n	e3ae <parse_subscribe_response+0x196>
		}
	} else {
		p->chan_ofs = 0;
    e332:	687b      	ldr	r3, [r7, #4]
    e334:	4a22      	ldr	r2, [pc, #136]	; (e3c0 <parse_subscribe_response+0x1a8>)
    e336:	2100      	movs	r1, #0
    e338:	5299      	strh	r1, [r3, r2]
		p->chan_end = 0;
    e33a:	687a      	ldr	r2, [r7, #4]
    e33c:	23db      	movs	r3, #219	; 0xdb
    e33e:	009b      	lsls	r3, r3, #2
    e340:	2100      	movs	r1, #0
    e342:	52d1      	strh	r1, [r2, r3]
	 * [[1,2,3],"5678"]
	 * [[1,2,3],"5678","a,b,c"]
	 *          ^-- here */

	/* Setup timetoken. */
	if (replylen >= sizeof(p->timetoken) + 2 + (i + 1)) {
    e344:	693b      	ldr	r3, [r7, #16]
    e346:	3343      	adds	r3, #67	; 0x43
    e348:	1e1a      	subs	r2, r3, #0
    e34a:	697b      	ldr	r3, [r7, #20]
    e34c:	429a      	cmp	r2, r3
    e34e:	d802      	bhi.n	e356 <parse_subscribe_response+0x13e>
		return -1;
    e350:	2301      	movs	r3, #1
    e352:	425b      	negs	r3, r3
    e354:	e02b      	b.n	e3ae <parse_subscribe_response+0x196>
	}

	strcpy(p->timetoken, reply + i + 1);
    e356:	687b      	ldr	r3, [r7, #4]
    e358:	3310      	adds	r3, #16
    e35a:	0018      	movs	r0, r3
    e35c:	693b      	ldr	r3, [r7, #16]
    e35e:	3301      	adds	r3, #1
    e360:	68ba      	ldr	r2, [r7, #8]
    e362:	18d3      	adds	r3, r2, r3
    e364:	0019      	movs	r1, r3
    e366:	4b17      	ldr	r3, [pc, #92]	; (e3c4 <parse_subscribe_response+0x1ac>)
    e368:	4798      	blx	r3
	reply[i - 2] = 0; /* terminate the [] message array (before the ]!) */
    e36a:	693b      	ldr	r3, [r7, #16]
    e36c:	3b02      	subs	r3, #2
    e36e:	68ba      	ldr	r2, [r7, #8]
    e370:	18d3      	adds	r3, r2, r3
    e372:	2200      	movs	r2, #0
    e374:	701a      	strb	r2, [r3, #0]

	/* Set up the message list - offset, length and NUL-characters splitting the messages. */
	p->msg_ofs = 2;
    e376:	687b      	ldr	r3, [r7, #4]
    e378:	4a13      	ldr	r2, [pc, #76]	; (e3c8 <parse_subscribe_response+0x1b0>)
    e37a:	2102      	movs	r1, #2
    e37c:	5299      	strh	r1, [r3, r2]
	p->msg_end = i - 2;
    e37e:	693b      	ldr	r3, [r7, #16]
    e380:	b29b      	uxth	r3, r3
    e382:	3b02      	subs	r3, #2
    e384:	b299      	uxth	r1, r3
    e386:	687a      	ldr	r2, [r7, #4]
    e388:	23da      	movs	r3, #218	; 0xda
    e38a:	009b      	lsls	r3, r3, #2
    e38c:	52d1      	strh	r1, [r2, r3]

	return split_array(reply + p->msg_ofs) ? 0 : -1;
    e38e:	687b      	ldr	r3, [r7, #4]
    e390:	4a0d      	ldr	r2, [pc, #52]	; (e3c8 <parse_subscribe_response+0x1b0>)
    e392:	5a9b      	ldrh	r3, [r3, r2]
    e394:	001a      	movs	r2, r3
    e396:	68bb      	ldr	r3, [r7, #8]
    e398:	189b      	adds	r3, r3, r2
    e39a:	0018      	movs	r0, r3
    e39c:	4b0b      	ldr	r3, [pc, #44]	; (e3cc <parse_subscribe_response+0x1b4>)
    e39e:	4798      	blx	r3
    e3a0:	1e03      	subs	r3, r0, #0
    e3a2:	d001      	beq.n	e3a8 <parse_subscribe_response+0x190>
    e3a4:	2300      	movs	r3, #0
    e3a6:	e001      	b.n	e3ac <parse_subscribe_response+0x194>
    e3a8:	2301      	movs	r3, #1
    e3aa:	425b      	negs	r3, r3
    e3ac:	46c0      	nop			; (mov r8, r8)
}
    e3ae:	0018      	movs	r0, r3
    e3b0:	46bd      	mov	sp, r7
    e3b2:	b006      	add	sp, #24
    e3b4:	bd80      	pop	{r7, pc}
    e3b6:	46c0      	nop			; (mov r8, r8)
    e3b8:	000100a5 	.word	0x000100a5
    e3bc:	0000e0c9 	.word	0x0000e0c9
    e3c0:	0000036a 	.word	0x0000036a
    e3c4:	00010095 	.word	0x00010095
    e3c8:	00000366 	.word	0x00000366
    e3cc:	0000e119 	.word	0x0000e119

0000e3d0 <handle_tcpip_connect>:

static void handle_tcpip_connect(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e3d0:	b580      	push	{r7, lr}
    e3d2:	b084      	sub	sp, #16
    e3d4:	af00      	add	r7, sp, #0
    e3d6:	603a      	str	r2, [r7, #0]
    e3d8:	1dfb      	adds	r3, r7, #7
    e3da:	1c02      	adds	r2, r0, #0
    e3dc:	701a      	strb	r2, [r3, #0]
    e3de:	1dbb      	adds	r3, r7, #6
    e3e0:	1c0a      	adds	r2, r1, #0
    e3e2:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_CONNECT);
    e3e4:	1dfb      	adds	r3, r7, #7
    e3e6:	781b      	ldrb	r3, [r3, #0]
    e3e8:	b25b      	sxtb	r3, r3
    e3ea:	2102      	movs	r1, #2
    e3ec:	0018      	movs	r0, r3
    e3ee:	4b16      	ldr	r3, [pc, #88]	; (e448 <handle_tcpip_connect+0x78>)
    e3f0:	4798      	blx	r3
    e3f2:	0003      	movs	r3, r0
    e3f4:	60fb      	str	r3, [r7, #12]

	if (pb != NULL) {
    e3f6:	68fb      	ldr	r3, [r7, #12]
    e3f8:	2b00      	cmp	r3, #0
    e3fa:	d020      	beq.n	e43e <handle_tcpip_connect+0x6e>
		tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    e3fc:	683b      	ldr	r3, [r7, #0]
    e3fe:	60bb      	str	r3, [r7, #8]
		if (pstrConnect && pstrConnect->s8Error >= 0) {
    e400:	68bb      	ldr	r3, [r7, #8]
    e402:	2b00      	cmp	r3, #0
    e404:	d00d      	beq.n	e422 <handle_tcpip_connect+0x52>
    e406:	68bb      	ldr	r3, [r7, #8]
    e408:	785b      	ldrb	r3, [r3, #1]
    e40a:	b25b      	sxtb	r3, r3
    e40c:	2b00      	cmp	r3, #0
    e40e:	db08      	blt.n	e422 <handle_tcpip_connect+0x52>
			PUBNUB_PRINTF("handle_tcpip_connect : connect success!\r\n");
			pb->state = PS_WAIT_SEND;
    e410:	68fb      	ldr	r3, [r7, #12]
    e412:	2252      	movs	r2, #82	; 0x52
    e414:	2103      	movs	r1, #3
    e416:	5499      	strb	r1, [r3, r2]

			handle_transaction(pb);
    e418:	68fb      	ldr	r3, [r7, #12]
    e41a:	0018      	movs	r0, r3
    e41c:	4b0b      	ldr	r3, [pc, #44]	; (e44c <handle_tcpip_connect+0x7c>)
    e41e:	4798      	blx	r3

			pb->state = PS_IDLE;
			pb->last_result = PNR_IO_ERROR;
		}
	}
}
    e420:	e00d      	b.n	e43e <handle_tcpip_connect+0x6e>
			pb->state = PS_WAIT_SEND;

			handle_transaction(pb);
		} else {
			PUBNUB_PRINTF("handle_tcpip_connect : connect error!\r\n");
			close(pb->tcp_socket);
    e422:	68fb      	ldr	r3, [r7, #12]
    e424:	2253      	movs	r2, #83	; 0x53
    e426:	569b      	ldrsb	r3, [r3, r2]
    e428:	0018      	movs	r0, r3
    e42a:	4b09      	ldr	r3, [pc, #36]	; (e450 <handle_tcpip_connect+0x80>)
    e42c:	4798      	blx	r3

			pb->state = PS_IDLE;
    e42e:	68fb      	ldr	r3, [r7, #12]
    e430:	2252      	movs	r2, #82	; 0x52
    e432:	2100      	movs	r1, #0
    e434:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
    e436:	68fb      	ldr	r3, [r7, #12]
    e438:	2250      	movs	r2, #80	; 0x50
    e43a:	2102      	movs	r1, #2
    e43c:	5499      	strb	r1, [r3, r2]
		}
	}
}
    e43e:	46c0      	nop			; (mov r8, r8)
    e440:	46bd      	mov	sp, r7
    e442:	b004      	add	sp, #16
    e444:	bd80      	pop	{r7, pc}
    e446:	46c0      	nop			; (mov r8, r8)
    e448:	0000df69 	.word	0x0000df69
    e44c:	0000de81 	.word	0x0000de81
    e450:	00006bf1 	.word	0x00006bf1

0000e454 <handle_tcpip_recv>:

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e454:	b580      	push	{r7, lr}
    e456:	b086      	sub	sp, #24
    e458:	af00      	add	r7, sp, #0
    e45a:	603a      	str	r2, [r7, #0]
    e45c:	1dfb      	adds	r3, r7, #7
    e45e:	1c02      	adds	r2, r0, #0
    e460:	701a      	strb	r2, [r3, #0]
    e462:	1dbb      	adds	r3, r7, #6
    e464:	1c0a      	adds	r2, r1, #0
    e466:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e468:	4b57      	ldr	r3, [pc, #348]	; (e5c8 <handle_tcpip_recv+0x174>)
    e46a:	617b      	str	r3, [r7, #20]
    e46c:	e012      	b.n	e494 <handle_tcpip_recv+0x40>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
    e46e:	697b      	ldr	r3, [r7, #20]
    e470:	2252      	movs	r2, #82	; 0x52
    e472:	5c9b      	ldrb	r3, [r3, r2]
    e474:	2b04      	cmp	r3, #4
    e476:	d107      	bne.n	e488 <handle_tcpip_recv+0x34>
    e478:	697b      	ldr	r3, [r7, #20]
    e47a:	2253      	movs	r2, #83	; 0x53
    e47c:	569b      	ldrsb	r3, [r3, r2]
    e47e:	1dfa      	adds	r2, r7, #7
    e480:	7812      	ldrb	r2, [r2, #0]
    e482:	b252      	sxtb	r2, r2
    e484:	429a      	cmp	r2, r3
    e486:	d00a      	beq.n	e49e <handle_tcpip_recv+0x4a>

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e488:	697b      	ldr	r3, [r7, #20]
    e48a:	22dc      	movs	r2, #220	; 0xdc
    e48c:	0092      	lsls	r2, r2, #2
    e48e:	4694      	mov	ip, r2
    e490:	4463      	add	r3, ip
    e492:	617b      	str	r3, [r7, #20]
    e494:	4b4d      	ldr	r3, [pc, #308]	; (e5cc <handle_tcpip_recv+0x178>)
    e496:	697a      	ldr	r2, [r7, #20]
    e498:	429a      	cmp	r2, r3
    e49a:	d1e8      	bne.n	e46e <handle_tcpip_recv+0x1a>
    e49c:	e000      	b.n	e4a0 <handle_tcpip_recv+0x4c>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
			break;
    e49e:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (pb != NULL) {
    e4a0:	697b      	ldr	r3, [r7, #20]
    e4a2:	2b00      	cmp	r3, #0
    e4a4:	d100      	bne.n	e4a8 <handle_tcpip_recv+0x54>
    e4a6:	e08b      	b.n	e5c0 <handle_tcpip_recv+0x16c>
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    e4a8:	683b      	ldr	r3, [r7, #0]
    e4aa:	613b      	str	r3, [r7, #16]

		if (pstrRecv->s16BufferSize <= 0) {
    e4ac:	693b      	ldr	r3, [r7, #16]
    e4ae:	2204      	movs	r2, #4
    e4b0:	5e9b      	ldrsh	r3, [r3, r2]
    e4b2:	2b00      	cmp	r3, #0
    e4b4:	dc0e      	bgt.n	e4d4 <handle_tcpip_recv+0x80>
			close(pb->tcp_socket);
    e4b6:	697b      	ldr	r3, [r7, #20]
    e4b8:	2253      	movs	r2, #83	; 0x53
    e4ba:	569b      	ldrsb	r3, [r3, r2]
    e4bc:	0018      	movs	r0, r3
    e4be:	4b44      	ldr	r3, [pc, #272]	; (e5d0 <handle_tcpip_recv+0x17c>)
    e4c0:	4798      	blx	r3

			pb->state = PS_IDLE;
    e4c2:	697b      	ldr	r3, [r7, #20]
    e4c4:	2252      	movs	r2, #82	; 0x52
    e4c6:	2100      	movs	r1, #0
    e4c8:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
    e4ca:	697b      	ldr	r3, [r7, #20]
    e4cc:	2250      	movs	r2, #80	; 0x50
    e4ce:	2102      	movs	r1, #2
    e4d0:	5499      	strb	r1, [r3, r2]
			return;
    e4d2:	e075      	b.n	e5c0 <handle_tcpip_recv+0x16c>
		}

		if (pb->trans == PBTT_PUBLISH) {
    e4d4:	697b      	ldr	r3, [r7, #20]
    e4d6:	2251      	movs	r2, #81	; 0x51
    e4d8:	5c9b      	ldrb	r3, [r3, r2]
    e4da:	2b02      	cmp	r3, #2
    e4dc:	d10c      	bne.n	e4f8 <handle_tcpip_recv+0xa4>
			PUBNUB_PRINTF(("handle_tcpip_recv: PBTT_PUBLISH msg: %s\n", pstrRecv->pu8Buffer));

			if (pstrRecv->u16RemainingSize == 0) {
    e4de:	693b      	ldr	r3, [r7, #16]
    e4e0:	88db      	ldrh	r3, [r3, #6]
    e4e2:	2b00      	cmp	r3, #0
    e4e4:	d16b      	bne.n	e5be <handle_tcpip_recv+0x16a>
				pb->last_result = PNR_OK;
    e4e6:	697b      	ldr	r3, [r7, #20]
    e4e8:	2250      	movs	r2, #80	; 0x50
    e4ea:	2100      	movs	r1, #0
    e4ec:	5499      	strb	r1, [r3, r2]
				pb->state = PS_IDLE;
    e4ee:	697b      	ldr	r3, [r7, #20]
    e4f0:	2252      	movs	r2, #82	; 0x52
    e4f2:	2100      	movs	r1, #0
    e4f4:	5499      	strb	r1, [r3, r2]
			}

			return;
    e4f6:	e062      	b.n	e5be <handle_tcpip_recv+0x16a>
		}

		if (pstrRecv->u16RemainingSize > 0) {
    e4f8:	693b      	ldr	r3, [r7, #16]
    e4fa:	88db      	ldrh	r3, [r3, #6]
    e4fc:	2b00      	cmp	r3, #0
    e4fe:	d037      	beq.n	e570 <handle_tcpip_recv+0x11c>
			pb->state = PS_WAIT_RECV;
    e500:	697b      	ldr	r3, [r7, #20]
    e502:	2252      	movs	r2, #82	; 0x52
    e504:	2104      	movs	r1, #4
    e506:	5499      	strb	r1, [r3, r2]

			uint8_t *length = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"Content-Length: ") + 16;
    e508:	693b      	ldr	r3, [r7, #16]
    e50a:	681b      	ldr	r3, [r3, #0]
    e50c:	4a31      	ldr	r2, [pc, #196]	; (e5d4 <handle_tcpip_recv+0x180>)
    e50e:	0011      	movs	r1, r2
    e510:	0018      	movs	r0, r3
    e512:	4b31      	ldr	r3, [pc, #196]	; (e5d8 <handle_tcpip_recv+0x184>)
    e514:	4798      	blx	r3
    e516:	0003      	movs	r3, r0
    e518:	3310      	adds	r3, #16
    e51a:	60fb      	str	r3, [r7, #12]
			pb->http_content_len = atoi((const char *)length);
    e51c:	68fb      	ldr	r3, [r7, #12]
    e51e:	0018      	movs	r0, r3
    e520:	4b2e      	ldr	r3, [pc, #184]	; (e5dc <handle_tcpip_recv+0x188>)
    e522:	4798      	blx	r3
    e524:	0003      	movs	r3, r0
    e526:	0019      	movs	r1, r3
    e528:	697a      	ldr	r2, [r7, #20]
    e52a:	23ae      	movs	r3, #174	; 0xae
    e52c:	005b      	lsls	r3, r3, #1
    e52e:	50d1      	str	r1, [r2, r3]
			pb->http_content_remaining_len = pstrRecv->u16RemainingSize;
    e530:	693b      	ldr	r3, [r7, #16]
    e532:	88db      	ldrh	r3, [r3, #6]
    e534:	0019      	movs	r1, r3
    e536:	697a      	ldr	r2, [r7, #20]
    e538:	23b0      	movs	r3, #176	; 0xb0
    e53a:	005b      	lsls	r3, r3, #1
    e53c:	50d1      	str	r1, [r2, r3]
			PUBNUB_PRINTF(("Content-Length = %d\r\n", (int)pb->http_content_len));

			uint8_t *content = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"[");
    e53e:	693b      	ldr	r3, [r7, #16]
    e540:	681b      	ldr	r3, [r3, #0]
    e542:	4a27      	ldr	r2, [pc, #156]	; (e5e0 <handle_tcpip_recv+0x18c>)
    e544:	0011      	movs	r1, r2
    e546:	0018      	movs	r0, r3
    e548:	4b23      	ldr	r3, [pc, #140]	; (e5d8 <handle_tcpip_recv+0x184>)
    e54a:	4798      	blx	r3
    e54c:	0003      	movs	r3, r0
    e54e:	60bb      	str	r3, [r7, #8]
			memcpy(pb->http_reply, content, pb->http_content_len - pstrRecv->u16RemainingSize);
    e550:	697b      	ldr	r3, [r7, #20]
    e552:	3366      	adds	r3, #102	; 0x66
    e554:	33ff      	adds	r3, #255	; 0xff
    e556:	0018      	movs	r0, r3
    e558:	697a      	ldr	r2, [r7, #20]
    e55a:	23ae      	movs	r3, #174	; 0xae
    e55c:	005b      	lsls	r3, r3, #1
    e55e:	58d3      	ldr	r3, [r2, r3]
    e560:	693a      	ldr	r2, [r7, #16]
    e562:	88d2      	ldrh	r2, [r2, #6]
    e564:	1a9a      	subs	r2, r3, r2
    e566:	68bb      	ldr	r3, [r7, #8]
    e568:	0019      	movs	r1, r3
    e56a:	4b1e      	ldr	r3, [pc, #120]	; (e5e4 <handle_tcpip_recv+0x190>)
    e56c:	4798      	blx	r3
    e56e:	e027      	b.n	e5c0 <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));
		} else if (pstrRecv->u16RemainingSize == 0) {
    e570:	693b      	ldr	r3, [r7, #16]
    e572:	88db      	ldrh	r3, [r3, #6]
    e574:	2b00      	cmp	r3, #0
    e576:	d123      	bne.n	e5c0 <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_content_remaining_len = %d\r\n", (int)pb->http_content_remaining_len));

			memcpy(pb->http_reply + (pb->http_content_len - pb->http_content_remaining_len), pstrRecv->pu8Buffer, pstrRecv->s16BufferSize);
    e578:	697b      	ldr	r3, [r7, #20]
    e57a:	3366      	adds	r3, #102	; 0x66
    e57c:	33ff      	adds	r3, #255	; 0xff
    e57e:	001a      	movs	r2, r3
    e580:	6979      	ldr	r1, [r7, #20]
    e582:	23ae      	movs	r3, #174	; 0xae
    e584:	005b      	lsls	r3, r3, #1
    e586:	58c9      	ldr	r1, [r1, r3]
    e588:	6978      	ldr	r0, [r7, #20]
    e58a:	23b0      	movs	r3, #176	; 0xb0
    e58c:	005b      	lsls	r3, r3, #1
    e58e:	58c3      	ldr	r3, [r0, r3]
    e590:	1acb      	subs	r3, r1, r3
    e592:	18d0      	adds	r0, r2, r3
    e594:	693b      	ldr	r3, [r7, #16]
    e596:	6819      	ldr	r1, [r3, #0]
    e598:	693b      	ldr	r3, [r7, #16]
    e59a:	2204      	movs	r2, #4
    e59c:	5e9b      	ldrsh	r3, [r3, r2]
    e59e:	001a      	movs	r2, r3
    e5a0:	4b10      	ldr	r3, [pc, #64]	; (e5e4 <handle_tcpip_recv+0x190>)
    e5a2:	4798      	blx	r3
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));

			parse_subscribe_response(pb);
    e5a4:	697b      	ldr	r3, [r7, #20]
    e5a6:	0018      	movs	r0, r3
    e5a8:	4b0f      	ldr	r3, [pc, #60]	; (e5e8 <handle_tcpip_recv+0x194>)
    e5aa:	4798      	blx	r3

			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
    e5ac:	697b      	ldr	r3, [r7, #20]
    e5ae:	2250      	movs	r2, #80	; 0x50
    e5b0:	2100      	movs	r1, #0
    e5b2:	5499      	strb	r1, [r3, r2]
			pb->state = PS_IDLE;
    e5b4:	697b      	ldr	r3, [r7, #20]
    e5b6:	2252      	movs	r2, #82	; 0x52
    e5b8:	2100      	movs	r1, #0
    e5ba:	5499      	strb	r1, [r3, r2]
    e5bc:	e000      	b.n	e5c0 <handle_tcpip_recv+0x16c>
			if (pstrRecv->u16RemainingSize == 0) {
				pb->last_result = PNR_OK;
				pb->state = PS_IDLE;
			}

			return;
    e5be:	46c0      	nop			; (mov r8, r8)
			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
			pb->state = PS_IDLE;
		}
	}
}
    e5c0:	46bd      	mov	sp, r7
    e5c2:	b006      	add	sp, #24
    e5c4:	bd80      	pop	{r7, pc}
    e5c6:	46c0      	nop			; (mov r8, r8)
    e5c8:	20003ec8 	.word	0x20003ec8
    e5cc:	200045a8 	.word	0x200045a8
    e5d0:	00006bf1 	.word	0x00006bf1
    e5d4:	000124d8 	.word	0x000124d8
    e5d8:	0000251d 	.word	0x0000251d
    e5dc:	0000f6f1 	.word	0x0000f6f1
    e5e0:	000124ec 	.word	0x000124ec
    e5e4:	0000f769 	.word	0x0000f769
    e5e8:	0000e219 	.word	0x0000e219

0000e5ec <handle_dns_found>:

void handle_dns_found(char const *name, uint32_t hostip)
{
    e5ec:	b580      	push	{r7, lr}
    e5ee:	b084      	sub	sp, #16
    e5f0:	af00      	add	r7, sp, #0
    e5f2:	6078      	str	r0, [r7, #4]
    e5f4:	6039      	str	r1, [r7, #0]
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
    e5f6:	4a13      	ldr	r2, [pc, #76]	; (e644 <handle_dns_found+0x58>)
    e5f8:	687b      	ldr	r3, [r7, #4]
    e5fa:	0011      	movs	r1, r2
    e5fc:	0018      	movs	r0, r3
    e5fe:	4b12      	ldr	r3, [pc, #72]	; (e648 <handle_dns_found+0x5c>)
    e600:	4798      	blx	r3
    e602:	1e03      	subs	r3, r0, #0
    e604:	d119      	bne.n	e63a <handle_dns_found+0x4e>
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;
    e606:	4b11      	ldr	r3, [pc, #68]	; (e64c <handle_dns_found+0x60>)
    e608:	683a      	ldr	r2, [r7, #0]
    e60a:	605a      	str	r2, [r3, #4]

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e60c:	4b10      	ldr	r3, [pc, #64]	; (e650 <handle_dns_found+0x64>)
    e60e:	60fb      	str	r3, [r7, #12]
    e610:	e00e      	b.n	e630 <handle_dns_found+0x44>
		if (pb->state == PS_WAIT_DNS) {
    e612:	68fb      	ldr	r3, [r7, #12]
    e614:	2252      	movs	r2, #82	; 0x52
    e616:	5c9b      	ldrb	r3, [r3, r2]
    e618:	2b01      	cmp	r3, #1
    e61a:	d103      	bne.n	e624 <handle_dns_found+0x38>
			handle_start_connect(pb);
    e61c:	68fb      	ldr	r3, [r7, #12]
    e61e:	0018      	movs	r0, r3
    e620:	4b0c      	ldr	r3, [pc, #48]	; (e654 <handle_dns_found+0x68>)
    e622:	4798      	blx	r3
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e624:	68fb      	ldr	r3, [r7, #12]
    e626:	22dc      	movs	r2, #220	; 0xdc
    e628:	0092      	lsls	r2, r2, #2
    e62a:	4694      	mov	ip, r2
    e62c:	4463      	add	r3, ip
    e62e:	60fb      	str	r3, [r7, #12]
    e630:	4b09      	ldr	r3, [pc, #36]	; (e658 <handle_dns_found+0x6c>)
    e632:	68fa      	ldr	r2, [r7, #12]
    e634:	429a      	cmp	r2, r3
    e636:	d1ec      	bne.n	e612 <handle_dns_found+0x26>
    e638:	e000      	b.n	e63c <handle_dns_found+0x50>
void handle_dns_found(char const *name, uint32_t hostip)
{
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
		return;
    e63a:	46c0      	nop			; (mov r8, r8)
	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
		if (pb->state == PS_WAIT_DNS) {
			handle_start_connect(pb);
		}
	}
}
    e63c:	46bd      	mov	sp, r7
    e63e:	b004      	add	sp, #16
    e640:	bd80      	pop	{r7, pc}
    e642:	46c0      	nop			; (mov r8, r8)
    e644:	000123c8 	.word	0x000123c8
    e648:	00010081 	.word	0x00010081
    e64c:	200047c4 	.word	0x200047c4
    e650:	20003ec8 	.word	0x20003ec8
    e654:	0000dfc9 	.word	0x0000dfc9
    e658:	200045a8 	.word	0x200045a8

0000e65c <handle_tcpip>:

void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e65c:	b580      	push	{r7, lr}
    e65e:	b086      	sub	sp, #24
    e660:	af00      	add	r7, sp, #0
    e662:	603a      	str	r2, [r7, #0]
    e664:	1dfb      	adds	r3, r7, #7
    e666:	1c02      	adds	r2, r0, #0
    e668:	701a      	strb	r2, [r3, #0]
    e66a:	1dbb      	adds	r3, r7, #6
    e66c:	1c0a      	adds	r2, r1, #0
    e66e:	701a      	strb	r2, [r3, #0]
	switch (u8Msg) {
    e670:	1dbb      	adds	r3, r7, #6
    e672:	781b      	ldrb	r3, [r3, #0]
    e674:	2b06      	cmp	r3, #6
    e676:	d023      	beq.n	e6c0 <handle_tcpip+0x64>
    e678:	2b07      	cmp	r3, #7
    e67a:	d00c      	beq.n	e696 <handle_tcpip+0x3a>
    e67c:	2b05      	cmp	r3, #5
    e67e:	d000      	beq.n	e682 <handle_tcpip+0x26>
		handle_tcpip_recv(sock, u8Msg, pvMsg);
	}
	break;

	default:
		break;
    e680:	e034      	b.n	e6ec <handle_tcpip+0x90>
void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	switch (u8Msg) {
	case SOCKET_MSG_CONNECT:
	{
		handle_tcpip_connect(sock, u8Msg, pvMsg);
    e682:	683a      	ldr	r2, [r7, #0]
    e684:	1dbb      	adds	r3, r7, #6
    e686:	7819      	ldrb	r1, [r3, #0]
    e688:	1dfb      	adds	r3, r7, #7
    e68a:	781b      	ldrb	r3, [r3, #0]
    e68c:	b25b      	sxtb	r3, r3
    e68e:	0018      	movs	r0, r3
    e690:	4b18      	ldr	r3, [pc, #96]	; (e6f4 <handle_tcpip+0x98>)
    e692:	4798      	blx	r3
	}
	break;
    e694:	e02a      	b.n	e6ec <handle_tcpip+0x90>

	case SOCKET_MSG_SEND:
	{
		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_SEND);
    e696:	1dfb      	adds	r3, r7, #7
    e698:	781b      	ldrb	r3, [r3, #0]
    e69a:	b25b      	sxtb	r3, r3
    e69c:	2103      	movs	r1, #3
    e69e:	0018      	movs	r0, r3
    e6a0:	4b15      	ldr	r3, [pc, #84]	; (e6f8 <handle_tcpip+0x9c>)
    e6a2:	4798      	blx	r3
    e6a4:	0003      	movs	r3, r0
    e6a6:	617b      	str	r3, [r7, #20]

		if (pb != NULL) {
    e6a8:	697b      	ldr	r3, [r7, #20]
    e6aa:	2b00      	cmp	r3, #0
    e6ac:	d01d      	beq.n	e6ea <handle_tcpip+0x8e>
			pb->state = PS_WAIT_RECV;
    e6ae:	697b      	ldr	r3, [r7, #20]
    e6b0:	2252      	movs	r2, #82	; 0x52
    e6b2:	2104      	movs	r1, #4
    e6b4:	5499      	strb	r1, [r3, r2]
			handle_transaction(pb);
    e6b6:	697b      	ldr	r3, [r7, #20]
    e6b8:	0018      	movs	r0, r3
    e6ba:	4b10      	ldr	r3, [pc, #64]	; (e6fc <handle_tcpip+0xa0>)
    e6bc:	4798      	blx	r3
		}
	}
	break;
    e6be:	e014      	b.n	e6ea <handle_tcpip+0x8e>

	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    e6c0:	683b      	ldr	r3, [r7, #0]
    e6c2:	613b      	str	r3, [r7, #16]
			PUBNUB_PRINTF(("handle_tcpip: msg: %s\r\n", pstrRecv->pu8Buffer));
		} else {
			PUBNUB_PRINTF(("handle_tcpip: recv error!\r\n"));
		}

		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_RECV);
    e6c4:	1dfb      	adds	r3, r7, #7
    e6c6:	781b      	ldrb	r3, [r3, #0]
    e6c8:	b25b      	sxtb	r3, r3
    e6ca:	2104      	movs	r1, #4
    e6cc:	0018      	movs	r0, r3
    e6ce:	4b0a      	ldr	r3, [pc, #40]	; (e6f8 <handle_tcpip+0x9c>)
    e6d0:	4798      	blx	r3
    e6d2:	0003      	movs	r3, r0
    e6d4:	60fb      	str	r3, [r7, #12]

		if (pb != NULL) {
		}

		handle_tcpip_recv(sock, u8Msg, pvMsg);
    e6d6:	683a      	ldr	r2, [r7, #0]
    e6d8:	1dbb      	adds	r3, r7, #6
    e6da:	7819      	ldrb	r1, [r3, #0]
    e6dc:	1dfb      	adds	r3, r7, #7
    e6de:	781b      	ldrb	r3, [r3, #0]
    e6e0:	b25b      	sxtb	r3, r3
    e6e2:	0018      	movs	r0, r3
    e6e4:	4b06      	ldr	r3, [pc, #24]	; (e700 <handle_tcpip+0xa4>)
    e6e6:	4798      	blx	r3
	}
	break;
    e6e8:	e000      	b.n	e6ec <handle_tcpip+0x90>
		if (pb != NULL) {
			pb->state = PS_WAIT_RECV;
			handle_transaction(pb);
		}
	}
	break;
    e6ea:	46c0      	nop			; (mov r8, r8)
	break;

	default:
		break;
	}
}
    e6ec:	46c0      	nop			; (mov r8, r8)
    e6ee:	46bd      	mov	sp, r7
    e6f0:	b006      	add	sp, #24
    e6f2:	bd80      	pop	{r7, pc}
    e6f4:	0000e3d1 	.word	0x0000e3d1
    e6f8:	0000df69 	.word	0x0000df69
    e6fc:	0000de81 	.word	0x0000de81
    e700:	0000e455 	.word	0x0000e455

0000e704 <pubnub_get_ctx>:

pubnub_t *pubnub_get_ctx(uint8_t index)
{
    e704:	b590      	push	{r4, r7, lr}
    e706:	b083      	sub	sp, #12
    e708:	af00      	add	r7, sp, #0
    e70a:	0002      	movs	r2, r0
    e70c:	1dfb      	adds	r3, r7, #7
    e70e:	701a      	strb	r2, [r3, #0]
	assert(index < PUBNUB_CTX_MAX);
    e710:	1dfb      	adds	r3, r7, #7
    e712:	781b      	ldrb	r3, [r3, #0]
    e714:	2b01      	cmp	r3, #1
    e716:	d908      	bls.n	e72a <pubnub_get_ctx+0x26>
    e718:	4c09      	ldr	r4, [pc, #36]	; (e740 <pubnub_get_ctx+0x3c>)
    e71a:	4a0a      	ldr	r2, [pc, #40]	; (e744 <pubnub_get_ctx+0x40>)
    e71c:	2376      	movs	r3, #118	; 0x76
    e71e:	33ff      	adds	r3, #255	; 0xff
    e720:	0019      	movs	r1, r3
    e722:	4809      	ldr	r0, [pc, #36]	; (e748 <pubnub_get_ctx+0x44>)
    e724:	0023      	movs	r3, r4
    e726:	4c09      	ldr	r4, [pc, #36]	; (e74c <pubnub_get_ctx+0x48>)
    e728:	47a0      	blx	r4
	return m_aCtx + index;
    e72a:	1dfb      	adds	r3, r7, #7
    e72c:	781b      	ldrb	r3, [r3, #0]
    e72e:	22dc      	movs	r2, #220	; 0xdc
    e730:	0092      	lsls	r2, r2, #2
    e732:	435a      	muls	r2, r3
    e734:	4b06      	ldr	r3, [pc, #24]	; (e750 <pubnub_get_ctx+0x4c>)
    e736:	18d3      	adds	r3, r2, r3
}
    e738:	0018      	movs	r0, r3
    e73a:	46bd      	mov	sp, r7
    e73c:	b003      	add	sp, #12
    e73e:	bd90      	pop	{r4, r7, pc}
    e740:	000124f0 	.word	0x000124f0
    e744:	000125ec 	.word	0x000125ec
    e748:	00012444 	.word	0x00012444
    e74c:	0000f6b1 	.word	0x0000f6b1
    e750:	20003ec8 	.word	0x20003ec8

0000e754 <pubnub_init>:

void pubnub_init(pubnub_t *pb, const char *publish_key, const char *subscribe_key)
{
    e754:	b590      	push	{r4, r7, lr}
    e756:	b085      	sub	sp, #20
    e758:	af00      	add	r7, sp, #0
    e75a:	60f8      	str	r0, [r7, #12]
    e75c:	60b9      	str	r1, [r7, #8]
    e75e:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    e760:	68fb      	ldr	r3, [r7, #12]
    e762:	0018      	movs	r0, r3
    e764:	4b17      	ldr	r3, [pc, #92]	; (e7c4 <pubnub_init+0x70>)
    e766:	4798      	blx	r3
    e768:	1e03      	subs	r3, r0, #0
    e76a:	d108      	bne.n	e77e <pubnub_init+0x2a>
    e76c:	4c16      	ldr	r4, [pc, #88]	; (e7c8 <pubnub_init+0x74>)
    e76e:	4a17      	ldr	r2, [pc, #92]	; (e7cc <pubnub_init+0x78>)
    e770:	237c      	movs	r3, #124	; 0x7c
    e772:	33ff      	adds	r3, #255	; 0xff
    e774:	0019      	movs	r1, r3
    e776:	4816      	ldr	r0, [pc, #88]	; (e7d0 <pubnub_init+0x7c>)
    e778:	0023      	movs	r3, r4
    e77a:	4c16      	ldr	r4, [pc, #88]	; (e7d4 <pubnub_init+0x80>)
    e77c:	47a0      	blx	r4

	pb->publish_key = publish_key;
    e77e:	68fb      	ldr	r3, [r7, #12]
    e780:	68ba      	ldr	r2, [r7, #8]
    e782:	601a      	str	r2, [r3, #0]
	pb->subscribe_key = subscribe_key;
    e784:	68fb      	ldr	r3, [r7, #12]
    e786:	687a      	ldr	r2, [r7, #4]
    e788:	605a      	str	r2, [r3, #4]
	pb->timetoken[0] = '0';
    e78a:	68fb      	ldr	r3, [r7, #12]
    e78c:	2230      	movs	r2, #48	; 0x30
    e78e:	741a      	strb	r2, [r3, #16]
	pb->timetoken[1] = '\0';
    e790:	68fb      	ldr	r3, [r7, #12]
    e792:	2200      	movs	r2, #0
    e794:	745a      	strb	r2, [r3, #17]
	pb->uuid = pb->auth = NULL;
    e796:	68fb      	ldr	r3, [r7, #12]
    e798:	2200      	movs	r2, #0
    e79a:	60da      	str	r2, [r3, #12]
    e79c:	68fb      	ldr	r3, [r7, #12]
    e79e:	68da      	ldr	r2, [r3, #12]
    e7a0:	68fb      	ldr	r3, [r7, #12]
    e7a2:	609a      	str	r2, [r3, #8]
	pb->tcp_socket = -1;
    e7a4:	68fb      	ldr	r3, [r7, #12]
    e7a6:	2253      	movs	r2, #83	; 0x53
    e7a8:	21ff      	movs	r1, #255	; 0xff
    e7aa:	5499      	strb	r1, [r3, r2]
	pb->state = PS_IDLE;
    e7ac:	68fb      	ldr	r3, [r7, #12]
    e7ae:	2252      	movs	r2, #82	; 0x52
    e7b0:	2100      	movs	r1, #0
    e7b2:	5499      	strb	r1, [r3, r2]
	pb->last_result = PNR_IO_ERROR;
    e7b4:	68fb      	ldr	r3, [r7, #12]
    e7b6:	2250      	movs	r2, #80	; 0x50
    e7b8:	2102      	movs	r1, #2
    e7ba:	5499      	strb	r1, [r3, r2]
}
    e7bc:	46c0      	nop			; (mov r8, r8)
    e7be:	46bd      	mov	sp, r7
    e7c0:	b005      	add	sp, #20
    e7c2:	bd90      	pop	{r4, r7, pc}
    e7c4:	0000df31 	.word	0x0000df31
    e7c8:	00012430 	.word	0x00012430
    e7cc:	000125fc 	.word	0x000125fc
    e7d0:	00012444 	.word	0x00012444
    e7d4:	0000f6b1 	.word	0x0000f6b1

0000e7d8 <pubnub_publish>:

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
    e7d8:	b5b0      	push	{r4, r5, r7, lr}
    e7da:	b08a      	sub	sp, #40	; 0x28
    e7dc:	af02      	add	r7, sp, #8
    e7de:	60f8      	str	r0, [r7, #12]
    e7e0:	60b9      	str	r1, [r7, #8]
    e7e2:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    e7e4:	68fb      	ldr	r3, [r7, #12]
    e7e6:	0018      	movs	r0, r3
    e7e8:	4b6c      	ldr	r3, [pc, #432]	; (e99c <pubnub_publish+0x1c4>)
    e7ea:	4798      	blx	r3
    e7ec:	1e03      	subs	r3, r0, #0
    e7ee:	d108      	bne.n	e802 <pubnub_publish+0x2a>
    e7f0:	4c6b      	ldr	r4, [pc, #428]	; (e9a0 <pubnub_publish+0x1c8>)
    e7f2:	4a6c      	ldr	r2, [pc, #432]	; (e9a4 <pubnub_publish+0x1cc>)
    e7f4:	238a      	movs	r3, #138	; 0x8a
    e7f6:	33ff      	adds	r3, #255	; 0xff
    e7f8:	0019      	movs	r1, r3
    e7fa:	486b      	ldr	r0, [pc, #428]	; (e9a8 <pubnub_publish+0x1d0>)
    e7fc:	0023      	movs	r3, r4
    e7fe:	4c6b      	ldr	r4, [pc, #428]	; (e9ac <pubnub_publish+0x1d4>)
    e800:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    e802:	68fb      	ldr	r3, [r7, #12]
    e804:	2252      	movs	r2, #82	; 0x52
    e806:	5c9b      	ldrb	r3, [r3, r2]
    e808:	2b00      	cmp	r3, #0
    e80a:	d001      	beq.n	e810 <pubnub_publish+0x38>
		return false;
    e80c:	2300      	movs	r3, #0
    e80e:	e0c0      	b.n	e992 <pubnub_publish+0x1ba>
	}

	pb->trans = PBTT_PUBLISH;
    e810:	68fb      	ldr	r3, [r7, #12]
    e812:	2251      	movs	r2, #81	; 0x51
    e814:	2102      	movs	r1, #2
    e816:	5499      	strb	r1, [r3, r2]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
    e818:	68fb      	ldr	r3, [r7, #12]
    e81a:	3354      	adds	r3, #84	; 0x54
    e81c:	0018      	movs	r0, r3
    e81e:	68fb      	ldr	r3, [r7, #12]
    e820:	681d      	ldr	r5, [r3, #0]
    e822:	68fb      	ldr	r3, [r7, #12]
    e824:	685b      	ldr	r3, [r3, #4]
    e826:	4c62      	ldr	r4, [pc, #392]	; (e9b0 <pubnub_publish+0x1d8>)
    e828:	2280      	movs	r2, #128	; 0x80
    e82a:	0051      	lsls	r1, r2, #1
    e82c:	68ba      	ldr	r2, [r7, #8]
    e82e:	9201      	str	r2, [sp, #4]
    e830:	9300      	str	r3, [sp, #0]
    e832:	002b      	movs	r3, r5
    e834:	0022      	movs	r2, r4
    e836:	4c5f      	ldr	r4, [pc, #380]	; (e9b4 <pubnub_publish+0x1dc>)
    e838:	47a0      	blx	r4
    e83a:	0003      	movs	r3, r0
    e83c:	0019      	movs	r1, r3
    e83e:	68fa      	ldr	r2, [r7, #12]
    e840:	23ac      	movs	r3, #172	; 0xac
    e842:	005b      	lsls	r3, r3, #1
    e844:	50d1      	str	r1, [r2, r3]

	const char *pmessage = message;
    e846:	687b      	ldr	r3, [r7, #4]
    e848:	61fb      	str	r3, [r7, #28]

	while (pmessage[0]) {
    e84a:	e08a      	b.n	e962 <pubnub_publish+0x18a>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    e84c:	4a5a      	ldr	r2, [pc, #360]	; (e9b8 <pubnub_publish+0x1e0>)
    e84e:	69fb      	ldr	r3, [r7, #28]
    e850:	0011      	movs	r1, r2
    e852:	0018      	movs	r0, r3
    e854:	4b59      	ldr	r3, [pc, #356]	; (e9bc <pubnub_publish+0x1e4>)
    e856:	4798      	blx	r3
    e858:	0003      	movs	r3, r0
    e85a:	61bb      	str	r3, [r7, #24]
		if (okspan > 0) {
    e85c:	69bb      	ldr	r3, [r7, #24]
    e85e:	2b00      	cmp	r3, #0
    e860:	d034      	beq.n	e8cc <pubnub_publish+0xf4>
			if (okspan > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    e862:	68fa      	ldr	r2, [r7, #12]
    e864:	23ac      	movs	r3, #172	; 0xac
    e866:	005b      	lsls	r3, r3, #1
    e868:	58d3      	ldr	r3, [r2, r3]
    e86a:	22ff      	movs	r2, #255	; 0xff
    e86c:	1ad2      	subs	r2, r2, r3
    e86e:	69bb      	ldr	r3, [r7, #24]
    e870:	429a      	cmp	r2, r3
    e872:	d206      	bcs.n	e882 <pubnub_publish+0xaa>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    e874:	68fa      	ldr	r2, [r7, #12]
    e876:	23ac      	movs	r3, #172	; 0xac
    e878:	005b      	lsls	r3, r3, #1
    e87a:	2100      	movs	r1, #0
    e87c:	50d1      	str	r1, [r2, r3]
				return false;
    e87e:	2300      	movs	r3, #0
    e880:	e087      	b.n	e992 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    e882:	68fb      	ldr	r3, [r7, #12]
    e884:	3354      	adds	r3, #84	; 0x54
    e886:	001a      	movs	r2, r3
    e888:	68f9      	ldr	r1, [r7, #12]
    e88a:	23ac      	movs	r3, #172	; 0xac
    e88c:	005b      	lsls	r3, r3, #1
    e88e:	58cb      	ldr	r3, [r1, r3]
    e890:	18d3      	adds	r3, r2, r3
    e892:	69ba      	ldr	r2, [r7, #24]
    e894:	69f9      	ldr	r1, [r7, #28]
    e896:	0018      	movs	r0, r3
    e898:	4b49      	ldr	r3, [pc, #292]	; (e9c0 <pubnub_publish+0x1e8>)
    e89a:	4798      	blx	r3
			pb->http_buf_len += okspan;
    e89c:	68fa      	ldr	r2, [r7, #12]
    e89e:	23ac      	movs	r3, #172	; 0xac
    e8a0:	005b      	lsls	r3, r3, #1
    e8a2:	58d2      	ldr	r2, [r2, r3]
    e8a4:	69bb      	ldr	r3, [r7, #24]
    e8a6:	18d1      	adds	r1, r2, r3
    e8a8:	68fa      	ldr	r2, [r7, #12]
    e8aa:	23ac      	movs	r3, #172	; 0xac
    e8ac:	005b      	lsls	r3, r3, #1
    e8ae:	50d1      	str	r1, [r2, r3]
			pb->http_buf.url[pb->http_buf_len] = 0;
    e8b0:	68fa      	ldr	r2, [r7, #12]
    e8b2:	23ac      	movs	r3, #172	; 0xac
    e8b4:	005b      	lsls	r3, r3, #1
    e8b6:	58d3      	ldr	r3, [r2, r3]
    e8b8:	68fa      	ldr	r2, [r7, #12]
    e8ba:	2154      	movs	r1, #84	; 0x54
    e8bc:	18d3      	adds	r3, r2, r3
    e8be:	185b      	adds	r3, r3, r1
    e8c0:	2200      	movs	r2, #0
    e8c2:	701a      	strb	r2, [r3, #0]
			pmessage += okspan;
    e8c4:	69fa      	ldr	r2, [r7, #28]
    e8c6:	69bb      	ldr	r3, [r7, #24]
    e8c8:	18d3      	adds	r3, r2, r3
    e8ca:	61fb      	str	r3, [r7, #28]
		}

		if (pmessage[0]) {
    e8cc:	69fb      	ldr	r3, [r7, #28]
    e8ce:	781b      	ldrb	r3, [r3, #0]
    e8d0:	2b00      	cmp	r3, #0
    e8d2:	d046      	beq.n	e962 <pubnub_publish+0x18a>
			/* %-encode a non-ok character. */
			char enc[4] = {'%', };
    e8d4:	2314      	movs	r3, #20
    e8d6:	18fb      	adds	r3, r7, r3
    e8d8:	2200      	movs	r2, #0
    e8da:	601a      	str	r2, [r3, #0]
    e8dc:	2314      	movs	r3, #20
    e8de:	18fb      	adds	r3, r7, r3
    e8e0:	2225      	movs	r2, #37	; 0x25
    e8e2:	701a      	strb	r2, [r3, #0]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
    e8e4:	69fb      	ldr	r3, [r7, #28]
    e8e6:	781b      	ldrb	r3, [r3, #0]
    e8e8:	091b      	lsrs	r3, r3, #4
    e8ea:	b2db      	uxtb	r3, r3
    e8ec:	001a      	movs	r2, r3
    e8ee:	4b35      	ldr	r3, [pc, #212]	; (e9c4 <pubnub_publish+0x1ec>)
    e8f0:	5c9a      	ldrb	r2, [r3, r2]
    e8f2:	2314      	movs	r3, #20
    e8f4:	18fb      	adds	r3, r7, r3
    e8f6:	705a      	strb	r2, [r3, #1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
    e8f8:	69fb      	ldr	r3, [r7, #28]
    e8fa:	781b      	ldrb	r3, [r3, #0]
    e8fc:	001a      	movs	r2, r3
    e8fe:	230f      	movs	r3, #15
    e900:	4013      	ands	r3, r2
    e902:	4a30      	ldr	r2, [pc, #192]	; (e9c4 <pubnub_publish+0x1ec>)
    e904:	5cd2      	ldrb	r2, [r2, r3]
    e906:	2314      	movs	r3, #20
    e908:	18fb      	adds	r3, r7, r3
    e90a:	709a      	strb	r2, [r3, #2]
			if (3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    e90c:	68fa      	ldr	r2, [r7, #12]
    e90e:	23ac      	movs	r3, #172	; 0xac
    e910:	005b      	lsls	r3, r3, #1
    e912:	58d3      	ldr	r3, [r2, r3]
    e914:	22ff      	movs	r2, #255	; 0xff
    e916:	1ad3      	subs	r3, r2, r3
    e918:	2b02      	cmp	r3, #2
    e91a:	d806      	bhi.n	e92a <pubnub_publish+0x152>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    e91c:	68fa      	ldr	r2, [r7, #12]
    e91e:	23ac      	movs	r3, #172	; 0xac
    e920:	005b      	lsls	r3, r3, #1
    e922:	2100      	movs	r1, #0
    e924:	50d1      	str	r1, [r2, r3]
				return false;
    e926:	2300      	movs	r3, #0
    e928:	e033      	b.n	e992 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
    e92a:	68fb      	ldr	r3, [r7, #12]
    e92c:	3354      	adds	r3, #84	; 0x54
    e92e:	001a      	movs	r2, r3
    e930:	68f9      	ldr	r1, [r7, #12]
    e932:	23ac      	movs	r3, #172	; 0xac
    e934:	005b      	lsls	r3, r3, #1
    e936:	58cb      	ldr	r3, [r1, r3]
    e938:	18d2      	adds	r2, r2, r3
    e93a:	2314      	movs	r3, #20
    e93c:	18fb      	adds	r3, r7, r3
    e93e:	0010      	movs	r0, r2
    e940:	0019      	movs	r1, r3
    e942:	2304      	movs	r3, #4
    e944:	001a      	movs	r2, r3
    e946:	4b1e      	ldr	r3, [pc, #120]	; (e9c0 <pubnub_publish+0x1e8>)
    e948:	4798      	blx	r3
			pb->http_buf_len += 3;
    e94a:	68fa      	ldr	r2, [r7, #12]
    e94c:	23ac      	movs	r3, #172	; 0xac
    e94e:	005b      	lsls	r3, r3, #1
    e950:	58d3      	ldr	r3, [r2, r3]
    e952:	1cd9      	adds	r1, r3, #3
    e954:	68fa      	ldr	r2, [r7, #12]
    e956:	23ac      	movs	r3, #172	; 0xac
    e958:	005b      	lsls	r3, r3, #1
    e95a:	50d1      	str	r1, [r2, r3]
			++pmessage;
    e95c:	69fb      	ldr	r3, [r7, #28]
    e95e:	3301      	adds	r3, #1
    e960:	61fb      	str	r3, [r7, #28]
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);

	const char *pmessage = message;

	while (pmessage[0]) {
    e962:	69fb      	ldr	r3, [r7, #28]
    e964:	781b      	ldrb	r3, [r3, #0]
    e966:	2b00      	cmp	r3, #0
    e968:	d000      	beq.n	e96c <pubnub_publish+0x194>
    e96a:	e76f      	b.n	e84c <pubnub_publish+0x74>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}

	if (pb->last_result == PNR_OK) {
    e96c:	68fb      	ldr	r3, [r7, #12]
    e96e:	2250      	movs	r2, #80	; 0x50
    e970:	5c9b      	ldrb	r3, [r3, r2]
    e972:	2b00      	cmp	r3, #0
    e974:	d108      	bne.n	e988 <pubnub_publish+0x1b0>
		pb->state = PS_WAIT_SEND;
    e976:	68fb      	ldr	r3, [r7, #12]
    e978:	2252      	movs	r2, #82	; 0x52
    e97a:	2103      	movs	r1, #3
    e97c:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    e97e:	68fb      	ldr	r3, [r7, #12]
    e980:	0018      	movs	r0, r3
    e982:	4b11      	ldr	r3, [pc, #68]	; (e9c8 <pubnub_publish+0x1f0>)
    e984:	4798      	blx	r3
    e986:	e003      	b.n	e990 <pubnub_publish+0x1b8>
	} else {
		handle_start_connect(pb);
    e988:	68fb      	ldr	r3, [r7, #12]
    e98a:	0018      	movs	r0, r3
    e98c:	4b0f      	ldr	r3, [pc, #60]	; (e9cc <pubnub_publish+0x1f4>)
    e98e:	4798      	blx	r3
	}

	return true;
    e990:	2301      	movs	r3, #1
}
    e992:	0018      	movs	r0, r3
    e994:	46bd      	mov	sp, r7
    e996:	b008      	add	sp, #32
    e998:	bdb0      	pop	{r4, r5, r7, pc}
    e99a:	46c0      	nop			; (mov r8, r8)
    e99c:	0000df31 	.word	0x0000df31
    e9a0:	00012430 	.word	0x00012430
    e9a4:	00012608 	.word	0x00012608
    e9a8:	00012444 	.word	0x00012444
    e9ac:	0000f6b1 	.word	0x0000f6b1
    e9b0:	00012508 	.word	0x00012508
    e9b4:	0000ffd9 	.word	0x0000ffd9
    e9b8:	00012520 	.word	0x00012520
    e9bc:	000100d7 	.word	0x000100d7
    e9c0:	0000f769 	.word	0x0000f769
    e9c4:	0001256c 	.word	0x0001256c
    e9c8:	0000de81 	.word	0x0000de81
    e9cc:	0000dfc9 	.word	0x0000dfc9

0000e9d0 <pubnub_subscribe>:

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
    e9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9d2:	4657      	mov	r7, sl
    e9d4:	464e      	mov	r6, r9
    e9d6:	4645      	mov	r5, r8
    e9d8:	b4e0      	push	{r5, r6, r7}
    e9da:	b08c      	sub	sp, #48	; 0x30
    e9dc:	af0a      	add	r7, sp, #40	; 0x28
    e9de:	6078      	str	r0, [r7, #4]
    e9e0:	6039      	str	r1, [r7, #0]
	assert(valid_ctx_prt(pb));
    e9e2:	687b      	ldr	r3, [r7, #4]
    e9e4:	0018      	movs	r0, r3
    e9e6:	4b4a      	ldr	r3, [pc, #296]	; (eb10 <pubnub_subscribe+0x140>)
    e9e8:	4798      	blx	r3
    e9ea:	1e03      	subs	r3, r0, #0
    e9ec:	d108      	bne.n	ea00 <pubnub_subscribe+0x30>
    e9ee:	4c49      	ldr	r4, [pc, #292]	; (eb14 <pubnub_subscribe+0x144>)
    e9f0:	4a49      	ldr	r2, [pc, #292]	; (eb18 <pubnub_subscribe+0x148>)
    e9f2:	23c2      	movs	r3, #194	; 0xc2
    e9f4:	33ff      	adds	r3, #255	; 0xff
    e9f6:	0019      	movs	r1, r3
    e9f8:	4848      	ldr	r0, [pc, #288]	; (eb1c <pubnub_subscribe+0x14c>)
    e9fa:	0023      	movs	r3, r4
    e9fc:	4c48      	ldr	r4, [pc, #288]	; (eb20 <pubnub_subscribe+0x150>)
    e9fe:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    ea00:	687b      	ldr	r3, [r7, #4]
    ea02:	2252      	movs	r2, #82	; 0x52
    ea04:	5c9b      	ldrb	r3, [r3, r2]
    ea06:	2b00      	cmp	r3, #0
    ea08:	d001      	beq.n	ea0e <pubnub_subscribe+0x3e>
		return false;
    ea0a:	2300      	movs	r3, #0
    ea0c:	e078      	b.n	eb00 <pubnub_subscribe+0x130>
	}

	pb->trans = PBTT_SUBSCRIBE;
    ea0e:	687b      	ldr	r3, [r7, #4]
    ea10:	2251      	movs	r2, #81	; 0x51
    ea12:	2101      	movs	r1, #1
    ea14:	5499      	strb	r1, [r3, r2]

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);
    ea16:	687b      	ldr	r3, [r7, #4]
    ea18:	3366      	adds	r3, #102	; 0x66
    ea1a:	33ff      	adds	r3, #255	; 0xff
    ea1c:	0018      	movs	r0, r3
    ea1e:	2380      	movs	r3, #128	; 0x80
    ea20:	009b      	lsls	r3, r3, #2
    ea22:	001a      	movs	r2, r3
    ea24:	2100      	movs	r1, #0
    ea26:	4b3f      	ldr	r3, [pc, #252]	; (eb24 <pubnub_subscribe+0x154>)
    ea28:	4798      	blx	r3

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ea2a:	687b      	ldr	r3, [r7, #4]
    ea2c:	2254      	movs	r2, #84	; 0x54
    ea2e:	4694      	mov	ip, r2
    ea30:	449c      	add	ip, r3
    ea32:	687b      	ldr	r3, [r7, #4]
    ea34:	685b      	ldr	r3, [r3, #4]
    ea36:	469a      	mov	sl, r3
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
    ea38:	687b      	ldr	r3, [r7, #4]
    ea3a:	3310      	adds	r3, #16
    ea3c:	001d      	movs	r5, r3
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    ea3e:	687b      	ldr	r3, [r7, #4]
    ea40:	689b      	ldr	r3, [r3, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ea42:	2b00      	cmp	r3, #0
    ea44:	d001      	beq.n	ea4a <pubnub_subscribe+0x7a>
    ea46:	4b38      	ldr	r3, [pc, #224]	; (eb28 <pubnub_subscribe+0x158>)
    ea48:	e000      	b.n	ea4c <pubnub_subscribe+0x7c>
    ea4a:	4b38      	ldr	r3, [pc, #224]	; (eb2c <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    ea4c:	687a      	ldr	r2, [r7, #4]
    ea4e:	6892      	ldr	r2, [r2, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ea50:	2a00      	cmp	r2, #0
    ea52:	d002      	beq.n	ea5a <pubnub_subscribe+0x8a>
    ea54:	687a      	ldr	r2, [r7, #4]
    ea56:	6892      	ldr	r2, [r2, #8]
    ea58:	e000      	b.n	ea5c <pubnub_subscribe+0x8c>
    ea5a:	4a34      	ldr	r2, [pc, #208]	; (eb2c <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    ea5c:	6879      	ldr	r1, [r7, #4]
    ea5e:	6889      	ldr	r1, [r1, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ea60:	2900      	cmp	r1, #0
    ea62:	d005      	beq.n	ea70 <pubnub_subscribe+0xa0>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    ea64:	6879      	ldr	r1, [r7, #4]
    ea66:	68c9      	ldr	r1, [r1, #12]
    ea68:	2900      	cmp	r1, #0
    ea6a:	d001      	beq.n	ea70 <pubnub_subscribe+0xa0>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ea6c:	4930      	ldr	r1, [pc, #192]	; (eb30 <pubnub_subscribe+0x160>)
    ea6e:	e000      	b.n	ea72 <pubnub_subscribe+0xa2>
    ea70:	492e      	ldr	r1, [pc, #184]	; (eb2c <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ea72:	6878      	ldr	r0, [r7, #4]
    ea74:	6880      	ldr	r0, [r0, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ea76:	2800      	cmp	r0, #0
    ea78:	d005      	beq.n	ea86 <pubnub_subscribe+0xb6>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ea7a:	6878      	ldr	r0, [r7, #4]
    ea7c:	68c0      	ldr	r0, [r0, #12]
    ea7e:	2800      	cmp	r0, #0
    ea80:	d001      	beq.n	ea86 <pubnub_subscribe+0xb6>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ea82:	482c      	ldr	r0, [pc, #176]	; (eb34 <pubnub_subscribe+0x164>)
    ea84:	e000      	b.n	ea88 <pubnub_subscribe+0xb8>
    ea86:	4829      	ldr	r0, [pc, #164]	; (eb2c <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ea88:	687c      	ldr	r4, [r7, #4]
    ea8a:	68a4      	ldr	r4, [r4, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ea8c:	2c00      	cmp	r4, #0
    ea8e:	d006      	beq.n	ea9e <pubnub_subscribe+0xce>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ea90:	687c      	ldr	r4, [r7, #4]
    ea92:	68e4      	ldr	r4, [r4, #12]
    ea94:	2c00      	cmp	r4, #0
    ea96:	d002      	beq.n	ea9e <pubnub_subscribe+0xce>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ea98:	687c      	ldr	r4, [r7, #4]
    ea9a:	68e4      	ldr	r4, [r4, #12]
    ea9c:	e000      	b.n	eaa0 <pubnub_subscribe+0xd0>
    ea9e:	4c23      	ldr	r4, [pc, #140]	; (eb2c <pubnub_subscribe+0x15c>)
    eaa0:	4e25      	ldr	r6, [pc, #148]	; (eb38 <pubnub_subscribe+0x168>)
    eaa2:	46b1      	mov	r9, r6
    eaa4:	2680      	movs	r6, #128	; 0x80
    eaa6:	0076      	lsls	r6, r6, #1
    eaa8:	46b0      	mov	r8, r6
    eaaa:	4e24      	ldr	r6, [pc, #144]	; (eb3c <pubnub_subscribe+0x16c>)
    eaac:	9608      	str	r6, [sp, #32]
    eaae:	4e1f      	ldr	r6, [pc, #124]	; (eb2c <pubnub_subscribe+0x15c>)
    eab0:	9607      	str	r6, [sp, #28]
    eab2:	9406      	str	r4, [sp, #24]
    eab4:	9005      	str	r0, [sp, #20]
    eab6:	9104      	str	r1, [sp, #16]
    eab8:	9203      	str	r2, [sp, #12]
    eaba:	9302      	str	r3, [sp, #8]
    eabc:	9501      	str	r5, [sp, #4]
    eabe:	683b      	ldr	r3, [r7, #0]
    eac0:	9300      	str	r3, [sp, #0]
    eac2:	4653      	mov	r3, sl
    eac4:	464a      	mov	r2, r9
    eac6:	4641      	mov	r1, r8
    eac8:	4660      	mov	r0, ip
    eaca:	4c1d      	ldr	r4, [pc, #116]	; (eb40 <pubnub_subscribe+0x170>)
    eacc:	47a0      	blx	r4
    eace:	0003      	movs	r3, r0
    ead0:	0019      	movs	r1, r3
    ead2:	687a      	ldr	r2, [r7, #4]
    ead4:	23ac      	movs	r3, #172	; 0xac
    ead6:	005b      	lsls	r3, r3, #1
    ead8:	50d1      	str	r1, [r2, r3]
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
			"", "0.1");

	if (pb->last_result == PNR_OK) {
    eada:	687b      	ldr	r3, [r7, #4]
    eadc:	2250      	movs	r2, #80	; 0x50
    eade:	5c9b      	ldrb	r3, [r3, r2]
    eae0:	2b00      	cmp	r3, #0
    eae2:	d108      	bne.n	eaf6 <pubnub_subscribe+0x126>
		pb->state = PS_WAIT_SEND;
    eae4:	687b      	ldr	r3, [r7, #4]
    eae6:	2252      	movs	r2, #82	; 0x52
    eae8:	2103      	movs	r1, #3
    eaea:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    eaec:	687b      	ldr	r3, [r7, #4]
    eaee:	0018      	movs	r0, r3
    eaf0:	4b14      	ldr	r3, [pc, #80]	; (eb44 <pubnub_subscribe+0x174>)
    eaf2:	4798      	blx	r3
    eaf4:	e003      	b.n	eafe <pubnub_subscribe+0x12e>
	} else {
		handle_start_connect(pb);
    eaf6:	687b      	ldr	r3, [r7, #4]
    eaf8:	0018      	movs	r0, r3
    eafa:	4b13      	ldr	r3, [pc, #76]	; (eb48 <pubnub_subscribe+0x178>)
    eafc:	4798      	blx	r3
	}

	return true;
    eafe:	2301      	movs	r3, #1
}
    eb00:	0018      	movs	r0, r3
    eb02:	46bd      	mov	sp, r7
    eb04:	b002      	add	sp, #8
    eb06:	bc1c      	pop	{r2, r3, r4}
    eb08:	4690      	mov	r8, r2
    eb0a:	4699      	mov	r9, r3
    eb0c:	46a2      	mov	sl, r4
    eb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb10:	0000df31 	.word	0x0000df31
    eb14:	00012430 	.word	0x00012430
    eb18:	00012618 	.word	0x00012618
    eb1c:	00012444 	.word	0x00012444
    eb20:	0000f6b1 	.word	0x0000f6b1
    eb24:	0000f77b 	.word	0x0000f77b
    eb28:	00012580 	.word	0x00012580
    eb2c:	00012588 	.word	0x00012588
    eb30:	0001258c 	.word	0x0001258c
    eb34:	00012590 	.word	0x00012590
    eb38:	00012598 	.word	0x00012598
    eb3c:	000125d0 	.word	0x000125d0
    eb40:	0000ffd9 	.word	0x0000ffd9
    eb44:	0000de81 	.word	0x0000de81
    eb48:	0000dfc9 	.word	0x0000dfc9

0000eb4c <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
    eb4c:	b590      	push	{r4, r7, lr}
    eb4e:	b085      	sub	sp, #20
    eb50:	af00      	add	r7, sp, #0
    eb52:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    eb54:	687b      	ldr	r3, [r7, #4]
    eb56:	0018      	movs	r0, r3
    eb58:	4b20      	ldr	r3, [pc, #128]	; (ebdc <pubnub_get+0x90>)
    eb5a:	4798      	blx	r3
    eb5c:	1e03      	subs	r3, r0, #0
    eb5e:	d108      	bne.n	eb72 <pubnub_get+0x26>
    eb60:	4c1f      	ldr	r4, [pc, #124]	; (ebe0 <pubnub_get+0x94>)
    eb62:	4a20      	ldr	r2, [pc, #128]	; (ebe4 <pubnub_get+0x98>)
    eb64:	23e0      	movs	r3, #224	; 0xe0
    eb66:	33ff      	adds	r3, #255	; 0xff
    eb68:	0019      	movs	r1, r3
    eb6a:	481f      	ldr	r0, [pc, #124]	; (ebe8 <pubnub_get+0x9c>)
    eb6c:	0023      	movs	r3, r4
    eb6e:	4c1f      	ldr	r4, [pc, #124]	; (ebec <pubnub_get+0xa0>)
    eb70:	47a0      	blx	r4

	if (pb->msg_ofs < pb->msg_end) {
    eb72:	687b      	ldr	r3, [r7, #4]
    eb74:	4a1e      	ldr	r2, [pc, #120]	; (ebf0 <pubnub_get+0xa4>)
    eb76:	5a9a      	ldrh	r2, [r3, r2]
    eb78:	6879      	ldr	r1, [r7, #4]
    eb7a:	23da      	movs	r3, #218	; 0xda
    eb7c:	009b      	lsls	r3, r3, #2
    eb7e:	5acb      	ldrh	r3, [r1, r3]
    eb80:	429a      	cmp	r2, r3
    eb82:	d225      	bcs.n	ebd0 <pubnub_get+0x84>
		char const *rslt = pb->http_reply + pb->msg_ofs;
    eb84:	687b      	ldr	r3, [r7, #4]
    eb86:	3366      	adds	r3, #102	; 0x66
    eb88:	33ff      	adds	r3, #255	; 0xff
    eb8a:	687a      	ldr	r2, [r7, #4]
    eb8c:	4918      	ldr	r1, [pc, #96]	; (ebf0 <pubnub_get+0xa4>)
    eb8e:	5a52      	ldrh	r2, [r2, r1]
    eb90:	189b      	adds	r3, r3, r2
    eb92:	60fb      	str	r3, [r7, #12]
		pb->msg_ofs += strlen(rslt);
    eb94:	687b      	ldr	r3, [r7, #4]
    eb96:	4a16      	ldr	r2, [pc, #88]	; (ebf0 <pubnub_get+0xa4>)
    eb98:	5a9c      	ldrh	r4, [r3, r2]
    eb9a:	68fb      	ldr	r3, [r7, #12]
    eb9c:	0018      	movs	r0, r3
    eb9e:	4b15      	ldr	r3, [pc, #84]	; (ebf4 <pubnub_get+0xa8>)
    eba0:	4798      	blx	r3
    eba2:	0003      	movs	r3, r0
    eba4:	b29b      	uxth	r3, r3
    eba6:	18e3      	adds	r3, r4, r3
    eba8:	b299      	uxth	r1, r3
    ebaa:	687b      	ldr	r3, [r7, #4]
    ebac:	4a10      	ldr	r2, [pc, #64]	; (ebf0 <pubnub_get+0xa4>)
    ebae:	5299      	strh	r1, [r3, r2]

		if (pb->msg_ofs++ <= pb->msg_end) {
    ebb0:	687b      	ldr	r3, [r7, #4]
    ebb2:	4a0f      	ldr	r2, [pc, #60]	; (ebf0 <pubnub_get+0xa4>)
    ebb4:	5a9b      	ldrh	r3, [r3, r2]
    ebb6:	1c5a      	adds	r2, r3, #1
    ebb8:	b290      	uxth	r0, r2
    ebba:	687a      	ldr	r2, [r7, #4]
    ebbc:	490c      	ldr	r1, [pc, #48]	; (ebf0 <pubnub_get+0xa4>)
    ebbe:	5250      	strh	r0, [r2, r1]
    ebc0:	6879      	ldr	r1, [r7, #4]
    ebc2:	22da      	movs	r2, #218	; 0xda
    ebc4:	0092      	lsls	r2, r2, #2
    ebc6:	5a8a      	ldrh	r2, [r1, r2]
    ebc8:	4293      	cmp	r3, r2
    ebca:	d801      	bhi.n	ebd0 <pubnub_get+0x84>
			return rslt;
    ebcc:	68fb      	ldr	r3, [r7, #12]
    ebce:	e000      	b.n	ebd2 <pubnub_get+0x86>
		}
	}

	return NULL;
    ebd0:	2300      	movs	r3, #0
}
    ebd2:	0018      	movs	r0, r3
    ebd4:	46bd      	mov	sp, r7
    ebd6:	b005      	add	sp, #20
    ebd8:	bd90      	pop	{r4, r7, pc}
    ebda:	46c0      	nop			; (mov r8, r8)
    ebdc:	0000df31 	.word	0x0000df31
    ebe0:	00012430 	.word	0x00012430
    ebe4:	0001262c 	.word	0x0001262c
    ebe8:	00012444 	.word	0x00012444
    ebec:	0000f6b1 	.word	0x0000f6b1
    ebf0:	00000366 	.word	0x00000366
    ebf4:	000100a5 	.word	0x000100a5

0000ebf8 <__aeabi_uidiv>:
    ebf8:	2200      	movs	r2, #0
    ebfa:	0843      	lsrs	r3, r0, #1
    ebfc:	428b      	cmp	r3, r1
    ebfe:	d374      	bcc.n	ecea <__aeabi_uidiv+0xf2>
    ec00:	0903      	lsrs	r3, r0, #4
    ec02:	428b      	cmp	r3, r1
    ec04:	d35f      	bcc.n	ecc6 <__aeabi_uidiv+0xce>
    ec06:	0a03      	lsrs	r3, r0, #8
    ec08:	428b      	cmp	r3, r1
    ec0a:	d344      	bcc.n	ec96 <__aeabi_uidiv+0x9e>
    ec0c:	0b03      	lsrs	r3, r0, #12
    ec0e:	428b      	cmp	r3, r1
    ec10:	d328      	bcc.n	ec64 <__aeabi_uidiv+0x6c>
    ec12:	0c03      	lsrs	r3, r0, #16
    ec14:	428b      	cmp	r3, r1
    ec16:	d30d      	bcc.n	ec34 <__aeabi_uidiv+0x3c>
    ec18:	22ff      	movs	r2, #255	; 0xff
    ec1a:	0209      	lsls	r1, r1, #8
    ec1c:	ba12      	rev	r2, r2
    ec1e:	0c03      	lsrs	r3, r0, #16
    ec20:	428b      	cmp	r3, r1
    ec22:	d302      	bcc.n	ec2a <__aeabi_uidiv+0x32>
    ec24:	1212      	asrs	r2, r2, #8
    ec26:	0209      	lsls	r1, r1, #8
    ec28:	d065      	beq.n	ecf6 <__aeabi_uidiv+0xfe>
    ec2a:	0b03      	lsrs	r3, r0, #12
    ec2c:	428b      	cmp	r3, r1
    ec2e:	d319      	bcc.n	ec64 <__aeabi_uidiv+0x6c>
    ec30:	e000      	b.n	ec34 <__aeabi_uidiv+0x3c>
    ec32:	0a09      	lsrs	r1, r1, #8
    ec34:	0bc3      	lsrs	r3, r0, #15
    ec36:	428b      	cmp	r3, r1
    ec38:	d301      	bcc.n	ec3e <__aeabi_uidiv+0x46>
    ec3a:	03cb      	lsls	r3, r1, #15
    ec3c:	1ac0      	subs	r0, r0, r3
    ec3e:	4152      	adcs	r2, r2
    ec40:	0b83      	lsrs	r3, r0, #14
    ec42:	428b      	cmp	r3, r1
    ec44:	d301      	bcc.n	ec4a <__aeabi_uidiv+0x52>
    ec46:	038b      	lsls	r3, r1, #14
    ec48:	1ac0      	subs	r0, r0, r3
    ec4a:	4152      	adcs	r2, r2
    ec4c:	0b43      	lsrs	r3, r0, #13
    ec4e:	428b      	cmp	r3, r1
    ec50:	d301      	bcc.n	ec56 <__aeabi_uidiv+0x5e>
    ec52:	034b      	lsls	r3, r1, #13
    ec54:	1ac0      	subs	r0, r0, r3
    ec56:	4152      	adcs	r2, r2
    ec58:	0b03      	lsrs	r3, r0, #12
    ec5a:	428b      	cmp	r3, r1
    ec5c:	d301      	bcc.n	ec62 <__aeabi_uidiv+0x6a>
    ec5e:	030b      	lsls	r3, r1, #12
    ec60:	1ac0      	subs	r0, r0, r3
    ec62:	4152      	adcs	r2, r2
    ec64:	0ac3      	lsrs	r3, r0, #11
    ec66:	428b      	cmp	r3, r1
    ec68:	d301      	bcc.n	ec6e <__aeabi_uidiv+0x76>
    ec6a:	02cb      	lsls	r3, r1, #11
    ec6c:	1ac0      	subs	r0, r0, r3
    ec6e:	4152      	adcs	r2, r2
    ec70:	0a83      	lsrs	r3, r0, #10
    ec72:	428b      	cmp	r3, r1
    ec74:	d301      	bcc.n	ec7a <__aeabi_uidiv+0x82>
    ec76:	028b      	lsls	r3, r1, #10
    ec78:	1ac0      	subs	r0, r0, r3
    ec7a:	4152      	adcs	r2, r2
    ec7c:	0a43      	lsrs	r3, r0, #9
    ec7e:	428b      	cmp	r3, r1
    ec80:	d301      	bcc.n	ec86 <__aeabi_uidiv+0x8e>
    ec82:	024b      	lsls	r3, r1, #9
    ec84:	1ac0      	subs	r0, r0, r3
    ec86:	4152      	adcs	r2, r2
    ec88:	0a03      	lsrs	r3, r0, #8
    ec8a:	428b      	cmp	r3, r1
    ec8c:	d301      	bcc.n	ec92 <__aeabi_uidiv+0x9a>
    ec8e:	020b      	lsls	r3, r1, #8
    ec90:	1ac0      	subs	r0, r0, r3
    ec92:	4152      	adcs	r2, r2
    ec94:	d2cd      	bcs.n	ec32 <__aeabi_uidiv+0x3a>
    ec96:	09c3      	lsrs	r3, r0, #7
    ec98:	428b      	cmp	r3, r1
    ec9a:	d301      	bcc.n	eca0 <__aeabi_uidiv+0xa8>
    ec9c:	01cb      	lsls	r3, r1, #7
    ec9e:	1ac0      	subs	r0, r0, r3
    eca0:	4152      	adcs	r2, r2
    eca2:	0983      	lsrs	r3, r0, #6
    eca4:	428b      	cmp	r3, r1
    eca6:	d301      	bcc.n	ecac <__aeabi_uidiv+0xb4>
    eca8:	018b      	lsls	r3, r1, #6
    ecaa:	1ac0      	subs	r0, r0, r3
    ecac:	4152      	adcs	r2, r2
    ecae:	0943      	lsrs	r3, r0, #5
    ecb0:	428b      	cmp	r3, r1
    ecb2:	d301      	bcc.n	ecb8 <__aeabi_uidiv+0xc0>
    ecb4:	014b      	lsls	r3, r1, #5
    ecb6:	1ac0      	subs	r0, r0, r3
    ecb8:	4152      	adcs	r2, r2
    ecba:	0903      	lsrs	r3, r0, #4
    ecbc:	428b      	cmp	r3, r1
    ecbe:	d301      	bcc.n	ecc4 <__aeabi_uidiv+0xcc>
    ecc0:	010b      	lsls	r3, r1, #4
    ecc2:	1ac0      	subs	r0, r0, r3
    ecc4:	4152      	adcs	r2, r2
    ecc6:	08c3      	lsrs	r3, r0, #3
    ecc8:	428b      	cmp	r3, r1
    ecca:	d301      	bcc.n	ecd0 <__aeabi_uidiv+0xd8>
    eccc:	00cb      	lsls	r3, r1, #3
    ecce:	1ac0      	subs	r0, r0, r3
    ecd0:	4152      	adcs	r2, r2
    ecd2:	0883      	lsrs	r3, r0, #2
    ecd4:	428b      	cmp	r3, r1
    ecd6:	d301      	bcc.n	ecdc <__aeabi_uidiv+0xe4>
    ecd8:	008b      	lsls	r3, r1, #2
    ecda:	1ac0      	subs	r0, r0, r3
    ecdc:	4152      	adcs	r2, r2
    ecde:	0843      	lsrs	r3, r0, #1
    ece0:	428b      	cmp	r3, r1
    ece2:	d301      	bcc.n	ece8 <__aeabi_uidiv+0xf0>
    ece4:	004b      	lsls	r3, r1, #1
    ece6:	1ac0      	subs	r0, r0, r3
    ece8:	4152      	adcs	r2, r2
    ecea:	1a41      	subs	r1, r0, r1
    ecec:	d200      	bcs.n	ecf0 <__aeabi_uidiv+0xf8>
    ecee:	4601      	mov	r1, r0
    ecf0:	4152      	adcs	r2, r2
    ecf2:	4610      	mov	r0, r2
    ecf4:	4770      	bx	lr
    ecf6:	e7ff      	b.n	ecf8 <__aeabi_uidiv+0x100>
    ecf8:	b501      	push	{r0, lr}
    ecfa:	2000      	movs	r0, #0
    ecfc:	f000 f8f0 	bl	eee0 <__aeabi_idiv0>
    ed00:	bd02      	pop	{r1, pc}
    ed02:	46c0      	nop			; (mov r8, r8)

0000ed04 <__aeabi_uidivmod>:
    ed04:	2900      	cmp	r1, #0
    ed06:	d0f7      	beq.n	ecf8 <__aeabi_uidiv+0x100>
    ed08:	e776      	b.n	ebf8 <__aeabi_uidiv>
    ed0a:	4770      	bx	lr

0000ed0c <__aeabi_idiv>:
    ed0c:	4603      	mov	r3, r0
    ed0e:	430b      	orrs	r3, r1
    ed10:	d47f      	bmi.n	ee12 <__aeabi_idiv+0x106>
    ed12:	2200      	movs	r2, #0
    ed14:	0843      	lsrs	r3, r0, #1
    ed16:	428b      	cmp	r3, r1
    ed18:	d374      	bcc.n	ee04 <__aeabi_idiv+0xf8>
    ed1a:	0903      	lsrs	r3, r0, #4
    ed1c:	428b      	cmp	r3, r1
    ed1e:	d35f      	bcc.n	ede0 <__aeabi_idiv+0xd4>
    ed20:	0a03      	lsrs	r3, r0, #8
    ed22:	428b      	cmp	r3, r1
    ed24:	d344      	bcc.n	edb0 <__aeabi_idiv+0xa4>
    ed26:	0b03      	lsrs	r3, r0, #12
    ed28:	428b      	cmp	r3, r1
    ed2a:	d328      	bcc.n	ed7e <__aeabi_idiv+0x72>
    ed2c:	0c03      	lsrs	r3, r0, #16
    ed2e:	428b      	cmp	r3, r1
    ed30:	d30d      	bcc.n	ed4e <__aeabi_idiv+0x42>
    ed32:	22ff      	movs	r2, #255	; 0xff
    ed34:	0209      	lsls	r1, r1, #8
    ed36:	ba12      	rev	r2, r2
    ed38:	0c03      	lsrs	r3, r0, #16
    ed3a:	428b      	cmp	r3, r1
    ed3c:	d302      	bcc.n	ed44 <__aeabi_idiv+0x38>
    ed3e:	1212      	asrs	r2, r2, #8
    ed40:	0209      	lsls	r1, r1, #8
    ed42:	d065      	beq.n	ee10 <__aeabi_idiv+0x104>
    ed44:	0b03      	lsrs	r3, r0, #12
    ed46:	428b      	cmp	r3, r1
    ed48:	d319      	bcc.n	ed7e <__aeabi_idiv+0x72>
    ed4a:	e000      	b.n	ed4e <__aeabi_idiv+0x42>
    ed4c:	0a09      	lsrs	r1, r1, #8
    ed4e:	0bc3      	lsrs	r3, r0, #15
    ed50:	428b      	cmp	r3, r1
    ed52:	d301      	bcc.n	ed58 <__aeabi_idiv+0x4c>
    ed54:	03cb      	lsls	r3, r1, #15
    ed56:	1ac0      	subs	r0, r0, r3
    ed58:	4152      	adcs	r2, r2
    ed5a:	0b83      	lsrs	r3, r0, #14
    ed5c:	428b      	cmp	r3, r1
    ed5e:	d301      	bcc.n	ed64 <__aeabi_idiv+0x58>
    ed60:	038b      	lsls	r3, r1, #14
    ed62:	1ac0      	subs	r0, r0, r3
    ed64:	4152      	adcs	r2, r2
    ed66:	0b43      	lsrs	r3, r0, #13
    ed68:	428b      	cmp	r3, r1
    ed6a:	d301      	bcc.n	ed70 <__aeabi_idiv+0x64>
    ed6c:	034b      	lsls	r3, r1, #13
    ed6e:	1ac0      	subs	r0, r0, r3
    ed70:	4152      	adcs	r2, r2
    ed72:	0b03      	lsrs	r3, r0, #12
    ed74:	428b      	cmp	r3, r1
    ed76:	d301      	bcc.n	ed7c <__aeabi_idiv+0x70>
    ed78:	030b      	lsls	r3, r1, #12
    ed7a:	1ac0      	subs	r0, r0, r3
    ed7c:	4152      	adcs	r2, r2
    ed7e:	0ac3      	lsrs	r3, r0, #11
    ed80:	428b      	cmp	r3, r1
    ed82:	d301      	bcc.n	ed88 <__aeabi_idiv+0x7c>
    ed84:	02cb      	lsls	r3, r1, #11
    ed86:	1ac0      	subs	r0, r0, r3
    ed88:	4152      	adcs	r2, r2
    ed8a:	0a83      	lsrs	r3, r0, #10
    ed8c:	428b      	cmp	r3, r1
    ed8e:	d301      	bcc.n	ed94 <__aeabi_idiv+0x88>
    ed90:	028b      	lsls	r3, r1, #10
    ed92:	1ac0      	subs	r0, r0, r3
    ed94:	4152      	adcs	r2, r2
    ed96:	0a43      	lsrs	r3, r0, #9
    ed98:	428b      	cmp	r3, r1
    ed9a:	d301      	bcc.n	eda0 <__aeabi_idiv+0x94>
    ed9c:	024b      	lsls	r3, r1, #9
    ed9e:	1ac0      	subs	r0, r0, r3
    eda0:	4152      	adcs	r2, r2
    eda2:	0a03      	lsrs	r3, r0, #8
    eda4:	428b      	cmp	r3, r1
    eda6:	d301      	bcc.n	edac <__aeabi_idiv+0xa0>
    eda8:	020b      	lsls	r3, r1, #8
    edaa:	1ac0      	subs	r0, r0, r3
    edac:	4152      	adcs	r2, r2
    edae:	d2cd      	bcs.n	ed4c <__aeabi_idiv+0x40>
    edb0:	09c3      	lsrs	r3, r0, #7
    edb2:	428b      	cmp	r3, r1
    edb4:	d301      	bcc.n	edba <__aeabi_idiv+0xae>
    edb6:	01cb      	lsls	r3, r1, #7
    edb8:	1ac0      	subs	r0, r0, r3
    edba:	4152      	adcs	r2, r2
    edbc:	0983      	lsrs	r3, r0, #6
    edbe:	428b      	cmp	r3, r1
    edc0:	d301      	bcc.n	edc6 <__aeabi_idiv+0xba>
    edc2:	018b      	lsls	r3, r1, #6
    edc4:	1ac0      	subs	r0, r0, r3
    edc6:	4152      	adcs	r2, r2
    edc8:	0943      	lsrs	r3, r0, #5
    edca:	428b      	cmp	r3, r1
    edcc:	d301      	bcc.n	edd2 <__aeabi_idiv+0xc6>
    edce:	014b      	lsls	r3, r1, #5
    edd0:	1ac0      	subs	r0, r0, r3
    edd2:	4152      	adcs	r2, r2
    edd4:	0903      	lsrs	r3, r0, #4
    edd6:	428b      	cmp	r3, r1
    edd8:	d301      	bcc.n	edde <__aeabi_idiv+0xd2>
    edda:	010b      	lsls	r3, r1, #4
    eddc:	1ac0      	subs	r0, r0, r3
    edde:	4152      	adcs	r2, r2
    ede0:	08c3      	lsrs	r3, r0, #3
    ede2:	428b      	cmp	r3, r1
    ede4:	d301      	bcc.n	edea <__aeabi_idiv+0xde>
    ede6:	00cb      	lsls	r3, r1, #3
    ede8:	1ac0      	subs	r0, r0, r3
    edea:	4152      	adcs	r2, r2
    edec:	0883      	lsrs	r3, r0, #2
    edee:	428b      	cmp	r3, r1
    edf0:	d301      	bcc.n	edf6 <__aeabi_idiv+0xea>
    edf2:	008b      	lsls	r3, r1, #2
    edf4:	1ac0      	subs	r0, r0, r3
    edf6:	4152      	adcs	r2, r2
    edf8:	0843      	lsrs	r3, r0, #1
    edfa:	428b      	cmp	r3, r1
    edfc:	d301      	bcc.n	ee02 <__aeabi_idiv+0xf6>
    edfe:	004b      	lsls	r3, r1, #1
    ee00:	1ac0      	subs	r0, r0, r3
    ee02:	4152      	adcs	r2, r2
    ee04:	1a41      	subs	r1, r0, r1
    ee06:	d200      	bcs.n	ee0a <__aeabi_idiv+0xfe>
    ee08:	4601      	mov	r1, r0
    ee0a:	4152      	adcs	r2, r2
    ee0c:	4610      	mov	r0, r2
    ee0e:	4770      	bx	lr
    ee10:	e05d      	b.n	eece <__aeabi_idiv+0x1c2>
    ee12:	0fca      	lsrs	r2, r1, #31
    ee14:	d000      	beq.n	ee18 <__aeabi_idiv+0x10c>
    ee16:	4249      	negs	r1, r1
    ee18:	1003      	asrs	r3, r0, #32
    ee1a:	d300      	bcc.n	ee1e <__aeabi_idiv+0x112>
    ee1c:	4240      	negs	r0, r0
    ee1e:	4053      	eors	r3, r2
    ee20:	2200      	movs	r2, #0
    ee22:	469c      	mov	ip, r3
    ee24:	0903      	lsrs	r3, r0, #4
    ee26:	428b      	cmp	r3, r1
    ee28:	d32d      	bcc.n	ee86 <__aeabi_idiv+0x17a>
    ee2a:	0a03      	lsrs	r3, r0, #8
    ee2c:	428b      	cmp	r3, r1
    ee2e:	d312      	bcc.n	ee56 <__aeabi_idiv+0x14a>
    ee30:	22fc      	movs	r2, #252	; 0xfc
    ee32:	0189      	lsls	r1, r1, #6
    ee34:	ba12      	rev	r2, r2
    ee36:	0a03      	lsrs	r3, r0, #8
    ee38:	428b      	cmp	r3, r1
    ee3a:	d30c      	bcc.n	ee56 <__aeabi_idiv+0x14a>
    ee3c:	0189      	lsls	r1, r1, #6
    ee3e:	1192      	asrs	r2, r2, #6
    ee40:	428b      	cmp	r3, r1
    ee42:	d308      	bcc.n	ee56 <__aeabi_idiv+0x14a>
    ee44:	0189      	lsls	r1, r1, #6
    ee46:	1192      	asrs	r2, r2, #6
    ee48:	428b      	cmp	r3, r1
    ee4a:	d304      	bcc.n	ee56 <__aeabi_idiv+0x14a>
    ee4c:	0189      	lsls	r1, r1, #6
    ee4e:	d03a      	beq.n	eec6 <__aeabi_idiv+0x1ba>
    ee50:	1192      	asrs	r2, r2, #6
    ee52:	e000      	b.n	ee56 <__aeabi_idiv+0x14a>
    ee54:	0989      	lsrs	r1, r1, #6
    ee56:	09c3      	lsrs	r3, r0, #7
    ee58:	428b      	cmp	r3, r1
    ee5a:	d301      	bcc.n	ee60 <__aeabi_idiv+0x154>
    ee5c:	01cb      	lsls	r3, r1, #7
    ee5e:	1ac0      	subs	r0, r0, r3
    ee60:	4152      	adcs	r2, r2
    ee62:	0983      	lsrs	r3, r0, #6
    ee64:	428b      	cmp	r3, r1
    ee66:	d301      	bcc.n	ee6c <__aeabi_idiv+0x160>
    ee68:	018b      	lsls	r3, r1, #6
    ee6a:	1ac0      	subs	r0, r0, r3
    ee6c:	4152      	adcs	r2, r2
    ee6e:	0943      	lsrs	r3, r0, #5
    ee70:	428b      	cmp	r3, r1
    ee72:	d301      	bcc.n	ee78 <__aeabi_idiv+0x16c>
    ee74:	014b      	lsls	r3, r1, #5
    ee76:	1ac0      	subs	r0, r0, r3
    ee78:	4152      	adcs	r2, r2
    ee7a:	0903      	lsrs	r3, r0, #4
    ee7c:	428b      	cmp	r3, r1
    ee7e:	d301      	bcc.n	ee84 <__aeabi_idiv+0x178>
    ee80:	010b      	lsls	r3, r1, #4
    ee82:	1ac0      	subs	r0, r0, r3
    ee84:	4152      	adcs	r2, r2
    ee86:	08c3      	lsrs	r3, r0, #3
    ee88:	428b      	cmp	r3, r1
    ee8a:	d301      	bcc.n	ee90 <__aeabi_idiv+0x184>
    ee8c:	00cb      	lsls	r3, r1, #3
    ee8e:	1ac0      	subs	r0, r0, r3
    ee90:	4152      	adcs	r2, r2
    ee92:	0883      	lsrs	r3, r0, #2
    ee94:	428b      	cmp	r3, r1
    ee96:	d301      	bcc.n	ee9c <__aeabi_idiv+0x190>
    ee98:	008b      	lsls	r3, r1, #2
    ee9a:	1ac0      	subs	r0, r0, r3
    ee9c:	4152      	adcs	r2, r2
    ee9e:	d2d9      	bcs.n	ee54 <__aeabi_idiv+0x148>
    eea0:	0843      	lsrs	r3, r0, #1
    eea2:	428b      	cmp	r3, r1
    eea4:	d301      	bcc.n	eeaa <__aeabi_idiv+0x19e>
    eea6:	004b      	lsls	r3, r1, #1
    eea8:	1ac0      	subs	r0, r0, r3
    eeaa:	4152      	adcs	r2, r2
    eeac:	1a41      	subs	r1, r0, r1
    eeae:	d200      	bcs.n	eeb2 <__aeabi_idiv+0x1a6>
    eeb0:	4601      	mov	r1, r0
    eeb2:	4663      	mov	r3, ip
    eeb4:	4152      	adcs	r2, r2
    eeb6:	105b      	asrs	r3, r3, #1
    eeb8:	4610      	mov	r0, r2
    eeba:	d301      	bcc.n	eec0 <__aeabi_idiv+0x1b4>
    eebc:	4240      	negs	r0, r0
    eebe:	2b00      	cmp	r3, #0
    eec0:	d500      	bpl.n	eec4 <__aeabi_idiv+0x1b8>
    eec2:	4249      	negs	r1, r1
    eec4:	4770      	bx	lr
    eec6:	4663      	mov	r3, ip
    eec8:	105b      	asrs	r3, r3, #1
    eeca:	d300      	bcc.n	eece <__aeabi_idiv+0x1c2>
    eecc:	4240      	negs	r0, r0
    eece:	b501      	push	{r0, lr}
    eed0:	2000      	movs	r0, #0
    eed2:	f000 f805 	bl	eee0 <__aeabi_idiv0>
    eed6:	bd02      	pop	{r1, pc}

0000eed8 <__aeabi_idivmod>:
    eed8:	2900      	cmp	r1, #0
    eeda:	d0f8      	beq.n	eece <__aeabi_idiv+0x1c2>
    eedc:	e716      	b.n	ed0c <__aeabi_idiv>
    eede:	4770      	bx	lr

0000eee0 <__aeabi_idiv0>:
    eee0:	4770      	bx	lr
    eee2:	46c0      	nop			; (mov r8, r8)

0000eee4 <__aeabi_uldivmod>:
    eee4:	2b00      	cmp	r3, #0
    eee6:	d111      	bne.n	ef0c <__aeabi_uldivmod+0x28>
    eee8:	2a00      	cmp	r2, #0
    eeea:	d10f      	bne.n	ef0c <__aeabi_uldivmod+0x28>
    eeec:	2900      	cmp	r1, #0
    eeee:	d100      	bne.n	eef2 <__aeabi_uldivmod+0xe>
    eef0:	2800      	cmp	r0, #0
    eef2:	d002      	beq.n	eefa <__aeabi_uldivmod+0x16>
    eef4:	2100      	movs	r1, #0
    eef6:	43c9      	mvns	r1, r1
    eef8:	1c08      	adds	r0, r1, #0
    eefa:	b407      	push	{r0, r1, r2}
    eefc:	4802      	ldr	r0, [pc, #8]	; (ef08 <__aeabi_uldivmod+0x24>)
    eefe:	a102      	add	r1, pc, #8	; (adr r1, ef08 <__aeabi_uldivmod+0x24>)
    ef00:	1840      	adds	r0, r0, r1
    ef02:	9002      	str	r0, [sp, #8]
    ef04:	bd03      	pop	{r0, r1, pc}
    ef06:	46c0      	nop			; (mov r8, r8)
    ef08:	ffffffd9 	.word	0xffffffd9
    ef0c:	b403      	push	{r0, r1}
    ef0e:	4668      	mov	r0, sp
    ef10:	b501      	push	{r0, lr}
    ef12:	9802      	ldr	r0, [sp, #8]
    ef14:	f000 f832 	bl	ef7c <__udivmoddi4>
    ef18:	9b01      	ldr	r3, [sp, #4]
    ef1a:	469e      	mov	lr, r3
    ef1c:	b002      	add	sp, #8
    ef1e:	bc0c      	pop	{r2, r3}
    ef20:	4770      	bx	lr
    ef22:	46c0      	nop			; (mov r8, r8)

0000ef24 <__aeabi_lmul>:
    ef24:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef26:	464f      	mov	r7, r9
    ef28:	4646      	mov	r6, r8
    ef2a:	b4c0      	push	{r6, r7}
    ef2c:	0416      	lsls	r6, r2, #16
    ef2e:	0c36      	lsrs	r6, r6, #16
    ef30:	4699      	mov	r9, r3
    ef32:	0033      	movs	r3, r6
    ef34:	0405      	lsls	r5, r0, #16
    ef36:	0c2c      	lsrs	r4, r5, #16
    ef38:	0c07      	lsrs	r7, r0, #16
    ef3a:	0c15      	lsrs	r5, r2, #16
    ef3c:	4363      	muls	r3, r4
    ef3e:	437e      	muls	r6, r7
    ef40:	436f      	muls	r7, r5
    ef42:	4365      	muls	r5, r4
    ef44:	0c1c      	lsrs	r4, r3, #16
    ef46:	19ad      	adds	r5, r5, r6
    ef48:	1964      	adds	r4, r4, r5
    ef4a:	469c      	mov	ip, r3
    ef4c:	42a6      	cmp	r6, r4
    ef4e:	d903      	bls.n	ef58 <__aeabi_lmul+0x34>
    ef50:	2380      	movs	r3, #128	; 0x80
    ef52:	025b      	lsls	r3, r3, #9
    ef54:	4698      	mov	r8, r3
    ef56:	4447      	add	r7, r8
    ef58:	4663      	mov	r3, ip
    ef5a:	0c25      	lsrs	r5, r4, #16
    ef5c:	19ef      	adds	r7, r5, r7
    ef5e:	041d      	lsls	r5, r3, #16
    ef60:	464b      	mov	r3, r9
    ef62:	434a      	muls	r2, r1
    ef64:	4343      	muls	r3, r0
    ef66:	0c2d      	lsrs	r5, r5, #16
    ef68:	0424      	lsls	r4, r4, #16
    ef6a:	1964      	adds	r4, r4, r5
    ef6c:	1899      	adds	r1, r3, r2
    ef6e:	19c9      	adds	r1, r1, r7
    ef70:	0020      	movs	r0, r4
    ef72:	bc0c      	pop	{r2, r3}
    ef74:	4690      	mov	r8, r2
    ef76:	4699      	mov	r9, r3
    ef78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ef7a:	46c0      	nop			; (mov r8, r8)

0000ef7c <__udivmoddi4>:
    ef7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef7e:	464d      	mov	r5, r9
    ef80:	4656      	mov	r6, sl
    ef82:	4644      	mov	r4, r8
    ef84:	465f      	mov	r7, fp
    ef86:	b4f0      	push	{r4, r5, r6, r7}
    ef88:	4692      	mov	sl, r2
    ef8a:	b083      	sub	sp, #12
    ef8c:	0004      	movs	r4, r0
    ef8e:	000d      	movs	r5, r1
    ef90:	4699      	mov	r9, r3
    ef92:	428b      	cmp	r3, r1
    ef94:	d82f      	bhi.n	eff6 <__udivmoddi4+0x7a>
    ef96:	d02c      	beq.n	eff2 <__udivmoddi4+0x76>
    ef98:	4649      	mov	r1, r9
    ef9a:	4650      	mov	r0, sl
    ef9c:	f000 fb7c 	bl	f698 <__clzdi2>
    efa0:	0029      	movs	r1, r5
    efa2:	0006      	movs	r6, r0
    efa4:	0020      	movs	r0, r4
    efa6:	f000 fb77 	bl	f698 <__clzdi2>
    efaa:	1a33      	subs	r3, r6, r0
    efac:	4698      	mov	r8, r3
    efae:	3b20      	subs	r3, #32
    efb0:	469b      	mov	fp, r3
    efb2:	d500      	bpl.n	efb6 <__udivmoddi4+0x3a>
    efb4:	e074      	b.n	f0a0 <__udivmoddi4+0x124>
    efb6:	4653      	mov	r3, sl
    efb8:	465a      	mov	r2, fp
    efba:	4093      	lsls	r3, r2
    efbc:	001f      	movs	r7, r3
    efbe:	4653      	mov	r3, sl
    efc0:	4642      	mov	r2, r8
    efc2:	4093      	lsls	r3, r2
    efc4:	001e      	movs	r6, r3
    efc6:	42af      	cmp	r7, r5
    efc8:	d829      	bhi.n	f01e <__udivmoddi4+0xa2>
    efca:	d026      	beq.n	f01a <__udivmoddi4+0x9e>
    efcc:	465b      	mov	r3, fp
    efce:	1ba4      	subs	r4, r4, r6
    efd0:	41bd      	sbcs	r5, r7
    efd2:	2b00      	cmp	r3, #0
    efd4:	da00      	bge.n	efd8 <__udivmoddi4+0x5c>
    efd6:	e079      	b.n	f0cc <__udivmoddi4+0x150>
    efd8:	2200      	movs	r2, #0
    efda:	2300      	movs	r3, #0
    efdc:	9200      	str	r2, [sp, #0]
    efde:	9301      	str	r3, [sp, #4]
    efe0:	2301      	movs	r3, #1
    efe2:	465a      	mov	r2, fp
    efe4:	4093      	lsls	r3, r2
    efe6:	9301      	str	r3, [sp, #4]
    efe8:	2301      	movs	r3, #1
    efea:	4642      	mov	r2, r8
    efec:	4093      	lsls	r3, r2
    efee:	9300      	str	r3, [sp, #0]
    eff0:	e019      	b.n	f026 <__udivmoddi4+0xaa>
    eff2:	4282      	cmp	r2, r0
    eff4:	d9d0      	bls.n	ef98 <__udivmoddi4+0x1c>
    eff6:	2200      	movs	r2, #0
    eff8:	2300      	movs	r3, #0
    effa:	9200      	str	r2, [sp, #0]
    effc:	9301      	str	r3, [sp, #4]
    effe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f000:	2b00      	cmp	r3, #0
    f002:	d001      	beq.n	f008 <__udivmoddi4+0x8c>
    f004:	601c      	str	r4, [r3, #0]
    f006:	605d      	str	r5, [r3, #4]
    f008:	9800      	ldr	r0, [sp, #0]
    f00a:	9901      	ldr	r1, [sp, #4]
    f00c:	b003      	add	sp, #12
    f00e:	bc3c      	pop	{r2, r3, r4, r5}
    f010:	4690      	mov	r8, r2
    f012:	4699      	mov	r9, r3
    f014:	46a2      	mov	sl, r4
    f016:	46ab      	mov	fp, r5
    f018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f01a:	42a3      	cmp	r3, r4
    f01c:	d9d6      	bls.n	efcc <__udivmoddi4+0x50>
    f01e:	2200      	movs	r2, #0
    f020:	2300      	movs	r3, #0
    f022:	9200      	str	r2, [sp, #0]
    f024:	9301      	str	r3, [sp, #4]
    f026:	4643      	mov	r3, r8
    f028:	2b00      	cmp	r3, #0
    f02a:	d0e8      	beq.n	effe <__udivmoddi4+0x82>
    f02c:	07fb      	lsls	r3, r7, #31
    f02e:	0872      	lsrs	r2, r6, #1
    f030:	431a      	orrs	r2, r3
    f032:	4646      	mov	r6, r8
    f034:	087b      	lsrs	r3, r7, #1
    f036:	e00e      	b.n	f056 <__udivmoddi4+0xda>
    f038:	42ab      	cmp	r3, r5
    f03a:	d101      	bne.n	f040 <__udivmoddi4+0xc4>
    f03c:	42a2      	cmp	r2, r4
    f03e:	d80c      	bhi.n	f05a <__udivmoddi4+0xde>
    f040:	1aa4      	subs	r4, r4, r2
    f042:	419d      	sbcs	r5, r3
    f044:	2001      	movs	r0, #1
    f046:	1924      	adds	r4, r4, r4
    f048:	416d      	adcs	r5, r5
    f04a:	2100      	movs	r1, #0
    f04c:	3e01      	subs	r6, #1
    f04e:	1824      	adds	r4, r4, r0
    f050:	414d      	adcs	r5, r1
    f052:	2e00      	cmp	r6, #0
    f054:	d006      	beq.n	f064 <__udivmoddi4+0xe8>
    f056:	42ab      	cmp	r3, r5
    f058:	d9ee      	bls.n	f038 <__udivmoddi4+0xbc>
    f05a:	3e01      	subs	r6, #1
    f05c:	1924      	adds	r4, r4, r4
    f05e:	416d      	adcs	r5, r5
    f060:	2e00      	cmp	r6, #0
    f062:	d1f8      	bne.n	f056 <__udivmoddi4+0xda>
    f064:	465b      	mov	r3, fp
    f066:	9800      	ldr	r0, [sp, #0]
    f068:	9901      	ldr	r1, [sp, #4]
    f06a:	1900      	adds	r0, r0, r4
    f06c:	4169      	adcs	r1, r5
    f06e:	2b00      	cmp	r3, #0
    f070:	db22      	blt.n	f0b8 <__udivmoddi4+0x13c>
    f072:	002b      	movs	r3, r5
    f074:	465a      	mov	r2, fp
    f076:	40d3      	lsrs	r3, r2
    f078:	002a      	movs	r2, r5
    f07a:	4644      	mov	r4, r8
    f07c:	40e2      	lsrs	r2, r4
    f07e:	001c      	movs	r4, r3
    f080:	465b      	mov	r3, fp
    f082:	0015      	movs	r5, r2
    f084:	2b00      	cmp	r3, #0
    f086:	db2c      	blt.n	f0e2 <__udivmoddi4+0x166>
    f088:	0026      	movs	r6, r4
    f08a:	409e      	lsls	r6, r3
    f08c:	0033      	movs	r3, r6
    f08e:	0026      	movs	r6, r4
    f090:	4647      	mov	r7, r8
    f092:	40be      	lsls	r6, r7
    f094:	0032      	movs	r2, r6
    f096:	1a80      	subs	r0, r0, r2
    f098:	4199      	sbcs	r1, r3
    f09a:	9000      	str	r0, [sp, #0]
    f09c:	9101      	str	r1, [sp, #4]
    f09e:	e7ae      	b.n	effe <__udivmoddi4+0x82>
    f0a0:	4642      	mov	r2, r8
    f0a2:	2320      	movs	r3, #32
    f0a4:	1a9b      	subs	r3, r3, r2
    f0a6:	4652      	mov	r2, sl
    f0a8:	40da      	lsrs	r2, r3
    f0aa:	4641      	mov	r1, r8
    f0ac:	0013      	movs	r3, r2
    f0ae:	464a      	mov	r2, r9
    f0b0:	408a      	lsls	r2, r1
    f0b2:	0017      	movs	r7, r2
    f0b4:	431f      	orrs	r7, r3
    f0b6:	e782      	b.n	efbe <__udivmoddi4+0x42>
    f0b8:	4642      	mov	r2, r8
    f0ba:	2320      	movs	r3, #32
    f0bc:	1a9b      	subs	r3, r3, r2
    f0be:	002a      	movs	r2, r5
    f0c0:	4646      	mov	r6, r8
    f0c2:	409a      	lsls	r2, r3
    f0c4:	0023      	movs	r3, r4
    f0c6:	40f3      	lsrs	r3, r6
    f0c8:	4313      	orrs	r3, r2
    f0ca:	e7d5      	b.n	f078 <__udivmoddi4+0xfc>
    f0cc:	4642      	mov	r2, r8
    f0ce:	2320      	movs	r3, #32
    f0d0:	2100      	movs	r1, #0
    f0d2:	1a9b      	subs	r3, r3, r2
    f0d4:	2200      	movs	r2, #0
    f0d6:	9100      	str	r1, [sp, #0]
    f0d8:	9201      	str	r2, [sp, #4]
    f0da:	2201      	movs	r2, #1
    f0dc:	40da      	lsrs	r2, r3
    f0de:	9201      	str	r2, [sp, #4]
    f0e0:	e782      	b.n	efe8 <__udivmoddi4+0x6c>
    f0e2:	4642      	mov	r2, r8
    f0e4:	2320      	movs	r3, #32
    f0e6:	0026      	movs	r6, r4
    f0e8:	1a9b      	subs	r3, r3, r2
    f0ea:	40de      	lsrs	r6, r3
    f0ec:	002f      	movs	r7, r5
    f0ee:	46b4      	mov	ip, r6
    f0f0:	4097      	lsls	r7, r2
    f0f2:	4666      	mov	r6, ip
    f0f4:	003b      	movs	r3, r7
    f0f6:	4333      	orrs	r3, r6
    f0f8:	e7c9      	b.n	f08e <__udivmoddi4+0x112>
    f0fa:	46c0      	nop			; (mov r8, r8)

0000f0fc <__aeabi_dmul>:
    f0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f0fe:	465f      	mov	r7, fp
    f100:	4656      	mov	r6, sl
    f102:	464d      	mov	r5, r9
    f104:	4644      	mov	r4, r8
    f106:	b4f0      	push	{r4, r5, r6, r7}
    f108:	030d      	lsls	r5, r1, #12
    f10a:	4699      	mov	r9, r3
    f10c:	004e      	lsls	r6, r1, #1
    f10e:	0b2b      	lsrs	r3, r5, #12
    f110:	b087      	sub	sp, #28
    f112:	0007      	movs	r7, r0
    f114:	4692      	mov	sl, r2
    f116:	4680      	mov	r8, r0
    f118:	469b      	mov	fp, r3
    f11a:	0d76      	lsrs	r6, r6, #21
    f11c:	0fcc      	lsrs	r4, r1, #31
    f11e:	2e00      	cmp	r6, #0
    f120:	d069      	beq.n	f1f6 <__aeabi_dmul+0xfa>
    f122:	4b6d      	ldr	r3, [pc, #436]	; (f2d8 <__aeabi_dmul+0x1dc>)
    f124:	429e      	cmp	r6, r3
    f126:	d035      	beq.n	f194 <__aeabi_dmul+0x98>
    f128:	465b      	mov	r3, fp
    f12a:	2280      	movs	r2, #128	; 0x80
    f12c:	00dd      	lsls	r5, r3, #3
    f12e:	0412      	lsls	r2, r2, #16
    f130:	0f43      	lsrs	r3, r0, #29
    f132:	4313      	orrs	r3, r2
    f134:	432b      	orrs	r3, r5
    f136:	469b      	mov	fp, r3
    f138:	00c3      	lsls	r3, r0, #3
    f13a:	4698      	mov	r8, r3
    f13c:	4b67      	ldr	r3, [pc, #412]	; (f2dc <__aeabi_dmul+0x1e0>)
    f13e:	2700      	movs	r7, #0
    f140:	469c      	mov	ip, r3
    f142:	2300      	movs	r3, #0
    f144:	4466      	add	r6, ip
    f146:	9301      	str	r3, [sp, #4]
    f148:	464a      	mov	r2, r9
    f14a:	0315      	lsls	r5, r2, #12
    f14c:	0050      	lsls	r0, r2, #1
    f14e:	0fd2      	lsrs	r2, r2, #31
    f150:	4653      	mov	r3, sl
    f152:	0b2d      	lsrs	r5, r5, #12
    f154:	0d40      	lsrs	r0, r0, #21
    f156:	4691      	mov	r9, r2
    f158:	d100      	bne.n	f15c <__aeabi_dmul+0x60>
    f15a:	e076      	b.n	f24a <__aeabi_dmul+0x14e>
    f15c:	4a5e      	ldr	r2, [pc, #376]	; (f2d8 <__aeabi_dmul+0x1dc>)
    f15e:	4290      	cmp	r0, r2
    f160:	d06c      	beq.n	f23c <__aeabi_dmul+0x140>
    f162:	2280      	movs	r2, #128	; 0x80
    f164:	0f5b      	lsrs	r3, r3, #29
    f166:	0412      	lsls	r2, r2, #16
    f168:	4313      	orrs	r3, r2
    f16a:	4a5c      	ldr	r2, [pc, #368]	; (f2dc <__aeabi_dmul+0x1e0>)
    f16c:	00ed      	lsls	r5, r5, #3
    f16e:	4694      	mov	ip, r2
    f170:	431d      	orrs	r5, r3
    f172:	4653      	mov	r3, sl
    f174:	2200      	movs	r2, #0
    f176:	00db      	lsls	r3, r3, #3
    f178:	4460      	add	r0, ip
    f17a:	4649      	mov	r1, r9
    f17c:	1836      	adds	r6, r6, r0
    f17e:	1c70      	adds	r0, r6, #1
    f180:	4061      	eors	r1, r4
    f182:	9002      	str	r0, [sp, #8]
    f184:	4317      	orrs	r7, r2
    f186:	2f0f      	cmp	r7, #15
    f188:	d900      	bls.n	f18c <__aeabi_dmul+0x90>
    f18a:	e0af      	b.n	f2ec <__aeabi_dmul+0x1f0>
    f18c:	4854      	ldr	r0, [pc, #336]	; (f2e0 <__aeabi_dmul+0x1e4>)
    f18e:	00bf      	lsls	r7, r7, #2
    f190:	59c7      	ldr	r7, [r0, r7]
    f192:	46bf      	mov	pc, r7
    f194:	465b      	mov	r3, fp
    f196:	431f      	orrs	r7, r3
    f198:	d000      	beq.n	f19c <__aeabi_dmul+0xa0>
    f19a:	e088      	b.n	f2ae <__aeabi_dmul+0x1b2>
    f19c:	2300      	movs	r3, #0
    f19e:	469b      	mov	fp, r3
    f1a0:	4698      	mov	r8, r3
    f1a2:	3302      	adds	r3, #2
    f1a4:	2708      	movs	r7, #8
    f1a6:	9301      	str	r3, [sp, #4]
    f1a8:	e7ce      	b.n	f148 <__aeabi_dmul+0x4c>
    f1aa:	4649      	mov	r1, r9
    f1ac:	2a02      	cmp	r2, #2
    f1ae:	d06a      	beq.n	f286 <__aeabi_dmul+0x18a>
    f1b0:	2a03      	cmp	r2, #3
    f1b2:	d100      	bne.n	f1b6 <__aeabi_dmul+0xba>
    f1b4:	e209      	b.n	f5ca <__aeabi_dmul+0x4ce>
    f1b6:	2a01      	cmp	r2, #1
    f1b8:	d000      	beq.n	f1bc <__aeabi_dmul+0xc0>
    f1ba:	e1bb      	b.n	f534 <__aeabi_dmul+0x438>
    f1bc:	4011      	ands	r1, r2
    f1be:	2200      	movs	r2, #0
    f1c0:	2300      	movs	r3, #0
    f1c2:	2500      	movs	r5, #0
    f1c4:	4690      	mov	r8, r2
    f1c6:	b2cc      	uxtb	r4, r1
    f1c8:	2100      	movs	r1, #0
    f1ca:	032d      	lsls	r5, r5, #12
    f1cc:	0d0a      	lsrs	r2, r1, #20
    f1ce:	0512      	lsls	r2, r2, #20
    f1d0:	0b2d      	lsrs	r5, r5, #12
    f1d2:	4315      	orrs	r5, r2
    f1d4:	4a43      	ldr	r2, [pc, #268]	; (f2e4 <__aeabi_dmul+0x1e8>)
    f1d6:	051b      	lsls	r3, r3, #20
    f1d8:	4015      	ands	r5, r2
    f1da:	431d      	orrs	r5, r3
    f1dc:	006d      	lsls	r5, r5, #1
    f1de:	07e4      	lsls	r4, r4, #31
    f1e0:	086d      	lsrs	r5, r5, #1
    f1e2:	4325      	orrs	r5, r4
    f1e4:	4640      	mov	r0, r8
    f1e6:	0029      	movs	r1, r5
    f1e8:	b007      	add	sp, #28
    f1ea:	bc3c      	pop	{r2, r3, r4, r5}
    f1ec:	4690      	mov	r8, r2
    f1ee:	4699      	mov	r9, r3
    f1f0:	46a2      	mov	sl, r4
    f1f2:	46ab      	mov	fp, r5
    f1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1f6:	4303      	orrs	r3, r0
    f1f8:	d052      	beq.n	f2a0 <__aeabi_dmul+0x1a4>
    f1fa:	465b      	mov	r3, fp
    f1fc:	2b00      	cmp	r3, #0
    f1fe:	d100      	bne.n	f202 <__aeabi_dmul+0x106>
    f200:	e18a      	b.n	f518 <__aeabi_dmul+0x41c>
    f202:	4658      	mov	r0, fp
    f204:	f000 fa2a 	bl	f65c <__clzsi2>
    f208:	0003      	movs	r3, r0
    f20a:	3b0b      	subs	r3, #11
    f20c:	2b1c      	cmp	r3, #28
    f20e:	dd00      	ble.n	f212 <__aeabi_dmul+0x116>
    f210:	e17b      	b.n	f50a <__aeabi_dmul+0x40e>
    f212:	221d      	movs	r2, #29
    f214:	1ad3      	subs	r3, r2, r3
    f216:	003a      	movs	r2, r7
    f218:	0001      	movs	r1, r0
    f21a:	465d      	mov	r5, fp
    f21c:	40da      	lsrs	r2, r3
    f21e:	3908      	subs	r1, #8
    f220:	408d      	lsls	r5, r1
    f222:	0013      	movs	r3, r2
    f224:	408f      	lsls	r7, r1
    f226:	432b      	orrs	r3, r5
    f228:	469b      	mov	fp, r3
    f22a:	46b8      	mov	r8, r7
    f22c:	4b2e      	ldr	r3, [pc, #184]	; (f2e8 <__aeabi_dmul+0x1ec>)
    f22e:	2700      	movs	r7, #0
    f230:	469c      	mov	ip, r3
    f232:	2300      	movs	r3, #0
    f234:	4460      	add	r0, ip
    f236:	4246      	negs	r6, r0
    f238:	9301      	str	r3, [sp, #4]
    f23a:	e785      	b.n	f148 <__aeabi_dmul+0x4c>
    f23c:	4652      	mov	r2, sl
    f23e:	432a      	orrs	r2, r5
    f240:	d12c      	bne.n	f29c <__aeabi_dmul+0x1a0>
    f242:	2500      	movs	r5, #0
    f244:	2300      	movs	r3, #0
    f246:	2202      	movs	r2, #2
    f248:	e797      	b.n	f17a <__aeabi_dmul+0x7e>
    f24a:	4652      	mov	r2, sl
    f24c:	432a      	orrs	r2, r5
    f24e:	d021      	beq.n	f294 <__aeabi_dmul+0x198>
    f250:	2d00      	cmp	r5, #0
    f252:	d100      	bne.n	f256 <__aeabi_dmul+0x15a>
    f254:	e154      	b.n	f500 <__aeabi_dmul+0x404>
    f256:	0028      	movs	r0, r5
    f258:	f000 fa00 	bl	f65c <__clzsi2>
    f25c:	0003      	movs	r3, r0
    f25e:	3b0b      	subs	r3, #11
    f260:	2b1c      	cmp	r3, #28
    f262:	dd00      	ble.n	f266 <__aeabi_dmul+0x16a>
    f264:	e146      	b.n	f4f4 <__aeabi_dmul+0x3f8>
    f266:	211d      	movs	r1, #29
    f268:	1acb      	subs	r3, r1, r3
    f26a:	4651      	mov	r1, sl
    f26c:	0002      	movs	r2, r0
    f26e:	40d9      	lsrs	r1, r3
    f270:	4653      	mov	r3, sl
    f272:	3a08      	subs	r2, #8
    f274:	4095      	lsls	r5, r2
    f276:	4093      	lsls	r3, r2
    f278:	430d      	orrs	r5, r1
    f27a:	4a1b      	ldr	r2, [pc, #108]	; (f2e8 <__aeabi_dmul+0x1ec>)
    f27c:	4694      	mov	ip, r2
    f27e:	4460      	add	r0, ip
    f280:	4240      	negs	r0, r0
    f282:	2200      	movs	r2, #0
    f284:	e779      	b.n	f17a <__aeabi_dmul+0x7e>
    f286:	2401      	movs	r4, #1
    f288:	2200      	movs	r2, #0
    f28a:	400c      	ands	r4, r1
    f28c:	4b12      	ldr	r3, [pc, #72]	; (f2d8 <__aeabi_dmul+0x1dc>)
    f28e:	2500      	movs	r5, #0
    f290:	4690      	mov	r8, r2
    f292:	e799      	b.n	f1c8 <__aeabi_dmul+0xcc>
    f294:	2500      	movs	r5, #0
    f296:	2300      	movs	r3, #0
    f298:	2201      	movs	r2, #1
    f29a:	e76e      	b.n	f17a <__aeabi_dmul+0x7e>
    f29c:	2203      	movs	r2, #3
    f29e:	e76c      	b.n	f17a <__aeabi_dmul+0x7e>
    f2a0:	2300      	movs	r3, #0
    f2a2:	469b      	mov	fp, r3
    f2a4:	4698      	mov	r8, r3
    f2a6:	3301      	adds	r3, #1
    f2a8:	2704      	movs	r7, #4
    f2aa:	9301      	str	r3, [sp, #4]
    f2ac:	e74c      	b.n	f148 <__aeabi_dmul+0x4c>
    f2ae:	2303      	movs	r3, #3
    f2b0:	270c      	movs	r7, #12
    f2b2:	9301      	str	r3, [sp, #4]
    f2b4:	e748      	b.n	f148 <__aeabi_dmul+0x4c>
    f2b6:	2300      	movs	r3, #0
    f2b8:	2580      	movs	r5, #128	; 0x80
    f2ba:	4698      	mov	r8, r3
    f2bc:	2400      	movs	r4, #0
    f2be:	032d      	lsls	r5, r5, #12
    f2c0:	4b05      	ldr	r3, [pc, #20]	; (f2d8 <__aeabi_dmul+0x1dc>)
    f2c2:	e781      	b.n	f1c8 <__aeabi_dmul+0xcc>
    f2c4:	465d      	mov	r5, fp
    f2c6:	4643      	mov	r3, r8
    f2c8:	9a01      	ldr	r2, [sp, #4]
    f2ca:	e76f      	b.n	f1ac <__aeabi_dmul+0xb0>
    f2cc:	465d      	mov	r5, fp
    f2ce:	4643      	mov	r3, r8
    f2d0:	0021      	movs	r1, r4
    f2d2:	9a01      	ldr	r2, [sp, #4]
    f2d4:	e76a      	b.n	f1ac <__aeabi_dmul+0xb0>
    f2d6:	46c0      	nop			; (mov r8, r8)
    f2d8:	000007ff 	.word	0x000007ff
    f2dc:	fffffc01 	.word	0xfffffc01
    f2e0:	00012638 	.word	0x00012638
    f2e4:	800fffff 	.word	0x800fffff
    f2e8:	000003f3 	.word	0x000003f3
    f2ec:	4642      	mov	r2, r8
    f2ee:	0c12      	lsrs	r2, r2, #16
    f2f0:	4691      	mov	r9, r2
    f2f2:	0c1a      	lsrs	r2, r3, #16
    f2f4:	4694      	mov	ip, r2
    f2f6:	4642      	mov	r2, r8
    f2f8:	0417      	lsls	r7, r2, #16
    f2fa:	464a      	mov	r2, r9
    f2fc:	041b      	lsls	r3, r3, #16
    f2fe:	0c1b      	lsrs	r3, r3, #16
    f300:	435a      	muls	r2, r3
    f302:	4660      	mov	r0, ip
    f304:	4690      	mov	r8, r2
    f306:	464a      	mov	r2, r9
    f308:	4342      	muls	r2, r0
    f30a:	0010      	movs	r0, r2
    f30c:	9203      	str	r2, [sp, #12]
    f30e:	4662      	mov	r2, ip
    f310:	001c      	movs	r4, r3
    f312:	0c3f      	lsrs	r7, r7, #16
    f314:	437a      	muls	r2, r7
    f316:	437c      	muls	r4, r7
    f318:	4442      	add	r2, r8
    f31a:	9201      	str	r2, [sp, #4]
    f31c:	0c22      	lsrs	r2, r4, #16
    f31e:	4692      	mov	sl, r2
    f320:	9a01      	ldr	r2, [sp, #4]
    f322:	4452      	add	r2, sl
    f324:	4590      	cmp	r8, r2
    f326:	d906      	bls.n	f336 <__aeabi_dmul+0x23a>
    f328:	4682      	mov	sl, r0
    f32a:	2080      	movs	r0, #128	; 0x80
    f32c:	0240      	lsls	r0, r0, #9
    f32e:	4680      	mov	r8, r0
    f330:	44c2      	add	sl, r8
    f332:	4650      	mov	r0, sl
    f334:	9003      	str	r0, [sp, #12]
    f336:	0c10      	lsrs	r0, r2, #16
    f338:	9004      	str	r0, [sp, #16]
    f33a:	4648      	mov	r0, r9
    f33c:	0424      	lsls	r4, r4, #16
    f33e:	0c24      	lsrs	r4, r4, #16
    f340:	0412      	lsls	r2, r2, #16
    f342:	1912      	adds	r2, r2, r4
    f344:	9205      	str	r2, [sp, #20]
    f346:	0c2a      	lsrs	r2, r5, #16
    f348:	042d      	lsls	r5, r5, #16
    f34a:	0c2d      	lsrs	r5, r5, #16
    f34c:	4368      	muls	r0, r5
    f34e:	002c      	movs	r4, r5
    f350:	4682      	mov	sl, r0
    f352:	4648      	mov	r0, r9
    f354:	437c      	muls	r4, r7
    f356:	4350      	muls	r0, r2
    f358:	4681      	mov	r9, r0
    f35a:	0c20      	lsrs	r0, r4, #16
    f35c:	4680      	mov	r8, r0
    f35e:	4357      	muls	r7, r2
    f360:	4457      	add	r7, sl
    f362:	4447      	add	r7, r8
    f364:	45ba      	cmp	sl, r7
    f366:	d903      	bls.n	f370 <__aeabi_dmul+0x274>
    f368:	2080      	movs	r0, #128	; 0x80
    f36a:	0240      	lsls	r0, r0, #9
    f36c:	4680      	mov	r8, r0
    f36e:	44c1      	add	r9, r8
    f370:	0c38      	lsrs	r0, r7, #16
    f372:	043f      	lsls	r7, r7, #16
    f374:	46b8      	mov	r8, r7
    f376:	4448      	add	r0, r9
    f378:	0424      	lsls	r4, r4, #16
    f37a:	0c24      	lsrs	r4, r4, #16
    f37c:	9001      	str	r0, [sp, #4]
    f37e:	9804      	ldr	r0, [sp, #16]
    f380:	44a0      	add	r8, r4
    f382:	4440      	add	r0, r8
    f384:	9004      	str	r0, [sp, #16]
    f386:	4658      	mov	r0, fp
    f388:	0c00      	lsrs	r0, r0, #16
    f38a:	4681      	mov	r9, r0
    f38c:	4658      	mov	r0, fp
    f38e:	0404      	lsls	r4, r0, #16
    f390:	0c20      	lsrs	r0, r4, #16
    f392:	4682      	mov	sl, r0
    f394:	0007      	movs	r7, r0
    f396:	4648      	mov	r0, r9
    f398:	435f      	muls	r7, r3
    f39a:	464c      	mov	r4, r9
    f39c:	4343      	muls	r3, r0
    f39e:	4660      	mov	r0, ip
    f3a0:	4360      	muls	r0, r4
    f3a2:	4664      	mov	r4, ip
    f3a4:	4683      	mov	fp, r0
    f3a6:	4650      	mov	r0, sl
    f3a8:	4344      	muls	r4, r0
    f3aa:	0c38      	lsrs	r0, r7, #16
    f3ac:	4684      	mov	ip, r0
    f3ae:	18e4      	adds	r4, r4, r3
    f3b0:	4464      	add	r4, ip
    f3b2:	42a3      	cmp	r3, r4
    f3b4:	d903      	bls.n	f3be <__aeabi_dmul+0x2c2>
    f3b6:	2380      	movs	r3, #128	; 0x80
    f3b8:	025b      	lsls	r3, r3, #9
    f3ba:	469c      	mov	ip, r3
    f3bc:	44e3      	add	fp, ip
    f3be:	4648      	mov	r0, r9
    f3c0:	043f      	lsls	r7, r7, #16
    f3c2:	0c23      	lsrs	r3, r4, #16
    f3c4:	0c3f      	lsrs	r7, r7, #16
    f3c6:	0424      	lsls	r4, r4, #16
    f3c8:	19e4      	adds	r4, r4, r7
    f3ca:	4657      	mov	r7, sl
    f3cc:	4368      	muls	r0, r5
    f3ce:	436f      	muls	r7, r5
    f3d0:	4684      	mov	ip, r0
    f3d2:	464d      	mov	r5, r9
    f3d4:	4650      	mov	r0, sl
    f3d6:	4355      	muls	r5, r2
    f3d8:	4342      	muls	r2, r0
    f3da:	0c38      	lsrs	r0, r7, #16
    f3dc:	4681      	mov	r9, r0
    f3de:	4462      	add	r2, ip
    f3e0:	444a      	add	r2, r9
    f3e2:	445b      	add	r3, fp
    f3e4:	4594      	cmp	ip, r2
    f3e6:	d903      	bls.n	f3f0 <__aeabi_dmul+0x2f4>
    f3e8:	2080      	movs	r0, #128	; 0x80
    f3ea:	0240      	lsls	r0, r0, #9
    f3ec:	4684      	mov	ip, r0
    f3ee:	4465      	add	r5, ip
    f3f0:	9803      	ldr	r0, [sp, #12]
    f3f2:	043f      	lsls	r7, r7, #16
    f3f4:	4683      	mov	fp, r0
    f3f6:	9804      	ldr	r0, [sp, #16]
    f3f8:	0c3f      	lsrs	r7, r7, #16
    f3fa:	4684      	mov	ip, r0
    f3fc:	44e3      	add	fp, ip
    f3fe:	45c3      	cmp	fp, r8
    f400:	4180      	sbcs	r0, r0
    f402:	4240      	negs	r0, r0
    f404:	4682      	mov	sl, r0
    f406:	0410      	lsls	r0, r2, #16
    f408:	4684      	mov	ip, r0
    f40a:	9801      	ldr	r0, [sp, #4]
    f40c:	4467      	add	r7, ip
    f40e:	4684      	mov	ip, r0
    f410:	4467      	add	r7, ip
    f412:	44a3      	add	fp, r4
    f414:	46bc      	mov	ip, r7
    f416:	45a3      	cmp	fp, r4
    f418:	41a4      	sbcs	r4, r4
    f41a:	4699      	mov	r9, r3
    f41c:	44d4      	add	ip, sl
    f41e:	4264      	negs	r4, r4
    f420:	4287      	cmp	r7, r0
    f422:	41bf      	sbcs	r7, r7
    f424:	45d4      	cmp	ip, sl
    f426:	4180      	sbcs	r0, r0
    f428:	44e1      	add	r9, ip
    f42a:	46a0      	mov	r8, r4
    f42c:	4599      	cmp	r9, r3
    f42e:	419b      	sbcs	r3, r3
    f430:	427f      	negs	r7, r7
    f432:	4240      	negs	r0, r0
    f434:	44c8      	add	r8, r9
    f436:	4307      	orrs	r7, r0
    f438:	0c12      	lsrs	r2, r2, #16
    f43a:	18ba      	adds	r2, r7, r2
    f43c:	45a0      	cmp	r8, r4
    f43e:	41a4      	sbcs	r4, r4
    f440:	425f      	negs	r7, r3
    f442:	003b      	movs	r3, r7
    f444:	4264      	negs	r4, r4
    f446:	4323      	orrs	r3, r4
    f448:	18d7      	adds	r7, r2, r3
    f44a:	4643      	mov	r3, r8
    f44c:	197d      	adds	r5, r7, r5
    f44e:	0ddb      	lsrs	r3, r3, #23
    f450:	026d      	lsls	r5, r5, #9
    f452:	431d      	orrs	r5, r3
    f454:	465b      	mov	r3, fp
    f456:	025a      	lsls	r2, r3, #9
    f458:	9b05      	ldr	r3, [sp, #20]
    f45a:	431a      	orrs	r2, r3
    f45c:	1e53      	subs	r3, r2, #1
    f45e:	419a      	sbcs	r2, r3
    f460:	465b      	mov	r3, fp
    f462:	0ddb      	lsrs	r3, r3, #23
    f464:	431a      	orrs	r2, r3
    f466:	4643      	mov	r3, r8
    f468:	025b      	lsls	r3, r3, #9
    f46a:	4313      	orrs	r3, r2
    f46c:	01ea      	lsls	r2, r5, #7
    f46e:	d507      	bpl.n	f480 <__aeabi_dmul+0x384>
    f470:	2201      	movs	r2, #1
    f472:	085c      	lsrs	r4, r3, #1
    f474:	4013      	ands	r3, r2
    f476:	4323      	orrs	r3, r4
    f478:	07ea      	lsls	r2, r5, #31
    f47a:	9e02      	ldr	r6, [sp, #8]
    f47c:	4313      	orrs	r3, r2
    f47e:	086d      	lsrs	r5, r5, #1
    f480:	4a57      	ldr	r2, [pc, #348]	; (f5e0 <__aeabi_dmul+0x4e4>)
    f482:	18b2      	adds	r2, r6, r2
    f484:	2a00      	cmp	r2, #0
    f486:	dd4b      	ble.n	f520 <__aeabi_dmul+0x424>
    f488:	0758      	lsls	r0, r3, #29
    f48a:	d009      	beq.n	f4a0 <__aeabi_dmul+0x3a4>
    f48c:	200f      	movs	r0, #15
    f48e:	4018      	ands	r0, r3
    f490:	2804      	cmp	r0, #4
    f492:	d005      	beq.n	f4a0 <__aeabi_dmul+0x3a4>
    f494:	1d18      	adds	r0, r3, #4
    f496:	4298      	cmp	r0, r3
    f498:	419b      	sbcs	r3, r3
    f49a:	425b      	negs	r3, r3
    f49c:	18ed      	adds	r5, r5, r3
    f49e:	0003      	movs	r3, r0
    f4a0:	01e8      	lsls	r0, r5, #7
    f4a2:	d504      	bpl.n	f4ae <__aeabi_dmul+0x3b2>
    f4a4:	4a4f      	ldr	r2, [pc, #316]	; (f5e4 <__aeabi_dmul+0x4e8>)
    f4a6:	4015      	ands	r5, r2
    f4a8:	2280      	movs	r2, #128	; 0x80
    f4aa:	00d2      	lsls	r2, r2, #3
    f4ac:	18b2      	adds	r2, r6, r2
    f4ae:	484e      	ldr	r0, [pc, #312]	; (f5e8 <__aeabi_dmul+0x4ec>)
    f4b0:	4282      	cmp	r2, r0
    f4b2:	dd00      	ble.n	f4b6 <__aeabi_dmul+0x3ba>
    f4b4:	e6e7      	b.n	f286 <__aeabi_dmul+0x18a>
    f4b6:	2401      	movs	r4, #1
    f4b8:	08db      	lsrs	r3, r3, #3
    f4ba:	0768      	lsls	r0, r5, #29
    f4bc:	4318      	orrs	r0, r3
    f4be:	026d      	lsls	r5, r5, #9
    f4c0:	0553      	lsls	r3, r2, #21
    f4c2:	4680      	mov	r8, r0
    f4c4:	0b2d      	lsrs	r5, r5, #12
    f4c6:	0d5b      	lsrs	r3, r3, #21
    f4c8:	400c      	ands	r4, r1
    f4ca:	e67d      	b.n	f1c8 <__aeabi_dmul+0xcc>
    f4cc:	2280      	movs	r2, #128	; 0x80
    f4ce:	4659      	mov	r1, fp
    f4d0:	0312      	lsls	r2, r2, #12
    f4d2:	4211      	tst	r1, r2
    f4d4:	d008      	beq.n	f4e8 <__aeabi_dmul+0x3ec>
    f4d6:	4215      	tst	r5, r2
    f4d8:	d106      	bne.n	f4e8 <__aeabi_dmul+0x3ec>
    f4da:	4315      	orrs	r5, r2
    f4dc:	032d      	lsls	r5, r5, #12
    f4de:	4698      	mov	r8, r3
    f4e0:	0b2d      	lsrs	r5, r5, #12
    f4e2:	464c      	mov	r4, r9
    f4e4:	4b41      	ldr	r3, [pc, #260]	; (f5ec <__aeabi_dmul+0x4f0>)
    f4e6:	e66f      	b.n	f1c8 <__aeabi_dmul+0xcc>
    f4e8:	465d      	mov	r5, fp
    f4ea:	4315      	orrs	r5, r2
    f4ec:	032d      	lsls	r5, r5, #12
    f4ee:	0b2d      	lsrs	r5, r5, #12
    f4f0:	4b3e      	ldr	r3, [pc, #248]	; (f5ec <__aeabi_dmul+0x4f0>)
    f4f2:	e669      	b.n	f1c8 <__aeabi_dmul+0xcc>
    f4f4:	0003      	movs	r3, r0
    f4f6:	4655      	mov	r5, sl
    f4f8:	3b28      	subs	r3, #40	; 0x28
    f4fa:	409d      	lsls	r5, r3
    f4fc:	2300      	movs	r3, #0
    f4fe:	e6bc      	b.n	f27a <__aeabi_dmul+0x17e>
    f500:	4650      	mov	r0, sl
    f502:	f000 f8ab 	bl	f65c <__clzsi2>
    f506:	3020      	adds	r0, #32
    f508:	e6a8      	b.n	f25c <__aeabi_dmul+0x160>
    f50a:	0003      	movs	r3, r0
    f50c:	3b28      	subs	r3, #40	; 0x28
    f50e:	409f      	lsls	r7, r3
    f510:	2300      	movs	r3, #0
    f512:	46bb      	mov	fp, r7
    f514:	4698      	mov	r8, r3
    f516:	e689      	b.n	f22c <__aeabi_dmul+0x130>
    f518:	f000 f8a0 	bl	f65c <__clzsi2>
    f51c:	3020      	adds	r0, #32
    f51e:	e673      	b.n	f208 <__aeabi_dmul+0x10c>
    f520:	2401      	movs	r4, #1
    f522:	1aa6      	subs	r6, r4, r2
    f524:	2e38      	cmp	r6, #56	; 0x38
    f526:	dd07      	ble.n	f538 <__aeabi_dmul+0x43c>
    f528:	2200      	movs	r2, #0
    f52a:	400c      	ands	r4, r1
    f52c:	2300      	movs	r3, #0
    f52e:	2500      	movs	r5, #0
    f530:	4690      	mov	r8, r2
    f532:	e649      	b.n	f1c8 <__aeabi_dmul+0xcc>
    f534:	9e02      	ldr	r6, [sp, #8]
    f536:	e7a3      	b.n	f480 <__aeabi_dmul+0x384>
    f538:	2e1f      	cmp	r6, #31
    f53a:	dc20      	bgt.n	f57e <__aeabi_dmul+0x482>
    f53c:	2220      	movs	r2, #32
    f53e:	002c      	movs	r4, r5
    f540:	0018      	movs	r0, r3
    f542:	1b92      	subs	r2, r2, r6
    f544:	40f0      	lsrs	r0, r6
    f546:	4094      	lsls	r4, r2
    f548:	4093      	lsls	r3, r2
    f54a:	4304      	orrs	r4, r0
    f54c:	1e58      	subs	r0, r3, #1
    f54e:	4183      	sbcs	r3, r0
    f550:	431c      	orrs	r4, r3
    f552:	40f5      	lsrs	r5, r6
    f554:	0763      	lsls	r3, r4, #29
    f556:	d009      	beq.n	f56c <__aeabi_dmul+0x470>
    f558:	230f      	movs	r3, #15
    f55a:	4023      	ands	r3, r4
    f55c:	2b04      	cmp	r3, #4
    f55e:	d005      	beq.n	f56c <__aeabi_dmul+0x470>
    f560:	0023      	movs	r3, r4
    f562:	1d1c      	adds	r4, r3, #4
    f564:	429c      	cmp	r4, r3
    f566:	4192      	sbcs	r2, r2
    f568:	4252      	negs	r2, r2
    f56a:	18ad      	adds	r5, r5, r2
    f56c:	022b      	lsls	r3, r5, #8
    f56e:	d51f      	bpl.n	f5b0 <__aeabi_dmul+0x4b4>
    f570:	2401      	movs	r4, #1
    f572:	2200      	movs	r2, #0
    f574:	400c      	ands	r4, r1
    f576:	2301      	movs	r3, #1
    f578:	2500      	movs	r5, #0
    f57a:	4690      	mov	r8, r2
    f57c:	e624      	b.n	f1c8 <__aeabi_dmul+0xcc>
    f57e:	201f      	movs	r0, #31
    f580:	002c      	movs	r4, r5
    f582:	4240      	negs	r0, r0
    f584:	1a82      	subs	r2, r0, r2
    f586:	40d4      	lsrs	r4, r2
    f588:	2e20      	cmp	r6, #32
    f58a:	d01c      	beq.n	f5c6 <__aeabi_dmul+0x4ca>
    f58c:	2240      	movs	r2, #64	; 0x40
    f58e:	1b96      	subs	r6, r2, r6
    f590:	40b5      	lsls	r5, r6
    f592:	432b      	orrs	r3, r5
    f594:	1e58      	subs	r0, r3, #1
    f596:	4183      	sbcs	r3, r0
    f598:	2007      	movs	r0, #7
    f59a:	4323      	orrs	r3, r4
    f59c:	4018      	ands	r0, r3
    f59e:	2500      	movs	r5, #0
    f5a0:	2800      	cmp	r0, #0
    f5a2:	d009      	beq.n	f5b8 <__aeabi_dmul+0x4bc>
    f5a4:	220f      	movs	r2, #15
    f5a6:	2500      	movs	r5, #0
    f5a8:	401a      	ands	r2, r3
    f5aa:	001c      	movs	r4, r3
    f5ac:	2a04      	cmp	r2, #4
    f5ae:	d1d8      	bne.n	f562 <__aeabi_dmul+0x466>
    f5b0:	0023      	movs	r3, r4
    f5b2:	0768      	lsls	r0, r5, #29
    f5b4:	026d      	lsls	r5, r5, #9
    f5b6:	0b2d      	lsrs	r5, r5, #12
    f5b8:	2401      	movs	r4, #1
    f5ba:	08db      	lsrs	r3, r3, #3
    f5bc:	4303      	orrs	r3, r0
    f5be:	4698      	mov	r8, r3
    f5c0:	400c      	ands	r4, r1
    f5c2:	2300      	movs	r3, #0
    f5c4:	e600      	b.n	f1c8 <__aeabi_dmul+0xcc>
    f5c6:	2500      	movs	r5, #0
    f5c8:	e7e3      	b.n	f592 <__aeabi_dmul+0x496>
    f5ca:	2280      	movs	r2, #128	; 0x80
    f5cc:	2401      	movs	r4, #1
    f5ce:	0312      	lsls	r2, r2, #12
    f5d0:	4315      	orrs	r5, r2
    f5d2:	032d      	lsls	r5, r5, #12
    f5d4:	4698      	mov	r8, r3
    f5d6:	0b2d      	lsrs	r5, r5, #12
    f5d8:	400c      	ands	r4, r1
    f5da:	4b04      	ldr	r3, [pc, #16]	; (f5ec <__aeabi_dmul+0x4f0>)
    f5dc:	e5f4      	b.n	f1c8 <__aeabi_dmul+0xcc>
    f5de:	46c0      	nop			; (mov r8, r8)
    f5e0:	000003ff 	.word	0x000003ff
    f5e4:	feffffff 	.word	0xfeffffff
    f5e8:	000007fe 	.word	0x000007fe
    f5ec:	000007ff 	.word	0x000007ff

0000f5f0 <__aeabi_d2iz>:
    f5f0:	030b      	lsls	r3, r1, #12
    f5f2:	b530      	push	{r4, r5, lr}
    f5f4:	4d13      	ldr	r5, [pc, #76]	; (f644 <__aeabi_d2iz+0x54>)
    f5f6:	0b1a      	lsrs	r2, r3, #12
    f5f8:	004b      	lsls	r3, r1, #1
    f5fa:	0d5b      	lsrs	r3, r3, #21
    f5fc:	0fc9      	lsrs	r1, r1, #31
    f5fe:	2400      	movs	r4, #0
    f600:	42ab      	cmp	r3, r5
    f602:	dd11      	ble.n	f628 <__aeabi_d2iz+0x38>
    f604:	4c10      	ldr	r4, [pc, #64]	; (f648 <__aeabi_d2iz+0x58>)
    f606:	42a3      	cmp	r3, r4
    f608:	dc10      	bgt.n	f62c <__aeabi_d2iz+0x3c>
    f60a:	2480      	movs	r4, #128	; 0x80
    f60c:	0364      	lsls	r4, r4, #13
    f60e:	4322      	orrs	r2, r4
    f610:	4c0e      	ldr	r4, [pc, #56]	; (f64c <__aeabi_d2iz+0x5c>)
    f612:	1ae4      	subs	r4, r4, r3
    f614:	2c1f      	cmp	r4, #31
    f616:	dd0c      	ble.n	f632 <__aeabi_d2iz+0x42>
    f618:	480d      	ldr	r0, [pc, #52]	; (f650 <__aeabi_d2iz+0x60>)
    f61a:	1ac3      	subs	r3, r0, r3
    f61c:	40da      	lsrs	r2, r3
    f61e:	0013      	movs	r3, r2
    f620:	425c      	negs	r4, r3
    f622:	2900      	cmp	r1, #0
    f624:	d100      	bne.n	f628 <__aeabi_d2iz+0x38>
    f626:	001c      	movs	r4, r3
    f628:	0020      	movs	r0, r4
    f62a:	bd30      	pop	{r4, r5, pc}
    f62c:	4b09      	ldr	r3, [pc, #36]	; (f654 <__aeabi_d2iz+0x64>)
    f62e:	18cc      	adds	r4, r1, r3
    f630:	e7fa      	b.n	f628 <__aeabi_d2iz+0x38>
    f632:	40e0      	lsrs	r0, r4
    f634:	4c08      	ldr	r4, [pc, #32]	; (f658 <__aeabi_d2iz+0x68>)
    f636:	46a4      	mov	ip, r4
    f638:	4463      	add	r3, ip
    f63a:	409a      	lsls	r2, r3
    f63c:	0013      	movs	r3, r2
    f63e:	4303      	orrs	r3, r0
    f640:	e7ee      	b.n	f620 <__aeabi_d2iz+0x30>
    f642:	46c0      	nop			; (mov r8, r8)
    f644:	000003fe 	.word	0x000003fe
    f648:	0000041d 	.word	0x0000041d
    f64c:	00000433 	.word	0x00000433
    f650:	00000413 	.word	0x00000413
    f654:	7fffffff 	.word	0x7fffffff
    f658:	fffffbed 	.word	0xfffffbed

0000f65c <__clzsi2>:
    f65c:	211c      	movs	r1, #28
    f65e:	2301      	movs	r3, #1
    f660:	041b      	lsls	r3, r3, #16
    f662:	4298      	cmp	r0, r3
    f664:	d301      	bcc.n	f66a <__clzsi2+0xe>
    f666:	0c00      	lsrs	r0, r0, #16
    f668:	3910      	subs	r1, #16
    f66a:	0a1b      	lsrs	r3, r3, #8
    f66c:	4298      	cmp	r0, r3
    f66e:	d301      	bcc.n	f674 <__clzsi2+0x18>
    f670:	0a00      	lsrs	r0, r0, #8
    f672:	3908      	subs	r1, #8
    f674:	091b      	lsrs	r3, r3, #4
    f676:	4298      	cmp	r0, r3
    f678:	d301      	bcc.n	f67e <__clzsi2+0x22>
    f67a:	0900      	lsrs	r0, r0, #4
    f67c:	3904      	subs	r1, #4
    f67e:	a202      	add	r2, pc, #8	; (adr r2, f688 <__clzsi2+0x2c>)
    f680:	5c10      	ldrb	r0, [r2, r0]
    f682:	1840      	adds	r0, r0, r1
    f684:	4770      	bx	lr
    f686:	46c0      	nop			; (mov r8, r8)
    f688:	02020304 	.word	0x02020304
    f68c:	01010101 	.word	0x01010101
	...

0000f698 <__clzdi2>:
    f698:	b510      	push	{r4, lr}
    f69a:	2900      	cmp	r1, #0
    f69c:	d103      	bne.n	f6a6 <__clzdi2+0xe>
    f69e:	f7ff ffdd 	bl	f65c <__clzsi2>
    f6a2:	3020      	adds	r0, #32
    f6a4:	e002      	b.n	f6ac <__clzdi2+0x14>
    f6a6:	1c08      	adds	r0, r1, #0
    f6a8:	f7ff ffd8 	bl	f65c <__clzsi2>
    f6ac:	bd10      	pop	{r4, pc}
    f6ae:	46c0      	nop			; (mov r8, r8)

0000f6b0 <__assert_func>:
    f6b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f6b2:	001d      	movs	r5, r3
    f6b4:	4b0a      	ldr	r3, [pc, #40]	; (f6e0 <__assert_func+0x30>)
    f6b6:	0006      	movs	r6, r0
    f6b8:	681b      	ldr	r3, [r3, #0]
    f6ba:	68d8      	ldr	r0, [r3, #12]
    f6bc:	2a00      	cmp	r2, #0
    f6be:	d102      	bne.n	f6c6 <__assert_func+0x16>
    f6c0:	4c08      	ldr	r4, [pc, #32]	; (f6e4 <__assert_func+0x34>)
    f6c2:	0023      	movs	r3, r4
    f6c4:	e001      	b.n	f6ca <__assert_func+0x1a>
    f6c6:	0013      	movs	r3, r2
    f6c8:	4c07      	ldr	r4, [pc, #28]	; (f6e8 <__assert_func+0x38>)
    f6ca:	9302      	str	r3, [sp, #8]
    f6cc:	9100      	str	r1, [sp, #0]
    f6ce:	0033      	movs	r3, r6
    f6d0:	002a      	movs	r2, r5
    f6d2:	4906      	ldr	r1, [pc, #24]	; (f6ec <__assert_func+0x3c>)
    f6d4:	9401      	str	r4, [sp, #4]
    f6d6:	f000 f811 	bl	f6fc <fiprintf>
    f6da:	f000 fe79 	bl	103d0 <abort>
    f6de:	46c0      	nop			; (mov r8, r8)
    f6e0:	20000094 	.word	0x20000094
    f6e4:	000126b3 	.word	0x000126b3
    f6e8:	00012678 	.word	0x00012678
    f6ec:	00012685 	.word	0x00012685

0000f6f0 <atoi>:
    f6f0:	b510      	push	{r4, lr}
    f6f2:	220a      	movs	r2, #10
    f6f4:	2100      	movs	r1, #0
    f6f6:	f000 fd91 	bl	1021c <strtol>
    f6fa:	bd10      	pop	{r4, pc}

0000f6fc <fiprintf>:
    f6fc:	b40e      	push	{r1, r2, r3}
    f6fe:	b503      	push	{r0, r1, lr}
    f700:	0001      	movs	r1, r0
    f702:	ab03      	add	r3, sp, #12
    f704:	4804      	ldr	r0, [pc, #16]	; (f718 <fiprintf+0x1c>)
    f706:	cb04      	ldmia	r3!, {r2}
    f708:	6800      	ldr	r0, [r0, #0]
    f70a:	9301      	str	r3, [sp, #4]
    f70c:	f000 f864 	bl	f7d8 <_vfiprintf_r>
    f710:	b002      	add	sp, #8
    f712:	bc08      	pop	{r3}
    f714:	b003      	add	sp, #12
    f716:	4718      	bx	r3
    f718:	20000094 	.word	0x20000094

0000f71c <__libc_init_array>:
    f71c:	4b0e      	ldr	r3, [pc, #56]	; (f758 <__libc_init_array+0x3c>)
    f71e:	b570      	push	{r4, r5, r6, lr}
    f720:	2500      	movs	r5, #0
    f722:	001e      	movs	r6, r3
    f724:	4c0d      	ldr	r4, [pc, #52]	; (f75c <__libc_init_array+0x40>)
    f726:	1ae4      	subs	r4, r4, r3
    f728:	10a4      	asrs	r4, r4, #2
    f72a:	42a5      	cmp	r5, r4
    f72c:	d004      	beq.n	f738 <__libc_init_array+0x1c>
    f72e:	00ab      	lsls	r3, r5, #2
    f730:	58f3      	ldr	r3, [r6, r3]
    f732:	4798      	blx	r3
    f734:	3501      	adds	r5, #1
    f736:	e7f8      	b.n	f72a <__libc_init_array+0xe>
    f738:	f003 f88a 	bl	12850 <_init>
    f73c:	4b08      	ldr	r3, [pc, #32]	; (f760 <__libc_init_array+0x44>)
    f73e:	2500      	movs	r5, #0
    f740:	001e      	movs	r6, r3
    f742:	4c08      	ldr	r4, [pc, #32]	; (f764 <__libc_init_array+0x48>)
    f744:	1ae4      	subs	r4, r4, r3
    f746:	10a4      	asrs	r4, r4, #2
    f748:	42a5      	cmp	r5, r4
    f74a:	d004      	beq.n	f756 <__libc_init_array+0x3a>
    f74c:	00ab      	lsls	r3, r5, #2
    f74e:	58f3      	ldr	r3, [r6, r3]
    f750:	4798      	blx	r3
    f752:	3501      	adds	r5, #1
    f754:	e7f8      	b.n	f748 <__libc_init_array+0x2c>
    f756:	bd70      	pop	{r4, r5, r6, pc}
    f758:	0001285c 	.word	0x0001285c
    f75c:	0001285c 	.word	0x0001285c
    f760:	0001285c 	.word	0x0001285c
    f764:	00012860 	.word	0x00012860

0000f768 <memcpy>:
    f768:	2300      	movs	r3, #0
    f76a:	b510      	push	{r4, lr}
    f76c:	429a      	cmp	r2, r3
    f76e:	d003      	beq.n	f778 <memcpy+0x10>
    f770:	5ccc      	ldrb	r4, [r1, r3]
    f772:	54c4      	strb	r4, [r0, r3]
    f774:	3301      	adds	r3, #1
    f776:	e7f9      	b.n	f76c <memcpy+0x4>
    f778:	bd10      	pop	{r4, pc}

0000f77a <memset>:
    f77a:	0003      	movs	r3, r0
    f77c:	1882      	adds	r2, r0, r2
    f77e:	4293      	cmp	r3, r2
    f780:	d002      	beq.n	f788 <memset+0xe>
    f782:	7019      	strb	r1, [r3, #0]
    f784:	3301      	adds	r3, #1
    f786:	e7fa      	b.n	f77e <memset+0x4>
    f788:	4770      	bx	lr

0000f78a <__sfputc_r>:
    f78a:	6893      	ldr	r3, [r2, #8]
    f78c:	b510      	push	{r4, lr}
    f78e:	3b01      	subs	r3, #1
    f790:	6093      	str	r3, [r2, #8]
    f792:	2b00      	cmp	r3, #0
    f794:	da05      	bge.n	f7a2 <__sfputc_r+0x18>
    f796:	6994      	ldr	r4, [r2, #24]
    f798:	42a3      	cmp	r3, r4
    f79a:	db08      	blt.n	f7ae <__sfputc_r+0x24>
    f79c:	b2cb      	uxtb	r3, r1
    f79e:	2b0a      	cmp	r3, #10
    f7a0:	d005      	beq.n	f7ae <__sfputc_r+0x24>
    f7a2:	6813      	ldr	r3, [r2, #0]
    f7a4:	1c58      	adds	r0, r3, #1
    f7a6:	6010      	str	r0, [r2, #0]
    f7a8:	7019      	strb	r1, [r3, #0]
    f7aa:	b2c8      	uxtb	r0, r1
    f7ac:	e001      	b.n	f7b2 <__sfputc_r+0x28>
    f7ae:	f000 fd41 	bl	10234 <__swbuf_r>
    f7b2:	bd10      	pop	{r4, pc}

0000f7b4 <__sfputs_r>:
    f7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7b6:	0006      	movs	r6, r0
    f7b8:	000f      	movs	r7, r1
    f7ba:	0014      	movs	r4, r2
    f7bc:	18d5      	adds	r5, r2, r3
    f7be:	42ac      	cmp	r4, r5
    f7c0:	d008      	beq.n	f7d4 <__sfputs_r+0x20>
    f7c2:	7821      	ldrb	r1, [r4, #0]
    f7c4:	003a      	movs	r2, r7
    f7c6:	0030      	movs	r0, r6
    f7c8:	f7ff ffdf 	bl	f78a <__sfputc_r>
    f7cc:	3401      	adds	r4, #1
    f7ce:	1c43      	adds	r3, r0, #1
    f7d0:	d1f5      	bne.n	f7be <__sfputs_r+0xa>
    f7d2:	e000      	b.n	f7d6 <__sfputs_r+0x22>
    f7d4:	2000      	movs	r0, #0
    f7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f7d8 <_vfiprintf_r>:
    f7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7da:	b09f      	sub	sp, #124	; 0x7c
    f7dc:	0006      	movs	r6, r0
    f7de:	000f      	movs	r7, r1
    f7e0:	9202      	str	r2, [sp, #8]
    f7e2:	9305      	str	r3, [sp, #20]
    f7e4:	2800      	cmp	r0, #0
    f7e6:	d004      	beq.n	f7f2 <_vfiprintf_r+0x1a>
    f7e8:	6983      	ldr	r3, [r0, #24]
    f7ea:	2b00      	cmp	r3, #0
    f7ec:	d101      	bne.n	f7f2 <_vfiprintf_r+0x1a>
    f7ee:	f000 feeb 	bl	105c8 <__sinit>
    f7f2:	4b7f      	ldr	r3, [pc, #508]	; (f9f0 <_vfiprintf_r+0x218>)
    f7f4:	429f      	cmp	r7, r3
    f7f6:	d101      	bne.n	f7fc <_vfiprintf_r+0x24>
    f7f8:	6877      	ldr	r7, [r6, #4]
    f7fa:	e008      	b.n	f80e <_vfiprintf_r+0x36>
    f7fc:	4b7d      	ldr	r3, [pc, #500]	; (f9f4 <_vfiprintf_r+0x21c>)
    f7fe:	429f      	cmp	r7, r3
    f800:	d101      	bne.n	f806 <_vfiprintf_r+0x2e>
    f802:	68b7      	ldr	r7, [r6, #8]
    f804:	e003      	b.n	f80e <_vfiprintf_r+0x36>
    f806:	4b7c      	ldr	r3, [pc, #496]	; (f9f8 <_vfiprintf_r+0x220>)
    f808:	429f      	cmp	r7, r3
    f80a:	d100      	bne.n	f80e <_vfiprintf_r+0x36>
    f80c:	68f7      	ldr	r7, [r6, #12]
    f80e:	89bb      	ldrh	r3, [r7, #12]
    f810:	071b      	lsls	r3, r3, #28
    f812:	d50a      	bpl.n	f82a <_vfiprintf_r+0x52>
    f814:	693b      	ldr	r3, [r7, #16]
    f816:	2b00      	cmp	r3, #0
    f818:	d007      	beq.n	f82a <_vfiprintf_r+0x52>
    f81a:	2300      	movs	r3, #0
    f81c:	ad06      	add	r5, sp, #24
    f81e:	616b      	str	r3, [r5, #20]
    f820:	3320      	adds	r3, #32
    f822:	766b      	strb	r3, [r5, #25]
    f824:	3310      	adds	r3, #16
    f826:	76ab      	strb	r3, [r5, #26]
    f828:	e03d      	b.n	f8a6 <_vfiprintf_r+0xce>
    f82a:	0039      	movs	r1, r7
    f82c:	0030      	movs	r0, r6
    f82e:	f000 fd59 	bl	102e4 <__swsetup_r>
    f832:	2800      	cmp	r0, #0
    f834:	d0f1      	beq.n	f81a <_vfiprintf_r+0x42>
    f836:	2001      	movs	r0, #1
    f838:	4240      	negs	r0, r0
    f83a:	e0d6      	b.n	f9ea <_vfiprintf_r+0x212>
    f83c:	9a05      	ldr	r2, [sp, #20]
    f83e:	1d11      	adds	r1, r2, #4
    f840:	6812      	ldr	r2, [r2, #0]
    f842:	9105      	str	r1, [sp, #20]
    f844:	2a00      	cmp	r2, #0
    f846:	da00      	bge.n	f84a <_vfiprintf_r+0x72>
    f848:	e07f      	b.n	f94a <_vfiprintf_r+0x172>
    f84a:	9209      	str	r2, [sp, #36]	; 0x24
    f84c:	3401      	adds	r4, #1
    f84e:	7823      	ldrb	r3, [r4, #0]
    f850:	2b2e      	cmp	r3, #46	; 0x2e
    f852:	d100      	bne.n	f856 <_vfiprintf_r+0x7e>
    f854:	e08d      	b.n	f972 <_vfiprintf_r+0x19a>
    f856:	7821      	ldrb	r1, [r4, #0]
    f858:	2203      	movs	r2, #3
    f85a:	4868      	ldr	r0, [pc, #416]	; (f9fc <_vfiprintf_r+0x224>)
    f85c:	f000 ffb6 	bl	107cc <memchr>
    f860:	2800      	cmp	r0, #0
    f862:	d007      	beq.n	f874 <_vfiprintf_r+0x9c>
    f864:	4b65      	ldr	r3, [pc, #404]	; (f9fc <_vfiprintf_r+0x224>)
    f866:	682a      	ldr	r2, [r5, #0]
    f868:	1ac0      	subs	r0, r0, r3
    f86a:	2340      	movs	r3, #64	; 0x40
    f86c:	4083      	lsls	r3, r0
    f86e:	4313      	orrs	r3, r2
    f870:	602b      	str	r3, [r5, #0]
    f872:	3401      	adds	r4, #1
    f874:	7821      	ldrb	r1, [r4, #0]
    f876:	1c63      	adds	r3, r4, #1
    f878:	2206      	movs	r2, #6
    f87a:	4861      	ldr	r0, [pc, #388]	; (fa00 <_vfiprintf_r+0x228>)
    f87c:	9302      	str	r3, [sp, #8]
    f87e:	7629      	strb	r1, [r5, #24]
    f880:	f000 ffa4 	bl	107cc <memchr>
    f884:	2800      	cmp	r0, #0
    f886:	d100      	bne.n	f88a <_vfiprintf_r+0xb2>
    f888:	e09d      	b.n	f9c6 <_vfiprintf_r+0x1ee>
    f88a:	4b5e      	ldr	r3, [pc, #376]	; (fa04 <_vfiprintf_r+0x22c>)
    f88c:	2b00      	cmp	r3, #0
    f88e:	d000      	beq.n	f892 <_vfiprintf_r+0xba>
    f890:	e090      	b.n	f9b4 <_vfiprintf_r+0x1dc>
    f892:	2207      	movs	r2, #7
    f894:	9b05      	ldr	r3, [sp, #20]
    f896:	3307      	adds	r3, #7
    f898:	4393      	bics	r3, r2
    f89a:	3308      	adds	r3, #8
    f89c:	9305      	str	r3, [sp, #20]
    f89e:	696b      	ldr	r3, [r5, #20]
    f8a0:	9a03      	ldr	r2, [sp, #12]
    f8a2:	189b      	adds	r3, r3, r2
    f8a4:	616b      	str	r3, [r5, #20]
    f8a6:	9c02      	ldr	r4, [sp, #8]
    f8a8:	7823      	ldrb	r3, [r4, #0]
    f8aa:	2b00      	cmp	r3, #0
    f8ac:	d104      	bne.n	f8b8 <_vfiprintf_r+0xe0>
    f8ae:	9b02      	ldr	r3, [sp, #8]
    f8b0:	1ae3      	subs	r3, r4, r3
    f8b2:	9304      	str	r3, [sp, #16]
    f8b4:	d012      	beq.n	f8dc <_vfiprintf_r+0x104>
    f8b6:	e003      	b.n	f8c0 <_vfiprintf_r+0xe8>
    f8b8:	2b25      	cmp	r3, #37	; 0x25
    f8ba:	d0f8      	beq.n	f8ae <_vfiprintf_r+0xd6>
    f8bc:	3401      	adds	r4, #1
    f8be:	e7f3      	b.n	f8a8 <_vfiprintf_r+0xd0>
    f8c0:	9b04      	ldr	r3, [sp, #16]
    f8c2:	9a02      	ldr	r2, [sp, #8]
    f8c4:	0039      	movs	r1, r7
    f8c6:	0030      	movs	r0, r6
    f8c8:	f7ff ff74 	bl	f7b4 <__sfputs_r>
    f8cc:	1c43      	adds	r3, r0, #1
    f8ce:	d100      	bne.n	f8d2 <_vfiprintf_r+0xfa>
    f8d0:	e086      	b.n	f9e0 <_vfiprintf_r+0x208>
    f8d2:	696a      	ldr	r2, [r5, #20]
    f8d4:	9b04      	ldr	r3, [sp, #16]
    f8d6:	4694      	mov	ip, r2
    f8d8:	4463      	add	r3, ip
    f8da:	616b      	str	r3, [r5, #20]
    f8dc:	7823      	ldrb	r3, [r4, #0]
    f8de:	2b00      	cmp	r3, #0
    f8e0:	d07e      	beq.n	f9e0 <_vfiprintf_r+0x208>
    f8e2:	2201      	movs	r2, #1
    f8e4:	2300      	movs	r3, #0
    f8e6:	4252      	negs	r2, r2
    f8e8:	606a      	str	r2, [r5, #4]
    f8ea:	a902      	add	r1, sp, #8
    f8ec:	3254      	adds	r2, #84	; 0x54
    f8ee:	1852      	adds	r2, r2, r1
    f8f0:	3401      	adds	r4, #1
    f8f2:	602b      	str	r3, [r5, #0]
    f8f4:	60eb      	str	r3, [r5, #12]
    f8f6:	60ab      	str	r3, [r5, #8]
    f8f8:	7013      	strb	r3, [r2, #0]
    f8fa:	65ab      	str	r3, [r5, #88]	; 0x58
    f8fc:	7821      	ldrb	r1, [r4, #0]
    f8fe:	2205      	movs	r2, #5
    f900:	4841      	ldr	r0, [pc, #260]	; (fa08 <_vfiprintf_r+0x230>)
    f902:	f000 ff63 	bl	107cc <memchr>
    f906:	2800      	cmp	r0, #0
    f908:	d008      	beq.n	f91c <_vfiprintf_r+0x144>
    f90a:	4b3f      	ldr	r3, [pc, #252]	; (fa08 <_vfiprintf_r+0x230>)
    f90c:	682a      	ldr	r2, [r5, #0]
    f90e:	1ac0      	subs	r0, r0, r3
    f910:	2301      	movs	r3, #1
    f912:	4083      	lsls	r3, r0
    f914:	4313      	orrs	r3, r2
    f916:	602b      	str	r3, [r5, #0]
    f918:	3401      	adds	r4, #1
    f91a:	e7ef      	b.n	f8fc <_vfiprintf_r+0x124>
    f91c:	682b      	ldr	r3, [r5, #0]
    f91e:	06da      	lsls	r2, r3, #27
    f920:	d504      	bpl.n	f92c <_vfiprintf_r+0x154>
    f922:	2253      	movs	r2, #83	; 0x53
    f924:	2120      	movs	r1, #32
    f926:	a802      	add	r0, sp, #8
    f928:	1812      	adds	r2, r2, r0
    f92a:	7011      	strb	r1, [r2, #0]
    f92c:	071a      	lsls	r2, r3, #28
    f92e:	d504      	bpl.n	f93a <_vfiprintf_r+0x162>
    f930:	2253      	movs	r2, #83	; 0x53
    f932:	212b      	movs	r1, #43	; 0x2b
    f934:	a802      	add	r0, sp, #8
    f936:	1812      	adds	r2, r2, r0
    f938:	7011      	strb	r1, [r2, #0]
    f93a:	7822      	ldrb	r2, [r4, #0]
    f93c:	2a2a      	cmp	r2, #42	; 0x2a
    f93e:	d100      	bne.n	f942 <_vfiprintf_r+0x16a>
    f940:	e77c      	b.n	f83c <_vfiprintf_r+0x64>
    f942:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f944:	2000      	movs	r0, #0
    f946:	210a      	movs	r1, #10
    f948:	e005      	b.n	f956 <_vfiprintf_r+0x17e>
    f94a:	4252      	negs	r2, r2
    f94c:	60ea      	str	r2, [r5, #12]
    f94e:	2202      	movs	r2, #2
    f950:	4313      	orrs	r3, r2
    f952:	602b      	str	r3, [r5, #0]
    f954:	e77a      	b.n	f84c <_vfiprintf_r+0x74>
    f956:	7822      	ldrb	r2, [r4, #0]
    f958:	3a30      	subs	r2, #48	; 0x30
    f95a:	2a09      	cmp	r2, #9
    f95c:	d804      	bhi.n	f968 <_vfiprintf_r+0x190>
    f95e:	434b      	muls	r3, r1
    f960:	3401      	adds	r4, #1
    f962:	189b      	adds	r3, r3, r2
    f964:	2001      	movs	r0, #1
    f966:	e7f6      	b.n	f956 <_vfiprintf_r+0x17e>
    f968:	2800      	cmp	r0, #0
    f96a:	d100      	bne.n	f96e <_vfiprintf_r+0x196>
    f96c:	e76f      	b.n	f84e <_vfiprintf_r+0x76>
    f96e:	9309      	str	r3, [sp, #36]	; 0x24
    f970:	e76d      	b.n	f84e <_vfiprintf_r+0x76>
    f972:	7863      	ldrb	r3, [r4, #1]
    f974:	2b2a      	cmp	r3, #42	; 0x2a
    f976:	d10a      	bne.n	f98e <_vfiprintf_r+0x1b6>
    f978:	9b05      	ldr	r3, [sp, #20]
    f97a:	3402      	adds	r4, #2
    f97c:	1d1a      	adds	r2, r3, #4
    f97e:	681b      	ldr	r3, [r3, #0]
    f980:	9205      	str	r2, [sp, #20]
    f982:	2b00      	cmp	r3, #0
    f984:	da01      	bge.n	f98a <_vfiprintf_r+0x1b2>
    f986:	2301      	movs	r3, #1
    f988:	425b      	negs	r3, r3
    f98a:	9307      	str	r3, [sp, #28]
    f98c:	e763      	b.n	f856 <_vfiprintf_r+0x7e>
    f98e:	2300      	movs	r3, #0
    f990:	200a      	movs	r0, #10
    f992:	001a      	movs	r2, r3
    f994:	3401      	adds	r4, #1
    f996:	606b      	str	r3, [r5, #4]
    f998:	7821      	ldrb	r1, [r4, #0]
    f99a:	3930      	subs	r1, #48	; 0x30
    f99c:	2909      	cmp	r1, #9
    f99e:	d804      	bhi.n	f9aa <_vfiprintf_r+0x1d2>
    f9a0:	4342      	muls	r2, r0
    f9a2:	3401      	adds	r4, #1
    f9a4:	1852      	adds	r2, r2, r1
    f9a6:	2301      	movs	r3, #1
    f9a8:	e7f6      	b.n	f998 <_vfiprintf_r+0x1c0>
    f9aa:	2b00      	cmp	r3, #0
    f9ac:	d100      	bne.n	f9b0 <_vfiprintf_r+0x1d8>
    f9ae:	e752      	b.n	f856 <_vfiprintf_r+0x7e>
    f9b0:	9207      	str	r2, [sp, #28]
    f9b2:	e750      	b.n	f856 <_vfiprintf_r+0x7e>
    f9b4:	ab05      	add	r3, sp, #20
    f9b6:	9300      	str	r3, [sp, #0]
    f9b8:	003a      	movs	r2, r7
    f9ba:	4b14      	ldr	r3, [pc, #80]	; (fa0c <_vfiprintf_r+0x234>)
    f9bc:	0029      	movs	r1, r5
    f9be:	0030      	movs	r0, r6
    f9c0:	e000      	b.n	f9c4 <_vfiprintf_r+0x1ec>
    f9c2:	bf00      	nop
    f9c4:	e007      	b.n	f9d6 <_vfiprintf_r+0x1fe>
    f9c6:	ab05      	add	r3, sp, #20
    f9c8:	9300      	str	r3, [sp, #0]
    f9ca:	003a      	movs	r2, r7
    f9cc:	4b0f      	ldr	r3, [pc, #60]	; (fa0c <_vfiprintf_r+0x234>)
    f9ce:	0029      	movs	r1, r5
    f9d0:	0030      	movs	r0, r6
    f9d2:	f000 f88b 	bl	faec <_printf_i>
    f9d6:	9003      	str	r0, [sp, #12]
    f9d8:	9b03      	ldr	r3, [sp, #12]
    f9da:	3301      	adds	r3, #1
    f9dc:	d000      	beq.n	f9e0 <_vfiprintf_r+0x208>
    f9de:	e75e      	b.n	f89e <_vfiprintf_r+0xc6>
    f9e0:	89bb      	ldrh	r3, [r7, #12]
    f9e2:	065b      	lsls	r3, r3, #25
    f9e4:	d500      	bpl.n	f9e8 <_vfiprintf_r+0x210>
    f9e6:	e726      	b.n	f836 <_vfiprintf_r+0x5e>
    f9e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f9ea:	b01f      	add	sp, #124	; 0x7c
    f9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f9ee:	46c0      	nop			; (mov r8, r8)
    f9f0:	000127f0 	.word	0x000127f0
    f9f4:	00012810 	.word	0x00012810
    f9f8:	00012830 	.word	0x00012830
    f9fc:	000126c2 	.word	0x000126c2
    fa00:	000126c6 	.word	0x000126c6
    fa04:	00000000 	.word	0x00000000
    fa08:	000126bc 	.word	0x000126bc
    fa0c:	0000f7b5 	.word	0x0000f7b5

0000fa10 <_printf_common>:
    fa10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fa12:	0017      	movs	r7, r2
    fa14:	9301      	str	r3, [sp, #4]
    fa16:	688a      	ldr	r2, [r1, #8]
    fa18:	690b      	ldr	r3, [r1, #16]
    fa1a:	9000      	str	r0, [sp, #0]
    fa1c:	000c      	movs	r4, r1
    fa1e:	4293      	cmp	r3, r2
    fa20:	da00      	bge.n	fa24 <_printf_common+0x14>
    fa22:	0013      	movs	r3, r2
    fa24:	0022      	movs	r2, r4
    fa26:	603b      	str	r3, [r7, #0]
    fa28:	3243      	adds	r2, #67	; 0x43
    fa2a:	7812      	ldrb	r2, [r2, #0]
    fa2c:	2a00      	cmp	r2, #0
    fa2e:	d001      	beq.n	fa34 <_printf_common+0x24>
    fa30:	3301      	adds	r3, #1
    fa32:	603b      	str	r3, [r7, #0]
    fa34:	6823      	ldr	r3, [r4, #0]
    fa36:	069b      	lsls	r3, r3, #26
    fa38:	d502      	bpl.n	fa40 <_printf_common+0x30>
    fa3a:	683b      	ldr	r3, [r7, #0]
    fa3c:	3302      	adds	r3, #2
    fa3e:	603b      	str	r3, [r7, #0]
    fa40:	2506      	movs	r5, #6
    fa42:	6823      	ldr	r3, [r4, #0]
    fa44:	401d      	ands	r5, r3
    fa46:	d01e      	beq.n	fa86 <_printf_common+0x76>
    fa48:	0023      	movs	r3, r4
    fa4a:	3343      	adds	r3, #67	; 0x43
    fa4c:	781b      	ldrb	r3, [r3, #0]
    fa4e:	1e5a      	subs	r2, r3, #1
    fa50:	4193      	sbcs	r3, r2
    fa52:	6822      	ldr	r2, [r4, #0]
    fa54:	0692      	lsls	r2, r2, #26
    fa56:	d51c      	bpl.n	fa92 <_printf_common+0x82>
    fa58:	2030      	movs	r0, #48	; 0x30
    fa5a:	18e1      	adds	r1, r4, r3
    fa5c:	3143      	adds	r1, #67	; 0x43
    fa5e:	7008      	strb	r0, [r1, #0]
    fa60:	0021      	movs	r1, r4
    fa62:	1c5a      	adds	r2, r3, #1
    fa64:	3145      	adds	r1, #69	; 0x45
    fa66:	7809      	ldrb	r1, [r1, #0]
    fa68:	18a2      	adds	r2, r4, r2
    fa6a:	3243      	adds	r2, #67	; 0x43
    fa6c:	3302      	adds	r3, #2
    fa6e:	7011      	strb	r1, [r2, #0]
    fa70:	e00f      	b.n	fa92 <_printf_common+0x82>
    fa72:	0022      	movs	r2, r4
    fa74:	2301      	movs	r3, #1
    fa76:	3219      	adds	r2, #25
    fa78:	9901      	ldr	r1, [sp, #4]
    fa7a:	9800      	ldr	r0, [sp, #0]
    fa7c:	9e08      	ldr	r6, [sp, #32]
    fa7e:	47b0      	blx	r6
    fa80:	1c43      	adds	r3, r0, #1
    fa82:	d00e      	beq.n	faa2 <_printf_common+0x92>
    fa84:	3501      	adds	r5, #1
    fa86:	68e3      	ldr	r3, [r4, #12]
    fa88:	683a      	ldr	r2, [r7, #0]
    fa8a:	1a9b      	subs	r3, r3, r2
    fa8c:	429d      	cmp	r5, r3
    fa8e:	dbf0      	blt.n	fa72 <_printf_common+0x62>
    fa90:	e7da      	b.n	fa48 <_printf_common+0x38>
    fa92:	0022      	movs	r2, r4
    fa94:	9901      	ldr	r1, [sp, #4]
    fa96:	3243      	adds	r2, #67	; 0x43
    fa98:	9800      	ldr	r0, [sp, #0]
    fa9a:	9d08      	ldr	r5, [sp, #32]
    fa9c:	47a8      	blx	r5
    fa9e:	1c43      	adds	r3, r0, #1
    faa0:	d102      	bne.n	faa8 <_printf_common+0x98>
    faa2:	2001      	movs	r0, #1
    faa4:	4240      	negs	r0, r0
    faa6:	e020      	b.n	faea <_printf_common+0xda>
    faa8:	2306      	movs	r3, #6
    faaa:	6820      	ldr	r0, [r4, #0]
    faac:	68e1      	ldr	r1, [r4, #12]
    faae:	683a      	ldr	r2, [r7, #0]
    fab0:	4003      	ands	r3, r0
    fab2:	2500      	movs	r5, #0
    fab4:	2b04      	cmp	r3, #4
    fab6:	d103      	bne.n	fac0 <_printf_common+0xb0>
    fab8:	1a8d      	subs	r5, r1, r2
    faba:	43eb      	mvns	r3, r5
    fabc:	17db      	asrs	r3, r3, #31
    fabe:	401d      	ands	r5, r3
    fac0:	68a3      	ldr	r3, [r4, #8]
    fac2:	6922      	ldr	r2, [r4, #16]
    fac4:	4293      	cmp	r3, r2
    fac6:	dd01      	ble.n	facc <_printf_common+0xbc>
    fac8:	1a9b      	subs	r3, r3, r2
    faca:	18ed      	adds	r5, r5, r3
    facc:	2700      	movs	r7, #0
    face:	42bd      	cmp	r5, r7
    fad0:	d00a      	beq.n	fae8 <_printf_common+0xd8>
    fad2:	0022      	movs	r2, r4
    fad4:	2301      	movs	r3, #1
    fad6:	321a      	adds	r2, #26
    fad8:	9901      	ldr	r1, [sp, #4]
    fada:	9800      	ldr	r0, [sp, #0]
    fadc:	9e08      	ldr	r6, [sp, #32]
    fade:	47b0      	blx	r6
    fae0:	1c43      	adds	r3, r0, #1
    fae2:	d0de      	beq.n	faa2 <_printf_common+0x92>
    fae4:	3701      	adds	r7, #1
    fae6:	e7f2      	b.n	face <_printf_common+0xbe>
    fae8:	2000      	movs	r0, #0
    faea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000faec <_printf_i>:
    faec:	b5f0      	push	{r4, r5, r6, r7, lr}
    faee:	b08b      	sub	sp, #44	; 0x2c
    faf0:	9206      	str	r2, [sp, #24]
    faf2:	000a      	movs	r2, r1
    faf4:	3243      	adds	r2, #67	; 0x43
    faf6:	9307      	str	r3, [sp, #28]
    faf8:	9005      	str	r0, [sp, #20]
    fafa:	9204      	str	r2, [sp, #16]
    fafc:	7e0a      	ldrb	r2, [r1, #24]
    fafe:	000c      	movs	r4, r1
    fb00:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fb02:	2a6e      	cmp	r2, #110	; 0x6e
    fb04:	d100      	bne.n	fb08 <_printf_i+0x1c>
    fb06:	e0ab      	b.n	fc60 <_printf_i+0x174>
    fb08:	d811      	bhi.n	fb2e <_printf_i+0x42>
    fb0a:	2a63      	cmp	r2, #99	; 0x63
    fb0c:	d022      	beq.n	fb54 <_printf_i+0x68>
    fb0e:	d809      	bhi.n	fb24 <_printf_i+0x38>
    fb10:	2a00      	cmp	r2, #0
    fb12:	d100      	bne.n	fb16 <_printf_i+0x2a>
    fb14:	e0b5      	b.n	fc82 <_printf_i+0x196>
    fb16:	2a58      	cmp	r2, #88	; 0x58
    fb18:	d000      	beq.n	fb1c <_printf_i+0x30>
    fb1a:	e0c5      	b.n	fca8 <_printf_i+0x1bc>
    fb1c:	3145      	adds	r1, #69	; 0x45
    fb1e:	700a      	strb	r2, [r1, #0]
    fb20:	4a81      	ldr	r2, [pc, #516]	; (fd28 <_printf_i+0x23c>)
    fb22:	e04f      	b.n	fbc4 <_printf_i+0xd8>
    fb24:	2a64      	cmp	r2, #100	; 0x64
    fb26:	d01d      	beq.n	fb64 <_printf_i+0x78>
    fb28:	2a69      	cmp	r2, #105	; 0x69
    fb2a:	d01b      	beq.n	fb64 <_printf_i+0x78>
    fb2c:	e0bc      	b.n	fca8 <_printf_i+0x1bc>
    fb2e:	2a73      	cmp	r2, #115	; 0x73
    fb30:	d100      	bne.n	fb34 <_printf_i+0x48>
    fb32:	e0aa      	b.n	fc8a <_printf_i+0x19e>
    fb34:	d809      	bhi.n	fb4a <_printf_i+0x5e>
    fb36:	2a6f      	cmp	r2, #111	; 0x6f
    fb38:	d029      	beq.n	fb8e <_printf_i+0xa2>
    fb3a:	2a70      	cmp	r2, #112	; 0x70
    fb3c:	d000      	beq.n	fb40 <_printf_i+0x54>
    fb3e:	e0b3      	b.n	fca8 <_printf_i+0x1bc>
    fb40:	2220      	movs	r2, #32
    fb42:	6809      	ldr	r1, [r1, #0]
    fb44:	430a      	orrs	r2, r1
    fb46:	6022      	str	r2, [r4, #0]
    fb48:	e037      	b.n	fbba <_printf_i+0xce>
    fb4a:	2a75      	cmp	r2, #117	; 0x75
    fb4c:	d01f      	beq.n	fb8e <_printf_i+0xa2>
    fb4e:	2a78      	cmp	r2, #120	; 0x78
    fb50:	d033      	beq.n	fbba <_printf_i+0xce>
    fb52:	e0a9      	b.n	fca8 <_printf_i+0x1bc>
    fb54:	000e      	movs	r6, r1
    fb56:	681a      	ldr	r2, [r3, #0]
    fb58:	3642      	adds	r6, #66	; 0x42
    fb5a:	1d11      	adds	r1, r2, #4
    fb5c:	6019      	str	r1, [r3, #0]
    fb5e:	6813      	ldr	r3, [r2, #0]
    fb60:	7033      	strb	r3, [r6, #0]
    fb62:	e0a4      	b.n	fcae <_printf_i+0x1c2>
    fb64:	6821      	ldr	r1, [r4, #0]
    fb66:	681a      	ldr	r2, [r3, #0]
    fb68:	0608      	lsls	r0, r1, #24
    fb6a:	d406      	bmi.n	fb7a <_printf_i+0x8e>
    fb6c:	0649      	lsls	r1, r1, #25
    fb6e:	d504      	bpl.n	fb7a <_printf_i+0x8e>
    fb70:	1d11      	adds	r1, r2, #4
    fb72:	6019      	str	r1, [r3, #0]
    fb74:	2300      	movs	r3, #0
    fb76:	5ed5      	ldrsh	r5, [r2, r3]
    fb78:	e002      	b.n	fb80 <_printf_i+0x94>
    fb7a:	1d11      	adds	r1, r2, #4
    fb7c:	6019      	str	r1, [r3, #0]
    fb7e:	6815      	ldr	r5, [r2, #0]
    fb80:	2d00      	cmp	r5, #0
    fb82:	da3b      	bge.n	fbfc <_printf_i+0x110>
    fb84:	232d      	movs	r3, #45	; 0x2d
    fb86:	9a04      	ldr	r2, [sp, #16]
    fb88:	426d      	negs	r5, r5
    fb8a:	7013      	strb	r3, [r2, #0]
    fb8c:	e036      	b.n	fbfc <_printf_i+0x110>
    fb8e:	6821      	ldr	r1, [r4, #0]
    fb90:	681a      	ldr	r2, [r3, #0]
    fb92:	0608      	lsls	r0, r1, #24
    fb94:	d406      	bmi.n	fba4 <_printf_i+0xb8>
    fb96:	0649      	lsls	r1, r1, #25
    fb98:	d504      	bpl.n	fba4 <_printf_i+0xb8>
    fb9a:	6815      	ldr	r5, [r2, #0]
    fb9c:	1d11      	adds	r1, r2, #4
    fb9e:	6019      	str	r1, [r3, #0]
    fba0:	b2ad      	uxth	r5, r5
    fba2:	e002      	b.n	fbaa <_printf_i+0xbe>
    fba4:	1d11      	adds	r1, r2, #4
    fba6:	6019      	str	r1, [r3, #0]
    fba8:	6815      	ldr	r5, [r2, #0]
    fbaa:	4b5f      	ldr	r3, [pc, #380]	; (fd28 <_printf_i+0x23c>)
    fbac:	7e22      	ldrb	r2, [r4, #24]
    fbae:	9303      	str	r3, [sp, #12]
    fbb0:	2708      	movs	r7, #8
    fbb2:	2a6f      	cmp	r2, #111	; 0x6f
    fbb4:	d01d      	beq.n	fbf2 <_printf_i+0x106>
    fbb6:	270a      	movs	r7, #10
    fbb8:	e01b      	b.n	fbf2 <_printf_i+0x106>
    fbba:	0022      	movs	r2, r4
    fbbc:	2178      	movs	r1, #120	; 0x78
    fbbe:	3245      	adds	r2, #69	; 0x45
    fbc0:	7011      	strb	r1, [r2, #0]
    fbc2:	4a5a      	ldr	r2, [pc, #360]	; (fd2c <_printf_i+0x240>)
    fbc4:	6819      	ldr	r1, [r3, #0]
    fbc6:	9203      	str	r2, [sp, #12]
    fbc8:	1d08      	adds	r0, r1, #4
    fbca:	6822      	ldr	r2, [r4, #0]
    fbcc:	6018      	str	r0, [r3, #0]
    fbce:	680d      	ldr	r5, [r1, #0]
    fbd0:	0610      	lsls	r0, r2, #24
    fbd2:	d402      	bmi.n	fbda <_printf_i+0xee>
    fbd4:	0650      	lsls	r0, r2, #25
    fbd6:	d500      	bpl.n	fbda <_printf_i+0xee>
    fbd8:	b2ad      	uxth	r5, r5
    fbda:	07d3      	lsls	r3, r2, #31
    fbdc:	d502      	bpl.n	fbe4 <_printf_i+0xf8>
    fbde:	2320      	movs	r3, #32
    fbe0:	431a      	orrs	r2, r3
    fbe2:	6022      	str	r2, [r4, #0]
    fbe4:	2710      	movs	r7, #16
    fbe6:	2d00      	cmp	r5, #0
    fbe8:	d103      	bne.n	fbf2 <_printf_i+0x106>
    fbea:	2320      	movs	r3, #32
    fbec:	6822      	ldr	r2, [r4, #0]
    fbee:	439a      	bics	r2, r3
    fbf0:	6022      	str	r2, [r4, #0]
    fbf2:	0023      	movs	r3, r4
    fbf4:	2200      	movs	r2, #0
    fbf6:	3343      	adds	r3, #67	; 0x43
    fbf8:	701a      	strb	r2, [r3, #0]
    fbfa:	e002      	b.n	fc02 <_printf_i+0x116>
    fbfc:	270a      	movs	r7, #10
    fbfe:	4b4a      	ldr	r3, [pc, #296]	; (fd28 <_printf_i+0x23c>)
    fc00:	9303      	str	r3, [sp, #12]
    fc02:	6863      	ldr	r3, [r4, #4]
    fc04:	60a3      	str	r3, [r4, #8]
    fc06:	2b00      	cmp	r3, #0
    fc08:	db09      	blt.n	fc1e <_printf_i+0x132>
    fc0a:	2204      	movs	r2, #4
    fc0c:	6821      	ldr	r1, [r4, #0]
    fc0e:	4391      	bics	r1, r2
    fc10:	6021      	str	r1, [r4, #0]
    fc12:	2d00      	cmp	r5, #0
    fc14:	d105      	bne.n	fc22 <_printf_i+0x136>
    fc16:	9e04      	ldr	r6, [sp, #16]
    fc18:	2b00      	cmp	r3, #0
    fc1a:	d011      	beq.n	fc40 <_printf_i+0x154>
    fc1c:	e07b      	b.n	fd16 <_printf_i+0x22a>
    fc1e:	2d00      	cmp	r5, #0
    fc20:	d079      	beq.n	fd16 <_printf_i+0x22a>
    fc22:	9e04      	ldr	r6, [sp, #16]
    fc24:	0028      	movs	r0, r5
    fc26:	0039      	movs	r1, r7
    fc28:	f7ff f86c 	bl	ed04 <__aeabi_uidivmod>
    fc2c:	9b03      	ldr	r3, [sp, #12]
    fc2e:	3e01      	subs	r6, #1
    fc30:	5c5b      	ldrb	r3, [r3, r1]
    fc32:	0028      	movs	r0, r5
    fc34:	7033      	strb	r3, [r6, #0]
    fc36:	0039      	movs	r1, r7
    fc38:	f7fe ffde 	bl	ebf8 <__aeabi_uidiv>
    fc3c:	1e05      	subs	r5, r0, #0
    fc3e:	d1f1      	bne.n	fc24 <_printf_i+0x138>
    fc40:	2f08      	cmp	r7, #8
    fc42:	d109      	bne.n	fc58 <_printf_i+0x16c>
    fc44:	6823      	ldr	r3, [r4, #0]
    fc46:	07db      	lsls	r3, r3, #31
    fc48:	d506      	bpl.n	fc58 <_printf_i+0x16c>
    fc4a:	6863      	ldr	r3, [r4, #4]
    fc4c:	6922      	ldr	r2, [r4, #16]
    fc4e:	4293      	cmp	r3, r2
    fc50:	dc02      	bgt.n	fc58 <_printf_i+0x16c>
    fc52:	2330      	movs	r3, #48	; 0x30
    fc54:	3e01      	subs	r6, #1
    fc56:	7033      	strb	r3, [r6, #0]
    fc58:	9b04      	ldr	r3, [sp, #16]
    fc5a:	1b9b      	subs	r3, r3, r6
    fc5c:	6123      	str	r3, [r4, #16]
    fc5e:	e02b      	b.n	fcb8 <_printf_i+0x1cc>
    fc60:	6809      	ldr	r1, [r1, #0]
    fc62:	681a      	ldr	r2, [r3, #0]
    fc64:	0608      	lsls	r0, r1, #24
    fc66:	d407      	bmi.n	fc78 <_printf_i+0x18c>
    fc68:	0649      	lsls	r1, r1, #25
    fc6a:	d505      	bpl.n	fc78 <_printf_i+0x18c>
    fc6c:	1d11      	adds	r1, r2, #4
    fc6e:	6019      	str	r1, [r3, #0]
    fc70:	6813      	ldr	r3, [r2, #0]
    fc72:	8aa2      	ldrh	r2, [r4, #20]
    fc74:	801a      	strh	r2, [r3, #0]
    fc76:	e004      	b.n	fc82 <_printf_i+0x196>
    fc78:	1d11      	adds	r1, r2, #4
    fc7a:	6019      	str	r1, [r3, #0]
    fc7c:	6813      	ldr	r3, [r2, #0]
    fc7e:	6962      	ldr	r2, [r4, #20]
    fc80:	601a      	str	r2, [r3, #0]
    fc82:	2300      	movs	r3, #0
    fc84:	9e04      	ldr	r6, [sp, #16]
    fc86:	6123      	str	r3, [r4, #16]
    fc88:	e016      	b.n	fcb8 <_printf_i+0x1cc>
    fc8a:	681a      	ldr	r2, [r3, #0]
    fc8c:	1d11      	adds	r1, r2, #4
    fc8e:	6019      	str	r1, [r3, #0]
    fc90:	6816      	ldr	r6, [r2, #0]
    fc92:	2100      	movs	r1, #0
    fc94:	6862      	ldr	r2, [r4, #4]
    fc96:	0030      	movs	r0, r6
    fc98:	f000 fd98 	bl	107cc <memchr>
    fc9c:	2800      	cmp	r0, #0
    fc9e:	d001      	beq.n	fca4 <_printf_i+0x1b8>
    fca0:	1b80      	subs	r0, r0, r6
    fca2:	6060      	str	r0, [r4, #4]
    fca4:	6863      	ldr	r3, [r4, #4]
    fca6:	e003      	b.n	fcb0 <_printf_i+0x1c4>
    fca8:	0026      	movs	r6, r4
    fcaa:	3642      	adds	r6, #66	; 0x42
    fcac:	7032      	strb	r2, [r6, #0]
    fcae:	2301      	movs	r3, #1
    fcb0:	6123      	str	r3, [r4, #16]
    fcb2:	2300      	movs	r3, #0
    fcb4:	9a04      	ldr	r2, [sp, #16]
    fcb6:	7013      	strb	r3, [r2, #0]
    fcb8:	9b07      	ldr	r3, [sp, #28]
    fcba:	aa09      	add	r2, sp, #36	; 0x24
    fcbc:	9300      	str	r3, [sp, #0]
    fcbe:	0021      	movs	r1, r4
    fcc0:	9b06      	ldr	r3, [sp, #24]
    fcc2:	9805      	ldr	r0, [sp, #20]
    fcc4:	f7ff fea4 	bl	fa10 <_printf_common>
    fcc8:	1c43      	adds	r3, r0, #1
    fcca:	d102      	bne.n	fcd2 <_printf_i+0x1e6>
    fccc:	2001      	movs	r0, #1
    fcce:	4240      	negs	r0, r0
    fcd0:	e027      	b.n	fd22 <_printf_i+0x236>
    fcd2:	6923      	ldr	r3, [r4, #16]
    fcd4:	0032      	movs	r2, r6
    fcd6:	9906      	ldr	r1, [sp, #24]
    fcd8:	9805      	ldr	r0, [sp, #20]
    fcda:	9d07      	ldr	r5, [sp, #28]
    fcdc:	47a8      	blx	r5
    fcde:	1c43      	adds	r3, r0, #1
    fce0:	d0f4      	beq.n	fccc <_printf_i+0x1e0>
    fce2:	6823      	ldr	r3, [r4, #0]
    fce4:	2500      	movs	r5, #0
    fce6:	079b      	lsls	r3, r3, #30
    fce8:	d40f      	bmi.n	fd0a <_printf_i+0x21e>
    fcea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fcec:	68e0      	ldr	r0, [r4, #12]
    fcee:	4298      	cmp	r0, r3
    fcf0:	da17      	bge.n	fd22 <_printf_i+0x236>
    fcf2:	0018      	movs	r0, r3
    fcf4:	e015      	b.n	fd22 <_printf_i+0x236>
    fcf6:	0022      	movs	r2, r4
    fcf8:	2301      	movs	r3, #1
    fcfa:	3219      	adds	r2, #25
    fcfc:	9906      	ldr	r1, [sp, #24]
    fcfe:	9805      	ldr	r0, [sp, #20]
    fd00:	9e07      	ldr	r6, [sp, #28]
    fd02:	47b0      	blx	r6
    fd04:	1c43      	adds	r3, r0, #1
    fd06:	d0e1      	beq.n	fccc <_printf_i+0x1e0>
    fd08:	3501      	adds	r5, #1
    fd0a:	68e3      	ldr	r3, [r4, #12]
    fd0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    fd0e:	1a9b      	subs	r3, r3, r2
    fd10:	429d      	cmp	r5, r3
    fd12:	dbf0      	blt.n	fcf6 <_printf_i+0x20a>
    fd14:	e7e9      	b.n	fcea <_printf_i+0x1fe>
    fd16:	0026      	movs	r6, r4
    fd18:	9b03      	ldr	r3, [sp, #12]
    fd1a:	3642      	adds	r6, #66	; 0x42
    fd1c:	781b      	ldrb	r3, [r3, #0]
    fd1e:	7033      	strb	r3, [r6, #0]
    fd20:	e78e      	b.n	fc40 <_printf_i+0x154>
    fd22:	b00b      	add	sp, #44	; 0x2c
    fd24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd26:	46c0      	nop			; (mov r8, r8)
    fd28:	000126cd 	.word	0x000126cd
    fd2c:	000126de 	.word	0x000126de

0000fd30 <iprintf>:
    fd30:	b40f      	push	{r0, r1, r2, r3}
    fd32:	4b0b      	ldr	r3, [pc, #44]	; (fd60 <iprintf+0x30>)
    fd34:	b513      	push	{r0, r1, r4, lr}
    fd36:	681c      	ldr	r4, [r3, #0]
    fd38:	2c00      	cmp	r4, #0
    fd3a:	d005      	beq.n	fd48 <iprintf+0x18>
    fd3c:	69a3      	ldr	r3, [r4, #24]
    fd3e:	2b00      	cmp	r3, #0
    fd40:	d102      	bne.n	fd48 <iprintf+0x18>
    fd42:	0020      	movs	r0, r4
    fd44:	f000 fc40 	bl	105c8 <__sinit>
    fd48:	ab05      	add	r3, sp, #20
    fd4a:	9a04      	ldr	r2, [sp, #16]
    fd4c:	68a1      	ldr	r1, [r4, #8]
    fd4e:	0020      	movs	r0, r4
    fd50:	9301      	str	r3, [sp, #4]
    fd52:	f7ff fd41 	bl	f7d8 <_vfiprintf_r>
    fd56:	bc16      	pop	{r1, r2, r4}
    fd58:	bc08      	pop	{r3}
    fd5a:	b004      	add	sp, #16
    fd5c:	4718      	bx	r3
    fd5e:	46c0      	nop			; (mov r8, r8)
    fd60:	20000094 	.word	0x20000094

0000fd64 <putchar>:
    fd64:	4b08      	ldr	r3, [pc, #32]	; (fd88 <putchar+0x24>)
    fd66:	b570      	push	{r4, r5, r6, lr}
    fd68:	681c      	ldr	r4, [r3, #0]
    fd6a:	0005      	movs	r5, r0
    fd6c:	2c00      	cmp	r4, #0
    fd6e:	d005      	beq.n	fd7c <putchar+0x18>
    fd70:	69a3      	ldr	r3, [r4, #24]
    fd72:	2b00      	cmp	r3, #0
    fd74:	d102      	bne.n	fd7c <putchar+0x18>
    fd76:	0020      	movs	r0, r4
    fd78:	f000 fc26 	bl	105c8 <__sinit>
    fd7c:	0029      	movs	r1, r5
    fd7e:	68a2      	ldr	r2, [r4, #8]
    fd80:	0020      	movs	r0, r4
    fd82:	f000 ff65 	bl	10c50 <_putc_r>
    fd86:	bd70      	pop	{r4, r5, r6, pc}
    fd88:	20000094 	.word	0x20000094

0000fd8c <_puts_r>:
    fd8c:	b570      	push	{r4, r5, r6, lr}
    fd8e:	0005      	movs	r5, r0
    fd90:	000e      	movs	r6, r1
    fd92:	2800      	cmp	r0, #0
    fd94:	d004      	beq.n	fda0 <_puts_r+0x14>
    fd96:	6983      	ldr	r3, [r0, #24]
    fd98:	2b00      	cmp	r3, #0
    fd9a:	d101      	bne.n	fda0 <_puts_r+0x14>
    fd9c:	f000 fc14 	bl	105c8 <__sinit>
    fda0:	69ab      	ldr	r3, [r5, #24]
    fda2:	68ac      	ldr	r4, [r5, #8]
    fda4:	2b00      	cmp	r3, #0
    fda6:	d102      	bne.n	fdae <_puts_r+0x22>
    fda8:	0028      	movs	r0, r5
    fdaa:	f000 fc0d 	bl	105c8 <__sinit>
    fdae:	4b25      	ldr	r3, [pc, #148]	; (fe44 <_puts_r+0xb8>)
    fdb0:	429c      	cmp	r4, r3
    fdb2:	d101      	bne.n	fdb8 <_puts_r+0x2c>
    fdb4:	686c      	ldr	r4, [r5, #4]
    fdb6:	e008      	b.n	fdca <_puts_r+0x3e>
    fdb8:	4b23      	ldr	r3, [pc, #140]	; (fe48 <_puts_r+0xbc>)
    fdba:	429c      	cmp	r4, r3
    fdbc:	d101      	bne.n	fdc2 <_puts_r+0x36>
    fdbe:	68ac      	ldr	r4, [r5, #8]
    fdc0:	e003      	b.n	fdca <_puts_r+0x3e>
    fdc2:	4b22      	ldr	r3, [pc, #136]	; (fe4c <_puts_r+0xc0>)
    fdc4:	429c      	cmp	r4, r3
    fdc6:	d100      	bne.n	fdca <_puts_r+0x3e>
    fdc8:	68ec      	ldr	r4, [r5, #12]
    fdca:	89a3      	ldrh	r3, [r4, #12]
    fdcc:	071b      	lsls	r3, r3, #28
    fdce:	d502      	bpl.n	fdd6 <_puts_r+0x4a>
    fdd0:	6923      	ldr	r3, [r4, #16]
    fdd2:	2b00      	cmp	r3, #0
    fdd4:	d111      	bne.n	fdfa <_puts_r+0x6e>
    fdd6:	0021      	movs	r1, r4
    fdd8:	0028      	movs	r0, r5
    fdda:	f000 fa83 	bl	102e4 <__swsetup_r>
    fdde:	2800      	cmp	r0, #0
    fde0:	d00b      	beq.n	fdfa <_puts_r+0x6e>
    fde2:	2001      	movs	r0, #1
    fde4:	4240      	negs	r0, r0
    fde6:	e02b      	b.n	fe40 <_puts_r+0xb4>
    fde8:	3b01      	subs	r3, #1
    fdea:	3601      	adds	r6, #1
    fdec:	60a3      	str	r3, [r4, #8]
    fdee:	2b00      	cmp	r3, #0
    fdf0:	db08      	blt.n	fe04 <_puts_r+0x78>
    fdf2:	6823      	ldr	r3, [r4, #0]
    fdf4:	1c5a      	adds	r2, r3, #1
    fdf6:	6022      	str	r2, [r4, #0]
    fdf8:	7019      	strb	r1, [r3, #0]
    fdfa:	7831      	ldrb	r1, [r6, #0]
    fdfc:	68a3      	ldr	r3, [r4, #8]
    fdfe:	2900      	cmp	r1, #0
    fe00:	d1f2      	bne.n	fde8 <_puts_r+0x5c>
    fe02:	e00b      	b.n	fe1c <_puts_r+0x90>
    fe04:	69a2      	ldr	r2, [r4, #24]
    fe06:	4293      	cmp	r3, r2
    fe08:	db01      	blt.n	fe0e <_puts_r+0x82>
    fe0a:	290a      	cmp	r1, #10
    fe0c:	d1f1      	bne.n	fdf2 <_puts_r+0x66>
    fe0e:	0022      	movs	r2, r4
    fe10:	0028      	movs	r0, r5
    fe12:	f000 fa0f 	bl	10234 <__swbuf_r>
    fe16:	1c43      	adds	r3, r0, #1
    fe18:	d1ef      	bne.n	fdfa <_puts_r+0x6e>
    fe1a:	e7e2      	b.n	fde2 <_puts_r+0x56>
    fe1c:	3b01      	subs	r3, #1
    fe1e:	60a3      	str	r3, [r4, #8]
    fe20:	2b00      	cmp	r3, #0
    fe22:	da08      	bge.n	fe36 <_puts_r+0xaa>
    fe24:	0022      	movs	r2, r4
    fe26:	310a      	adds	r1, #10
    fe28:	0028      	movs	r0, r5
    fe2a:	f000 fa03 	bl	10234 <__swbuf_r>
    fe2e:	1c43      	adds	r3, r0, #1
    fe30:	d0d7      	beq.n	fde2 <_puts_r+0x56>
    fe32:	200a      	movs	r0, #10
    fe34:	e004      	b.n	fe40 <_puts_r+0xb4>
    fe36:	200a      	movs	r0, #10
    fe38:	6823      	ldr	r3, [r4, #0]
    fe3a:	1c5a      	adds	r2, r3, #1
    fe3c:	6022      	str	r2, [r4, #0]
    fe3e:	7018      	strb	r0, [r3, #0]
    fe40:	bd70      	pop	{r4, r5, r6, pc}
    fe42:	46c0      	nop			; (mov r8, r8)
    fe44:	000127f0 	.word	0x000127f0
    fe48:	00012810 	.word	0x00012810
    fe4c:	00012830 	.word	0x00012830

0000fe50 <puts>:
    fe50:	b510      	push	{r4, lr}
    fe52:	4b03      	ldr	r3, [pc, #12]	; (fe60 <puts+0x10>)
    fe54:	0001      	movs	r1, r0
    fe56:	6818      	ldr	r0, [r3, #0]
    fe58:	f7ff ff98 	bl	fd8c <_puts_r>
    fe5c:	bd10      	pop	{r4, pc}
    fe5e:	46c0      	nop			; (mov r8, r8)
    fe60:	20000094 	.word	0x20000094

0000fe64 <setbuf>:
    fe64:	424a      	negs	r2, r1
    fe66:	414a      	adcs	r2, r1
    fe68:	2380      	movs	r3, #128	; 0x80
    fe6a:	b510      	push	{r4, lr}
    fe6c:	0052      	lsls	r2, r2, #1
    fe6e:	00db      	lsls	r3, r3, #3
    fe70:	f000 f802 	bl	fe78 <setvbuf>
    fe74:	bd10      	pop	{r4, pc}
	...

0000fe78 <setvbuf>:
    fe78:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe7a:	001d      	movs	r5, r3
    fe7c:	4b51      	ldr	r3, [pc, #324]	; (ffc4 <setvbuf+0x14c>)
    fe7e:	b085      	sub	sp, #20
    fe80:	681e      	ldr	r6, [r3, #0]
    fe82:	0004      	movs	r4, r0
    fe84:	000f      	movs	r7, r1
    fe86:	9200      	str	r2, [sp, #0]
    fe88:	2e00      	cmp	r6, #0
    fe8a:	d005      	beq.n	fe98 <setvbuf+0x20>
    fe8c:	69b3      	ldr	r3, [r6, #24]
    fe8e:	2b00      	cmp	r3, #0
    fe90:	d102      	bne.n	fe98 <setvbuf+0x20>
    fe92:	0030      	movs	r0, r6
    fe94:	f000 fb98 	bl	105c8 <__sinit>
    fe98:	4b4b      	ldr	r3, [pc, #300]	; (ffc8 <setvbuf+0x150>)
    fe9a:	429c      	cmp	r4, r3
    fe9c:	d101      	bne.n	fea2 <setvbuf+0x2a>
    fe9e:	6874      	ldr	r4, [r6, #4]
    fea0:	e008      	b.n	feb4 <setvbuf+0x3c>
    fea2:	4b4a      	ldr	r3, [pc, #296]	; (ffcc <setvbuf+0x154>)
    fea4:	429c      	cmp	r4, r3
    fea6:	d101      	bne.n	feac <setvbuf+0x34>
    fea8:	68b4      	ldr	r4, [r6, #8]
    feaa:	e003      	b.n	feb4 <setvbuf+0x3c>
    feac:	4b48      	ldr	r3, [pc, #288]	; (ffd0 <setvbuf+0x158>)
    feae:	429c      	cmp	r4, r3
    feb0:	d100      	bne.n	feb4 <setvbuf+0x3c>
    feb2:	68f4      	ldr	r4, [r6, #12]
    feb4:	9b00      	ldr	r3, [sp, #0]
    feb6:	2b02      	cmp	r3, #2
    feb8:	d005      	beq.n	fec6 <setvbuf+0x4e>
    feba:	2b01      	cmp	r3, #1
    febc:	d900      	bls.n	fec0 <setvbuf+0x48>
    febe:	e07c      	b.n	ffba <setvbuf+0x142>
    fec0:	2d00      	cmp	r5, #0
    fec2:	da00      	bge.n	fec6 <setvbuf+0x4e>
    fec4:	e079      	b.n	ffba <setvbuf+0x142>
    fec6:	0021      	movs	r1, r4
    fec8:	0030      	movs	r0, r6
    feca:	f000 fb0f 	bl	104ec <_fflush_r>
    fece:	6b61      	ldr	r1, [r4, #52]	; 0x34
    fed0:	2900      	cmp	r1, #0
    fed2:	d008      	beq.n	fee6 <setvbuf+0x6e>
    fed4:	0023      	movs	r3, r4
    fed6:	3344      	adds	r3, #68	; 0x44
    fed8:	4299      	cmp	r1, r3
    feda:	d002      	beq.n	fee2 <setvbuf+0x6a>
    fedc:	0030      	movs	r0, r6
    fede:	f000 fc95 	bl	1080c <_free_r>
    fee2:	2300      	movs	r3, #0
    fee4:	6363      	str	r3, [r4, #52]	; 0x34
    fee6:	2300      	movs	r3, #0
    fee8:	61a3      	str	r3, [r4, #24]
    feea:	6063      	str	r3, [r4, #4]
    feec:	89a3      	ldrh	r3, [r4, #12]
    feee:	061b      	lsls	r3, r3, #24
    fef0:	d503      	bpl.n	fefa <setvbuf+0x82>
    fef2:	6921      	ldr	r1, [r4, #16]
    fef4:	0030      	movs	r0, r6
    fef6:	f000 fc89 	bl	1080c <_free_r>
    fefa:	89a2      	ldrh	r2, [r4, #12]
    fefc:	4b35      	ldr	r3, [pc, #212]	; (ffd4 <setvbuf+0x15c>)
    fefe:	4013      	ands	r3, r2
    ff00:	81a3      	strh	r3, [r4, #12]
    ff02:	9b00      	ldr	r3, [sp, #0]
    ff04:	2b02      	cmp	r3, #2
    ff06:	d021      	beq.n	ff4c <setvbuf+0xd4>
    ff08:	ab03      	add	r3, sp, #12
    ff0a:	aa02      	add	r2, sp, #8
    ff0c:	0021      	movs	r1, r4
    ff0e:	0030      	movs	r0, r6
    ff10:	f000 fbee 	bl	106f0 <__swhatbuf_r>
    ff14:	89a3      	ldrh	r3, [r4, #12]
    ff16:	4318      	orrs	r0, r3
    ff18:	81a0      	strh	r0, [r4, #12]
    ff1a:	2d00      	cmp	r5, #0
    ff1c:	d101      	bne.n	ff22 <setvbuf+0xaa>
    ff1e:	9d02      	ldr	r5, [sp, #8]
    ff20:	e001      	b.n	ff26 <setvbuf+0xae>
    ff22:	2f00      	cmp	r7, #0
    ff24:	d125      	bne.n	ff72 <setvbuf+0xfa>
    ff26:	0028      	movs	r0, r5
    ff28:	f000 fc46 	bl	107b8 <malloc>
    ff2c:	9501      	str	r5, [sp, #4]
    ff2e:	1e07      	subs	r7, r0, #0
    ff30:	d11a      	bne.n	ff68 <setvbuf+0xf0>
    ff32:	9b02      	ldr	r3, [sp, #8]
    ff34:	9301      	str	r3, [sp, #4]
    ff36:	42ab      	cmp	r3, r5
    ff38:	d102      	bne.n	ff40 <setvbuf+0xc8>
    ff3a:	2001      	movs	r0, #1
    ff3c:	4240      	negs	r0, r0
    ff3e:	e006      	b.n	ff4e <setvbuf+0xd6>
    ff40:	9801      	ldr	r0, [sp, #4]
    ff42:	f000 fc39 	bl	107b8 <malloc>
    ff46:	1e07      	subs	r7, r0, #0
    ff48:	d10e      	bne.n	ff68 <setvbuf+0xf0>
    ff4a:	e7f6      	b.n	ff3a <setvbuf+0xc2>
    ff4c:	2000      	movs	r0, #0
    ff4e:	2202      	movs	r2, #2
    ff50:	89a3      	ldrh	r3, [r4, #12]
    ff52:	4313      	orrs	r3, r2
    ff54:	81a3      	strh	r3, [r4, #12]
    ff56:	2300      	movs	r3, #0
    ff58:	60a3      	str	r3, [r4, #8]
    ff5a:	0023      	movs	r3, r4
    ff5c:	3347      	adds	r3, #71	; 0x47
    ff5e:	6023      	str	r3, [r4, #0]
    ff60:	6123      	str	r3, [r4, #16]
    ff62:	2301      	movs	r3, #1
    ff64:	6163      	str	r3, [r4, #20]
    ff66:	e02a      	b.n	ffbe <setvbuf+0x146>
    ff68:	2280      	movs	r2, #128	; 0x80
    ff6a:	89a3      	ldrh	r3, [r4, #12]
    ff6c:	9d01      	ldr	r5, [sp, #4]
    ff6e:	4313      	orrs	r3, r2
    ff70:	81a3      	strh	r3, [r4, #12]
    ff72:	69b3      	ldr	r3, [r6, #24]
    ff74:	2b00      	cmp	r3, #0
    ff76:	d102      	bne.n	ff7e <setvbuf+0x106>
    ff78:	0030      	movs	r0, r6
    ff7a:	f000 fb25 	bl	105c8 <__sinit>
    ff7e:	9b00      	ldr	r3, [sp, #0]
    ff80:	2b01      	cmp	r3, #1
    ff82:	d103      	bne.n	ff8c <setvbuf+0x114>
    ff84:	89a3      	ldrh	r3, [r4, #12]
    ff86:	9a00      	ldr	r2, [sp, #0]
    ff88:	431a      	orrs	r2, r3
    ff8a:	81a2      	strh	r2, [r4, #12]
    ff8c:	2308      	movs	r3, #8
    ff8e:	89a2      	ldrh	r2, [r4, #12]
    ff90:	6027      	str	r7, [r4, #0]
    ff92:	4013      	ands	r3, r2
    ff94:	6127      	str	r7, [r4, #16]
    ff96:	6165      	str	r5, [r4, #20]
    ff98:	1e18      	subs	r0, r3, #0
    ff9a:	d00c      	beq.n	ffb6 <setvbuf+0x13e>
    ff9c:	2301      	movs	r3, #1
    ff9e:	401a      	ands	r2, r3
    ffa0:	2300      	movs	r3, #0
    ffa2:	1e10      	subs	r0, r2, #0
    ffa4:	4298      	cmp	r0, r3
    ffa6:	d004      	beq.n	ffb2 <setvbuf+0x13a>
    ffa8:	426d      	negs	r5, r5
    ffaa:	60a3      	str	r3, [r4, #8]
    ffac:	61a5      	str	r5, [r4, #24]
    ffae:	0018      	movs	r0, r3
    ffb0:	e005      	b.n	ffbe <setvbuf+0x146>
    ffb2:	60a5      	str	r5, [r4, #8]
    ffb4:	e003      	b.n	ffbe <setvbuf+0x146>
    ffb6:	60a3      	str	r3, [r4, #8]
    ffb8:	e001      	b.n	ffbe <setvbuf+0x146>
    ffba:	2001      	movs	r0, #1
    ffbc:	4240      	negs	r0, r0
    ffbe:	b005      	add	sp, #20
    ffc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ffc2:	46c0      	nop			; (mov r8, r8)
    ffc4:	20000094 	.word	0x20000094
    ffc8:	000127f0 	.word	0x000127f0
    ffcc:	00012810 	.word	0x00012810
    ffd0:	00012830 	.word	0x00012830
    ffd4:	fffff35c 	.word	0xfffff35c

0000ffd8 <sniprintf>:
    ffd8:	b40c      	push	{r2, r3}
    ffda:	b530      	push	{r4, r5, lr}
    ffdc:	4b16      	ldr	r3, [pc, #88]	; (10038 <sniprintf+0x60>)
    ffde:	b09d      	sub	sp, #116	; 0x74
    ffe0:	1e0c      	subs	r4, r1, #0
    ffe2:	681d      	ldr	r5, [r3, #0]
    ffe4:	da04      	bge.n	fff0 <sniprintf+0x18>
    ffe6:	238b      	movs	r3, #139	; 0x8b
    ffe8:	2001      	movs	r0, #1
    ffea:	602b      	str	r3, [r5, #0]
    ffec:	4240      	negs	r0, r0
    ffee:	e01d      	b.n	1002c <sniprintf+0x54>
    fff0:	2382      	movs	r3, #130	; 0x82
    fff2:	a902      	add	r1, sp, #8
    fff4:	009b      	lsls	r3, r3, #2
    fff6:	818b      	strh	r3, [r1, #12]
    fff8:	2300      	movs	r3, #0
    fffa:	9002      	str	r0, [sp, #8]
    fffc:	6108      	str	r0, [r1, #16]
    fffe:	429c      	cmp	r4, r3
   10000:	d000      	beq.n	10004 <sniprintf+0x2c>
   10002:	1e63      	subs	r3, r4, #1
   10004:	608b      	str	r3, [r1, #8]
   10006:	614b      	str	r3, [r1, #20]
   10008:	2301      	movs	r3, #1
   1000a:	425b      	negs	r3, r3
   1000c:	81cb      	strh	r3, [r1, #14]
   1000e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   10010:	ab21      	add	r3, sp, #132	; 0x84
   10012:	0028      	movs	r0, r5
   10014:	9301      	str	r3, [sp, #4]
   10016:	f000 fd1d 	bl	10a54 <_svfiprintf_r>
   1001a:	1c43      	adds	r3, r0, #1
   1001c:	da01      	bge.n	10022 <sniprintf+0x4a>
   1001e:	238b      	movs	r3, #139	; 0x8b
   10020:	602b      	str	r3, [r5, #0]
   10022:	2c00      	cmp	r4, #0
   10024:	d002      	beq.n	1002c <sniprintf+0x54>
   10026:	2300      	movs	r3, #0
   10028:	9a02      	ldr	r2, [sp, #8]
   1002a:	7013      	strb	r3, [r2, #0]
   1002c:	b01d      	add	sp, #116	; 0x74
   1002e:	bc30      	pop	{r4, r5}
   10030:	bc08      	pop	{r3}
   10032:	b002      	add	sp, #8
   10034:	4718      	bx	r3
   10036:	46c0      	nop			; (mov r8, r8)
   10038:	20000094 	.word	0x20000094

0001003c <siprintf>:
   1003c:	b40e      	push	{r1, r2, r3}
   1003e:	b510      	push	{r4, lr}
   10040:	b09d      	sub	sp, #116	; 0x74
   10042:	a902      	add	r1, sp, #8
   10044:	9002      	str	r0, [sp, #8]
   10046:	6108      	str	r0, [r1, #16]
   10048:	480b      	ldr	r0, [pc, #44]	; (10078 <siprintf+0x3c>)
   1004a:	2482      	movs	r4, #130	; 0x82
   1004c:	6088      	str	r0, [r1, #8]
   1004e:	6148      	str	r0, [r1, #20]
   10050:	2001      	movs	r0, #1
   10052:	4240      	negs	r0, r0
   10054:	ab1f      	add	r3, sp, #124	; 0x7c
   10056:	81c8      	strh	r0, [r1, #14]
   10058:	4808      	ldr	r0, [pc, #32]	; (1007c <siprintf+0x40>)
   1005a:	cb04      	ldmia	r3!, {r2}
   1005c:	00a4      	lsls	r4, r4, #2
   1005e:	6800      	ldr	r0, [r0, #0]
   10060:	9301      	str	r3, [sp, #4]
   10062:	818c      	strh	r4, [r1, #12]
   10064:	f000 fcf6 	bl	10a54 <_svfiprintf_r>
   10068:	2300      	movs	r3, #0
   1006a:	9a02      	ldr	r2, [sp, #8]
   1006c:	7013      	strb	r3, [r2, #0]
   1006e:	b01d      	add	sp, #116	; 0x74
   10070:	bc10      	pop	{r4}
   10072:	bc08      	pop	{r3}
   10074:	b003      	add	sp, #12
   10076:	4718      	bx	r3
   10078:	7fffffff 	.word	0x7fffffff
   1007c:	20000094 	.word	0x20000094

00010080 <strcmp>:
   10080:	7802      	ldrb	r2, [r0, #0]
   10082:	780b      	ldrb	r3, [r1, #0]
   10084:	2a00      	cmp	r2, #0
   10086:	d003      	beq.n	10090 <strcmp+0x10>
   10088:	3001      	adds	r0, #1
   1008a:	3101      	adds	r1, #1
   1008c:	429a      	cmp	r2, r3
   1008e:	d0f7      	beq.n	10080 <strcmp>
   10090:	1ad0      	subs	r0, r2, r3
   10092:	4770      	bx	lr

00010094 <strcpy>:
   10094:	1c03      	adds	r3, r0, #0
   10096:	780a      	ldrb	r2, [r1, #0]
   10098:	3101      	adds	r1, #1
   1009a:	701a      	strb	r2, [r3, #0]
   1009c:	3301      	adds	r3, #1
   1009e:	2a00      	cmp	r2, #0
   100a0:	d1f9      	bne.n	10096 <strcpy+0x2>
   100a2:	4770      	bx	lr

000100a4 <strlen>:
   100a4:	2300      	movs	r3, #0
   100a6:	5cc2      	ldrb	r2, [r0, r3]
   100a8:	3301      	adds	r3, #1
   100aa:	2a00      	cmp	r2, #0
   100ac:	d1fb      	bne.n	100a6 <strlen+0x2>
   100ae:	1e58      	subs	r0, r3, #1
   100b0:	4770      	bx	lr

000100b2 <strncmp>:
   100b2:	2300      	movs	r3, #0
   100b4:	b530      	push	{r4, r5, lr}
   100b6:	429a      	cmp	r2, r3
   100b8:	d00b      	beq.n	100d2 <strncmp+0x20>
   100ba:	3a01      	subs	r2, #1
   100bc:	5cc4      	ldrb	r4, [r0, r3]
   100be:	5ccd      	ldrb	r5, [r1, r3]
   100c0:	42ac      	cmp	r4, r5
   100c2:	d105      	bne.n	100d0 <strncmp+0x1e>
   100c4:	429a      	cmp	r2, r3
   100c6:	d002      	beq.n	100ce <strncmp+0x1c>
   100c8:	3301      	adds	r3, #1
   100ca:	2c00      	cmp	r4, #0
   100cc:	d1f6      	bne.n	100bc <strncmp+0xa>
   100ce:	0025      	movs	r5, r4
   100d0:	1b63      	subs	r3, r4, r5
   100d2:	0018      	movs	r0, r3
   100d4:	bd30      	pop	{r4, r5, pc}

000100d6 <strspn>:
   100d6:	0003      	movs	r3, r0
   100d8:	b530      	push	{r4, r5, lr}
   100da:	781c      	ldrb	r4, [r3, #0]
   100dc:	2c00      	cmp	r4, #0
   100de:	d009      	beq.n	100f4 <strspn+0x1e>
   100e0:	000a      	movs	r2, r1
   100e2:	7815      	ldrb	r5, [r2, #0]
   100e4:	2d00      	cmp	r5, #0
   100e6:	d005      	beq.n	100f4 <strspn+0x1e>
   100e8:	42ac      	cmp	r4, r5
   100ea:	d001      	beq.n	100f0 <strspn+0x1a>
   100ec:	3201      	adds	r2, #1
   100ee:	e7f8      	b.n	100e2 <strspn+0xc>
   100f0:	3301      	adds	r3, #1
   100f2:	e7f2      	b.n	100da <strspn+0x4>
   100f4:	1a18      	subs	r0, r3, r0
   100f6:	bd30      	pop	{r4, r5, pc}

000100f8 <_strtol_r>:
   100f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   100fa:	001e      	movs	r6, r3
   100fc:	4b45      	ldr	r3, [pc, #276]	; (10214 <_strtol_r+0x11c>)
   100fe:	b087      	sub	sp, #28
   10100:	681b      	ldr	r3, [r3, #0]
   10102:	9201      	str	r2, [sp, #4]
   10104:	9302      	str	r3, [sp, #8]
   10106:	2208      	movs	r2, #8
   10108:	000b      	movs	r3, r1
   1010a:	9005      	str	r0, [sp, #20]
   1010c:	9103      	str	r1, [sp, #12]
   1010e:	781c      	ldrb	r4, [r3, #0]
   10110:	9902      	ldr	r1, [sp, #8]
   10112:	1c5d      	adds	r5, r3, #1
   10114:	1909      	adds	r1, r1, r4
   10116:	7848      	ldrb	r0, [r1, #1]
   10118:	4010      	ands	r0, r2
   1011a:	d001      	beq.n	10120 <_strtol_r+0x28>
   1011c:	002b      	movs	r3, r5
   1011e:	e7f6      	b.n	1010e <_strtol_r+0x16>
   10120:	2c2d      	cmp	r4, #45	; 0x2d
   10122:	d104      	bne.n	1012e <_strtol_r+0x36>
   10124:	1c9d      	adds	r5, r3, #2
   10126:	785c      	ldrb	r4, [r3, #1]
   10128:	2301      	movs	r3, #1
   1012a:	9300      	str	r3, [sp, #0]
   1012c:	e004      	b.n	10138 <_strtol_r+0x40>
   1012e:	9000      	str	r0, [sp, #0]
   10130:	2c2b      	cmp	r4, #43	; 0x2b
   10132:	d101      	bne.n	10138 <_strtol_r+0x40>
   10134:	785c      	ldrb	r4, [r3, #1]
   10136:	1c9d      	adds	r5, r3, #2
   10138:	2e00      	cmp	r6, #0
   1013a:	d002      	beq.n	10142 <_strtol_r+0x4a>
   1013c:	2e10      	cmp	r6, #16
   1013e:	d10a      	bne.n	10156 <_strtol_r+0x5e>
   10140:	e062      	b.n	10208 <_strtol_r+0x110>
   10142:	2c30      	cmp	r4, #48	; 0x30
   10144:	d15e      	bne.n	10204 <_strtol_r+0x10c>
   10146:	2220      	movs	r2, #32
   10148:	782b      	ldrb	r3, [r5, #0]
   1014a:	4393      	bics	r3, r2
   1014c:	2b58      	cmp	r3, #88	; 0x58
   1014e:	d154      	bne.n	101fa <_strtol_r+0x102>
   10150:	2610      	movs	r6, #16
   10152:	786c      	ldrb	r4, [r5, #1]
   10154:	3502      	adds	r5, #2
   10156:	9f00      	ldr	r7, [sp, #0]
   10158:	0031      	movs	r1, r6
   1015a:	1e7b      	subs	r3, r7, #1
   1015c:	419f      	sbcs	r7, r3
   1015e:	4b2e      	ldr	r3, [pc, #184]	; (10218 <_strtol_r+0x120>)
   10160:	18ff      	adds	r7, r7, r3
   10162:	0038      	movs	r0, r7
   10164:	f7fe fdce 	bl	ed04 <__aeabi_uidivmod>
   10168:	0038      	movs	r0, r7
   1016a:	9104      	str	r1, [sp, #16]
   1016c:	0031      	movs	r1, r6
   1016e:	f7fe fd43 	bl	ebf8 <__aeabi_uidiv>
   10172:	2300      	movs	r3, #0
   10174:	2203      	movs	r2, #3
   10176:	0007      	movs	r7, r0
   10178:	4694      	mov	ip, r2
   1017a:	0018      	movs	r0, r3
   1017c:	9a02      	ldr	r2, [sp, #8]
   1017e:	1912      	adds	r2, r2, r4
   10180:	7851      	ldrb	r1, [r2, #1]
   10182:	2204      	movs	r2, #4
   10184:	4211      	tst	r1, r2
   10186:	d001      	beq.n	1018c <_strtol_r+0x94>
   10188:	3c30      	subs	r4, #48	; 0x30
   1018a:	e007      	b.n	1019c <_strtol_r+0xa4>
   1018c:	4662      	mov	r2, ip
   1018e:	4011      	ands	r1, r2
   10190:	d017      	beq.n	101c2 <_strtol_r+0xca>
   10192:	2237      	movs	r2, #55	; 0x37
   10194:	2901      	cmp	r1, #1
   10196:	d000      	beq.n	1019a <_strtol_r+0xa2>
   10198:	3220      	adds	r2, #32
   1019a:	1aa4      	subs	r4, r4, r2
   1019c:	42a6      	cmp	r6, r4
   1019e:	dd10      	ble.n	101c2 <_strtol_r+0xca>
   101a0:	1c5a      	adds	r2, r3, #1
   101a2:	d00b      	beq.n	101bc <_strtol_r+0xc4>
   101a4:	42b8      	cmp	r0, r7
   101a6:	d807      	bhi.n	101b8 <_strtol_r+0xc0>
   101a8:	d102      	bne.n	101b0 <_strtol_r+0xb8>
   101aa:	9b04      	ldr	r3, [sp, #16]
   101ac:	429c      	cmp	r4, r3
   101ae:	dc03      	bgt.n	101b8 <_strtol_r+0xc0>
   101b0:	4370      	muls	r0, r6
   101b2:	2301      	movs	r3, #1
   101b4:	1820      	adds	r0, r4, r0
   101b6:	e001      	b.n	101bc <_strtol_r+0xc4>
   101b8:	2301      	movs	r3, #1
   101ba:	425b      	negs	r3, r3
   101bc:	782c      	ldrb	r4, [r5, #0]
   101be:	3501      	adds	r5, #1
   101c0:	e7dc      	b.n	1017c <_strtol_r+0x84>
   101c2:	1c5a      	adds	r2, r3, #1
   101c4:	d10b      	bne.n	101de <_strtol_r+0xe6>
   101c6:	9800      	ldr	r0, [sp, #0]
   101c8:	9a05      	ldr	r2, [sp, #20]
   101ca:	1e43      	subs	r3, r0, #1
   101cc:	4198      	sbcs	r0, r3
   101ce:	4b12      	ldr	r3, [pc, #72]	; (10218 <_strtol_r+0x120>)
   101d0:	18c0      	adds	r0, r0, r3
   101d2:	2322      	movs	r3, #34	; 0x22
   101d4:	6013      	str	r3, [r2, #0]
   101d6:	9b01      	ldr	r3, [sp, #4]
   101d8:	2b00      	cmp	r3, #0
   101da:	d10a      	bne.n	101f2 <_strtol_r+0xfa>
   101dc:	e017      	b.n	1020e <_strtol_r+0x116>
   101de:	9a00      	ldr	r2, [sp, #0]
   101e0:	2a00      	cmp	r2, #0
   101e2:	d000      	beq.n	101e6 <_strtol_r+0xee>
   101e4:	4240      	negs	r0, r0
   101e6:	9a01      	ldr	r2, [sp, #4]
   101e8:	2a00      	cmp	r2, #0
   101ea:	d010      	beq.n	1020e <_strtol_r+0x116>
   101ec:	9a03      	ldr	r2, [sp, #12]
   101ee:	2b00      	cmp	r3, #0
   101f0:	d000      	beq.n	101f4 <_strtol_r+0xfc>
   101f2:	1e6a      	subs	r2, r5, #1
   101f4:	9b01      	ldr	r3, [sp, #4]
   101f6:	601a      	str	r2, [r3, #0]
   101f8:	e009      	b.n	1020e <_strtol_r+0x116>
   101fa:	2430      	movs	r4, #48	; 0x30
   101fc:	2e00      	cmp	r6, #0
   101fe:	d1aa      	bne.n	10156 <_strtol_r+0x5e>
   10200:	2608      	movs	r6, #8
   10202:	e7a8      	b.n	10156 <_strtol_r+0x5e>
   10204:	260a      	movs	r6, #10
   10206:	e7a6      	b.n	10156 <_strtol_r+0x5e>
   10208:	2c30      	cmp	r4, #48	; 0x30
   1020a:	d09c      	beq.n	10146 <_strtol_r+0x4e>
   1020c:	e7a3      	b.n	10156 <_strtol_r+0x5e>
   1020e:	b007      	add	sp, #28
   10210:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10212:	46c0      	nop			; (mov r8, r8)
   10214:	20000098 	.word	0x20000098
   10218:	7fffffff 	.word	0x7fffffff

0001021c <strtol>:
   1021c:	b510      	push	{r4, lr}
   1021e:	0013      	movs	r3, r2
   10220:	000a      	movs	r2, r1
   10222:	0001      	movs	r1, r0
   10224:	4802      	ldr	r0, [pc, #8]	; (10230 <strtol+0x14>)
   10226:	6800      	ldr	r0, [r0, #0]
   10228:	f7ff ff66 	bl	100f8 <_strtol_r>
   1022c:	bd10      	pop	{r4, pc}
   1022e:	46c0      	nop			; (mov r8, r8)
   10230:	20000094 	.word	0x20000094

00010234 <__swbuf_r>:
   10234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10236:	0005      	movs	r5, r0
   10238:	000f      	movs	r7, r1
   1023a:	0014      	movs	r4, r2
   1023c:	2800      	cmp	r0, #0
   1023e:	d004      	beq.n	1024a <__swbuf_r+0x16>
   10240:	6983      	ldr	r3, [r0, #24]
   10242:	2b00      	cmp	r3, #0
   10244:	d101      	bne.n	1024a <__swbuf_r+0x16>
   10246:	f000 f9bf 	bl	105c8 <__sinit>
   1024a:	4b23      	ldr	r3, [pc, #140]	; (102d8 <__swbuf_r+0xa4>)
   1024c:	429c      	cmp	r4, r3
   1024e:	d101      	bne.n	10254 <__swbuf_r+0x20>
   10250:	686c      	ldr	r4, [r5, #4]
   10252:	e008      	b.n	10266 <__swbuf_r+0x32>
   10254:	4b21      	ldr	r3, [pc, #132]	; (102dc <__swbuf_r+0xa8>)
   10256:	429c      	cmp	r4, r3
   10258:	d101      	bne.n	1025e <__swbuf_r+0x2a>
   1025a:	68ac      	ldr	r4, [r5, #8]
   1025c:	e003      	b.n	10266 <__swbuf_r+0x32>
   1025e:	4b20      	ldr	r3, [pc, #128]	; (102e0 <__swbuf_r+0xac>)
   10260:	429c      	cmp	r4, r3
   10262:	d100      	bne.n	10266 <__swbuf_r+0x32>
   10264:	68ec      	ldr	r4, [r5, #12]
   10266:	69a3      	ldr	r3, [r4, #24]
   10268:	60a3      	str	r3, [r4, #8]
   1026a:	89a3      	ldrh	r3, [r4, #12]
   1026c:	071b      	lsls	r3, r3, #28
   1026e:	d50a      	bpl.n	10286 <__swbuf_r+0x52>
   10270:	6923      	ldr	r3, [r4, #16]
   10272:	2b00      	cmp	r3, #0
   10274:	d007      	beq.n	10286 <__swbuf_r+0x52>
   10276:	6823      	ldr	r3, [r4, #0]
   10278:	6922      	ldr	r2, [r4, #16]
   1027a:	b2fe      	uxtb	r6, r7
   1027c:	1a98      	subs	r0, r3, r2
   1027e:	6963      	ldr	r3, [r4, #20]
   10280:	4298      	cmp	r0, r3
   10282:	db0f      	blt.n	102a4 <__swbuf_r+0x70>
   10284:	e008      	b.n	10298 <__swbuf_r+0x64>
   10286:	0021      	movs	r1, r4
   10288:	0028      	movs	r0, r5
   1028a:	f000 f82b 	bl	102e4 <__swsetup_r>
   1028e:	2800      	cmp	r0, #0
   10290:	d0f1      	beq.n	10276 <__swbuf_r+0x42>
   10292:	2001      	movs	r0, #1
   10294:	4240      	negs	r0, r0
   10296:	e01d      	b.n	102d4 <__swbuf_r+0xa0>
   10298:	0021      	movs	r1, r4
   1029a:	0028      	movs	r0, r5
   1029c:	f000 f926 	bl	104ec <_fflush_r>
   102a0:	2800      	cmp	r0, #0
   102a2:	d1f6      	bne.n	10292 <__swbuf_r+0x5e>
   102a4:	68a3      	ldr	r3, [r4, #8]
   102a6:	3001      	adds	r0, #1
   102a8:	3b01      	subs	r3, #1
   102aa:	60a3      	str	r3, [r4, #8]
   102ac:	6823      	ldr	r3, [r4, #0]
   102ae:	1c5a      	adds	r2, r3, #1
   102b0:	6022      	str	r2, [r4, #0]
   102b2:	701f      	strb	r7, [r3, #0]
   102b4:	6963      	ldr	r3, [r4, #20]
   102b6:	4298      	cmp	r0, r3
   102b8:	d005      	beq.n	102c6 <__swbuf_r+0x92>
   102ba:	89a3      	ldrh	r3, [r4, #12]
   102bc:	0030      	movs	r0, r6
   102be:	07db      	lsls	r3, r3, #31
   102c0:	d508      	bpl.n	102d4 <__swbuf_r+0xa0>
   102c2:	2e0a      	cmp	r6, #10
   102c4:	d106      	bne.n	102d4 <__swbuf_r+0xa0>
   102c6:	0021      	movs	r1, r4
   102c8:	0028      	movs	r0, r5
   102ca:	f000 f90f 	bl	104ec <_fflush_r>
   102ce:	2800      	cmp	r0, #0
   102d0:	d1df      	bne.n	10292 <__swbuf_r+0x5e>
   102d2:	0030      	movs	r0, r6
   102d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102d6:	46c0      	nop			; (mov r8, r8)
   102d8:	000127f0 	.word	0x000127f0
   102dc:	00012810 	.word	0x00012810
   102e0:	00012830 	.word	0x00012830

000102e4 <__swsetup_r>:
   102e4:	4b36      	ldr	r3, [pc, #216]	; (103c0 <__swsetup_r+0xdc>)
   102e6:	b570      	push	{r4, r5, r6, lr}
   102e8:	681d      	ldr	r5, [r3, #0]
   102ea:	0006      	movs	r6, r0
   102ec:	000c      	movs	r4, r1
   102ee:	2d00      	cmp	r5, #0
   102f0:	d005      	beq.n	102fe <__swsetup_r+0x1a>
   102f2:	69ab      	ldr	r3, [r5, #24]
   102f4:	2b00      	cmp	r3, #0
   102f6:	d102      	bne.n	102fe <__swsetup_r+0x1a>
   102f8:	0028      	movs	r0, r5
   102fa:	f000 f965 	bl	105c8 <__sinit>
   102fe:	4b31      	ldr	r3, [pc, #196]	; (103c4 <__swsetup_r+0xe0>)
   10300:	429c      	cmp	r4, r3
   10302:	d101      	bne.n	10308 <__swsetup_r+0x24>
   10304:	686c      	ldr	r4, [r5, #4]
   10306:	e008      	b.n	1031a <__swsetup_r+0x36>
   10308:	4b2f      	ldr	r3, [pc, #188]	; (103c8 <__swsetup_r+0xe4>)
   1030a:	429c      	cmp	r4, r3
   1030c:	d101      	bne.n	10312 <__swsetup_r+0x2e>
   1030e:	68ac      	ldr	r4, [r5, #8]
   10310:	e003      	b.n	1031a <__swsetup_r+0x36>
   10312:	4b2e      	ldr	r3, [pc, #184]	; (103cc <__swsetup_r+0xe8>)
   10314:	429c      	cmp	r4, r3
   10316:	d100      	bne.n	1031a <__swsetup_r+0x36>
   10318:	68ec      	ldr	r4, [r5, #12]
   1031a:	220c      	movs	r2, #12
   1031c:	5ea3      	ldrsh	r3, [r4, r2]
   1031e:	b29a      	uxth	r2, r3
   10320:	0711      	lsls	r1, r2, #28
   10322:	d423      	bmi.n	1036c <__swsetup_r+0x88>
   10324:	06d1      	lsls	r1, r2, #27
   10326:	d407      	bmi.n	10338 <__swsetup_r+0x54>
   10328:	2209      	movs	r2, #9
   1032a:	2001      	movs	r0, #1
   1032c:	6032      	str	r2, [r6, #0]
   1032e:	3237      	adds	r2, #55	; 0x37
   10330:	4313      	orrs	r3, r2
   10332:	81a3      	strh	r3, [r4, #12]
   10334:	4240      	negs	r0, r0
   10336:	e042      	b.n	103be <__swsetup_r+0xda>
   10338:	0753      	lsls	r3, r2, #29
   1033a:	d513      	bpl.n	10364 <__swsetup_r+0x80>
   1033c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   1033e:	2900      	cmp	r1, #0
   10340:	d008      	beq.n	10354 <__swsetup_r+0x70>
   10342:	0023      	movs	r3, r4
   10344:	3344      	adds	r3, #68	; 0x44
   10346:	4299      	cmp	r1, r3
   10348:	d002      	beq.n	10350 <__swsetup_r+0x6c>
   1034a:	0030      	movs	r0, r6
   1034c:	f000 fa5e 	bl	1080c <_free_r>
   10350:	2300      	movs	r3, #0
   10352:	6363      	str	r3, [r4, #52]	; 0x34
   10354:	2224      	movs	r2, #36	; 0x24
   10356:	89a3      	ldrh	r3, [r4, #12]
   10358:	4393      	bics	r3, r2
   1035a:	81a3      	strh	r3, [r4, #12]
   1035c:	2300      	movs	r3, #0
   1035e:	6063      	str	r3, [r4, #4]
   10360:	6923      	ldr	r3, [r4, #16]
   10362:	6023      	str	r3, [r4, #0]
   10364:	2208      	movs	r2, #8
   10366:	89a3      	ldrh	r3, [r4, #12]
   10368:	4313      	orrs	r3, r2
   1036a:	81a3      	strh	r3, [r4, #12]
   1036c:	6923      	ldr	r3, [r4, #16]
   1036e:	2b00      	cmp	r3, #0
   10370:	d10b      	bne.n	1038a <__swsetup_r+0xa6>
   10372:	23a0      	movs	r3, #160	; 0xa0
   10374:	89a2      	ldrh	r2, [r4, #12]
   10376:	009b      	lsls	r3, r3, #2
   10378:	4013      	ands	r3, r2
   1037a:	2280      	movs	r2, #128	; 0x80
   1037c:	0092      	lsls	r2, r2, #2
   1037e:	4293      	cmp	r3, r2
   10380:	d003      	beq.n	1038a <__swsetup_r+0xa6>
   10382:	0021      	movs	r1, r4
   10384:	0030      	movs	r0, r6
   10386:	f000 f9d9 	bl	1073c <__smakebuf_r>
   1038a:	2301      	movs	r3, #1
   1038c:	89a2      	ldrh	r2, [r4, #12]
   1038e:	4013      	ands	r3, r2
   10390:	d005      	beq.n	1039e <__swsetup_r+0xba>
   10392:	2300      	movs	r3, #0
   10394:	60a3      	str	r3, [r4, #8]
   10396:	6963      	ldr	r3, [r4, #20]
   10398:	425b      	negs	r3, r3
   1039a:	61a3      	str	r3, [r4, #24]
   1039c:	e003      	b.n	103a6 <__swsetup_r+0xc2>
   1039e:	0792      	lsls	r2, r2, #30
   103a0:	d400      	bmi.n	103a4 <__swsetup_r+0xc0>
   103a2:	6963      	ldr	r3, [r4, #20]
   103a4:	60a3      	str	r3, [r4, #8]
   103a6:	2000      	movs	r0, #0
   103a8:	6923      	ldr	r3, [r4, #16]
   103aa:	4283      	cmp	r3, r0
   103ac:	d107      	bne.n	103be <__swsetup_r+0xda>
   103ae:	220c      	movs	r2, #12
   103b0:	5ea3      	ldrsh	r3, [r4, r2]
   103b2:	061a      	lsls	r2, r3, #24
   103b4:	d503      	bpl.n	103be <__swsetup_r+0xda>
   103b6:	2240      	movs	r2, #64	; 0x40
   103b8:	4313      	orrs	r3, r2
   103ba:	81a3      	strh	r3, [r4, #12]
   103bc:	3801      	subs	r0, #1
   103be:	bd70      	pop	{r4, r5, r6, pc}
   103c0:	20000094 	.word	0x20000094
   103c4:	000127f0 	.word	0x000127f0
   103c8:	00012810 	.word	0x00012810
   103cc:	00012830 	.word	0x00012830

000103d0 <abort>:
   103d0:	b510      	push	{r4, lr}
   103d2:	2006      	movs	r0, #6
   103d4:	f000 fcae 	bl	10d34 <raise>
   103d8:	2001      	movs	r0, #1
   103da:	f7fa fc41 	bl	ac60 <_exit>
	...

000103e0 <__sflush_r>:
   103e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   103e2:	898a      	ldrh	r2, [r1, #12]
   103e4:	0005      	movs	r5, r0
   103e6:	000c      	movs	r4, r1
   103e8:	0713      	lsls	r3, r2, #28
   103ea:	d45a      	bmi.n	104a2 <__sflush_r+0xc2>
   103ec:	684b      	ldr	r3, [r1, #4]
   103ee:	2b00      	cmp	r3, #0
   103f0:	dc02      	bgt.n	103f8 <__sflush_r+0x18>
   103f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   103f4:	2b00      	cmp	r3, #0
   103f6:	dd19      	ble.n	1042c <__sflush_r+0x4c>
   103f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   103fa:	2f00      	cmp	r7, #0
   103fc:	d016      	beq.n	1042c <__sflush_r+0x4c>
   103fe:	2300      	movs	r3, #0
   10400:	682e      	ldr	r6, [r5, #0]
   10402:	602b      	str	r3, [r5, #0]
   10404:	2380      	movs	r3, #128	; 0x80
   10406:	015b      	lsls	r3, r3, #5
   10408:	401a      	ands	r2, r3
   1040a:	d001      	beq.n	10410 <__sflush_r+0x30>
   1040c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1040e:	e014      	b.n	1043a <__sflush_r+0x5a>
   10410:	2301      	movs	r3, #1
   10412:	6a21      	ldr	r1, [r4, #32]
   10414:	0028      	movs	r0, r5
   10416:	47b8      	blx	r7
   10418:	1c43      	adds	r3, r0, #1
   1041a:	d10e      	bne.n	1043a <__sflush_r+0x5a>
   1041c:	682b      	ldr	r3, [r5, #0]
   1041e:	2b00      	cmp	r3, #0
   10420:	d00b      	beq.n	1043a <__sflush_r+0x5a>
   10422:	2b1d      	cmp	r3, #29
   10424:	d001      	beq.n	1042a <__sflush_r+0x4a>
   10426:	2b16      	cmp	r3, #22
   10428:	d102      	bne.n	10430 <__sflush_r+0x50>
   1042a:	602e      	str	r6, [r5, #0]
   1042c:	2000      	movs	r0, #0
   1042e:	e05a      	b.n	104e6 <__sflush_r+0x106>
   10430:	2240      	movs	r2, #64	; 0x40
   10432:	89a3      	ldrh	r3, [r4, #12]
   10434:	4313      	orrs	r3, r2
   10436:	81a3      	strh	r3, [r4, #12]
   10438:	e055      	b.n	104e6 <__sflush_r+0x106>
   1043a:	89a3      	ldrh	r3, [r4, #12]
   1043c:	075b      	lsls	r3, r3, #29
   1043e:	d506      	bpl.n	1044e <__sflush_r+0x6e>
   10440:	6863      	ldr	r3, [r4, #4]
   10442:	1ac0      	subs	r0, r0, r3
   10444:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10446:	2b00      	cmp	r3, #0
   10448:	d001      	beq.n	1044e <__sflush_r+0x6e>
   1044a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1044c:	1ac0      	subs	r0, r0, r3
   1044e:	2300      	movs	r3, #0
   10450:	0002      	movs	r2, r0
   10452:	6a21      	ldr	r1, [r4, #32]
   10454:	0028      	movs	r0, r5
   10456:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10458:	47b8      	blx	r7
   1045a:	89a3      	ldrh	r3, [r4, #12]
   1045c:	1c42      	adds	r2, r0, #1
   1045e:	d106      	bne.n	1046e <__sflush_r+0x8e>
   10460:	6829      	ldr	r1, [r5, #0]
   10462:	291d      	cmp	r1, #29
   10464:	d83a      	bhi.n	104dc <__sflush_r+0xfc>
   10466:	4a20      	ldr	r2, [pc, #128]	; (104e8 <__sflush_r+0x108>)
   10468:	40ca      	lsrs	r2, r1
   1046a:	07d2      	lsls	r2, r2, #31
   1046c:	d536      	bpl.n	104dc <__sflush_r+0xfc>
   1046e:	2200      	movs	r2, #0
   10470:	6062      	str	r2, [r4, #4]
   10472:	6922      	ldr	r2, [r4, #16]
   10474:	6022      	str	r2, [r4, #0]
   10476:	04db      	lsls	r3, r3, #19
   10478:	d505      	bpl.n	10486 <__sflush_r+0xa6>
   1047a:	1c43      	adds	r3, r0, #1
   1047c:	d102      	bne.n	10484 <__sflush_r+0xa4>
   1047e:	682b      	ldr	r3, [r5, #0]
   10480:	2b00      	cmp	r3, #0
   10482:	d100      	bne.n	10486 <__sflush_r+0xa6>
   10484:	6560      	str	r0, [r4, #84]	; 0x54
   10486:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10488:	602e      	str	r6, [r5, #0]
   1048a:	2900      	cmp	r1, #0
   1048c:	d0ce      	beq.n	1042c <__sflush_r+0x4c>
   1048e:	0023      	movs	r3, r4
   10490:	3344      	adds	r3, #68	; 0x44
   10492:	4299      	cmp	r1, r3
   10494:	d002      	beq.n	1049c <__sflush_r+0xbc>
   10496:	0028      	movs	r0, r5
   10498:	f000 f9b8 	bl	1080c <_free_r>
   1049c:	2000      	movs	r0, #0
   1049e:	6360      	str	r0, [r4, #52]	; 0x34
   104a0:	e021      	b.n	104e6 <__sflush_r+0x106>
   104a2:	690f      	ldr	r7, [r1, #16]
   104a4:	2f00      	cmp	r7, #0
   104a6:	d0c1      	beq.n	1042c <__sflush_r+0x4c>
   104a8:	680b      	ldr	r3, [r1, #0]
   104aa:	600f      	str	r7, [r1, #0]
   104ac:	1bdb      	subs	r3, r3, r7
   104ae:	9301      	str	r3, [sp, #4]
   104b0:	2300      	movs	r3, #0
   104b2:	0792      	lsls	r2, r2, #30
   104b4:	d100      	bne.n	104b8 <__sflush_r+0xd8>
   104b6:	694b      	ldr	r3, [r1, #20]
   104b8:	60a3      	str	r3, [r4, #8]
   104ba:	e003      	b.n	104c4 <__sflush_r+0xe4>
   104bc:	9b01      	ldr	r3, [sp, #4]
   104be:	183f      	adds	r7, r7, r0
   104c0:	1a1b      	subs	r3, r3, r0
   104c2:	9301      	str	r3, [sp, #4]
   104c4:	9b01      	ldr	r3, [sp, #4]
   104c6:	2b00      	cmp	r3, #0
   104c8:	ddb0      	ble.n	1042c <__sflush_r+0x4c>
   104ca:	9b01      	ldr	r3, [sp, #4]
   104cc:	003a      	movs	r2, r7
   104ce:	6a21      	ldr	r1, [r4, #32]
   104d0:	0028      	movs	r0, r5
   104d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   104d4:	47b0      	blx	r6
   104d6:	2800      	cmp	r0, #0
   104d8:	dcf0      	bgt.n	104bc <__sflush_r+0xdc>
   104da:	89a3      	ldrh	r3, [r4, #12]
   104dc:	2240      	movs	r2, #64	; 0x40
   104de:	2001      	movs	r0, #1
   104e0:	4313      	orrs	r3, r2
   104e2:	81a3      	strh	r3, [r4, #12]
   104e4:	4240      	negs	r0, r0
   104e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   104e8:	20400001 	.word	0x20400001

000104ec <_fflush_r>:
   104ec:	690b      	ldr	r3, [r1, #16]
   104ee:	b570      	push	{r4, r5, r6, lr}
   104f0:	0005      	movs	r5, r0
   104f2:	000c      	movs	r4, r1
   104f4:	2b00      	cmp	r3, #0
   104f6:	d101      	bne.n	104fc <_fflush_r+0x10>
   104f8:	2000      	movs	r0, #0
   104fa:	e01c      	b.n	10536 <_fflush_r+0x4a>
   104fc:	2800      	cmp	r0, #0
   104fe:	d004      	beq.n	1050a <_fflush_r+0x1e>
   10500:	6983      	ldr	r3, [r0, #24]
   10502:	2b00      	cmp	r3, #0
   10504:	d101      	bne.n	1050a <_fflush_r+0x1e>
   10506:	f000 f85f 	bl	105c8 <__sinit>
   1050a:	4b0b      	ldr	r3, [pc, #44]	; (10538 <_fflush_r+0x4c>)
   1050c:	429c      	cmp	r4, r3
   1050e:	d101      	bne.n	10514 <_fflush_r+0x28>
   10510:	686c      	ldr	r4, [r5, #4]
   10512:	e008      	b.n	10526 <_fflush_r+0x3a>
   10514:	4b09      	ldr	r3, [pc, #36]	; (1053c <_fflush_r+0x50>)
   10516:	429c      	cmp	r4, r3
   10518:	d101      	bne.n	1051e <_fflush_r+0x32>
   1051a:	68ac      	ldr	r4, [r5, #8]
   1051c:	e003      	b.n	10526 <_fflush_r+0x3a>
   1051e:	4b08      	ldr	r3, [pc, #32]	; (10540 <_fflush_r+0x54>)
   10520:	429c      	cmp	r4, r3
   10522:	d100      	bne.n	10526 <_fflush_r+0x3a>
   10524:	68ec      	ldr	r4, [r5, #12]
   10526:	220c      	movs	r2, #12
   10528:	5ea3      	ldrsh	r3, [r4, r2]
   1052a:	2b00      	cmp	r3, #0
   1052c:	d0e4      	beq.n	104f8 <_fflush_r+0xc>
   1052e:	0021      	movs	r1, r4
   10530:	0028      	movs	r0, r5
   10532:	f7ff ff55 	bl	103e0 <__sflush_r>
   10536:	bd70      	pop	{r4, r5, r6, pc}
   10538:	000127f0 	.word	0x000127f0
   1053c:	00012810 	.word	0x00012810
   10540:	00012830 	.word	0x00012830

00010544 <_cleanup_r>:
   10544:	b510      	push	{r4, lr}
   10546:	4902      	ldr	r1, [pc, #8]	; (10550 <_cleanup_r+0xc>)
   10548:	f000 f8b0 	bl	106ac <_fwalk_reent>
   1054c:	bd10      	pop	{r4, pc}
   1054e:	46c0      	nop			; (mov r8, r8)
   10550:	000104ed 	.word	0x000104ed

00010554 <std.isra.0>:
   10554:	2300      	movs	r3, #0
   10556:	b510      	push	{r4, lr}
   10558:	0004      	movs	r4, r0
   1055a:	6003      	str	r3, [r0, #0]
   1055c:	6043      	str	r3, [r0, #4]
   1055e:	6083      	str	r3, [r0, #8]
   10560:	8181      	strh	r1, [r0, #12]
   10562:	6643      	str	r3, [r0, #100]	; 0x64
   10564:	81c2      	strh	r2, [r0, #14]
   10566:	6103      	str	r3, [r0, #16]
   10568:	6143      	str	r3, [r0, #20]
   1056a:	6183      	str	r3, [r0, #24]
   1056c:	0019      	movs	r1, r3
   1056e:	2208      	movs	r2, #8
   10570:	305c      	adds	r0, #92	; 0x5c
   10572:	f7ff f902 	bl	f77a <memset>
   10576:	4b05      	ldr	r3, [pc, #20]	; (1058c <std.isra.0+0x38>)
   10578:	6224      	str	r4, [r4, #32]
   1057a:	6263      	str	r3, [r4, #36]	; 0x24
   1057c:	4b04      	ldr	r3, [pc, #16]	; (10590 <std.isra.0+0x3c>)
   1057e:	62a3      	str	r3, [r4, #40]	; 0x28
   10580:	4b04      	ldr	r3, [pc, #16]	; (10594 <std.isra.0+0x40>)
   10582:	62e3      	str	r3, [r4, #44]	; 0x2c
   10584:	4b04      	ldr	r3, [pc, #16]	; (10598 <std.isra.0+0x44>)
   10586:	6323      	str	r3, [r4, #48]	; 0x30
   10588:	bd10      	pop	{r4, pc}
   1058a:	46c0      	nop			; (mov r8, r8)
   1058c:	00010d75 	.word	0x00010d75
   10590:	00010d9d 	.word	0x00010d9d
   10594:	00010dd5 	.word	0x00010dd5
   10598:	00010e01 	.word	0x00010e01

0001059c <__sfmoreglue>:
   1059c:	b570      	push	{r4, r5, r6, lr}
   1059e:	2568      	movs	r5, #104	; 0x68
   105a0:	1e4b      	subs	r3, r1, #1
   105a2:	435d      	muls	r5, r3
   105a4:	000e      	movs	r6, r1
   105a6:	0029      	movs	r1, r5
   105a8:	3174      	adds	r1, #116	; 0x74
   105aa:	f000 f975 	bl	10898 <_malloc_r>
   105ae:	1e04      	subs	r4, r0, #0
   105b0:	d008      	beq.n	105c4 <__sfmoreglue+0x28>
   105b2:	2100      	movs	r1, #0
   105b4:	002a      	movs	r2, r5
   105b6:	6001      	str	r1, [r0, #0]
   105b8:	6046      	str	r6, [r0, #4]
   105ba:	300c      	adds	r0, #12
   105bc:	60a0      	str	r0, [r4, #8]
   105be:	3268      	adds	r2, #104	; 0x68
   105c0:	f7ff f8db 	bl	f77a <memset>
   105c4:	0020      	movs	r0, r4
   105c6:	bd70      	pop	{r4, r5, r6, pc}

000105c8 <__sinit>:
   105c8:	6983      	ldr	r3, [r0, #24]
   105ca:	b513      	push	{r0, r1, r4, lr}
   105cc:	0004      	movs	r4, r0
   105ce:	2b00      	cmp	r3, #0
   105d0:	d128      	bne.n	10624 <__sinit+0x5c>
   105d2:	6483      	str	r3, [r0, #72]	; 0x48
   105d4:	64c3      	str	r3, [r0, #76]	; 0x4c
   105d6:	6503      	str	r3, [r0, #80]	; 0x50
   105d8:	4b13      	ldr	r3, [pc, #76]	; (10628 <__sinit+0x60>)
   105da:	4a14      	ldr	r2, [pc, #80]	; (1062c <__sinit+0x64>)
   105dc:	681b      	ldr	r3, [r3, #0]
   105de:	6282      	str	r2, [r0, #40]	; 0x28
   105e0:	9301      	str	r3, [sp, #4]
   105e2:	4298      	cmp	r0, r3
   105e4:	d101      	bne.n	105ea <__sinit+0x22>
   105e6:	2301      	movs	r3, #1
   105e8:	6183      	str	r3, [r0, #24]
   105ea:	0020      	movs	r0, r4
   105ec:	f000 f820 	bl	10630 <__sfp>
   105f0:	6060      	str	r0, [r4, #4]
   105f2:	0020      	movs	r0, r4
   105f4:	f000 f81c 	bl	10630 <__sfp>
   105f8:	60a0      	str	r0, [r4, #8]
   105fa:	0020      	movs	r0, r4
   105fc:	f000 f818 	bl	10630 <__sfp>
   10600:	2200      	movs	r2, #0
   10602:	60e0      	str	r0, [r4, #12]
   10604:	2104      	movs	r1, #4
   10606:	6860      	ldr	r0, [r4, #4]
   10608:	f7ff ffa4 	bl	10554 <std.isra.0>
   1060c:	2201      	movs	r2, #1
   1060e:	2109      	movs	r1, #9
   10610:	68a0      	ldr	r0, [r4, #8]
   10612:	f7ff ff9f 	bl	10554 <std.isra.0>
   10616:	2202      	movs	r2, #2
   10618:	2112      	movs	r1, #18
   1061a:	68e0      	ldr	r0, [r4, #12]
   1061c:	f7ff ff9a 	bl	10554 <std.isra.0>
   10620:	2301      	movs	r3, #1
   10622:	61a3      	str	r3, [r4, #24]
   10624:	bd13      	pop	{r0, r1, r4, pc}
   10626:	46c0      	nop			; (mov r8, r8)
   10628:	000126b8 	.word	0x000126b8
   1062c:	00010545 	.word	0x00010545

00010630 <__sfp>:
   10630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10632:	4b1d      	ldr	r3, [pc, #116]	; (106a8 <__sfp+0x78>)
   10634:	0006      	movs	r6, r0
   10636:	681d      	ldr	r5, [r3, #0]
   10638:	69ab      	ldr	r3, [r5, #24]
   1063a:	2b00      	cmp	r3, #0
   1063c:	d102      	bne.n	10644 <__sfp+0x14>
   1063e:	0028      	movs	r0, r5
   10640:	f7ff ffc2 	bl	105c8 <__sinit>
   10644:	3548      	adds	r5, #72	; 0x48
   10646:	68ac      	ldr	r4, [r5, #8]
   10648:	686b      	ldr	r3, [r5, #4]
   1064a:	3b01      	subs	r3, #1
   1064c:	d405      	bmi.n	1065a <__sfp+0x2a>
   1064e:	220c      	movs	r2, #12
   10650:	5ea7      	ldrsh	r7, [r4, r2]
   10652:	2f00      	cmp	r7, #0
   10654:	d010      	beq.n	10678 <__sfp+0x48>
   10656:	3468      	adds	r4, #104	; 0x68
   10658:	e7f7      	b.n	1064a <__sfp+0x1a>
   1065a:	682b      	ldr	r3, [r5, #0]
   1065c:	2b00      	cmp	r3, #0
   1065e:	d001      	beq.n	10664 <__sfp+0x34>
   10660:	682d      	ldr	r5, [r5, #0]
   10662:	e7f0      	b.n	10646 <__sfp+0x16>
   10664:	2104      	movs	r1, #4
   10666:	0030      	movs	r0, r6
   10668:	f7ff ff98 	bl	1059c <__sfmoreglue>
   1066c:	6028      	str	r0, [r5, #0]
   1066e:	2800      	cmp	r0, #0
   10670:	d1f6      	bne.n	10660 <__sfp+0x30>
   10672:	230c      	movs	r3, #12
   10674:	6033      	str	r3, [r6, #0]
   10676:	e016      	b.n	106a6 <__sfp+0x76>
   10678:	2301      	movs	r3, #1
   1067a:	0020      	movs	r0, r4
   1067c:	425b      	negs	r3, r3
   1067e:	81e3      	strh	r3, [r4, #14]
   10680:	3302      	adds	r3, #2
   10682:	81a3      	strh	r3, [r4, #12]
   10684:	6667      	str	r7, [r4, #100]	; 0x64
   10686:	6027      	str	r7, [r4, #0]
   10688:	60a7      	str	r7, [r4, #8]
   1068a:	6067      	str	r7, [r4, #4]
   1068c:	6127      	str	r7, [r4, #16]
   1068e:	6167      	str	r7, [r4, #20]
   10690:	61a7      	str	r7, [r4, #24]
   10692:	305c      	adds	r0, #92	; 0x5c
   10694:	2208      	movs	r2, #8
   10696:	0039      	movs	r1, r7
   10698:	f7ff f86f 	bl	f77a <memset>
   1069c:	0020      	movs	r0, r4
   1069e:	6367      	str	r7, [r4, #52]	; 0x34
   106a0:	63a7      	str	r7, [r4, #56]	; 0x38
   106a2:	64a7      	str	r7, [r4, #72]	; 0x48
   106a4:	64e7      	str	r7, [r4, #76]	; 0x4c
   106a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   106a8:	000126b8 	.word	0x000126b8

000106ac <_fwalk_reent>:
   106ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   106ae:	0004      	movs	r4, r0
   106b0:	0007      	movs	r7, r0
   106b2:	2600      	movs	r6, #0
   106b4:	9101      	str	r1, [sp, #4]
   106b6:	3448      	adds	r4, #72	; 0x48
   106b8:	2c00      	cmp	r4, #0
   106ba:	d016      	beq.n	106ea <_fwalk_reent+0x3e>
   106bc:	6863      	ldr	r3, [r4, #4]
   106be:	68a5      	ldr	r5, [r4, #8]
   106c0:	9300      	str	r3, [sp, #0]
   106c2:	9b00      	ldr	r3, [sp, #0]
   106c4:	3b01      	subs	r3, #1
   106c6:	9300      	str	r3, [sp, #0]
   106c8:	d40d      	bmi.n	106e6 <_fwalk_reent+0x3a>
   106ca:	89ab      	ldrh	r3, [r5, #12]
   106cc:	2b01      	cmp	r3, #1
   106ce:	d908      	bls.n	106e2 <_fwalk_reent+0x36>
   106d0:	220e      	movs	r2, #14
   106d2:	5eab      	ldrsh	r3, [r5, r2]
   106d4:	3301      	adds	r3, #1
   106d6:	d004      	beq.n	106e2 <_fwalk_reent+0x36>
   106d8:	0029      	movs	r1, r5
   106da:	0038      	movs	r0, r7
   106dc:	9b01      	ldr	r3, [sp, #4]
   106de:	4798      	blx	r3
   106e0:	4306      	orrs	r6, r0
   106e2:	3568      	adds	r5, #104	; 0x68
   106e4:	e7ed      	b.n	106c2 <_fwalk_reent+0x16>
   106e6:	6824      	ldr	r4, [r4, #0]
   106e8:	e7e6      	b.n	106b8 <_fwalk_reent+0xc>
   106ea:	0030      	movs	r0, r6
   106ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000106f0 <__swhatbuf_r>:
   106f0:	b570      	push	{r4, r5, r6, lr}
   106f2:	000e      	movs	r6, r1
   106f4:	001d      	movs	r5, r3
   106f6:	230e      	movs	r3, #14
   106f8:	5ec9      	ldrsh	r1, [r1, r3]
   106fa:	b090      	sub	sp, #64	; 0x40
   106fc:	0014      	movs	r4, r2
   106fe:	2900      	cmp	r1, #0
   10700:	da06      	bge.n	10710 <__swhatbuf_r+0x20>
   10702:	2300      	movs	r3, #0
   10704:	602b      	str	r3, [r5, #0]
   10706:	89b3      	ldrh	r3, [r6, #12]
   10708:	061b      	lsls	r3, r3, #24
   1070a:	d50f      	bpl.n	1072c <__swhatbuf_r+0x3c>
   1070c:	2340      	movs	r3, #64	; 0x40
   1070e:	e00f      	b.n	10730 <__swhatbuf_r+0x40>
   10710:	aa01      	add	r2, sp, #4
   10712:	f000 fba1 	bl	10e58 <_fstat_r>
   10716:	2800      	cmp	r0, #0
   10718:	dbf3      	blt.n	10702 <__swhatbuf_r+0x12>
   1071a:	23f0      	movs	r3, #240	; 0xf0
   1071c:	9a02      	ldr	r2, [sp, #8]
   1071e:	021b      	lsls	r3, r3, #8
   10720:	4013      	ands	r3, r2
   10722:	4a05      	ldr	r2, [pc, #20]	; (10738 <__swhatbuf_r+0x48>)
   10724:	189b      	adds	r3, r3, r2
   10726:	425a      	negs	r2, r3
   10728:	4153      	adcs	r3, r2
   1072a:	602b      	str	r3, [r5, #0]
   1072c:	2380      	movs	r3, #128	; 0x80
   1072e:	00db      	lsls	r3, r3, #3
   10730:	2000      	movs	r0, #0
   10732:	6023      	str	r3, [r4, #0]
   10734:	b010      	add	sp, #64	; 0x40
   10736:	bd70      	pop	{r4, r5, r6, pc}
   10738:	ffffe000 	.word	0xffffe000

0001073c <__smakebuf_r>:
   1073c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1073e:	2602      	movs	r6, #2
   10740:	898b      	ldrh	r3, [r1, #12]
   10742:	0005      	movs	r5, r0
   10744:	000c      	movs	r4, r1
   10746:	4233      	tst	r3, r6
   10748:	d110      	bne.n	1076c <__smakebuf_r+0x30>
   1074a:	ab01      	add	r3, sp, #4
   1074c:	466a      	mov	r2, sp
   1074e:	f7ff ffcf 	bl	106f0 <__swhatbuf_r>
   10752:	9900      	ldr	r1, [sp, #0]
   10754:	0007      	movs	r7, r0
   10756:	0028      	movs	r0, r5
   10758:	f000 f89e 	bl	10898 <_malloc_r>
   1075c:	2800      	cmp	r0, #0
   1075e:	d10c      	bne.n	1077a <__smakebuf_r+0x3e>
   10760:	220c      	movs	r2, #12
   10762:	5ea3      	ldrsh	r3, [r4, r2]
   10764:	059a      	lsls	r2, r3, #22
   10766:	d423      	bmi.n	107b0 <__smakebuf_r+0x74>
   10768:	4333      	orrs	r3, r6
   1076a:	81a3      	strh	r3, [r4, #12]
   1076c:	0023      	movs	r3, r4
   1076e:	3347      	adds	r3, #71	; 0x47
   10770:	6023      	str	r3, [r4, #0]
   10772:	6123      	str	r3, [r4, #16]
   10774:	2301      	movs	r3, #1
   10776:	6163      	str	r3, [r4, #20]
   10778:	e01a      	b.n	107b0 <__smakebuf_r+0x74>
   1077a:	2280      	movs	r2, #128	; 0x80
   1077c:	4b0d      	ldr	r3, [pc, #52]	; (107b4 <__smakebuf_r+0x78>)
   1077e:	62ab      	str	r3, [r5, #40]	; 0x28
   10780:	89a3      	ldrh	r3, [r4, #12]
   10782:	6020      	str	r0, [r4, #0]
   10784:	4313      	orrs	r3, r2
   10786:	81a3      	strh	r3, [r4, #12]
   10788:	9b00      	ldr	r3, [sp, #0]
   1078a:	6120      	str	r0, [r4, #16]
   1078c:	6163      	str	r3, [r4, #20]
   1078e:	9b01      	ldr	r3, [sp, #4]
   10790:	2b00      	cmp	r3, #0
   10792:	d00a      	beq.n	107aa <__smakebuf_r+0x6e>
   10794:	230e      	movs	r3, #14
   10796:	5ee1      	ldrsh	r1, [r4, r3]
   10798:	0028      	movs	r0, r5
   1079a:	f000 fb6f 	bl	10e7c <_isatty_r>
   1079e:	2800      	cmp	r0, #0
   107a0:	d003      	beq.n	107aa <__smakebuf_r+0x6e>
   107a2:	2201      	movs	r2, #1
   107a4:	89a3      	ldrh	r3, [r4, #12]
   107a6:	4313      	orrs	r3, r2
   107a8:	81a3      	strh	r3, [r4, #12]
   107aa:	89a3      	ldrh	r3, [r4, #12]
   107ac:	431f      	orrs	r7, r3
   107ae:	81a7      	strh	r7, [r4, #12]
   107b0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   107b2:	46c0      	nop			; (mov r8, r8)
   107b4:	00010545 	.word	0x00010545

000107b8 <malloc>:
   107b8:	b510      	push	{r4, lr}
   107ba:	4b03      	ldr	r3, [pc, #12]	; (107c8 <malloc+0x10>)
   107bc:	0001      	movs	r1, r0
   107be:	6818      	ldr	r0, [r3, #0]
   107c0:	f000 f86a 	bl	10898 <_malloc_r>
   107c4:	bd10      	pop	{r4, pc}
   107c6:	46c0      	nop			; (mov r8, r8)
   107c8:	20000094 	.word	0x20000094

000107cc <memchr>:
   107cc:	b2c9      	uxtb	r1, r1
   107ce:	1882      	adds	r2, r0, r2
   107d0:	4290      	cmp	r0, r2
   107d2:	d004      	beq.n	107de <memchr+0x12>
   107d4:	7803      	ldrb	r3, [r0, #0]
   107d6:	428b      	cmp	r3, r1
   107d8:	d002      	beq.n	107e0 <memchr+0x14>
   107da:	3001      	adds	r0, #1
   107dc:	e7f8      	b.n	107d0 <memchr+0x4>
   107de:	2000      	movs	r0, #0
   107e0:	4770      	bx	lr

000107e2 <memmove>:
   107e2:	b510      	push	{r4, lr}
   107e4:	4288      	cmp	r0, r1
   107e6:	d902      	bls.n	107ee <memmove+0xc>
   107e8:	188b      	adds	r3, r1, r2
   107ea:	4298      	cmp	r0, r3
   107ec:	d301      	bcc.n	107f2 <memmove+0x10>
   107ee:	2300      	movs	r3, #0
   107f0:	e005      	b.n	107fe <memmove+0x1c>
   107f2:	1a9b      	subs	r3, r3, r2
   107f4:	3a01      	subs	r2, #1
   107f6:	d308      	bcc.n	1080a <memmove+0x28>
   107f8:	5c99      	ldrb	r1, [r3, r2]
   107fa:	5481      	strb	r1, [r0, r2]
   107fc:	e7fa      	b.n	107f4 <memmove+0x12>
   107fe:	4293      	cmp	r3, r2
   10800:	d003      	beq.n	1080a <memmove+0x28>
   10802:	5ccc      	ldrb	r4, [r1, r3]
   10804:	54c4      	strb	r4, [r0, r3]
   10806:	3301      	adds	r3, #1
   10808:	e7f9      	b.n	107fe <memmove+0x1c>
   1080a:	bd10      	pop	{r4, pc}

0001080c <_free_r>:
   1080c:	b530      	push	{r4, r5, lr}
   1080e:	2900      	cmp	r1, #0
   10810:	d03e      	beq.n	10890 <_free_r+0x84>
   10812:	3904      	subs	r1, #4
   10814:	680b      	ldr	r3, [r1, #0]
   10816:	2b00      	cmp	r3, #0
   10818:	da00      	bge.n	1081c <_free_r+0x10>
   1081a:	18c9      	adds	r1, r1, r3
   1081c:	4a1d      	ldr	r2, [pc, #116]	; (10894 <_free_r+0x88>)
   1081e:	6813      	ldr	r3, [r2, #0]
   10820:	0014      	movs	r4, r2
   10822:	2b00      	cmp	r3, #0
   10824:	d102      	bne.n	1082c <_free_r+0x20>
   10826:	604b      	str	r3, [r1, #4]
   10828:	6011      	str	r1, [r2, #0]
   1082a:	e031      	b.n	10890 <_free_r+0x84>
   1082c:	428b      	cmp	r3, r1
   1082e:	d90d      	bls.n	1084c <_free_r+0x40>
   10830:	680a      	ldr	r2, [r1, #0]
   10832:	1888      	adds	r0, r1, r2
   10834:	4283      	cmp	r3, r0
   10836:	d103      	bne.n	10840 <_free_r+0x34>
   10838:	6818      	ldr	r0, [r3, #0]
   1083a:	685b      	ldr	r3, [r3, #4]
   1083c:	1882      	adds	r2, r0, r2
   1083e:	600a      	str	r2, [r1, #0]
   10840:	604b      	str	r3, [r1, #4]
   10842:	6021      	str	r1, [r4, #0]
   10844:	e024      	b.n	10890 <_free_r+0x84>
   10846:	428a      	cmp	r2, r1
   10848:	d803      	bhi.n	10852 <_free_r+0x46>
   1084a:	0013      	movs	r3, r2
   1084c:	685a      	ldr	r2, [r3, #4]
   1084e:	2a00      	cmp	r2, #0
   10850:	d1f9      	bne.n	10846 <_free_r+0x3a>
   10852:	681d      	ldr	r5, [r3, #0]
   10854:	195c      	adds	r4, r3, r5
   10856:	428c      	cmp	r4, r1
   10858:	d10b      	bne.n	10872 <_free_r+0x66>
   1085a:	6809      	ldr	r1, [r1, #0]
   1085c:	1869      	adds	r1, r5, r1
   1085e:	1858      	adds	r0, r3, r1
   10860:	6019      	str	r1, [r3, #0]
   10862:	4282      	cmp	r2, r0
   10864:	d114      	bne.n	10890 <_free_r+0x84>
   10866:	6810      	ldr	r0, [r2, #0]
   10868:	6852      	ldr	r2, [r2, #4]
   1086a:	1841      	adds	r1, r0, r1
   1086c:	6019      	str	r1, [r3, #0]
   1086e:	605a      	str	r2, [r3, #4]
   10870:	e00e      	b.n	10890 <_free_r+0x84>
   10872:	428c      	cmp	r4, r1
   10874:	d902      	bls.n	1087c <_free_r+0x70>
   10876:	230c      	movs	r3, #12
   10878:	6003      	str	r3, [r0, #0]
   1087a:	e009      	b.n	10890 <_free_r+0x84>
   1087c:	6808      	ldr	r0, [r1, #0]
   1087e:	180c      	adds	r4, r1, r0
   10880:	42a2      	cmp	r2, r4
   10882:	d103      	bne.n	1088c <_free_r+0x80>
   10884:	6814      	ldr	r4, [r2, #0]
   10886:	6852      	ldr	r2, [r2, #4]
   10888:	1820      	adds	r0, r4, r0
   1088a:	6008      	str	r0, [r1, #0]
   1088c:	604a      	str	r2, [r1, #4]
   1088e:	6059      	str	r1, [r3, #4]
   10890:	bd30      	pop	{r4, r5, pc}
   10892:	46c0      	nop			; (mov r8, r8)
   10894:	200045ac 	.word	0x200045ac

00010898 <_malloc_r>:
   10898:	2303      	movs	r3, #3
   1089a:	b570      	push	{r4, r5, r6, lr}
   1089c:	1ccd      	adds	r5, r1, #3
   1089e:	439d      	bics	r5, r3
   108a0:	3508      	adds	r5, #8
   108a2:	0006      	movs	r6, r0
   108a4:	2d0c      	cmp	r5, #12
   108a6:	d201      	bcs.n	108ac <_malloc_r+0x14>
   108a8:	250c      	movs	r5, #12
   108aa:	e005      	b.n	108b8 <_malloc_r+0x20>
   108ac:	2d00      	cmp	r5, #0
   108ae:	da03      	bge.n	108b8 <_malloc_r+0x20>
   108b0:	230c      	movs	r3, #12
   108b2:	2000      	movs	r0, #0
   108b4:	6033      	str	r3, [r6, #0]
   108b6:	e040      	b.n	1093a <_malloc_r+0xa2>
   108b8:	42a9      	cmp	r1, r5
   108ba:	d8f9      	bhi.n	108b0 <_malloc_r+0x18>
   108bc:	4b1f      	ldr	r3, [pc, #124]	; (1093c <_malloc_r+0xa4>)
   108be:	681c      	ldr	r4, [r3, #0]
   108c0:	001a      	movs	r2, r3
   108c2:	0021      	movs	r1, r4
   108c4:	2900      	cmp	r1, #0
   108c6:	d013      	beq.n	108f0 <_malloc_r+0x58>
   108c8:	680b      	ldr	r3, [r1, #0]
   108ca:	1b5b      	subs	r3, r3, r5
   108cc:	d40d      	bmi.n	108ea <_malloc_r+0x52>
   108ce:	2b0b      	cmp	r3, #11
   108d0:	d902      	bls.n	108d8 <_malloc_r+0x40>
   108d2:	600b      	str	r3, [r1, #0]
   108d4:	18cc      	adds	r4, r1, r3
   108d6:	e01e      	b.n	10916 <_malloc_r+0x7e>
   108d8:	428c      	cmp	r4, r1
   108da:	d102      	bne.n	108e2 <_malloc_r+0x4a>
   108dc:	6863      	ldr	r3, [r4, #4]
   108de:	6013      	str	r3, [r2, #0]
   108e0:	e01a      	b.n	10918 <_malloc_r+0x80>
   108e2:	684b      	ldr	r3, [r1, #4]
   108e4:	6063      	str	r3, [r4, #4]
   108e6:	000c      	movs	r4, r1
   108e8:	e016      	b.n	10918 <_malloc_r+0x80>
   108ea:	000c      	movs	r4, r1
   108ec:	6849      	ldr	r1, [r1, #4]
   108ee:	e7e9      	b.n	108c4 <_malloc_r+0x2c>
   108f0:	4c13      	ldr	r4, [pc, #76]	; (10940 <_malloc_r+0xa8>)
   108f2:	6823      	ldr	r3, [r4, #0]
   108f4:	2b00      	cmp	r3, #0
   108f6:	d103      	bne.n	10900 <_malloc_r+0x68>
   108f8:	0030      	movs	r0, r6
   108fa:	f000 f9df 	bl	10cbc <_sbrk_r>
   108fe:	6020      	str	r0, [r4, #0]
   10900:	0029      	movs	r1, r5
   10902:	0030      	movs	r0, r6
   10904:	f000 f9da 	bl	10cbc <_sbrk_r>
   10908:	1c43      	adds	r3, r0, #1
   1090a:	d0d1      	beq.n	108b0 <_malloc_r+0x18>
   1090c:	2303      	movs	r3, #3
   1090e:	1cc4      	adds	r4, r0, #3
   10910:	439c      	bics	r4, r3
   10912:	42a0      	cmp	r0, r4
   10914:	d10a      	bne.n	1092c <_malloc_r+0x94>
   10916:	6025      	str	r5, [r4, #0]
   10918:	0020      	movs	r0, r4
   1091a:	2207      	movs	r2, #7
   1091c:	300b      	adds	r0, #11
   1091e:	1d23      	adds	r3, r4, #4
   10920:	4390      	bics	r0, r2
   10922:	1ac3      	subs	r3, r0, r3
   10924:	d009      	beq.n	1093a <_malloc_r+0xa2>
   10926:	425a      	negs	r2, r3
   10928:	50e2      	str	r2, [r4, r3]
   1092a:	e006      	b.n	1093a <_malloc_r+0xa2>
   1092c:	1a21      	subs	r1, r4, r0
   1092e:	0030      	movs	r0, r6
   10930:	f000 f9c4 	bl	10cbc <_sbrk_r>
   10934:	1c43      	adds	r3, r0, #1
   10936:	d1ee      	bne.n	10916 <_malloc_r+0x7e>
   10938:	e7ba      	b.n	108b0 <_malloc_r+0x18>
   1093a:	bd70      	pop	{r4, r5, r6, pc}
   1093c:	200045ac 	.word	0x200045ac
   10940:	200045a8 	.word	0x200045a8

00010944 <_realloc_r>:
   10944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10946:	0006      	movs	r6, r0
   10948:	000c      	movs	r4, r1
   1094a:	0015      	movs	r5, r2
   1094c:	2900      	cmp	r1, #0
   1094e:	d104      	bne.n	1095a <_realloc_r+0x16>
   10950:	0011      	movs	r1, r2
   10952:	f7ff ffa1 	bl	10898 <_malloc_r>
   10956:	0004      	movs	r4, r0
   10958:	e018      	b.n	1098c <_realloc_r+0x48>
   1095a:	2a00      	cmp	r2, #0
   1095c:	d103      	bne.n	10966 <_realloc_r+0x22>
   1095e:	f7ff ff55 	bl	1080c <_free_r>
   10962:	002c      	movs	r4, r5
   10964:	e012      	b.n	1098c <_realloc_r+0x48>
   10966:	f000 faaf 	bl	10ec8 <_malloc_usable_size_r>
   1096a:	4285      	cmp	r5, r0
   1096c:	d90e      	bls.n	1098c <_realloc_r+0x48>
   1096e:	0029      	movs	r1, r5
   10970:	0030      	movs	r0, r6
   10972:	f7ff ff91 	bl	10898 <_malloc_r>
   10976:	1e07      	subs	r7, r0, #0
   10978:	d007      	beq.n	1098a <_realloc_r+0x46>
   1097a:	0021      	movs	r1, r4
   1097c:	002a      	movs	r2, r5
   1097e:	f7fe fef3 	bl	f768 <memcpy>
   10982:	0021      	movs	r1, r4
   10984:	0030      	movs	r0, r6
   10986:	f7ff ff41 	bl	1080c <_free_r>
   1098a:	003c      	movs	r4, r7
   1098c:	0020      	movs	r0, r4
   1098e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010990 <__ssputs_r>:
   10990:	b5f0      	push	{r4, r5, r6, r7, lr}
   10992:	688e      	ldr	r6, [r1, #8]
   10994:	b085      	sub	sp, #20
   10996:	0007      	movs	r7, r0
   10998:	000c      	movs	r4, r1
   1099a:	9203      	str	r2, [sp, #12]
   1099c:	9301      	str	r3, [sp, #4]
   1099e:	429e      	cmp	r6, r3
   109a0:	d843      	bhi.n	10a2a <__ssputs_r+0x9a>
   109a2:	2390      	movs	r3, #144	; 0x90
   109a4:	898a      	ldrh	r2, [r1, #12]
   109a6:	00db      	lsls	r3, r3, #3
   109a8:	421a      	tst	r2, r3
   109aa:	d03e      	beq.n	10a2a <__ssputs_r+0x9a>
   109ac:	2503      	movs	r5, #3
   109ae:	6909      	ldr	r1, [r1, #16]
   109b0:	6823      	ldr	r3, [r4, #0]
   109b2:	9801      	ldr	r0, [sp, #4]
   109b4:	1a5b      	subs	r3, r3, r1
   109b6:	9302      	str	r3, [sp, #8]
   109b8:	6963      	ldr	r3, [r4, #20]
   109ba:	435d      	muls	r5, r3
   109bc:	0feb      	lsrs	r3, r5, #31
   109be:	195d      	adds	r5, r3, r5
   109c0:	9b02      	ldr	r3, [sp, #8]
   109c2:	106d      	asrs	r5, r5, #1
   109c4:	3301      	adds	r3, #1
   109c6:	181b      	adds	r3, r3, r0
   109c8:	42ab      	cmp	r3, r5
   109ca:	d900      	bls.n	109ce <__ssputs_r+0x3e>
   109cc:	001d      	movs	r5, r3
   109ce:	0553      	lsls	r3, r2, #21
   109d0:	d510      	bpl.n	109f4 <__ssputs_r+0x64>
   109d2:	0029      	movs	r1, r5
   109d4:	0038      	movs	r0, r7
   109d6:	f7ff ff5f 	bl	10898 <_malloc_r>
   109da:	1e06      	subs	r6, r0, #0
   109dc:	d014      	beq.n	10a08 <__ssputs_r+0x78>
   109de:	9a02      	ldr	r2, [sp, #8]
   109e0:	6921      	ldr	r1, [r4, #16]
   109e2:	f7fe fec1 	bl	f768 <memcpy>
   109e6:	89a2      	ldrh	r2, [r4, #12]
   109e8:	4b19      	ldr	r3, [pc, #100]	; (10a50 <__ssputs_r+0xc0>)
   109ea:	4013      	ands	r3, r2
   109ec:	2280      	movs	r2, #128	; 0x80
   109ee:	4313      	orrs	r3, r2
   109f0:	81a3      	strh	r3, [r4, #12]
   109f2:	e012      	b.n	10a1a <__ssputs_r+0x8a>
   109f4:	002a      	movs	r2, r5
   109f6:	0038      	movs	r0, r7
   109f8:	f7ff ffa4 	bl	10944 <_realloc_r>
   109fc:	1e06      	subs	r6, r0, #0
   109fe:	d10c      	bne.n	10a1a <__ssputs_r+0x8a>
   10a00:	6921      	ldr	r1, [r4, #16]
   10a02:	0038      	movs	r0, r7
   10a04:	f7ff ff02 	bl	1080c <_free_r>
   10a08:	230c      	movs	r3, #12
   10a0a:	2240      	movs	r2, #64	; 0x40
   10a0c:	2001      	movs	r0, #1
   10a0e:	603b      	str	r3, [r7, #0]
   10a10:	89a3      	ldrh	r3, [r4, #12]
   10a12:	4240      	negs	r0, r0
   10a14:	4313      	orrs	r3, r2
   10a16:	81a3      	strh	r3, [r4, #12]
   10a18:	e017      	b.n	10a4a <__ssputs_r+0xba>
   10a1a:	9b02      	ldr	r3, [sp, #8]
   10a1c:	6126      	str	r6, [r4, #16]
   10a1e:	18f6      	adds	r6, r6, r3
   10a20:	6026      	str	r6, [r4, #0]
   10a22:	6165      	str	r5, [r4, #20]
   10a24:	9e01      	ldr	r6, [sp, #4]
   10a26:	1aed      	subs	r5, r5, r3
   10a28:	60a5      	str	r5, [r4, #8]
   10a2a:	9b01      	ldr	r3, [sp, #4]
   10a2c:	42b3      	cmp	r3, r6
   10a2e:	d200      	bcs.n	10a32 <__ssputs_r+0xa2>
   10a30:	001e      	movs	r6, r3
   10a32:	0032      	movs	r2, r6
   10a34:	9903      	ldr	r1, [sp, #12]
   10a36:	6820      	ldr	r0, [r4, #0]
   10a38:	f7ff fed3 	bl	107e2 <memmove>
   10a3c:	2000      	movs	r0, #0
   10a3e:	68a3      	ldr	r3, [r4, #8]
   10a40:	1b9b      	subs	r3, r3, r6
   10a42:	60a3      	str	r3, [r4, #8]
   10a44:	6823      	ldr	r3, [r4, #0]
   10a46:	199e      	adds	r6, r3, r6
   10a48:	6026      	str	r6, [r4, #0]
   10a4a:	b005      	add	sp, #20
   10a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10a4e:	46c0      	nop			; (mov r8, r8)
   10a50:	fffffb7f 	.word	0xfffffb7f

00010a54 <_svfiprintf_r>:
   10a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a56:	b09f      	sub	sp, #124	; 0x7c
   10a58:	9002      	str	r0, [sp, #8]
   10a5a:	9305      	str	r3, [sp, #20]
   10a5c:	898b      	ldrh	r3, [r1, #12]
   10a5e:	000f      	movs	r7, r1
   10a60:	0016      	movs	r6, r2
   10a62:	061b      	lsls	r3, r3, #24
   10a64:	d510      	bpl.n	10a88 <_svfiprintf_r+0x34>
   10a66:	690b      	ldr	r3, [r1, #16]
   10a68:	2b00      	cmp	r3, #0
   10a6a:	d10d      	bne.n	10a88 <_svfiprintf_r+0x34>
   10a6c:	2140      	movs	r1, #64	; 0x40
   10a6e:	f7ff ff13 	bl	10898 <_malloc_r>
   10a72:	6038      	str	r0, [r7, #0]
   10a74:	6138      	str	r0, [r7, #16]
   10a76:	2800      	cmp	r0, #0
   10a78:	d104      	bne.n	10a84 <_svfiprintf_r+0x30>
   10a7a:	230c      	movs	r3, #12
   10a7c:	9a02      	ldr	r2, [sp, #8]
   10a7e:	3801      	subs	r0, #1
   10a80:	6013      	str	r3, [r2, #0]
   10a82:	e0d8      	b.n	10c36 <_svfiprintf_r+0x1e2>
   10a84:	2340      	movs	r3, #64	; 0x40
   10a86:	617b      	str	r3, [r7, #20]
   10a88:	2300      	movs	r3, #0
   10a8a:	ad06      	add	r5, sp, #24
   10a8c:	616b      	str	r3, [r5, #20]
   10a8e:	3320      	adds	r3, #32
   10a90:	766b      	strb	r3, [r5, #25]
   10a92:	3310      	adds	r3, #16
   10a94:	76ab      	strb	r3, [r5, #26]
   10a96:	0034      	movs	r4, r6
   10a98:	7823      	ldrb	r3, [r4, #0]
   10a9a:	2b00      	cmp	r3, #0
   10a9c:	d103      	bne.n	10aa6 <_svfiprintf_r+0x52>
   10a9e:	1ba3      	subs	r3, r4, r6
   10aa0:	9304      	str	r3, [sp, #16]
   10aa2:	d012      	beq.n	10aca <_svfiprintf_r+0x76>
   10aa4:	e003      	b.n	10aae <_svfiprintf_r+0x5a>
   10aa6:	2b25      	cmp	r3, #37	; 0x25
   10aa8:	d0f9      	beq.n	10a9e <_svfiprintf_r+0x4a>
   10aaa:	3401      	adds	r4, #1
   10aac:	e7f4      	b.n	10a98 <_svfiprintf_r+0x44>
   10aae:	1ba3      	subs	r3, r4, r6
   10ab0:	0032      	movs	r2, r6
   10ab2:	0039      	movs	r1, r7
   10ab4:	9802      	ldr	r0, [sp, #8]
   10ab6:	f7ff ff6b 	bl	10990 <__ssputs_r>
   10aba:	1c43      	adds	r3, r0, #1
   10abc:	d100      	bne.n	10ac0 <_svfiprintf_r+0x6c>
   10abe:	e0b4      	b.n	10c2a <_svfiprintf_r+0x1d6>
   10ac0:	696a      	ldr	r2, [r5, #20]
   10ac2:	9b04      	ldr	r3, [sp, #16]
   10ac4:	4694      	mov	ip, r2
   10ac6:	4463      	add	r3, ip
   10ac8:	616b      	str	r3, [r5, #20]
   10aca:	7823      	ldrb	r3, [r4, #0]
   10acc:	2b00      	cmp	r3, #0
   10ace:	d100      	bne.n	10ad2 <_svfiprintf_r+0x7e>
   10ad0:	e0ab      	b.n	10c2a <_svfiprintf_r+0x1d6>
   10ad2:	2201      	movs	r2, #1
   10ad4:	2300      	movs	r3, #0
   10ad6:	4252      	negs	r2, r2
   10ad8:	606a      	str	r2, [r5, #4]
   10ada:	a902      	add	r1, sp, #8
   10adc:	3254      	adds	r2, #84	; 0x54
   10ade:	1852      	adds	r2, r2, r1
   10ae0:	3401      	adds	r4, #1
   10ae2:	602b      	str	r3, [r5, #0]
   10ae4:	60eb      	str	r3, [r5, #12]
   10ae6:	60ab      	str	r3, [r5, #8]
   10ae8:	7013      	strb	r3, [r2, #0]
   10aea:	65ab      	str	r3, [r5, #88]	; 0x58
   10aec:	4e53      	ldr	r6, [pc, #332]	; (10c3c <_svfiprintf_r+0x1e8>)
   10aee:	7821      	ldrb	r1, [r4, #0]
   10af0:	2205      	movs	r2, #5
   10af2:	0030      	movs	r0, r6
   10af4:	f7ff fe6a 	bl	107cc <memchr>
   10af8:	2800      	cmp	r0, #0
   10afa:	d007      	beq.n	10b0c <_svfiprintf_r+0xb8>
   10afc:	2301      	movs	r3, #1
   10afe:	1b80      	subs	r0, r0, r6
   10b00:	4083      	lsls	r3, r0
   10b02:	682a      	ldr	r2, [r5, #0]
   10b04:	3401      	adds	r4, #1
   10b06:	4313      	orrs	r3, r2
   10b08:	602b      	str	r3, [r5, #0]
   10b0a:	e7ef      	b.n	10aec <_svfiprintf_r+0x98>
   10b0c:	682b      	ldr	r3, [r5, #0]
   10b0e:	06da      	lsls	r2, r3, #27
   10b10:	d504      	bpl.n	10b1c <_svfiprintf_r+0xc8>
   10b12:	2253      	movs	r2, #83	; 0x53
   10b14:	2120      	movs	r1, #32
   10b16:	a802      	add	r0, sp, #8
   10b18:	1812      	adds	r2, r2, r0
   10b1a:	7011      	strb	r1, [r2, #0]
   10b1c:	071a      	lsls	r2, r3, #28
   10b1e:	d504      	bpl.n	10b2a <_svfiprintf_r+0xd6>
   10b20:	2253      	movs	r2, #83	; 0x53
   10b22:	212b      	movs	r1, #43	; 0x2b
   10b24:	a802      	add	r0, sp, #8
   10b26:	1812      	adds	r2, r2, r0
   10b28:	7011      	strb	r1, [r2, #0]
   10b2a:	7822      	ldrb	r2, [r4, #0]
   10b2c:	2a2a      	cmp	r2, #42	; 0x2a
   10b2e:	d003      	beq.n	10b38 <_svfiprintf_r+0xe4>
   10b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10b32:	2000      	movs	r0, #0
   10b34:	210a      	movs	r1, #10
   10b36:	e00e      	b.n	10b56 <_svfiprintf_r+0x102>
   10b38:	9a05      	ldr	r2, [sp, #20]
   10b3a:	1d11      	adds	r1, r2, #4
   10b3c:	6812      	ldr	r2, [r2, #0]
   10b3e:	9105      	str	r1, [sp, #20]
   10b40:	2a00      	cmp	r2, #0
   10b42:	db01      	blt.n	10b48 <_svfiprintf_r+0xf4>
   10b44:	9209      	str	r2, [sp, #36]	; 0x24
   10b46:	e004      	b.n	10b52 <_svfiprintf_r+0xfe>
   10b48:	4252      	negs	r2, r2
   10b4a:	60ea      	str	r2, [r5, #12]
   10b4c:	2202      	movs	r2, #2
   10b4e:	4313      	orrs	r3, r2
   10b50:	602b      	str	r3, [r5, #0]
   10b52:	3401      	adds	r4, #1
   10b54:	e00b      	b.n	10b6e <_svfiprintf_r+0x11a>
   10b56:	7822      	ldrb	r2, [r4, #0]
   10b58:	3a30      	subs	r2, #48	; 0x30
   10b5a:	2a09      	cmp	r2, #9
   10b5c:	d804      	bhi.n	10b68 <_svfiprintf_r+0x114>
   10b5e:	434b      	muls	r3, r1
   10b60:	3401      	adds	r4, #1
   10b62:	189b      	adds	r3, r3, r2
   10b64:	2001      	movs	r0, #1
   10b66:	e7f6      	b.n	10b56 <_svfiprintf_r+0x102>
   10b68:	2800      	cmp	r0, #0
   10b6a:	d000      	beq.n	10b6e <_svfiprintf_r+0x11a>
   10b6c:	9309      	str	r3, [sp, #36]	; 0x24
   10b6e:	7823      	ldrb	r3, [r4, #0]
   10b70:	2b2e      	cmp	r3, #46	; 0x2e
   10b72:	d11e      	bne.n	10bb2 <_svfiprintf_r+0x15e>
   10b74:	7863      	ldrb	r3, [r4, #1]
   10b76:	2b2a      	cmp	r3, #42	; 0x2a
   10b78:	d10a      	bne.n	10b90 <_svfiprintf_r+0x13c>
   10b7a:	9b05      	ldr	r3, [sp, #20]
   10b7c:	3402      	adds	r4, #2
   10b7e:	1d1a      	adds	r2, r3, #4
   10b80:	681b      	ldr	r3, [r3, #0]
   10b82:	9205      	str	r2, [sp, #20]
   10b84:	2b00      	cmp	r3, #0
   10b86:	da01      	bge.n	10b8c <_svfiprintf_r+0x138>
   10b88:	2301      	movs	r3, #1
   10b8a:	425b      	negs	r3, r3
   10b8c:	9307      	str	r3, [sp, #28]
   10b8e:	e010      	b.n	10bb2 <_svfiprintf_r+0x15e>
   10b90:	2300      	movs	r3, #0
   10b92:	200a      	movs	r0, #10
   10b94:	001a      	movs	r2, r3
   10b96:	3401      	adds	r4, #1
   10b98:	606b      	str	r3, [r5, #4]
   10b9a:	7821      	ldrb	r1, [r4, #0]
   10b9c:	3930      	subs	r1, #48	; 0x30
   10b9e:	2909      	cmp	r1, #9
   10ba0:	d804      	bhi.n	10bac <_svfiprintf_r+0x158>
   10ba2:	4342      	muls	r2, r0
   10ba4:	3401      	adds	r4, #1
   10ba6:	1852      	adds	r2, r2, r1
   10ba8:	2301      	movs	r3, #1
   10baa:	e7f6      	b.n	10b9a <_svfiprintf_r+0x146>
   10bac:	2b00      	cmp	r3, #0
   10bae:	d000      	beq.n	10bb2 <_svfiprintf_r+0x15e>
   10bb0:	9207      	str	r2, [sp, #28]
   10bb2:	4e23      	ldr	r6, [pc, #140]	; (10c40 <_svfiprintf_r+0x1ec>)
   10bb4:	7821      	ldrb	r1, [r4, #0]
   10bb6:	2203      	movs	r2, #3
   10bb8:	0030      	movs	r0, r6
   10bba:	f7ff fe07 	bl	107cc <memchr>
   10bbe:	2800      	cmp	r0, #0
   10bc0:	d006      	beq.n	10bd0 <_svfiprintf_r+0x17c>
   10bc2:	2340      	movs	r3, #64	; 0x40
   10bc4:	1b80      	subs	r0, r0, r6
   10bc6:	4083      	lsls	r3, r0
   10bc8:	682a      	ldr	r2, [r5, #0]
   10bca:	3401      	adds	r4, #1
   10bcc:	4313      	orrs	r3, r2
   10bce:	602b      	str	r3, [r5, #0]
   10bd0:	7821      	ldrb	r1, [r4, #0]
   10bd2:	2206      	movs	r2, #6
   10bd4:	481b      	ldr	r0, [pc, #108]	; (10c44 <_svfiprintf_r+0x1f0>)
   10bd6:	1c66      	adds	r6, r4, #1
   10bd8:	7629      	strb	r1, [r5, #24]
   10bda:	f7ff fdf7 	bl	107cc <memchr>
   10bde:	2800      	cmp	r0, #0
   10be0:	d012      	beq.n	10c08 <_svfiprintf_r+0x1b4>
   10be2:	4b19      	ldr	r3, [pc, #100]	; (10c48 <_svfiprintf_r+0x1f4>)
   10be4:	2b00      	cmp	r3, #0
   10be6:	d106      	bne.n	10bf6 <_svfiprintf_r+0x1a2>
   10be8:	2207      	movs	r2, #7
   10bea:	9b05      	ldr	r3, [sp, #20]
   10bec:	3307      	adds	r3, #7
   10bee:	4393      	bics	r3, r2
   10bf0:	3308      	adds	r3, #8
   10bf2:	9305      	str	r3, [sp, #20]
   10bf4:	e014      	b.n	10c20 <_svfiprintf_r+0x1cc>
   10bf6:	ab05      	add	r3, sp, #20
   10bf8:	9300      	str	r3, [sp, #0]
   10bfa:	003a      	movs	r2, r7
   10bfc:	4b13      	ldr	r3, [pc, #76]	; (10c4c <_svfiprintf_r+0x1f8>)
   10bfe:	0029      	movs	r1, r5
   10c00:	9802      	ldr	r0, [sp, #8]
   10c02:	e000      	b.n	10c06 <_svfiprintf_r+0x1b2>
   10c04:	bf00      	nop
   10c06:	e007      	b.n	10c18 <_svfiprintf_r+0x1c4>
   10c08:	ab05      	add	r3, sp, #20
   10c0a:	9300      	str	r3, [sp, #0]
   10c0c:	003a      	movs	r2, r7
   10c0e:	4b0f      	ldr	r3, [pc, #60]	; (10c4c <_svfiprintf_r+0x1f8>)
   10c10:	0029      	movs	r1, r5
   10c12:	9802      	ldr	r0, [sp, #8]
   10c14:	f7fe ff6a 	bl	faec <_printf_i>
   10c18:	9003      	str	r0, [sp, #12]
   10c1a:	9b03      	ldr	r3, [sp, #12]
   10c1c:	3301      	adds	r3, #1
   10c1e:	d004      	beq.n	10c2a <_svfiprintf_r+0x1d6>
   10c20:	696b      	ldr	r3, [r5, #20]
   10c22:	9a03      	ldr	r2, [sp, #12]
   10c24:	189b      	adds	r3, r3, r2
   10c26:	616b      	str	r3, [r5, #20]
   10c28:	e735      	b.n	10a96 <_svfiprintf_r+0x42>
   10c2a:	89bb      	ldrh	r3, [r7, #12]
   10c2c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10c2e:	065b      	lsls	r3, r3, #25
   10c30:	d501      	bpl.n	10c36 <_svfiprintf_r+0x1e2>
   10c32:	2001      	movs	r0, #1
   10c34:	4240      	negs	r0, r0
   10c36:	b01f      	add	sp, #124	; 0x7c
   10c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c3a:	46c0      	nop			; (mov r8, r8)
   10c3c:	000126bc 	.word	0x000126bc
   10c40:	000126c2 	.word	0x000126c2
   10c44:	000126c6 	.word	0x000126c6
   10c48:	00000000 	.word	0x00000000
   10c4c:	00010991 	.word	0x00010991

00010c50 <_putc_r>:
   10c50:	b570      	push	{r4, r5, r6, lr}
   10c52:	0006      	movs	r6, r0
   10c54:	000d      	movs	r5, r1
   10c56:	0014      	movs	r4, r2
   10c58:	2800      	cmp	r0, #0
   10c5a:	d004      	beq.n	10c66 <_putc_r+0x16>
   10c5c:	6983      	ldr	r3, [r0, #24]
   10c5e:	2b00      	cmp	r3, #0
   10c60:	d101      	bne.n	10c66 <_putc_r+0x16>
   10c62:	f7ff fcb1 	bl	105c8 <__sinit>
   10c66:	4b12      	ldr	r3, [pc, #72]	; (10cb0 <_putc_r+0x60>)
   10c68:	429c      	cmp	r4, r3
   10c6a:	d101      	bne.n	10c70 <_putc_r+0x20>
   10c6c:	6874      	ldr	r4, [r6, #4]
   10c6e:	e008      	b.n	10c82 <_putc_r+0x32>
   10c70:	4b10      	ldr	r3, [pc, #64]	; (10cb4 <_putc_r+0x64>)
   10c72:	429c      	cmp	r4, r3
   10c74:	d101      	bne.n	10c7a <_putc_r+0x2a>
   10c76:	68b4      	ldr	r4, [r6, #8]
   10c78:	e003      	b.n	10c82 <_putc_r+0x32>
   10c7a:	4b0f      	ldr	r3, [pc, #60]	; (10cb8 <_putc_r+0x68>)
   10c7c:	429c      	cmp	r4, r3
   10c7e:	d100      	bne.n	10c82 <_putc_r+0x32>
   10c80:	68f4      	ldr	r4, [r6, #12]
   10c82:	68a3      	ldr	r3, [r4, #8]
   10c84:	3b01      	subs	r3, #1
   10c86:	60a3      	str	r3, [r4, #8]
   10c88:	2b00      	cmp	r3, #0
   10c8a:	da05      	bge.n	10c98 <_putc_r+0x48>
   10c8c:	69a2      	ldr	r2, [r4, #24]
   10c8e:	4293      	cmp	r3, r2
   10c90:	db08      	blt.n	10ca4 <_putc_r+0x54>
   10c92:	b2eb      	uxtb	r3, r5
   10c94:	2b0a      	cmp	r3, #10
   10c96:	d005      	beq.n	10ca4 <_putc_r+0x54>
   10c98:	6823      	ldr	r3, [r4, #0]
   10c9a:	b2e8      	uxtb	r0, r5
   10c9c:	1c5a      	adds	r2, r3, #1
   10c9e:	6022      	str	r2, [r4, #0]
   10ca0:	701d      	strb	r5, [r3, #0]
   10ca2:	e004      	b.n	10cae <_putc_r+0x5e>
   10ca4:	0022      	movs	r2, r4
   10ca6:	0029      	movs	r1, r5
   10ca8:	0030      	movs	r0, r6
   10caa:	f7ff fac3 	bl	10234 <__swbuf_r>
   10cae:	bd70      	pop	{r4, r5, r6, pc}
   10cb0:	000127f0 	.word	0x000127f0
   10cb4:	00012810 	.word	0x00012810
   10cb8:	00012830 	.word	0x00012830

00010cbc <_sbrk_r>:
   10cbc:	2300      	movs	r3, #0
   10cbe:	b570      	push	{r4, r5, r6, lr}
   10cc0:	4c06      	ldr	r4, [pc, #24]	; (10cdc <_sbrk_r+0x20>)
   10cc2:	0005      	movs	r5, r0
   10cc4:	0008      	movs	r0, r1
   10cc6:	6023      	str	r3, [r4, #0]
   10cc8:	f7f9 ff7e 	bl	abc8 <_sbrk>
   10ccc:	1c43      	adds	r3, r0, #1
   10cce:	d103      	bne.n	10cd8 <_sbrk_r+0x1c>
   10cd0:	6823      	ldr	r3, [r4, #0]
   10cd2:	2b00      	cmp	r3, #0
   10cd4:	d000      	beq.n	10cd8 <_sbrk_r+0x1c>
   10cd6:	602b      	str	r3, [r5, #0]
   10cd8:	bd70      	pop	{r4, r5, r6, pc}
   10cda:	46c0      	nop			; (mov r8, r8)
   10cdc:	200047d4 	.word	0x200047d4

00010ce0 <_raise_r>:
   10ce0:	b570      	push	{r4, r5, r6, lr}
   10ce2:	0004      	movs	r4, r0
   10ce4:	1e0d      	subs	r5, r1, #0
   10ce6:	2d1f      	cmp	r5, #31
   10ce8:	d904      	bls.n	10cf4 <_raise_r+0x14>
   10cea:	2316      	movs	r3, #22
   10cec:	6003      	str	r3, [r0, #0]
   10cee:	2001      	movs	r0, #1
   10cf0:	4240      	negs	r0, r0
   10cf2:	e01e      	b.n	10d32 <_raise_r+0x52>
   10cf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   10cf6:	2a00      	cmp	r2, #0
   10cf8:	d004      	beq.n	10d04 <_raise_r+0x24>
   10cfa:	008b      	lsls	r3, r1, #2
   10cfc:	18d2      	adds	r2, r2, r3
   10cfe:	6813      	ldr	r3, [r2, #0]
   10d00:	2b00      	cmp	r3, #0
   10d02:	d108      	bne.n	10d16 <_raise_r+0x36>
   10d04:	0020      	movs	r0, r4
   10d06:	f000 f831 	bl	10d6c <_getpid_r>
   10d0a:	002a      	movs	r2, r5
   10d0c:	0001      	movs	r1, r0
   10d0e:	0020      	movs	r0, r4
   10d10:	f000 f81a 	bl	10d48 <_kill_r>
   10d14:	e00d      	b.n	10d32 <_raise_r+0x52>
   10d16:	2000      	movs	r0, #0
   10d18:	2b01      	cmp	r3, #1
   10d1a:	d00a      	beq.n	10d32 <_raise_r+0x52>
   10d1c:	1c59      	adds	r1, r3, #1
   10d1e:	d103      	bne.n	10d28 <_raise_r+0x48>
   10d20:	3317      	adds	r3, #23
   10d22:	6023      	str	r3, [r4, #0]
   10d24:	3001      	adds	r0, #1
   10d26:	e004      	b.n	10d32 <_raise_r+0x52>
   10d28:	2400      	movs	r4, #0
   10d2a:	0028      	movs	r0, r5
   10d2c:	6014      	str	r4, [r2, #0]
   10d2e:	4798      	blx	r3
   10d30:	0020      	movs	r0, r4
   10d32:	bd70      	pop	{r4, r5, r6, pc}

00010d34 <raise>:
   10d34:	b510      	push	{r4, lr}
   10d36:	4b03      	ldr	r3, [pc, #12]	; (10d44 <raise+0x10>)
   10d38:	0001      	movs	r1, r0
   10d3a:	6818      	ldr	r0, [r3, #0]
   10d3c:	f7ff ffd0 	bl	10ce0 <_raise_r>
   10d40:	bd10      	pop	{r4, pc}
   10d42:	46c0      	nop			; (mov r8, r8)
   10d44:	20000094 	.word	0x20000094

00010d48 <_kill_r>:
   10d48:	2300      	movs	r3, #0
   10d4a:	b570      	push	{r4, r5, r6, lr}
   10d4c:	4c06      	ldr	r4, [pc, #24]	; (10d68 <_kill_r+0x20>)
   10d4e:	0005      	movs	r5, r0
   10d50:	0008      	movs	r0, r1
   10d52:	0011      	movs	r1, r2
   10d54:	6023      	str	r3, [r4, #0]
   10d56:	f7f9 ff8d 	bl	ac74 <_kill>
   10d5a:	1c43      	adds	r3, r0, #1
   10d5c:	d103      	bne.n	10d66 <_kill_r+0x1e>
   10d5e:	6823      	ldr	r3, [r4, #0]
   10d60:	2b00      	cmp	r3, #0
   10d62:	d000      	beq.n	10d66 <_kill_r+0x1e>
   10d64:	602b      	str	r3, [r5, #0]
   10d66:	bd70      	pop	{r4, r5, r6, pc}
   10d68:	200047d4 	.word	0x200047d4

00010d6c <_getpid_r>:
   10d6c:	b510      	push	{r4, lr}
   10d6e:	f7f9 ff8b 	bl	ac88 <_getpid>
   10d72:	bd10      	pop	{r4, pc}

00010d74 <__sread>:
   10d74:	b570      	push	{r4, r5, r6, lr}
   10d76:	000c      	movs	r4, r1
   10d78:	250e      	movs	r5, #14
   10d7a:	5f49      	ldrsh	r1, [r1, r5]
   10d7c:	f000 f8b0 	bl	10ee0 <_read_r>
   10d80:	2800      	cmp	r0, #0
   10d82:	db03      	blt.n	10d8c <__sread+0x18>
   10d84:	6d63      	ldr	r3, [r4, #84]	; 0x54
   10d86:	181b      	adds	r3, r3, r0
   10d88:	6563      	str	r3, [r4, #84]	; 0x54
   10d8a:	e003      	b.n	10d94 <__sread+0x20>
   10d8c:	89a2      	ldrh	r2, [r4, #12]
   10d8e:	4b02      	ldr	r3, [pc, #8]	; (10d98 <__sread+0x24>)
   10d90:	4013      	ands	r3, r2
   10d92:	81a3      	strh	r3, [r4, #12]
   10d94:	bd70      	pop	{r4, r5, r6, pc}
   10d96:	46c0      	nop			; (mov r8, r8)
   10d98:	ffffefff 	.word	0xffffefff

00010d9c <__swrite>:
   10d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d9e:	001f      	movs	r7, r3
   10da0:	898b      	ldrh	r3, [r1, #12]
   10da2:	0005      	movs	r5, r0
   10da4:	000c      	movs	r4, r1
   10da6:	0016      	movs	r6, r2
   10da8:	05db      	lsls	r3, r3, #23
   10daa:	d505      	bpl.n	10db8 <__swrite+0x1c>
   10dac:	230e      	movs	r3, #14
   10dae:	5ec9      	ldrsh	r1, [r1, r3]
   10db0:	2200      	movs	r2, #0
   10db2:	2302      	movs	r3, #2
   10db4:	f000 f874 	bl	10ea0 <_lseek_r>
   10db8:	89a2      	ldrh	r2, [r4, #12]
   10dba:	4b05      	ldr	r3, [pc, #20]	; (10dd0 <__swrite+0x34>)
   10dbc:	0028      	movs	r0, r5
   10dbe:	4013      	ands	r3, r2
   10dc0:	81a3      	strh	r3, [r4, #12]
   10dc2:	0032      	movs	r2, r6
   10dc4:	230e      	movs	r3, #14
   10dc6:	5ee1      	ldrsh	r1, [r4, r3]
   10dc8:	003b      	movs	r3, r7
   10dca:	f000 f81f 	bl	10e0c <_write_r>
   10dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10dd0:	ffffefff 	.word	0xffffefff

00010dd4 <__sseek>:
   10dd4:	b570      	push	{r4, r5, r6, lr}
   10dd6:	000c      	movs	r4, r1
   10dd8:	250e      	movs	r5, #14
   10dda:	5f49      	ldrsh	r1, [r1, r5]
   10ddc:	f000 f860 	bl	10ea0 <_lseek_r>
   10de0:	89a3      	ldrh	r3, [r4, #12]
   10de2:	1c42      	adds	r2, r0, #1
   10de4:	d103      	bne.n	10dee <__sseek+0x1a>
   10de6:	4a05      	ldr	r2, [pc, #20]	; (10dfc <__sseek+0x28>)
   10de8:	4013      	ands	r3, r2
   10dea:	81a3      	strh	r3, [r4, #12]
   10dec:	e004      	b.n	10df8 <__sseek+0x24>
   10dee:	2280      	movs	r2, #128	; 0x80
   10df0:	0152      	lsls	r2, r2, #5
   10df2:	4313      	orrs	r3, r2
   10df4:	81a3      	strh	r3, [r4, #12]
   10df6:	6560      	str	r0, [r4, #84]	; 0x54
   10df8:	bd70      	pop	{r4, r5, r6, pc}
   10dfa:	46c0      	nop			; (mov r8, r8)
   10dfc:	ffffefff 	.word	0xffffefff

00010e00 <__sclose>:
   10e00:	b510      	push	{r4, lr}
   10e02:	230e      	movs	r3, #14
   10e04:	5ec9      	ldrsh	r1, [r1, r3]
   10e06:	f000 f815 	bl	10e34 <_close_r>
   10e0a:	bd10      	pop	{r4, pc}

00010e0c <_write_r>:
   10e0c:	b570      	push	{r4, r5, r6, lr}
   10e0e:	0005      	movs	r5, r0
   10e10:	0008      	movs	r0, r1
   10e12:	0011      	movs	r1, r2
   10e14:	2200      	movs	r2, #0
   10e16:	4c06      	ldr	r4, [pc, #24]	; (10e30 <_write_r+0x24>)
   10e18:	6022      	str	r2, [r4, #0]
   10e1a:	001a      	movs	r2, r3
   10e1c:	f7f9 fe9e 	bl	ab5c <_write>
   10e20:	1c43      	adds	r3, r0, #1
   10e22:	d103      	bne.n	10e2c <_write_r+0x20>
   10e24:	6823      	ldr	r3, [r4, #0]
   10e26:	2b00      	cmp	r3, #0
   10e28:	d000      	beq.n	10e2c <_write_r+0x20>
   10e2a:	602b      	str	r3, [r5, #0]
   10e2c:	bd70      	pop	{r4, r5, r6, pc}
   10e2e:	46c0      	nop			; (mov r8, r8)
   10e30:	200047d4 	.word	0x200047d4

00010e34 <_close_r>:
   10e34:	2300      	movs	r3, #0
   10e36:	b570      	push	{r4, r5, r6, lr}
   10e38:	4c06      	ldr	r4, [pc, #24]	; (10e54 <_close_r+0x20>)
   10e3a:	0005      	movs	r5, r0
   10e3c:	0008      	movs	r0, r1
   10e3e:	6023      	str	r3, [r4, #0]
   10e40:	f7f9 fee0 	bl	ac04 <_close>
   10e44:	1c43      	adds	r3, r0, #1
   10e46:	d103      	bne.n	10e50 <_close_r+0x1c>
   10e48:	6823      	ldr	r3, [r4, #0]
   10e4a:	2b00      	cmp	r3, #0
   10e4c:	d000      	beq.n	10e50 <_close_r+0x1c>
   10e4e:	602b      	str	r3, [r5, #0]
   10e50:	bd70      	pop	{r4, r5, r6, pc}
   10e52:	46c0      	nop			; (mov r8, r8)
   10e54:	200047d4 	.word	0x200047d4

00010e58 <_fstat_r>:
   10e58:	2300      	movs	r3, #0
   10e5a:	b570      	push	{r4, r5, r6, lr}
   10e5c:	4c06      	ldr	r4, [pc, #24]	; (10e78 <_fstat_r+0x20>)
   10e5e:	0005      	movs	r5, r0
   10e60:	0008      	movs	r0, r1
   10e62:	0011      	movs	r1, r2
   10e64:	6023      	str	r3, [r4, #0]
   10e66:	f7f9 fed7 	bl	ac18 <_fstat>
   10e6a:	1c43      	adds	r3, r0, #1
   10e6c:	d103      	bne.n	10e76 <_fstat_r+0x1e>
   10e6e:	6823      	ldr	r3, [r4, #0]
   10e70:	2b00      	cmp	r3, #0
   10e72:	d000      	beq.n	10e76 <_fstat_r+0x1e>
   10e74:	602b      	str	r3, [r5, #0]
   10e76:	bd70      	pop	{r4, r5, r6, pc}
   10e78:	200047d4 	.word	0x200047d4

00010e7c <_isatty_r>:
   10e7c:	2300      	movs	r3, #0
   10e7e:	b570      	push	{r4, r5, r6, lr}
   10e80:	4c06      	ldr	r4, [pc, #24]	; (10e9c <_isatty_r+0x20>)
   10e82:	0005      	movs	r5, r0
   10e84:	0008      	movs	r0, r1
   10e86:	6023      	str	r3, [r4, #0]
   10e88:	f7f9 fed4 	bl	ac34 <_isatty>
   10e8c:	1c43      	adds	r3, r0, #1
   10e8e:	d103      	bne.n	10e98 <_isatty_r+0x1c>
   10e90:	6823      	ldr	r3, [r4, #0]
   10e92:	2b00      	cmp	r3, #0
   10e94:	d000      	beq.n	10e98 <_isatty_r+0x1c>
   10e96:	602b      	str	r3, [r5, #0]
   10e98:	bd70      	pop	{r4, r5, r6, pc}
   10e9a:	46c0      	nop			; (mov r8, r8)
   10e9c:	200047d4 	.word	0x200047d4

00010ea0 <_lseek_r>:
   10ea0:	b570      	push	{r4, r5, r6, lr}
   10ea2:	0005      	movs	r5, r0
   10ea4:	0008      	movs	r0, r1
   10ea6:	0011      	movs	r1, r2
   10ea8:	2200      	movs	r2, #0
   10eaa:	4c06      	ldr	r4, [pc, #24]	; (10ec4 <_lseek_r+0x24>)
   10eac:	6022      	str	r2, [r4, #0]
   10eae:	001a      	movs	r2, r3
   10eb0:	f7f9 feca 	bl	ac48 <_lseek>
   10eb4:	1c43      	adds	r3, r0, #1
   10eb6:	d103      	bne.n	10ec0 <_lseek_r+0x20>
   10eb8:	6823      	ldr	r3, [r4, #0]
   10eba:	2b00      	cmp	r3, #0
   10ebc:	d000      	beq.n	10ec0 <_lseek_r+0x20>
   10ebe:	602b      	str	r3, [r5, #0]
   10ec0:	bd70      	pop	{r4, r5, r6, pc}
   10ec2:	46c0      	nop			; (mov r8, r8)
   10ec4:	200047d4 	.word	0x200047d4

00010ec8 <_malloc_usable_size_r>:
   10ec8:	1f0b      	subs	r3, r1, #4
   10eca:	681a      	ldr	r2, [r3, #0]
   10ecc:	1f10      	subs	r0, r2, #4
   10ece:	2a00      	cmp	r2, #0
   10ed0:	da04      	bge.n	10edc <_malloc_usable_size_r+0x14>
   10ed2:	1889      	adds	r1, r1, r2
   10ed4:	3904      	subs	r1, #4
   10ed6:	680b      	ldr	r3, [r1, #0]
   10ed8:	18d0      	adds	r0, r2, r3
   10eda:	3804      	subs	r0, #4
   10edc:	4770      	bx	lr
	...

00010ee0 <_read_r>:
   10ee0:	b570      	push	{r4, r5, r6, lr}
   10ee2:	0005      	movs	r5, r0
   10ee4:	0008      	movs	r0, r1
   10ee6:	0011      	movs	r1, r2
   10ee8:	2200      	movs	r2, #0
   10eea:	4c06      	ldr	r4, [pc, #24]	; (10f04 <_read_r+0x24>)
   10eec:	6022      	str	r2, [r4, #0]
   10eee:	001a      	movs	r2, r3
   10ef0:	f7f9 fe0a 	bl	ab08 <_read>
   10ef4:	1c43      	adds	r3, r0, #1
   10ef6:	d103      	bne.n	10f00 <_read_r+0x20>
   10ef8:	6823      	ldr	r3, [r4, #0]
   10efa:	2b00      	cmp	r3, #0
   10efc:	d000      	beq.n	10f00 <_read_r+0x20>
   10efe:	602b      	str	r3, [r5, #0]
   10f00:	bd70      	pop	{r4, r5, r6, pc}
   10f02:	46c0      	nop			; (mov r8, r8)
   10f04:	200047d4 	.word	0x200047d4
   10f08:	42002c00 	.word	0x42002c00
   10f0c:	42003000 	.word	0x42003000
   10f10:	42003400 	.word	0x42003400
   10f14:	001c1c1b 	.word	0x001c1c1b
   10f18:	10000800 	.word	0x10000800
   10f1c:	00002000 	.word	0x00002000

00010f20 <display_handlers>:
   10f20:	00000001 0000082d 00000004 00000885     ....-...........
   10f30:	00000008 000008cd 00000010 00000925     ............%...
   10f40:	00000020 0000097d 00000040 000009b5      ...}...@.......
   10f50:	00000080 00000a1d 00000000 00000000     ................
   10f60:	6f727245 55202172 6c62616e 6f742065     Error! Unable to
   10f70:	61657220 75622064 6e6f7474 61747320      read button sta
   10f80:	00737574 6c696166 74206465 6e69206f     tus.failed to in
   10f90:	61697469 657a696c 43545720 38303536     itialize WTC6508
   10fa0:	00000021 50504128 52452829 255b2952     !...(APP)(ERR)[%
   10fb0:	255b5d73 00005d64 61766e69 6564696c     s][%d]..invalide
   10fc0:	636f6920 6320746c 0000646d               ioclt cmd..

00010fcc <__FUNCTION__.14905>:
   10fcc:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   10fdc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   10fec:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
   10ffc:	6b617720 74207075 63206568 00706968      wakup the chip.
   1100c:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   1101c:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   1102c:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   1103c:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   1104c:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   1105c:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   1106c:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   1107c:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
   1108c:	6e692029 696c6176 72672064 2070756f     ) invalid group 
   1109c:	00004449 66696828 6f682029 61207473     ID..(hif) host a
   110ac:	64207070 276e6469 65732074 58522074     pp didn't set RX
   110bc:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
   110cc:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   110dc:	61462029 2065736c 65746e69 70757272     ) False interrup
   110ec:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   110fc:	74206c69 6552206f 69206461 7265746e     il to Read inter
   1110c:	74707572 67657220 00000000 66696828     rupt reg....(hif
   1111c:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
   1112c:	65687420 69686320 00000070 46494828      the chip...(HIF
   1113c:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   1114c:	746e6920 75727265 25207470 72742064      interrupt %d tr
   1115c:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   1116c:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   1117c:	72612064 656d7567 0000746e 20505041     d argument..APP 
   1118c:	75716552 65747365 69532064 6920657a     Requested Size i
   1119c:	616c2073 72656772 61687420 6874206e     s larger than th
   111ac:	65722065 65766963 75622064 72656666     e recived buffer
   111bc:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
   111cc:	20505041 75716552 65747365 64412064     APP Requested Ad
   111dc:	73657264 65622073 646e6f79 65687420     dress beyond the
   111ec:	63657220 64657669 66756220 20726566      recived buffer 
   111fc:	72646461 20737365 20646e61 676e656c     address and leng
   1120c:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....
   1121c:	00003248 00003220 00003218 00003230     H2.. 2...2..02..
   1122c:	00003228 00003248 00003238 00003240     (2..H2..82..@2..

0001123c <__FUNCTION__.12480>:
   1123c:	5f666968 646e6573 00000000              hif_send....

00011248 <__FUNCTION__.12490>:
   11248:	5f666968 00727369                       hif_isr.

00011250 <__FUNCTION__.12496>:
   11250:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00011260 <__FUNCTION__.12511>:
   11260:	5f666968 65636572 00657669              hif_receive.

0001126c <__FUNCTION__.12526>:
   1126c:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   1127c:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   1128c:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   1129c:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   112ac:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   112bc:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   112cc:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   112dc:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   112ec:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   112fc:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   1130c:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   1131c:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   1132c:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
   1133c:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
   1134c:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   1135c:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   1136c:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   1137c:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
   1138c:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
   1139c:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
   113ac:	2065626f 75716572 73747365 72657020     obe requests per
   113bc:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
   113cc:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
   113dc:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
   113ec:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
   113fc:	00000a75 206e694d 76697264 76207265     u...Min driver v
   1140c:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
   1141c:	72727543 69726420 20726576 3a726576     Curr driver ver:
   1142c:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
   1143c:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
   1144c:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
   1145c:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   1146c:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   1147c:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   1148c:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   1149c:	20706557 2079656b 65646e69 64252078     Wep key index %d
   114ac:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   114bc:	2079656b 676e656c 25206874 00000a64     key length %d...
   114cc:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   114dc:	656c2079 6874676e 00000000 65646e75     y length....unde
   114ec:	656e6966 65732064 79742063 00006570     fined sec type..
   114fc:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
   1150c:	6420746f 6e696665 00006465 7473694c     ot defined..List
   1151c:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
   1152c:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
   1153c:	31312072 00000000 45574f50 41532052     r 11....POWER SA
   1154c:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   1155c:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   1156c:	66754220 20726566 65637865 64656465      Buffer exceeded
   1157c:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   1158c:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   1159c:	00000000                                ....

000115a0 <__FUNCTION__.12453>:
   115a0:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

000115ac <__FUNCTION__.12477>:
   115ac:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

000115bc <__FUNCTION__.12505>:
   115bc:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   115cc:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   115dc:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   115ec:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
   115fc:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
   1160c:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
   1161c:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
   1162c:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
   1163c:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
   1164c:	61747320 3a5d7472 69616620 6572206c      start]: fail re
   1165c:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
   1166c:	0000002e 6c696166 74206465 6564206f     ....failed to de
   1167c:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
   1168c:	68772072 20656c69 74697277 20676e69     r while writing 
   1169c:	00676572 6f727245 68772072 20656c69     reg.Error while 
   116ac:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
   116bc:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   116cc:	6f742064 61657220 00000064 6c75705b     d to read...[pul
   116dc:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   116ec:	6f742064 69727720 00006574              d to write..

000116f8 <__FUNCTION__.12290>:
   116f8:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00011708 <__FUNCTION__.12384>:
   11708:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   11718:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   11728:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   11738:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   11748:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   11758:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   11768:	6e65206f 656c6261 746e6920 75727265     o enable interru
   11778:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   11788:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   11798:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   117a8:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   117b8:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   117c8:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   117d8:	75622074 00000073                       t bus...

000117e0 <__FUNCTION__.12371>:
   117e0:	645f6d6e 695f7672 0074696e              nm_drv_init.

000117ec <__FUNCTION__.12378>:
   117ec:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

000117fc <crc7_syndrome_table>:
   117fc:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   1180c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   1181c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   1182c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   1183c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   1184c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   1185c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   1186c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   1187c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   1188c:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   1189c:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   118ac:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   118bc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   118cc:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   118dc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   118ec:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   118fc:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   1190c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   1191c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   1192c:	73756220 72726520 2e2e726f 0000002e      bus error......
   1193c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   1194c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   1195c:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   1196c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   1197c:	656c6961 61642064 72206174 6f707365     ailed data respo
   1198c:	2065736e 64616572 7562202c 72652073     nse read, bus er
   1199c:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   119ac:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   119bc:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   119cc:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   119dc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   119ec:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   119fc:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   11a0c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   11a1c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   11a2c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   11a3c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   11a4c:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   11a5c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   11a6c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11a7c:	656c6961 61642064 62206174 6b636f6c     ailed data block
   11a8c:	69727720 202c6574 20737562 6f727265      write, bus erro
   11a9c:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   11aac:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   11abc:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   11acc:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   11adc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   11aec:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   11afc:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   11b0c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   11b1c:	65722064 6e6f7073 202c6573 74697277     d response, writ
   11b2c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   11b3c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11b4c:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   11b5c:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   11b6c:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
   11b7c:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
   11b8c:	2c65736e 69727720 62206574 6b636f6c     nse, write block
   11b9c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   11bac:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   11bbc:	206b636f 61746164 69727720 2e2e6574     ock data write..
   11bcc:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11bdc:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   11bec:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   11bfc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   11c0c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   11c1c:	64616572 67657220 30252820 2e297838     read reg (%08x).
   11c2c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11c3c:	656c6961 61642064 72206174 2e646165     ailed data read.
   11c4c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11c5c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   11c6c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   11c7c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11c8c:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   11c9c:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   11cac:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   11cbc:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   11ccc:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   11cdc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11cec:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   11cfc:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   11d0c:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   11d1c:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   11d2c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11d3c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   11d4c:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   11d5c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   11d6c:	6e692064 6e726574 77206c61 65746972     d internal write
   11d7c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   11d8c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11d9c:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   11dac:	64692070 002e2e2e 00004fa4 00004fa4     p id.....O...O..
   11dbc:	00005034 00004ef8 00004f3e 00004f60     4P...N..>O..`O..
   11dcc:	00004fe6 00004fe6 000050a0 00004ecc     .O...O...P...N..
   11ddc:	000050fa 000050fa 000050fa 000050fa     .P...P...P...P..
   11dec:	00004f82                                .O..

00011df0 <__FUNCTION__.11755>:
   11df0:	5f697073 00646d63                       spi_cmd.

00011df8 <__FUNCTION__.11763>:
   11df8:	5f697073 5f646d63 00707372              spi_cmd_rsp.

00011e04 <__FUNCTION__.11779>:
   11e04:	5f697073 61746164 6165725f 00000064     spi_data_read...

00011e14 <__FUNCTION__.11794>:
   11e14:	5f697073 61746164 6972775f 00006574     spi_data_write..

00011e24 <__FUNCTION__.11804>:
   11e24:	5f697073 74697277 65725f65 00000067     spi_write_reg...

00011e34 <__FUNCTION__.11812>:
   11e34:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

00011e44 <__FUNCTION__.11821>:
   11e44:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00011e54 <__FUNCTION__.11829>:
   11e54:	735f6d6e 725f6970 00646165              nm_spi_read.

00011e60 <__FUNCTION__.11846>:
   11e60:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   11e70:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   11e80:	6e657272 253c2074 000a3e64 50504128     rrent <%d>..(APP
   11e90:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   11ea0:	20494e53 65637845 20736465 2078614d     SNI Exceeds Max 
   11eb0:	676e654c 00006874 6e6b6e55 206e776f     Length..Unknown 
   11ec0:	204c5353 6b636f53 4f207465 6f697470     SSL Socket Optio
   11ed0:	6425206e 0000000a 20746f4e 204c5353     n %d....Not SSL 
   11ee0:	6b636f53 00007465 42000800 42000c00     Socket.....B...B
   11ef0:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   11f00:	0c0b0a09 00000e0d 00009b3e 00009bb6     ........>.......
   11f10:	00009bb6 00009b5c 00009b56 00009b62     ....\...V...b...
   11f20:	00009b44 00009b68 00009b9c 00009e80     D...h...........
   11f30:	00009ed0 00009ed0 00009ecc 00009e72     ............r...
   11f40:	00009e92 00009e62 00009ea4 00009eb6     ....b...........
   11f50:	00009f1e 00009f4c 00009f4c 00009f48     ....L...L...H...
   11f60:	00009f18 00009f24 00009f12 00009f2a     ....$.......*...
   11f70:	00009f30                                0...

00011f74 <_tcc_intflag>:
   11f74:	00000001 00000002 00000004 00000008     ................
   11f84:	00001000 00002000 00004000 00008000     ..... ...@......
   11f94:	00010000 00020000 00040000 00080000     ................
   11fa4:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
   11fb4:	51726d54 00000000 0000cdb4 0000cdb4     TmrQ............
   11fc4:	0000cdb4 0000ce42 0000ce0c 0000ce36     ....B.......6...
   11fd4:	0000cdb4 0000cdb4 0000ce42 0000ce0c     ........B.......

00011fe4 <PubNubPublishKey>:
   11fe4:	6f6d6564 00000000                       demo....

00011fec <PubNubSubscribeKey>:
   11fec:	6f6d6564 00000000 6b636f73 725f7465     demo....socket_r
   11ffc:	6c6f7365 635f6576 25203a62 65722073     esolve_cb: %s re
   1200c:	766c6f73 77206465 20687469 25205049     solved with IP %
   1201c:	64252e64 2e64252e 0a0d6425 00000000     d.%d.%d.%d......
   1202c:	5f6d326d 69666977 6174735f 203a6574     m2m_wifi_state: 
   1203c:	5f4d324d 49464957 5345525f 4f435f50     M2M_WIFI_RESP_CO
   1204c:	54535f4e 5f455441 4e414843 3a444547     N_STATE_CHANGED:
   1205c:	4e4f4320 5443454e 000d4445 5f6d326d      CONNECTED..m2m_
   1206c:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
   1207c:	49464957 5345525f 4f435f50 54535f4e     WIFI_RESP_CON_ST
   1208c:	5f455441 4e414843 3a444547 53494420     ATE_CHANGED: DIS
   1209c:	4e4e4f43 45544345 00000d44 74616869     CONNECTED...ihat
   120ac:	6d696b65 00000000 73696f4d 206e6574     ekim....Moisten 
   120bc:	72756f59 72684320 75626d69 75422073     Your Chrimbus Bu
   120cc:	00006873 5f6d326d 69666977 6174735f     sh..m2m_wifi_sta
   120dc:	203a6574 5f4d324d 49464957 5145525f     te: M2M_WIFI_REQ
   120ec:	4348445f 4f435f50 203a464e 69205049     _DHCP_CONF: IP i
   120fc:	75252073 2e75252e 252e7525 000a0d75     s %u.%u.%u.%u...
   1210c:	00000030 00000031 6564227b 65636976     0...1...{"device
   1211c:	25223a22 202c2273 6d657422 61726570     ":"%s", "tempera
   1212c:	65727574 25223a22 64252e64 22202c22     ture":"%d.%d", "
   1213c:	6867696c 223a2274 2c226425 656c2220     light":"%d", "le
   1214c:	223a2264 7d227325 00000000 6e69616d     d":"%s"}....main
   1215c:	7570203a 73696c62 76652068 3a746e65     : publish event:
   1216c:	73257b20 000a0d7d 6e69616d 7573203a      {%s}...main: su
   1217c:	72637362 20656269 6e657665 50202c74     bscribe event, P
   1218c:	4f5f524e 00000d4b 0064656c 6e69616d     NR_OK...led.main
   1219c:	6572203a 76696563 4c206465 63204445     : received LED c
   121ac:	72746e6f 6d206c6f 61737365 203a6567     ontrol message: 
   121bc:	0a0d7325 00000000 00006e6f 0066666f     %s......on..off.
   121cc:	6e69616d 6572203a 76696563 6d206465     main: received m
   121dc:	61737365 203a6567 0a0d7325 00000000     essage: %s......
   121ec:	6e69616d 7573203a 72637362 20656269     main: subscribe 
   121fc:	6e657665 69202c74 7265746e 2e6c6176     event, interval.
   1220c:	0000000d 63617453 766f206b 6c667265     ....Stack overfl
   1221c:	3a21776f 0a732520 0000000d 6c6c614d     ow!: %s.....Mall
   1222c:	6620636f 656c6961 0d0a2164 00000000     oc failed!......
   1223c:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   1224c:	2074696e 6c6c6163 72726520 0d21726f     nit call error!.
   1225c:	00000000 6e69616d 414d203a 64612043     ....main: MAC ad
   1226c:	73657264 75662073 62206573 68207469     dress fuse bit h
   1227c:	6e207361 6220746f 206e6565 666e6f63     as not been conf
   1228c:	72756769 0d216465 00000000 6e69616d     igured!.....main
   1229c:	7355203a 326d2065 69775f6d 735f6966     : Use m2m_wifi_s
   122ac:	6d5f7465 615f6361 65726464 29287373     et_mac_address()
   122bc:	49504120 206f7420 20746573 2043414d      API to set MAC 
   122cc:	72646461 20737365 20616976 74666f73     address via soft
   122dc:	65726177 00000d2e 0000000d 6e69616d     ware........main
   122ec:	7550203a 62754e62 6e6f6320 75676966     : PubNub configu
   122fc:	20646572 68746977 6c6f6620 69776f6c     red with followi
   1230c:	7320676e 69747465 3a73676e 0000000d     ng settings:....
   1231c:	6e69616d 2d20203a 62755020 6873696c     main:  - Publish
   1232c:	79656b20 2522203a 202c2273 73627553      key: "%s", Subs
   1233c:	62697263 656b2065 22203a79 2c227325     cribe key: "%s",
   1234c:	61684320 6c656e6e 2522203a 0d2e2273      Channel: "%s"..
   1235c:	000a0d0a 6e69616d 6957203a 2069462d     ....main: Wi-Fi 
   1236c:	6e6e6f63 69746365 7420676e 5041206f     connecting to AP
   1237c:	69737520 6820676e 63647261 6465646f      using hardcoded
   1238c:	65726320 746e6564 736c6169 0d2e2e2e      credentials....
   1239c:	00000000 6b736174 0073335f 6b736174     ....task_3s.task
   123ac:	0073315f 6b736174 4833335f 0000007a     _1s.task_33Hz...
   123bc:	6b736174 7a75425f 0072657a 73627570     task_Buzzer.pubs
   123cc:	702e6275 756e6275 6f632e62 0000006d     ub.pubnub.com...
   123dc:	20544547 48207325 2f505454 0d312e31     GET %s HTTP/1.1.
   123ec:	736f480a 25203a74 550a0d73 2d726573     .Host: %s..User-
   123fc:	6e656741 50203a74 754e6275 49572d62     Agent: PubNub-WI
   1240c:	3531434e 0a0d3030 6e6e6f43 69746365     NC1500..Connecti
   1241c:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   1242c:	00000a0d 696c6176 74635f64 72705f78     ....valid_ctx_pr
   1243c:	62702874 00000029 732f2e2e 502f6372     t(pb)...../src/P
   1244c:	754e6275 00632e62 2d627028 6174733e     ubNub.c.(pb->sta
   1245c:	3d206574 5350203d 4c44495f 7c202945     te == PS_IDLE) |
   1246c:	7028207c 733e2d62 65746174 203d3d20     | (pb->state == 
   1247c:	575f5350 5f544941 29534e44 207c7c20     PS_WAIT_DNS) || 
   1248c:	2d627028 6174733e 3d206574 5350203d     (pb->state == PS
   1249c:	4941575f 4f435f54 43454e4e 00002954     _WAIT_CONNECT)..
   124ac:	6c696166 74206465 7263206f 65746165     failed to create
   124bc:	50435420 696c6320 20746e65 6b636f73      TCP client sock
   124cc:	65207465 726f7272 00000d21 746e6f43     et error!...Cont
   124dc:	2d746e65 676e654c 203a6874 00000000     ent-Length: ....
   124ec:	0000005b 65646e69 203c2078 4e425550     [...index < PUBN
   124fc:	435f4255 4d5f5854 00005841 6275702f     UB_CTX_MAX../pub
   1250c:	6873696c 2f73252f 302f7325 2f73252f     lish/%s/%s/0/%s/
   1251c:	00002f30 64636261 68676665 6c6b6a69     0/..abcdefghijkl
   1252c:	706f6e6d 74737271 78777675 42417a79     mnopqrstuvwxyzAB
   1253c:	46454443 4a494847 4e4d4c4b 5251504f     CDEFGHIJKLMNOPQR
   1254c:	56555453 5a595857 33323130 37363534     STUVWXYZ01234567
   1255c:	5f2d3938 3d2c7e2e 5b403b3a 0000005d     89-_.~,=:;@[]...
   1256c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1257c:	00000000 64697575 0000003d 00000000     ....uuid=.......
   1258c:	00000026 68747561 0000003d 6275732f     &...auth=.../sub
   1259c:	69726373 252f6562 73252f73 252f302f     scribe/%s/%s/0/%
   125ac:	73253f73 73257325 73257325 736e7026     s?%s%s%s%s%s&pns
   125bc:	573d6b64 31434e49 25303035 32252573     dk=WINC1500%s%%2
   125cc:	00732546 00312e30                       F%s.0.1.

000125d4 <__func__.12046>:
   125d4:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
   125e4:	7463656e 00000000                       nect....

000125ec <__func__.12124>:
   125ec:	6e627570 675f6275 635f7465 00007874     pubnub_get_ctx..

000125fc <__func__.12130>:
   125fc:	6e627570 695f6275 0074696e              pubnub_init.

00012608 <__func__.12136>:
   12608:	6e627570 705f6275 696c6275 00006873     pubnub_publish..

00012618 <__func__.12147>:
   12618:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
   12628:	00000000                                ....

0001262c <__func__.12151>:
   1262c:	6e627570 675f6275 00007465 0000f2ec     pubnub_get......
   1263c:	0000f1ac 0000f1ac 0000f1aa 0000f2c4     ................
   1264c:	0000f2c4 0000f2b6 0000f1aa 0000f2c4     ................
   1265c:	0000f2b6 0000f2c4 0000f1aa 0000f2cc     ................
   1266c:	0000f2cc 0000f2cc 0000f4cc 7566202c     ............, fu
   1267c:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
   1268c:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
   1269c:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
   126ac:	73256425 000a7325 00000043              %d%s%s..C...

000126b8 <_global_impure_ptr>:
   126b8:	20000034 2b302d23 6c680020 6665004c     4.. #-0+ .hlL.ef
   126c8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   126d8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   126e8:	64636261 00006665                                abcdef.

000126ef <_ctype_>:
   126ef:	20202000 20202020 28282020 20282828     .         ((((( 
   126ff:	20202020 20202020 20202020 20202020                     
   1270f:	10108820 10101010 10101010 10101010      ...............
   1271f:	04040410 04040404 10040404 10101010     ................
   1272f:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1273f:	01010101 01010101 01010101 10101010     ................
   1274f:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1275f:	02020202 02020202 02020202 10101010     ................
   1276f:	00000020 00000000 00000000 00000000      ...............
	...

000127f0 <__sf_fake_stdin>:
	...

00012810 <__sf_fake_stdout>:
	...

00012830 <__sf_fake_stderr>:
	...

00012850 <_init>:
   12850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12852:	46c0      	nop			; (mov r8, r8)
   12854:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12856:	bc08      	pop	{r3}
   12858:	469e      	mov	lr, r3
   1285a:	4770      	bx	lr

0001285c <__init_array_start>:
   1285c:	000000dd 	.word	0x000000dd

00012860 <_fini>:
   12860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12862:	46c0      	nop			; (mov r8, r8)
   12864:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12866:	bc08      	pop	{r3}
   12868:	469e      	mov	lr, r3
   1286a:	4770      	bx	lr

0001286c <__fini_array_start>:
   1286c:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <temp_set_point>:
2000000c:	0150                                             P

2000000d <degrees_F>:
2000000d:	0001 0000                                        ...

20000010 <egstrNmBusCapabilities>:
20000010:	0100 0000                                   ....

20000014 <clk_status_reg_adr>:
20000014:	000f 0000                                   ....

20000018 <g_interrupt_enabled>:
20000018:	0001 0000                                   ....

2000001c <phantomISR>:
2000001c:	270f 0000                                   .'..

20000020 <uxCriticalNesting>:
20000020:	aaaa aaaa                                   ....

20000024 <PubNubChannel>:
20000024:	4957 434e 3531 3030 305f 3a30 3030 0000     WINC1500_00:00..

20000034 <impure_data>:
20000034:	0000 0000 27f0 0001 2810 0001 2830 0001     .....'...(..0(..
	...
20000054:	26b4 0001 0000 0000 0000 0000 0000 0000     .&..............
	...

20000094 <_impure_ptr>:
20000094:	0034 2000                                   4.. 

20000098 <__ctype_ptr__>:
20000098:	26ef 0001                                   .&..
