
Cloud_Tub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00012c24  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00012c24  00012c24  00022c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000009c  20000000  00012c2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000473c  2000009c  00012cc8  0003009c  2**2
                  ALLOC
  4 .stack        00002000  200047d8  00017404  0003009c  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
  7 .debug_info   000511a1  00000000  00000000  0003011d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00006dec  00000000  00000000  000812be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000926d  00000000  00000000  000880aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001a28  00000000  00000000  00091317  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001818  00000000  00000000  00092d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00025ce2  00000000  00000000  00094557  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002480c  00000000  00000000  000ba239  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009b807  00000000  00000000  000dea45  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000066c4  00000000  00000000  0017a24c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	200067d8 	.word	0x200067d8
       4:	0000ada5 	.word	0x0000ada5
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	0000ae9d 	.word	0x0000ae9d
       c:	0000e211 	.word	0x0000e211
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	0000b205 	.word	0x0000b205
	...
      38:	0000b321 	.word	0x0000b321
      3c:	0000b369 	.word	0x0000b369
      40:	0000ae9d 	.word	0x0000ae9d

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	0000ae9d 	.word	0x0000ae9d
      48:	0000ae9d 	.word	0x0000ae9d
      4c:	00007ded 	.word	0x00007ded
      50:	00007879 	.word	0x00007879
      54:	0000ae9d 	.word	0x0000ae9d
      58:	0000ae9d 	.word	0x0000ae9d
		if (time.hour == 0) {
      5c:	0000ae9d 	.word	0x0000ae9d
      60:	0000ae9d 	.word	0x0000ae9d
			time.hour = 12;
      64:	000084c5 	.word	0x000084c5
      68:	000084dd 	.word	0x000084dd
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	000084f5 	.word	0x000084f5
      70:	0000850d 	.word	0x0000850d
      74:	00008525 	.word	0x00008525
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	0000853d 	.word	0x0000853d
      7c:	0000aced 	.word	0x0000aced
      80:	0000ad01 	.word	0x0000ad01
      84:	0000ad15 	.word	0x0000ad15
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      88:	00000121 	.word	0x00000121
      8c:	00000135 	.word	0x00000135
      90:	00000149 	.word	0x00000149
	...
      9c:	000076a5 	.word	0x000076a5
      a0:	0000ae9d 	.word	0x0000ae9d
      a4:	0000ae9d 	.word	0x0000ae9d
			alarm.time.hour = alarm.time.hour % 12;
      a8:	0000ae9d 	.word	0x0000ae9d
      ac:	0000ae9d 	.word	0x0000ae9d
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	2000009c 	.word	0x2000009c
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	00012c2c 	.word	0x00012c2c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000a0 	.word	0x200000a0
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	00012c2c 	.word	0x00012c2c
     10c:	00012c2c 	.word	0x00012c2c
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 * \brief Initialize the delay driver.
 *
 * Not used in cycle mode.
 */
void delay_init(void)
{
     114:	b580      	push	{r7, lr}
     116:	af00      	add	r7, sp, #0
}
     118:	46c0      	nop			; (mov r8, r8)
     11a:	46bd      	mov	sp, r7
     11c:	bd80      	pop	{r7, pc}
			time.hour = time.hour + 12;
     11e:	46c0      	nop			; (mov r8, r8)

00000120 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     120:	b580      	push	{r7, lr}
     122:	af00      	add	r7, sp, #0
     124:	2000      	movs	r0, #0
     126:	4b02      	ldr	r3, [pc, #8]	; (130 <TC3_Handler+0x10>)
     128:	4798      	blx	r3
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	46bd      	mov	sp, r7
     12e:	bd80      	pop	{r7, pc}
     130:	0000015d 	.word	0x0000015d

00000134 <TC4_Handler>:
     134:	b580      	push	{r7, lr}
     136:	af00      	add	r7, sp, #0
     138:	2001      	movs	r0, #1
     13a:	4b02      	ldr	r3, [pc, #8]	; (144 <TC4_Handler+0x10>)
     13c:	4798      	blx	r3
     13e:	46c0      	nop			; (mov r8, r8)
     140:	46bd      	mov	sp, r7
     142:	bd80      	pop	{r7, pc}
     144:	0000015d 	.word	0x0000015d

00000148 <TC5_Handler>:
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
     14c:	2002      	movs	r0, #2
     14e:	4b02      	ldr	r3, [pc, #8]	; (158 <TC5_Handler+0x10>)
     150:	4798      	blx	r3
     152:	46c0      	nop			; (mov r8, r8)
     154:	46bd      	mov	sp, r7
     156:	bd80      	pop	{r7, pc}
     158:	0000015d 	.word	0x0000015d

0000015c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     15c:	b580      	push	{r7, lr}
     15e:	b084      	sub	sp, #16
     160:	af00      	add	r7, sp, #0
     162:	0002      	movs	r2, r0
     164:	1dfb      	adds	r3, r7, #7
     166:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
     168:	1dfb      	adds	r3, r7, #7
     16a:	781a      	ldrb	r2, [r3, #0]
{
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     16c:	4b28      	ldr	r3, [pc, #160]	; (210 <_tc_interrupt_handler+0xb4>)
     16e:	0092      	lsls	r2, r2, #2
     170:	58d3      	ldr	r3, [r2, r3]
     172:	60fb      	str	r3, [r7, #12]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     174:	68fb      	ldr	r3, [r7, #12]
     176:	681b      	ldr	r3, [r3, #0]
     178:	7b9b      	ldrb	r3, [r3, #14]
     17a:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
     17c:	68fa      	ldr	r2, [r7, #12]
     17e:	7e12      	ldrb	r2, [r2, #24]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     180:	4013      	ands	r3, r2
     182:	b2da      	uxtb	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask;
     184:	68fb      	ldr	r3, [r7, #12]
     186:	7e59      	ldrb	r1, [r3, #25]
	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     188:	230b      	movs	r3, #11
     18a:	18fb      	adds	r3, r7, r3
     18c:	400a      	ands	r2, r1
     18e:	701a      	strb	r2, [r3, #0]
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     190:	230b      	movs	r3, #11
     192:	18fb      	adds	r3, r7, r3
     194:	781b      	ldrb	r3, [r3, #0]
     196:	2201      	movs	r2, #1
     198:	4013      	ands	r3, r2
     19a:	d008      	beq.n	1ae <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     19c:	68fb      	ldr	r3, [r7, #12]
     19e:	689b      	ldr	r3, [r3, #8]
     1a0:	68fa      	ldr	r2, [r7, #12]
     1a2:	0010      	movs	r0, r2
     1a4:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     1a6:	68fb      	ldr	r3, [r7, #12]
     1a8:	681b      	ldr	r3, [r3, #0]
     1aa:	2201      	movs	r2, #1
     1ac:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     1ae:	230b      	movs	r3, #11
     1b0:	18fb      	adds	r3, r7, r3
     1b2:	781b      	ldrb	r3, [r3, #0]
     1b4:	2202      	movs	r2, #2
     1b6:	4013      	ands	r3, r2
     1b8:	d008      	beq.n	1cc <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     1ba:	68fb      	ldr	r3, [r7, #12]
     1bc:	68db      	ldr	r3, [r3, #12]
     1be:	68fa      	ldr	r2, [r7, #12]
     1c0:	0010      	movs	r0, r2
     1c2:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     1c4:	68fb      	ldr	r3, [r7, #12]
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	2202      	movs	r2, #2
     1ca:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     1cc:	230b      	movs	r3, #11
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	781b      	ldrb	r3, [r3, #0]
     1d2:	2210      	movs	r2, #16
     1d4:	4013      	ands	r3, r2
     1d6:	d008      	beq.n	1ea <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     1d8:	68fb      	ldr	r3, [r7, #12]
     1da:	691b      	ldr	r3, [r3, #16]
     1dc:	68fa      	ldr	r2, [r7, #12]
     1de:	0010      	movs	r0, r2
     1e0:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     1e2:	68fb      	ldr	r3, [r7, #12]
     1e4:	681b      	ldr	r3, [r3, #0]
     1e6:	2210      	movs	r2, #16
     1e8:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     1ea:	230b      	movs	r3, #11
     1ec:	18fb      	adds	r3, r7, r3
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2220      	movs	r2, #32
     1f2:	4013      	ands	r3, r2
     1f4:	d008      	beq.n	208 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     1f6:	68fb      	ldr	r3, [r7, #12]
     1f8:	695b      	ldr	r3, [r3, #20]
     1fa:	68fa      	ldr	r2, [r7, #12]
     1fc:	0010      	movs	r0, r2
     1fe:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     200:	68fb      	ldr	r3, [r7, #12]
     202:	681b      	ldr	r3, [r3, #0]
     204:	2220      	movs	r2, #32
     206:	739a      	strb	r2, [r3, #14]
	}
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	b004      	add	sp, #16
     20e:	bd80      	pop	{r7, pc}
     210:	200045b0 	.word	0x200045b0

00000214 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
     214:	b580      	push	{r7, lr}
     216:	b082      	sub	sp, #8
     218:	af00      	add	r7, sp, #0
     21a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     21c:	687b      	ldr	r3, [r7, #4]
     21e:	2200      	movs	r2, #0
     220:	701a      	strb	r2, [r3, #0]
}
     222:	46c0      	nop			; (mov r8, r8)
     224:	46bd      	mov	sp, r7
     226:	b002      	add	sp, #8
     228:	bd80      	pop	{r7, pc}
     22a:	46c0      	nop			; (mov r8, r8)

0000022c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     22c:	b580      	push	{r7, lr}
     22e:	b082      	sub	sp, #8
     230:	af00      	add	r7, sp, #0
     232:	0002      	movs	r2, r0
     234:	6039      	str	r1, [r7, #0]
     236:	1dfb      	adds	r3, r7, #7
     238:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     23a:	1dfb      	adds	r3, r7, #7
     23c:	781b      	ldrb	r3, [r3, #0]
     23e:	2b01      	cmp	r3, #1
     240:	d00a      	beq.n	258 <system_apb_clock_set_mask+0x2c>
     242:	2b02      	cmp	r3, #2
     244:	d00f      	beq.n	266 <system_apb_clock_set_mask+0x3a>
     246:	2b00      	cmp	r3, #0
     248:	d114      	bne.n	274 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     24a:	4b0e      	ldr	r3, [pc, #56]	; (284 <system_apb_clock_set_mask+0x58>)
     24c:	4a0d      	ldr	r2, [pc, #52]	; (284 <system_apb_clock_set_mask+0x58>)
     24e:	6991      	ldr	r1, [r2, #24]
     250:	683a      	ldr	r2, [r7, #0]
     252:	430a      	orrs	r2, r1
     254:	619a      	str	r2, [r3, #24]
			break;
     256:	e00f      	b.n	278 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     258:	4b0a      	ldr	r3, [pc, #40]	; (284 <system_apb_clock_set_mask+0x58>)
     25a:	4a0a      	ldr	r2, [pc, #40]	; (284 <system_apb_clock_set_mask+0x58>)
     25c:	69d1      	ldr	r1, [r2, #28]
     25e:	683a      	ldr	r2, [r7, #0]
     260:	430a      	orrs	r2, r1
     262:	61da      	str	r2, [r3, #28]
			break;
     264:	e008      	b.n	278 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     266:	4b07      	ldr	r3, [pc, #28]	; (284 <system_apb_clock_set_mask+0x58>)
     268:	4a06      	ldr	r2, [pc, #24]	; (284 <system_apb_clock_set_mask+0x58>)
     26a:	6a11      	ldr	r1, [r2, #32]
     26c:	683a      	ldr	r2, [r7, #0]
     26e:	430a      	orrs	r2, r1
     270:	621a      	str	r2, [r3, #32]
			break;
     272:	e001      	b.n	278 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     274:	2317      	movs	r3, #23
     276:	e000      	b.n	27a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     278:	2300      	movs	r3, #0
}
     27a:	0018      	movs	r0, r3
     27c:	46bd      	mov	sp, r7
     27e:	b002      	add	sp, #8
     280:	bd80      	pop	{r7, pc}
     282:	46c0      	nop			; (mov r8, r8)
     284:	40000400 	.word	0x40000400

00000288 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
     288:	b580      	push	{r7, lr}
     28a:	b082      	sub	sp, #8
     28c:	af00      	add	r7, sp, #0
     28e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     290:	687b      	ldr	r3, [r7, #4]
     292:	2280      	movs	r2, #128	; 0x80
     294:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     296:	687b      	ldr	r3, [r7, #4]
     298:	2200      	movs	r2, #0
     29a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     29c:	687b      	ldr	r3, [r7, #4]
     29e:	2201      	movs	r2, #1
     2a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     2a2:	687b      	ldr	r3, [r7, #4]
     2a4:	2200      	movs	r2, #0
     2a6:	70da      	strb	r2, [r3, #3]
}
     2a8:	46c0      	nop			; (mov r8, r8)
     2aa:	46bd      	mov	sp, r7
     2ac:	b002      	add	sp, #8
     2ae:	bd80      	pop	{r7, pc}

000002b0 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     2b0:	b580      	push	{r7, lr}
     2b2:	b084      	sub	sp, #16
     2b4:	af00      	add	r7, sp, #0
     2b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     2b8:	687b      	ldr	r3, [r7, #4]
     2ba:	681b      	ldr	r3, [r3, #0]
     2bc:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     2be:	68fb      	ldr	r3, [r7, #12]
     2c0:	7bdb      	ldrb	r3, [r3, #15]
     2c2:	b2db      	uxtb	r3, r3
     2c4:	001a      	movs	r2, r3
     2c6:	2380      	movs	r3, #128	; 0x80
     2c8:	4013      	ands	r3, r2
     2ca:	1e5a      	subs	r2, r3, #1
     2cc:	4193      	sbcs	r3, r2
     2ce:	b2db      	uxtb	r3, r3
#endif
}
     2d0:	0018      	movs	r0, r3
     2d2:	46bd      	mov	sp, r7
     2d4:	b004      	add	sp, #16
     2d6:	bd80      	pop	{r7, pc}

000002d8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
     2d8:	b590      	push	{r4, r7, lr}
     2da:	b087      	sub	sp, #28
     2dc:	af00      	add	r7, sp, #0
     2de:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
     2e0:	2308      	movs	r3, #8
     2e2:	18fb      	adds	r3, r7, r3
     2e4:	4a0d      	ldr	r2, [pc, #52]	; (31c <_tc_get_inst_index+0x44>)
     2e6:	ca13      	ldmia	r2!, {r0, r1, r4}
     2e8:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     2ea:	2300      	movs	r3, #0
     2ec:	617b      	str	r3, [r7, #20]
     2ee:	e00d      	b.n	30c <_tc_get_inst_index+0x34>
		if (hw == tc_modules[i]) {
     2f0:	2308      	movs	r3, #8
     2f2:	18fb      	adds	r3, r7, r3
     2f4:	697a      	ldr	r2, [r7, #20]
     2f6:	0092      	lsls	r2, r2, #2
     2f8:	58d2      	ldr	r2, [r2, r3]
     2fa:	687b      	ldr	r3, [r7, #4]
     2fc:	429a      	cmp	r2, r3
     2fe:	d102      	bne.n	306 <_tc_get_inst_index+0x2e>
			return i;
     300:	697b      	ldr	r3, [r7, #20]
     302:	b2db      	uxtb	r3, r3
     304:	e006      	b.n	314 <_tc_get_inst_index+0x3c>
{
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
     306:	697b      	ldr	r3, [r7, #20]
     308:	3301      	adds	r3, #1
     30a:	617b      	str	r3, [r7, #20]
     30c:	697b      	ldr	r3, [r7, #20]
     30e:	2b02      	cmp	r3, #2
     310:	d9ee      	bls.n	2f0 <_tc_get_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     312:	2300      	movs	r3, #0
}
     314:	0018      	movs	r0, r3
     316:	46bd      	mov	sp, r7
     318:	b007      	add	sp, #28
     31a:	bd90      	pop	{r4, r7, pc}
     31c:	000112a8 	.word	0x000112a8

00000320 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
     320:	b590      	push	{r4, r7, lr}
     322:	b08d      	sub	sp, #52	; 0x34
     324:	af00      	add	r7, sp, #0
     326:	60f8      	str	r0, [r7, #12]
     328:	60b9      	str	r1, [r7, #8]
     32a:	607a      	str	r2, [r7, #4]
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
     32c:	232e      	movs	r3, #46	; 0x2e
     32e:	18fb      	adds	r3, r7, r3
     330:	2200      	movs	r2, #0
     332:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
     334:	232d      	movs	r3, #45	; 0x2d
     336:	18fb      	adds	r3, r7, r3
     338:	2200      	movs	r2, #0
     33a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
     33c:	232c      	movs	r3, #44	; 0x2c
     33e:	18fb      	adds	r3, r7, r3
     340:	2200      	movs	r2, #0
     342:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
     344:	2329      	movs	r3, #41	; 0x29
     346:	18fc      	adds	r4, r7, r3
     348:	68bb      	ldr	r3, [r7, #8]
     34a:	0018      	movs	r0, r3
     34c:	4bbf      	ldr	r3, [pc, #764]	; (64c <tc_init+0x32c>)
     34e:	4798      	blx	r3
     350:	0003      	movs	r3, r0
     352:	7023      	strb	r3, [r4, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
     354:	2324      	movs	r3, #36	; 0x24
     356:	18fa      	adds	r2, r7, r3
     358:	4bbd      	ldr	r3, [pc, #756]	; (650 <tc_init+0x330>)
     35a:	0010      	movs	r0, r2
     35c:	0019      	movs	r1, r3
     35e:	2303      	movs	r3, #3
     360:	001a      	movs	r2, r3
     362:	4bbc      	ldr	r3, [pc, #752]	; (654 <tc_init+0x334>)
     364:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
     366:	231c      	movs	r3, #28
     368:	18fa      	adds	r2, r7, r3
     36a:	4bbb      	ldr	r3, [pc, #748]	; (658 <tc_init+0x338>)
     36c:	0010      	movs	r0, r2
     36e:	0019      	movs	r1, r3
     370:	2306      	movs	r3, #6
     372:	001a      	movs	r2, r3
     374:	4bb7      	ldr	r3, [pc, #732]	; (654 <tc_init+0x334>)
     376:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     378:	232b      	movs	r3, #43	; 0x2b
     37a:	18fb      	adds	r3, r7, r3
     37c:	2200      	movs	r2, #0
     37e:	701a      	strb	r2, [r3, #0]
     380:	e00e      	b.n	3a0 <tc_init+0x80>
		module_inst->callback[i]        = NULL;
     382:	232b      	movs	r3, #43	; 0x2b
     384:	18fb      	adds	r3, r7, r3
     386:	781a      	ldrb	r2, [r3, #0]
     388:	68fb      	ldr	r3, [r7, #12]
     38a:	3202      	adds	r2, #2
     38c:	0092      	lsls	r2, r2, #2
     38e:	2100      	movs	r1, #0
     390:	50d1      	str	r1, [r2, r3]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
     392:	232b      	movs	r3, #43	; 0x2b
     394:	18fb      	adds	r3, r7, r3
     396:	781a      	ldrb	r2, [r3, #0]
     398:	232b      	movs	r3, #43	; 0x2b
     39a:	18fb      	adds	r3, r7, r3
     39c:	3201      	adds	r2, #1
     39e:	701a      	strb	r2, [r3, #0]
     3a0:	232b      	movs	r3, #43	; 0x2b
     3a2:	18fb      	adds	r3, r7, r3
     3a4:	781b      	ldrb	r3, [r3, #0]
     3a6:	2b03      	cmp	r3, #3
     3a8:	d9eb      	bls.n	382 <tc_init+0x62>
		module_inst->callback[i]        = NULL;
	}
	module_inst->register_callback_mask     = 0x00;
     3aa:	68fb      	ldr	r3, [r7, #12]
     3ac:	2200      	movs	r2, #0
     3ae:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
     3b0:	68fb      	ldr	r3, [r7, #12]
     3b2:	2200      	movs	r2, #0
     3b4:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
     3b6:	2329      	movs	r3, #41	; 0x29
     3b8:	18fb      	adds	r3, r7, r3
     3ba:	781a      	ldrb	r2, [r3, #0]
     3bc:	4ba7      	ldr	r3, [pc, #668]	; (65c <tc_init+0x33c>)
     3be:	0092      	lsls	r2, r2, #2
     3c0:	68f9      	ldr	r1, [r7, #12]
     3c2:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
     3c4:	68fb      	ldr	r3, [r7, #12]
     3c6:	68ba      	ldr	r2, [r7, #8]
     3c8:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     3ca:	687b      	ldr	r3, [r7, #4]
     3cc:	789b      	ldrb	r3, [r3, #2]
     3ce:	2b08      	cmp	r3, #8
     3d0:	d108      	bne.n	3e4 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
     3d2:	2329      	movs	r3, #41	; 0x29
     3d4:	18fb      	adds	r3, r7, r3
     3d6:	781b      	ldrb	r3, [r3, #0]
     3d8:	3303      	adds	r3, #3
     3da:	2201      	movs	r2, #1
     3dc:	4013      	ands	r3, r2
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
     3de:	d001      	beq.n	3e4 <tc_init+0xc4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     3e0:	2317      	movs	r3, #23
     3e2:	e1c4      	b.n	76e <tc_init+0x44e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
     3e4:	687b      	ldr	r3, [r7, #4]
     3e6:	789a      	ldrb	r2, [r3, #2]
     3e8:	68fb      	ldr	r3, [r7, #12]
     3ea:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
     3ec:	68bb      	ldr	r3, [r7, #8]
     3ee:	881b      	ldrh	r3, [r3, #0]
     3f0:	b29b      	uxth	r3, r3
     3f2:	001a      	movs	r2, r3
     3f4:	2301      	movs	r3, #1
     3f6:	4013      	ands	r3, r2
     3f8:	d001      	beq.n	3fe <tc_init+0xde>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     3fa:	2305      	movs	r3, #5
     3fc:	e1b7      	b.n	76e <tc_init+0x44e>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
     3fe:	68bb      	ldr	r3, [r7, #8]
     400:	7bdb      	ldrb	r3, [r3, #15]
     402:	b2db      	uxtb	r3, r3
     404:	001a      	movs	r2, r3
     406:	2310      	movs	r3, #16
     408:	4013      	ands	r3, r2
     40a:	d001      	beq.n	410 <tc_init+0xf0>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
     40c:	231c      	movs	r3, #28
     40e:	e1ae      	b.n	76e <tc_init+0x44e>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
     410:	68bb      	ldr	r3, [r7, #8]
     412:	881b      	ldrh	r3, [r3, #0]
     414:	b29b      	uxth	r3, r3
     416:	001a      	movs	r2, r3
     418:	2302      	movs	r3, #2
     41a:	4013      	ands	r3, r2
     41c:	d001      	beq.n	422 <tc_init+0x102>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     41e:	231c      	movs	r3, #28
     420:	e1a5      	b.n	76e <tc_init+0x44e>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
     422:	687b      	ldr	r3, [r7, #4]
     424:	7c1b      	ldrb	r3, [r3, #16]
     426:	2b00      	cmp	r3, #0
     428:	d017      	beq.n	45a <tc_init+0x13a>
		system_pinmux_get_config_defaults(&pin_config);
     42a:	2318      	movs	r3, #24
     42c:	18fb      	adds	r3, r7, r3
     42e:	0018      	movs	r0, r3
     430:	4b8b      	ldr	r3, [pc, #556]	; (660 <tc_init+0x340>)
     432:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
     434:	687b      	ldr	r3, [r7, #4]
     436:	699b      	ldr	r3, [r3, #24]
     438:	b2da      	uxtb	r2, r3
     43a:	2318      	movs	r3, #24
     43c:	18fb      	adds	r3, r7, r3
     43e:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     440:	2318      	movs	r3, #24
     442:	18fb      	adds	r3, r7, r3
     444:	2201      	movs	r2, #1
     446:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
     448:	687b      	ldr	r3, [r7, #4]
     44a:	695b      	ldr	r3, [r3, #20]
	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     44c:	b2db      	uxtb	r3, r3
     44e:	2218      	movs	r2, #24
     450:	18ba      	adds	r2, r7, r2
     452:	0011      	movs	r1, r2
     454:	0018      	movs	r0, r3
     456:	4b83      	ldr	r3, [pc, #524]	; (664 <tc_init+0x344>)
     458:	4798      	blx	r3
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
     45a:	687b      	ldr	r3, [r7, #4]
     45c:	7f1b      	ldrb	r3, [r3, #28]
     45e:	2b00      	cmp	r3, #0
     460:	d017      	beq.n	492 <tc_init+0x172>
		system_pinmux_get_config_defaults(&pin_config);
     462:	2318      	movs	r3, #24
     464:	18fb      	adds	r3, r7, r3
     466:	0018      	movs	r0, r3
     468:	4b7d      	ldr	r3, [pc, #500]	; (660 <tc_init+0x340>)
     46a:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     470:	b2da      	uxtb	r2, r3
     472:	2318      	movs	r3, #24
     474:	18fb      	adds	r3, r7, r3
     476:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     478:	2318      	movs	r3, #24
     47a:	18fb      	adds	r3, r7, r3
     47c:	2201      	movs	r2, #1
     47e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
     480:	687b      	ldr	r3, [r7, #4]
     482:	6a1b      	ldr	r3, [r3, #32]
	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
     484:	b2db      	uxtb	r3, r3
     486:	2218      	movs	r2, #24
     488:	18ba      	adds	r2, r7, r2
     48a:	0011      	movs	r1, r2
     48c:	0018      	movs	r0, r3
     48e:	4b75      	ldr	r3, [pc, #468]	; (664 <tc_init+0x344>)
     490:	4798      	blx	r3
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
     492:	2329      	movs	r3, #41	; 0x29
     494:	18fb      	adds	r3, r7, r3
     496:	781a      	ldrb	r2, [r3, #0]
     498:	231c      	movs	r3, #28
     49a:	18fb      	adds	r3, r7, r3
     49c:	0052      	lsls	r2, r2, #1
     49e:	5ad3      	ldrh	r3, [r2, r3]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     4a0:	0019      	movs	r1, r3
     4a2:	2002      	movs	r0, #2
     4a4:	4b70      	ldr	r3, [pc, #448]	; (668 <tc_init+0x348>)
     4a6:	4798      	blx	r3
			inst_pm_apbmask[instance]);

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
     4a8:	687b      	ldr	r3, [r7, #4]
     4aa:	789b      	ldrb	r3, [r3, #2]
     4ac:	2b08      	cmp	r3, #8
     4ae:	d10b      	bne.n	4c8 <tc_init+0x1a8>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
     4b0:	2329      	movs	r3, #41	; 0x29
     4b2:	18fb      	adds	r3, r7, r3
     4b4:	781b      	ldrb	r3, [r3, #0]
     4b6:	1c5a      	adds	r2, r3, #1
     4b8:	231c      	movs	r3, #28
     4ba:	18fb      	adds	r3, r7, r3
     4bc:	0052      	lsls	r2, r2, #1
     4be:	5ad3      	ldrh	r3, [r2, r3]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     4c0:	0019      	movs	r1, r3
     4c2:	2002      	movs	r0, #2
     4c4:	4b68      	ldr	r3, [pc, #416]	; (668 <tc_init+0x348>)
     4c6:	4798      	blx	r3
				inst_pm_apbmask[instance + 1]);
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
     4c8:	2314      	movs	r3, #20
     4ca:	18fb      	adds	r3, r7, r3
     4cc:	0018      	movs	r0, r3
     4ce:	4b67      	ldr	r3, [pc, #412]	; (66c <tc_init+0x34c>)
     4d0:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
     4d2:	687b      	ldr	r3, [r7, #4]
     4d4:	781a      	ldrb	r2, [r3, #0]
     4d6:	2314      	movs	r3, #20
     4d8:	18fb      	adds	r3, r7, r3
     4da:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
     4dc:	2329      	movs	r3, #41	; 0x29
     4de:	18fb      	adds	r3, r7, r3
     4e0:	781b      	ldrb	r3, [r3, #0]
     4e2:	2224      	movs	r2, #36	; 0x24
     4e4:	18ba      	adds	r2, r7, r2
     4e6:	5cd3      	ldrb	r3, [r2, r3]
     4e8:	2214      	movs	r2, #20
     4ea:	18ba      	adds	r2, r7, r2
     4ec:	0011      	movs	r1, r2
     4ee:	0018      	movs	r0, r3
     4f0:	4b5f      	ldr	r3, [pc, #380]	; (670 <tc_init+0x350>)
     4f2:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
     4f4:	2329      	movs	r3, #41	; 0x29
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	781b      	ldrb	r3, [r3, #0]
     4fa:	2224      	movs	r2, #36	; 0x24
     4fc:	18ba      	adds	r2, r7, r2
     4fe:	5cd3      	ldrb	r3, [r2, r3]
     500:	0018      	movs	r0, r3
     502:	4b5c      	ldr	r3, [pc, #368]	; (674 <tc_init+0x354>)
     504:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
     506:	687b      	ldr	r3, [r7, #4]
     508:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
     50a:	687b      	ldr	r3, [r7, #4]
     50c:	799b      	ldrb	r3, [r3, #6]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     50e:	4313      	orrs	r3, r2
     510:	b2db      	uxtb	r3, r3
     512:	b29a      	uxth	r2, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
     514:	687b      	ldr	r3, [r7, #4]
     516:	891b      	ldrh	r3, [r3, #8]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     518:	4313      	orrs	r3, r2
     51a:	b299      	uxth	r1, r3
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;
     51c:	687b      	ldr	r3, [r7, #4]
     51e:	889a      	ldrh	r2, [r3, #4]
	gclk_chan_config.source_generator = config->clock_source;
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
	system_gclk_chan_enable(inst_gclk_id[instance]);

	/* Set ctrla register */
	ctrla_tmp =
     520:	232e      	movs	r3, #46	; 0x2e
     522:	18fb      	adds	r3, r7, r3
     524:	430a      	orrs	r2, r1
     526:	801a      	strh	r2, [r3, #0]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
     528:	687b      	ldr	r3, [r7, #4]
     52a:	785b      	ldrb	r3, [r3, #1]
     52c:	2b00      	cmp	r3, #0
     52e:	d008      	beq.n	542 <tc_init+0x222>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
     530:	232e      	movs	r3, #46	; 0x2e
     532:	18fb      	adds	r3, r7, r3
     534:	222e      	movs	r2, #46	; 0x2e
     536:	18ba      	adds	r2, r7, r2
     538:	8812      	ldrh	r2, [r2, #0]
     53a:	2180      	movs	r1, #128	; 0x80
     53c:	0109      	lsls	r1, r1, #4
     53e:	430a      	orrs	r2, r1
     540:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     542:	46c0      	nop			; (mov r8, r8)
     544:	68fb      	ldr	r3, [r7, #12]
     546:	0018      	movs	r0, r3
     548:	4b4b      	ldr	r3, [pc, #300]	; (678 <tc_init+0x358>)
     54a:	4798      	blx	r3
     54c:	1e03      	subs	r3, r0, #0
     54e:	d1f9      	bne.n	544 <tc_init+0x224>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
     550:	68bb      	ldr	r3, [r7, #8]
     552:	222e      	movs	r2, #46	; 0x2e
     554:	18ba      	adds	r2, r7, r2
     556:	8812      	ldrh	r2, [r2, #0]
     558:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
     55a:	687b      	ldr	r3, [r7, #4]
     55c:	7b5b      	ldrb	r3, [r3, #13]
     55e:	2b00      	cmp	r3, #0
     560:	d003      	beq.n	56a <tc_init+0x24a>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
     562:	232d      	movs	r3, #45	; 0x2d
     564:	18fb      	adds	r3, r7, r3
     566:	2204      	movs	r2, #4
     568:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
     56a:	687b      	ldr	r3, [r7, #4]
     56c:	7b9b      	ldrb	r3, [r3, #14]
     56e:	2b00      	cmp	r3, #0
     570:	d007      	beq.n	582 <tc_init+0x262>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
     572:	232d      	movs	r3, #45	; 0x2d
     574:	18fb      	adds	r3, r7, r3
     576:	222d      	movs	r2, #45	; 0x2d
     578:	18ba      	adds	r2, r7, r2
     57a:	7812      	ldrb	r2, [r2, #0]
     57c:	2101      	movs	r1, #1
     57e:	430a      	orrs	r2, r1
     580:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
     582:	46c0      	nop			; (mov r8, r8)
     584:	68fb      	ldr	r3, [r7, #12]
     586:	0018      	movs	r0, r3
     588:	4b3b      	ldr	r3, [pc, #236]	; (678 <tc_init+0x358>)
     58a:	4798      	blx	r3
     58c:	1e03      	subs	r3, r0, #0
     58e:	d1f9      	bne.n	584 <tc_init+0x264>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
     590:	68bb      	ldr	r3, [r7, #8]
     592:	22ff      	movs	r2, #255	; 0xff
     594:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
     596:	232d      	movs	r3, #45	; 0x2d
     598:	18fb      	adds	r3, r7, r3
     59a:	781b      	ldrb	r3, [r3, #0]
     59c:	2b00      	cmp	r3, #0
     59e:	d00b      	beq.n	5b8 <tc_init+0x298>
		while (tc_is_syncing(module_inst)) {
     5a0:	46c0      	nop			; (mov r8, r8)
     5a2:	68fb      	ldr	r3, [r7, #12]
     5a4:	0018      	movs	r0, r3
     5a6:	4b34      	ldr	r3, [pc, #208]	; (678 <tc_init+0x358>)
     5a8:	4798      	blx	r3
     5aa:	1e03      	subs	r3, r0, #0
     5ac:	d1f9      	bne.n	5a2 <tc_init+0x282>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
     5ae:	68bb      	ldr	r3, [r7, #8]
     5b0:	222d      	movs	r2, #45	; 0x2d
     5b2:	18ba      	adds	r2, r7, r2
     5b4:	7812      	ldrb	r2, [r2, #0]
     5b6:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
     5b8:	232c      	movs	r3, #44	; 0x2c
     5ba:	18fb      	adds	r3, r7, r3
     5bc:	687a      	ldr	r2, [r7, #4]
     5be:	7a92      	ldrb	r2, [r2, #10]
     5c0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     5c2:	232a      	movs	r3, #42	; 0x2a
     5c4:	18fb      	adds	r3, r7, r3
     5c6:	2200      	movs	r2, #0
     5c8:	701a      	strb	r2, [r3, #0]
     5ca:	e01c      	b.n	606 <tc_init+0x2e6>
		if (config->enable_capture_on_channel[i] == true) {
     5cc:	232a      	movs	r3, #42	; 0x2a
     5ce:	18fb      	adds	r3, r7, r3
     5d0:	781b      	ldrb	r3, [r3, #0]
     5d2:	687a      	ldr	r2, [r7, #4]
     5d4:	18d3      	adds	r3, r2, r3
     5d6:	7adb      	ldrb	r3, [r3, #11]
     5d8:	2b00      	cmp	r3, #0
     5da:	d00d      	beq.n	5f8 <tc_init+0x2d8>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
     5dc:	232a      	movs	r3, #42	; 0x2a
     5de:	18fb      	adds	r3, r7, r3
     5e0:	781b      	ldrb	r3, [r3, #0]
     5e2:	2210      	movs	r2, #16
     5e4:	409a      	lsls	r2, r3
     5e6:	0013      	movs	r3, r2
     5e8:	b2d9      	uxtb	r1, r3
     5ea:	232c      	movs	r3, #44	; 0x2c
     5ec:	18fb      	adds	r3, r7, r3
     5ee:	222c      	movs	r2, #44	; 0x2c
     5f0:	18ba      	adds	r2, r7, r2
     5f2:	7812      	ldrb	r2, [r2, #0]
     5f4:	430a      	orrs	r2, r1
     5f6:	701a      	strb	r2, [r3, #0]
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     5f8:	232a      	movs	r3, #42	; 0x2a
     5fa:	18fb      	adds	r3, r7, r3
     5fc:	781a      	ldrb	r2, [r3, #0]
     5fe:	232a      	movs	r3, #42	; 0x2a
     600:	18fb      	adds	r3, r7, r3
     602:	3201      	adds	r2, #1
     604:	701a      	strb	r2, [r3, #0]
     606:	232a      	movs	r3, #42	; 0x2a
     608:	18fb      	adds	r3, r7, r3
     60a:	781b      	ldrb	r3, [r3, #0]
     60c:	2b01      	cmp	r3, #1
     60e:	d9dd      	bls.n	5cc <tc_init+0x2ac>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     610:	46c0      	nop			; (mov r8, r8)
     612:	68fb      	ldr	r3, [r7, #12]
     614:	0018      	movs	r0, r3
     616:	4b18      	ldr	r3, [pc, #96]	; (678 <tc_init+0x358>)
     618:	4798      	blx	r3
     61a:	1e03      	subs	r3, r0, #0
     61c:	d1f9      	bne.n	612 <tc_init+0x2f2>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
     61e:	68bb      	ldr	r3, [r7, #8]
     620:	222c      	movs	r2, #44	; 0x2c
     622:	18ba      	adds	r2, r7, r2
     624:	7812      	ldrb	r2, [r2, #0]
     626:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
     628:	46c0      	nop			; (mov r8, r8)
     62a:	68fb      	ldr	r3, [r7, #12]
     62c:	0018      	movs	r0, r3
     62e:	4b12      	ldr	r3, [pc, #72]	; (678 <tc_init+0x358>)
     630:	4798      	blx	r3
     632:	1e03      	subs	r3, r0, #0
     634:	d1f9      	bne.n	62a <tc_init+0x30a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
     636:	68fb      	ldr	r3, [r7, #12]
     638:	791b      	ldrb	r3, [r3, #4]
     63a:	2b04      	cmp	r3, #4
     63c:	d01e      	beq.n	67c <tc_init+0x35c>
     63e:	2b08      	cmp	r3, #8
     640:	d100      	bne.n	644 <tc_init+0x324>
     642:	e070      	b.n	726 <tc_init+0x406>
     644:	2b00      	cmp	r3, #0
     646:	d04b      	beq.n	6e0 <tc_init+0x3c0>
     648:	e090      	b.n	76c <tc_init+0x44c>
     64a:	46c0      	nop			; (mov r8, r8)
     64c:	000002d9 	.word	0x000002d9
     650:	000112b4 	.word	0x000112b4
     654:	0000fb09 	.word	0x0000fb09
     658:	000112b8 	.word	0x000112b8
     65c:	200045b0 	.word	0x200045b0
     660:	00000289 	.word	0x00000289
     664:	0000ac65 	.word	0x0000ac65
     668:	0000022d 	.word	0x0000022d
     66c:	00000215 	.word	0x00000215
     670:	0000a979 	.word	0x0000a979
     674:	0000a9bd 	.word	0x0000a9bd
     678:	000002b1 	.word	0x000002b1
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
     67c:	46c0      	nop			; (mov r8, r8)
     67e:	68fb      	ldr	r3, [r7, #12]
     680:	0018      	movs	r0, r3
     682:	4b3d      	ldr	r3, [pc, #244]	; (778 <tc_init+0x458>)
     684:	4798      	blx	r3
     686:	1e03      	subs	r3, r0, #0
     688:	d1f9      	bne.n	67e <tc_init+0x35e>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	2228      	movs	r2, #40	; 0x28
     68e:	5c9a      	ldrb	r2, [r3, r2]
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
     690:	68bb      	ldr	r3, [r7, #8]
     692:	741a      	strb	r2, [r3, #16]
					config->counter_8_bit.value;


			while (tc_is_syncing(module_inst)) {
     694:	46c0      	nop			; (mov r8, r8)
     696:	68fb      	ldr	r3, [r7, #12]
     698:	0018      	movs	r0, r3
     69a:	4b37      	ldr	r3, [pc, #220]	; (778 <tc_init+0x458>)
     69c:	4798      	blx	r3
     69e:	1e03      	subs	r3, r0, #0
     6a0:	d1f9      	bne.n	696 <tc_init+0x376>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	2229      	movs	r2, #41	; 0x29
     6a6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
     6a8:	68bb      	ldr	r3, [r7, #8]
     6aa:	751a      	strb	r2, [r3, #20]
					config->counter_8_bit.period;

			while (tc_is_syncing(module_inst)) {
     6ac:	46c0      	nop			; (mov r8, r8)
     6ae:	68fb      	ldr	r3, [r7, #12]
     6b0:	0018      	movs	r0, r3
     6b2:	4b31      	ldr	r3, [pc, #196]	; (778 <tc_init+0x458>)
     6b4:	4798      	blx	r3
     6b6:	1e03      	subs	r3, r0, #0
     6b8:	d1f9      	bne.n	6ae <tc_init+0x38e>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
     6ba:	687b      	ldr	r3, [r7, #4]
     6bc:	222a      	movs	r2, #42	; 0x2a
     6be:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
     6c0:	68bb      	ldr	r3, [r7, #8]
     6c2:	761a      	strb	r2, [r3, #24]
					config->counter_8_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     6c4:	46c0      	nop			; (mov r8, r8)
     6c6:	68fb      	ldr	r3, [r7, #12]
     6c8:	0018      	movs	r0, r3
     6ca:	4b2b      	ldr	r3, [pc, #172]	; (778 <tc_init+0x458>)
     6cc:	4798      	blx	r3
     6ce:	1e03      	subs	r3, r0, #0
     6d0:	d1f9      	bne.n	6c6 <tc_init+0x3a6>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
     6d2:	687b      	ldr	r3, [r7, #4]
     6d4:	222b      	movs	r2, #43	; 0x2b
     6d6:	5c9a      	ldrb	r2, [r3, r2]

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
     6d8:	68bb      	ldr	r3, [r7, #8]
     6da:	765a      	strb	r2, [r3, #25]
					config->counter_8_bit.compare_capture_channel[1];

			return STATUS_OK;
     6dc:	2300      	movs	r3, #0
     6de:	e046      	b.n	76e <tc_init+0x44e>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
     6e0:	46c0      	nop			; (mov r8, r8)
     6e2:	68fb      	ldr	r3, [r7, #12]
     6e4:	0018      	movs	r0, r3
     6e6:	4b24      	ldr	r3, [pc, #144]	; (778 <tc_init+0x458>)
     6e8:	4798      	blx	r3
     6ea:	1e03      	subs	r3, r0, #0
     6ec:	d1f9      	bne.n	6e2 <tc_init+0x3c2>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
     6ee:	687b      	ldr	r3, [r7, #4]
     6f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
     6f2:	68bb      	ldr	r3, [r7, #8]
     6f4:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     6f6:	46c0      	nop			; (mov r8, r8)
     6f8:	68fb      	ldr	r3, [r7, #12]
     6fa:	0018      	movs	r0, r3
     6fc:	4b1e      	ldr	r3, [pc, #120]	; (778 <tc_init+0x458>)
     6fe:	4798      	blx	r3
     700:	1e03      	subs	r3, r0, #0
     702:	d1f9      	bne.n	6f8 <tc_init+0x3d8>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
     704:	687b      	ldr	r3, [r7, #4]
     706:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
     708:	68bb      	ldr	r3, [r7, #8]
     70a:	831a      	strh	r2, [r3, #24]
					config->counter_16_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     70c:	46c0      	nop			; (mov r8, r8)
     70e:	68fb      	ldr	r3, [r7, #12]
     710:	0018      	movs	r0, r3
     712:	4b19      	ldr	r3, [pc, #100]	; (778 <tc_init+0x458>)
     714:	4798      	blx	r3
     716:	1e03      	subs	r3, r0, #0
     718:	d1f9      	bne.n	70e <tc_init+0x3ee>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
     71e:	68bb      	ldr	r3, [r7, #8]
     720:	835a      	strh	r2, [r3, #26]
					config->counter_16_bit.compare_capture_channel[1];

			return STATUS_OK;
     722:	2300      	movs	r3, #0
     724:	e023      	b.n	76e <tc_init+0x44e>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
     726:	46c0      	nop			; (mov r8, r8)
     728:	68fb      	ldr	r3, [r7, #12]
     72a:	0018      	movs	r0, r3
     72c:	4b12      	ldr	r3, [pc, #72]	; (778 <tc_init+0x458>)
     72e:	4798      	blx	r3
     730:	1e03      	subs	r3, r0, #0
     732:	d1f9      	bne.n	728 <tc_init+0x408>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
     734:	687b      	ldr	r3, [r7, #4]
     736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
     738:	68bb      	ldr	r3, [r7, #8]
     73a:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
     73c:	46c0      	nop			; (mov r8, r8)
     73e:	68fb      	ldr	r3, [r7, #12]
     740:	0018      	movs	r0, r3
     742:	4b0d      	ldr	r3, [pc, #52]	; (778 <tc_init+0x458>)
     744:	4798      	blx	r3
     746:	1e03      	subs	r3, r0, #0
     748:	d1f9      	bne.n	73e <tc_init+0x41e>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
     74e:	68bb      	ldr	r3, [r7, #8]
     750:	619a      	str	r2, [r3, #24]
					config->counter_32_bit.compare_capture_channel[0];

			while (tc_is_syncing(module_inst)) {
     752:	46c0      	nop			; (mov r8, r8)
     754:	68fb      	ldr	r3, [r7, #12]
     756:	0018      	movs	r0, r3
     758:	4b07      	ldr	r3, [pc, #28]	; (778 <tc_init+0x458>)
     75a:	4798      	blx	r3
     75c:	1e03      	subs	r3, r0, #0
     75e:	d1f9      	bne.n	754 <tc_init+0x434>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
     760:	687b      	ldr	r3, [r7, #4]
     762:	6b1a      	ldr	r2, [r3, #48]	; 0x30

			while (tc_is_syncing(module_inst)) {
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
     764:	68bb      	ldr	r3, [r7, #8]
     766:	61da      	str	r2, [r3, #28]
					config->counter_32_bit.compare_capture_channel[1];

			return STATUS_OK;
     768:	2300      	movs	r3, #0
     76a:	e000      	b.n	76e <tc_init+0x44e>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
     76c:	2317      	movs	r3, #23
}
     76e:	0018      	movs	r0, r3
     770:	46bd      	mov	sp, r7
     772:	b00d      	add	sp, #52	; 0x34
     774:	bd90      	pop	{r4, r7, pc}
     776:	46c0      	nop			; (mov r8, r8)
     778:	000002b1 	.word	0x000002b1

0000077c <tc_set_count_value>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid timer counter size was specified
 */
enum status_code tc_set_count_value(
		const struct tc_module *const module_inst,
		const uint32_t count)
{
     77c:	b580      	push	{r7, lr}
     77e:	b084      	sub	sp, #16
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
     784:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance*/
	Tc *const tc_module = module_inst->hw;
     786:	687b      	ldr	r3, [r7, #4]
     788:	681b      	ldr	r3, [r3, #0]
     78a:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     78c:	46c0      	nop			; (mov r8, r8)
     78e:	687b      	ldr	r3, [r7, #4]
     790:	0018      	movs	r0, r3
     792:	4b11      	ldr	r3, [pc, #68]	; (7d8 <tc_set_count_value+0x5c>)
     794:	4798      	blx	r3
     796:	1e03      	subs	r3, r0, #0
     798:	d1f9      	bne.n	78e <tc_set_count_value+0x12>
		/* Wait for sync */
	}

	/* Write to based on the TC counter_size */
	switch (module_inst->counter_size) {
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	791b      	ldrb	r3, [r3, #4]
     79e:	2b04      	cmp	r3, #4
     7a0:	d004      	beq.n	7ac <tc_set_count_value+0x30>
     7a2:	2b08      	cmp	r3, #8
     7a4:	d00e      	beq.n	7c4 <tc_set_count_value+0x48>
     7a6:	2b00      	cmp	r3, #0
     7a8:	d006      	beq.n	7b8 <tc_set_count_value+0x3c>
     7aa:	e010      	b.n	7ce <tc_set_count_value+0x52>
		case TC_COUNTER_SIZE_8BIT:
			tc_module->COUNT8.COUNT.reg  = (uint8_t)count;
     7ac:	683b      	ldr	r3, [r7, #0]
     7ae:	b2da      	uxtb	r2, r3
     7b0:	68fb      	ldr	r3, [r7, #12]
     7b2:	741a      	strb	r2, [r3, #16]
			return STATUS_OK;
     7b4:	2300      	movs	r3, #0
     7b6:	e00b      	b.n	7d0 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_16BIT:
			tc_module->COUNT16.COUNT.reg = (uint16_t)count;
     7b8:	683b      	ldr	r3, [r7, #0]
     7ba:	b29a      	uxth	r2, r3
     7bc:	68fb      	ldr	r3, [r7, #12]
     7be:	821a      	strh	r2, [r3, #16]
			return STATUS_OK;
     7c0:	2300      	movs	r3, #0
     7c2:	e005      	b.n	7d0 <tc_set_count_value+0x54>

		case TC_COUNTER_SIZE_32BIT:
			tc_module->COUNT32.COUNT.reg = (uint32_t)count;
     7c4:	68fb      	ldr	r3, [r7, #12]
     7c6:	683a      	ldr	r2, [r7, #0]
     7c8:	611a      	str	r2, [r3, #16]
			return STATUS_OK;
     7ca:	2300      	movs	r3, #0
     7cc:	e000      	b.n	7d0 <tc_set_count_value+0x54>

		default:
			return STATUS_ERR_INVALID_ARG;
     7ce:	2317      	movs	r3, #23
	}
}
     7d0:	0018      	movs	r0, r3
     7d2:	46bd      	mov	sp, r7
     7d4:	b004      	add	sp, #16
     7d6:	bd80      	pop	{r7, pc}
     7d8:	000002b1 	.word	0x000002b1

000007dc <display_update>:
};

SemaphoreHandle_t display_update_mutex;

static void display_update(bool update)
{
     7dc:	b580      	push	{r7, lr}
     7de:	b082      	sub	sp, #8
     7e0:	af00      	add	r7, sp, #0
     7e2:	0002      	movs	r2, r0
     7e4:	1dfb      	adds	r3, r7, #7
     7e6:	701a      	strb	r2, [r3, #0]
    taskENTER_CRITICAL();
     7e8:	4b08      	ldr	r3, [pc, #32]	; (80c <display_update+0x30>)
     7ea:	4798      	blx	r3
    /*if (!xSemaphoreTake(display_update_mutex, portMAX_DELAY)) {
        return;
    }*/
    display_state.display_update = update;
     7ec:	4b08      	ldr	r3, [pc, #32]	; (810 <display_update+0x34>)
     7ee:	1dfa      	adds	r2, r7, #7
     7f0:	7812      	ldrb	r2, [r2, #0]
     7f2:	725a      	strb	r2, [r3, #9]
    display_state.display_blink = false;
     7f4:	4b06      	ldr	r3, [pc, #24]	; (810 <display_update+0x34>)
     7f6:	2200      	movs	r2, #0
     7f8:	729a      	strb	r2, [r3, #10]
    display_state.display_blink_timer = 0;
     7fa:	4b05      	ldr	r3, [pc, #20]	; (810 <display_update+0x34>)
     7fc:	2200      	movs	r2, #0
     7fe:	72da      	strb	r2, [r3, #11]
    //xSemaphoreGive(display_update_mutex);
    taskEXIT_CRITICAL();
     800:	4b04      	ldr	r3, [pc, #16]	; (814 <display_update+0x38>)
     802:	4798      	blx	r3
}
     804:	46c0      	nop			; (mov r8, r8)
     806:	46bd      	mov	sp, r7
     808:	b002      	add	sp, #8
     80a:	bd80      	pop	{r7, pc}
     80c:	0000b2b9 	.word	0x0000b2b9
     810:	20004600 	.word	0x20004600
     814:	0000b2dd 	.word	0x0000b2dd

00000818 <display_number_to_seg>:

static void display_number_to_seg(uint8_t num, uint8_t *chars)
{
     818:	b590      	push	{r4, r7, lr}
     81a:	b083      	sub	sp, #12
     81c:	af00      	add	r7, sp, #0
     81e:	0002      	movs	r2, r0
     820:	6039      	str	r1, [r7, #0]
     822:	1dfb      	adds	r3, r7, #7
     824:	701a      	strb	r2, [r3, #0]
    if (num / 100)
     826:	1dfb      	adds	r3, r7, #7
     828:	781b      	ldrb	r3, [r3, #0]
     82a:	2b63      	cmp	r3, #99	; 0x63
     82c:	d90d      	bls.n	84a <display_number_to_seg+0x32>
        chars[0] = num_to_seg[num/100];
     82e:	1dfb      	adds	r3, r7, #7
     830:	781a      	ldrb	r2, [r3, #0]
     832:	4b25      	ldr	r3, [pc, #148]	; (8c8 <display_number_to_seg+0xb0>)
     834:	2164      	movs	r1, #100	; 0x64
     836:	0010      	movs	r0, r2
     838:	4798      	blx	r3
     83a:	0003      	movs	r3, r0
     83c:	b2db      	uxtb	r3, r3
     83e:	001a      	movs	r2, r3
     840:	4b22      	ldr	r3, [pc, #136]	; (8cc <display_number_to_seg+0xb4>)
     842:	5c9a      	ldrb	r2, [r3, r2]
     844:	683b      	ldr	r3, [r7, #0]
     846:	701a      	strb	r2, [r3, #0]
     848:	e002      	b.n	850 <display_number_to_seg+0x38>
    else
        chars[0] = SEG_OFF;
     84a:	683b      	ldr	r3, [r7, #0]
     84c:	2200      	movs	r2, #0
     84e:	701a      	strb	r2, [r3, #0]

    num -= (num / 100) * 100;    
     850:	1dfb      	adds	r3, r7, #7
     852:	781a      	ldrb	r2, [r3, #0]
     854:	4b1c      	ldr	r3, [pc, #112]	; (8c8 <display_number_to_seg+0xb0>)
     856:	2164      	movs	r1, #100	; 0x64
     858:	0010      	movs	r0, r2
     85a:	4798      	blx	r3
     85c:	0003      	movs	r3, r0
     85e:	b2db      	uxtb	r3, r3
     860:	2264      	movs	r2, #100	; 0x64
     862:	4252      	negs	r2, r2
     864:	4353      	muls	r3, r2
     866:	b2d9      	uxtb	r1, r3
     868:	1dfb      	adds	r3, r7, #7
     86a:	1dfa      	adds	r2, r7, #7
     86c:	7812      	ldrb	r2, [r2, #0]
     86e:	188a      	adds	r2, r1, r2
     870:	701a      	strb	r2, [r3, #0]
    chars[1] = num_to_seg[num / 10];
     872:	683b      	ldr	r3, [r7, #0]
     874:	1c5c      	adds	r4, r3, #1
     876:	1dfb      	adds	r3, r7, #7
     878:	781a      	ldrb	r2, [r3, #0]
     87a:	4b13      	ldr	r3, [pc, #76]	; (8c8 <display_number_to_seg+0xb0>)
     87c:	210a      	movs	r1, #10
     87e:	0010      	movs	r0, r2
     880:	4798      	blx	r3
     882:	0003      	movs	r3, r0
     884:	b2db      	uxtb	r3, r3
     886:	001a      	movs	r2, r3
     888:	4b10      	ldr	r3, [pc, #64]	; (8cc <display_number_to_seg+0xb4>)
     88a:	5c9b      	ldrb	r3, [r3, r2]
     88c:	7023      	strb	r3, [r4, #0]

    num -= (num / 10) * 10;    
     88e:	1dfb      	adds	r3, r7, #7
     890:	781a      	ldrb	r2, [r3, #0]
     892:	4b0d      	ldr	r3, [pc, #52]	; (8c8 <display_number_to_seg+0xb0>)
     894:	210a      	movs	r1, #10
     896:	0010      	movs	r0, r2
     898:	4798      	blx	r3
     89a:	0003      	movs	r3, r0
     89c:	b2db      	uxtb	r3, r3
     89e:	220a      	movs	r2, #10
     8a0:	4252      	negs	r2, r2
     8a2:	4353      	muls	r3, r2
     8a4:	b2d9      	uxtb	r1, r3
     8a6:	1dfb      	adds	r3, r7, #7
     8a8:	1dfa      	adds	r2, r7, #7
     8aa:	7812      	ldrb	r2, [r2, #0]
     8ac:	188a      	adds	r2, r1, r2
     8ae:	701a      	strb	r2, [r3, #0]
    chars[2] = num_to_seg[num];
     8b0:	683b      	ldr	r3, [r7, #0]
     8b2:	3302      	adds	r3, #2
     8b4:	1dfa      	adds	r2, r7, #7
     8b6:	7812      	ldrb	r2, [r2, #0]
     8b8:	4904      	ldr	r1, [pc, #16]	; (8cc <display_number_to_seg+0xb4>)
     8ba:	5c8a      	ldrb	r2, [r1, r2]
     8bc:	701a      	strb	r2, [r3, #0]
}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	46bd      	mov	sp, r7
     8c2:	b003      	add	sp, #12
     8c4:	bd90      	pop	{r4, r7, pc}
     8c6:	46c0      	nop			; (mov r8, r8)
     8c8:	0000ef99 	.word	0x0000ef99
     8cc:	000112c0 	.word	0x000112c0

000008d0 <display_button_lock_unlock_handler>:

static void display_button_lock_unlock_handler(void)
{
     8d0:	b5b0      	push	{r4, r5, r7, lr}
     8d2:	af00      	add	r7, sp, #0
    if (display_state.display_locked) {
     8d4:	4b10      	ldr	r3, [pc, #64]	; (918 <display_button_lock_unlock_handler+0x48>)
     8d6:	7b1b      	ldrb	r3, [r3, #12]
     8d8:	2b00      	cmp	r3, #0
     8da:	d019      	beq.n	910 <display_button_lock_unlock_handler+0x40>
        if (display_state.display_unlock_timer++ > DISPLAY_UNLOCK_TIME) {
     8dc:	4b0e      	ldr	r3, [pc, #56]	; (918 <display_button_lock_unlock_handler+0x48>)
     8de:	695b      	ldr	r3, [r3, #20]
     8e0:	1c59      	adds	r1, r3, #1
     8e2:	4a0d      	ldr	r2, [pc, #52]	; (918 <display_button_lock_unlock_handler+0x48>)
     8e4:	6151      	str	r1, [r2, #20]
     8e6:	2b10      	cmp	r3, #16
     8e8:	d912      	bls.n	910 <display_button_lock_unlock_handler+0x40>
            xSemaphoreGive(buzzer_sem);
     8ea:	4b0c      	ldr	r3, [pc, #48]	; (91c <display_button_lock_unlock_handler+0x4c>)
     8ec:	6818      	ldr	r0, [r3, #0]
     8ee:	2300      	movs	r3, #0
     8f0:	2200      	movs	r2, #0
     8f2:	2100      	movs	r1, #0
     8f4:	4c0a      	ldr	r4, [pc, #40]	; (920 <display_button_lock_unlock_handler+0x50>)
     8f6:	47a0      	blx	r4
            display_state.display_locked = false;
     8f8:	4b07      	ldr	r3, [pc, #28]	; (918 <display_button_lock_unlock_handler+0x48>)
     8fa:	2200      	movs	r2, #0
     8fc:	731a      	strb	r2, [r3, #12]
            display_state.display_unlock_timer = 0;
     8fe:	4b06      	ldr	r3, [pc, #24]	; (918 <display_button_lock_unlock_handler+0x48>)
     900:	2200      	movs	r2, #0
     902:	615a      	str	r2, [r3, #20]
            display_state.display_lock_timer = 0;
     904:	4b04      	ldr	r3, [pc, #16]	; (918 <display_button_lock_unlock_handler+0x48>)
     906:	2200      	movs	r2, #0
     908:	611a      	str	r2, [r3, #16]
            display_update(true);            
     90a:	2001      	movs	r0, #1
     90c:	4b05      	ldr	r3, [pc, #20]	; (924 <display_button_lock_unlock_handler+0x54>)
     90e:	4798      	blx	r3
        }                
    }
}
     910:	46c0      	nop			; (mov r8, r8)
     912:	46bd      	mov	sp, r7
     914:	bdb0      	pop	{r4, r5, r7, pc}
     916:	46c0      	nop			; (mov r8, r8)
     918:	20004600 	.word	0x20004600
     91c:	20004618 	.word	0x20004618
     920:	0000b679 	.word	0x0000b679
     924:	000007dd 	.word	0x000007dd

00000928 <display_timer_handler>:

static void display_timer_handler(void)
{
     928:	b5b0      	push	{r4, r5, r7, lr}
     92a:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     92c:	4b09      	ldr	r3, [pc, #36]	; (954 <display_timer_handler+0x2c>)
     92e:	7b1b      	ldrb	r3, [r3, #12]
     930:	2201      	movs	r2, #1
     932:	4053      	eors	r3, r2
     934:	b2db      	uxtb	r3, r3
     936:	2b00      	cmp	r3, #0
     938:	d009      	beq.n	94e <display_timer_handler+0x26>
        display_state.display_lock_timer = 0;
     93a:	4b06      	ldr	r3, [pc, #24]	; (954 <display_timer_handler+0x2c>)
     93c:	2200      	movs	r2, #0
     93e:	611a      	str	r2, [r3, #16]
        xSemaphoreGive(buzzer_sem);
     940:	4b05      	ldr	r3, [pc, #20]	; (958 <display_timer_handler+0x30>)
     942:	6818      	ldr	r0, [r3, #0]
     944:	2300      	movs	r3, #0
     946:	2200      	movs	r2, #0
     948:	2100      	movs	r1, #0
     94a:	4c04      	ldr	r4, [pc, #16]	; (95c <display_timer_handler+0x34>)
     94c:	47a0      	blx	r4
    }

}
     94e:	46c0      	nop			; (mov r8, r8)
     950:	46bd      	mov	sp, r7
     952:	bdb0      	pop	{r4, r5, r7, pc}
     954:	20004600 	.word	0x20004600
     958:	20004618 	.word	0x20004618
     95c:	0000b679 	.word	0x0000b679

00000960 <display_button_water_pump_handler>:

static void display_button_water_pump_handler(void)
{
     960:	b5b0      	push	{r4, r5, r7, lr}
     962:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     964:	4b17      	ldr	r3, [pc, #92]	; (9c4 <display_button_water_pump_handler+0x64>)
     966:	7b1b      	ldrb	r3, [r3, #12]
     968:	2201      	movs	r2, #1
     96a:	4053      	eors	r3, r2
     96c:	b2db      	uxtb	r3, r3
     96e:	2b00      	cmp	r3, #0
     970:	d025      	beq.n	9be <display_button_water_pump_handler+0x5e>
        xSemaphoreGive(buzzer_sem);
     972:	4b15      	ldr	r3, [pc, #84]	; (9c8 <display_button_water_pump_handler+0x68>)
     974:	6818      	ldr	r0, [r3, #0]
     976:	2300      	movs	r3, #0
     978:	2200      	movs	r2, #0
     97a:	2100      	movs	r1, #0
     97c:	4c13      	ldr	r4, [pc, #76]	; (9cc <display_button_water_pump_handler+0x6c>)
     97e:	47a0      	blx	r4
        display_state.display_lock_timer = 0;    
     980:	4b10      	ldr	r3, [pc, #64]	; (9c4 <display_button_water_pump_handler+0x64>)
     982:	2200      	movs	r2, #0
     984:	611a      	str	r2, [r3, #16]
        
        // Water and air pump cannot run at the same time
        if (display_state.bubbles_on) {
     986:	4b0f      	ldr	r3, [pc, #60]	; (9c4 <display_button_water_pump_handler+0x64>)
     988:	79db      	ldrb	r3, [r3, #7]
     98a:	2b00      	cmp	r3, #0
     98c:	d002      	beq.n	994 <display_button_water_pump_handler+0x34>
            display_state.bubbles_on = false;
     98e:	4b0d      	ldr	r3, [pc, #52]	; (9c4 <display_button_water_pump_handler+0x64>)
     990:	2200      	movs	r2, #0
     992:	71da      	strb	r2, [r3, #7]

            // TODO: open air pump relay
        }
        
        if (display_state.pump_on) {
     994:	4b0b      	ldr	r3, [pc, #44]	; (9c4 <display_button_water_pump_handler+0x64>)
     996:	7a1b      	ldrb	r3, [r3, #8]
     998:	2b00      	cmp	r3, #0
     99a:	d00a      	beq.n	9b2 <display_button_water_pump_handler+0x52>
            display_state.pump_on = false;
     99c:	4b09      	ldr	r3, [pc, #36]	; (9c4 <display_button_water_pump_handler+0x64>)
     99e:	2200      	movs	r2, #0
     9a0:	721a      	strb	r2, [r3, #8]

            // Pump is already on. Open pump and heater relays (if heater is on)
            if (display_state.heater_on) {
     9a2:	4b08      	ldr	r3, [pc, #32]	; (9c4 <display_button_water_pump_handler+0x64>)
     9a4:	799b      	ldrb	r3, [r3, #6]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d006      	beq.n	9b8 <display_button_water_pump_handler+0x58>
                display_state.heater_on = false;
     9aa:	4b06      	ldr	r3, [pc, #24]	; (9c4 <display_button_water_pump_handler+0x64>)
     9ac:	2200      	movs	r2, #0
     9ae:	719a      	strb	r2, [r3, #6]
     9b0:	e002      	b.n	9b8 <display_button_water_pump_handler+0x58>
                // TODO: open heater relay
            }

        }
        else {
            display_state.pump_on = true;
     9b2:	4b04      	ldr	r3, [pc, #16]	; (9c4 <display_button_water_pump_handler+0x64>)
     9b4:	2201      	movs	r2, #1
     9b6:	721a      	strb	r2, [r3, #8]

            // TODO: close pump relay

        }
                
        display_update(true);
     9b8:	2001      	movs	r0, #1
     9ba:	4b05      	ldr	r3, [pc, #20]	; (9d0 <display_button_water_pump_handler+0x70>)
     9bc:	4798      	blx	r3
    }
}
     9be:	46c0      	nop			; (mov r8, r8)
     9c0:	46bd      	mov	sp, r7
     9c2:	bdb0      	pop	{r4, r5, r7, pc}
     9c4:	20004600 	.word	0x20004600
     9c8:	20004618 	.word	0x20004618
     9cc:	0000b679 	.word	0x0000b679
     9d0:	000007dd 	.word	0x000007dd

000009d4 <display_cf_handler>:

static void display_cf_handler(void)
{
     9d4:	b5b0      	push	{r4, r5, r7, lr}
     9d6:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     9d8:	4b12      	ldr	r3, [pc, #72]	; (a24 <display_cf_handler+0x50>)
     9da:	7b1b      	ldrb	r3, [r3, #12]
     9dc:	2201      	movs	r2, #1
     9de:	4053      	eors	r3, r2
     9e0:	b2db      	uxtb	r3, r3
     9e2:	2b00      	cmp	r3, #0
     9e4:	d01b      	beq.n	a1e <display_cf_handler+0x4a>
        xSemaphoreGive(buzzer_sem);
     9e6:	4b10      	ldr	r3, [pc, #64]	; (a28 <display_cf_handler+0x54>)
     9e8:	6818      	ldr	r0, [r3, #0]
     9ea:	2300      	movs	r3, #0
     9ec:	2200      	movs	r2, #0
     9ee:	2100      	movs	r1, #0
     9f0:	4c0e      	ldr	r4, [pc, #56]	; (a2c <display_cf_handler+0x58>)
     9f2:	47a0      	blx	r4
        display_state.display_lock_timer = 0;        
     9f4:	4b0b      	ldr	r3, [pc, #44]	; (a24 <display_cf_handler+0x50>)
     9f6:	2200      	movs	r2, #0
     9f8:	611a      	str	r2, [r3, #16]
        display_state.degrees_F ^= 1;
     9fa:	4b0a      	ldr	r3, [pc, #40]	; (a24 <display_cf_handler+0x50>)
     9fc:	78db      	ldrb	r3, [r3, #3]
     9fe:	2201      	movs	r2, #1
     a00:	4053      	eors	r3, r2
     a02:	b2db      	uxtb	r3, r3
     a04:	1e5a      	subs	r2, r3, #1
     a06:	4193      	sbcs	r3, r2
     a08:	b2da      	uxtb	r2, r3
     a0a:	4b06      	ldr	r3, [pc, #24]	; (a24 <display_cf_handler+0x50>)
     a0c:	70da      	strb	r2, [r3, #3]
        thermal_change_scale(display_state.degrees_F);
     a0e:	4b05      	ldr	r3, [pc, #20]	; (a24 <display_cf_handler+0x50>)
     a10:	78db      	ldrb	r3, [r3, #3]
     a12:	0018      	movs	r0, r3
     a14:	4b06      	ldr	r3, [pc, #24]	; (a30 <display_cf_handler+0x5c>)
     a16:	4798      	blx	r3
        display_update(true);        
     a18:	2001      	movs	r0, #1
     a1a:	4b06      	ldr	r3, [pc, #24]	; (a34 <display_cf_handler+0x60>)
     a1c:	4798      	blx	r3
    }
}
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	46bd      	mov	sp, r7
     a22:	bdb0      	pop	{r4, r5, r7, pc}
     a24:	20004600 	.word	0x20004600
     a28:	20004618 	.word	0x20004618
     a2c:	0000b679 	.word	0x0000b679
     a30:	00001099 	.word	0x00001099
     a34:	000007dd 	.word	0x000007dd

00000a38 <display_button_heater_handler>:

static void display_button_heater_handler(void)
{
     a38:	b5b0      	push	{r4, r5, r7, lr}
     a3a:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     a3c:	4b18      	ldr	r3, [pc, #96]	; (aa0 <display_button_heater_handler+0x68>)
     a3e:	7b1b      	ldrb	r3, [r3, #12]
     a40:	2201      	movs	r2, #1
     a42:	4053      	eors	r3, r2
     a44:	b2db      	uxtb	r3, r3
     a46:	2b00      	cmp	r3, #0
     a48:	d027      	beq.n	a9a <display_button_heater_handler+0x62>
        xSemaphoreGive(buzzer_sem);
     a4a:	4b16      	ldr	r3, [pc, #88]	; (aa4 <display_button_heater_handler+0x6c>)
     a4c:	6818      	ldr	r0, [r3, #0]
     a4e:	2300      	movs	r3, #0
     a50:	2200      	movs	r2, #0
     a52:	2100      	movs	r1, #0
     a54:	4c14      	ldr	r4, [pc, #80]	; (aa8 <display_button_heater_handler+0x70>)
     a56:	47a0      	blx	r4
        display_state.display_lock_timer = 0;
     a58:	4b11      	ldr	r3, [pc, #68]	; (aa0 <display_button_heater_handler+0x68>)
     a5a:	2200      	movs	r2, #0
     a5c:	611a      	str	r2, [r3, #16]
        display_state.heater_on ^= 1;        
     a5e:	4b10      	ldr	r3, [pc, #64]	; (aa0 <display_button_heater_handler+0x68>)
     a60:	799b      	ldrb	r3, [r3, #6]
     a62:	2201      	movs	r2, #1
     a64:	4053      	eors	r3, r2
     a66:	b2db      	uxtb	r3, r3
     a68:	1e5a      	subs	r2, r3, #1
     a6a:	4193      	sbcs	r3, r2
     a6c:	b2da      	uxtb	r2, r3
     a6e:	4b0c      	ldr	r3, [pc, #48]	; (aa0 <display_button_heater_handler+0x68>)
     a70:	719a      	strb	r2, [r3, #6]

        if (display_state.bubbles_on) {
     a72:	4b0b      	ldr	r3, [pc, #44]	; (aa0 <display_button_heater_handler+0x68>)
     a74:	79db      	ldrb	r3, [r3, #7]
     a76:	2b00      	cmp	r3, #0
     a78:	d002      	beq.n	a80 <display_button_heater_handler+0x48>
            display_state.bubbles_on = false;
     a7a:	4b09      	ldr	r3, [pc, #36]	; (aa0 <display_button_heater_handler+0x68>)
     a7c:	2200      	movs	r2, #0
     a7e:	71da      	strb	r2, [r3, #7]

            // TODO: Open air pump relay
        }

        // Pump must be running before turning on heater
        if (!display_state.pump_on) {            
     a80:	4b07      	ldr	r3, [pc, #28]	; (aa0 <display_button_heater_handler+0x68>)
     a82:	7a1b      	ldrb	r3, [r3, #8]
     a84:	2201      	movs	r2, #1
     a86:	4053      	eors	r3, r2
     a88:	b2db      	uxtb	r3, r3
     a8a:	2b00      	cmp	r3, #0
     a8c:	d002      	beq.n	a94 <display_button_heater_handler+0x5c>
            display_state.pump_on = true;
     a8e:	4b04      	ldr	r3, [pc, #16]	; (aa0 <display_button_heater_handler+0x68>)
     a90:	2201      	movs	r2, #1
     a92:	721a      	strb	r2, [r3, #8]
            
        }

        // TODO: close heater relays

        display_update(true);
     a94:	2001      	movs	r0, #1
     a96:	4b05      	ldr	r3, [pc, #20]	; (aac <display_button_heater_handler+0x74>)
     a98:	4798      	blx	r3
    }
}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	46bd      	mov	sp, r7
     a9e:	bdb0      	pop	{r4, r5, r7, pc}
     aa0:	20004600 	.word	0x20004600
     aa4:	20004618 	.word	0x20004618
     aa8:	0000b679 	.word	0x0000b679
     aac:	000007dd 	.word	0x000007dd

00000ab0 <display_button_air_pump_handler>:

static void display_button_air_pump_handler(void)
{
     ab0:	b5b0      	push	{r4, r5, r7, lr}
     ab2:	af00      	add	r7, sp, #0
    if (!display_state.display_locked) {
     ab4:	4b17      	ldr	r3, [pc, #92]	; (b14 <display_button_air_pump_handler+0x64>)
     ab6:	7b1b      	ldrb	r3, [r3, #12]
     ab8:	2201      	movs	r2, #1
     aba:	4053      	eors	r3, r2
     abc:	b2db      	uxtb	r3, r3
     abe:	2b00      	cmp	r3, #0
     ac0:	d024      	beq.n	b0c <display_button_air_pump_handler+0x5c>
        // Water pump/heater cannot run while air pump is on
        display_state.bubbles_on ^= 1;
     ac2:	4b14      	ldr	r3, [pc, #80]	; (b14 <display_button_air_pump_handler+0x64>)
     ac4:	79db      	ldrb	r3, [r3, #7]
     ac6:	2201      	movs	r2, #1
     ac8:	4053      	eors	r3, r2
     aca:	b2db      	uxtb	r3, r3
     acc:	1e5a      	subs	r2, r3, #1
     ace:	4193      	sbcs	r3, r2
     ad0:	b2da      	uxtb	r2, r3
     ad2:	4b10      	ldr	r3, [pc, #64]	; (b14 <display_button_air_pump_handler+0x64>)
     ad4:	71da      	strb	r2, [r3, #7]

        if (display_state.pump_on && display_state.bubbles_on) {            
     ad6:	4b0f      	ldr	r3, [pc, #60]	; (b14 <display_button_air_pump_handler+0x64>)
     ad8:	7a1b      	ldrb	r3, [r3, #8]
     ada:	2b00      	cmp	r3, #0
     adc:	d009      	beq.n	af2 <display_button_air_pump_handler+0x42>
     ade:	4b0d      	ldr	r3, [pc, #52]	; (b14 <display_button_air_pump_handler+0x64>)
     ae0:	79db      	ldrb	r3, [r3, #7]
     ae2:	2b00      	cmp	r3, #0
     ae4:	d005      	beq.n	af2 <display_button_air_pump_handler+0x42>
            // TODO: Turn off heater and pump

            display_state.pump_on = false;
     ae6:	4b0b      	ldr	r3, [pc, #44]	; (b14 <display_button_air_pump_handler+0x64>)
     ae8:	2200      	movs	r2, #0
     aea:	721a      	strb	r2, [r3, #8]
            display_state.heater_on = false;
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <display_button_air_pump_handler+0x64>)
     aee:	2200      	movs	r2, #0
     af0:	719a      	strb	r2, [r3, #6]
        }   
        
        xSemaphoreGive(buzzer_sem);
     af2:	4b09      	ldr	r3, [pc, #36]	; (b18 <display_button_air_pump_handler+0x68>)
     af4:	6818      	ldr	r0, [r3, #0]
     af6:	2300      	movs	r3, #0
     af8:	2200      	movs	r2, #0
     afa:	2100      	movs	r1, #0
     afc:	4c07      	ldr	r4, [pc, #28]	; (b1c <display_button_air_pump_handler+0x6c>)
     afe:	47a0      	blx	r4
        display_state.display_lock_timer = 0;     
     b00:	4b04      	ldr	r3, [pc, #16]	; (b14 <display_button_air_pump_handler+0x64>)
     b02:	2200      	movs	r2, #0
     b04:	611a      	str	r2, [r3, #16]
        
        // TODO: Turn on air pump

        display_update(true);
     b06:	2001      	movs	r0, #1
     b08:	4b05      	ldr	r3, [pc, #20]	; (b20 <display_button_air_pump_handler+0x70>)
     b0a:	4798      	blx	r3
    }
}
     b0c:	46c0      	nop			; (mov r8, r8)
     b0e:	46bd      	mov	sp, r7
     b10:	bdb0      	pop	{r4, r5, r7, pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	20004600 	.word	0x20004600
     b18:	20004618 	.word	0x20004618
     b1c:	0000b679 	.word	0x0000b679
     b20:	000007dd 	.word	0x000007dd

00000b24 <display_button_down_handler>:

static void display_button_down_handler(void)
{
     b24:	b590      	push	{r4, r7, lr}
     b26:	b083      	sub	sp, #12
     b28:	af00      	add	r7, sp, #0
    uint8_t current_temp;

    if (!display_state.display_locked) {
     b2a:	4b16      	ldr	r3, [pc, #88]	; (b84 <display_button_down_handler+0x60>)
     b2c:	7b1b      	ldrb	r3, [r3, #12]
     b2e:	2201      	movs	r2, #1
     b30:	4053      	eors	r3, r2
     b32:	b2db      	uxtb	r3, r3
     b34:	2b00      	cmp	r3, #0
     b36:	d020      	beq.n	b7a <display_button_down_handler+0x56>
        display_state.display_lock_timer = 0;
     b38:	4b12      	ldr	r3, [pc, #72]	; (b84 <display_button_down_handler+0x60>)
     b3a:	2200      	movs	r2, #0
     b3c:	611a      	str	r2, [r3, #16]

        // Try to set the display temperature
        current_temp = thermal_get_temperature();
     b3e:	1dfc      	adds	r4, r7, #7
     b40:	4b11      	ldr	r3, [pc, #68]	; (b88 <display_button_down_handler+0x64>)
     b42:	4798      	blx	r3
     b44:	0003      	movs	r3, r0
     b46:	7023      	strb	r3, [r4, #0]
        if (thermal_set_temperature(current_temp-1) == STATUS_OK) {
     b48:	1dfb      	adds	r3, r7, #7
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	3b01      	subs	r3, #1
     b4e:	b2db      	uxtb	r3, r3
     b50:	0018      	movs	r0, r3
     b52:	4b0e      	ldr	r3, [pc, #56]	; (b8c <display_button_down_handler+0x68>)
     b54:	4798      	blx	r3
     b56:	1e03      	subs	r3, r0, #0
     b58:	d10f      	bne.n	b7a <display_button_down_handler+0x56>
            xSemaphoreGive(buzzer_sem);
     b5a:	4b0d      	ldr	r3, [pc, #52]	; (b90 <display_button_down_handler+0x6c>)
     b5c:	6818      	ldr	r0, [r3, #0]
     b5e:	2300      	movs	r3, #0
     b60:	2200      	movs	r2, #0
     b62:	2100      	movs	r1, #0
     b64:	4c0b      	ldr	r4, [pc, #44]	; (b94 <display_button_down_handler+0x70>)
     b66:	47a0      	blx	r4
            display_update(false);
     b68:	2000      	movs	r0, #0
     b6a:	4b0b      	ldr	r3, [pc, #44]	; (b98 <display_button_down_handler+0x74>)
     b6c:	4798      	blx	r3
            display_state.display_blink = true;
     b6e:	4b05      	ldr	r3, [pc, #20]	; (b84 <display_button_down_handler+0x60>)
     b70:	2201      	movs	r2, #1
     b72:	729a      	strb	r2, [r3, #10]
            display_state.display_blink_timer = 0;            
     b74:	4b03      	ldr	r3, [pc, #12]	; (b84 <display_button_down_handler+0x60>)
     b76:	2200      	movs	r2, #0
     b78:	72da      	strb	r2, [r3, #11]
        }
    }
}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	46bd      	mov	sp, r7
     b7e:	b003      	add	sp, #12
     b80:	bd90      	pop	{r4, r7, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	20004600 	.word	0x20004600
     b88:	000011a9 	.word	0x000011a9
     b8c:	00001139 	.word	0x00001139
     b90:	20004618 	.word	0x20004618
     b94:	0000b679 	.word	0x0000b679
     b98:	000007dd 	.word	0x000007dd

00000b9c <display_button_up_handler>:

static void display_button_up_handler(void)
{
     b9c:	b590      	push	{r4, r7, lr}
     b9e:	b083      	sub	sp, #12
     ba0:	af00      	add	r7, sp, #0
    uint8_t current_temp;

    if (!display_state.display_locked) {
     ba2:	4b16      	ldr	r3, [pc, #88]	; (bfc <display_button_up_handler+0x60>)
     ba4:	7b1b      	ldrb	r3, [r3, #12]
     ba6:	2201      	movs	r2, #1
     ba8:	4053      	eors	r3, r2
     baa:	b2db      	uxtb	r3, r3
     bac:	2b00      	cmp	r3, #0
     bae:	d020      	beq.n	bf2 <display_button_up_handler+0x56>
        display_state.display_lock_timer = 0;
     bb0:	4b12      	ldr	r3, [pc, #72]	; (bfc <display_button_up_handler+0x60>)
     bb2:	2200      	movs	r2, #0
     bb4:	611a      	str	r2, [r3, #16]

        // Try to set the display temperature
        current_temp = thermal_get_temperature();
     bb6:	1dfc      	adds	r4, r7, #7
     bb8:	4b11      	ldr	r3, [pc, #68]	; (c00 <display_button_up_handler+0x64>)
     bba:	4798      	blx	r3
     bbc:	0003      	movs	r3, r0
     bbe:	7023      	strb	r3, [r4, #0]
        if (thermal_set_temperature(current_temp+1) == STATUS_OK) {
     bc0:	1dfb      	adds	r3, r7, #7
     bc2:	781b      	ldrb	r3, [r3, #0]
     bc4:	3301      	adds	r3, #1
     bc6:	b2db      	uxtb	r3, r3
     bc8:	0018      	movs	r0, r3
     bca:	4b0e      	ldr	r3, [pc, #56]	; (c04 <display_button_up_handler+0x68>)
     bcc:	4798      	blx	r3
     bce:	1e03      	subs	r3, r0, #0
     bd0:	d10f      	bne.n	bf2 <display_button_up_handler+0x56>
            xSemaphoreGive(buzzer_sem);            
     bd2:	4b0d      	ldr	r3, [pc, #52]	; (c08 <display_button_up_handler+0x6c>)
     bd4:	6818      	ldr	r0, [r3, #0]
     bd6:	2300      	movs	r3, #0
     bd8:	2200      	movs	r2, #0
     bda:	2100      	movs	r1, #0
     bdc:	4c0b      	ldr	r4, [pc, #44]	; (c0c <display_button_up_handler+0x70>)
     bde:	47a0      	blx	r4
            display_update(false);
     be0:	2000      	movs	r0, #0
     be2:	4b0b      	ldr	r3, [pc, #44]	; (c10 <display_button_up_handler+0x74>)
     be4:	4798      	blx	r3
            display_state.display_blink = true;
     be6:	4b05      	ldr	r3, [pc, #20]	; (bfc <display_button_up_handler+0x60>)
     be8:	2201      	movs	r2, #1
     bea:	729a      	strb	r2, [r3, #10]
            display_state.display_blink_timer = 0;            
     bec:	4b03      	ldr	r3, [pc, #12]	; (bfc <display_button_up_handler+0x60>)
     bee:	2200      	movs	r2, #0
     bf0:	72da      	strb	r2, [r3, #11]
        }
    }
}
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	46bd      	mov	sp, r7
     bf6:	b003      	add	sp, #12
     bf8:	bd90      	pop	{r4, r7, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	20004600 	.word	0x20004600
     c00:	000011a9 	.word	0x000011a9
     c04:	00001139 	.word	0x00001139
     c08:	20004618 	.word	0x20004618
     c0c:	0000b679 	.word	0x0000b679
     c10:	000007dd 	.word	0x000007dd

00000c14 <display_set_display>:

static void display_set_display(uint8_t *new_conf)
{    
     c14:	b580      	push	{r7, lr}
     c16:	b082      	sub	sp, #8
     c18:	af00      	add	r7, sp, #0
     c1a:	6078      	str	r0, [r7, #4]
    new_conf[0] = display_state.char_display[0];
     c1c:	4b45      	ldr	r3, [pc, #276]	; (d34 <display_set_display+0x120>)
     c1e:	781a      	ldrb	r2, [r3, #0]
     c20:	687b      	ldr	r3, [r7, #4]
     c22:	701a      	strb	r2, [r3, #0]
    new_conf[1] = display_state.char_display[1];
     c24:	687b      	ldr	r3, [r7, #4]
     c26:	3301      	adds	r3, #1
     c28:	4a42      	ldr	r2, [pc, #264]	; (d34 <display_set_display+0x120>)
     c2a:	7852      	ldrb	r2, [r2, #1]
     c2c:	701a      	strb	r2, [r3, #0]
    new_conf[2] = display_state.char_display[2];
     c2e:	687b      	ldr	r3, [r7, #4]
     c30:	3302      	adds	r3, #2
     c32:	4a40      	ldr	r2, [pc, #256]	; (d34 <display_set_display+0x120>)
     c34:	7892      	ldrb	r2, [r2, #2]
     c36:	701a      	strb	r2, [r3, #0]
        
    if (display_state.bubbles_on)
     c38:	4b3e      	ldr	r3, [pc, #248]	; (d34 <display_set_display+0x120>)
     c3a:	79db      	ldrb	r3, [r3, #7]
     c3c:	2b00      	cmp	r3, #0
     c3e:	d008      	beq.n	c52 <display_set_display+0x3e>
        new_conf[4] |= LED_BUBBLES;
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	3304      	adds	r3, #4
     c44:	687a      	ldr	r2, [r7, #4]
     c46:	3204      	adds	r2, #4
     c48:	7812      	ldrb	r2, [r2, #0]
     c4a:	2104      	movs	r1, #4
     c4c:	430a      	orrs	r2, r1
     c4e:	b2d2      	uxtb	r2, r2
     c50:	701a      	strb	r2, [r3, #0]

    if (display_state.degrees_F)
     c52:	4b38      	ldr	r3, [pc, #224]	; (d34 <display_set_display+0x120>)
     c54:	78db      	ldrb	r3, [r3, #3]
     c56:	2b00      	cmp	r3, #0
     c58:	d009      	beq.n	c6e <display_set_display+0x5a>
        new_conf[4] |= LED_DEG_F;
     c5a:	687b      	ldr	r3, [r7, #4]
     c5c:	3304      	adds	r3, #4
     c5e:	687a      	ldr	r2, [r7, #4]
     c60:	3204      	adds	r2, #4
     c62:	7812      	ldrb	r2, [r2, #0]
     c64:	2102      	movs	r1, #2
     c66:	430a      	orrs	r2, r1
     c68:	b2d2      	uxtb	r2, r2
     c6a:	701a      	strb	r2, [r3, #0]
     c6c:	e008      	b.n	c80 <display_set_display+0x6c>
    else
        new_conf[4] |= LED_DEG_C;
     c6e:	687b      	ldr	r3, [r7, #4]
     c70:	3304      	adds	r3, #4
     c72:	687a      	ldr	r2, [r7, #4]
     c74:	3204      	adds	r2, #4
     c76:	7812      	ldrb	r2, [r2, #0]
     c78:	2101      	movs	r1, #1
     c7a:	430a      	orrs	r2, r1
     c7c:	b2d2      	uxtb	r2, r2
     c7e:	701a      	strb	r2, [r3, #0]

    if (display_state.pump_on) {
     c80:	4b2c      	ldr	r3, [pc, #176]	; (d34 <display_set_display+0x120>)
     c82:	7a1b      	ldrb	r3, [r3, #8]
     c84:	2b00      	cmp	r3, #0
     c86:	d028      	beq.n	cda <display_set_display+0xc6>
        new_conf[3] |= LED_PUMP;
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	3303      	adds	r3, #3
     c8c:	687a      	ldr	r2, [r7, #4]
     c8e:	3203      	adds	r2, #3
     c90:	7812      	ldrb	r2, [r2, #0]
     c92:	2102      	movs	r1, #2
     c94:	430a      	orrs	r2, r1
     c96:	b2d2      	uxtb	r2, r2
     c98:	701a      	strb	r2, [r3, #0]
        new_conf[3] |= LED_TIMER;
     c9a:	687b      	ldr	r3, [r7, #4]
     c9c:	3303      	adds	r3, #3
     c9e:	687a      	ldr	r2, [r7, #4]
     ca0:	3203      	adds	r2, #3
     ca2:	7812      	ldrb	r2, [r2, #0]
     ca4:	2110      	movs	r1, #16
     ca6:	430a      	orrs	r2, r1
     ca8:	b2d2      	uxtb	r2, r2
     caa:	701a      	strb	r2, [r3, #0]
        if (display_state.heater_on)
     cac:	4b21      	ldr	r3, [pc, #132]	; (d34 <display_set_display+0x120>)
     cae:	799b      	ldrb	r3, [r3, #6]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d009      	beq.n	cc8 <display_set_display+0xb4>
            new_conf[3] |= LED_HEATON;
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	3303      	adds	r3, #3
     cb8:	687a      	ldr	r2, [r7, #4]
     cba:	3203      	adds	r2, #3
     cbc:	7812      	ldrb	r2, [r2, #0]
     cbe:	2104      	movs	r1, #4
     cc0:	430a      	orrs	r2, r1
     cc2:	b2d2      	uxtb	r2, r2
     cc4:	701a      	strb	r2, [r3, #0]
     cc6:	e008      	b.n	cda <display_set_display+0xc6>
        else
            new_conf[3] |= LED_HEATOFF;
     cc8:	687b      	ldr	r3, [r7, #4]
     cca:	3303      	adds	r3, #3
     ccc:	687a      	ldr	r2, [r7, #4]
     cce:	3203      	adds	r2, #3
     cd0:	7812      	ldrb	r2, [r2, #0]
     cd2:	2108      	movs	r1, #8
     cd4:	430a      	orrs	r2, r1
     cd6:	b2d2      	uxtb	r2, r2
     cd8:	701a      	strb	r2, [r3, #0]
    }

    if (display_state.timer_set)
     cda:	4b16      	ldr	r3, [pc, #88]	; (d34 <display_set_display+0x120>)
     cdc:	791b      	ldrb	r3, [r3, #4]
     cde:	2b00      	cmp	r3, #0
     ce0:	d008      	beq.n	cf4 <display_set_display+0xe0>
        new_conf[3] |= LED_TIMER_SET;
     ce2:	687b      	ldr	r3, [r7, #4]
     ce4:	3303      	adds	r3, #3
     ce6:	687a      	ldr	r2, [r7, #4]
     ce8:	3203      	adds	r2, #3
     cea:	7812      	ldrb	r2, [r2, #0]
     cec:	2140      	movs	r1, #64	; 0x40
     cee:	430a      	orrs	r2, r1
     cf0:	b2d2      	uxtb	r2, r2
     cf2:	701a      	strb	r2, [r3, #0]

    if (display_state.display_locked)
     cf4:	4b0f      	ldr	r3, [pc, #60]	; (d34 <display_set_display+0x120>)
     cf6:	7b1b      	ldrb	r3, [r3, #12]
     cf8:	2b00      	cmp	r3, #0
     cfa:	d008      	beq.n	d0e <display_set_display+0xfa>
        new_conf[3] |= LED_LOCK;
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	3303      	adds	r3, #3
     d00:	687a      	ldr	r2, [r7, #4]
     d02:	3203      	adds	r2, #3
     d04:	7812      	ldrb	r2, [r2, #0]
     d06:	2120      	movs	r1, #32
     d08:	430a      	orrs	r2, r1
     d0a:	b2d2      	uxtb	r2, r2
     d0c:	701a      	strb	r2, [r3, #0]

    if (display_state.timer_on)
     d0e:	4b09      	ldr	r3, [pc, #36]	; (d34 <display_set_display+0x120>)
     d10:	795b      	ldrb	r3, [r3, #5]
     d12:	2b00      	cmp	r3, #0
     d14:	d009      	beq.n	d2a <display_set_display+0x116>
        new_conf[3] |= LED_CLOCK;    
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	3303      	adds	r3, #3
     d1a:	687a      	ldr	r2, [r7, #4]
     d1c:	3203      	adds	r2, #3
     d1e:	7812      	ldrb	r2, [r2, #0]
     d20:	2180      	movs	r1, #128	; 0x80
     d22:	4249      	negs	r1, r1
     d24:	430a      	orrs	r2, r1
     d26:	b2d2      	uxtb	r2, r2
     d28:	701a      	strb	r2, [r3, #0]
}
     d2a:	46c0      	nop			; (mov r8, r8)
     d2c:	46bd      	mov	sp, r7
     d2e:	b002      	add	sp, #8
     d30:	bd80      	pop	{r7, pc}
     d32:	46c0      	nop			; (mov r8, r8)
     d34:	20004600 	.word	0x20004600

00000d38 <display_init>:
    {BUTTON_TIMER,          display_timer_handler },
    { 0, NULL },
};

void display_init(void)
{
     d38:	b580      	push	{r7, lr}
     d3a:	af00      	add	r7, sp, #0
    wtc6508_init();   
     d3c:	4b10      	ldr	r3, [pc, #64]	; (d80 <display_init+0x48>)
     d3e:	4798      	blx	r3
    tm1640_init();
     d40:	4b10      	ldr	r3, [pc, #64]	; (d84 <display_init+0x4c>)
     d42:	4798      	blx	r3

    memset(&display_state, 0, sizeof(display_state));
     d44:	4b10      	ldr	r3, [pc, #64]	; (d88 <display_init+0x50>)
     d46:	2218      	movs	r2, #24
     d48:	2100      	movs	r1, #0
     d4a:	0018      	movs	r0, r3
     d4c:	4b0f      	ldr	r3, [pc, #60]	; (d8c <display_init+0x54>)
     d4e:	4798      	blx	r3

    // Set the initial display state
    display_state.char_display[0] = SEG_0;
     d50:	4b0d      	ldr	r3, [pc, #52]	; (d88 <display_init+0x50>)
     d52:	223f      	movs	r2, #63	; 0x3f
     d54:	701a      	strb	r2, [r3, #0]
    display_state.char_display[1] = SEG_0;
     d56:	4b0c      	ldr	r3, [pc, #48]	; (d88 <display_init+0x50>)
     d58:	223f      	movs	r2, #63	; 0x3f
     d5a:	705a      	strb	r2, [r3, #1]
    display_state.char_display[2] = SEG_0;
     d5c:	4b0a      	ldr	r3, [pc, #40]	; (d88 <display_init+0x50>)
     d5e:	223f      	movs	r2, #63	; 0x3f
     d60:	709a      	strb	r2, [r3, #2]

    display_state.degrees_F = true;        
     d62:	4b09      	ldr	r3, [pc, #36]	; (d88 <display_init+0x50>)
     d64:	2201      	movs	r2, #1
     d66:	70da      	strb	r2, [r3, #3]
    display_state.display_update = true;    
     d68:	4b07      	ldr	r3, [pc, #28]	; (d88 <display_init+0x50>)
     d6a:	2201      	movs	r2, #1
     d6c:	725a      	strb	r2, [r3, #9]

    display_update_mutex = xSemaphoreCreateMutex();
     d6e:	2001      	movs	r0, #1
     d70:	4b07      	ldr	r3, [pc, #28]	; (d90 <display_init+0x58>)
     d72:	4798      	blx	r3
     d74:	0002      	movs	r2, r0
     d76:	4b07      	ldr	r3, [pc, #28]	; (d94 <display_init+0x5c>)
     d78:	601a      	str	r2, [r3, #0]
}
     d7a:	46c0      	nop			; (mov r8, r8)
     d7c:	46bd      	mov	sp, r7
     d7e:	bd80      	pop	{r7, pc}
     d80:	000019a1 	.word	0x000019a1
     d84:	000015a9 	.word	0x000015a9
     d88:	20004600 	.word	0x20004600
     d8c:	0000fb1b 	.word	0x0000fb1b
     d90:	0000b639 	.word	0x0000b639
     d94:	200045bc 	.word	0x200045bc

00000d98 <display_idle>:

void display_idle(void)
{
     d98:	b580      	push	{r7, lr}
     d9a:	b082      	sub	sp, #8
     d9c:	af00      	add	r7, sp, #0
    uint8_t disp_conf[DISPLAY_CONFIG_LENGTH] = {0};
     d9e:	003b      	movs	r3, r7
     da0:	0018      	movs	r0, r3
     da2:	2305      	movs	r3, #5
     da4:	001a      	movs	r2, r3
     da6:	2100      	movs	r1, #0
     da8:	4b0e      	ldr	r3, [pc, #56]	; (de4 <display_idle+0x4c>)
     daa:	4798      	blx	r3

    if (display_state.display_update && !display_state.display_blink) {
     dac:	4b0e      	ldr	r3, [pc, #56]	; (de8 <display_idle+0x50>)
     dae:	7a5b      	ldrb	r3, [r3, #9]
     db0:	2b00      	cmp	r3, #0
     db2:	d013      	beq.n	ddc <display_idle+0x44>
     db4:	4b0c      	ldr	r3, [pc, #48]	; (de8 <display_idle+0x50>)
     db6:	7a9b      	ldrb	r3, [r3, #10]
     db8:	2201      	movs	r2, #1
     dba:	4053      	eors	r3, r2
     dbc:	b2db      	uxtb	r3, r3
     dbe:	2b00      	cmp	r3, #0
     dc0:	d00c      	beq.n	ddc <display_idle+0x44>
        display_update(false);
     dc2:	2000      	movs	r0, #0
     dc4:	4b09      	ldr	r3, [pc, #36]	; (dec <display_idle+0x54>)
     dc6:	4798      	blx	r3

        // Perform a display update        
        display_set_display(disp_conf);
     dc8:	003b      	movs	r3, r7
     dca:	0018      	movs	r0, r3
     dcc:	4b08      	ldr	r3, [pc, #32]	; (df0 <display_idle+0x58>)
     dce:	4798      	blx	r3

        tm1640_set_display(disp_conf, DISPLAY_CONFIG_LENGTH, BRIGHT_MAX);
     dd0:	003b      	movs	r3, r7
     dd2:	228f      	movs	r2, #143	; 0x8f
     dd4:	2105      	movs	r1, #5
     dd6:	0018      	movs	r0, r3
     dd8:	4b06      	ldr	r3, [pc, #24]	; (df4 <display_idle+0x5c>)
     dda:	4798      	blx	r3
    }
}
     ddc:	46c0      	nop			; (mov r8, r8)
     dde:	46bd      	mov	sp, r7
     de0:	b002      	add	sp, #8
     de2:	bd80      	pop	{r7, pc}
     de4:	0000fb1b 	.word	0x0000fb1b
     de8:	20004600 	.word	0x20004600
     dec:	000007dd 	.word	0x000007dd
     df0:	00000c15 	.word	0x00000c15
     df4:	00001625 	.word	0x00001625

00000df8 <display_update_1Hz>:

void display_update_1Hz(void)
{
     df8:	b590      	push	{r4, r7, lr}
     dfa:	b083      	sub	sp, #12
     dfc:	af00      	add	r7, sp, #0
    static bool blink_state = false;
    uint8_t disp_conf[DISPLAY_CONFIG_LENGTH] = {0};
     dfe:	003b      	movs	r3, r7
     e00:	0018      	movs	r0, r3
     e02:	2305      	movs	r3, #5
     e04:	001a      	movs	r2, r3
     e06:	2100      	movs	r1, #0
     e08:	4b33      	ldr	r3, [pc, #204]	; (ed8 <display_update_1Hz+0xe0>)
     e0a:	4798      	blx	r3
    uint8_t temperature;

    //if (!display_state.display_update) {  
    {   
        if (display_state.display_blink) {
     e0c:	4b33      	ldr	r3, [pc, #204]	; (edc <display_update_1Hz+0xe4>)
     e0e:	7a9b      	ldrb	r3, [r3, #10]
     e10:	2b00      	cmp	r3, #0
     e12:	d040      	beq.n	e96 <display_update_1Hz+0x9e>

            display_set_display(disp_conf);
     e14:	003b      	movs	r3, r7
     e16:	0018      	movs	r0, r3
     e18:	4b31      	ldr	r3, [pc, #196]	; (ee0 <display_update_1Hz+0xe8>)
     e1a:	4798      	blx	r3
            // Only the character display should blink        
            if (blink_state) {
     e1c:	4b31      	ldr	r3, [pc, #196]	; (ee4 <display_update_1Hz+0xec>)
     e1e:	781b      	ldrb	r3, [r3, #0]
     e20:	2b00      	cmp	r3, #0
     e22:	d009      	beq.n	e38 <display_update_1Hz+0x40>
                disp_conf[0] = SEG_OFF;
     e24:	003b      	movs	r3, r7
     e26:	2200      	movs	r2, #0
     e28:	701a      	strb	r2, [r3, #0]
                disp_conf[1] = SEG_OFF;
     e2a:	003b      	movs	r3, r7
     e2c:	2200      	movs	r2, #0
     e2e:	705a      	strb	r2, [r3, #1]
                disp_conf[2] = SEG_OFF;
     e30:	003b      	movs	r3, r7
     e32:	2200      	movs	r2, #0
     e34:	709a      	strb	r2, [r3, #2]
     e36:	e00b      	b.n	e50 <display_update_1Hz+0x58>
            }
            else {
                temperature = thermal_get_temperature();
     e38:	1dfc      	adds	r4, r7, #7
     e3a:	4b2b      	ldr	r3, [pc, #172]	; (ee8 <display_update_1Hz+0xf0>)
     e3c:	4798      	blx	r3
     e3e:	0003      	movs	r3, r0
     e40:	7023      	strb	r3, [r4, #0]
                display_number_to_seg(temperature, disp_conf);
     e42:	003a      	movs	r2, r7
     e44:	1dfb      	adds	r3, r7, #7
     e46:	781b      	ldrb	r3, [r3, #0]
     e48:	0011      	movs	r1, r2
     e4a:	0018      	movs	r0, r3
     e4c:	4b27      	ldr	r3, [pc, #156]	; (eec <display_update_1Hz+0xf4>)
     e4e:	4798      	blx	r3
            }

            if (display_state.display_blink_timer++ >= DISPLAY_BLINK_TIME) {
     e50:	4b22      	ldr	r3, [pc, #136]	; (edc <display_update_1Hz+0xe4>)
     e52:	7adb      	ldrb	r3, [r3, #11]
     e54:	1c5a      	adds	r2, r3, #1
     e56:	b2d1      	uxtb	r1, r2
     e58:	4a20      	ldr	r2, [pc, #128]	; (edc <display_update_1Hz+0xe4>)
     e5a:	72d1      	strb	r1, [r2, #11]
     e5c:	2b04      	cmp	r3, #4
     e5e:	d909      	bls.n	e74 <display_update_1Hz+0x7c>
                display_state.display_blink_timer = 0;
     e60:	4b1e      	ldr	r3, [pc, #120]	; (edc <display_update_1Hz+0xe4>)
     e62:	2200      	movs	r2, #0
     e64:	72da      	strb	r2, [r3, #11]
                display_state.display_blink = 0;
     e66:	4b1d      	ldr	r3, [pc, #116]	; (edc <display_update_1Hz+0xe4>)
     e68:	2200      	movs	r2, #0
     e6a:	729a      	strb	r2, [r3, #10]
                blink_state = false;
     e6c:	4b1d      	ldr	r3, [pc, #116]	; (ee4 <display_update_1Hz+0xec>)
     e6e:	2200      	movs	r2, #0
     e70:	701a      	strb	r2, [r3, #0]
     e72:	e009      	b.n	e88 <display_update_1Hz+0x90>
            }
            else
                blink_state ^= 1;
     e74:	4b1b      	ldr	r3, [pc, #108]	; (ee4 <display_update_1Hz+0xec>)
     e76:	781b      	ldrb	r3, [r3, #0]
     e78:	2201      	movs	r2, #1
     e7a:	4053      	eors	r3, r2
     e7c:	b2db      	uxtb	r3, r3
     e7e:	1e5a      	subs	r2, r3, #1
     e80:	4193      	sbcs	r3, r2
     e82:	b2da      	uxtb	r2, r3
     e84:	4b17      	ldr	r3, [pc, #92]	; (ee4 <display_update_1Hz+0xec>)
     e86:	701a      	strb	r2, [r3, #0]
                        
            tm1640_set_display(disp_conf, DISPLAY_CONFIG_LENGTH, BRIGHT_MAX);
     e88:	003b      	movs	r3, r7
     e8a:	228f      	movs	r2, #143	; 0x8f
     e8c:	2105      	movs	r1, #5
     e8e:	0018      	movs	r0, r3
     e90:	4b17      	ldr	r3, [pc, #92]	; (ef0 <display_update_1Hz+0xf8>)
     e92:	4798      	blx	r3
                display_state.char_display[2] = SEG_0;
            }
            display_update(true);
        }    
    }
}
     e94:	e01c      	b.n	ed0 <display_update_1Hz+0xd8>
                        
            tm1640_set_display(disp_conf, DISPLAY_CONFIG_LENGTH, BRIGHT_MAX);
        }
        else {
            // Check to see if the temperature changed
            temperature = thermal_get_water_temp();
     e96:	1dfc      	adds	r4, r7, #7
     e98:	4b16      	ldr	r3, [pc, #88]	; (ef4 <display_update_1Hz+0xfc>)
     e9a:	4798      	blx	r3
     e9c:	0003      	movs	r3, r0
     e9e:	7023      	strb	r3, [r4, #0]
            if (temperature != 0xFF) {
     ea0:	1dfb      	adds	r3, r7, #7
     ea2:	781b      	ldrb	r3, [r3, #0]
     ea4:	2bff      	cmp	r3, #255	; 0xff
     ea6:	d007      	beq.n	eb8 <display_update_1Hz+0xc0>
                // 255 represents an invalid/un-updated temperature
                display_number_to_seg(temperature, (uint8_t *) &display_state.char_display[0]);
     ea8:	4a0c      	ldr	r2, [pc, #48]	; (edc <display_update_1Hz+0xe4>)
     eaa:	1dfb      	adds	r3, r7, #7
     eac:	781b      	ldrb	r3, [r3, #0]
     eae:	0011      	movs	r1, r2
     eb0:	0018      	movs	r0, r3
     eb2:	4b0e      	ldr	r3, [pc, #56]	; (eec <display_update_1Hz+0xf4>)
     eb4:	4798      	blx	r3
     eb6:	e008      	b.n	eca <display_update_1Hz+0xd2>
            }        
            else {
                display_state.char_display[0] = SEG_0;
     eb8:	4b08      	ldr	r3, [pc, #32]	; (edc <display_update_1Hz+0xe4>)
     eba:	223f      	movs	r2, #63	; 0x3f
     ebc:	701a      	strb	r2, [r3, #0]
                display_state.char_display[1] = SEG_0;
     ebe:	4b07      	ldr	r3, [pc, #28]	; (edc <display_update_1Hz+0xe4>)
     ec0:	223f      	movs	r2, #63	; 0x3f
     ec2:	705a      	strb	r2, [r3, #1]
                display_state.char_display[2] = SEG_0;
     ec4:	4b05      	ldr	r3, [pc, #20]	; (edc <display_update_1Hz+0xe4>)
     ec6:	223f      	movs	r2, #63	; 0x3f
     ec8:	709a      	strb	r2, [r3, #2]
            }
            display_update(true);
     eca:	2001      	movs	r0, #1
     ecc:	4b0a      	ldr	r3, [pc, #40]	; (ef8 <display_update_1Hz+0x100>)
     ece:	4798      	blx	r3
        }    
    }
}
     ed0:	46c0      	nop			; (mov r8, r8)
     ed2:	46bd      	mov	sp, r7
     ed4:	b003      	add	sp, #12
     ed6:	bd90      	pop	{r4, r7, pc}
     ed8:	0000fb1b 	.word	0x0000fb1b
     edc:	20004600 	.word	0x20004600
     ee0:	00000c15 	.word	0x00000c15
     ee4:	200000b8 	.word	0x200000b8
     ee8:	000011a9 	.word	0x000011a9
     eec:	00000819 	.word	0x00000819
     ef0:	00001625 	.word	0x00001625
     ef4:	000011bd 	.word	0x000011bd
     ef8:	000007dd 	.word	0x000007dd

00000efc <display_update_33Hz>:

void display_update_33Hz(void)
{
     efc:	b580      	push	{r7, lr}
     efe:	b082      	sub	sp, #8
     f00:	af00      	add	r7, sp, #0
    static uint8_t touch_detect_delay = 0;

    uint8_t status = 0;    
     f02:	1dbb      	adds	r3, r7, #6
     f04:	2200      	movs	r2, #0
     f06:	701a      	strb	r2, [r3, #0]
    uint8_t i = 0;
     f08:	1dfb      	adds	r3, r7, #7
     f0a:	2200      	movs	r2, #0
     f0c:	701a      	strb	r2, [r3, #0]
    
    if (!touch_detect_delay) {
     f0e:	4b34      	ldr	r3, [pc, #208]	; (fe0 <display_update_33Hz+0xe4>)
     f10:	781b      	ldrb	r3, [r3, #0]
     f12:	2b00      	cmp	r3, #0
     f14:	d145      	bne.n	fa2 <display_update_33Hz+0xa6>
        // Check for user input
        if (wtc6508_read(&status)) {
     f16:	1dbb      	adds	r3, r7, #6
     f18:	0018      	movs	r0, r3
     f1a:	4b32      	ldr	r3, [pc, #200]	; (fe4 <display_update_33Hz+0xe8>)
     f1c:	4798      	blx	r3
     f1e:	1e03      	subs	r3, r0, #0
     f20:	d006      	beq.n	f30 <display_update_33Hz+0x34>
            printf("Error! Unable to read button status\n");
     f22:	4b31      	ldr	r3, [pc, #196]	; (fe8 <display_update_33Hz+0xec>)
     f24:	0018      	movs	r0, r3
     f26:	4b31      	ldr	r3, [pc, #196]	; (fec <display_update_33Hz+0xf0>)
     f28:	4798      	blx	r3
            status = 0;
     f2a:	1dbb      	adds	r3, r7, #6
     f2c:	2200      	movs	r2, #0
     f2e:	701a      	strb	r2, [r3, #0]
        }

        // Handle user input
        if (status) {          
     f30:	1dbb      	adds	r3, r7, #6
     f32:	781b      	ldrb	r3, [r3, #0]
     f34:	2b00      	cmp	r3, #0
     f36:	d02c      	beq.n	f92 <display_update_33Hz+0x96>
            touch_detect_delay = TOUCH_DETECT_DELAY;            
     f38:	4b29      	ldr	r3, [pc, #164]	; (fe0 <display_update_33Hz+0xe4>)
     f3a:	2205      	movs	r2, #5
     f3c:	701a      	strb	r2, [r3, #0]

            while (display_handlers[i].button_mask) {
     f3e:	e020      	b.n	f82 <display_update_33Hz+0x86>
                if ((display_handlers[i].button_mask & status) && 
     f40:	1dfb      	adds	r3, r7, #7
     f42:	781a      	ldrb	r2, [r3, #0]
     f44:	4b2a      	ldr	r3, [pc, #168]	; (ff0 <display_update_33Hz+0xf4>)
     f46:	00d2      	lsls	r2, r2, #3
     f48:	5cd3      	ldrb	r3, [r2, r3]
     f4a:	1dba      	adds	r2, r7, #6
     f4c:	7812      	ldrb	r2, [r2, #0]
     f4e:	4013      	ands	r3, r2
     f50:	b2db      	uxtb	r3, r3
     f52:	2b00      	cmp	r3, #0
     f54:	d010      	beq.n	f78 <display_update_33Hz+0x7c>
                     display_handlers[i].handler != NULL ) {
     f56:	1dfb      	adds	r3, r7, #7
     f58:	781b      	ldrb	r3, [r3, #0]
     f5a:	4a25      	ldr	r2, [pc, #148]	; (ff0 <display_update_33Hz+0xf4>)
     f5c:	00db      	lsls	r3, r3, #3
     f5e:	18d3      	adds	r3, r2, r3
     f60:	3304      	adds	r3, #4
     f62:	681b      	ldr	r3, [r3, #0]
        // Handle user input
        if (status) {          
            touch_detect_delay = TOUCH_DETECT_DELAY;            

            while (display_handlers[i].button_mask) {
                if ((display_handlers[i].button_mask & status) && 
     f64:	2b00      	cmp	r3, #0
     f66:	d007      	beq.n	f78 <display_update_33Hz+0x7c>
                     display_handlers[i].handler != NULL ) {
                     display_handlers[i].handler();
     f68:	1dfb      	adds	r3, r7, #7
     f6a:	781b      	ldrb	r3, [r3, #0]
     f6c:	4a20      	ldr	r2, [pc, #128]	; (ff0 <display_update_33Hz+0xf4>)
     f6e:	00db      	lsls	r3, r3, #3
     f70:	18d3      	adds	r3, r2, r3
     f72:	3304      	adds	r3, #4
     f74:	681b      	ldr	r3, [r3, #0]
     f76:	4798      	blx	r3
                }
                i++;
     f78:	1dfb      	adds	r3, r7, #7
     f7a:	781a      	ldrb	r2, [r3, #0]
     f7c:	1dfb      	adds	r3, r7, #7
     f7e:	3201      	adds	r2, #1
     f80:	701a      	strb	r2, [r3, #0]

        // Handle user input
        if (status) {          
            touch_detect_delay = TOUCH_DETECT_DELAY;            

            while (display_handlers[i].button_mask) {
     f82:	1dfb      	adds	r3, r7, #7
     f84:	781a      	ldrb	r2, [r3, #0]
     f86:	4b1a      	ldr	r3, [pc, #104]	; (ff0 <display_update_33Hz+0xf4>)
     f88:	00d2      	lsls	r2, r2, #3
     f8a:	5cd3      	ldrb	r3, [r2, r3]
     f8c:	2b00      	cmp	r3, #0
     f8e:	d1d7      	bne.n	f40 <display_update_33Hz+0x44>
     f90:	e00d      	b.n	fae <display_update_33Hz+0xb2>
                     display_handlers[i].handler();
                }
                i++;
            }
        }
        else if (display_state.display_unlock_timer > 0)
     f92:	4b18      	ldr	r3, [pc, #96]	; (ff4 <display_update_33Hz+0xf8>)
     f94:	695b      	ldr	r3, [r3, #20]
     f96:	2b00      	cmp	r3, #0
     f98:	d009      	beq.n	fae <display_update_33Hz+0xb2>
            // Reset the display unlock timer because the user isn't holding the button anymore
            display_state.display_unlock_timer = 0;
     f9a:	4b16      	ldr	r3, [pc, #88]	; (ff4 <display_update_33Hz+0xf8>)
     f9c:	2200      	movs	r2, #0
     f9e:	615a      	str	r2, [r3, #20]
     fa0:	e005      	b.n	fae <display_update_33Hz+0xb2>
    }
    else
        touch_detect_delay--;
     fa2:	4b0f      	ldr	r3, [pc, #60]	; (fe0 <display_update_33Hz+0xe4>)
     fa4:	781b      	ldrb	r3, [r3, #0]
     fa6:	3b01      	subs	r3, #1
     fa8:	b2da      	uxtb	r2, r3
     faa:	4b0d      	ldr	r3, [pc, #52]	; (fe0 <display_update_33Hz+0xe4>)
     fac:	701a      	strb	r2, [r3, #0]

    if (!display_state.display_locked && display_state.display_lock_timer++ > DISPLAY_LOCK_TIME) {
     fae:	4b11      	ldr	r3, [pc, #68]	; (ff4 <display_update_33Hz+0xf8>)
     fb0:	7b1b      	ldrb	r3, [r3, #12]
     fb2:	2201      	movs	r2, #1
     fb4:	4053      	eors	r3, r2
     fb6:	b2db      	uxtb	r3, r3
     fb8:	2b00      	cmp	r3, #0
     fba:	d00d      	beq.n	fd8 <display_update_33Hz+0xdc>
     fbc:	4b0d      	ldr	r3, [pc, #52]	; (ff4 <display_update_33Hz+0xf8>)
     fbe:	691b      	ldr	r3, [r3, #16]
     fc0:	1c59      	adds	r1, r3, #1
     fc2:	4a0c      	ldr	r2, [pc, #48]	; (ff4 <display_update_33Hz+0xf8>)
     fc4:	6111      	str	r1, [r2, #16]
     fc6:	4a0c      	ldr	r2, [pc, #48]	; (ff8 <display_update_33Hz+0xfc>)
     fc8:	4293      	cmp	r3, r2
     fca:	d905      	bls.n	fd8 <display_update_33Hz+0xdc>
        display_state.display_locked = true;
     fcc:	4b09      	ldr	r3, [pc, #36]	; (ff4 <display_update_33Hz+0xf8>)
     fce:	2201      	movs	r2, #1
     fd0:	731a      	strb	r2, [r3, #12]
        display_update(true);
     fd2:	2001      	movs	r0, #1
     fd4:	4b09      	ldr	r3, [pc, #36]	; (ffc <display_update_33Hz+0x100>)
     fd6:	4798      	blx	r3
    }
}
     fd8:	46c0      	nop			; (mov r8, r8)
     fda:	46bd      	mov	sp, r7
     fdc:	b002      	add	sp, #8
     fde:	bd80      	pop	{r7, pc}
     fe0:	200000b9 	.word	0x200000b9
     fe4:	00001a45 	.word	0x00001a45
     fe8:	00011314 	.word	0x00011314
     fec:	000101f1 	.word	0x000101f1
     ff0:	000112cc 	.word	0x000112cc
     ff4:	20004600 	.word	0x20004600
     ff8:	00002710 	.word	0x00002710
     ffc:	000007dd 	.word	0x000007dd

00001000 <fahrenheit_to_celsius>:

SemaphoreHandle_t                                       display_mutex;
SemaphoreHandle_t                                       buzzer_sem;

static inline uint8_t fahrenheit_to_celsius(uint8_t deg_f)
{
    1000:	b580      	push	{r7, lr}
    1002:	b084      	sub	sp, #16
    1004:	af00      	add	r7, sp, #0
    1006:	0002      	movs	r2, r0
    1008:	1dfb      	adds	r3, r7, #7
    100a:	701a      	strb	r2, [r3, #0]
    uint16_t convert = (uint16_t) deg_f;
    100c:	230e      	movs	r3, #14
    100e:	18fb      	adds	r3, r7, r3
    1010:	1dfa      	adds	r2, r7, #7
    1012:	7812      	ldrb	r2, [r2, #0]
    1014:	801a      	strh	r2, [r3, #0]
    convert = (convert - 32) * 5 / 9;
    1016:	230e      	movs	r3, #14
    1018:	18fb      	adds	r3, r7, r3
    101a:	881b      	ldrh	r3, [r3, #0]
    101c:	3b20      	subs	r3, #32
    101e:	001a      	movs	r2, r3
    1020:	0013      	movs	r3, r2
    1022:	009b      	lsls	r3, r3, #2
    1024:	189a      	adds	r2, r3, r2
    1026:	4b08      	ldr	r3, [pc, #32]	; (1048 <fahrenheit_to_celsius+0x48>)
    1028:	2109      	movs	r1, #9
    102a:	0010      	movs	r0, r2
    102c:	4798      	blx	r3
    102e:	0003      	movs	r3, r0
    1030:	001a      	movs	r2, r3
    1032:	230e      	movs	r3, #14
    1034:	18fb      	adds	r3, r7, r3
    1036:	801a      	strh	r2, [r3, #0]
    return (uint8_t) convert;
    1038:	230e      	movs	r3, #14
    103a:	18fb      	adds	r3, r7, r3
    103c:	881b      	ldrh	r3, [r3, #0]
    103e:	b2db      	uxtb	r3, r3
}
    1040:	0018      	movs	r0, r3
    1042:	46bd      	mov	sp, r7
    1044:	b004      	add	sp, #16
    1046:	bd80      	pop	{r7, pc}
    1048:	0000f0ad 	.word	0x0000f0ad

0000104c <celsius_to_fahrenheit>:

static inline uint8_t celsius_to_fahrenheit(uint8_t deg_c)
{
    104c:	b580      	push	{r7, lr}
    104e:	b084      	sub	sp, #16
    1050:	af00      	add	r7, sp, #0
    1052:	0002      	movs	r2, r0
    1054:	1dfb      	adds	r3, r7, #7
    1056:	701a      	strb	r2, [r3, #0]
    uint16_t convert = (uint16_t) deg_c;
    1058:	230e      	movs	r3, #14
    105a:	18fb      	adds	r3, r7, r3
    105c:	1dfa      	adds	r2, r7, #7
    105e:	7812      	ldrb	r2, [r2, #0]
    1060:	801a      	strh	r2, [r3, #0]
    convert = (convert * 9 / 5) + 32;
    1062:	230e      	movs	r3, #14
    1064:	18fb      	adds	r3, r7, r3
    1066:	881a      	ldrh	r2, [r3, #0]
    1068:	0013      	movs	r3, r2
    106a:	00db      	lsls	r3, r3, #3
    106c:	189a      	adds	r2, r3, r2
    106e:	4b09      	ldr	r3, [pc, #36]	; (1094 <celsius_to_fahrenheit+0x48>)
    1070:	2105      	movs	r1, #5
    1072:	0010      	movs	r0, r2
    1074:	4798      	blx	r3
    1076:	0003      	movs	r3, r0
    1078:	b29a      	uxth	r2, r3
    107a:	230e      	movs	r3, #14
    107c:	18fb      	adds	r3, r7, r3
    107e:	3220      	adds	r2, #32
    1080:	801a      	strh	r2, [r3, #0]
    return (uint8_t) convert;
    1082:	230e      	movs	r3, #14
    1084:	18fb      	adds	r3, r7, r3
    1086:	881b      	ldrh	r3, [r3, #0]
    1088:	b2db      	uxtb	r3, r3
}
    108a:	0018      	movs	r0, r3
    108c:	46bd      	mov	sp, r7
    108e:	b004      	add	sp, #16
    1090:	bd80      	pop	{r7, pc}
    1092:	46c0      	nop			; (mov r8, r8)
    1094:	0000f0ad 	.word	0x0000f0ad

00001098 <thermal_change_scale>:
    // Initialize ADC

}

void thermal_change_scale(bool new_scale)
{
    1098:	b580      	push	{r7, lr}
    109a:	b082      	sub	sp, #8
    109c:	af00      	add	r7, sp, #0
    109e:	0002      	movs	r2, r0
    10a0:	1dfb      	adds	r3, r7, #7
    10a2:	701a      	strb	r2, [r3, #0]
    if (degrees_F != new_scale) {
    10a4:	4b1f      	ldr	r3, [pc, #124]	; (1124 <thermal_change_scale+0x8c>)
    10a6:	781b      	ldrb	r3, [r3, #0]
    10a8:	1dfa      	adds	r2, r7, #7
    10aa:	7812      	ldrb	r2, [r2, #0]
    10ac:	429a      	cmp	r2, r3
    10ae:	d034      	beq.n	111a <thermal_change_scale+0x82>
        degrees_F = new_scale;
    10b0:	4b1c      	ldr	r3, [pc, #112]	; (1124 <thermal_change_scale+0x8c>)
    10b2:	1dfa      	adds	r2, r7, #7
    10b4:	7812      	ldrb	r2, [r2, #0]
    10b6:	701a      	strb	r2, [r3, #0]
        if (new_scale) {
    10b8:	1dfb      	adds	r3, r7, #7
    10ba:	781b      	ldrb	r3, [r3, #0]
    10bc:	2b00      	cmp	r3, #0
    10be:	d016      	beq.n	10ee <thermal_change_scale+0x56>
            if (water_temp != WATER_TEMP_INVALID) 
    10c0:	4b19      	ldr	r3, [pc, #100]	; (1128 <thermal_change_scale+0x90>)
    10c2:	781b      	ldrb	r3, [r3, #0]
    10c4:	2bff      	cmp	r3, #255	; 0xff
    10c6:	d008      	beq.n	10da <thermal_change_scale+0x42>
                water_temp = celsius_to_fahrenheit(water_temp);       
    10c8:	4b17      	ldr	r3, [pc, #92]	; (1128 <thermal_change_scale+0x90>)
    10ca:	781b      	ldrb	r3, [r3, #0]
    10cc:	0018      	movs	r0, r3
    10ce:	4b17      	ldr	r3, [pc, #92]	; (112c <thermal_change_scale+0x94>)
    10d0:	4798      	blx	r3
    10d2:	0003      	movs	r3, r0
    10d4:	001a      	movs	r2, r3
    10d6:	4b14      	ldr	r3, [pc, #80]	; (1128 <thermal_change_scale+0x90>)
    10d8:	701a      	strb	r2, [r3, #0]
                
            temp_set_point = celsius_to_fahrenheit(temp_set_point);
    10da:	4b15      	ldr	r3, [pc, #84]	; (1130 <thermal_change_scale+0x98>)
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	0018      	movs	r0, r3
    10e0:	4b12      	ldr	r3, [pc, #72]	; (112c <thermal_change_scale+0x94>)
    10e2:	4798      	blx	r3
    10e4:	0003      	movs	r3, r0
    10e6:	001a      	movs	r2, r3
    10e8:	4b11      	ldr	r3, [pc, #68]	; (1130 <thermal_change_scale+0x98>)
    10ea:	701a      	strb	r2, [r3, #0]

            temp_set_point = fahrenheit_to_celsius(temp_set_point);
        }
    }

}
    10ec:	e015      	b.n	111a <thermal_change_scale+0x82>
                water_temp = celsius_to_fahrenheit(water_temp);       
                
            temp_set_point = celsius_to_fahrenheit(temp_set_point);
        }
        else {
            if (water_temp != WATER_TEMP_INVALID)
    10ee:	4b0e      	ldr	r3, [pc, #56]	; (1128 <thermal_change_scale+0x90>)
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	2bff      	cmp	r3, #255	; 0xff
    10f4:	d008      	beq.n	1108 <thermal_change_scale+0x70>
                water_temp = fahrenheit_to_celsius(water_temp);
    10f6:	4b0c      	ldr	r3, [pc, #48]	; (1128 <thermal_change_scale+0x90>)
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	0018      	movs	r0, r3
    10fc:	4b0d      	ldr	r3, [pc, #52]	; (1134 <thermal_change_scale+0x9c>)
    10fe:	4798      	blx	r3
    1100:	0003      	movs	r3, r0
    1102:	001a      	movs	r2, r3
    1104:	4b08      	ldr	r3, [pc, #32]	; (1128 <thermal_change_scale+0x90>)
    1106:	701a      	strb	r2, [r3, #0]

            temp_set_point = fahrenheit_to_celsius(temp_set_point);
    1108:	4b09      	ldr	r3, [pc, #36]	; (1130 <thermal_change_scale+0x98>)
    110a:	781b      	ldrb	r3, [r3, #0]
    110c:	0018      	movs	r0, r3
    110e:	4b09      	ldr	r3, [pc, #36]	; (1134 <thermal_change_scale+0x9c>)
    1110:	4798      	blx	r3
    1112:	0003      	movs	r3, r0
    1114:	001a      	movs	r2, r3
    1116:	4b06      	ldr	r3, [pc, #24]	; (1130 <thermal_change_scale+0x98>)
    1118:	701a      	strb	r2, [r3, #0]
        }
    }

}
    111a:	46c0      	nop			; (mov r8, r8)
    111c:	46bd      	mov	sp, r7
    111e:	b002      	add	sp, #8
    1120:	bd80      	pop	{r7, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	2000000e 	.word	0x2000000e
    1128:	2000000d 	.word	0x2000000d
    112c:	0000104d 	.word	0x0000104d
    1130:	2000000c 	.word	0x2000000c
    1134:	00001001 	.word	0x00001001

00001138 <thermal_set_temperature>:

enum status_code thermal_set_temperature(uint8_t temperature)
{        
    1138:	b580      	push	{r7, lr}
    113a:	b084      	sub	sp, #16
    113c:	af00      	add	r7, sp, #0
    113e:	0002      	movs	r2, r0
    1140:	1dfb      	adds	r3, r7, #7
    1142:	701a      	strb	r2, [r3, #0]
    uint8_t temp_max, temp_min;

    if (degrees_F) {
    1144:	4b16      	ldr	r3, [pc, #88]	; (11a0 <thermal_set_temperature+0x68>)
    1146:	781b      	ldrb	r3, [r3, #0]
    1148:	2b00      	cmp	r3, #0
    114a:	d008      	beq.n	115e <thermal_set_temperature+0x26>
        temp_min = MIN_SETPOINT_TEMP_F;
    114c:	230e      	movs	r3, #14
    114e:	18fb      	adds	r3, r7, r3
    1150:	2244      	movs	r2, #68	; 0x44
    1152:	701a      	strb	r2, [r3, #0]
        temp_max = MAX_SETPOINT_TEMP_F;
    1154:	230f      	movs	r3, #15
    1156:	18fb      	adds	r3, r7, r3
    1158:	2268      	movs	r2, #104	; 0x68
    115a:	701a      	strb	r2, [r3, #0]
    115c:	e007      	b.n	116e <thermal_set_temperature+0x36>
    }
    else {
        temp_min = MIN_SETPOINT_TEMP_C;
    115e:	230e      	movs	r3, #14
    1160:	18fb      	adds	r3, r7, r3
    1162:	2214      	movs	r2, #20
    1164:	701a      	strb	r2, [r3, #0]
        temp_max = MAX_SETPOINT_TEMP_C;
    1166:	230f      	movs	r3, #15
    1168:	18fb      	adds	r3, r7, r3
    116a:	2228      	movs	r2, #40	; 0x28
    116c:	701a      	strb	r2, [r3, #0]
    }
    
    if ((temperature >= temp_min) && (temperature <= temp_max)) {
    116e:	1dfa      	adds	r2, r7, #7
    1170:	230e      	movs	r3, #14
    1172:	18fb      	adds	r3, r7, r3
    1174:	7812      	ldrb	r2, [r2, #0]
    1176:	781b      	ldrb	r3, [r3, #0]
    1178:	429a      	cmp	r2, r3
    117a:	d30c      	bcc.n	1196 <thermal_set_temperature+0x5e>
    117c:	1dfa      	adds	r2, r7, #7
    117e:	230f      	movs	r3, #15
    1180:	18fb      	adds	r3, r7, r3
    1182:	7812      	ldrb	r2, [r2, #0]
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	429a      	cmp	r2, r3
    1188:	d805      	bhi.n	1196 <thermal_set_temperature+0x5e>
        temp_set_point = temperature;
    118a:	4b06      	ldr	r3, [pc, #24]	; (11a4 <thermal_set_temperature+0x6c>)
    118c:	1dfa      	adds	r2, r7, #7
    118e:	7812      	ldrb	r2, [r2, #0]
    1190:	701a      	strb	r2, [r3, #0]
        return STATUS_OK;
    1192:	2300      	movs	r3, #0
    1194:	e000      	b.n	1198 <thermal_set_temperature+0x60>
    }
    else
        return STATUS_ERR_BAD_DATA;
    1196:	2313      	movs	r3, #19
}
    1198:	0018      	movs	r0, r3
    119a:	46bd      	mov	sp, r7
    119c:	b004      	add	sp, #16
    119e:	bd80      	pop	{r7, pc}
    11a0:	2000000e 	.word	0x2000000e
    11a4:	2000000c 	.word	0x2000000c

000011a8 <thermal_get_temperature>:

uint8_t thermal_get_temperature(void)
{
    11a8:	b580      	push	{r7, lr}
    11aa:	af00      	add	r7, sp, #0
    return temp_set_point;
    11ac:	4b02      	ldr	r3, [pc, #8]	; (11b8 <thermal_get_temperature+0x10>)
    11ae:	781b      	ldrb	r3, [r3, #0]
}
    11b0:	0018      	movs	r0, r3
    11b2:	46bd      	mov	sp, r7
    11b4:	bd80      	pop	{r7, pc}
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	2000000c 	.word	0x2000000c

000011bc <thermal_get_water_temp>:

uint8_t thermal_get_water_temp(void)
{    
    11bc:	b580      	push	{r7, lr}
    11be:	af00      	add	r7, sp, #0
	return water_temp;
    11c0:	4b02      	ldr	r3, [pc, #8]	; (11cc <thermal_get_water_temp+0x10>)
    11c2:	781b      	ldrb	r3, [r3, #0]
}
    11c4:	0018      	movs	r0, r3
    11c6:	46bd      	mov	sp, r7
    11c8:	bd80      	pop	{r7, pc}
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	2000000d 	.word	0x2000000d

000011d0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    11d0:	b580      	push	{r7, lr}
    11d2:	b082      	sub	sp, #8
    11d4:	af00      	add	r7, sp, #0
    11d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11d8:	687b      	ldr	r3, [r7, #4]
    11da:	2280      	movs	r2, #128	; 0x80
    11dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    11de:	687b      	ldr	r3, [r7, #4]
    11e0:	2200      	movs	r2, #0
    11e2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    11e4:	687b      	ldr	r3, [r7, #4]
    11e6:	2201      	movs	r2, #1
    11e8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    11ea:	687b      	ldr	r3, [r7, #4]
    11ec:	2200      	movs	r2, #0
    11ee:	70da      	strb	r2, [r3, #3]
}
    11f0:	46c0      	nop			; (mov r8, r8)
    11f2:	46bd      	mov	sp, r7
    11f4:	b002      	add	sp, #8
    11f6:	bd80      	pop	{r7, pc}

000011f8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    11f8:	b580      	push	{r7, lr}
    11fa:	b084      	sub	sp, #16
    11fc:	af00      	add	r7, sp, #0
    11fe:	0002      	movs	r2, r0
    1200:	1dfb      	adds	r3, r7, #7
    1202:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1204:	230f      	movs	r3, #15
    1206:	18fb      	adds	r3, r7, r3
    1208:	1dfa      	adds	r2, r7, #7
    120a:	7812      	ldrb	r2, [r2, #0]
    120c:	09d2      	lsrs	r2, r2, #7
    120e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1210:	230e      	movs	r3, #14
    1212:	18fb      	adds	r3, r7, r3
    1214:	1dfa      	adds	r2, r7, #7
    1216:	7812      	ldrb	r2, [r2, #0]
    1218:	0952      	lsrs	r2, r2, #5
    121a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    121c:	4b0d      	ldr	r3, [pc, #52]	; (1254 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    121e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1220:	230f      	movs	r3, #15
    1222:	18fb      	adds	r3, r7, r3
    1224:	781b      	ldrb	r3, [r3, #0]
    1226:	2b00      	cmp	r3, #0
    1228:	d10f      	bne.n	124a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    122a:	230f      	movs	r3, #15
    122c:	18fb      	adds	r3, r7, r3
    122e:	781b      	ldrb	r3, [r3, #0]
    1230:	009b      	lsls	r3, r3, #2
    1232:	2210      	movs	r2, #16
    1234:	4694      	mov	ip, r2
    1236:	44bc      	add	ip, r7
    1238:	4463      	add	r3, ip
    123a:	3b08      	subs	r3, #8
    123c:	681a      	ldr	r2, [r3, #0]
    123e:	230e      	movs	r3, #14
    1240:	18fb      	adds	r3, r7, r3
    1242:	781b      	ldrb	r3, [r3, #0]
    1244:	01db      	lsls	r3, r3, #7
    1246:	18d3      	adds	r3, r2, r3
    1248:	e000      	b.n	124c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    124a:	2300      	movs	r3, #0
	}
}
    124c:	0018      	movs	r0, r3
    124e:	46bd      	mov	sp, r7
    1250:	b004      	add	sp, #16
    1252:	bd80      	pop	{r7, pc}
    1254:	41004400 	.word	0x41004400

00001258 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1258:	b580      	push	{r7, lr}
    125a:	b082      	sub	sp, #8
    125c:	af00      	add	r7, sp, #0
    125e:	0002      	movs	r2, r0
    1260:	1dfb      	adds	r3, r7, #7
    1262:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1264:	1dfb      	adds	r3, r7, #7
    1266:	781b      	ldrb	r3, [r3, #0]
    1268:	0018      	movs	r0, r3
    126a:	4b03      	ldr	r3, [pc, #12]	; (1278 <port_get_group_from_gpio_pin+0x20>)
    126c:	4798      	blx	r3
    126e:	0003      	movs	r3, r0
}
    1270:	0018      	movs	r0, r3
    1272:	46bd      	mov	sp, r7
    1274:	b002      	add	sp, #8
    1276:	bd80      	pop	{r7, pc}
    1278:	000011f9 	.word	0x000011f9

0000127c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    127c:	b580      	push	{r7, lr}
    127e:	b084      	sub	sp, #16
    1280:	af00      	add	r7, sp, #0
    1282:	0002      	movs	r2, r0
    1284:	1dfb      	adds	r3, r7, #7
    1286:	701a      	strb	r2, [r3, #0]
    1288:	1dbb      	adds	r3, r7, #6
    128a:	1c0a      	adds	r2, r1, #0
    128c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    128e:	1dfb      	adds	r3, r7, #7
    1290:	781b      	ldrb	r3, [r3, #0]
    1292:	0018      	movs	r0, r3
    1294:	4b0d      	ldr	r3, [pc, #52]	; (12cc <port_pin_set_output_level+0x50>)
    1296:	4798      	blx	r3
    1298:	0003      	movs	r3, r0
    129a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    129c:	1dfb      	adds	r3, r7, #7
    129e:	781b      	ldrb	r3, [r3, #0]
    12a0:	221f      	movs	r2, #31
    12a2:	4013      	ands	r3, r2
    12a4:	2201      	movs	r2, #1
    12a6:	409a      	lsls	r2, r3
    12a8:	0013      	movs	r3, r2
    12aa:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    12ac:	1dbb      	adds	r3, r7, #6
    12ae:	781b      	ldrb	r3, [r3, #0]
    12b0:	2b00      	cmp	r3, #0
    12b2:	d003      	beq.n	12bc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    12b4:	68fb      	ldr	r3, [r7, #12]
    12b6:	68ba      	ldr	r2, [r7, #8]
    12b8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    12ba:	e002      	b.n	12c2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    12bc:	68fb      	ldr	r3, [r7, #12]
    12be:	68ba      	ldr	r2, [r7, #8]
    12c0:	615a      	str	r2, [r3, #20]
	}
}
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	46bd      	mov	sp, r7
    12c6:	b004      	add	sp, #16
    12c8:	bd80      	pop	{r7, pc}
    12ca:	46c0      	nop			; (mov r8, r8)
    12cc:	00001259 	.word	0x00001259

000012d0 <tm1640_start>:
volatile uint8_t transfer_complete = 1;
SemaphoreHandle_t tm1640_sem;
uint8_t wtc_bus_dummy_data[TM1640_GRIDS + 1] = {0};

static inline void tm1640_start(void)
{
    12d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12d2:	b083      	sub	sp, #12
    12d4:	af00      	add	r7, sp, #0
    // Switch the CLK pin over to GPIO
    struct port_config gpio_conf;  
    gpio_conf.direction = PORT_PIN_DIR_OUTPUT;
    12d6:	1d3b      	adds	r3, r7, #4
    12d8:	2201      	movs	r2, #1
    12da:	701a      	strb	r2, [r3, #0]
    gpio_conf.input_pull = PORT_PIN_PULL_UP;
    12dc:	1d3b      	adds	r3, r7, #4
    12de:	2201      	movs	r2, #1
    12e0:	705a      	strb	r2, [r3, #1]
    gpio_conf.powersave = false;
    12e2:	1d3b      	adds	r3, r7, #4
    12e4:	2200      	movs	r2, #0
    12e6:	709a      	strb	r2, [r3, #2]
    
    port_pin_set_config(TM1640_CLK_PIN, &gpio_conf);
    12e8:	1d3b      	adds	r3, r7, #4
    12ea:	0019      	movs	r1, r3
    12ec:	2009      	movs	r0, #9
    12ee:	4b12      	ldr	r3, [pc, #72]	; (1338 <tm1640_start+0x68>)
    12f0:	4798      	blx	r3

    // Bring DOUT and CLK low for 1us each    
    port_pin_set_output_level(TM1640_DOUT_PIN, 0);
    12f2:	2100      	movs	r1, #0
    12f4:	202a      	movs	r0, #42	; 0x2a
    12f6:	4b11      	ldr	r3, [pc, #68]	; (133c <tm1640_start+0x6c>)
    12f8:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
    12fa:	2000      	movs	r0, #0
    12fc:	4b10      	ldr	r3, [pc, #64]	; (1340 <tm1640_start+0x70>)
    12fe:	4798      	blx	r3
    1300:	0003      	movs	r3, r0
    1302:	001d      	movs	r5, r3
    1304:	2300      	movs	r3, #0
    1306:	001e      	movs	r6, r3
    1308:	4b0e      	ldr	r3, [pc, #56]	; (1344 <tm1640_start+0x74>)
    130a:	2400      	movs	r4, #0
    130c:	0028      	movs	r0, r5
    130e:	0031      	movs	r1, r6
    1310:	18c0      	adds	r0, r0, r3
    1312:	4161      	adcs	r1, r4
    1314:	4c0c      	ldr	r4, [pc, #48]	; (1348 <tm1640_start+0x78>)
    1316:	4a0d      	ldr	r2, [pc, #52]	; (134c <tm1640_start+0x7c>)
    1318:	2300      	movs	r3, #0
    131a:	47a0      	blx	r4
    131c:	0003      	movs	r3, r0
    131e:	000c      	movs	r4, r1
    1320:	0018      	movs	r0, r3
    1322:	4b0b      	ldr	r3, [pc, #44]	; (1350 <tm1640_start+0x80>)
    1324:	4798      	blx	r3
    port_pin_set_output_level(TM1640_CLK_PIN, 0);    
    1326:	2100      	movs	r1, #0
    1328:	2009      	movs	r0, #9
    132a:	4b04      	ldr	r3, [pc, #16]	; (133c <tm1640_start+0x6c>)
    132c:	4798      	blx	r3
}
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	46bd      	mov	sp, r7
    1332:	b003      	add	sp, #12
    1334:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	00007cdd 	.word	0x00007cdd
    133c:	0000127d 	.word	0x0000127d
    1340:	0000a8a1 	.word	0x0000a8a1
    1344:	006acfbf 	.word	0x006acfbf
    1348:	0000f285 	.word	0x0000f285
    134c:	006acfc0 	.word	0x006acfc0
    1350:	20000001 	.word	0x20000001

00001354 <tm1640_stop>:

static inline void tm1640_stop(void)
{
    1354:	b5f0      	push	{r4, r5, r6, r7, lr}
    1356:	b085      	sub	sp, #20
    1358:	af00      	add	r7, sp, #0
    // Switch the DO and CLK pins over to GPIOs    
    struct system_pinmux_config clk_conf;        
        
    // Bring DOUT low for 1us, then bring DOUT and CLK high for 1us each    
    port_pin_set_output_level(TM1640_DOUT_PIN, 0);
    135a:	2100      	movs	r1, #0
    135c:	202a      	movs	r0, #42	; 0x2a
    135e:	4b26      	ldr	r3, [pc, #152]	; (13f8 <tm1640_stop+0xa4>)
    1360:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
    1362:	2000      	movs	r0, #0
    1364:	4b25      	ldr	r3, [pc, #148]	; (13fc <tm1640_stop+0xa8>)
    1366:	4798      	blx	r3
    1368:	0003      	movs	r3, r0
    136a:	603b      	str	r3, [r7, #0]
    136c:	2300      	movs	r3, #0
    136e:	607b      	str	r3, [r7, #4]
    1370:	4b23      	ldr	r3, [pc, #140]	; (1400 <tm1640_stop+0xac>)
    1372:	2400      	movs	r4, #0
    1374:	6838      	ldr	r0, [r7, #0]
    1376:	6879      	ldr	r1, [r7, #4]
    1378:	18c0      	adds	r0, r0, r3
    137a:	4161      	adcs	r1, r4
    137c:	4c21      	ldr	r4, [pc, #132]	; (1404 <tm1640_stop+0xb0>)
    137e:	4a22      	ldr	r2, [pc, #136]	; (1408 <tm1640_stop+0xb4>)
    1380:	2300      	movs	r3, #0
    1382:	47a0      	blx	r4
    1384:	0003      	movs	r3, r0
    1386:	000c      	movs	r4, r1
    1388:	0018      	movs	r0, r3
    138a:	4b20      	ldr	r3, [pc, #128]	; (140c <tm1640_stop+0xb8>)
    138c:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);
    138e:	2101      	movs	r1, #1
    1390:	2009      	movs	r0, #9
    1392:	4b19      	ldr	r3, [pc, #100]	; (13f8 <tm1640_stop+0xa4>)
    1394:	4798      	blx	r3
    delay_us(TM1640_BIT_TIME);
    1396:	2000      	movs	r0, #0
    1398:	4b18      	ldr	r3, [pc, #96]	; (13fc <tm1640_stop+0xa8>)
    139a:	4798      	blx	r3
    139c:	0003      	movs	r3, r0
    139e:	001d      	movs	r5, r3
    13a0:	2300      	movs	r3, #0
    13a2:	001e      	movs	r6, r3
    13a4:	4b16      	ldr	r3, [pc, #88]	; (1400 <tm1640_stop+0xac>)
    13a6:	2400      	movs	r4, #0
    13a8:	0028      	movs	r0, r5
    13aa:	0031      	movs	r1, r6
    13ac:	18c0      	adds	r0, r0, r3
    13ae:	4161      	adcs	r1, r4
    13b0:	4c14      	ldr	r4, [pc, #80]	; (1404 <tm1640_stop+0xb0>)
    13b2:	4a15      	ldr	r2, [pc, #84]	; (1408 <tm1640_stop+0xb4>)
    13b4:	2300      	movs	r3, #0
    13b6:	47a0      	blx	r4
    13b8:	0003      	movs	r3, r0
    13ba:	000c      	movs	r4, r1
    13bc:	0018      	movs	r0, r3
    13be:	4b13      	ldr	r3, [pc, #76]	; (140c <tm1640_stop+0xb8>)
    13c0:	4798      	blx	r3
    port_pin_set_output_level(TM1640_DOUT_PIN, 1);    
    13c2:	2101      	movs	r1, #1
    13c4:	202a      	movs	r0, #42	; 0x2a
    13c6:	4b0c      	ldr	r3, [pc, #48]	; (13f8 <tm1640_stop+0xa4>)
    13c8:	4798      	blx	r3

    // Restore peripheral control
    system_pinmux_get_config_defaults(&clk_conf);
    13ca:	230c      	movs	r3, #12
    13cc:	18fb      	adds	r3, r7, r3
    13ce:	0018      	movs	r0, r3
    13d0:	4b0f      	ldr	r3, [pc, #60]	; (1410 <tm1640_stop+0xbc>)
    13d2:	4798      	blx	r3
    clk_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    13d4:	230c      	movs	r3, #12
    13d6:	18fb      	adds	r3, r7, r3
    13d8:	2200      	movs	r2, #0
    13da:	705a      	strb	r2, [r3, #1]
    clk_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    13dc:	230c      	movs	r3, #12
    13de:	18fb      	adds	r3, r7, r3
    13e0:	2202      	movs	r2, #2
    13e2:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &clk_conf);    
    13e4:	230c      	movs	r3, #12
    13e6:	18fb      	adds	r3, r7, r3
    13e8:	0019      	movs	r1, r3
    13ea:	2009      	movs	r0, #9
    13ec:	4b09      	ldr	r3, [pc, #36]	; (1414 <tm1640_stop+0xc0>)
    13ee:	4798      	blx	r3
}
    13f0:	46c0      	nop			; (mov r8, r8)
    13f2:	46bd      	mov	sp, r7
    13f4:	b005      	add	sp, #20
    13f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13f8:	0000127d 	.word	0x0000127d
    13fc:	0000a8a1 	.word	0x0000a8a1
    1400:	006acfbf 	.word	0x006acfbf
    1404:	0000f285 	.word	0x0000f285
    1408:	006acfc0 	.word	0x006acfc0
    140c:	20000001 	.word	0x20000001
    1410:	000011d1 	.word	0x000011d1
    1414:	0000ac65 	.word	0x0000ac65

00001418 <tm1640_write>:

static inline void tm1640_write(uint8_t byte)
{
    1418:	b5f0      	push	{r4, r5, r6, r7, lr}
    141a:	b089      	sub	sp, #36	; 0x24
    141c:	af00      	add	r7, sp, #0
    141e:	0002      	movs	r2, r0
    1420:	2317      	movs	r3, #23
    1422:	18fb      	adds	r3, r7, r3
    1424:	701a      	strb	r2, [r3, #0]
    uint8_t bit;

    // TM1640 requires LSB to be transmitted first
    for (bit = 0; bit < 8; bit++) {
    1426:	230f      	movs	r3, #15
    1428:	2210      	movs	r2, #16
    142a:	4694      	mov	ip, r2
    142c:	44bc      	add	ip, r7
    142e:	4463      	add	r3, ip
    1430:	2200      	movs	r2, #0
    1432:	701a      	strb	r2, [r3, #0]
    1434:	e06d      	b.n	1512 <tm1640_write+0xfa>
        if ((byte >> bit) & 0x01) 
    1436:	2317      	movs	r3, #23
    1438:	18fb      	adds	r3, r7, r3
    143a:	781a      	ldrb	r2, [r3, #0]
    143c:	230f      	movs	r3, #15
    143e:	2110      	movs	r1, #16
    1440:	468c      	mov	ip, r1
    1442:	44bc      	add	ip, r7
    1444:	4463      	add	r3, ip
    1446:	781b      	ldrb	r3, [r3, #0]
    1448:	411a      	asrs	r2, r3
    144a:	0013      	movs	r3, r2
    144c:	2201      	movs	r2, #1
    144e:	4013      	ands	r3, r2
    1450:	d004      	beq.n	145c <tm1640_write+0x44>
            port_pin_set_output_level(TM1640_DOUT_PIN, 1);    
    1452:	2101      	movs	r1, #1
    1454:	202a      	movs	r0, #42	; 0x2a
    1456:	4b35      	ldr	r3, [pc, #212]	; (152c <tm1640_write+0x114>)
    1458:	4798      	blx	r3
    145a:	e003      	b.n	1464 <tm1640_write+0x4c>
        else
            port_pin_set_output_level(TM1640_DOUT_PIN, 0);    
    145c:	2100      	movs	r1, #0
    145e:	202a      	movs	r0, #42	; 0x2a
    1460:	4b32      	ldr	r3, [pc, #200]	; (152c <tm1640_write+0x114>)
    1462:	4798      	blx	r3

        delay_us(TM1640_BIT_TIME);
    1464:	2000      	movs	r0, #0
    1466:	4b32      	ldr	r3, [pc, #200]	; (1530 <tm1640_write+0x118>)
    1468:	4798      	blx	r3
    146a:	0003      	movs	r3, r0
    146c:	001d      	movs	r5, r3
    146e:	2300      	movs	r3, #0
    1470:	001e      	movs	r6, r3
    1472:	4b30      	ldr	r3, [pc, #192]	; (1534 <tm1640_write+0x11c>)
    1474:	2400      	movs	r4, #0
    1476:	195b      	adds	r3, r3, r5
    1478:	4174      	adcs	r4, r6
    147a:	0018      	movs	r0, r3
    147c:	0021      	movs	r1, r4
    147e:	4c2e      	ldr	r4, [pc, #184]	; (1538 <tm1640_write+0x120>)
    1480:	4a2e      	ldr	r2, [pc, #184]	; (153c <tm1640_write+0x124>)
    1482:	2300      	movs	r3, #0
    1484:	47a0      	blx	r4
    1486:	0003      	movs	r3, r0
    1488:	000c      	movs	r4, r1
    148a:	0018      	movs	r0, r3
    148c:	4b2c      	ldr	r3, [pc, #176]	; (1540 <tm1640_write+0x128>)
    148e:	4798      	blx	r3
        port_pin_set_output_level(TM1640_CLK_PIN, 1);
    1490:	2101      	movs	r1, #1
    1492:	2009      	movs	r0, #9
    1494:	4b25      	ldr	r3, [pc, #148]	; (152c <tm1640_write+0x114>)
    1496:	4798      	blx	r3
        delay_us(TM1640_BIT_TIME);
    1498:	2000      	movs	r0, #0
    149a:	4b25      	ldr	r3, [pc, #148]	; (1530 <tm1640_write+0x118>)
    149c:	4798      	blx	r3
    149e:	0003      	movs	r3, r0
    14a0:	60bb      	str	r3, [r7, #8]
    14a2:	2300      	movs	r3, #0
    14a4:	60fb      	str	r3, [r7, #12]
    14a6:	4b23      	ldr	r3, [pc, #140]	; (1534 <tm1640_write+0x11c>)
    14a8:	2400      	movs	r4, #0
    14aa:	68b8      	ldr	r0, [r7, #8]
    14ac:	68f9      	ldr	r1, [r7, #12]
    14ae:	18c0      	adds	r0, r0, r3
    14b0:	4161      	adcs	r1, r4
    14b2:	4c21      	ldr	r4, [pc, #132]	; (1538 <tm1640_write+0x120>)
    14b4:	4a21      	ldr	r2, [pc, #132]	; (153c <tm1640_write+0x124>)
    14b6:	2300      	movs	r3, #0
    14b8:	47a0      	blx	r4
    14ba:	0003      	movs	r3, r0
    14bc:	000c      	movs	r4, r1
    14be:	0018      	movs	r0, r3
    14c0:	4b1f      	ldr	r3, [pc, #124]	; (1540 <tm1640_write+0x128>)
    14c2:	4798      	blx	r3
        port_pin_set_output_level(TM1640_CLK_PIN, 0);
    14c4:	2100      	movs	r1, #0
    14c6:	2009      	movs	r0, #9
    14c8:	4b18      	ldr	r3, [pc, #96]	; (152c <tm1640_write+0x114>)
    14ca:	4798      	blx	r3
        delay_us(TM1640_BIT_TIME);
    14cc:	2000      	movs	r0, #0
    14ce:	4b18      	ldr	r3, [pc, #96]	; (1530 <tm1640_write+0x118>)
    14d0:	4798      	blx	r3
    14d2:	0003      	movs	r3, r0
    14d4:	603b      	str	r3, [r7, #0]
    14d6:	2300      	movs	r3, #0
    14d8:	607b      	str	r3, [r7, #4]
    14da:	4b16      	ldr	r3, [pc, #88]	; (1534 <tm1640_write+0x11c>)
    14dc:	2400      	movs	r4, #0
    14de:	6838      	ldr	r0, [r7, #0]
    14e0:	6879      	ldr	r1, [r7, #4]
    14e2:	18c0      	adds	r0, r0, r3
    14e4:	4161      	adcs	r1, r4
    14e6:	4c14      	ldr	r4, [pc, #80]	; (1538 <tm1640_write+0x120>)
    14e8:	4a14      	ldr	r2, [pc, #80]	; (153c <tm1640_write+0x124>)
    14ea:	2300      	movs	r3, #0
    14ec:	47a0      	blx	r4
    14ee:	0003      	movs	r3, r0
    14f0:	000c      	movs	r4, r1
    14f2:	0018      	movs	r0, r3
    14f4:	4b12      	ldr	r3, [pc, #72]	; (1540 <tm1640_write+0x128>)
    14f6:	4798      	blx	r3
static inline void tm1640_write(uint8_t byte)
{
    uint8_t bit;

    // TM1640 requires LSB to be transmitted first
    for (bit = 0; bit < 8; bit++) {
    14f8:	230f      	movs	r3, #15
    14fa:	2210      	movs	r2, #16
    14fc:	4694      	mov	ip, r2
    14fe:	44bc      	add	ip, r7
    1500:	4463      	add	r3, ip
    1502:	781a      	ldrb	r2, [r3, #0]
    1504:	230f      	movs	r3, #15
    1506:	2110      	movs	r1, #16
    1508:	468c      	mov	ip, r1
    150a:	44bc      	add	ip, r7
    150c:	4463      	add	r3, ip
    150e:	3201      	adds	r2, #1
    1510:	701a      	strb	r2, [r3, #0]
    1512:	230f      	movs	r3, #15
    1514:	2210      	movs	r2, #16
    1516:	4694      	mov	ip, r2
    1518:	44bc      	add	ip, r7
    151a:	4463      	add	r3, ip
    151c:	781b      	ldrb	r3, [r3, #0]
    151e:	2b07      	cmp	r3, #7
    1520:	d989      	bls.n	1436 <tm1640_write+0x1e>
        port_pin_set_output_level(TM1640_CLK_PIN, 1);
        delay_us(TM1640_BIT_TIME);
        port_pin_set_output_level(TM1640_CLK_PIN, 0);
        delay_us(TM1640_BIT_TIME);
    }
}
    1522:	46c0      	nop			; (mov r8, r8)
    1524:	46bd      	mov	sp, r7
    1526:	b009      	add	sp, #36	; 0x24
    1528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	0000127d 	.word	0x0000127d
    1530:	0000a8a1 	.word	0x0000a8a1
    1534:	006acfbf 	.word	0x006acfbf
    1538:	0000f285 	.word	0x0000f285
    153c:	006acfc0 	.word	0x006acfc0
    1540:	20000001 	.word	0x20000001

00001544 <tm1640_write_cmd>:


static enum status_code tm1640_write_cmd(uint8_t cmd, uint8_t data)
{
    1544:	b580      	push	{r7, lr}
    1546:	b082      	sub	sp, #8
    1548:	af00      	add	r7, sp, #0
    154a:	0002      	movs	r2, r0
    154c:	1dfb      	adds	r3, r7, #7
    154e:	701a      	strb	r2, [r3, #0]
    1550:	1dbb      	adds	r3, r7, #6
    1552:	1c0a      	adds	r2, r1, #0
    1554:	701a      	strb	r2, [r3, #0]
    taskENTER_CRITICAL();
    1556:	4b0f      	ldr	r3, [pc, #60]	; (1594 <tm1640_write_cmd+0x50>)
    1558:	4798      	blx	r3
    
    tm1640_start();
    155a:	4b0f      	ldr	r3, [pc, #60]	; (1598 <tm1640_write_cmd+0x54>)
    155c:	4798      	blx	r3
    tm1640_write((cmd & CTRL_CMD_MASK) | (data & ~CTRL_CMD_MASK));
    155e:	1dfb      	adds	r3, r7, #7
    1560:	781b      	ldrb	r3, [r3, #0]
    1562:	b25b      	sxtb	r3, r3
    1564:	223f      	movs	r2, #63	; 0x3f
    1566:	4393      	bics	r3, r2
    1568:	b25a      	sxtb	r2, r3
    156a:	1dbb      	adds	r3, r7, #6
    156c:	781b      	ldrb	r3, [r3, #0]
    156e:	b25b      	sxtb	r3, r3
    1570:	213f      	movs	r1, #63	; 0x3f
    1572:	400b      	ands	r3, r1
    1574:	b25b      	sxtb	r3, r3
    1576:	4313      	orrs	r3, r2
    1578:	b25b      	sxtb	r3, r3
    157a:	b2db      	uxtb	r3, r3
    157c:	0018      	movs	r0, r3
    157e:	4b07      	ldr	r3, [pc, #28]	; (159c <tm1640_write_cmd+0x58>)
    1580:	4798      	blx	r3
    tm1640_stop();
    1582:	4b07      	ldr	r3, [pc, #28]	; (15a0 <tm1640_write_cmd+0x5c>)
    1584:	4798      	blx	r3

    taskEXIT_CRITICAL();
    1586:	4b07      	ldr	r3, [pc, #28]	; (15a4 <tm1640_write_cmd+0x60>)
    1588:	4798      	blx	r3

    return STATUS_OK;
    158a:	2300      	movs	r3, #0
}
    158c:	0018      	movs	r0, r3
    158e:	46bd      	mov	sp, r7
    1590:	b002      	add	sp, #8
    1592:	bd80      	pop	{r7, pc}
    1594:	0000b2b9 	.word	0x0000b2b9
    1598:	000012d1 	.word	0x000012d1
    159c:	00001419 	.word	0x00001419
    15a0:	00001355 	.word	0x00001355
    15a4:	0000b2dd 	.word	0x0000b2dd

000015a8 <tm1640_init>:

void tm1640_init(void)
{
    15a8:	b580      	push	{r7, lr}
    15aa:	b082      	sub	sp, #8
    15ac:	af00      	add	r7, sp, #0
    struct port_config gpio_conf;
    gpio_conf.direction = PORT_PIN_DIR_OUTPUT;
    15ae:	1d3b      	adds	r3, r7, #4
    15b0:	2201      	movs	r2, #1
    15b2:	701a      	strb	r2, [r3, #0]
    gpio_conf.input_pull = PORT_PIN_PULL_UP;
    15b4:	1d3b      	adds	r3, r7, #4
    15b6:	2201      	movs	r2, #1
    15b8:	705a      	strb	r2, [r3, #1]
    gpio_conf.powersave = false;
    15ba:	1d3b      	adds	r3, r7, #4
    15bc:	2200      	movs	r2, #0
    15be:	709a      	strb	r2, [r3, #2]
    port_pin_set_config(TM1640_DOUT_PIN, &gpio_conf);
    15c0:	1d3b      	adds	r3, r7, #4
    15c2:	0019      	movs	r1, r3
    15c4:	202a      	movs	r0, #42	; 0x2a
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <tm1640_init+0x34>)
    15c8:	4798      	blx	r3
    port_pin_set_output_level(TM1640_DOUT_PIN, 1);
    15ca:	2101      	movs	r1, #1
    15cc:	202a      	movs	r0, #42	; 0x2a
    15ce:	4b04      	ldr	r3, [pc, #16]	; (15e0 <tm1640_init+0x38>)
    15d0:	4798      	blx	r3
}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	46bd      	mov	sp, r7
    15d6:	b002      	add	sp, #8
    15d8:	bd80      	pop	{r7, pc}
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	00007cdd 	.word	0x00007cdd
    15e0:	0000127d 	.word	0x0000127d

000015e4 <tm1640_display_on>:


enum status_code tm1640_display_on(uint8_t on)
{
    15e4:	b580      	push	{r7, lr}
    15e6:	b084      	sub	sp, #16
    15e8:	af00      	add	r7, sp, #0
    15ea:	0002      	movs	r2, r0
    15ec:	1dfb      	adds	r3, r7, #7
    15ee:	701a      	strb	r2, [r3, #0]
    uint8_t display_on = CTRL_CMD_DISP_OFF;
    15f0:	230f      	movs	r3, #15
    15f2:	18fb      	adds	r3, r7, r3
    15f4:	2200      	movs	r2, #0
    15f6:	701a      	strb	r2, [r3, #0]

    if (on) 
    15f8:	1dfb      	adds	r3, r7, #7
    15fa:	781b      	ldrb	r3, [r3, #0]
    15fc:	2b00      	cmp	r3, #0
    15fe:	d003      	beq.n	1608 <tm1640_display_on+0x24>
        display_on = CTRL_CMD_DISP_ON | BRIGHT_3; 
    1600:	230f      	movs	r3, #15
    1602:	18fb      	adds	r3, r7, r3
    1604:	228b      	movs	r2, #139	; 0x8b
    1606:	701a      	strb	r2, [r3, #0]

    return tm1640_write_cmd(CTRL_CMD, display_on); 
    1608:	230f      	movs	r3, #15
    160a:	18fb      	adds	r3, r7, r3
    160c:	781b      	ldrb	r3, [r3, #0]
    160e:	0019      	movs	r1, r3
    1610:	2080      	movs	r0, #128	; 0x80
    1612:	4b03      	ldr	r3, [pc, #12]	; (1620 <tm1640_display_on+0x3c>)
    1614:	4798      	blx	r3
    1616:	0003      	movs	r3, r0
}
    1618:	0018      	movs	r0, r3
    161a:	46bd      	mov	sp, r7
    161c:	b004      	add	sp, #16
    161e:	bd80      	pop	{r7, pc}
    1620:	00001545 	.word	0x00001545

00001624 <tm1640_set_display>:

enum status_code tm1640_set_display(uint8_t *disp, uint8_t length, tm1640_brightness_t brightness)
{
    1624:	b590      	push	{r4, r7, lr}
    1626:	b087      	sub	sp, #28
    1628:	af00      	add	r7, sp, #0
    162a:	6078      	str	r0, [r7, #4]
    162c:	0008      	movs	r0, r1
    162e:	0011      	movs	r1, r2
    1630:	1cfb      	adds	r3, r7, #3
    1632:	1c02      	adds	r2, r0, #0
    1634:	701a      	strb	r2, [r3, #0]
    1636:	1cbb      	adds	r3, r7, #2
    1638:	1c0a      	adds	r2, r1, #0
    163a:	701a      	strb	r2, [r3, #0]
    enum status_code status = STATUS_OK;
    163c:	2316      	movs	r3, #22
    163e:	18fb      	adds	r3, r7, r3
    1640:	2200      	movs	r2, #0
    1642:	701a      	strb	r2, [r3, #0]
    struct port_config di_conf;    
    struct system_pinmux_config pin_conf;
    uint8_t grids;
       
    // Take the display bus mutex
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
    1644:	4b32      	ldr	r3, [pc, #200]	; (1710 <tm1640_set_display+0xec>)
    1646:	6818      	ldr	r0, [r3, #0]
    1648:	2301      	movs	r3, #1
    164a:	425a      	negs	r2, r3
    164c:	2300      	movs	r3, #0
    164e:	2100      	movs	r1, #0
    1650:	4c30      	ldr	r4, [pc, #192]	; (1714 <tm1640_set_display+0xf0>)
    1652:	47a0      	blx	r4
    1654:	1e03      	subs	r3, r0, #0
    1656:	d101      	bne.n	165c <tm1640_set_display+0x38>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
    1658:	2312      	movs	r3, #18
    165a:	e055      	b.n	1708 <tm1640_set_display+0xe4>
    }

    taskENTER_CRITICAL();
    165c:	4b2e      	ldr	r3, [pc, #184]	; (1718 <tm1640_set_display+0xf4>)
    165e:	4798      	blx	r3

    system_pinmux_get_config_defaults(&pin_conf);
    1660:	230c      	movs	r3, #12
    1662:	18fb      	adds	r3, r7, r3
    1664:	0018      	movs	r0, r3
    1666:	4b2d      	ldr	r3, [pc, #180]	; (171c <tm1640_set_display+0xf8>)
    1668:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    166a:	230c      	movs	r3, #12
    166c:	18fb      	adds	r3, r7, r3
    166e:	2200      	movs	r2, #0
    1670:	705a      	strb	r2, [r3, #1]
    pin_conf.mux_position = PINMUX_PA08C_SERCOM0_PAD0 & 0xFFFF;
    1672:	230c      	movs	r3, #12
    1674:	18fb      	adds	r3, r7, r3
    1676:	2202      	movs	r2, #2
    1678:	701a      	strb	r2, [r3, #0]

    // Data input pin for the WTC6508 needs to be set to a GPIO so it isn't driven
    // when the clock is generated for the TM1640
    di_conf.direction = PORT_PIN_DIR_INPUT;
    167a:	2310      	movs	r3, #16
    167c:	18fb      	adds	r3, r7, r3
    167e:	2200      	movs	r2, #0
    1680:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
    1682:	2310      	movs	r3, #16
    1684:	18fb      	adds	r3, r7, r3
    1686:	2201      	movs	r2, #1
    1688:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
    168a:	2310      	movs	r3, #16
    168c:	18fb      	adds	r3, r7, r3
    168e:	2200      	movs	r2, #0
    1690:	709a      	strb	r2, [r3, #2]
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    1692:	2310      	movs	r3, #16
    1694:	18fb      	adds	r3, r7, r3
    1696:	0019      	movs	r1, r3
    1698:	2008      	movs	r0, #8
    169a:	4b21      	ldr	r3, [pc, #132]	; (1720 <tm1640_set_display+0xfc>)
    169c:	4798      	blx	r3

    tm1640_start();
    169e:	4b21      	ldr	r3, [pc, #132]	; (1724 <tm1640_set_display+0x100>)
    16a0:	4798      	blx	r3
    tm1640_write(ADDR_CMD_ADDR0);
    16a2:	20c0      	movs	r0, #192	; 0xc0
    16a4:	4b20      	ldr	r3, [pc, #128]	; (1728 <tm1640_set_display+0x104>)
    16a6:	4798      	blx	r3
    for (grids = 0; grids < length; grids++) {
    16a8:	2317      	movs	r3, #23
    16aa:	18fb      	adds	r3, r7, r3
    16ac:	2200      	movs	r2, #0
    16ae:	701a      	strb	r2, [r3, #0]
    16b0:	e00f      	b.n	16d2 <tm1640_set_display+0xae>
        tm1640_write(disp[grids]);
    16b2:	2317      	movs	r3, #23
    16b4:	18fb      	adds	r3, r7, r3
    16b6:	781b      	ldrb	r3, [r3, #0]
    16b8:	687a      	ldr	r2, [r7, #4]
    16ba:	18d3      	adds	r3, r2, r3
    16bc:	781b      	ldrb	r3, [r3, #0]
    16be:	0018      	movs	r0, r3
    16c0:	4b19      	ldr	r3, [pc, #100]	; (1728 <tm1640_set_display+0x104>)
    16c2:	4798      	blx	r3
    di_conf.powersave = false;
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);

    tm1640_start();
    tm1640_write(ADDR_CMD_ADDR0);
    for (grids = 0; grids < length; grids++) {
    16c4:	2317      	movs	r3, #23
    16c6:	18fb      	adds	r3, r7, r3
    16c8:	781a      	ldrb	r2, [r3, #0]
    16ca:	2317      	movs	r3, #23
    16cc:	18fb      	adds	r3, r7, r3
    16ce:	3201      	adds	r2, #1
    16d0:	701a      	strb	r2, [r3, #0]
    16d2:	2317      	movs	r3, #23
    16d4:	18fa      	adds	r2, r7, r3
    16d6:	1cfb      	adds	r3, r7, #3
    16d8:	7812      	ldrb	r2, [r2, #0]
    16da:	781b      	ldrb	r3, [r3, #0]
    16dc:	429a      	cmp	r2, r3
    16de:	d3e8      	bcc.n	16b2 <tm1640_set_display+0x8e>
        tm1640_write(disp[grids]);
    }
    tm1640_stop();                    
    16e0:	4b12      	ldr	r3, [pc, #72]	; (172c <tm1640_set_display+0x108>)
    16e2:	4798      	blx	r3

    // Restore pin function to the WTC6508 SPI
    system_pinmux_pin_set_config(PINMUX_PA08C_SERCOM0_PAD0 >> 16, &pin_conf);       
    16e4:	230c      	movs	r3, #12
    16e6:	18fb      	adds	r3, r7, r3
    16e8:	0019      	movs	r1, r3
    16ea:	2008      	movs	r0, #8
    16ec:	4b10      	ldr	r3, [pc, #64]	; (1730 <tm1640_set_display+0x10c>)
    16ee:	4798      	blx	r3
    
    taskEXIT_CRITICAL();                 
    16f0:	4b10      	ldr	r3, [pc, #64]	; (1734 <tm1640_set_display+0x110>)
    16f2:	4798      	blx	r3

    xSemaphoreGive(display_mutex);     
    16f4:	4b06      	ldr	r3, [pc, #24]	; (1710 <tm1640_set_display+0xec>)
    16f6:	6818      	ldr	r0, [r3, #0]
    16f8:	2300      	movs	r3, #0
    16fa:	2200      	movs	r2, #0
    16fc:	2100      	movs	r1, #0
    16fe:	4c0e      	ldr	r4, [pc, #56]	; (1738 <tm1640_set_display+0x114>)
    1700:	47a0      	blx	r4
    return status;
    1702:	2316      	movs	r3, #22
    1704:	18fb      	adds	r3, r7, r3
    1706:	781b      	ldrb	r3, [r3, #0]
}
    1708:	0018      	movs	r0, r3
    170a:	46bd      	mov	sp, r7
    170c:	b007      	add	sp, #28
    170e:	bd90      	pop	{r4, r7, pc}
    1710:	200045fc 	.word	0x200045fc
    1714:	0000b979 	.word	0x0000b979
    1718:	0000b2b9 	.word	0x0000b2b9
    171c:	000011d1 	.word	0x000011d1
    1720:	00007cdd 	.word	0x00007cdd
    1724:	000012d1 	.word	0x000012d1
    1728:	00001419 	.word	0x00001419
    172c:	00001355 	.word	0x00001355
    1730:	0000ac65 	.word	0x0000ac65
    1734:	0000b2dd 	.word	0x0000b2dd
    1738:	0000b679 	.word	0x0000b679

0000173c <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    173c:	b580      	push	{r7, lr}
    173e:	b082      	sub	sp, #8
    1740:	af00      	add	r7, sp, #0
    1742:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1744:	687b      	ldr	r3, [r7, #4]
    1746:	2280      	movs	r2, #128	; 0x80
    1748:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	2200      	movs	r2, #0
    174e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1750:	687b      	ldr	r3, [r7, #4]
    1752:	2201      	movs	r2, #1
    1754:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    1756:	687b      	ldr	r3, [r7, #4]
    1758:	2200      	movs	r2, #0
    175a:	70da      	strb	r2, [r3, #3]
}
    175c:	46c0      	nop			; (mov r8, r8)
    175e:	46bd      	mov	sp, r7
    1760:	b002      	add	sp, #8
    1762:	bd80      	pop	{r7, pc}

00001764 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1764:	b580      	push	{r7, lr}
    1766:	b084      	sub	sp, #16
    1768:	af00      	add	r7, sp, #0
    176a:	0002      	movs	r2, r0
    176c:	1dfb      	adds	r3, r7, #7
    176e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1770:	230f      	movs	r3, #15
    1772:	18fb      	adds	r3, r7, r3
    1774:	1dfa      	adds	r2, r7, #7
    1776:	7812      	ldrb	r2, [r2, #0]
    1778:	09d2      	lsrs	r2, r2, #7
    177a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    177c:	230e      	movs	r3, #14
    177e:	18fb      	adds	r3, r7, r3
    1780:	1dfa      	adds	r2, r7, #7
    1782:	7812      	ldrb	r2, [r2, #0]
    1784:	0952      	lsrs	r2, r2, #5
    1786:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1788:	4b0d      	ldr	r3, [pc, #52]	; (17c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    178a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    178c:	230f      	movs	r3, #15
    178e:	18fb      	adds	r3, r7, r3
    1790:	781b      	ldrb	r3, [r3, #0]
    1792:	2b00      	cmp	r3, #0
    1794:	d10f      	bne.n	17b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1796:	230f      	movs	r3, #15
    1798:	18fb      	adds	r3, r7, r3
    179a:	781b      	ldrb	r3, [r3, #0]
    179c:	009b      	lsls	r3, r3, #2
    179e:	2210      	movs	r2, #16
    17a0:	4694      	mov	ip, r2
    17a2:	44bc      	add	ip, r7
    17a4:	4463      	add	r3, ip
    17a6:	3b08      	subs	r3, #8
    17a8:	681a      	ldr	r2, [r3, #0]
    17aa:	230e      	movs	r3, #14
    17ac:	18fb      	adds	r3, r7, r3
    17ae:	781b      	ldrb	r3, [r3, #0]
    17b0:	01db      	lsls	r3, r3, #7
    17b2:	18d3      	adds	r3, r2, r3
    17b4:	e000      	b.n	17b8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    17b6:	2300      	movs	r3, #0
	}
}
    17b8:	0018      	movs	r0, r3
    17ba:	46bd      	mov	sp, r7
    17bc:	b004      	add	sp, #16
    17be:	bd80      	pop	{r7, pc}
    17c0:	41004400 	.word	0x41004400

000017c4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    17c4:	b580      	push	{r7, lr}
    17c6:	b082      	sub	sp, #8
    17c8:	af00      	add	r7, sp, #0
    17ca:	0002      	movs	r2, r0
    17cc:	1dfb      	adds	r3, r7, #7
    17ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    17d0:	4b06      	ldr	r3, [pc, #24]	; (17ec <system_interrupt_enable+0x28>)
    17d2:	1dfa      	adds	r2, r7, #7
    17d4:	7812      	ldrb	r2, [r2, #0]
    17d6:	0011      	movs	r1, r2
    17d8:	221f      	movs	r2, #31
    17da:	400a      	ands	r2, r1
    17dc:	2101      	movs	r1, #1
    17de:	4091      	lsls	r1, r2
    17e0:	000a      	movs	r2, r1
    17e2:	601a      	str	r2, [r3, #0]
}
    17e4:	46c0      	nop			; (mov r8, r8)
    17e6:	46bd      	mov	sp, r7
    17e8:	b002      	add	sp, #8
    17ea:	bd80      	pop	{r7, pc}
    17ec:	e000e100 	.word	0xe000e100

000017f0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    17f0:	b580      	push	{r7, lr}
    17f2:	b082      	sub	sp, #8
    17f4:	af00      	add	r7, sp, #0
    17f6:	0002      	movs	r2, r0
    17f8:	1dfb      	adds	r3, r7, #7
    17fa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    17fc:	1dfb      	adds	r3, r7, #7
    17fe:	781b      	ldrb	r3, [r3, #0]
    1800:	0018      	movs	r0, r3
    1802:	4b03      	ldr	r3, [pc, #12]	; (1810 <port_get_group_from_gpio_pin+0x20>)
    1804:	4798      	blx	r3
    1806:	0003      	movs	r3, r0
}
    1808:	0018      	movs	r0, r3
    180a:	46bd      	mov	sp, r7
    180c:	b002      	add	sp, #8
    180e:	bd80      	pop	{r7, pc}
    1810:	00001765 	.word	0x00001765

00001814 <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1814:	b580      	push	{r7, lr}
    1816:	b084      	sub	sp, #16
    1818:	af00      	add	r7, sp, #0
    181a:	0002      	movs	r2, r0
    181c:	1dfb      	adds	r3, r7, #7
    181e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1820:	1dfb      	adds	r3, r7, #7
    1822:	781b      	ldrb	r3, [r3, #0]
    1824:	0018      	movs	r0, r3
    1826:	4b0b      	ldr	r3, [pc, #44]	; (1854 <port_pin_get_input_level+0x40>)
    1828:	4798      	blx	r3
    182a:	0003      	movs	r3, r0
    182c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    182e:	1dfb      	adds	r3, r7, #7
    1830:	781b      	ldrb	r3, [r3, #0]
    1832:	221f      	movs	r2, #31
    1834:	4013      	ands	r3, r2
    1836:	2201      	movs	r2, #1
    1838:	409a      	lsls	r2, r3
    183a:	0013      	movs	r3, r2
    183c:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    183e:	68fb      	ldr	r3, [r7, #12]
    1840:	6a1b      	ldr	r3, [r3, #32]
    1842:	68ba      	ldr	r2, [r7, #8]
    1844:	4013      	ands	r3, r2
    1846:	1e5a      	subs	r2, r3, #1
    1848:	4193      	sbcs	r3, r2
    184a:	b2db      	uxtb	r3, r3
}
    184c:	0018      	movs	r0, r3
    184e:	46bd      	mov	sp, r7
    1850:	b004      	add	sp, #16
    1852:	bd80      	pop	{r7, pc}
    1854:	000017f1 	.word	0x000017f1

00001858 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1858:	b580      	push	{r7, lr}
    185a:	b084      	sub	sp, #16
    185c:	af00      	add	r7, sp, #0
    185e:	0002      	movs	r2, r0
    1860:	1dfb      	adds	r3, r7, #7
    1862:	701a      	strb	r2, [r3, #0]
    1864:	1dbb      	adds	r3, r7, #6
    1866:	1c0a      	adds	r2, r1, #0
    1868:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    186a:	1dfb      	adds	r3, r7, #7
    186c:	781b      	ldrb	r3, [r3, #0]
    186e:	0018      	movs	r0, r3
    1870:	4b0d      	ldr	r3, [pc, #52]	; (18a8 <port_pin_set_output_level+0x50>)
    1872:	4798      	blx	r3
    1874:	0003      	movs	r3, r0
    1876:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1878:	1dfb      	adds	r3, r7, #7
    187a:	781b      	ldrb	r3, [r3, #0]
    187c:	221f      	movs	r2, #31
    187e:	4013      	ands	r3, r2
    1880:	2201      	movs	r2, #1
    1882:	409a      	lsls	r2, r3
    1884:	0013      	movs	r3, r2
    1886:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1888:	1dbb      	adds	r3, r7, #6
    188a:	781b      	ldrb	r3, [r3, #0]
    188c:	2b00      	cmp	r3, #0
    188e:	d003      	beq.n	1898 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1890:	68fb      	ldr	r3, [r7, #12]
    1892:	68ba      	ldr	r2, [r7, #8]
    1894:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1896:	e002      	b.n	189e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1898:	68fb      	ldr	r3, [r7, #12]
    189a:	68ba      	ldr	r2, [r7, #8]
    189c:	615a      	str	r2, [r3, #20]
	}
}
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	46bd      	mov	sp, r7
    18a2:	b004      	add	sp, #16
    18a4:	bd80      	pop	{r7, pc}
    18a6:	46c0      	nop			; (mov r8, r8)
    18a8:	000017f1 	.word	0x000017f1

000018ac <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    18ac:	b580      	push	{r7, lr}
    18ae:	b084      	sub	sp, #16
    18b0:	af00      	add	r7, sp, #0
    18b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    18b4:	687b      	ldr	r3, [r7, #4]
    18b6:	681b      	ldr	r3, [r3, #0]
    18b8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    18ba:	68fb      	ldr	r3, [r7, #12]
    18bc:	69db      	ldr	r3, [r3, #28]
    18be:	1e5a      	subs	r2, r3, #1
    18c0:	4193      	sbcs	r3, r2
    18c2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    18c4:	0018      	movs	r0, r3
    18c6:	46bd      	mov	sp, r7
    18c8:	b004      	add	sp, #16
    18ca:	bd80      	pop	{r7, pc}

000018cc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    18cc:	b580      	push	{r7, lr}
    18ce:	b082      	sub	sp, #8
    18d0:	af00      	add	r7, sp, #0
    18d2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    18d4:	687b      	ldr	r3, [r7, #4]
    18d6:	2201      	movs	r2, #1
    18d8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    18da:	687b      	ldr	r3, [r7, #4]
    18dc:	2200      	movs	r2, #0
    18de:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    18e0:	687b      	ldr	r3, [r7, #4]
    18e2:	2200      	movs	r2, #0
    18e4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    18e6:	687b      	ldr	r3, [r7, #4]
    18e8:	22c0      	movs	r2, #192	; 0xc0
    18ea:	0392      	lsls	r2, r2, #14
    18ec:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    18ee:	687b      	ldr	r3, [r7, #4]
    18f0:	2200      	movs	r2, #0
    18f2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    18f4:	687b      	ldr	r3, [r7, #4]
    18f6:	2200      	movs	r2, #0
    18f8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    18fa:	687b      	ldr	r3, [r7, #4]
    18fc:	2201      	movs	r2, #1
    18fe:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    1900:	687b      	ldr	r3, [r7, #4]
    1902:	2201      	movs	r2, #1
    1904:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    1906:	687b      	ldr	r3, [r7, #4]
    1908:	2200      	movs	r2, #0
    190a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    190c:	687b      	ldr	r3, [r7, #4]
    190e:	2224      	movs	r2, #36	; 0x24
    1910:	2100      	movs	r1, #0
    1912:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    1914:	687b      	ldr	r3, [r7, #4]
    1916:	3318      	adds	r3, #24
    1918:	220c      	movs	r2, #12
    191a:	2100      	movs	r1, #0
    191c:	0018      	movs	r0, r3
    191e:	4b0a      	ldr	r3, [pc, #40]	; (1948 <spi_get_config_defaults+0x7c>)
    1920:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    1922:	687b      	ldr	r3, [r7, #4]
    1924:	4a09      	ldr	r2, [pc, #36]	; (194c <spi_get_config_defaults+0x80>)
    1926:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    1928:	687b      	ldr	r3, [r7, #4]
    192a:	2200      	movs	r2, #0
    192c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    192e:	687b      	ldr	r3, [r7, #4]
    1930:	2200      	movs	r2, #0
    1932:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	2200      	movs	r2, #0
    1938:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    193a:	687b      	ldr	r3, [r7, #4]
    193c:	2200      	movs	r2, #0
    193e:	635a      	str	r2, [r3, #52]	; 0x34

};
    1940:	46c0      	nop			; (mov r8, r8)
    1942:	46bd      	mov	sp, r7
    1944:	b002      	add	sp, #8
    1946:	bd80      	pop	{r7, pc}
    1948:	0000fb1b 	.word	0x0000fb1b
    194c:	000186a0 	.word	0x000186a0

00001950 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    1950:	b580      	push	{r7, lr}
    1952:	b084      	sub	sp, #16
    1954:	af00      	add	r7, sp, #0
    1956:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	681b      	ldr	r3, [r3, #0]
    195c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    195e:	687b      	ldr	r3, [r7, #4]
    1960:	681b      	ldr	r3, [r3, #0]
    1962:	0018      	movs	r0, r3
    1964:	4b0b      	ldr	r3, [pc, #44]	; (1994 <spi_enable+0x44>)
    1966:	4798      	blx	r3
    1968:	0003      	movs	r3, r0
    196a:	0018      	movs	r0, r3
    196c:	4b0a      	ldr	r3, [pc, #40]	; (1998 <spi_enable+0x48>)
    196e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    1970:	46c0      	nop			; (mov r8, r8)
    1972:	687b      	ldr	r3, [r7, #4]
    1974:	0018      	movs	r0, r3
    1976:	4b09      	ldr	r3, [pc, #36]	; (199c <spi_enable+0x4c>)
    1978:	4798      	blx	r3
    197a:	1e03      	subs	r3, r0, #0
    197c:	d1f9      	bne.n	1972 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    197e:	68fb      	ldr	r3, [r7, #12]
    1980:	681b      	ldr	r3, [r3, #0]
    1982:	2202      	movs	r2, #2
    1984:	431a      	orrs	r2, r3
    1986:	68fb      	ldr	r3, [r7, #12]
    1988:	601a      	str	r2, [r3, #0]
}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	46bd      	mov	sp, r7
    198e:	b004      	add	sp, #16
    1990:	bd80      	pop	{r7, pc}
    1992:	46c0      	nop			; (mov r8, r8)
    1994:	00008479 	.word	0x00008479
    1998:	000017c5 	.word	0x000017c5
    199c:	000018ad 	.word	0x000018ad

000019a0 <wtc6508_init>:
#define DISPLAY_MUTEX_TIMEOUT   pdMS_TO_TICKS(5)

// Must run at 2kHz to 20kHz with at least 15 ms between transactions

void wtc6508_init(void)
{
    19a0:	b580      	push	{r7, lr}
    19a2:	b08e      	sub	sp, #56	; 0x38
    19a4:	af00      	add	r7, sp, #0
    struct spi_config config;
    spi_get_config_defaults(&config);
    19a6:	003b      	movs	r3, r7
    19a8:	0018      	movs	r0, r3
    19aa:	4b1c      	ldr	r3, [pc, #112]	; (1a1c <wtc6508_init+0x7c>)
    19ac:	4798      	blx	r3

    config.pinmux_pad0 = WTC6508_PINMUX_PAD0;
    19ae:	003b      	movs	r3, r7
    19b0:	4a1b      	ldr	r2, [pc, #108]	; (1a20 <wtc6508_init+0x80>)
    19b2:	629a      	str	r2, [r3, #40]	; 0x28
    config.pinmux_pad1 = WTC6508_PINMUX_PAD1;
    19b4:	003b      	movs	r3, r7
    19b6:	4a1b      	ldr	r2, [pc, #108]	; (1a24 <wtc6508_init+0x84>)
    19b8:	62da      	str	r2, [r3, #44]	; 0x2c
    config.pinmux_pad2 = WTC6508_PINMUX_PAD2;
    19ba:	003b      	movs	r3, r7
    19bc:	2201      	movs	r2, #1
    19be:	4252      	negs	r2, r2
    19c0:	631a      	str	r2, [r3, #48]	; 0x30
    config.pinmux_pad3 = WTC6508_PINMUX_PAD3;
    19c2:	003b      	movs	r3, r7
    19c4:	2201      	movs	r2, #1
    19c6:	4252      	negs	r2, r2
    19c8:	635a      	str	r2, [r3, #52]	; 0x34
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    19ca:	003b      	movs	r3, r7
    19cc:	2280      	movs	r2, #128	; 0x80
    19ce:	0292      	lsls	r2, r2, #10
    19d0:	60da      	str	r2, [r3, #12]
    config.select_slave_low_detect_enable = false;
    19d2:	003b      	movs	r3, r7
    19d4:	2200      	movs	r2, #0
    19d6:	74da      	strb	r2, [r3, #19]
    config.mode_specific.master.baudrate = WTC6508_BAUD;
    19d8:	003b      	movs	r3, r7
    19da:	4a13      	ldr	r2, [pc, #76]	; (1a28 <wtc6508_init+0x88>)
    19dc:	619a      	str	r2, [r3, #24]
    config.transfer_mode = SPI_TRANSFER_MODE_3;    
    19de:	003b      	movs	r3, r7
    19e0:	22c0      	movs	r2, #192	; 0xc0
    19e2:	0592      	lsls	r2, r2, #22
    19e4:	609a      	str	r2, [r3, #8]
    config.generator_source = GCLK_GENERATOR_4;
    19e6:	003b      	movs	r3, r7
    19e8:	2224      	movs	r2, #36	; 0x24
    19ea:	2104      	movs	r1, #4
    19ec:	5499      	strb	r1, [r3, r2]
    config.run_in_standby = false;
    19ee:	003b      	movs	r3, r7
    19f0:	2200      	movs	r2, #0
    19f2:	745a      	strb	r2, [r3, #17]

    if (spi_init(&wtc6508_module, WTC65808_SERCOM, &config)) {
    19f4:	003a      	movs	r2, r7
    19f6:	490d      	ldr	r1, [pc, #52]	; (1a2c <wtc6508_init+0x8c>)
    19f8:	4b0d      	ldr	r3, [pc, #52]	; (1a30 <wtc6508_init+0x90>)
    19fa:	0018      	movs	r0, r3
    19fc:	4b0d      	ldr	r3, [pc, #52]	; (1a34 <wtc6508_init+0x94>)
    19fe:	4798      	blx	r3
    1a00:	1e03      	subs	r3, r0, #0
    1a02:	d004      	beq.n	1a0e <wtc6508_init+0x6e>
        printf("failed to initialize WTC6508!\n");
    1a04:	4b0c      	ldr	r3, [pc, #48]	; (1a38 <wtc6508_init+0x98>)
    1a06:	0018      	movs	r0, r3
    1a08:	4b0c      	ldr	r3, [pc, #48]	; (1a3c <wtc6508_init+0x9c>)
    1a0a:	4798      	blx	r3
    1a0c:	e003      	b.n	1a16 <wtc6508_init+0x76>
        return;
    }

    spi_enable(&wtc6508_module);
    1a0e:	4b08      	ldr	r3, [pc, #32]	; (1a30 <wtc6508_init+0x90>)
    1a10:	0018      	movs	r0, r3
    1a12:	4b0b      	ldr	r3, [pc, #44]	; (1a40 <wtc6508_init+0xa0>)
    1a14:	4798      	blx	r3
}
    1a16:	46bd      	mov	sp, r7
    1a18:	b00e      	add	sp, #56	; 0x38
    1a1a:	bd80      	pop	{r7, pc}
    1a1c:	000018cd 	.word	0x000018cd
    1a20:	00080002 	.word	0x00080002
    1a24:	00090002 	.word	0x00090002
    1a28:	00003a98 	.word	0x00003a98
    1a2c:	42000800 	.word	0x42000800
    1a30:	200045c0 	.word	0x200045c0
    1a34:	00008a19 	.word	0x00008a19
    1a38:	00011338 	.word	0x00011338
    1a3c:	000101f1 	.word	0x000101f1
    1a40:	00001951 	.word	0x00001951

00001a44 <wtc6508_read>:

enum status_code wtc6508_read(uint8_t *status)
{
    1a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a46:	464f      	mov	r7, r9
    1a48:	4646      	mov	r6, r8
    1a4a:	b4c0      	push	{r6, r7}
    1a4c:	b089      	sub	sp, #36	; 0x24
    1a4e:	af00      	add	r7, sp, #0
    1a50:	60f8      	str	r0, [r7, #12]
    enum status_code ret;
    struct port_config di_conf;    
    struct port_config clk_conf;
    struct system_pinmux_config pin_conf;

    clk_conf.direction = PORT_PIN_DIR_OUTPUT;
    1a52:	2310      	movs	r3, #16
    1a54:	2208      	movs	r2, #8
    1a56:	4694      	mov	ip, r2
    1a58:	44bc      	add	ip, r7
    1a5a:	4463      	add	r3, ip
    1a5c:	2201      	movs	r2, #1
    1a5e:	701a      	strb	r2, [r3, #0]
    clk_conf.input_pull = PORT_PIN_PULL_UP;
    1a60:	2310      	movs	r3, #16
    1a62:	2208      	movs	r2, #8
    1a64:	4694      	mov	ip, r2
    1a66:	44bc      	add	ip, r7
    1a68:	4463      	add	r3, ip
    1a6a:	2201      	movs	r2, #1
    1a6c:	705a      	strb	r2, [r3, #1]
    clk_conf.powersave = false;   
    1a6e:	2310      	movs	r3, #16
    1a70:	2208      	movs	r2, #8
    1a72:	4694      	mov	ip, r2
    1a74:	44bc      	add	ip, r7
    1a76:	4463      	add	r3, ip
    1a78:	2200      	movs	r2, #0
    1a7a:	709a      	strb	r2, [r3, #2]

    di_conf.direction = PORT_PIN_DIR_INPUT;
    1a7c:	2314      	movs	r3, #20
    1a7e:	2208      	movs	r2, #8
    1a80:	4694      	mov	ip, r2
    1a82:	44bc      	add	ip, r7
    1a84:	4463      	add	r3, ip
    1a86:	2200      	movs	r2, #0
    1a88:	701a      	strb	r2, [r3, #0]
    di_conf.input_pull = PORT_PIN_PULL_UP;
    1a8a:	2314      	movs	r3, #20
    1a8c:	2208      	movs	r2, #8
    1a8e:	4694      	mov	ip, r2
    1a90:	44bc      	add	ip, r7
    1a92:	4463      	add	r3, ip
    1a94:	2201      	movs	r2, #1
    1a96:	705a      	strb	r2, [r3, #1]
    di_conf.powersave = false;
    1a98:	2314      	movs	r3, #20
    1a9a:	2208      	movs	r2, #8
    1a9c:	4694      	mov	ip, r2
    1a9e:	44bc      	add	ip, r7
    1aa0:	4463      	add	r3, ip
    1aa2:	2200      	movs	r2, #0
    1aa4:	709a      	strb	r2, [r3, #2]

    system_pinmux_get_config_defaults(&pin_conf);
    1aa6:	230c      	movs	r3, #12
    1aa8:	2208      	movs	r2, #8
    1aaa:	4694      	mov	ip, r2
    1aac:	44bc      	add	ip, r7
    1aae:	4463      	add	r3, ip
    1ab0:	0018      	movs	r0, r3
    1ab2:	4b80      	ldr	r3, [pc, #512]	; (1cb4 <wtc6508_read+0x270>)
    1ab4:	4798      	blx	r3
    pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1ab6:	230c      	movs	r3, #12
    1ab8:	2208      	movs	r2, #8
    1aba:	4694      	mov	ip, r2
    1abc:	44bc      	add	ip, r7
    1abe:	4463      	add	r3, ip
    1ac0:	2200      	movs	r2, #0
    1ac2:	705a      	strb	r2, [r3, #1]

    // Take the display bus mutex
    if (!xSemaphoreTake(display_mutex, portMAX_DELAY)) {
    1ac4:	4b7c      	ldr	r3, [pc, #496]	; (1cb8 <wtc6508_read+0x274>)
    1ac6:	6818      	ldr	r0, [r3, #0]
    1ac8:	2301      	movs	r3, #1
    1aca:	425a      	negs	r2, r3
    1acc:	2300      	movs	r3, #0
    1ace:	2100      	movs	r1, #0
    1ad0:	4c7a      	ldr	r4, [pc, #488]	; (1cbc <wtc6508_read+0x278>)
    1ad2:	47a0      	blx	r4
    1ad4:	1e03      	subs	r3, r0, #0
    1ad6:	d101      	bne.n	1adc <wtc6508_read+0x98>
        // Timeout waiting for semaphore. Just return
        return STATUS_ERR_TIMEOUT;
    1ad8:	2312      	movs	r3, #18
    1ada:	e0e3      	b.n	1ca4 <wtc6508_read+0x260>
    }

    taskENTER_CRITICAL();
    1adc:	4b78      	ldr	r3, [pc, #480]	; (1cc0 <wtc6508_read+0x27c>)
    1ade:	4798      	blx	r3

    // Start and stop bits need to be manually sent. Switch the data and clock
    // lines to GPIOs. Timing is critical here, so suspend all other tasks
    //vTaskSuspendAll();

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    1ae0:	2310      	movs	r3, #16
    1ae2:	2208      	movs	r2, #8
    1ae4:	4694      	mov	ip, r2
    1ae6:	44bc      	add	ip, r7
    1ae8:	4463      	add	r3, ip
    1aea:	0019      	movs	r1, r3
    1aec:	2009      	movs	r0, #9
    1aee:	4b75      	ldr	r3, [pc, #468]	; (1cc4 <wtc6508_read+0x280>)
    1af0:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    1af2:	2314      	movs	r3, #20
    1af4:	2208      	movs	r2, #8
    1af6:	4694      	mov	ip, r2
    1af8:	44bc      	add	ip, r7
    1afa:	4463      	add	r3, ip
    1afc:	0019      	movs	r1, r3
    1afe:	2008      	movs	r0, #8
    1b00:	4b70      	ldr	r3, [pc, #448]	; (1cc4 <wtc6508_read+0x280>)
    1b02:	4798      	blx	r3

    // If the DI pin is already low, then the bus is still busy from the last TM1640 transaction.
    // Skip the read.
    if (!port_pin_get_input_level(WTC6508_DI_GPIO)) {
    1b04:	2008      	movs	r0, #8
    1b06:	4b70      	ldr	r3, [pc, #448]	; (1cc8 <wtc6508_read+0x284>)
    1b08:	4798      	blx	r3
    1b0a:	0003      	movs	r3, r0
    1b0c:	001a      	movs	r2, r3
    1b0e:	2301      	movs	r3, #1
    1b10:	4053      	eors	r3, r2
    1b12:	b2db      	uxtb	r3, r3
    1b14:	2b00      	cmp	r3, #0
    1b16:	d00a      	beq.n	1b2e <wtc6508_read+0xea>
        xSemaphoreGive(display_mutex);
    1b18:	4b67      	ldr	r3, [pc, #412]	; (1cb8 <wtc6508_read+0x274>)
    1b1a:	6818      	ldr	r0, [r3, #0]
    1b1c:	2300      	movs	r3, #0
    1b1e:	2200      	movs	r2, #0
    1b20:	2100      	movs	r1, #0
    1b22:	4c6a      	ldr	r4, [pc, #424]	; (1ccc <wtc6508_read+0x288>)
    1b24:	47a0      	blx	r4
        taskEXIT_CRITICAL();
    1b26:	4b6a      	ldr	r3, [pc, #424]	; (1cd0 <wtc6508_read+0x28c>)
    1b28:	4798      	blx	r3
        return STATUS_BUSY;
    1b2a:	2305      	movs	r3, #5
    1b2c:	e0ba      	b.n	1ca4 <wtc6508_read+0x260>
    }

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);        
    1b2e:	2100      	movs	r1, #0
    1b30:	2009      	movs	r0, #9
    1b32:	4b68      	ldr	r3, [pc, #416]	; (1cd4 <wtc6508_read+0x290>)
    1b34:	4798      	blx	r3
    delay_us(3);
    1b36:	2000      	movs	r0, #0
    1b38:	4b67      	ldr	r3, [pc, #412]	; (1cd8 <wtc6508_read+0x294>)
    1b3a:	4798      	blx	r3
    1b3c:	0003      	movs	r3, r0
    1b3e:	603b      	str	r3, [r7, #0]
    1b40:	2300      	movs	r3, #0
    1b42:	607b      	str	r3, [r7, #4]
    1b44:	6839      	ldr	r1, [r7, #0]
    1b46:	687a      	ldr	r2, [r7, #4]
    1b48:	000b      	movs	r3, r1
    1b4a:	0014      	movs	r4, r2
    1b4c:	18db      	adds	r3, r3, r3
    1b4e:	4164      	adcs	r4, r4
    1b50:	185b      	adds	r3, r3, r1
    1b52:	4154      	adcs	r4, r2
    1b54:	4961      	ldr	r1, [pc, #388]	; (1cdc <wtc6508_read+0x298>)
    1b56:	2200      	movs	r2, #0
    1b58:	185b      	adds	r3, r3, r1
    1b5a:	4154      	adcs	r4, r2
    1b5c:	0018      	movs	r0, r3
    1b5e:	0021      	movs	r1, r4
    1b60:	4c5f      	ldr	r4, [pc, #380]	; (1ce0 <wtc6508_read+0x29c>)
    1b62:	4a60      	ldr	r2, [pc, #384]	; (1ce4 <wtc6508_read+0x2a0>)
    1b64:	2300      	movs	r3, #0
    1b66:	47a0      	blx	r4
    1b68:	0003      	movs	r3, r0
    1b6a:	000c      	movs	r4, r1
    1b6c:	0018      	movs	r0, r3
    1b6e:	4b5e      	ldr	r3, [pc, #376]	; (1ce8 <wtc6508_read+0x2a4>)
    1b70:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);        
    1b72:	2101      	movs	r1, #1
    1b74:	2009      	movs	r0, #9
    1b76:	4b57      	ldr	r3, [pc, #348]	; (1cd4 <wtc6508_read+0x290>)
    1b78:	4798      	blx	r3

    // Give pin control back to SPI module again 
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    1b7a:	230c      	movs	r3, #12
    1b7c:	2208      	movs	r2, #8
    1b7e:	4694      	mov	ip, r2
    1b80:	44bc      	add	ip, r7
    1b82:	4463      	add	r3, ip
    1b84:	2202      	movs	r2, #2
    1b86:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    1b88:	230c      	movs	r3, #12
    1b8a:	2208      	movs	r2, #8
    1b8c:	4694      	mov	ip, r2
    1b8e:	44bc      	add	ip, r7
    1b90:	4463      	add	r3, ip
    1b92:	0019      	movs	r1, r3
    1b94:	2008      	movs	r0, #8
    1b96:	4b55      	ldr	r3, [pc, #340]	; (1cec <wtc6508_read+0x2a8>)
    1b98:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    1b9a:	230c      	movs	r3, #12
    1b9c:	2208      	movs	r2, #8
    1b9e:	4694      	mov	ip, r2
    1ba0:	44bc      	add	ip, r7
    1ba2:	4463      	add	r3, ip
    1ba4:	2202      	movs	r2, #2
    1ba6:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);
    1ba8:	230c      	movs	r3, #12
    1baa:	2208      	movs	r2, #8
    1bac:	4694      	mov	ip, r2
    1bae:	44bc      	add	ip, r7
    1bb0:	4463      	add	r3, ip
    1bb2:	0019      	movs	r1, r3
    1bb4:	2009      	movs	r0, #9
    1bb6:	4b4d      	ldr	r3, [pc, #308]	; (1cec <wtc6508_read+0x2a8>)
    1bb8:	4798      	blx	r3

    ret = spi_read_buffer_wait(&wtc6508_module, status, 1, 0);
    1bba:	2317      	movs	r3, #23
    1bbc:	4699      	mov	r9, r3
    1bbe:	2308      	movs	r3, #8
    1bc0:	469c      	mov	ip, r3
    1bc2:	44bc      	add	ip, r7
    1bc4:	44e1      	add	r9, ip
    1bc6:	68f9      	ldr	r1, [r7, #12]
    1bc8:	4849      	ldr	r0, [pc, #292]	; (1cf0 <wtc6508_read+0x2ac>)
    1bca:	2300      	movs	r3, #0
    1bcc:	2201      	movs	r2, #1
    1bce:	4c49      	ldr	r4, [pc, #292]	; (1cf4 <wtc6508_read+0x2b0>)
    1bd0:	46a0      	mov	r8, r4
    1bd2:	47c0      	blx	r8
    1bd4:	0003      	movs	r3, r0
    1bd6:	464a      	mov	r2, r9
    1bd8:	7013      	strb	r3, [r2, #0]

    port_pin_set_config(WTC6508_CLK_GPIO, &clk_conf);
    1bda:	2310      	movs	r3, #16
    1bdc:	2208      	movs	r2, #8
    1bde:	4694      	mov	ip, r2
    1be0:	44bc      	add	ip, r7
    1be2:	4463      	add	r3, ip
    1be4:	0019      	movs	r1, r3
    1be6:	2009      	movs	r0, #9
    1be8:	4b36      	ldr	r3, [pc, #216]	; (1cc4 <wtc6508_read+0x280>)
    1bea:	4798      	blx	r3
    port_pin_set_config(WTC6508_DI_GPIO, &di_conf);
    1bec:	2314      	movs	r3, #20
    1bee:	2208      	movs	r2, #8
    1bf0:	4694      	mov	ip, r2
    1bf2:	44bc      	add	ip, r7
    1bf4:	4463      	add	r3, ip
    1bf6:	0019      	movs	r1, r3
    1bf8:	2008      	movs	r0, #8
    1bfa:	4b32      	ldr	r3, [pc, #200]	; (1cc4 <wtc6508_read+0x280>)
    1bfc:	4798      	blx	r3

    // Need a 10us - 22us clock pulse. Delay low for 6us
    port_pin_set_output_level(WTC6508_CLK_GPIO, 0);    
    1bfe:	2100      	movs	r1, #0
    1c00:	2009      	movs	r0, #9
    1c02:	4b34      	ldr	r3, [pc, #208]	; (1cd4 <wtc6508_read+0x290>)
    1c04:	4798      	blx	r3
    delay_us(3);
    1c06:	2000      	movs	r0, #0
    1c08:	4b33      	ldr	r3, [pc, #204]	; (1cd8 <wtc6508_read+0x294>)
    1c0a:	4798      	blx	r3
    1c0c:	0003      	movs	r3, r0
    1c0e:	001d      	movs	r5, r3
    1c10:	2300      	movs	r3, #0
    1c12:	001e      	movs	r6, r3
    1c14:	002b      	movs	r3, r5
    1c16:	0034      	movs	r4, r6
    1c18:	18db      	adds	r3, r3, r3
    1c1a:	4164      	adcs	r4, r4
    1c1c:	195b      	adds	r3, r3, r5
    1c1e:	4174      	adcs	r4, r6
    1c20:	492e      	ldr	r1, [pc, #184]	; (1cdc <wtc6508_read+0x298>)
    1c22:	2200      	movs	r2, #0
    1c24:	185b      	adds	r3, r3, r1
    1c26:	4154      	adcs	r4, r2
    1c28:	0018      	movs	r0, r3
    1c2a:	0021      	movs	r1, r4
    1c2c:	4c2c      	ldr	r4, [pc, #176]	; (1ce0 <wtc6508_read+0x29c>)
    1c2e:	4a2d      	ldr	r2, [pc, #180]	; (1ce4 <wtc6508_read+0x2a0>)
    1c30:	2300      	movs	r3, #0
    1c32:	47a0      	blx	r4
    1c34:	0003      	movs	r3, r0
    1c36:	000c      	movs	r4, r1
    1c38:	0018      	movs	r0, r3
    1c3a:	4b2b      	ldr	r3, [pc, #172]	; (1ce8 <wtc6508_read+0x2a4>)
    1c3c:	4798      	blx	r3
    port_pin_set_output_level(WTC6508_CLK_GPIO, 1);    
    1c3e:	2101      	movs	r1, #1
    1c40:	2009      	movs	r0, #9
    1c42:	4b24      	ldr	r3, [pc, #144]	; (1cd4 <wtc6508_read+0x290>)
    1c44:	4798      	blx	r3

    // Give pin control back to SPI module again
    pin_conf.mux_position = WTC6508_PINMUX_PAD0 & 0xFFFF;
    1c46:	230c      	movs	r3, #12
    1c48:	2208      	movs	r2, #8
    1c4a:	4694      	mov	ip, r2
    1c4c:	44bc      	add	ip, r7
    1c4e:	4463      	add	r3, ip
    1c50:	2202      	movs	r2, #2
    1c52:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD0 >> 16, &pin_conf);
    1c54:	230c      	movs	r3, #12
    1c56:	2208      	movs	r2, #8
    1c58:	4694      	mov	ip, r2
    1c5a:	44bc      	add	ip, r7
    1c5c:	4463      	add	r3, ip
    1c5e:	0019      	movs	r1, r3
    1c60:	2008      	movs	r0, #8
    1c62:	4b22      	ldr	r3, [pc, #136]	; (1cec <wtc6508_read+0x2a8>)
    1c64:	4798      	blx	r3
    pin_conf.mux_position = WTC6508_PINMUX_PAD1 & 0xFFFF;
    1c66:	230c      	movs	r3, #12
    1c68:	2208      	movs	r2, #8
    1c6a:	4694      	mov	ip, r2
    1c6c:	44bc      	add	ip, r7
    1c6e:	4463      	add	r3, ip
    1c70:	2202      	movs	r2, #2
    1c72:	701a      	strb	r2, [r3, #0]
    system_pinmux_pin_set_config(WTC6508_PINMUX_PAD1 >> 16, &pin_conf);        
    1c74:	230c      	movs	r3, #12
    1c76:	2208      	movs	r2, #8
    1c78:	4694      	mov	ip, r2
    1c7a:	44bc      	add	ip, r7
    1c7c:	4463      	add	r3, ip
    1c7e:	0019      	movs	r1, r3
    1c80:	2009      	movs	r0, #9
    1c82:	4b1a      	ldr	r3, [pc, #104]	; (1cec <wtc6508_read+0x2a8>)
    1c84:	4798      	blx	r3

    //xTaskResumeAll();

    // Give the display mutex back
    xSemaphoreGive(display_mutex);
    1c86:	4b0c      	ldr	r3, [pc, #48]	; (1cb8 <wtc6508_read+0x274>)
    1c88:	6818      	ldr	r0, [r3, #0]
    1c8a:	2300      	movs	r3, #0
    1c8c:	2200      	movs	r2, #0
    1c8e:	2100      	movs	r1, #0
    1c90:	4c0e      	ldr	r4, [pc, #56]	; (1ccc <wtc6508_read+0x288>)
    1c92:	47a0      	blx	r4
    taskEXIT_CRITICAL();
    1c94:	4b0e      	ldr	r3, [pc, #56]	; (1cd0 <wtc6508_read+0x28c>)
    1c96:	4798      	blx	r3

    return ret;
    1c98:	2317      	movs	r3, #23
    1c9a:	2208      	movs	r2, #8
    1c9c:	4694      	mov	ip, r2
    1c9e:	44bc      	add	ip, r7
    1ca0:	4463      	add	r3, ip
    1ca2:	781b      	ldrb	r3, [r3, #0]
}
    1ca4:	0018      	movs	r0, r3
    1ca6:	46bd      	mov	sp, r7
    1ca8:	b009      	add	sp, #36	; 0x24
    1caa:	bc0c      	pop	{r2, r3}
    1cac:	4690      	mov	r8, r2
    1cae:	4699      	mov	r9, r3
    1cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cb2:	46c0      	nop			; (mov r8, r8)
    1cb4:	0000173d 	.word	0x0000173d
    1cb8:	200045fc 	.word	0x200045fc
    1cbc:	0000b979 	.word	0x0000b979
    1cc0:	0000b2b9 	.word	0x0000b2b9
    1cc4:	00007cdd 	.word	0x00007cdd
    1cc8:	00001815 	.word	0x00001815
    1ccc:	0000b679 	.word	0x0000b679
    1cd0:	0000b2dd 	.word	0x0000b2dd
    1cd4:	00001859 	.word	0x00001859
    1cd8:	0000a8a1 	.word	0x0000a8a1
    1cdc:	006acfbf 	.word	0x006acfbf
    1ce0:	0000f285 	.word	0x0000f285
    1ce4:	006acfc0 	.word	0x006acfc0
    1ce8:	20000001 	.word	0x20000001
    1cec:	0000ac65 	.word	0x0000ac65
    1cf0:	200045c0 	.word	0x200045c0
    1cf4:	00008ba9 	.word	0x00008ba9

00001cf8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1cf8:	b580      	push	{r7, lr}
    1cfa:	b084      	sub	sp, #16
    1cfc:	af00      	add	r7, sp, #0
    1cfe:	0002      	movs	r2, r0
    1d00:	1dfb      	adds	r3, r7, #7
    1d02:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1d04:	230f      	movs	r3, #15
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	1dfa      	adds	r2, r7, #7
    1d0a:	7812      	ldrb	r2, [r2, #0]
    1d0c:	09d2      	lsrs	r2, r2, #7
    1d0e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    1d10:	230e      	movs	r3, #14
    1d12:	18fb      	adds	r3, r7, r3
    1d14:	1dfa      	adds	r2, r7, #7
    1d16:	7812      	ldrb	r2, [r2, #0]
    1d18:	0952      	lsrs	r2, r2, #5
    1d1a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1d1c:	4b0d      	ldr	r3, [pc, #52]	; (1d54 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    1d1e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    1d20:	230f      	movs	r3, #15
    1d22:	18fb      	adds	r3, r7, r3
    1d24:	781b      	ldrb	r3, [r3, #0]
    1d26:	2b00      	cmp	r3, #0
    1d28:	d10f      	bne.n	1d4a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1d2a:	230f      	movs	r3, #15
    1d2c:	18fb      	adds	r3, r7, r3
    1d2e:	781b      	ldrb	r3, [r3, #0]
    1d30:	009b      	lsls	r3, r3, #2
    1d32:	2210      	movs	r2, #16
    1d34:	4694      	mov	ip, r2
    1d36:	44bc      	add	ip, r7
    1d38:	4463      	add	r3, ip
    1d3a:	3b08      	subs	r3, #8
    1d3c:	681a      	ldr	r2, [r3, #0]
    1d3e:	230e      	movs	r3, #14
    1d40:	18fb      	adds	r3, r7, r3
    1d42:	781b      	ldrb	r3, [r3, #0]
    1d44:	01db      	lsls	r3, r3, #7
    1d46:	18d3      	adds	r3, r2, r3
    1d48:	e000      	b.n	1d4c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    1d4a:	2300      	movs	r3, #0
	}
}
    1d4c:	0018      	movs	r0, r3
    1d4e:	46bd      	mov	sp, r7
    1d50:	b004      	add	sp, #16
    1d52:	bd80      	pop	{r7, pc}
    1d54:	41004400 	.word	0x41004400

00001d58 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    1d58:	b580      	push	{r7, lr}
    1d5a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    1d5c:	4b04      	ldr	r3, [pc, #16]	; (1d70 <system_interrupt_enable_global+0x18>)
    1d5e:	2201      	movs	r2, #1
    1d60:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1d62:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1d66:	b662      	cpsie	i
}
    1d68:	46c0      	nop			; (mov r8, r8)
    1d6a:	46bd      	mov	sp, r7
    1d6c:	bd80      	pop	{r7, pc}
    1d6e:	46c0      	nop			; (mov r8, r8)
    1d70:	20000018 	.word	0x20000018

00001d74 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1d74:	b580      	push	{r7, lr}
    1d76:	b082      	sub	sp, #8
    1d78:	af00      	add	r7, sp, #0
    1d7a:	0002      	movs	r2, r0
    1d7c:	1dfb      	adds	r3, r7, #7
    1d7e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1d80:	1dfb      	adds	r3, r7, #7
    1d82:	781b      	ldrb	r3, [r3, #0]
    1d84:	0018      	movs	r0, r3
    1d86:	4b03      	ldr	r3, [pc, #12]	; (1d94 <port_get_group_from_gpio_pin+0x20>)
    1d88:	4798      	blx	r3
    1d8a:	0003      	movs	r3, r0
}
    1d8c:	0018      	movs	r0, r3
    1d8e:	46bd      	mov	sp, r7
    1d90:	b002      	add	sp, #8
    1d92:	bd80      	pop	{r7, pc}
    1d94:	00001cf9 	.word	0x00001cf9

00001d98 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1d98:	b580      	push	{r7, lr}
    1d9a:	b082      	sub	sp, #8
    1d9c:	af00      	add	r7, sp, #0
    1d9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1da0:	687b      	ldr	r3, [r7, #4]
    1da2:	2200      	movs	r2, #0
    1da4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	2201      	movs	r2, #1
    1daa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1dac:	687b      	ldr	r3, [r7, #4]
    1dae:	2200      	movs	r2, #0
    1db0:	709a      	strb	r2, [r3, #2]
}
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	46bd      	mov	sp, r7
    1db6:	b002      	add	sp, #8
    1db8:	bd80      	pop	{r7, pc}
    1dba:	46c0      	nop			; (mov r8, r8)

00001dbc <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1dbc:	b580      	push	{r7, lr}
    1dbe:	b084      	sub	sp, #16
    1dc0:	af00      	add	r7, sp, #0
    1dc2:	0002      	movs	r2, r0
    1dc4:	1dfb      	adds	r3, r7, #7
    1dc6:	701a      	strb	r2, [r3, #0]
    1dc8:	1dbb      	adds	r3, r7, #6
    1dca:	1c0a      	adds	r2, r1, #0
    1dcc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1dce:	1dfb      	adds	r3, r7, #7
    1dd0:	781b      	ldrb	r3, [r3, #0]
    1dd2:	0018      	movs	r0, r3
    1dd4:	4b0d      	ldr	r3, [pc, #52]	; (1e0c <port_pin_set_output_level+0x50>)
    1dd6:	4798      	blx	r3
    1dd8:	0003      	movs	r3, r0
    1dda:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ddc:	1dfb      	adds	r3, r7, #7
    1dde:	781b      	ldrb	r3, [r3, #0]
    1de0:	221f      	movs	r2, #31
    1de2:	4013      	ands	r3, r2
    1de4:	2201      	movs	r2, #1
    1de6:	409a      	lsls	r2, r3
    1de8:	0013      	movs	r3, r2
    1dea:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1dec:	1dbb      	adds	r3, r7, #6
    1dee:	781b      	ldrb	r3, [r3, #0]
    1df0:	2b00      	cmp	r3, #0
    1df2:	d003      	beq.n	1dfc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    1df4:	68fb      	ldr	r3, [r7, #12]
    1df6:	68ba      	ldr	r2, [r7, #8]
    1df8:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1dfa:	e002      	b.n	1e02 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1dfc:	68fb      	ldr	r3, [r7, #12]
    1dfe:	68ba      	ldr	r2, [r7, #8]
    1e00:	615a      	str	r2, [r3, #20]
	}
}
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	46bd      	mov	sp, r7
    1e06:	b004      	add	sp, #16
    1e08:	bd80      	pop	{r7, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	00001d75 	.word	0x00001d75

00001e10 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
    1e10:	b580      	push	{r7, lr}
    1e12:	af00      	add	r7, sp, #0
	if (gpfIsr) {
    1e14:	4b04      	ldr	r3, [pc, #16]	; (1e28 <chip_isr+0x18>)
    1e16:	681b      	ldr	r3, [r3, #0]
    1e18:	2b00      	cmp	r3, #0
    1e1a:	d002      	beq.n	1e22 <chip_isr+0x12>
		gpfIsr();
    1e1c:	4b02      	ldr	r3, [pc, #8]	; (1e28 <chip_isr+0x18>)
    1e1e:	681b      	ldr	r3, [r3, #0]
    1e20:	4798      	blx	r3
	}
}
    1e22:	46c0      	nop			; (mov r8, r8)
    1e24:	46bd      	mov	sp, r7
    1e26:	bd80      	pop	{r7, pc}
    1e28:	200000bc 	.word	0x200000bc

00001e2c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
    1e2c:	b580      	push	{r7, lr}
    1e2e:	b082      	sub	sp, #8
    1e30:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
    1e32:	1d3b      	adds	r3, r7, #4
    1e34:	0018      	movs	r0, r3
    1e36:	4b0c      	ldr	r3, [pc, #48]	; (1e68 <init_chip_pins+0x3c>)
    1e38:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1e3a:	1d3b      	adds	r3, r7, #4
    1e3c:	2201      	movs	r2, #1
    1e3e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
    1e40:	1d3b      	adds	r3, r7, #4
    1e42:	0019      	movs	r1, r3
    1e44:	201b      	movs	r0, #27
    1e46:	4b09      	ldr	r3, [pc, #36]	; (1e6c <init_chip_pins+0x40>)
    1e48:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
    1e4a:	1d3b      	adds	r3, r7, #4
    1e4c:	0019      	movs	r1, r3
    1e4e:	201c      	movs	r0, #28
    1e50:	4b06      	ldr	r3, [pc, #24]	; (1e6c <init_chip_pins+0x40>)
    1e52:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
    1e54:	1d3b      	adds	r3, r7, #4
    1e56:	0019      	movs	r1, r3
    1e58:	2028      	movs	r0, #40	; 0x28
    1e5a:	4b04      	ldr	r3, [pc, #16]	; (1e6c <init_chip_pins+0x40>)
    1e5c:	4798      	blx	r3
}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	46bd      	mov	sp, r7
    1e62:	b002      	add	sp, #8
    1e64:	bd80      	pop	{r7, pc}
    1e66:	46c0      	nop			; (mov r8, r8)
    1e68:	00001d99 	.word	0x00001d99
    1e6c:	00007cdd 	.word	0x00007cdd

00001e70 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
    1e70:	b580      	push	{r7, lr}
    1e72:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
    1e74:	4b0c      	ldr	r3, [pc, #48]	; (1ea8 <nm_bsp_init+0x38>)
    1e76:	2200      	movs	r2, #0
    1e78:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
    1e7a:	4b0c      	ldr	r3, [pc, #48]	; (1eac <nm_bsp_init+0x3c>)
    1e7c:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
    1e7e:	4b0c      	ldr	r3, [pc, #48]	; (1eb0 <nm_bsp_init+0x40>)
    1e80:	681b      	ldr	r3, [r3, #0]
    1e82:	2201      	movs	r2, #1
    1e84:	4013      	ands	r3, r2
    1e86:	d004      	beq.n	1e92 <nm_bsp_init+0x22>
    1e88:	4b09      	ldr	r3, [pc, #36]	; (1eb0 <nm_bsp_init+0x40>)
    1e8a:	681b      	ldr	r3, [r3, #0]
    1e8c:	2202      	movs	r2, #2
    1e8e:	4013      	ands	r3, r2
    1e90:	d101      	bne.n	1e96 <nm_bsp_init+0x26>
	    delay_init();
    1e92:	4b08      	ldr	r3, [pc, #32]	; (1eb4 <nm_bsp_init+0x44>)
    1e94:	4798      	blx	r3
    }

	/* Perform chip reset. */
	nm_bsp_reset();
    1e96:	4b08      	ldr	r3, [pc, #32]	; (1eb8 <nm_bsp_init+0x48>)
    1e98:	4798      	blx	r3

	system_interrupt_enable_global();
    1e9a:	4b08      	ldr	r3, [pc, #32]	; (1ebc <nm_bsp_init+0x4c>)
    1e9c:	4798      	blx	r3

	return M2M_SUCCESS;
    1e9e:	2300      	movs	r3, #0
}
    1ea0:	0018      	movs	r0, r3
    1ea2:	46bd      	mov	sp, r7
    1ea4:	bd80      	pop	{r7, pc}
    1ea6:	46c0      	nop			; (mov r8, r8)
    1ea8:	200000bc 	.word	0x200000bc
    1eac:	00001e2d 	.word	0x00001e2d
    1eb0:	e000e010 	.word	0xe000e010
    1eb4:	00000115 	.word	0x00000115
    1eb8:	00001ec1 	.word	0x00001ec1
    1ebc:	00001d59 	.word	0x00001d59

00001ec0 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
    1ec0:	b580      	push	{r7, lr}
    1ec2:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
    1ec4:	2100      	movs	r1, #0
    1ec6:	201c      	movs	r0, #28
    1ec8:	4b0c      	ldr	r3, [pc, #48]	; (1efc <nm_bsp_reset+0x3c>)
    1eca:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
    1ecc:	2100      	movs	r1, #0
    1ece:	201b      	movs	r0, #27
    1ed0:	4b0a      	ldr	r3, [pc, #40]	; (1efc <nm_bsp_reset+0x3c>)
    1ed2:	4798      	blx	r3
	nm_bsp_sleep(100);
    1ed4:	2064      	movs	r0, #100	; 0x64
    1ed6:	4b0a      	ldr	r3, [pc, #40]	; (1f00 <nm_bsp_reset+0x40>)
    1ed8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
    1eda:	2101      	movs	r1, #1
    1edc:	201c      	movs	r0, #28
    1ede:	4b07      	ldr	r3, [pc, #28]	; (1efc <nm_bsp_reset+0x3c>)
    1ee0:	4798      	blx	r3
	nm_bsp_sleep(10);
    1ee2:	200a      	movs	r0, #10
    1ee4:	4b06      	ldr	r3, [pc, #24]	; (1f00 <nm_bsp_reset+0x40>)
    1ee6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
    1ee8:	2101      	movs	r1, #1
    1eea:	201b      	movs	r0, #27
    1eec:	4b03      	ldr	r3, [pc, #12]	; (1efc <nm_bsp_reset+0x3c>)
    1eee:	4798      	blx	r3
	nm_bsp_sleep(10);
    1ef0:	200a      	movs	r0, #10
    1ef2:	4b03      	ldr	r3, [pc, #12]	; (1f00 <nm_bsp_reset+0x40>)
    1ef4:	4798      	blx	r3
}
    1ef6:	46c0      	nop			; (mov r8, r8)
    1ef8:	46bd      	mov	sp, r7
    1efa:	bd80      	pop	{r7, pc}
    1efc:	00001dbd 	.word	0x00001dbd
    1f00:	00001f05 	.word	0x00001f05

00001f04 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
    1f04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1f06:	b083      	sub	sp, #12
    1f08:	af00      	add	r7, sp, #0
    1f0a:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
    1f0c:	e015      	b.n	1f3a <nm_bsp_sleep+0x36>
		delay_ms(1);
    1f0e:	2000      	movs	r0, #0
    1f10:	4b0e      	ldr	r3, [pc, #56]	; (1f4c <nm_bsp_sleep+0x48>)
    1f12:	4798      	blx	r3
    1f14:	0003      	movs	r3, r0
    1f16:	001d      	movs	r5, r3
    1f18:	2300      	movs	r3, #0
    1f1a:	001e      	movs	r6, r3
    1f1c:	4b0c      	ldr	r3, [pc, #48]	; (1f50 <nm_bsp_sleep+0x4c>)
    1f1e:	2400      	movs	r4, #0
    1f20:	195b      	adds	r3, r3, r5
    1f22:	4174      	adcs	r4, r6
    1f24:	0018      	movs	r0, r3
    1f26:	0021      	movs	r1, r4
    1f28:	4c0a      	ldr	r4, [pc, #40]	; (1f54 <nm_bsp_sleep+0x50>)
    1f2a:	4a0b      	ldr	r2, [pc, #44]	; (1f58 <nm_bsp_sleep+0x54>)
    1f2c:	2300      	movs	r3, #0
    1f2e:	47a0      	blx	r4
    1f30:	0003      	movs	r3, r0
    1f32:	000c      	movs	r4, r1
    1f34:	0018      	movs	r0, r3
    1f36:	4b09      	ldr	r3, [pc, #36]	; (1f5c <nm_bsp_sleep+0x58>)
    1f38:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
    1f3a:	687b      	ldr	r3, [r7, #4]
    1f3c:	1e5a      	subs	r2, r3, #1
    1f3e:	607a      	str	r2, [r7, #4]
    1f40:	2b00      	cmp	r3, #0
    1f42:	d1e4      	bne.n	1f0e <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
    1f44:	46c0      	nop			; (mov r8, r8)
    1f46:	46bd      	mov	sp, r7
    1f48:	b003      	add	sp, #12
    1f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f4c:	0000a8a1 	.word	0x0000a8a1
    1f50:	00001b57 	.word	0x00001b57
    1f54:	0000f285 	.word	0x0000f285
    1f58:	00001b58 	.word	0x00001b58
    1f5c:	20000001 	.word	0x20000001

00001f60 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
    1f60:	b580      	push	{r7, lr}
    1f62:	b086      	sub	sp, #24
    1f64:	af00      	add	r7, sp, #0
    1f66:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
    1f68:	4b15      	ldr	r3, [pc, #84]	; (1fc0 <nm_bsp_register_isr+0x60>)
    1f6a:	687a      	ldr	r2, [r7, #4]
    1f6c:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
    1f6e:	230c      	movs	r3, #12
    1f70:	18fb      	adds	r3, r7, r3
    1f72:	0018      	movs	r0, r3
    1f74:	4b13      	ldr	r3, [pc, #76]	; (1fc4 <nm_bsp_register_isr+0x64>)
    1f76:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
    1f78:	230c      	movs	r3, #12
    1f7a:	18fb      	adds	r3, r7, r3
    1f7c:	2229      	movs	r2, #41	; 0x29
    1f7e:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
    1f80:	230c      	movs	r3, #12
    1f82:	18fb      	adds	r3, r7, r3
    1f84:	2200      	movs	r2, #0
    1f86:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1f88:	230c      	movs	r3, #12
    1f8a:	18fb      	adds	r3, r7, r3
    1f8c:	2201      	movs	r2, #1
    1f8e:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    1f90:	230c      	movs	r3, #12
    1f92:	18fb      	adds	r3, r7, r3
    1f94:	2202      	movs	r2, #2
    1f96:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
    1f98:	230c      	movs	r3, #12
    1f9a:	18fb      	adds	r3, r7, r3
    1f9c:	0019      	movs	r1, r3
    1f9e:	2009      	movs	r0, #9
    1fa0:	4b09      	ldr	r3, [pc, #36]	; (1fc8 <nm_bsp_register_isr+0x68>)
    1fa2:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
    1fa4:	4b09      	ldr	r3, [pc, #36]	; (1fcc <nm_bsp_register_isr+0x6c>)
    1fa6:	2200      	movs	r2, #0
    1fa8:	2109      	movs	r1, #9
    1faa:	0018      	movs	r0, r3
    1fac:	4b08      	ldr	r3, [pc, #32]	; (1fd0 <nm_bsp_register_isr+0x70>)
    1fae:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1fb0:	2100      	movs	r1, #0
    1fb2:	2009      	movs	r0, #9
    1fb4:	4b07      	ldr	r3, [pc, #28]	; (1fd4 <nm_bsp_register_isr+0x74>)
    1fb6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
    1fb8:	46c0      	nop			; (mov r8, r8)
    1fba:	46bd      	mov	sp, r7
    1fbc:	b006      	add	sp, #24
    1fbe:	bd80      	pop	{r7, pc}
    1fc0:	200000bc 	.word	0x200000bc
    1fc4:	00007b85 	.word	0x00007b85
    1fc8:	00007bb9 	.word	0x00007bb9
    1fcc:	00001e11 	.word	0x00001e11
    1fd0:	00007785 	.word	0x00007785
    1fd4:	000077e9 	.word	0x000077e9

00001fd8 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
    1fd8:	b580      	push	{r7, lr}
    1fda:	b082      	sub	sp, #8
    1fdc:	af00      	add	r7, sp, #0
    1fde:	0002      	movs	r2, r0
    1fe0:	1dfb      	adds	r3, r7, #7
    1fe2:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
    1fe4:	1dfb      	adds	r3, r7, #7
    1fe6:	781b      	ldrb	r3, [r3, #0]
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d004      	beq.n	1ff6 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
    1fec:	2100      	movs	r1, #0
    1fee:	2009      	movs	r0, #9
    1ff0:	4b05      	ldr	r3, [pc, #20]	; (2008 <STACK_SIZE+0x8>)
    1ff2:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    1ff4:	e003      	b.n	1ffe <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
    1ff6:	2100      	movs	r1, #0
    1ff8:	2009      	movs	r0, #9
    1ffa:	4b04      	ldr	r3, [pc, #16]	; (200c <STACK_SIZE+0xc>)
    1ffc:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	46bd      	mov	sp, r7
    2002:	b002      	add	sp, #8
    2004:	bd80      	pop	{r7, pc}
    2006:	46c0      	nop			; (mov r8, r8)
    2008:	000077e9 	.word	0x000077e9
    200c:	00007831 	.word	0x00007831

00002010 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    2010:	b580      	push	{r7, lr}
    2012:	b084      	sub	sp, #16
    2014:	af00      	add	r7, sp, #0
    2016:	0002      	movs	r2, r0
    2018:	1dfb      	adds	r3, r7, #7
    201a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    201c:	230f      	movs	r3, #15
    201e:	18fb      	adds	r3, r7, r3
    2020:	1dfa      	adds	r2, r7, #7
    2022:	7812      	ldrb	r2, [r2, #0]
    2024:	09d2      	lsrs	r2, r2, #7
    2026:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2028:	230e      	movs	r3, #14
    202a:	18fb      	adds	r3, r7, r3
    202c:	1dfa      	adds	r2, r7, #7
    202e:	7812      	ldrb	r2, [r2, #0]
    2030:	0952      	lsrs	r2, r2, #5
    2032:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    2034:	4b0d      	ldr	r3, [pc, #52]	; (206c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    2036:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    2038:	230f      	movs	r3, #15
    203a:	18fb      	adds	r3, r7, r3
    203c:	781b      	ldrb	r3, [r3, #0]
    203e:	2b00      	cmp	r3, #0
    2040:	d10f      	bne.n	2062 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    2042:	230f      	movs	r3, #15
    2044:	18fb      	adds	r3, r7, r3
    2046:	781b      	ldrb	r3, [r3, #0]
    2048:	009b      	lsls	r3, r3, #2
    204a:	2210      	movs	r2, #16
    204c:	4694      	mov	ip, r2
    204e:	44bc      	add	ip, r7
    2050:	4463      	add	r3, ip
    2052:	3b08      	subs	r3, #8
    2054:	681a      	ldr	r2, [r3, #0]
    2056:	230e      	movs	r3, #14
    2058:	18fb      	adds	r3, r7, r3
    205a:	781b      	ldrb	r3, [r3, #0]
    205c:	01db      	lsls	r3, r3, #7
    205e:	18d3      	adds	r3, r2, r3
    2060:	e000      	b.n	2064 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    2062:	2300      	movs	r3, #0
	}
}
    2064:	0018      	movs	r0, r3
    2066:	46bd      	mov	sp, r7
    2068:	b004      	add	sp, #16
    206a:	bd80      	pop	{r7, pc}
    206c:	41004400 	.word	0x41004400

00002070 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    2070:	b580      	push	{r7, lr}
    2072:	b082      	sub	sp, #8
    2074:	af00      	add	r7, sp, #0
    2076:	0002      	movs	r2, r0
    2078:	1dfb      	adds	r3, r7, #7
    207a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    207c:	4b06      	ldr	r3, [pc, #24]	; (2098 <system_interrupt_enable+0x28>)
    207e:	1dfa      	adds	r2, r7, #7
    2080:	7812      	ldrb	r2, [r2, #0]
    2082:	0011      	movs	r1, r2
    2084:	221f      	movs	r2, #31
    2086:	400a      	ands	r2, r1
    2088:	2101      	movs	r1, #1
    208a:	4091      	lsls	r1, r2
    208c:	000a      	movs	r2, r1
    208e:	601a      	str	r2, [r3, #0]
}
    2090:	46c0      	nop			; (mov r8, r8)
    2092:	46bd      	mov	sp, r7
    2094:	b002      	add	sp, #8
    2096:	bd80      	pop	{r7, pc}
    2098:	e000e100 	.word	0xe000e100

0000209c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    209c:	b580      	push	{r7, lr}
    209e:	b082      	sub	sp, #8
    20a0:	af00      	add	r7, sp, #0
    20a2:	0002      	movs	r2, r0
    20a4:	1dfb      	adds	r3, r7, #7
    20a6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    20a8:	4a07      	ldr	r2, [pc, #28]	; (20c8 <system_interrupt_disable+0x2c>)
    20aa:	1dfb      	adds	r3, r7, #7
    20ac:	781b      	ldrb	r3, [r3, #0]
    20ae:	0019      	movs	r1, r3
    20b0:	231f      	movs	r3, #31
    20b2:	400b      	ands	r3, r1
    20b4:	2101      	movs	r1, #1
    20b6:	4099      	lsls	r1, r3
    20b8:	000b      	movs	r3, r1
    20ba:	0019      	movs	r1, r3
    20bc:	2380      	movs	r3, #128	; 0x80
    20be:	50d1      	str	r1, [r2, r3]
}
    20c0:	46c0      	nop			; (mov r8, r8)
    20c2:	46bd      	mov	sp, r7
    20c4:	b002      	add	sp, #8
    20c6:	bd80      	pop	{r7, pc}
    20c8:	e000e100 	.word	0xe000e100

000020cc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    20cc:	b580      	push	{r7, lr}
    20ce:	b082      	sub	sp, #8
    20d0:	af00      	add	r7, sp, #0
    20d2:	0002      	movs	r2, r0
    20d4:	1dfb      	adds	r3, r7, #7
    20d6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    20d8:	1dfb      	adds	r3, r7, #7
    20da:	781b      	ldrb	r3, [r3, #0]
    20dc:	0018      	movs	r0, r3
    20de:	4b03      	ldr	r3, [pc, #12]	; (20ec <port_get_group_from_gpio_pin+0x20>)
    20e0:	4798      	blx	r3
    20e2:	0003      	movs	r3, r0
}
    20e4:	0018      	movs	r0, r3
    20e6:	46bd      	mov	sp, r7
    20e8:	b002      	add	sp, #8
    20ea:	bd80      	pop	{r7, pc}
    20ec:	00002011 	.word	0x00002011

000020f0 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    20f0:	b580      	push	{r7, lr}
    20f2:	b082      	sub	sp, #8
    20f4:	af00      	add	r7, sp, #0
    20f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    20f8:	687b      	ldr	r3, [r7, #4]
    20fa:	2200      	movs	r2, #0
    20fc:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    20fe:	687b      	ldr	r3, [r7, #4]
    2100:	2201      	movs	r2, #1
    2102:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2104:	687b      	ldr	r3, [r7, #4]
    2106:	2200      	movs	r2, #0
    2108:	709a      	strb	r2, [r3, #2]
}
    210a:	46c0      	nop			; (mov r8, r8)
    210c:	46bd      	mov	sp, r7
    210e:	b002      	add	sp, #8
    2110:	bd80      	pop	{r7, pc}
    2112:	46c0      	nop			; (mov r8, r8)

00002114 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    2114:	b580      	push	{r7, lr}
    2116:	b084      	sub	sp, #16
    2118:	af00      	add	r7, sp, #0
    211a:	0002      	movs	r2, r0
    211c:	1dfb      	adds	r3, r7, #7
    211e:	701a      	strb	r2, [r3, #0]
    2120:	1dbb      	adds	r3, r7, #6
    2122:	1c0a      	adds	r2, r1, #0
    2124:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2126:	1dfb      	adds	r3, r7, #7
    2128:	781b      	ldrb	r3, [r3, #0]
    212a:	0018      	movs	r0, r3
    212c:	4b0d      	ldr	r3, [pc, #52]	; (2164 <port_pin_set_output_level+0x50>)
    212e:	4798      	blx	r3
    2130:	0003      	movs	r3, r0
    2132:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2134:	1dfb      	adds	r3, r7, #7
    2136:	781b      	ldrb	r3, [r3, #0]
    2138:	221f      	movs	r2, #31
    213a:	4013      	ands	r3, r2
    213c:	2201      	movs	r2, #1
    213e:	409a      	lsls	r2, r3
    2140:	0013      	movs	r3, r2
    2142:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    2144:	1dbb      	adds	r3, r7, #6
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	2b00      	cmp	r3, #0
    214a:	d003      	beq.n	2154 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    214c:	68fb      	ldr	r3, [r7, #12]
    214e:	68ba      	ldr	r2, [r7, #8]
    2150:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    2152:	e002      	b.n	215a <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    2154:	68fb      	ldr	r3, [r7, #12]
    2156:	68ba      	ldr	r2, [r7, #8]
    2158:	615a      	str	r2, [r3, #20]
	}
}
    215a:	46c0      	nop			; (mov r8, r8)
    215c:	46bd      	mov	sp, r7
    215e:	b004      	add	sp, #16
    2160:	bd80      	pop	{r7, pc}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	000020cd 	.word	0x000020cd

00002168 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    2168:	b580      	push	{r7, lr}
    216a:	b084      	sub	sp, #16
    216c:	af00      	add	r7, sp, #0
    216e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2170:	687b      	ldr	r3, [r7, #4]
    2172:	681b      	ldr	r3, [r3, #0]
    2174:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    2176:	68fb      	ldr	r3, [r7, #12]
    2178:	69db      	ldr	r3, [r3, #28]
    217a:	1e5a      	subs	r2, r3, #1
    217c:	4193      	sbcs	r3, r2
    217e:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    2180:	0018      	movs	r0, r3
    2182:	46bd      	mov	sp, r7
    2184:	b004      	add	sp, #16
    2186:	bd80      	pop	{r7, pc}

00002188 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    2188:	b580      	push	{r7, lr}
    218a:	b082      	sub	sp, #8
    218c:	af00      	add	r7, sp, #0
    218e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    2190:	687b      	ldr	r3, [r7, #4]
    2192:	2201      	movs	r2, #1
    2194:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2196:	687b      	ldr	r3, [r7, #4]
    2198:	2200      	movs	r2, #0
    219a:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    219c:	687b      	ldr	r3, [r7, #4]
    219e:	2200      	movs	r2, #0
    21a0:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    21a2:	687b      	ldr	r3, [r7, #4]
    21a4:	22c0      	movs	r2, #192	; 0xc0
    21a6:	0392      	lsls	r2, r2, #14
    21a8:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    21aa:	687b      	ldr	r3, [r7, #4]
    21ac:	2200      	movs	r2, #0
    21ae:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    21b0:	687b      	ldr	r3, [r7, #4]
    21b2:	2200      	movs	r2, #0
    21b4:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    21b6:	687b      	ldr	r3, [r7, #4]
    21b8:	2201      	movs	r2, #1
    21ba:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    21bc:	687b      	ldr	r3, [r7, #4]
    21be:	2201      	movs	r2, #1
    21c0:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    21c2:	687b      	ldr	r3, [r7, #4]
    21c4:	2200      	movs	r2, #0
    21c6:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    21c8:	687b      	ldr	r3, [r7, #4]
    21ca:	2224      	movs	r2, #36	; 0x24
    21cc:	2100      	movs	r1, #0
    21ce:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    21d0:	687b      	ldr	r3, [r7, #4]
    21d2:	3318      	adds	r3, #24
    21d4:	220c      	movs	r2, #12
    21d6:	2100      	movs	r1, #0
    21d8:	0018      	movs	r0, r3
    21da:	4b0a      	ldr	r3, [pc, #40]	; (2204 <spi_get_config_defaults+0x7c>)
    21dc:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	4a09      	ldr	r2, [pc, #36]	; (2208 <spi_get_config_defaults+0x80>)
    21e2:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    21e4:	687b      	ldr	r3, [r7, #4]
    21e6:	2200      	movs	r2, #0
    21e8:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    21ea:	687b      	ldr	r3, [r7, #4]
    21ec:	2200      	movs	r2, #0
    21ee:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    21f0:	687b      	ldr	r3, [r7, #4]
    21f2:	2200      	movs	r2, #0
    21f4:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    21f6:	687b      	ldr	r3, [r7, #4]
    21f8:	2200      	movs	r2, #0
    21fa:	635a      	str	r2, [r3, #52]	; 0x34

};
    21fc:	46c0      	nop			; (mov r8, r8)
    21fe:	46bd      	mov	sp, r7
    2200:	b002      	add	sp, #8
    2202:	bd80      	pop	{r7, pc}
    2204:	0000fb1b 	.word	0x0000fb1b
    2208:	000186a0 	.word	0x000186a0

0000220c <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    220c:	b580      	push	{r7, lr}
    220e:	b082      	sub	sp, #8
    2210:	af00      	add	r7, sp, #0
    2212:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2214:	687b      	ldr	r3, [r7, #4]
    2216:	220a      	movs	r2, #10
    2218:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	2200      	movs	r2, #0
    221e:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	2200      	movs	r2, #0
    2224:	709a      	strb	r2, [r3, #2]
}
    2226:	46c0      	nop			; (mov r8, r8)
    2228:	46bd      	mov	sp, r7
    222a:	b002      	add	sp, #8
    222c:	bd80      	pop	{r7, pc}
    222e:	46c0      	nop			; (mov r8, r8)

00002230 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    2230:	b580      	push	{r7, lr}
    2232:	b084      	sub	sp, #16
    2234:	af00      	add	r7, sp, #0
    2236:	6078      	str	r0, [r7, #4]
    2238:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    223a:	683b      	ldr	r3, [r7, #0]
    223c:	781a      	ldrb	r2, [r3, #0]
    223e:	687b      	ldr	r3, [r7, #4]
    2240:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    2242:	683b      	ldr	r3, [r7, #0]
    2244:	785a      	ldrb	r2, [r3, #1]
    2246:	687b      	ldr	r3, [r7, #4]
    2248:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    224a:	683b      	ldr	r3, [r7, #0]
    224c:	789a      	ldrb	r2, [r3, #2]
    224e:	687b      	ldr	r3, [r7, #4]
    2250:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    2252:	230c      	movs	r3, #12
    2254:	18fb      	adds	r3, r7, r3
    2256:	0018      	movs	r0, r3
    2258:	4b0b      	ldr	r3, [pc, #44]	; (2288 <spi_attach_slave+0x58>)
    225a:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    225c:	230c      	movs	r3, #12
    225e:	18fb      	adds	r3, r7, r3
    2260:	2201      	movs	r2, #1
    2262:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    2264:	687b      	ldr	r3, [r7, #4]
    2266:	781b      	ldrb	r3, [r3, #0]
    2268:	220c      	movs	r2, #12
    226a:	18ba      	adds	r2, r7, r2
    226c:	0011      	movs	r1, r2
    226e:	0018      	movs	r0, r3
    2270:	4b06      	ldr	r3, [pc, #24]	; (228c <spi_attach_slave+0x5c>)
    2272:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    2274:	687b      	ldr	r3, [r7, #4]
    2276:	781b      	ldrb	r3, [r3, #0]
    2278:	2101      	movs	r1, #1
    227a:	0018      	movs	r0, r3
    227c:	4b04      	ldr	r3, [pc, #16]	; (2290 <spi_attach_slave+0x60>)
    227e:	4798      	blx	r3
}
    2280:	46c0      	nop			; (mov r8, r8)
    2282:	46bd      	mov	sp, r7
    2284:	b004      	add	sp, #16
    2286:	bd80      	pop	{r7, pc}
    2288:	000020f1 	.word	0x000020f1
    228c:	00007cdd 	.word	0x00007cdd
    2290:	00002115 	.word	0x00002115

00002294 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    2294:	b580      	push	{r7, lr}
    2296:	b084      	sub	sp, #16
    2298:	af00      	add	r7, sp, #0
    229a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    229c:	687b      	ldr	r3, [r7, #4]
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    22a2:	687b      	ldr	r3, [r7, #4]
    22a4:	681b      	ldr	r3, [r3, #0]
    22a6:	0018      	movs	r0, r3
    22a8:	4b0b      	ldr	r3, [pc, #44]	; (22d8 <spi_enable+0x44>)
    22aa:	4798      	blx	r3
    22ac:	0003      	movs	r3, r0
    22ae:	0018      	movs	r0, r3
    22b0:	4b0a      	ldr	r3, [pc, #40]	; (22dc <spi_enable+0x48>)
    22b2:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    22b4:	46c0      	nop			; (mov r8, r8)
    22b6:	687b      	ldr	r3, [r7, #4]
    22b8:	0018      	movs	r0, r3
    22ba:	4b09      	ldr	r3, [pc, #36]	; (22e0 <spi_enable+0x4c>)
    22bc:	4798      	blx	r3
    22be:	1e03      	subs	r3, r0, #0
    22c0:	d1f9      	bne.n	22b6 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    22c2:	68fb      	ldr	r3, [r7, #12]
    22c4:	681b      	ldr	r3, [r3, #0]
    22c6:	2202      	movs	r2, #2
    22c8:	431a      	orrs	r2, r3
    22ca:	68fb      	ldr	r3, [r7, #12]
    22cc:	601a      	str	r2, [r3, #0]
}
    22ce:	46c0      	nop			; (mov r8, r8)
    22d0:	46bd      	mov	sp, r7
    22d2:	b004      	add	sp, #16
    22d4:	bd80      	pop	{r7, pc}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	00008479 	.word	0x00008479
    22dc:	00002071 	.word	0x00002071
    22e0:	00002169 	.word	0x00002169

000022e4 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    22e4:	b580      	push	{r7, lr}
    22e6:	b084      	sub	sp, #16
    22e8:	af00      	add	r7, sp, #0
    22ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22ec:	687b      	ldr	r3, [r7, #4]
    22ee:	681b      	ldr	r3, [r3, #0]
    22f0:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    22f2:	687b      	ldr	r3, [r7, #4]
    22f4:	681b      	ldr	r3, [r3, #0]
    22f6:	0018      	movs	r0, r3
    22f8:	4b0e      	ldr	r3, [pc, #56]	; (2334 <spi_disable+0x50>)
    22fa:	4798      	blx	r3
    22fc:	0003      	movs	r3, r0
    22fe:	0018      	movs	r0, r3
    2300:	4b0d      	ldr	r3, [pc, #52]	; (2338 <spi_disable+0x54>)
    2302:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    2304:	46c0      	nop			; (mov r8, r8)
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	0018      	movs	r0, r3
    230a:	4b0c      	ldr	r3, [pc, #48]	; (233c <spi_disable+0x58>)
    230c:	4798      	blx	r3
    230e:	1e03      	subs	r3, r0, #0
    2310:	d1f9      	bne.n	2306 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    2312:	68fb      	ldr	r3, [r7, #12]
    2314:	228f      	movs	r2, #143	; 0x8f
    2316:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    2318:	68fb      	ldr	r3, [r7, #12]
    231a:	228f      	movs	r2, #143	; 0x8f
    231c:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    231e:	68fb      	ldr	r3, [r7, #12]
    2320:	681b      	ldr	r3, [r3, #0]
    2322:	2202      	movs	r2, #2
    2324:	4393      	bics	r3, r2
    2326:	001a      	movs	r2, r3
    2328:	68fb      	ldr	r3, [r7, #12]
    232a:	601a      	str	r2, [r3, #0]
}
    232c:	46c0      	nop			; (mov r8, r8)
    232e:	46bd      	mov	sp, r7
    2330:	b004      	add	sp, #16
    2332:	bd80      	pop	{r7, pc}
    2334:	00008479 	.word	0x00008479
    2338:	0000209d 	.word	0x0000209d
    233c:	00002169 	.word	0x00002169

00002340 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    2340:	b580      	push	{r7, lr}
    2342:	b084      	sub	sp, #16
    2344:	af00      	add	r7, sp, #0
    2346:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2348:	687b      	ldr	r3, [r7, #4]
    234a:	681b      	ldr	r3, [r3, #0]
    234c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    234e:	68fb      	ldr	r3, [r7, #12]
    2350:	7e1b      	ldrb	r3, [r3, #24]
    2352:	b2db      	uxtb	r3, r3
    2354:	001a      	movs	r2, r3
    2356:	2302      	movs	r3, #2
    2358:	4013      	ands	r3, r2
    235a:	1e5a      	subs	r2, r3, #1
    235c:	4193      	sbcs	r3, r2
    235e:	b2db      	uxtb	r3, r3
}
    2360:	0018      	movs	r0, r3
    2362:	46bd      	mov	sp, r7
    2364:	b004      	add	sp, #16
    2366:	bd80      	pop	{r7, pc}

00002368 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    2368:	b580      	push	{r7, lr}
    236a:	b084      	sub	sp, #16
    236c:	af00      	add	r7, sp, #0
    236e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2370:	687b      	ldr	r3, [r7, #4]
    2372:	681b      	ldr	r3, [r3, #0]
    2374:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2376:	68fb      	ldr	r3, [r7, #12]
    2378:	7e1b      	ldrb	r3, [r3, #24]
    237a:	b2db      	uxtb	r3, r3
    237c:	001a      	movs	r2, r3
    237e:	2301      	movs	r3, #1
    2380:	4013      	ands	r3, r2
    2382:	1e5a      	subs	r2, r3, #1
    2384:	4193      	sbcs	r3, r2
    2386:	b2db      	uxtb	r3, r3
}
    2388:	0018      	movs	r0, r3
    238a:	46bd      	mov	sp, r7
    238c:	b004      	add	sp, #16
    238e:	bd80      	pop	{r7, pc}

00002390 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    2390:	b580      	push	{r7, lr}
    2392:	b084      	sub	sp, #16
    2394:	af00      	add	r7, sp, #0
    2396:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	681b      	ldr	r3, [r3, #0]
    239c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    239e:	68fb      	ldr	r3, [r7, #12]
    23a0:	7e1b      	ldrb	r3, [r3, #24]
    23a2:	b2db      	uxtb	r3, r3
    23a4:	001a      	movs	r2, r3
    23a6:	2304      	movs	r3, #4
    23a8:	4013      	ands	r3, r2
    23aa:	1e5a      	subs	r2, r3, #1
    23ac:	4193      	sbcs	r3, r2
    23ae:	b2db      	uxtb	r3, r3
}
    23b0:	0018      	movs	r0, r3
    23b2:	46bd      	mov	sp, r7
    23b4:	b004      	add	sp, #16
    23b6:	bd80      	pop	{r7, pc}

000023b8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    23b8:	b580      	push	{r7, lr}
    23ba:	b084      	sub	sp, #16
    23bc:	af00      	add	r7, sp, #0
    23be:	6078      	str	r0, [r7, #4]
    23c0:	000a      	movs	r2, r1
    23c2:	1cbb      	adds	r3, r7, #2
    23c4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    23c6:	687b      	ldr	r3, [r7, #4]
    23c8:	681b      	ldr	r3, [r3, #0]
    23ca:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    23cc:	687b      	ldr	r3, [r7, #4]
    23ce:	0018      	movs	r0, r3
    23d0:	4b0a      	ldr	r3, [pc, #40]	; (23fc <spi_write+0x44>)
    23d2:	4798      	blx	r3
    23d4:	0003      	movs	r3, r0
    23d6:	001a      	movs	r2, r3
    23d8:	2301      	movs	r3, #1
    23da:	4053      	eors	r3, r2
    23dc:	b2db      	uxtb	r3, r3
    23de:	2b00      	cmp	r3, #0
    23e0:	d001      	beq.n	23e6 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    23e2:	2305      	movs	r3, #5
    23e4:	e006      	b.n	23f4 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    23e6:	1cbb      	adds	r3, r7, #2
    23e8:	881b      	ldrh	r3, [r3, #0]
    23ea:	05db      	lsls	r3, r3, #23
    23ec:	0dda      	lsrs	r2, r3, #23
    23ee:	68fb      	ldr	r3, [r7, #12]
    23f0:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    23f2:	2300      	movs	r3, #0
}
    23f4:	0018      	movs	r0, r3
    23f6:	46bd      	mov	sp, r7
    23f8:	b004      	add	sp, #16
    23fa:	bd80      	pop	{r7, pc}
    23fc:	00002369 	.word	0x00002369

00002400 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    2400:	b580      	push	{r7, lr}
    2402:	b084      	sub	sp, #16
    2404:	af00      	add	r7, sp, #0
    2406:	6078      	str	r0, [r7, #4]
    2408:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    240a:	687b      	ldr	r3, [r7, #4]
    240c:	681b      	ldr	r3, [r3, #0]
    240e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	0018      	movs	r0, r3
    2414:	4b1b      	ldr	r3, [pc, #108]	; (2484 <spi_read+0x84>)
    2416:	4798      	blx	r3
    2418:	0003      	movs	r3, r0
    241a:	001a      	movs	r2, r3
    241c:	2301      	movs	r3, #1
    241e:	4053      	eors	r3, r2
    2420:	b2db      	uxtb	r3, r3
    2422:	2b00      	cmp	r3, #0
    2424:	d001      	beq.n	242a <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2426:	2310      	movs	r3, #16
    2428:	e027      	b.n	247a <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    242a:	230f      	movs	r3, #15
    242c:	18fb      	adds	r3, r7, r3
    242e:	2200      	movs	r2, #0
    2430:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2432:	68bb      	ldr	r3, [r7, #8]
    2434:	8b5b      	ldrh	r3, [r3, #26]
    2436:	b29b      	uxth	r3, r3
    2438:	001a      	movs	r2, r3
    243a:	2304      	movs	r3, #4
    243c:	4013      	ands	r3, r2
    243e:	d006      	beq.n	244e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    2440:	230f      	movs	r3, #15
    2442:	18fb      	adds	r3, r7, r3
    2444:	221e      	movs	r2, #30
    2446:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2448:	68bb      	ldr	r3, [r7, #8]
    244a:	2204      	movs	r2, #4
    244c:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    244e:	687b      	ldr	r3, [r7, #4]
    2450:	799b      	ldrb	r3, [r3, #6]
    2452:	2b01      	cmp	r3, #1
    2454:	d108      	bne.n	2468 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2456:	68bb      	ldr	r3, [r7, #8]
    2458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    245a:	b29b      	uxth	r3, r3
    245c:	05db      	lsls	r3, r3, #23
    245e:	0ddb      	lsrs	r3, r3, #23
    2460:	b29a      	uxth	r2, r3
    2462:	683b      	ldr	r3, [r7, #0]
    2464:	801a      	strh	r2, [r3, #0]
    2466:	e005      	b.n	2474 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2468:	68bb      	ldr	r3, [r7, #8]
    246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    246c:	b2db      	uxtb	r3, r3
    246e:	b29a      	uxth	r2, r3
    2470:	683b      	ldr	r3, [r7, #0]
    2472:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    2474:	230f      	movs	r3, #15
    2476:	18fb      	adds	r3, r7, r3
    2478:	781b      	ldrb	r3, [r3, #0]
}
    247a:	0018      	movs	r0, r3
    247c:	46bd      	mov	sp, r7
    247e:	b004      	add	sp, #16
    2480:	bd80      	pop	{r7, pc}
    2482:	46c0      	nop			; (mov r8, r8)
    2484:	00002391 	.word	0x00002391

00002488 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
    2488:	b580      	push	{r7, lr}
    248a:	b086      	sub	sp, #24
    248c:	af00      	add	r7, sp, #0
    248e:	60f8      	str	r0, [r7, #12]
    2490:	60b9      	str	r1, [r7, #8]
    2492:	1dbb      	adds	r3, r7, #6
    2494:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
    2496:	2313      	movs	r3, #19
    2498:	18fb      	adds	r3, r7, r3
    249a:	2200      	movs	r2, #0
    249c:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
    249e:	2317      	movs	r3, #23
    24a0:	18fb      	adds	r3, r7, r3
    24a2:	2200      	movs	r2, #0
    24a4:	701a      	strb	r2, [r3, #0]
    24a6:	2316      	movs	r3, #22
    24a8:	18fb      	adds	r3, r7, r3
    24aa:	2200      	movs	r2, #0
    24ac:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
    24ae:	2314      	movs	r3, #20
    24b0:	18fb      	adds	r3, r7, r3
    24b2:	2200      	movs	r2, #0
    24b4:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
    24b6:	2310      	movs	r3, #16
    24b8:	18fb      	adds	r3, r7, r3
    24ba:	2200      	movs	r2, #0
    24bc:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
    24be:	68fb      	ldr	r3, [r7, #12]
    24c0:	2b00      	cmp	r3, #0
    24c2:	d107      	bne.n	24d4 <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
    24c4:	2313      	movs	r3, #19
    24c6:	18fb      	adds	r3, r7, r3
    24c8:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
    24ca:	2317      	movs	r3, #23
    24cc:	18fb      	adds	r3, r7, r3
    24ce:	2201      	movs	r2, #1
    24d0:	701a      	strb	r2, [r3, #0]
    24d2:	e00d      	b.n	24f0 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
    24d4:	68bb      	ldr	r3, [r7, #8]
    24d6:	2b00      	cmp	r3, #0
    24d8:	d107      	bne.n	24ea <spi_rw+0x62>
		pu8Miso = &u8Dummy;
    24da:	2313      	movs	r3, #19
    24dc:	18fb      	adds	r3, r7, r3
    24de:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
    24e0:	2316      	movs	r3, #22
    24e2:	18fb      	adds	r3, r7, r3
    24e4:	2201      	movs	r2, #1
    24e6:	701a      	strb	r2, [r3, #0]
    24e8:	e002      	b.n	24f0 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
    24ea:	2306      	movs	r3, #6
    24ec:	425b      	negs	r3, r3
    24ee:	e06a      	b.n	25c6 <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
    24f0:	4937      	ldr	r1, [pc, #220]	; (25d0 <spi_rw+0x148>)
    24f2:	4b38      	ldr	r3, [pc, #224]	; (25d4 <spi_rw+0x14c>)
    24f4:	2201      	movs	r2, #1
    24f6:	0018      	movs	r0, r3
    24f8:	4b37      	ldr	r3, [pc, #220]	; (25d8 <spi_rw+0x150>)
    24fa:	4798      	blx	r3

	while (u16Sz) {
    24fc:	e04c      	b.n	2598 <spi_rw+0x110>
		txd_data = *pu8Mosi;
    24fe:	68fb      	ldr	r3, [r7, #12]
    2500:	781a      	ldrb	r2, [r3, #0]
    2502:	2314      	movs	r3, #20
    2504:	18fb      	adds	r3, r7, r3
    2506:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
    2508:	46c0      	nop			; (mov r8, r8)
    250a:	4b32      	ldr	r3, [pc, #200]	; (25d4 <spi_rw+0x14c>)
    250c:	0018      	movs	r0, r3
    250e:	4b33      	ldr	r3, [pc, #204]	; (25dc <spi_rw+0x154>)
    2510:	4798      	blx	r3
    2512:	0003      	movs	r3, r0
    2514:	001a      	movs	r2, r3
    2516:	2301      	movs	r3, #1
    2518:	4053      	eors	r3, r2
    251a:	b2db      	uxtb	r3, r3
    251c:	2b00      	cmp	r3, #0
    251e:	d1f4      	bne.n	250a <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
    2520:	46c0      	nop			; (mov r8, r8)
    2522:	2314      	movs	r3, #20
    2524:	18fb      	adds	r3, r7, r3
    2526:	881a      	ldrh	r2, [r3, #0]
    2528:	4b2a      	ldr	r3, [pc, #168]	; (25d4 <spi_rw+0x14c>)
    252a:	0011      	movs	r1, r2
    252c:	0018      	movs	r0, r3
    252e:	4b2c      	ldr	r3, [pc, #176]	; (25e0 <spi_rw+0x158>)
    2530:	4798      	blx	r3
    2532:	1e03      	subs	r3, r0, #0
    2534:	d1f5      	bne.n	2522 <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
    2536:	46c0      	nop			; (mov r8, r8)
    2538:	4b26      	ldr	r3, [pc, #152]	; (25d4 <spi_rw+0x14c>)
    253a:	0018      	movs	r0, r3
    253c:	4b29      	ldr	r3, [pc, #164]	; (25e4 <spi_rw+0x15c>)
    253e:	4798      	blx	r3
    2540:	0003      	movs	r3, r0
    2542:	001a      	movs	r2, r3
    2544:	2301      	movs	r3, #1
    2546:	4053      	eors	r3, r2
    2548:	b2db      	uxtb	r3, r3
    254a:	2b00      	cmp	r3, #0
    254c:	d1f4      	bne.n	2538 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
    254e:	46c0      	nop			; (mov r8, r8)
    2550:	2310      	movs	r3, #16
    2552:	18fa      	adds	r2, r7, r3
    2554:	4b1f      	ldr	r3, [pc, #124]	; (25d4 <spi_rw+0x14c>)
    2556:	0011      	movs	r1, r2
    2558:	0018      	movs	r0, r3
    255a:	4b23      	ldr	r3, [pc, #140]	; (25e8 <spi_rw+0x160>)
    255c:	4798      	blx	r3
    255e:	1e03      	subs	r3, r0, #0
    2560:	d1f6      	bne.n	2550 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
    2562:	2310      	movs	r3, #16
    2564:	18fb      	adds	r3, r7, r3
    2566:	881b      	ldrh	r3, [r3, #0]
    2568:	b2da      	uxtb	r2, r3
    256a:	68bb      	ldr	r3, [r7, #8]
    256c:	701a      	strb	r2, [r3, #0]

		u16Sz--;
    256e:	1dbb      	adds	r3, r7, #6
    2570:	881a      	ldrh	r2, [r3, #0]
    2572:	1dbb      	adds	r3, r7, #6
    2574:	3a01      	subs	r2, #1
    2576:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
    2578:	2316      	movs	r3, #22
    257a:	18fb      	adds	r3, r7, r3
    257c:	781b      	ldrb	r3, [r3, #0]
    257e:	2b00      	cmp	r3, #0
    2580:	d102      	bne.n	2588 <spi_rw+0x100>
			pu8Miso++;
    2582:	68bb      	ldr	r3, [r7, #8]
    2584:	3301      	adds	r3, #1
    2586:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
    2588:	2317      	movs	r3, #23
    258a:	18fb      	adds	r3, r7, r3
    258c:	781b      	ldrb	r3, [r3, #0]
    258e:	2b00      	cmp	r3, #0
    2590:	d102      	bne.n	2598 <spi_rw+0x110>
			pu8Mosi++;
    2592:	68fb      	ldr	r3, [r7, #12]
    2594:	3301      	adds	r3, #1
    2596:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
    2598:	1dbb      	adds	r3, r7, #6
    259a:	881b      	ldrh	r3, [r3, #0]
    259c:	2b00      	cmp	r3, #0
    259e:	d1ae      	bne.n	24fe <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
    25a0:	46c0      	nop			; (mov r8, r8)
    25a2:	4b0c      	ldr	r3, [pc, #48]	; (25d4 <spi_rw+0x14c>)
    25a4:	0018      	movs	r0, r3
    25a6:	4b11      	ldr	r3, [pc, #68]	; (25ec <spi_rw+0x164>)
    25a8:	4798      	blx	r3
    25aa:	0003      	movs	r3, r0
    25ac:	001a      	movs	r2, r3
    25ae:	2301      	movs	r3, #1
    25b0:	4053      	eors	r3, r2
    25b2:	b2db      	uxtb	r3, r3
    25b4:	2b00      	cmp	r3, #0
    25b6:	d1f4      	bne.n	25a2 <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
    25b8:	4905      	ldr	r1, [pc, #20]	; (25d0 <spi_rw+0x148>)
    25ba:	4b06      	ldr	r3, [pc, #24]	; (25d4 <spi_rw+0x14c>)
    25bc:	2200      	movs	r2, #0
    25be:	0018      	movs	r0, r3
    25c0:	4b05      	ldr	r3, [pc, #20]	; (25d8 <spi_rw+0x150>)
    25c2:	4798      	blx	r3

	return M2M_SUCCESS;
    25c4:	2300      	movs	r3, #0
}
    25c6:	0018      	movs	r0, r3
    25c8:	46bd      	mov	sp, r7
    25ca:	b006      	add	sp, #24
    25cc:	bd80      	pop	{r7, pc}
    25ce:	46c0      	nop			; (mov r8, r8)
    25d0:	2000461c 	.word	0x2000461c
    25d4:	20004620 	.word	0x20004620
    25d8:	00008cdd 	.word	0x00008cdd
    25dc:	00002369 	.word	0x00002369
    25e0:	000023b9 	.word	0x000023b9
    25e4:	00002391 	.word	0x00002391
    25e8:	00002401 	.word	0x00002401
    25ec:	00002341 	.word	0x00002341

000025f0 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
    25f0:	b580      	push	{r7, lr}
    25f2:	b092      	sub	sp, #72	; 0x48
    25f4:	af00      	add	r7, sp, #0
    25f6:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
    25f8:	2347      	movs	r3, #71	; 0x47
    25fa:	18fb      	adds	r3, r7, r3
    25fc:	2200      	movs	r2, #0
    25fe:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
    2600:	2308      	movs	r3, #8
    2602:	18fb      	adds	r3, r7, r3
    2604:	0018      	movs	r0, r3
    2606:	4b26      	ldr	r3, [pc, #152]	; (26a0 <nm_bus_init+0xb0>)
    2608:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
    260a:	2308      	movs	r3, #8
    260c:	18fb      	adds	r3, r7, r3
    260e:	220e      	movs	r2, #14
    2610:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
    2612:	2308      	movs	r3, #8
    2614:	18fa      	adds	r2, r7, r3
    2616:	4b23      	ldr	r3, [pc, #140]	; (26a4 <nm_bus_init+0xb4>)
    2618:	0011      	movs	r1, r2
    261a:	0018      	movs	r0, r3
    261c:	4b22      	ldr	r3, [pc, #136]	; (26a8 <nm_bus_init+0xb8>)
    261e:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
    2620:	230c      	movs	r3, #12
    2622:	18fb      	adds	r3, r7, r3
    2624:	0018      	movs	r0, r3
    2626:	4b21      	ldr	r3, [pc, #132]	; (26ac <nm_bus_init+0xbc>)
    2628:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
    262a:	230c      	movs	r3, #12
    262c:	18fb      	adds	r3, r7, r3
    262e:	22c0      	movs	r2, #192	; 0xc0
    2630:	0392      	lsls	r2, r2, #14
    2632:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
    2634:	230c      	movs	r3, #12
    2636:	18fb      	adds	r3, r7, r3
    2638:	4a1d      	ldr	r2, [pc, #116]	; (26b0 <nm_bus_init+0xc0>)
    263a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
    263c:	230c      	movs	r3, #12
    263e:	18fb      	adds	r3, r7, r3
    2640:	4a1c      	ldr	r2, [pc, #112]	; (26b4 <nm_bus_init+0xc4>)
    2642:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
    2644:	230c      	movs	r3, #12
    2646:	18fb      	adds	r3, r7, r3
    2648:	2201      	movs	r2, #1
    264a:	4252      	negs	r2, r2
    264c:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
    264e:	230c      	movs	r3, #12
    2650:	18fb      	adds	r3, r7, r3
    2652:	4a19      	ldr	r2, [pc, #100]	; (26b8 <nm_bus_init+0xc8>)
    2654:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
    2656:	230c      	movs	r3, #12
    2658:	18fb      	adds	r3, r7, r3
    265a:	2200      	movs	r2, #0
    265c:	751a      	strb	r2, [r3, #20]

	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
    265e:	230c      	movs	r3, #12
    2660:	18fb      	adds	r3, r7, r3
    2662:	4a16      	ldr	r2, [pc, #88]	; (26bc <nm_bus_init+0xcc>)
    2664:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
    2666:	230c      	movs	r3, #12
    2668:	18fa      	adds	r2, r7, r3
    266a:	4915      	ldr	r1, [pc, #84]	; (26c0 <nm_bus_init+0xd0>)
    266c:	4b15      	ldr	r3, [pc, #84]	; (26c4 <nm_bus_init+0xd4>)
    266e:	0018      	movs	r0, r3
    2670:	4b15      	ldr	r3, [pc, #84]	; (26c8 <nm_bus_init+0xd8>)
    2672:	4798      	blx	r3
    2674:	1e03      	subs	r3, r0, #0
    2676:	d002      	beq.n	267e <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
    2678:	2306      	movs	r3, #6
    267a:	425b      	negs	r3, r3
    267c:	e00c      	b.n	2698 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
    267e:	4b11      	ldr	r3, [pc, #68]	; (26c4 <nm_bus_init+0xd4>)
    2680:	0018      	movs	r0, r3
    2682:	4b12      	ldr	r3, [pc, #72]	; (26cc <nm_bus_init+0xdc>)
    2684:	4798      	blx	r3

	nm_bsp_reset();
    2686:	4b12      	ldr	r3, [pc, #72]	; (26d0 <nm_bus_init+0xe0>)
    2688:	4798      	blx	r3
	nm_bsp_sleep(1);
    268a:	2001      	movs	r0, #1
    268c:	4b11      	ldr	r3, [pc, #68]	; (26d4 <nm_bus_init+0xe4>)
    268e:	4798      	blx	r3
#endif
	return result;
    2690:	2347      	movs	r3, #71	; 0x47
    2692:	18fb      	adds	r3, r7, r3
    2694:	781b      	ldrb	r3, [r3, #0]
    2696:	b25b      	sxtb	r3, r3
}
    2698:	0018      	movs	r0, r3
    269a:	46bd      	mov	sp, r7
    269c:	b012      	add	sp, #72	; 0x48
    269e:	bd80      	pop	{r7, pc}
    26a0:	0000220d 	.word	0x0000220d
    26a4:	2000461c 	.word	0x2000461c
    26a8:	00002231 	.word	0x00002231
    26ac:	00002189 	.word	0x00002189
    26b0:	000c0002 	.word	0x000c0002
    26b4:	000d0002 	.word	0x000d0002
    26b8:	000f0002 	.word	0x000f0002
    26bc:	00b71b00 	.word	0x00b71b00
    26c0:	42001000 	.word	0x42001000
    26c4:	20004620 	.word	0x20004620
    26c8:	00008a19 	.word	0x00008a19
    26cc:	00002295 	.word	0x00002295
    26d0:	00001ec1 	.word	0x00001ec1
    26d4:	00001f05 	.word	0x00001f05

000026d8 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
    26d8:	b590      	push	{r4, r7, lr}
    26da:	b085      	sub	sp, #20
    26dc:	af00      	add	r7, sp, #0
    26de:	0002      	movs	r2, r0
    26e0:	6039      	str	r1, [r7, #0]
    26e2:	1dfb      	adds	r3, r7, #7
    26e4:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
    26e6:	230f      	movs	r3, #15
    26e8:	18fb      	adds	r3, r7, r3
    26ea:	2200      	movs	r2, #0
    26ec:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
    26ee:	1dfb      	adds	r3, r7, #7
    26f0:	781b      	ldrb	r3, [r3, #0]
    26f2:	2b03      	cmp	r3, #3
    26f4:	d10f      	bne.n	2716 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
    26f6:	683b      	ldr	r3, [r7, #0]
    26f8:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
    26fa:	68bb      	ldr	r3, [r7, #8]
    26fc:	6818      	ldr	r0, [r3, #0]
    26fe:	68bb      	ldr	r3, [r7, #8]
    2700:	6859      	ldr	r1, [r3, #4]
    2702:	68bb      	ldr	r3, [r7, #8]
    2704:	891b      	ldrh	r3, [r3, #8]
    2706:	220f      	movs	r2, #15
    2708:	18bc      	adds	r4, r7, r2
    270a:	001a      	movs	r2, r3
    270c:	4b0f      	ldr	r3, [pc, #60]	; (274c <nm_bus_ioctl+0x74>)
    270e:	4798      	blx	r3
    2710:	0003      	movs	r3, r0
    2712:	7023      	strb	r3, [r4, #0]
		}
		break;
    2714:	e012      	b.n	273c <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
    2716:	230f      	movs	r3, #15
    2718:	18fb      	adds	r3, r7, r3
    271a:	22ff      	movs	r2, #255	; 0xff
    271c:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
    271e:	2386      	movs	r3, #134	; 0x86
    2720:	005a      	lsls	r2, r3, #1
    2722:	490b      	ldr	r1, [pc, #44]	; (2750 <nm_bus_ioctl+0x78>)
    2724:	4b0b      	ldr	r3, [pc, #44]	; (2754 <nm_bus_ioctl+0x7c>)
    2726:	0018      	movs	r0, r3
    2728:	4b0b      	ldr	r3, [pc, #44]	; (2758 <nm_bus_ioctl+0x80>)
    272a:	4798      	blx	r3
    272c:	4b0b      	ldr	r3, [pc, #44]	; (275c <nm_bus_ioctl+0x84>)
    272e:	0018      	movs	r0, r3
    2730:	4b0b      	ldr	r3, [pc, #44]	; (2760 <nm_bus_ioctl+0x88>)
    2732:	4798      	blx	r3
    2734:	200d      	movs	r0, #13
    2736:	4b0b      	ldr	r3, [pc, #44]	; (2764 <nm_bus_ioctl+0x8c>)
    2738:	4798      	blx	r3
			break;
    273a:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
    273c:	230f      	movs	r3, #15
    273e:	18fb      	adds	r3, r7, r3
    2740:	781b      	ldrb	r3, [r3, #0]
    2742:	b25b      	sxtb	r3, r3
}
    2744:	0018      	movs	r0, r3
    2746:	46bd      	mov	sp, r7
    2748:	b005      	add	sp, #20
    274a:	bd90      	pop	{r4, r7, pc}
    274c:	00002489 	.word	0x00002489
    2750:	00011380 	.word	0x00011380
    2754:	00011358 	.word	0x00011358
    2758:	000100d1 	.word	0x000100d1
    275c:	0001136c 	.word	0x0001136c
    2760:	000101f1 	.word	0x000101f1
    2764:	00010105 	.word	0x00010105

00002768 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
    2768:	b580      	push	{r7, lr}
    276a:	b082      	sub	sp, #8
    276c:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
    276e:	1dfb      	adds	r3, r7, #7
    2770:	2200      	movs	r2, #0
    2772:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
    2774:	1d3b      	adds	r3, r7, #4
    2776:	0018      	movs	r0, r3
    2778:	4b09      	ldr	r3, [pc, #36]	; (27a0 <nm_bus_deinit+0x38>)
    277a:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    277c:	1d3b      	adds	r3, r7, #4
    277e:	2200      	movs	r2, #0
    2780:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
    2782:	1d3b      	adds	r3, r7, #4
    2784:	2200      	movs	r2, #0
    2786:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);	
    2788:	4b06      	ldr	r3, [pc, #24]	; (27a4 <nm_bus_deinit+0x3c>)
    278a:	0018      	movs	r0, r3
    278c:	4b06      	ldr	r3, [pc, #24]	; (27a8 <nm_bus_deinit+0x40>)
    278e:	4798      	blx	r3

#endif /* CONF_WINC_USE_SPI */
	return result;
    2790:	1dfb      	adds	r3, r7, #7
    2792:	781b      	ldrb	r3, [r3, #0]
    2794:	b25b      	sxtb	r3, r3
}
    2796:	0018      	movs	r0, r3
    2798:	46bd      	mov	sp, r7
    279a:	b002      	add	sp, #8
    279c:	bd80      	pop	{r7, pc}
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	000020f1 	.word	0x000020f1
    27a4:	20004620 	.word	0x20004620
    27a8:	000022e5 	.word	0x000022e5

000027ac <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
    27ac:	b580      	push	{r7, lr}
    27ae:	b084      	sub	sp, #16
    27b0:	af00      	add	r7, sp, #0
    27b2:	60f8      	str	r0, [r7, #12]
    27b4:	60b9      	str	r1, [r7, #8]
    27b6:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
    27b8:	687b      	ldr	r3, [r7, #4]
    27ba:	2b00      	cmp	r3, #0
    27bc:	d010      	beq.n	27e0 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
    27be:	68bb      	ldr	r3, [r7, #8]
    27c0:	781a      	ldrb	r2, [r3, #0]
    27c2:	68fb      	ldr	r3, [r7, #12]
    27c4:	701a      	strb	r2, [r3, #0]
		pDst++;
    27c6:	68fb      	ldr	r3, [r7, #12]
    27c8:	3301      	adds	r3, #1
    27ca:	60fb      	str	r3, [r7, #12]
		pSrc++;
    27cc:	68bb      	ldr	r3, [r7, #8]
    27ce:	3301      	adds	r3, #1
    27d0:	60bb      	str	r3, [r7, #8]
	}while(--sz);
    27d2:	687b      	ldr	r3, [r7, #4]
    27d4:	3b01      	subs	r3, #1
    27d6:	607b      	str	r3, [r7, #4]
    27d8:	687b      	ldr	r3, [r7, #4]
    27da:	2b00      	cmp	r3, #0
    27dc:	d1ef      	bne.n	27be <m2m_memcpy+0x12>
    27de:	e000      	b.n	27e2 <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
    27e0:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
    27e2:	46bd      	mov	sp, r7
    27e4:	b004      	add	sp, #16
    27e6:	bd80      	pop	{r7, pc}

000027e8 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
    27e8:	b580      	push	{r7, lr}
    27ea:	b084      	sub	sp, #16
    27ec:	af00      	add	r7, sp, #0
    27ee:	60f8      	str	r0, [r7, #12]
    27f0:	607a      	str	r2, [r7, #4]
    27f2:	230b      	movs	r3, #11
    27f4:	18fb      	adds	r3, r7, r3
    27f6:	1c0a      	adds	r2, r1, #0
    27f8:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
    27fa:	687b      	ldr	r3, [r7, #4]
    27fc:	2b00      	cmp	r3, #0
    27fe:	d00e      	beq.n	281e <m2m_memset+0x36>
	do
	{
		*pBuf = val;
    2800:	68fb      	ldr	r3, [r7, #12]
    2802:	220b      	movs	r2, #11
    2804:	18ba      	adds	r2, r7, r2
    2806:	7812      	ldrb	r2, [r2, #0]
    2808:	701a      	strb	r2, [r3, #0]
		pBuf++;
    280a:	68fb      	ldr	r3, [r7, #12]
    280c:	3301      	adds	r3, #1
    280e:	60fb      	str	r3, [r7, #12]
	}while(--sz);
    2810:	687b      	ldr	r3, [r7, #4]
    2812:	3b01      	subs	r3, #1
    2814:	607b      	str	r3, [r7, #4]
    2816:	687b      	ldr	r3, [r7, #4]
    2818:	2b00      	cmp	r3, #0
    281a:	d1f1      	bne.n	2800 <m2m_memset+0x18>
    281c:	e000      	b.n	2820 <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
    281e:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
    2820:	46bd      	mov	sp, r7
    2822:	b004      	add	sp, #16
    2824:	bd80      	pop	{r7, pc}
    2826:	46c0      	nop			; (mov r8, r8)

00002828 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
    2828:	b580      	push	{r7, lr}
    282a:	b084      	sub	sp, #16
    282c:	af00      	add	r7, sp, #0
    282e:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
    2830:	230e      	movs	r3, #14
    2832:	18fb      	adds	r3, r7, r3
    2834:	2200      	movs	r2, #0
    2836:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
    2838:	e009      	b.n	284e <m2m_strlen+0x26>
	{
		u16StrLen ++;
    283a:	230e      	movs	r3, #14
    283c:	18fb      	adds	r3, r7, r3
    283e:	881a      	ldrh	r2, [r3, #0]
    2840:	230e      	movs	r3, #14
    2842:	18fb      	adds	r3, r7, r3
    2844:	3201      	adds	r2, #1
    2846:	801a      	strh	r2, [r3, #0]
		pcStr++;
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	3301      	adds	r3, #1
    284c:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	781b      	ldrb	r3, [r3, #0]
    2852:	2b00      	cmp	r3, #0
    2854:	d1f1      	bne.n	283a <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
    2856:	230e      	movs	r3, #14
    2858:	18fb      	adds	r3, r7, r3
    285a:	881b      	ldrh	r3, [r3, #0]
}
    285c:	0018      	movs	r0, r3
    285e:	46bd      	mov	sp, r7
    2860:	b004      	add	sp, #16
    2862:	bd80      	pop	{r7, pc}

00002864 <m2m_strncmp>:

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    2864:	b580      	push	{r7, lr}
    2866:	b084      	sub	sp, #16
    2868:	af00      	add	r7, sp, #0
    286a:	60f8      	str	r0, [r7, #12]
    286c:	60b9      	str	r1, [r7, #8]
    286e:	1dbb      	adds	r3, r7, #6
    2870:	801a      	strh	r2, [r3, #0]
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    2872:	e020      	b.n	28b6 <m2m_strncmp+0x52>
	if (*pcS1 != *pcS2)
    2874:	68fb      	ldr	r3, [r7, #12]
    2876:	781a      	ldrb	r2, [r3, #0]
    2878:	68bb      	ldr	r3, [r7, #8]
    287a:	781b      	ldrb	r3, [r3, #0]
    287c:	429a      	cmp	r2, r3
    287e:	d009      	beq.n	2894 <m2m_strncmp+0x30>
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
    2880:	68fb      	ldr	r3, [r7, #12]
    2882:	781a      	ldrb	r2, [r3, #0]
    2884:	68bb      	ldr	r3, [r7, #8]
    2886:	781b      	ldrb	r3, [r3, #0]
    2888:	429a      	cmp	r2, r3
    288a:	d201      	bcs.n	2890 <m2m_strncmp+0x2c>
    288c:	23ff      	movs	r3, #255	; 0xff
    288e:	e017      	b.n	28c0 <m2m_strncmp+0x5c>
    2890:	2301      	movs	r3, #1
    2892:	e015      	b.n	28c0 <m2m_strncmp+0x5c>
	else if (*pcS1 == '\0')
    2894:	68fb      	ldr	r3, [r7, #12]
    2896:	781b      	ldrb	r3, [r3, #0]
    2898:	2b00      	cmp	r3, #0
    289a:	d101      	bne.n	28a0 <m2m_strncmp+0x3c>
	    return 0;
    289c:	2300      	movs	r3, #0
    289e:	e00f      	b.n	28c0 <m2m_strncmp+0x5c>
	return u16StrLen;
}

uint8 m2m_strncmp(uint8 *pcS1, uint8 *pcS2, uint16 u16Len)
{
    for ( ; u16Len > 0; pcS1++, pcS2++, --u16Len)
    28a0:	68fb      	ldr	r3, [r7, #12]
    28a2:	3301      	adds	r3, #1
    28a4:	60fb      	str	r3, [r7, #12]
    28a6:	68bb      	ldr	r3, [r7, #8]
    28a8:	3301      	adds	r3, #1
    28aa:	60bb      	str	r3, [r7, #8]
    28ac:	1dbb      	adds	r3, r7, #6
    28ae:	1dba      	adds	r2, r7, #6
    28b0:	8812      	ldrh	r2, [r2, #0]
    28b2:	3a01      	subs	r2, #1
    28b4:	801a      	strh	r2, [r3, #0]
    28b6:	1dbb      	adds	r3, r7, #6
    28b8:	881b      	ldrh	r3, [r3, #0]
    28ba:	2b00      	cmp	r3, #0
    28bc:	d1da      	bne.n	2874 <m2m_strncmp+0x10>
	if (*pcS1 != *pcS2)
	    return ((*(uint8 *)pcS1 < *(uint8 *)pcS2) ? -1 : +1);
	else if (*pcS1 == '\0')
	    return 0;
    return 0;
    28be:	2300      	movs	r3, #0
}
    28c0:	0018      	movs	r0, r3
    28c2:	46bd      	mov	sp, r7
    28c4:	b004      	add	sp, #16
    28c6:	bd80      	pop	{r7, pc}

000028c8 <m2m_strstr>:
/* Finds the occurance of pcStr in pcIn.
If pcStr is part of pcIn it returns a valid pointer to the start of pcStr within pcIn.
Otherwise a NULL Pointer is returned.
*/
uint8 * m2m_strstr(uint8 *pcIn, uint8 *pcStr)
{
    28c8:	b590      	push	{r4, r7, lr}
    28ca:	b085      	sub	sp, #20
    28cc:	af00      	add	r7, sp, #0
    28ce:	6078      	str	r0, [r7, #4]
    28d0:	6039      	str	r1, [r7, #0]
    uint8 u8c;
    uint16 u16StrLen;

    u8c = *pcStr++;
    28d2:	683b      	ldr	r3, [r7, #0]
    28d4:	1c5a      	adds	r2, r3, #1
    28d6:	603a      	str	r2, [r7, #0]
    28d8:	220f      	movs	r2, #15
    28da:	18ba      	adds	r2, r7, r2
    28dc:	781b      	ldrb	r3, [r3, #0]
    28de:	7013      	strb	r3, [r2, #0]
    if (!u8c)
    28e0:	230f      	movs	r3, #15
    28e2:	18fb      	adds	r3, r7, r3
    28e4:	781b      	ldrb	r3, [r3, #0]
    28e6:	2b00      	cmp	r3, #0
    28e8:	d101      	bne.n	28ee <m2m_strstr+0x26>
        return (uint8 *) pcIn;	// Trivial empty string case
    28ea:	687b      	ldr	r3, [r7, #4]
    28ec:	e029      	b.n	2942 <m2m_strstr+0x7a>

    u16StrLen = m2m_strlen(pcStr);
    28ee:	230c      	movs	r3, #12
    28f0:	18fc      	adds	r4, r7, r3
    28f2:	683b      	ldr	r3, [r7, #0]
    28f4:	0018      	movs	r0, r3
    28f6:	4b15      	ldr	r3, [pc, #84]	; (294c <m2m_strstr+0x84>)
    28f8:	4798      	blx	r3
    28fa:	0003      	movs	r3, r0
    28fc:	8023      	strh	r3, [r4, #0]
    do {
        uint8 u8Sc;

        do {
            u8Sc = *pcIn++;
    28fe:	687b      	ldr	r3, [r7, #4]
    2900:	1c5a      	adds	r2, r3, #1
    2902:	607a      	str	r2, [r7, #4]
    2904:	220b      	movs	r2, #11
    2906:	18ba      	adds	r2, r7, r2
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	7013      	strb	r3, [r2, #0]
            if (!u8Sc)
    290c:	230b      	movs	r3, #11
    290e:	18fb      	adds	r3, r7, r3
    2910:	781b      	ldrb	r3, [r3, #0]
    2912:	2b00      	cmp	r3, #0
    2914:	d101      	bne.n	291a <m2m_strstr+0x52>
                return (uint8 *) 0;
    2916:	2300      	movs	r3, #0
    2918:	e013      	b.n	2942 <m2m_strstr+0x7a>
        } while (u8Sc != u8c);
    291a:	230b      	movs	r3, #11
    291c:	18fa      	adds	r2, r7, r3
    291e:	230f      	movs	r3, #15
    2920:	18fb      	adds	r3, r7, r3
    2922:	7812      	ldrb	r2, [r2, #0]
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	429a      	cmp	r2, r3
    2928:	d1e9      	bne.n	28fe <m2m_strstr+0x36>
    } while (m2m_strncmp(pcIn, pcStr, u16StrLen) != 0);
    292a:	230c      	movs	r3, #12
    292c:	18fb      	adds	r3, r7, r3
    292e:	881a      	ldrh	r2, [r3, #0]
    2930:	6839      	ldr	r1, [r7, #0]
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	0018      	movs	r0, r3
    2936:	4b06      	ldr	r3, [pc, #24]	; (2950 <m2m_strstr+0x88>)
    2938:	4798      	blx	r3
    293a:	1e03      	subs	r3, r0, #0
    293c:	d1df      	bne.n	28fe <m2m_strstr+0x36>

    return (uint8 *) (pcIn - 1);
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	3b01      	subs	r3, #1
}
    2942:	0018      	movs	r0, r3
    2944:	46bd      	mov	sp, r7
    2946:	b005      	add	sp, #20
    2948:	bd90      	pop	{r4, r7, pc}
    294a:	46c0      	nop			; (mov r8, r8)
    294c:	00002829 	.word	0x00002829
    2950:	00002865 	.word	0x00002865

00002954 <isr>:
tpfHifCallBack pfSigmaCb = NULL;
tpfHifCallBack pfHifCb = NULL;
tpfHifCallBack pfCryptoCb = NULL;

static void isr(void)
{
    2954:	b580      	push	{r7, lr}
    2956:	af00      	add	r7, sp, #0
	gu8Interrupt++;
    2958:	4b04      	ldr	r3, [pc, #16]	; (296c <isr+0x18>)
    295a:	781b      	ldrb	r3, [r3, #0]
    295c:	b2db      	uxtb	r3, r3
    295e:	3301      	adds	r3, #1
    2960:	b2da      	uxtb	r2, r3
    2962:	4b02      	ldr	r3, [pc, #8]	; (296c <isr+0x18>)
    2964:	701a      	strb	r2, [r3, #0]
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	46bd      	mov	sp, r7
    296a:	bd80      	pop	{r7, pc}
    296c:	200000c3 	.word	0x200000c3

00002970 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
    2970:	b590      	push	{r4, r7, lr}
    2972:	b083      	sub	sp, #12
    2974:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
    2976:	1dfb      	adds	r3, r7, #7
    2978:	2200      	movs	r2, #0
    297a:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
    297c:	2001      	movs	r0, #1
    297e:	4b13      	ldr	r3, [pc, #76]	; (29cc <hif_set_rx_done+0x5c>)
    2980:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    2982:	1dfc      	adds	r4, r7, #7
    2984:	003b      	movs	r3, r7
    2986:	4a12      	ldr	r2, [pc, #72]	; (29d0 <hif_set_rx_done+0x60>)
    2988:	0019      	movs	r1, r3
    298a:	0010      	movs	r0, r2
    298c:	4b11      	ldr	r3, [pc, #68]	; (29d4 <hif_set_rx_done+0x64>)
    298e:	4798      	blx	r3
    2990:	0003      	movs	r3, r0
    2992:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    2994:	1dfb      	adds	r3, r7, #7
    2996:	781b      	ldrb	r3, [r3, #0]
    2998:	b25b      	sxtb	r3, r3
    299a:	2b00      	cmp	r3, #0
    299c:	d10d      	bne.n	29ba <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
    299e:	683b      	ldr	r3, [r7, #0]
    29a0:	2202      	movs	r2, #2
    29a2:	4313      	orrs	r3, r2
    29a4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    29a6:	683b      	ldr	r3, [r7, #0]
    29a8:	1dfc      	adds	r4, r7, #7
    29aa:	4a09      	ldr	r2, [pc, #36]	; (29d0 <hif_set_rx_done+0x60>)
    29ac:	0019      	movs	r1, r3
    29ae:	0010      	movs	r0, r2
    29b0:	4b09      	ldr	r3, [pc, #36]	; (29d8 <hif_set_rx_done+0x68>)
    29b2:	4798      	blx	r3
    29b4:	0003      	movs	r3, r0
    29b6:	7023      	strb	r3, [r4, #0]
    29b8:	e000      	b.n	29bc <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    29ba:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
    29bc:	1dfb      	adds	r3, r7, #7
    29be:	781b      	ldrb	r3, [r3, #0]
    29c0:	b25b      	sxtb	r3, r3

}
    29c2:	0018      	movs	r0, r3
    29c4:	46bd      	mov	sp, r7
    29c6:	b003      	add	sp, #12
    29c8:	bd90      	pop	{r4, r7, pc}
    29ca:	46c0      	nop			; (mov r8, r8)
    29cc:	00001fd9 	.word	0x00001fd9
    29d0:	00001070 	.word	0x00001070
    29d4:	00004b05 	.word	0x00004b05
    29d8:	00004b29 	.word	0x00004b29

000029dc <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    29dc:	b580      	push	{r7, lr}
    29de:	b082      	sub	sp, #8
    29e0:	af00      	add	r7, sp, #0
    29e2:	603a      	str	r2, [r7, #0]
    29e4:	1dfb      	adds	r3, r7, #7
    29e6:	1c02      	adds	r2, r0, #0
    29e8:	701a      	strb	r2, [r3, #0]
    29ea:	1d3b      	adds	r3, r7, #4
    29ec:	1c0a      	adds	r2, r1, #0
    29ee:	801a      	strh	r2, [r3, #0]


}
    29f0:	46c0      	nop			; (mov r8, r8)
    29f2:	46bd      	mov	sp, r7
    29f4:	b002      	add	sp, #8
    29f6:	bd80      	pop	{r7, pc}

000029f8 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
    29f8:	b590      	push	{r4, r7, lr}
    29fa:	b083      	sub	sp, #12
    29fc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    29fe:	1dfb      	adds	r3, r7, #7
    2a00:	2200      	movs	r2, #0
    2a02:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
    2a04:	4b1c      	ldr	r3, [pc, #112]	; (2a78 <hif_chip_wake+0x80>)
    2a06:	781b      	ldrb	r3, [r3, #0]
    2a08:	b2db      	uxtb	r3, r3
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d121      	bne.n	2a52 <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    2a0e:	4b1b      	ldr	r3, [pc, #108]	; (2a7c <hif_chip_wake+0x84>)
    2a10:	781b      	ldrb	r3, [r3, #0]
    2a12:	b2db      	uxtb	r3, r3
    2a14:	2b03      	cmp	r3, #3
    2a16:	d004      	beq.n	2a22 <hif_chip_wake+0x2a>
    2a18:	4b18      	ldr	r3, [pc, #96]	; (2a7c <hif_chip_wake+0x84>)
    2a1a:	781b      	ldrb	r3, [r3, #0]
    2a1c:	b2db      	uxtb	r3, r3
    2a1e:	2b04      	cmp	r3, #4
    2a20:	d117      	bne.n	2a52 <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
    2a22:	1dfc      	adds	r4, r7, #7
    2a24:	4b16      	ldr	r3, [pc, #88]	; (2a80 <hif_chip_wake+0x88>)
    2a26:	4798      	blx	r3
    2a28:	0003      	movs	r3, r0
    2a2a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    2a2c:	1dfb      	adds	r3, r7, #7
    2a2e:	781b      	ldrb	r3, [r3, #0]
    2a30:	b25b      	sxtb	r3, r3
    2a32:	2b00      	cmp	r3, #0
    2a34:	d115      	bne.n	2a62 <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
    2a36:	1dfc      	adds	r4, r7, #7
    2a38:	4a12      	ldr	r2, [pc, #72]	; (2a84 <hif_chip_wake+0x8c>)
    2a3a:	4b13      	ldr	r3, [pc, #76]	; (2a88 <hif_chip_wake+0x90>)
    2a3c:	0011      	movs	r1, r2
    2a3e:	0018      	movs	r0, r3
    2a40:	4b12      	ldr	r3, [pc, #72]	; (2a8c <hif_chip_wake+0x94>)
    2a42:	4798      	blx	r3
    2a44:	0003      	movs	r3, r0
    2a46:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    2a48:	1dfb      	adds	r3, r7, #7
    2a4a:	781b      	ldrb	r3, [r3, #0]
    2a4c:	b25b      	sxtb	r3, r3
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d109      	bne.n	2a66 <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
    2a52:	4b09      	ldr	r3, [pc, #36]	; (2a78 <hif_chip_wake+0x80>)
    2a54:	781b      	ldrb	r3, [r3, #0]
    2a56:	b2db      	uxtb	r3, r3
    2a58:	3301      	adds	r3, #1
    2a5a:	b2da      	uxtb	r2, r3
    2a5c:	4b06      	ldr	r3, [pc, #24]	; (2a78 <hif_chip_wake+0x80>)
    2a5e:	701a      	strb	r2, [r3, #0]
    2a60:	e002      	b.n	2a68 <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
    2a62:	46c0      	nop			; (mov r8, r8)
    2a64:	e000      	b.n	2a68 <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    2a66:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
    2a68:	1dfb      	adds	r3, r7, #7
    2a6a:	781b      	ldrb	r3, [r3, #0]
    2a6c:	b25b      	sxtb	r3, r3
}
    2a6e:	0018      	movs	r0, r3
    2a70:	46bd      	mov	sp, r7
    2a72:	b003      	add	sp, #12
    2a74:	bd90      	pop	{r4, r7, pc}
    2a76:	46c0      	nop			; (mov r8, r8)
    2a78:	200000c1 	.word	0x200000c1
    2a7c:	200000c0 	.word	0x200000c0
    2a80:	000041d9 	.word	0x000041d9
    2a84:	00005678 	.word	0x00005678
    2a88:	00001074 	.word	0x00001074
    2a8c:	00004b29 	.word	0x00004b29

00002a90 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
    2a90:	b590      	push	{r4, r7, lr}
    2a92:	b083      	sub	sp, #12
    2a94:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    2a96:	1dfb      	adds	r3, r7, #7
    2a98:	2200      	movs	r2, #0
    2a9a:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
    2a9c:	4b29      	ldr	r3, [pc, #164]	; (2b44 <hif_chip_sleep+0xb4>)
    2a9e:	781b      	ldrb	r3, [r3, #0]
    2aa0:	b2db      	uxtb	r3, r3
    2aa2:	2b00      	cmp	r3, #0
    2aa4:	d006      	beq.n	2ab4 <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
    2aa6:	4b27      	ldr	r3, [pc, #156]	; (2b44 <hif_chip_sleep+0xb4>)
    2aa8:	781b      	ldrb	r3, [r3, #0]
    2aaa:	b2db      	uxtb	r3, r3
    2aac:	3b01      	subs	r3, #1
    2aae:	b2da      	uxtb	r2, r3
    2ab0:	4b24      	ldr	r3, [pc, #144]	; (2b44 <hif_chip_sleep+0xb4>)
    2ab2:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
    2ab4:	4b23      	ldr	r3, [pc, #140]	; (2b44 <hif_chip_sleep+0xb4>)
    2ab6:	781b      	ldrb	r3, [r3, #0]
    2ab8:	b2db      	uxtb	r3, r3
    2aba:	2b00      	cmp	r3, #0
    2abc:	d13a      	bne.n	2b34 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
    2abe:	4b22      	ldr	r3, [pc, #136]	; (2b48 <hif_chip_sleep+0xb8>)
    2ac0:	781b      	ldrb	r3, [r3, #0]
    2ac2:	b2db      	uxtb	r3, r3
    2ac4:	2b03      	cmp	r3, #3
    2ac6:	d004      	beq.n	2ad2 <hif_chip_sleep+0x42>
    2ac8:	4b1f      	ldr	r3, [pc, #124]	; (2b48 <hif_chip_sleep+0xb8>)
    2aca:	781b      	ldrb	r3, [r3, #0]
    2acc:	b2db      	uxtb	r3, r3
    2ace:	2b04      	cmp	r3, #4
    2ad0:	d130      	bne.n	2b34 <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
    2ad2:	2300      	movs	r3, #0
    2ad4:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
    2ad6:	1dfc      	adds	r4, r7, #7
    2ad8:	4a1c      	ldr	r2, [pc, #112]	; (2b4c <hif_chip_sleep+0xbc>)
    2ada:	4b1d      	ldr	r3, [pc, #116]	; (2b50 <hif_chip_sleep+0xc0>)
    2adc:	0011      	movs	r1, r2
    2ade:	0018      	movs	r0, r3
    2ae0:	4b1c      	ldr	r3, [pc, #112]	; (2b54 <hif_chip_sleep+0xc4>)
    2ae2:	4798      	blx	r3
    2ae4:	0003      	movs	r3, r0
    2ae6:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    2ae8:	1dfb      	adds	r3, r7, #7
    2aea:	781b      	ldrb	r3, [r3, #0]
    2aec:	b25b      	sxtb	r3, r3
    2aee:	2b00      	cmp	r3, #0
    2af0:	d11d      	bne.n	2b2e <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
    2af2:	1dfc      	adds	r4, r7, #7
    2af4:	003b      	movs	r3, r7
    2af6:	0019      	movs	r1, r3
    2af8:	2001      	movs	r0, #1
    2afa:	4b17      	ldr	r3, [pc, #92]	; (2b58 <hif_chip_sleep+0xc8>)
    2afc:	4798      	blx	r3
    2afe:	0003      	movs	r3, r0
    2b00:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
    2b02:	1dfb      	adds	r3, r7, #7
    2b04:	781b      	ldrb	r3, [r3, #0]
    2b06:	b25b      	sxtb	r3, r3
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d112      	bne.n	2b32 <hif_chip_sleep+0xa2>
			if(reg&0x2)
    2b0c:	683b      	ldr	r3, [r7, #0]
    2b0e:	2202      	movs	r2, #2
    2b10:	4013      	ands	r3, r2
    2b12:	d00f      	beq.n	2b34 <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
    2b14:	683b      	ldr	r3, [r7, #0]
    2b16:	2202      	movs	r2, #2
    2b18:	4393      	bics	r3, r2
    2b1a:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
    2b1c:	683b      	ldr	r3, [r7, #0]
    2b1e:	1dfc      	adds	r4, r7, #7
    2b20:	0019      	movs	r1, r3
    2b22:	2001      	movs	r0, #1
    2b24:	4b0b      	ldr	r3, [pc, #44]	; (2b54 <hif_chip_sleep+0xc4>)
    2b26:	4798      	blx	r3
    2b28:	0003      	movs	r3, r0
    2b2a:	7023      	strb	r3, [r4, #0]
    2b2c:	e002      	b.n	2b34 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
    2b2e:	46c0      	nop			; (mov r8, r8)
    2b30:	e000      	b.n	2b34 <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
    2b32:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
    2b34:	1dfb      	adds	r3, r7, #7
    2b36:	781b      	ldrb	r3, [r3, #0]
    2b38:	b25b      	sxtb	r3, r3
}
    2b3a:	0018      	movs	r0, r3
    2b3c:	46bd      	mov	sp, r7
    2b3e:	b003      	add	sp, #12
    2b40:	bd90      	pop	{r4, r7, pc}
    2b42:	46c0      	nop			; (mov r8, r8)
    2b44:	200000c1 	.word	0x200000c1
    2b48:	200000c0 	.word	0x200000c0
    2b4c:	00004321 	.word	0x00004321
    2b50:	00001074 	.word	0x00001074
    2b54:	00004b29 	.word	0x00004b29
    2b58:	00004b05 	.word	0x00004b05

00002b5c <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
    2b5c:	b580      	push	{r7, lr}
    2b5e:	b082      	sub	sp, #8
    2b60:	af00      	add	r7, sp, #0
    2b62:	6078      	str	r0, [r7, #4]
	pfWifiCb = NULL;
    2b64:	4b0e      	ldr	r3, [pc, #56]	; (2ba0 <hif_init+0x44>)
    2b66:	2200      	movs	r2, #0
    2b68:	601a      	str	r2, [r3, #0]
	pfIpCb = NULL;
    2b6a:	4b0e      	ldr	r3, [pc, #56]	; (2ba4 <hif_init+0x48>)
    2b6c:	2200      	movs	r2, #0
    2b6e:	601a      	str	r2, [r3, #0]

	gu8ChipSleep = 0;
    2b70:	4b0d      	ldr	r3, [pc, #52]	; (2ba8 <hif_init+0x4c>)
    2b72:	2200      	movs	r2, #0
    2b74:	701a      	strb	r2, [r3, #0]
	gu8ChipMode = M2M_NO_PS;
    2b76:	4b0d      	ldr	r3, [pc, #52]	; (2bac <hif_init+0x50>)
    2b78:	2200      	movs	r2, #0
    2b7a:	701a      	strb	r2, [r3, #0]

	gu8Interrupt = 0;
    2b7c:	4b0c      	ldr	r3, [pc, #48]	; (2bb0 <hif_init+0x54>)
    2b7e:	2200      	movs	r2, #0
    2b80:	701a      	strb	r2, [r3, #0]
	nm_bsp_register_isr(isr);
    2b82:	4b0c      	ldr	r3, [pc, #48]	; (2bb4 <hif_init+0x58>)
    2b84:	0018      	movs	r0, r3
    2b86:	4b0c      	ldr	r3, [pc, #48]	; (2bb8 <hif_init+0x5c>)
    2b88:	4798      	blx	r3

	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
    2b8a:	4b0c      	ldr	r3, [pc, #48]	; (2bbc <hif_init+0x60>)
    2b8c:	0019      	movs	r1, r3
    2b8e:	2003      	movs	r0, #3
    2b90:	4b0b      	ldr	r3, [pc, #44]	; (2bc0 <hif_init+0x64>)
    2b92:	4798      	blx	r3

	return M2M_SUCCESS;
    2b94:	2300      	movs	r3, #0
}
    2b96:	0018      	movs	r0, r3
    2b98:	46bd      	mov	sp, r7
    2b9a:	b002      	add	sp, #8
    2b9c:	bd80      	pop	{r7, pc}
    2b9e:	46c0      	nop			; (mov r8, r8)
    2ba0:	200000c4 	.word	0x200000c4
    2ba4:	200000c8 	.word	0x200000c8
    2ba8:	200000c1 	.word	0x200000c1
    2bac:	200000c0 	.word	0x200000c0
    2bb0:	200000c3 	.word	0x200000c3
    2bb4:	00002955 	.word	0x00002955
    2bb8:	00001f61 	.word	0x00001f61
    2bbc:	000029dd 	.word	0x000029dd
    2bc0:	0000359d 	.word	0x0000359d

00002bc4 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
    2bc4:	b590      	push	{r4, r7, lr}
    2bc6:	b089      	sub	sp, #36	; 0x24
    2bc8:	af00      	add	r7, sp, #0
    2bca:	0004      	movs	r4, r0
    2bcc:	0008      	movs	r0, r1
    2bce:	603a      	str	r2, [r7, #0]
    2bd0:	0019      	movs	r1, r3
    2bd2:	1dfb      	adds	r3, r7, #7
    2bd4:	1c22      	adds	r2, r4, #0
    2bd6:	701a      	strb	r2, [r3, #0]
    2bd8:	1dbb      	adds	r3, r7, #6
    2bda:	1c02      	adds	r2, r0, #0
    2bdc:	701a      	strb	r2, [r3, #0]
    2bde:	1d3b      	adds	r3, r7, #4
    2be0:	1c0a      	adds	r2, r1, #0
    2be2:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
    2be4:	231f      	movs	r3, #31
    2be6:	18fb      	adds	r3, r7, r3
    2be8:	22ff      	movs	r2, #255	; 0xff
    2bea:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
    2bec:	1dbb      	adds	r3, r7, #6
    2bee:	781b      	ldrb	r3, [r3, #0]
    2bf0:	227f      	movs	r2, #127	; 0x7f
    2bf2:	4013      	ands	r3, r2
    2bf4:	b2da      	uxtb	r2, r3
    2bf6:	2318      	movs	r3, #24
    2bf8:	18fb      	adds	r3, r7, r3
    2bfa:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
    2bfc:	2318      	movs	r3, #24
    2bfe:	18fb      	adds	r3, r7, r3
    2c00:	1dfa      	adds	r2, r7, #7
    2c02:	7812      	ldrb	r2, [r2, #0]
    2c04:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
    2c06:	2318      	movs	r3, #24
    2c08:	18fb      	adds	r3, r7, r3
    2c0a:	2208      	movs	r2, #8
    2c0c:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
    2c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2c10:	2b00      	cmp	r3, #0
    2c12:	d011      	beq.n	2c38 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
    2c14:	2318      	movs	r3, #24
    2c16:	18fb      	adds	r3, r7, r3
    2c18:	885b      	ldrh	r3, [r3, #2]
    2c1a:	b29a      	uxth	r2, r3
    2c1c:	2338      	movs	r3, #56	; 0x38
    2c1e:	18f9      	adds	r1, r7, r3
    2c20:	2334      	movs	r3, #52	; 0x34
    2c22:	18fb      	adds	r3, r7, r3
    2c24:	8809      	ldrh	r1, [r1, #0]
    2c26:	881b      	ldrh	r3, [r3, #0]
    2c28:	18cb      	adds	r3, r1, r3
    2c2a:	b29b      	uxth	r3, r3
    2c2c:	18d3      	adds	r3, r2, r3
    2c2e:	b29a      	uxth	r2, r3
    2c30:	2318      	movs	r3, #24
    2c32:	18fb      	adds	r3, r7, r3
    2c34:	805a      	strh	r2, [r3, #2]
    2c36:	e00a      	b.n	2c4e <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
    2c38:	2318      	movs	r3, #24
    2c3a:	18fb      	adds	r3, r7, r3
    2c3c:	885b      	ldrh	r3, [r3, #2]
    2c3e:	b29a      	uxth	r2, r3
    2c40:	1d3b      	adds	r3, r7, #4
    2c42:	881b      	ldrh	r3, [r3, #0]
    2c44:	18d3      	adds	r3, r2, r3
    2c46:	b29a      	uxth	r2, r3
    2c48:	2318      	movs	r3, #24
    2c4a:	18fb      	adds	r3, r7, r3
    2c4c:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
    2c4e:	231f      	movs	r3, #31
    2c50:	18fc      	adds	r4, r7, r3
    2c52:	4b9b      	ldr	r3, [pc, #620]	; (2ec0 <hif_send+0x2fc>)
    2c54:	4798      	blx	r3
    2c56:	0003      	movs	r3, r0
    2c58:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    2c5a:	231f      	movs	r3, #31
    2c5c:	18fb      	adds	r3, r7, r3
    2c5e:	781b      	ldrb	r3, [r3, #0]
    2c60:	b25b      	sxtb	r3, r3
    2c62:	2b00      	cmp	r3, #0
    2c64:	d000      	beq.n	2c68 <hif_send+0xa4>
    2c66:	e103      	b.n	2e70 <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
    2c68:	2300      	movs	r3, #0
    2c6a:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
    2c6c:	230e      	movs	r3, #14
    2c6e:	18fb      	adds	r3, r7, r3
    2c70:	2200      	movs	r2, #0
    2c72:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
    2c74:	2300      	movs	r3, #0
    2c76:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
    2c78:	1dfb      	adds	r3, r7, #7
    2c7a:	781a      	ldrb	r2, [r3, #0]
    2c7c:	697b      	ldr	r3, [r7, #20]
    2c7e:	4313      	orrs	r3, r2
    2c80:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
    2c82:	1dbb      	adds	r3, r7, #6
    2c84:	781b      	ldrb	r3, [r3, #0]
    2c86:	021a      	lsls	r2, r3, #8
    2c88:	697b      	ldr	r3, [r7, #20]
    2c8a:	4313      	orrs	r3, r2
    2c8c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
    2c8e:	2318      	movs	r3, #24
    2c90:	18fb      	adds	r3, r7, r3
    2c92:	885b      	ldrh	r3, [r3, #2]
    2c94:	b29b      	uxth	r3, r3
    2c96:	041a      	lsls	r2, r3, #16
    2c98:	697b      	ldr	r3, [r7, #20]
    2c9a:	4313      	orrs	r3, r2
    2c9c:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
    2c9e:	697b      	ldr	r3, [r7, #20]
    2ca0:	221f      	movs	r2, #31
    2ca2:	18bc      	adds	r4, r7, r2
    2ca4:	4a87      	ldr	r2, [pc, #540]	; (2ec4 <hif_send+0x300>)
    2ca6:	0019      	movs	r1, r3
    2ca8:	0010      	movs	r0, r2
    2caa:	4b87      	ldr	r3, [pc, #540]	; (2ec8 <hif_send+0x304>)
    2cac:	4798      	blx	r3
    2cae:	0003      	movs	r3, r0
    2cb0:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    2cb2:	231f      	movs	r3, #31
    2cb4:	18fb      	adds	r3, r7, r3
    2cb6:	781b      	ldrb	r3, [r3, #0]
    2cb8:	b25b      	sxtb	r3, r3
    2cba:	2b00      	cmp	r3, #0
    2cbc:	d000      	beq.n	2cc0 <hif_send+0xfc>
    2cbe:	e0ee      	b.n	2e9e <hif_send+0x2da>


		reg = 0;
    2cc0:	2300      	movs	r3, #0
    2cc2:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
    2cc4:	697b      	ldr	r3, [r7, #20]
    2cc6:	2202      	movs	r2, #2
    2cc8:	4313      	orrs	r3, r2
    2cca:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
    2ccc:	697b      	ldr	r3, [r7, #20]
    2cce:	221f      	movs	r2, #31
    2cd0:	18bc      	adds	r4, r7, r2
    2cd2:	4a7e      	ldr	r2, [pc, #504]	; (2ecc <hif_send+0x308>)
    2cd4:	0019      	movs	r1, r3
    2cd6:	0010      	movs	r0, r2
    2cd8:	4b7b      	ldr	r3, [pc, #492]	; (2ec8 <hif_send+0x304>)
    2cda:	4798      	blx	r3
    2cdc:	0003      	movs	r3, r0
    2cde:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
    2ce0:	231f      	movs	r3, #31
    2ce2:	18fb      	adds	r3, r7, r3
    2ce4:	781b      	ldrb	r3, [r3, #0]
    2ce6:	b25b      	sxtb	r3, r3
    2ce8:	2b00      	cmp	r3, #0
    2cea:	d000      	beq.n	2cee <hif_send+0x12a>
    2cec:	e0d9      	b.n	2ea2 <hif_send+0x2de>
		dma_addr = 0;
    2cee:	2300      	movs	r3, #0
    2cf0:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    2cf2:	230e      	movs	r3, #14
    2cf4:	18fb      	adds	r3, r7, r3
    2cf6:	2200      	movs	r2, #0
    2cf8:	801a      	strh	r2, [r3, #0]
    2cfa:	e031      	b.n	2d60 <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
    2cfc:	231f      	movs	r3, #31
    2cfe:	18fc      	adds	r4, r7, r3
    2d00:	2314      	movs	r3, #20
    2d02:	18fb      	adds	r3, r7, r3
    2d04:	4a71      	ldr	r2, [pc, #452]	; (2ecc <hif_send+0x308>)
    2d06:	0019      	movs	r1, r3
    2d08:	0010      	movs	r0, r2
    2d0a:	4b71      	ldr	r3, [pc, #452]	; (2ed0 <hif_send+0x30c>)
    2d0c:	4798      	blx	r3
    2d0e:	0003      	movs	r3, r0
    2d10:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
    2d12:	231f      	movs	r3, #31
    2d14:	18fb      	adds	r3, r7, r3
    2d16:	781b      	ldrb	r3, [r3, #0]
    2d18:	b25b      	sxtb	r3, r3
    2d1a:	2b00      	cmp	r3, #0
    2d1c:	d128      	bne.n	2d70 <hif_send+0x1ac>
			if (!(reg & 0x2))
    2d1e:	697b      	ldr	r3, [r7, #20]
    2d20:	2202      	movs	r2, #2
    2d22:	4013      	ands	r3, r2
    2d24:	d113      	bne.n	2d4e <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
    2d26:	231f      	movs	r3, #31
    2d28:	18fc      	adds	r4, r7, r3
    2d2a:	2310      	movs	r3, #16
    2d2c:	18fb      	adds	r3, r7, r3
    2d2e:	4a69      	ldr	r2, [pc, #420]	; (2ed4 <hif_send+0x310>)
    2d30:	0019      	movs	r1, r3
    2d32:	0010      	movs	r0, r2
    2d34:	4b66      	ldr	r3, [pc, #408]	; (2ed0 <hif_send+0x30c>)
    2d36:	4798      	blx	r3
    2d38:	0003      	movs	r3, r0
    2d3a:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
    2d3c:	231f      	movs	r3, #31
    2d3e:	18fb      	adds	r3, r7, r3
    2d40:	781b      	ldrb	r3, [r3, #0]
    2d42:	b25b      	sxtb	r3, r3
    2d44:	2b00      	cmp	r3, #0
    2d46:	d015      	beq.n	2d74 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
    2d48:	2300      	movs	r3, #0
    2d4a:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
    2d4c:	e012      	b.n	2d74 <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
    2d4e:	230e      	movs	r3, #14
    2d50:	18fb      	adds	r3, r7, r3
    2d52:	881b      	ldrh	r3, [r3, #0]
    2d54:	b29b      	uxth	r3, r3
    2d56:	3301      	adds	r3, #1
    2d58:	b29a      	uxth	r2, r3
    2d5a:	230e      	movs	r3, #14
    2d5c:	18fb      	adds	r3, r7, r3
    2d5e:	801a      	strh	r2, [r3, #0]
    2d60:	230e      	movs	r3, #14
    2d62:	18fb      	adds	r3, r7, r3
    2d64:	881b      	ldrh	r3, [r3, #0]
    2d66:	b29b      	uxth	r3, r3
    2d68:	4a5b      	ldr	r2, [pc, #364]	; (2ed8 <hif_send+0x314>)
    2d6a:	4293      	cmp	r3, r2
    2d6c:	d9c6      	bls.n	2cfc <hif_send+0x138>
    2d6e:	e002      	b.n	2d76 <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
    2d70:	46c0      	nop			; (mov r8, r8)
    2d72:	e000      	b.n	2d76 <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
    2d74:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
    2d76:	693b      	ldr	r3, [r7, #16]
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d100      	bne.n	2d7e <hif_send+0x1ba>
    2d7c:	e073      	b.n	2e66 <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
    2d7e:	693b      	ldr	r3, [r7, #16]
    2d80:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
    2d82:	2318      	movs	r3, #24
    2d84:	18fb      	adds	r3, r7, r3
    2d86:	885b      	ldrh	r3, [r3, #2]
    2d88:	b29a      	uxth	r2, r3
    2d8a:	2318      	movs	r3, #24
    2d8c:	18fb      	adds	r3, r7, r3
    2d8e:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
    2d90:	68bb      	ldr	r3, [r7, #8]
    2d92:	221f      	movs	r2, #31
    2d94:	18bc      	adds	r4, r7, r2
    2d96:	2218      	movs	r2, #24
    2d98:	18b9      	adds	r1, r7, r2
    2d9a:	2208      	movs	r2, #8
    2d9c:	0018      	movs	r0, r3
    2d9e:	4b4f      	ldr	r3, [pc, #316]	; (2edc <hif_send+0x318>)
    2da0:	4798      	blx	r3
    2da2:	0003      	movs	r3, r0
    2da4:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    2da6:	231f      	movs	r3, #31
    2da8:	18fb      	adds	r3, r7, r3
    2daa:	781b      	ldrb	r3, [r3, #0]
    2dac:	b25b      	sxtb	r3, r3
    2dae:	2b00      	cmp	r3, #0
    2db0:	d000      	beq.n	2db4 <hif_send+0x1f0>
    2db2:	e078      	b.n	2ea6 <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
    2db4:	68bb      	ldr	r3, [r7, #8]
    2db6:	3308      	adds	r3, #8
    2db8:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
    2dba:	683b      	ldr	r3, [r7, #0]
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d015      	beq.n	2dec <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
    2dc0:	68b8      	ldr	r0, [r7, #8]
    2dc2:	1d3b      	adds	r3, r7, #4
    2dc4:	881a      	ldrh	r2, [r3, #0]
    2dc6:	231f      	movs	r3, #31
    2dc8:	18fc      	adds	r4, r7, r3
    2dca:	683b      	ldr	r3, [r7, #0]
    2dcc:	0019      	movs	r1, r3
    2dce:	4b43      	ldr	r3, [pc, #268]	; (2edc <hif_send+0x318>)
    2dd0:	4798      	blx	r3
    2dd2:	0003      	movs	r3, r0
    2dd4:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    2dd6:	231f      	movs	r3, #31
    2dd8:	18fb      	adds	r3, r7, r3
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	b25b      	sxtb	r3, r3
    2dde:	2b00      	cmp	r3, #0
    2de0:	d163      	bne.n	2eaa <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
    2de2:	1d3b      	adds	r3, r7, #4
    2de4:	881a      	ldrh	r2, [r3, #0]
    2de6:	68bb      	ldr	r3, [r7, #8]
    2de8:	18d3      	adds	r3, r2, r3
    2dea:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
    2dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2dee:	2b00      	cmp	r3, #0
    2df0:	d021      	beq.n	2e36 <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
    2df2:	2338      	movs	r3, #56	; 0x38
    2df4:	18fb      	adds	r3, r7, r3
    2df6:	881a      	ldrh	r2, [r3, #0]
    2df8:	1d3b      	adds	r3, r7, #4
    2dfa:	881b      	ldrh	r3, [r3, #0]
    2dfc:	1ad3      	subs	r3, r2, r3
    2dfe:	001a      	movs	r2, r3
    2e00:	68bb      	ldr	r3, [r7, #8]
    2e02:	18d3      	adds	r3, r2, r3
    2e04:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
    2e06:	68b8      	ldr	r0, [r7, #8]
    2e08:	2334      	movs	r3, #52	; 0x34
    2e0a:	18fb      	adds	r3, r7, r3
    2e0c:	881a      	ldrh	r2, [r3, #0]
    2e0e:	231f      	movs	r3, #31
    2e10:	18fc      	adds	r4, r7, r3
    2e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    2e14:	0019      	movs	r1, r3
    2e16:	4b31      	ldr	r3, [pc, #196]	; (2edc <hif_send+0x318>)
    2e18:	4798      	blx	r3
    2e1a:	0003      	movs	r3, r0
    2e1c:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    2e1e:	231f      	movs	r3, #31
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	781b      	ldrb	r3, [r3, #0]
    2e24:	b25b      	sxtb	r3, r3
    2e26:	2b00      	cmp	r3, #0
    2e28:	d141      	bne.n	2eae <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
    2e2a:	2334      	movs	r3, #52	; 0x34
    2e2c:	18fb      	adds	r3, r7, r3
    2e2e:	881a      	ldrh	r2, [r3, #0]
    2e30:	68bb      	ldr	r3, [r7, #8]
    2e32:	18d3      	adds	r3, r2, r3
    2e34:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
    2e36:	693b      	ldr	r3, [r7, #16]
    2e38:	009b      	lsls	r3, r3, #2
    2e3a:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
    2e3c:	697b      	ldr	r3, [r7, #20]
    2e3e:	2202      	movs	r2, #2
    2e40:	4313      	orrs	r3, r2
    2e42:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
    2e44:	697b      	ldr	r3, [r7, #20]
    2e46:	221f      	movs	r2, #31
    2e48:	18bc      	adds	r4, r7, r2
    2e4a:	4a25      	ldr	r2, [pc, #148]	; (2ee0 <hif_send+0x31c>)
    2e4c:	0019      	movs	r1, r3
    2e4e:	0010      	movs	r0, r2
    2e50:	4b1d      	ldr	r3, [pc, #116]	; (2ec8 <hif_send+0x304>)
    2e52:	4798      	blx	r3
    2e54:	0003      	movs	r3, r0
    2e56:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    2e58:	231f      	movs	r3, #31
    2e5a:	18fb      	adds	r3, r7, r3
    2e5c:	781b      	ldrb	r3, [r3, #0]
    2e5e:	b25b      	sxtb	r3, r3
    2e60:	2b00      	cmp	r3, #0
    2e62:	d015      	beq.n	2e90 <hif_send+0x2cc>
    2e64:	e024      	b.n	2eb0 <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    2e66:	231f      	movs	r3, #31
    2e68:	18fb      	adds	r3, r7, r3
    2e6a:	22fd      	movs	r2, #253	; 0xfd
    2e6c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    2e6e:	e01f      	b.n	2eb0 <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    2e70:	23a0      	movs	r3, #160	; 0xa0
    2e72:	33ff      	adds	r3, #255	; 0xff
    2e74:	001a      	movs	r2, r3
    2e76:	491b      	ldr	r1, [pc, #108]	; (2ee4 <hif_send+0x320>)
    2e78:	4b1b      	ldr	r3, [pc, #108]	; (2ee8 <hif_send+0x324>)
    2e7a:	0018      	movs	r0, r3
    2e7c:	4b1b      	ldr	r3, [pc, #108]	; (2eec <hif_send+0x328>)
    2e7e:	4798      	blx	r3
    2e80:	4b1b      	ldr	r3, [pc, #108]	; (2ef0 <hif_send+0x32c>)
    2e82:	0018      	movs	r0, r3
    2e84:	4b1b      	ldr	r3, [pc, #108]	; (2ef4 <hif_send+0x330>)
    2e86:	4798      	blx	r3
    2e88:	200d      	movs	r0, #13
    2e8a:	4b1b      	ldr	r3, [pc, #108]	; (2ef8 <hif_send+0x334>)
    2e8c:	4798      	blx	r3
		goto ERR1;
    2e8e:	e00f      	b.n	2eb0 <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
    2e90:	231f      	movs	r3, #31
    2e92:	18fc      	adds	r4, r7, r3
    2e94:	4b19      	ldr	r3, [pc, #100]	; (2efc <hif_send+0x338>)
    2e96:	4798      	blx	r3
    2e98:	0003      	movs	r3, r0
    2e9a:	7023      	strb	r3, [r4, #0]
    2e9c:	e008      	b.n	2eb0 <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	e006      	b.n	2eb0 <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    2ea2:	46c0      	nop			; (mov r8, r8)
    2ea4:	e004      	b.n	2eb0 <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    2ea6:	46c0      	nop			; (mov r8, r8)
    2ea8:	e002      	b.n	2eb0 <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    2eaa:	46c0      	nop			; (mov r8, r8)
    2eac:	e000      	b.n	2eb0 <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    2eae:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    2eb0:	231f      	movs	r3, #31
    2eb2:	18fb      	adds	r3, r7, r3
    2eb4:	781b      	ldrb	r3, [r3, #0]
    2eb6:	b25b      	sxtb	r3, r3
}
    2eb8:	0018      	movs	r0, r3
    2eba:	46bd      	mov	sp, r7
    2ebc:	b009      	add	sp, #36	; 0x24
    2ebe:	bd90      	pop	{r4, r7, pc}
    2ec0:	000029f9 	.word	0x000029f9
    2ec4:	0000108c 	.word	0x0000108c
    2ec8:	00004b29 	.word	0x00004b29
    2ecc:	00001078 	.word	0x00001078
    2ed0:	00004b05 	.word	0x00004b05
    2ed4:	00150400 	.word	0x00150400
    2ed8:	000003e7 	.word	0x000003e7
    2edc:	00004c71 	.word	0x00004c71
    2ee0:	0000106c 	.word	0x0000106c
    2ee4:	000115f0 	.word	0x000115f0
    2ee8:	00011390 	.word	0x00011390
    2eec:	000100d1 	.word	0x000100d1
    2ef0:	000113a4 	.word	0x000113a4
    2ef4:	000101f1 	.word	0x000101f1
    2ef8:	00010105 	.word	0x00010105
    2efc:	00002a91 	.word	0x00002a91

00002f00 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    2f00:	b590      	push	{r4, r7, lr}
    2f02:	b087      	sub	sp, #28
    2f04:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
    2f06:	230f      	movs	r3, #15
    2f08:	18fb      	adds	r3, r7, r3
    2f0a:	22fa      	movs	r2, #250	; 0xfa
    2f0c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    2f0e:	230f      	movs	r3, #15
    2f10:	18fc      	adds	r4, r7, r3
    2f12:	4bda      	ldr	r3, [pc, #872]	; (327c <hif_isr+0x37c>)
    2f14:	4798      	blx	r3
    2f16:	0003      	movs	r3, r0
    2f18:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    2f1a:	230f      	movs	r3, #15
    2f1c:	18fb      	adds	r3, r7, r3
    2f1e:	781b      	ldrb	r3, [r3, #0]
    2f20:	b25b      	sxtb	r3, r3
    2f22:	2b00      	cmp	r3, #0
    2f24:	d000      	beq.n	2f28 <hif_isr+0x28>
    2f26:	e192      	b.n	324e <hif_isr+0x34e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    2f28:	230f      	movs	r3, #15
    2f2a:	18fc      	adds	r4, r7, r3
    2f2c:	2308      	movs	r3, #8
    2f2e:	18fb      	adds	r3, r7, r3
    2f30:	4ad3      	ldr	r2, [pc, #844]	; (3280 <hif_isr+0x380>)
    2f32:	0019      	movs	r1, r3
    2f34:	0010      	movs	r0, r2
    2f36:	4bd3      	ldr	r3, [pc, #844]	; (3284 <hif_isr+0x384>)
    2f38:	4798      	blx	r3
    2f3a:	0003      	movs	r3, r0
    2f3c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
    2f3e:	230f      	movs	r3, #15
    2f40:	18fb      	adds	r3, r7, r3
    2f42:	781b      	ldrb	r3, [r3, #0]
    2f44:	b25b      	sxtb	r3, r3
    2f46:	2b00      	cmp	r3, #0
    2f48:	d000      	beq.n	2f4c <hif_isr+0x4c>
    2f4a:	e172      	b.n	3232 <hif_isr+0x332>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    2f4c:	68bb      	ldr	r3, [r7, #8]
    2f4e:	2201      	movs	r2, #1
    2f50:	4013      	ands	r3, r2
    2f52:	d100      	bne.n	2f56 <hif_isr+0x56>
    2f54:	e15c      	b.n	3210 <hif_isr+0x310>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    2f56:	2000      	movs	r0, #0
    2f58:	4bcb      	ldr	r3, [pc, #812]	; (3288 <hif_isr+0x388>)
    2f5a:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
    2f5c:	68bb      	ldr	r3, [r7, #8]
    2f5e:	2201      	movs	r2, #1
    2f60:	4393      	bics	r3, r2
    2f62:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    2f64:	68bb      	ldr	r3, [r7, #8]
    2f66:	220f      	movs	r2, #15
    2f68:	18bc      	adds	r4, r7, r2
    2f6a:	4ac5      	ldr	r2, [pc, #788]	; (3280 <hif_isr+0x380>)
    2f6c:	0019      	movs	r1, r3
    2f6e:	0010      	movs	r0, r2
    2f70:	4bc6      	ldr	r3, [pc, #792]	; (328c <hif_isr+0x38c>)
    2f72:	4798      	blx	r3
    2f74:	0003      	movs	r3, r0
    2f76:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    2f78:	230f      	movs	r3, #15
    2f7a:	18fb      	adds	r3, r7, r3
    2f7c:	781b      	ldrb	r3, [r3, #0]
    2f7e:	b25b      	sxtb	r3, r3
    2f80:	2b00      	cmp	r3, #0
    2f82:	d000      	beq.n	2f86 <hif_isr+0x86>
    2f84:	e1bc      	b.n	3300 <hif_isr+0x400>
				gu8HifSizeDone = 0;
    2f86:	4bc2      	ldr	r3, [pc, #776]	; (3290 <hif_isr+0x390>)
    2f88:	2200      	movs	r2, #0
    2f8a:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    2f8c:	68bb      	ldr	r3, [r7, #8]
    2f8e:	089b      	lsrs	r3, r3, #2
    2f90:	b29a      	uxth	r2, r3
    2f92:	230c      	movs	r3, #12
    2f94:	18fb      	adds	r3, r7, r3
    2f96:	0512      	lsls	r2, r2, #20
    2f98:	0d12      	lsrs	r2, r2, #20
    2f9a:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    2f9c:	230c      	movs	r3, #12
    2f9e:	18fb      	adds	r3, r7, r3
    2fa0:	881b      	ldrh	r3, [r3, #0]
    2fa2:	2b00      	cmp	r3, #0
    2fa4:	d100      	bne.n	2fa8 <hif_isr+0xa8>
    2fa6:	e121      	b.n	31ec <hif_isr+0x2ec>
					uint32 address = 0;
    2fa8:	2300      	movs	r3, #0
    2faa:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    2fac:	230f      	movs	r3, #15
    2fae:	18fc      	adds	r4, r7, r3
    2fb0:	003b      	movs	r3, r7
    2fb2:	4ab8      	ldr	r2, [pc, #736]	; (3294 <hif_isr+0x394>)
    2fb4:	0019      	movs	r1, r3
    2fb6:	0010      	movs	r0, r2
    2fb8:	4bb2      	ldr	r3, [pc, #712]	; (3284 <hif_isr+0x384>)
    2fba:	4798      	blx	r3
    2fbc:	0003      	movs	r3, r0
    2fbe:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    2fc0:	230f      	movs	r3, #15
    2fc2:	18fb      	adds	r3, r7, r3
    2fc4:	781b      	ldrb	r3, [r3, #0]
    2fc6:	b25b      	sxtb	r3, r3
    2fc8:	2b00      	cmp	r3, #0
    2fca:	d011      	beq.n	2ff0 <hif_isr+0xf0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    2fcc:	23e7      	movs	r3, #231	; 0xe7
    2fce:	005a      	lsls	r2, r3, #1
    2fd0:	49b1      	ldr	r1, [pc, #708]	; (3298 <hif_isr+0x398>)
    2fd2:	4bb2      	ldr	r3, [pc, #712]	; (329c <hif_isr+0x39c>)
    2fd4:	0018      	movs	r0, r3
    2fd6:	4bb2      	ldr	r3, [pc, #712]	; (32a0 <hif_isr+0x3a0>)
    2fd8:	4798      	blx	r3
    2fda:	4bb2      	ldr	r3, [pc, #712]	; (32a4 <hif_isr+0x3a4>)
    2fdc:	0018      	movs	r0, r3
    2fde:	4bb2      	ldr	r3, [pc, #712]	; (32a8 <hif_isr+0x3a8>)
    2fe0:	4798      	blx	r3
    2fe2:	200d      	movs	r0, #13
    2fe4:	4bb1      	ldr	r3, [pc, #708]	; (32ac <hif_isr+0x3ac>)
    2fe6:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    2fe8:	2001      	movs	r0, #1
    2fea:	4ba7      	ldr	r3, [pc, #668]	; (3288 <hif_isr+0x388>)
    2fec:	4798      	blx	r3
						goto ERR1;
    2fee:	e188      	b.n	3302 <hif_isr+0x402>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    2ff0:	683b      	ldr	r3, [r7, #0]
    2ff2:	220f      	movs	r2, #15
    2ff4:	18bc      	adds	r4, r7, r2
    2ff6:	1d39      	adds	r1, r7, #4
    2ff8:	2204      	movs	r2, #4
    2ffa:	0018      	movs	r0, r3
    2ffc:	4bac      	ldr	r3, [pc, #688]	; (32b0 <hif_isr+0x3b0>)
    2ffe:	4798      	blx	r3
    3000:	0003      	movs	r3, r0
    3002:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    3004:	1d3b      	adds	r3, r7, #4
    3006:	885b      	ldrh	r3, [r3, #2]
    3008:	b29a      	uxth	r2, r3
    300a:	1d3b      	adds	r3, r7, #4
    300c:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    300e:	230f      	movs	r3, #15
    3010:	18fb      	adds	r3, r7, r3
    3012:	781b      	ldrb	r3, [r3, #0]
    3014:	b25b      	sxtb	r3, r3
    3016:	2b00      	cmp	r3, #0
    3018:	d011      	beq.n	303e <hif_isr+0x13e>
					{
						M2M_ERR("(hif) address bus fail\n");
    301a:	23eb      	movs	r3, #235	; 0xeb
    301c:	005a      	lsls	r2, r3, #1
    301e:	499e      	ldr	r1, [pc, #632]	; (3298 <hif_isr+0x398>)
    3020:	4b9e      	ldr	r3, [pc, #632]	; (329c <hif_isr+0x39c>)
    3022:	0018      	movs	r0, r3
    3024:	4b9e      	ldr	r3, [pc, #632]	; (32a0 <hif_isr+0x3a0>)
    3026:	4798      	blx	r3
    3028:	4ba2      	ldr	r3, [pc, #648]	; (32b4 <hif_isr+0x3b4>)
    302a:	0018      	movs	r0, r3
    302c:	4b9e      	ldr	r3, [pc, #632]	; (32a8 <hif_isr+0x3a8>)
    302e:	4798      	blx	r3
    3030:	200d      	movs	r0, #13
    3032:	4b9e      	ldr	r3, [pc, #632]	; (32ac <hif_isr+0x3ac>)
    3034:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    3036:	2001      	movs	r0, #1
    3038:	4b93      	ldr	r3, [pc, #588]	; (3288 <hif_isr+0x388>)
    303a:	4798      	blx	r3
						goto ERR1;
    303c:	e161      	b.n	3302 <hif_isr+0x402>
					}
					if(strHif.u16Length != size)
    303e:	1d3b      	adds	r3, r7, #4
    3040:	885b      	ldrh	r3, [r3, #2]
    3042:	b29b      	uxth	r3, r3
    3044:	220c      	movs	r2, #12
    3046:	18ba      	adds	r2, r7, r2
    3048:	8812      	ldrh	r2, [r2, #0]
    304a:	429a      	cmp	r2, r3
    304c:	d02e      	beq.n	30ac <hif_isr+0x1ac>
					{
						if((size - strHif.u16Length) > 4)
    304e:	230c      	movs	r3, #12
    3050:	18fb      	adds	r3, r7, r3
    3052:	881b      	ldrh	r3, [r3, #0]
    3054:	1d3a      	adds	r2, r7, #4
    3056:	8852      	ldrh	r2, [r2, #2]
    3058:	b292      	uxth	r2, r2
    305a:	1a9b      	subs	r3, r3, r2
    305c:	2b04      	cmp	r3, #4
    305e:	dd25      	ble.n	30ac <hif_isr+0x1ac>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    3060:	23e0      	movs	r3, #224	; 0xe0
    3062:	33ff      	adds	r3, #255	; 0xff
    3064:	001a      	movs	r2, r3
    3066:	498c      	ldr	r1, [pc, #560]	; (3298 <hif_isr+0x398>)
    3068:	4b8c      	ldr	r3, [pc, #560]	; (329c <hif_isr+0x39c>)
    306a:	0018      	movs	r0, r3
    306c:	4b8c      	ldr	r3, [pc, #560]	; (32a0 <hif_isr+0x3a0>)
    306e:	4798      	blx	r3
    3070:	230c      	movs	r3, #12
    3072:	18fb      	adds	r3, r7, r3
    3074:	8819      	ldrh	r1, [r3, #0]
    3076:	1d3b      	adds	r3, r7, #4
    3078:	885b      	ldrh	r3, [r3, #2]
    307a:	b29b      	uxth	r3, r3
    307c:	001a      	movs	r2, r3
    307e:	1d3b      	adds	r3, r7, #4
    3080:	781b      	ldrb	r3, [r3, #0]
    3082:	b2db      	uxtb	r3, r3
    3084:	001c      	movs	r4, r3
    3086:	1d3b      	adds	r3, r7, #4
    3088:	785b      	ldrb	r3, [r3, #1]
    308a:	b2db      	uxtb	r3, r3
    308c:	488a      	ldr	r0, [pc, #552]	; (32b8 <hif_isr+0x3b8>)
    308e:	9300      	str	r3, [sp, #0]
    3090:	0023      	movs	r3, r4
    3092:	4c83      	ldr	r4, [pc, #524]	; (32a0 <hif_isr+0x3a0>)
    3094:	47a0      	blx	r4
    3096:	200d      	movs	r0, #13
    3098:	4b84      	ldr	r3, [pc, #528]	; (32ac <hif_isr+0x3ac>)
    309a:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    309c:	2001      	movs	r0, #1
    309e:	4b7a      	ldr	r3, [pc, #488]	; (3288 <hif_isr+0x388>)
    30a0:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    30a2:	230f      	movs	r3, #15
    30a4:	18fb      	adds	r3, r7, r3
    30a6:	22fa      	movs	r2, #250	; 0xfa
    30a8:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    30aa:	e12a      	b.n	3302 <hif_isr+0x402>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    30ac:	1d3b      	adds	r3, r7, #4
    30ae:	781b      	ldrb	r3, [r3, #0]
    30b0:	b2db      	uxtb	r3, r3
    30b2:	2b01      	cmp	r3, #1
    30b4:	d112      	bne.n	30dc <hif_isr+0x1dc>
					{
						if(pfWifiCb)
    30b6:	4b81      	ldr	r3, [pc, #516]	; (32bc <hif_isr+0x3bc>)
    30b8:	681b      	ldr	r3, [r3, #0]
    30ba:	2b00      	cmp	r3, #0
    30bc:	d100      	bne.n	30c0 <hif_isr+0x1c0>
    30be:	e07c      	b.n	31ba <hif_isr+0x2ba>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    30c0:	4b7e      	ldr	r3, [pc, #504]	; (32bc <hif_isr+0x3bc>)
    30c2:	681b      	ldr	r3, [r3, #0]
    30c4:	1d3a      	adds	r2, r7, #4
    30c6:	7852      	ldrb	r2, [r2, #1]
    30c8:	b2d0      	uxtb	r0, r2
    30ca:	1d3a      	adds	r2, r7, #4
    30cc:	8852      	ldrh	r2, [r2, #2]
    30ce:	b292      	uxth	r2, r2
    30d0:	3a08      	subs	r2, #8
    30d2:	b291      	uxth	r1, r2
    30d4:	683a      	ldr	r2, [r7, #0]
    30d6:	3208      	adds	r2, #8
    30d8:	4798      	blx	r3
    30da:	e06e      	b.n	31ba <hif_isr+0x2ba>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    30dc:	1d3b      	adds	r3, r7, #4
    30de:	781b      	ldrb	r3, [r3, #0]
    30e0:	b2db      	uxtb	r3, r3
    30e2:	2b02      	cmp	r3, #2
    30e4:	d111      	bne.n	310a <hif_isr+0x20a>
					{
						if(pfIpCb)
    30e6:	4b76      	ldr	r3, [pc, #472]	; (32c0 <hif_isr+0x3c0>)
    30e8:	681b      	ldr	r3, [r3, #0]
    30ea:	2b00      	cmp	r3, #0
    30ec:	d065      	beq.n	31ba <hif_isr+0x2ba>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    30ee:	4b74      	ldr	r3, [pc, #464]	; (32c0 <hif_isr+0x3c0>)
    30f0:	681b      	ldr	r3, [r3, #0]
    30f2:	1d3a      	adds	r2, r7, #4
    30f4:	7852      	ldrb	r2, [r2, #1]
    30f6:	b2d0      	uxtb	r0, r2
    30f8:	1d3a      	adds	r2, r7, #4
    30fa:	8852      	ldrh	r2, [r2, #2]
    30fc:	b292      	uxth	r2, r2
    30fe:	3a08      	subs	r2, #8
    3100:	b291      	uxth	r1, r2
    3102:	683a      	ldr	r2, [r7, #0]
    3104:	3208      	adds	r2, #8
    3106:	4798      	blx	r3
    3108:	e057      	b.n	31ba <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    310a:	1d3b      	adds	r3, r7, #4
    310c:	781b      	ldrb	r3, [r3, #0]
    310e:	b2db      	uxtb	r3, r3
    3110:	2b04      	cmp	r3, #4
    3112:	d111      	bne.n	3138 <hif_isr+0x238>
					{
						if(pfOtaCb)
    3114:	4b6b      	ldr	r3, [pc, #428]	; (32c4 <hif_isr+0x3c4>)
    3116:	681b      	ldr	r3, [r3, #0]
    3118:	2b00      	cmp	r3, #0
    311a:	d04e      	beq.n	31ba <hif_isr+0x2ba>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    311c:	4b69      	ldr	r3, [pc, #420]	; (32c4 <hif_isr+0x3c4>)
    311e:	681b      	ldr	r3, [r3, #0]
    3120:	1d3a      	adds	r2, r7, #4
    3122:	7852      	ldrb	r2, [r2, #1]
    3124:	b2d0      	uxtb	r0, r2
    3126:	1d3a      	adds	r2, r7, #4
    3128:	8852      	ldrh	r2, [r2, #2]
    312a:	b292      	uxth	r2, r2
    312c:	3a08      	subs	r2, #8
    312e:	b291      	uxth	r1, r2
    3130:	683a      	ldr	r2, [r7, #0]
    3132:	3208      	adds	r2, #8
    3134:	4798      	blx	r3
    3136:	e040      	b.n	31ba <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    3138:	1d3b      	adds	r3, r7, #4
    313a:	781b      	ldrb	r3, [r3, #0]
    313c:	b2db      	uxtb	r3, r3
    313e:	2b06      	cmp	r3, #6
    3140:	d111      	bne.n	3166 <hif_isr+0x266>
					{
						if(pfCryptoCb)
    3142:	4b61      	ldr	r3, [pc, #388]	; (32c8 <hif_isr+0x3c8>)
    3144:	681b      	ldr	r3, [r3, #0]
    3146:	2b00      	cmp	r3, #0
    3148:	d037      	beq.n	31ba <hif_isr+0x2ba>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    314a:	4b5f      	ldr	r3, [pc, #380]	; (32c8 <hif_isr+0x3c8>)
    314c:	681b      	ldr	r3, [r3, #0]
    314e:	1d3a      	adds	r2, r7, #4
    3150:	7852      	ldrb	r2, [r2, #1]
    3152:	b2d0      	uxtb	r0, r2
    3154:	1d3a      	adds	r2, r7, #4
    3156:	8852      	ldrh	r2, [r2, #2]
    3158:	b292      	uxth	r2, r2
    315a:	3a08      	subs	r2, #8
    315c:	b291      	uxth	r1, r2
    315e:	683a      	ldr	r2, [r7, #0]
    3160:	3208      	adds	r2, #8
    3162:	4798      	blx	r3
    3164:	e029      	b.n	31ba <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    3166:	1d3b      	adds	r3, r7, #4
    3168:	781b      	ldrb	r3, [r3, #0]
    316a:	b2db      	uxtb	r3, r3
    316c:	2b07      	cmp	r3, #7
    316e:	d111      	bne.n	3194 <hif_isr+0x294>
					{
						if(pfSigmaCb)
    3170:	4b56      	ldr	r3, [pc, #344]	; (32cc <hif_isr+0x3cc>)
    3172:	681b      	ldr	r3, [r3, #0]
    3174:	2b00      	cmp	r3, #0
    3176:	d020      	beq.n	31ba <hif_isr+0x2ba>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    3178:	4b54      	ldr	r3, [pc, #336]	; (32cc <hif_isr+0x3cc>)
    317a:	681b      	ldr	r3, [r3, #0]
    317c:	1d3a      	adds	r2, r7, #4
    317e:	7852      	ldrb	r2, [r2, #1]
    3180:	b2d0      	uxtb	r0, r2
    3182:	1d3a      	adds	r2, r7, #4
    3184:	8852      	ldrh	r2, [r2, #2]
    3186:	b292      	uxth	r2, r2
    3188:	3a08      	subs	r2, #8
    318a:	b291      	uxth	r1, r2
    318c:	683a      	ldr	r2, [r7, #0]
    318e:	3208      	adds	r2, #8
    3190:	4798      	blx	r3
    3192:	e012      	b.n	31ba <hif_isr+0x2ba>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    3194:	4a4e      	ldr	r2, [pc, #312]	; (32d0 <hif_isr+0x3d0>)
    3196:	4940      	ldr	r1, [pc, #256]	; (3298 <hif_isr+0x398>)
    3198:	4b40      	ldr	r3, [pc, #256]	; (329c <hif_isr+0x39c>)
    319a:	0018      	movs	r0, r3
    319c:	4b40      	ldr	r3, [pc, #256]	; (32a0 <hif_isr+0x3a0>)
    319e:	4798      	blx	r3
    31a0:	4b4c      	ldr	r3, [pc, #304]	; (32d4 <hif_isr+0x3d4>)
    31a2:	0018      	movs	r0, r3
    31a4:	4b40      	ldr	r3, [pc, #256]	; (32a8 <hif_isr+0x3a8>)
    31a6:	4798      	blx	r3
    31a8:	200d      	movs	r0, #13
    31aa:	4b40      	ldr	r3, [pc, #256]	; (32ac <hif_isr+0x3ac>)
    31ac:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    31ae:	230f      	movs	r3, #15
    31b0:	18fb      	adds	r3, r7, r3
    31b2:	22fa      	movs	r2, #250	; 0xfa
    31b4:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    31b6:	46c0      	nop			; (mov r8, r8)
    31b8:	e0a3      	b.n	3302 <hif_isr+0x402>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    31ba:	4b35      	ldr	r3, [pc, #212]	; (3290 <hif_isr+0x390>)
    31bc:	781b      	ldrb	r3, [r3, #0]
    31be:	b2db      	uxtb	r3, r3
    31c0:	2b00      	cmp	r3, #0
    31c2:	d153      	bne.n	326c <hif_isr+0x36c>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    31c4:	4a44      	ldr	r2, [pc, #272]	; (32d8 <hif_isr+0x3d8>)
    31c6:	4934      	ldr	r1, [pc, #208]	; (3298 <hif_isr+0x398>)
    31c8:	4b34      	ldr	r3, [pc, #208]	; (329c <hif_isr+0x39c>)
    31ca:	0018      	movs	r0, r3
    31cc:	4b34      	ldr	r3, [pc, #208]	; (32a0 <hif_isr+0x3a0>)
    31ce:	4798      	blx	r3
    31d0:	4b42      	ldr	r3, [pc, #264]	; (32dc <hif_isr+0x3dc>)
    31d2:	0018      	movs	r0, r3
    31d4:	4b34      	ldr	r3, [pc, #208]	; (32a8 <hif_isr+0x3a8>)
    31d6:	4798      	blx	r3
    31d8:	200d      	movs	r0, #13
    31da:	4b34      	ldr	r3, [pc, #208]	; (32ac <hif_isr+0x3ac>)
    31dc:	4798      	blx	r3
						ret = hif_set_rx_done();
    31de:	230f      	movs	r3, #15
    31e0:	18fc      	adds	r4, r7, r3
    31e2:	4b3f      	ldr	r3, [pc, #252]	; (32e0 <hif_isr+0x3e0>)
    31e4:	4798      	blx	r3
    31e6:	0003      	movs	r3, r0
    31e8:	7023      	strb	r3, [r4, #0]
    31ea:	e03f      	b.n	326c <hif_isr+0x36c>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    31ec:	230f      	movs	r3, #15
    31ee:	18fb      	adds	r3, r7, r3
    31f0:	22fe      	movs	r2, #254	; 0xfe
    31f2:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    31f4:	4a3b      	ldr	r2, [pc, #236]	; (32e4 <hif_isr+0x3e4>)
    31f6:	4928      	ldr	r1, [pc, #160]	; (3298 <hif_isr+0x398>)
    31f8:	4b28      	ldr	r3, [pc, #160]	; (329c <hif_isr+0x39c>)
    31fa:	0018      	movs	r0, r3
    31fc:	4b28      	ldr	r3, [pc, #160]	; (32a0 <hif_isr+0x3a0>)
    31fe:	4798      	blx	r3
    3200:	4b39      	ldr	r3, [pc, #228]	; (32e8 <hif_isr+0x3e8>)
    3202:	0018      	movs	r0, r3
    3204:	4b28      	ldr	r3, [pc, #160]	; (32a8 <hif_isr+0x3a8>)
    3206:	4798      	blx	r3
    3208:	200d      	movs	r0, #13
    320a:	4b28      	ldr	r3, [pc, #160]	; (32ac <hif_isr+0x3ac>)
    320c:	4798      	blx	r3
					goto ERR1;
    320e:	e078      	b.n	3302 <hif_isr+0x402>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    3210:	2386      	movs	r3, #134	; 0x86
    3212:	009a      	lsls	r2, r3, #2
    3214:	4920      	ldr	r1, [pc, #128]	; (3298 <hif_isr+0x398>)
    3216:	4b21      	ldr	r3, [pc, #132]	; (329c <hif_isr+0x39c>)
    3218:	0018      	movs	r0, r3
    321a:	4b21      	ldr	r3, [pc, #132]	; (32a0 <hif_isr+0x3a0>)
    321c:	4798      	blx	r3
    321e:	68ba      	ldr	r2, [r7, #8]
    3220:	4b32      	ldr	r3, [pc, #200]	; (32ec <hif_isr+0x3ec>)
    3222:	0011      	movs	r1, r2
    3224:	0018      	movs	r0, r3
    3226:	4b1e      	ldr	r3, [pc, #120]	; (32a0 <hif_isr+0x3a0>)
    3228:	4798      	blx	r3
    322a:	200d      	movs	r0, #13
    322c:	4b1f      	ldr	r3, [pc, #124]	; (32ac <hif_isr+0x3ac>)
    322e:	4798      	blx	r3
    3230:	e01c      	b.n	326c <hif_isr+0x36c>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    3232:	4a2f      	ldr	r2, [pc, #188]	; (32f0 <hif_isr+0x3f0>)
    3234:	4918      	ldr	r1, [pc, #96]	; (3298 <hif_isr+0x398>)
    3236:	4b19      	ldr	r3, [pc, #100]	; (329c <hif_isr+0x39c>)
    3238:	0018      	movs	r0, r3
    323a:	4b19      	ldr	r3, [pc, #100]	; (32a0 <hif_isr+0x3a0>)
    323c:	4798      	blx	r3
    323e:	4b2d      	ldr	r3, [pc, #180]	; (32f4 <hif_isr+0x3f4>)
    3240:	0018      	movs	r0, r3
    3242:	4b19      	ldr	r3, [pc, #100]	; (32a8 <hif_isr+0x3a8>)
    3244:	4798      	blx	r3
    3246:	200d      	movs	r0, #13
    3248:	4b18      	ldr	r3, [pc, #96]	; (32ac <hif_isr+0x3ac>)
    324a:	4798      	blx	r3
			goto ERR1;
    324c:	e059      	b.n	3302 <hif_isr+0x402>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    324e:	2389      	movs	r3, #137	; 0x89
    3250:	009a      	lsls	r2, r3, #2
    3252:	4911      	ldr	r1, [pc, #68]	; (3298 <hif_isr+0x398>)
    3254:	4b11      	ldr	r3, [pc, #68]	; (329c <hif_isr+0x39c>)
    3256:	0018      	movs	r0, r3
    3258:	4b11      	ldr	r3, [pc, #68]	; (32a0 <hif_isr+0x3a0>)
    325a:	4798      	blx	r3
    325c:	4b26      	ldr	r3, [pc, #152]	; (32f8 <hif_isr+0x3f8>)
    325e:	0018      	movs	r0, r3
    3260:	4b11      	ldr	r3, [pc, #68]	; (32a8 <hif_isr+0x3a8>)
    3262:	4798      	blx	r3
    3264:	200d      	movs	r0, #13
    3266:	4b11      	ldr	r3, [pc, #68]	; (32ac <hif_isr+0x3ac>)
    3268:	4798      	blx	r3
		goto ERR1;
    326a:	e04a      	b.n	3302 <hif_isr+0x402>
	}

	ret = hif_chip_sleep();
    326c:	230f      	movs	r3, #15
    326e:	18fc      	adds	r4, r7, r3
    3270:	4b22      	ldr	r3, [pc, #136]	; (32fc <hif_isr+0x3fc>)
    3272:	4798      	blx	r3
    3274:	0003      	movs	r3, r0
    3276:	7023      	strb	r3, [r4, #0]
    3278:	e043      	b.n	3302 <hif_isr+0x402>
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	000029f9 	.word	0x000029f9
    3280:	00001070 	.word	0x00001070
    3284:	00004b05 	.word	0x00004b05
    3288:	00001fd9 	.word	0x00001fd9
    328c:	00004b29 	.word	0x00004b29
    3290:	200000c2 	.word	0x200000c2
    3294:	00001084 	.word	0x00001084
    3298:	000115fc 	.word	0x000115fc
    329c:	00011390 	.word	0x00011390
    32a0:	000100d1 	.word	0x000100d1
    32a4:	000113c0 	.word	0x000113c0
    32a8:	000101f1 	.word	0x000101f1
    32ac:	00010105 	.word	0x00010105
    32b0:	00004b79 	.word	0x00004b79
    32b4:	000113e4 	.word	0x000113e4
    32b8:	000113fc 	.word	0x000113fc
    32bc:	200000c4 	.word	0x200000c4
    32c0:	200000c8 	.word	0x200000c8
    32c4:	200000cc 	.word	0x200000cc
    32c8:	200000d8 	.word	0x200000d8
    32cc:	200000d0 	.word	0x200000d0
    32d0:	00000202 	.word	0x00000202
    32d4:	0001143c 	.word	0x0001143c
    32d8:	00000209 	.word	0x00000209
    32dc:	00011454 	.word	0x00011454
    32e0:	00002971 	.word	0x00002971
    32e4:	00000211 	.word	0x00000211
    32e8:	00011478 	.word	0x00011478
    32ec:	0001148c 	.word	0x0001148c
    32f0:	0000021e 	.word	0x0000021e
    32f4:	000114a8 	.word	0x000114a8
    32f8:	000114cc 	.word	0x000114cc
    32fc:	00002a91 	.word	0x00002a91

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
    3300:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
    3302:	230f      	movs	r3, #15
    3304:	18fb      	adds	r3, r7, r3
    3306:	781b      	ldrb	r3, [r3, #0]
    3308:	b25b      	sxtb	r3, r3
}
    330a:	0018      	movs	r0, r3
    330c:	46bd      	mov	sp, r7
    330e:	b005      	add	sp, #20
    3310:	bd90      	pop	{r4, r7, pc}
    3312:	46c0      	nop			; (mov r8, r8)

00003314 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    3314:	b590      	push	{r4, r7, lr}
    3316:	b083      	sub	sp, #12
    3318:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    331a:	1dfb      	adds	r3, r7, #7
    331c:	2200      	movs	r2, #0
    331e:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    3320:	e023      	b.n	336a <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    3322:	4b18      	ldr	r3, [pc, #96]	; (3384 <hif_handle_isr+0x70>)
    3324:	781b      	ldrb	r3, [r3, #0]
    3326:	b2db      	uxtb	r3, r3
    3328:	3b01      	subs	r3, #1
    332a:	b2da      	uxtb	r2, r3
    332c:	4b15      	ldr	r3, [pc, #84]	; (3384 <hif_handle_isr+0x70>)
    332e:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    3330:	1dfc      	adds	r4, r7, #7
    3332:	4b15      	ldr	r3, [pc, #84]	; (3388 <hif_handle_isr+0x74>)
    3334:	4798      	blx	r3
    3336:	0003      	movs	r3, r0
    3338:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    333a:	1dfb      	adds	r3, r7, #7
    333c:	781b      	ldrb	r3, [r3, #0]
    333e:	b25b      	sxtb	r3, r3
    3340:	2b00      	cmp	r3, #0
    3342:	d100      	bne.n	3346 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    3344:	e011      	b.n	336a <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    3346:	4a11      	ldr	r2, [pc, #68]	; (338c <hif_handle_isr+0x78>)
    3348:	4911      	ldr	r1, [pc, #68]	; (3390 <hif_handle_isr+0x7c>)
    334a:	4b12      	ldr	r3, [pc, #72]	; (3394 <hif_handle_isr+0x80>)
    334c:	0018      	movs	r0, r3
    334e:	4b12      	ldr	r3, [pc, #72]	; (3398 <hif_handle_isr+0x84>)
    3350:	4798      	blx	r3
    3352:	1dfb      	adds	r3, r7, #7
    3354:	2200      	movs	r2, #0
    3356:	569a      	ldrsb	r2, [r3, r2]
    3358:	4b10      	ldr	r3, [pc, #64]	; (339c <hif_handle_isr+0x88>)
    335a:	0011      	movs	r1, r2
    335c:	0018      	movs	r0, r3
    335e:	4b0e      	ldr	r3, [pc, #56]	; (3398 <hif_handle_isr+0x84>)
    3360:	4798      	blx	r3
    3362:	200d      	movs	r0, #13
    3364:	4b0e      	ldr	r3, [pc, #56]	; (33a0 <hif_handle_isr+0x8c>)
    3366:	4798      	blx	r3
			}
		}
    3368:	e7e2      	b.n	3330 <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    336a:	4b06      	ldr	r3, [pc, #24]	; (3384 <hif_handle_isr+0x70>)
    336c:	781b      	ldrb	r3, [r3, #0]
    336e:	b2db      	uxtb	r3, r3
    3370:	2b00      	cmp	r3, #0
    3372:	d1d6      	bne.n	3322 <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    3374:	1dfb      	adds	r3, r7, #7
    3376:	781b      	ldrb	r3, [r3, #0]
    3378:	b25b      	sxtb	r3, r3
}
    337a:	0018      	movs	r0, r3
    337c:	46bd      	mov	sp, r7
    337e:	b003      	add	sp, #12
    3380:	bd90      	pop	{r4, r7, pc}
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	200000c3 	.word	0x200000c3
    3388:	00002f01 	.word	0x00002f01
    338c:	00000243 	.word	0x00000243
    3390:	00011604 	.word	0x00011604
    3394:	00011390 	.word	0x00011390
    3398:	000100d1 	.word	0x000100d1
    339c:	000114ec 	.word	0x000114ec
    33a0:	00010105 	.word	0x00010105

000033a4 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
    33a4:	b590      	push	{r4, r7, lr}
    33a6:	b089      	sub	sp, #36	; 0x24
    33a8:	af00      	add	r7, sp, #0
    33aa:	60f8      	str	r0, [r7, #12]
    33ac:	60b9      	str	r1, [r7, #8]
    33ae:	0019      	movs	r1, r3
    33b0:	1dbb      	adds	r3, r7, #6
    33b2:	801a      	strh	r2, [r3, #0]
    33b4:	1d7b      	adds	r3, r7, #5
    33b6:	1c0a      	adds	r2, r1, #0
    33b8:	701a      	strb	r2, [r3, #0]
	uint32 address, reg;
	uint16 size;
	sint8 ret = M2M_SUCCESS;
    33ba:	231f      	movs	r3, #31
    33bc:	18fb      	adds	r3, r7, r3
    33be:	2200      	movs	r2, #0
    33c0:	701a      	strb	r2, [r3, #0]

	if(u32Addr == 0 ||pu8Buf == NULL || u16Sz == 0)
    33c2:	68fb      	ldr	r3, [r7, #12]
    33c4:	2b00      	cmp	r3, #0
    33c6:	d006      	beq.n	33d6 <hif_receive+0x32>
    33c8:	68bb      	ldr	r3, [r7, #8]
    33ca:	2b00      	cmp	r3, #0
    33cc:	d003      	beq.n	33d6 <hif_receive+0x32>
    33ce:	1dbb      	adds	r3, r7, #6
    33d0:	881b      	ldrh	r3, [r3, #0]
    33d2:	2b00      	cmp	r3, #0
    33d4:	d11f      	bne.n	3416 <hif_receive+0x72>
	{
		if(isDone)
    33d6:	1d7b      	adds	r3, r7, #5
    33d8:	781b      	ldrb	r3, [r3, #0]
    33da:	2b00      	cmp	r3, #0
    33dc:	d009      	beq.n	33f2 <hif_receive+0x4e>
		{
			gu8HifSizeDone = 1;
    33de:	4b5f      	ldr	r3, [pc, #380]	; (355c <hif_receive+0x1b8>)
    33e0:	2201      	movs	r2, #1
    33e2:	701a      	strb	r2, [r3, #0]
			
			/* set RX done */
			ret = hif_set_rx_done();
    33e4:	231f      	movs	r3, #31
    33e6:	18fc      	adds	r4, r7, r3
    33e8:	4b5d      	ldr	r3, [pc, #372]	; (3560 <hif_receive+0x1bc>)
    33ea:	4798      	blx	r3
    33ec:	0003      	movs	r3, r0
    33ee:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
    33f0:	e0ac      	b.n	354c <hif_receive+0x1a8>
			/* set RX done */
			ret = hif_set_rx_done();
		}
		else
		{
			ret = M2M_ERR_FAIL;
    33f2:	231f      	movs	r3, #31
    33f4:	18fb      	adds	r3, r7, r3
    33f6:	22f4      	movs	r2, #244	; 0xf4
    33f8:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
    33fa:	4a5a      	ldr	r2, [pc, #360]	; (3564 <hif_receive+0x1c0>)
    33fc:	495a      	ldr	r1, [pc, #360]	; (3568 <hif_receive+0x1c4>)
    33fe:	4b5b      	ldr	r3, [pc, #364]	; (356c <hif_receive+0x1c8>)
    3400:	0018      	movs	r0, r3
    3402:	4b5b      	ldr	r3, [pc, #364]	; (3570 <hif_receive+0x1cc>)
    3404:	4798      	blx	r3
    3406:	4b5b      	ldr	r3, [pc, #364]	; (3574 <hif_receive+0x1d0>)
    3408:	0018      	movs	r0, r3
    340a:	4b5b      	ldr	r3, [pc, #364]	; (3578 <hif_receive+0x1d4>)
    340c:	4798      	blx	r3
    340e:	200d      	movs	r0, #13
    3410:	4b5a      	ldr	r3, [pc, #360]	; (357c <hif_receive+0x1d8>)
    3412:	4798      	blx	r3
		}
		goto ERR1;
    3414:	e09a      	b.n	354c <hif_receive+0x1a8>
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
    3416:	231f      	movs	r3, #31
    3418:	18fc      	adds	r4, r7, r3
    341a:	2314      	movs	r3, #20
    341c:	18fb      	adds	r3, r7, r3
    341e:	4a58      	ldr	r2, [pc, #352]	; (3580 <hif_receive+0x1dc>)
    3420:	0019      	movs	r1, r3
    3422:	0010      	movs	r0, r2
    3424:	4b57      	ldr	r3, [pc, #348]	; (3584 <hif_receive+0x1e0>)
    3426:	4798      	blx	r3
    3428:	0003      	movs	r3, r0
    342a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    342c:	231f      	movs	r3, #31
    342e:	18fb      	adds	r3, r7, r3
    3430:	781b      	ldrb	r3, [r3, #0]
    3432:	b25b      	sxtb	r3, r3
    3434:	2b00      	cmp	r3, #0
    3436:	d000      	beq.n	343a <hif_receive+0x96>
    3438:	e083      	b.n	3542 <hif_receive+0x19e>


	size = (uint16)((reg >> 2) & 0xfff);
    343a:	697b      	ldr	r3, [r7, #20]
    343c:	089b      	lsrs	r3, r3, #2
    343e:	b29a      	uxth	r2, r3
    3440:	231c      	movs	r3, #28
    3442:	18fb      	adds	r3, r7, r3
    3444:	0512      	lsls	r2, r2, #20
    3446:	0d12      	lsrs	r2, r2, #20
    3448:	801a      	strh	r2, [r3, #0]
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
    344a:	231f      	movs	r3, #31
    344c:	18fc      	adds	r4, r7, r3
    344e:	2318      	movs	r3, #24
    3450:	18fb      	adds	r3, r7, r3
    3452:	4a4d      	ldr	r2, [pc, #308]	; (3588 <hif_receive+0x1e4>)
    3454:	0019      	movs	r1, r3
    3456:	0010      	movs	r0, r2
    3458:	4b4a      	ldr	r3, [pc, #296]	; (3584 <hif_receive+0x1e0>)
    345a:	4798      	blx	r3
    345c:	0003      	movs	r3, r0
    345e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3460:	231f      	movs	r3, #31
    3462:	18fb      	adds	r3, r7, r3
    3464:	781b      	ldrb	r3, [r3, #0]
    3466:	b25b      	sxtb	r3, r3
    3468:	2b00      	cmp	r3, #0
    346a:	d000      	beq.n	346e <hif_receive+0xca>
    346c:	e06b      	b.n	3546 <hif_receive+0x1a2>


	if(u16Sz > size)
    346e:	1dba      	adds	r2, r7, #6
    3470:	231c      	movs	r3, #28
    3472:	18fb      	adds	r3, r7, r3
    3474:	8812      	ldrh	r2, [r2, #0]
    3476:	881b      	ldrh	r3, [r3, #0]
    3478:	429a      	cmp	r2, r3
    347a:	d916      	bls.n	34aa <hif_receive+0x106>
	{
		ret = M2M_ERR_FAIL;
    347c:	231f      	movs	r3, #31
    347e:	18fb      	adds	r3, r7, r3
    3480:	22f4      	movs	r2, #244	; 0xf4
    3482:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%d><%d>\n",u16Sz, size);
    3484:	4a41      	ldr	r2, [pc, #260]	; (358c <hif_receive+0x1e8>)
    3486:	4938      	ldr	r1, [pc, #224]	; (3568 <hif_receive+0x1c4>)
    3488:	4b38      	ldr	r3, [pc, #224]	; (356c <hif_receive+0x1c8>)
    348a:	0018      	movs	r0, r3
    348c:	4b38      	ldr	r3, [pc, #224]	; (3570 <hif_receive+0x1cc>)
    348e:	4798      	blx	r3
    3490:	1dbb      	adds	r3, r7, #6
    3492:	8819      	ldrh	r1, [r3, #0]
    3494:	231c      	movs	r3, #28
    3496:	18fb      	adds	r3, r7, r3
    3498:	881a      	ldrh	r2, [r3, #0]
    349a:	4b3d      	ldr	r3, [pc, #244]	; (3590 <hif_receive+0x1ec>)
    349c:	0018      	movs	r0, r3
    349e:	4b34      	ldr	r3, [pc, #208]	; (3570 <hif_receive+0x1cc>)
    34a0:	4798      	blx	r3
    34a2:	200d      	movs	r0, #13
    34a4:	4b35      	ldr	r3, [pc, #212]	; (357c <hif_receive+0x1d8>)
    34a6:	4798      	blx	r3
		goto ERR1;
    34a8:	e050      	b.n	354c <hif_receive+0x1a8>
	}
	if((u32Addr < address)||((u32Addr + u16Sz)>(address+size)))
    34aa:	69bb      	ldr	r3, [r7, #24]
    34ac:	68fa      	ldr	r2, [r7, #12]
    34ae:	429a      	cmp	r2, r3
    34b0:	d30a      	bcc.n	34c8 <hif_receive+0x124>
    34b2:	1dbb      	adds	r3, r7, #6
    34b4:	881a      	ldrh	r2, [r3, #0]
    34b6:	68fb      	ldr	r3, [r7, #12]
    34b8:	18d2      	adds	r2, r2, r3
    34ba:	231c      	movs	r3, #28
    34bc:	18fb      	adds	r3, r7, r3
    34be:	8819      	ldrh	r1, [r3, #0]
    34c0:	69bb      	ldr	r3, [r7, #24]
    34c2:	18cb      	adds	r3, r1, r3
    34c4:	429a      	cmp	r2, r3
    34c6:	d912      	bls.n	34ee <hif_receive+0x14a>
	{
		ret = M2M_ERR_FAIL;
    34c8:	231f      	movs	r3, #31
    34ca:	18fb      	adds	r3, r7, r3
    34cc:	22f4      	movs	r2, #244	; 0xf4
    34ce:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
    34d0:	23a0      	movs	r3, #160	; 0xa0
    34d2:	009a      	lsls	r2, r3, #2
    34d4:	4924      	ldr	r1, [pc, #144]	; (3568 <hif_receive+0x1c4>)
    34d6:	4b25      	ldr	r3, [pc, #148]	; (356c <hif_receive+0x1c8>)
    34d8:	0018      	movs	r0, r3
    34da:	4b25      	ldr	r3, [pc, #148]	; (3570 <hif_receive+0x1cc>)
    34dc:	4798      	blx	r3
    34de:	4b2d      	ldr	r3, [pc, #180]	; (3594 <hif_receive+0x1f0>)
    34e0:	0018      	movs	r0, r3
    34e2:	4b25      	ldr	r3, [pc, #148]	; (3578 <hif_receive+0x1d4>)
    34e4:	4798      	blx	r3
    34e6:	200d      	movs	r0, #13
    34e8:	4b24      	ldr	r3, [pc, #144]	; (357c <hif_receive+0x1d8>)
    34ea:	4798      	blx	r3
		goto ERR1;
    34ec:	e02e      	b.n	354c <hif_receive+0x1a8>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
    34ee:	1dbb      	adds	r3, r7, #6
    34f0:	881a      	ldrh	r2, [r3, #0]
    34f2:	231f      	movs	r3, #31
    34f4:	18fc      	adds	r4, r7, r3
    34f6:	68b9      	ldr	r1, [r7, #8]
    34f8:	68fb      	ldr	r3, [r7, #12]
    34fa:	0018      	movs	r0, r3
    34fc:	4b26      	ldr	r3, [pc, #152]	; (3598 <hif_receive+0x1f4>)
    34fe:	4798      	blx	r3
    3500:	0003      	movs	r3, r0
    3502:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
    3504:	231f      	movs	r3, #31
    3506:	18fb      	adds	r3, r7, r3
    3508:	781b      	ldrb	r3, [r3, #0]
    350a:	b25b      	sxtb	r3, r3
    350c:	2b00      	cmp	r3, #0
    350e:	d11c      	bne.n	354a <hif_receive+0x1a6>

	/* check if this is the last packet */
	if((((address + size) - (u32Addr + u16Sz)) <= 0) || isDone)
    3510:	231c      	movs	r3, #28
    3512:	18fb      	adds	r3, r7, r3
    3514:	881a      	ldrh	r2, [r3, #0]
    3516:	69bb      	ldr	r3, [r7, #24]
    3518:	18d2      	adds	r2, r2, r3
    351a:	1dbb      	adds	r3, r7, #6
    351c:	8819      	ldrh	r1, [r3, #0]
    351e:	68fb      	ldr	r3, [r7, #12]
    3520:	18cb      	adds	r3, r1, r3
    3522:	429a      	cmp	r2, r3
    3524:	d003      	beq.n	352e <hif_receive+0x18a>
    3526:	1d7b      	adds	r3, r7, #5
    3528:	781b      	ldrb	r3, [r3, #0]
    352a:	2b00      	cmp	r3, #0
    352c:	d00e      	beq.n	354c <hif_receive+0x1a8>
	{
		gu8HifSizeDone = 1;
    352e:	4b0b      	ldr	r3, [pc, #44]	; (355c <hif_receive+0x1b8>)
    3530:	2201      	movs	r2, #1
    3532:	701a      	strb	r2, [r3, #0]

		/* set RX done */
		ret = hif_set_rx_done();
    3534:	231f      	movs	r3, #31
    3536:	18fc      	adds	r4, r7, r3
    3538:	4b09      	ldr	r3, [pc, #36]	; (3560 <hif_receive+0x1bc>)
    353a:	4798      	blx	r3
    353c:	0003      	movs	r3, r0
    353e:	7023      	strb	r3, [r4, #0]
    3540:	e004      	b.n	354c <hif_receive+0x1a8>
		}
		goto ERR1;
	}

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
    3542:	46c0      	nop			; (mov r8, r8)
    3544:	e002      	b.n	354c <hif_receive+0x1a8>


	size = (uint16)((reg >> 2) & 0xfff);
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1,&address);
	if(ret != M2M_SUCCESS)goto ERR1;
    3546:	46c0      	nop			; (mov r8, r8)
    3548:	e000      	b.n	354c <hif_receive+0x1a8>
		goto ERR1;
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
	if(ret != M2M_SUCCESS)goto ERR1;
    354a:	46c0      	nop			; (mov r8, r8)
	}



ERR1:
	return ret;
    354c:	231f      	movs	r3, #31
    354e:	18fb      	adds	r3, r7, r3
    3550:	781b      	ldrb	r3, [r3, #0]
    3552:	b25b      	sxtb	r3, r3
}
    3554:	0018      	movs	r0, r3
    3556:	46bd      	mov	sp, r7
    3558:	b009      	add	sp, #36	; 0x24
    355a:	bd90      	pop	{r4, r7, pc}
    355c:	200000c2 	.word	0x200000c2
    3560:	00002971 	.word	0x00002971
    3564:	00000269 	.word	0x00000269
    3568:	00011614 	.word	0x00011614
    356c:	00011390 	.word	0x00011390
    3570:	000100d1 	.word	0x000100d1
    3574:	0001151c 	.word	0x0001151c
    3578:	000101f1 	.word	0x000101f1
    357c:	00010105 	.word	0x00010105
    3580:	00001070 	.word	0x00001070
    3584:	00004b05 	.word	0x00004b05
    3588:	00001084 	.word	0x00001084
    358c:	0000027a 	.word	0x0000027a
    3590:	0001153c 	.word	0x0001153c
    3594:	00011580 	.word	0x00011580
    3598:	00004b79 	.word	0x00004b79

0000359c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
    359c:	b580      	push	{r7, lr}
    359e:	b084      	sub	sp, #16
    35a0:	af00      	add	r7, sp, #0
    35a2:	0002      	movs	r2, r0
    35a4:	6039      	str	r1, [r7, #0]
    35a6:	1dfb      	adds	r3, r7, #7
    35a8:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    35aa:	230f      	movs	r3, #15
    35ac:	18fb      	adds	r3, r7, r3
    35ae:	2200      	movs	r2, #0
    35b0:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
    35b2:	1dfb      	adds	r3, r7, #7
    35b4:	781b      	ldrb	r3, [r3, #0]
    35b6:	2b07      	cmp	r3, #7
    35b8:	d81c      	bhi.n	35f4 <hif_register_cb+0x58>
    35ba:	009a      	lsls	r2, r3, #2
    35bc:	4b1c      	ldr	r3, [pc, #112]	; (3630 <hif_register_cb+0x94>)
    35be:	18d3      	adds	r3, r2, r3
    35c0:	681b      	ldr	r3, [r3, #0]
    35c2:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			pfIpCb = fn;
    35c4:	4b1b      	ldr	r3, [pc, #108]	; (3634 <hif_register_cb+0x98>)
    35c6:	683a      	ldr	r2, [r7, #0]
    35c8:	601a      	str	r2, [r3, #0]
			break;
    35ca:	e028      	b.n	361e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_WIFI:
			pfWifiCb = fn;
    35cc:	4b1a      	ldr	r3, [pc, #104]	; (3638 <hif_register_cb+0x9c>)
    35ce:	683a      	ldr	r2, [r7, #0]
    35d0:	601a      	str	r2, [r3, #0]
			break;
    35d2:	e024      	b.n	361e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_OTA:
			pfOtaCb = fn;
    35d4:	4b19      	ldr	r3, [pc, #100]	; (363c <hif_register_cb+0xa0>)
    35d6:	683a      	ldr	r2, [r7, #0]
    35d8:	601a      	str	r2, [r3, #0]
			break;
    35da:	e020      	b.n	361e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_HIF:
			pfHifCb = fn;
    35dc:	4b18      	ldr	r3, [pc, #96]	; (3640 <hif_register_cb+0xa4>)
    35de:	683a      	ldr	r2, [r7, #0]
    35e0:	601a      	str	r2, [r3, #0]
			break;
    35e2:	e01c      	b.n	361e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_CRYPTO:
			pfCryptoCb = fn;
    35e4:	4b17      	ldr	r3, [pc, #92]	; (3644 <hif_register_cb+0xa8>)
    35e6:	683a      	ldr	r2, [r7, #0]
    35e8:	601a      	str	r2, [r3, #0]
			break;
    35ea:	e018      	b.n	361e <hif_register_cb+0x82>
		case M2M_REQ_GROUP_SIGMA:
			pfSigmaCb = fn;
    35ec:	4b16      	ldr	r3, [pc, #88]	; (3648 <hif_register_cb+0xac>)
    35ee:	683a      	ldr	r2, [r7, #0]
    35f0:	601a      	str	r2, [r3, #0]
			break;
    35f2:	e014      	b.n	361e <hif_register_cb+0x82>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
    35f4:	4a15      	ldr	r2, [pc, #84]	; (364c <hif_register_cb+0xb0>)
    35f6:	4916      	ldr	r1, [pc, #88]	; (3650 <hif_register_cb+0xb4>)
    35f8:	4b16      	ldr	r3, [pc, #88]	; (3654 <hif_register_cb+0xb8>)
    35fa:	0018      	movs	r0, r3
    35fc:	4b16      	ldr	r3, [pc, #88]	; (3658 <hif_register_cb+0xbc>)
    35fe:	4798      	blx	r3
    3600:	1dfb      	adds	r3, r7, #7
    3602:	781a      	ldrb	r2, [r3, #0]
    3604:	4b15      	ldr	r3, [pc, #84]	; (365c <hif_register_cb+0xc0>)
    3606:	0011      	movs	r1, r2
    3608:	0018      	movs	r0, r3
    360a:	4b13      	ldr	r3, [pc, #76]	; (3658 <hif_register_cb+0xbc>)
    360c:	4798      	blx	r3
    360e:	200d      	movs	r0, #13
    3610:	4b13      	ldr	r3, [pc, #76]	; (3660 <hif_register_cb+0xc4>)
    3612:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3614:	230f      	movs	r3, #15
    3616:	18fb      	adds	r3, r7, r3
    3618:	22f4      	movs	r2, #244	; 0xf4
    361a:	701a      	strb	r2, [r3, #0]
			break;
    361c:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
    361e:	230f      	movs	r3, #15
    3620:	18fb      	adds	r3, r7, r3
    3622:	781b      	ldrb	r3, [r3, #0]
    3624:	b25b      	sxtb	r3, r3
}
    3626:	0018      	movs	r0, r3
    3628:	46bd      	mov	sp, r7
    362a:	b004      	add	sp, #16
    362c:	bd80      	pop	{r7, pc}
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	000115d0 	.word	0x000115d0
    3634:	200000c8 	.word	0x200000c8
    3638:	200000c4 	.word	0x200000c4
    363c:	200000cc 	.word	0x200000cc
    3640:	200000d4 	.word	0x200000d4
    3644:	200000d8 	.word	0x200000d8
    3648:	200000d0 	.word	0x200000d0
    364c:	000002b9 	.word	0x000002b9
    3650:	00011620 	.word	0x00011620
    3654:	00011390 	.word	0x00011390
    3658:	000100d1 	.word	0x000100d1
    365c:	000115c4 	.word	0x000115c4
    3660:	00010105 	.word	0x00010105

00003664 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
    3664:	b590      	push	{r4, r7, lr}
    3666:	b0ad      	sub	sp, #180	; 0xb4
    3668:	af02      	add	r7, sp, #8
    366a:	603a      	str	r2, [r7, #0]
    366c:	1dfb      	adds	r3, r7, #7
    366e:	1c02      	adds	r2, r0, #0
    3670:	701a      	strb	r2, [r3, #0]
    3672:	1d3b      	adds	r3, r7, #4
    3674:	1c0a      	adds	r2, r1, #0
    3676:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
    3678:	1dfb      	adds	r3, r7, #7
    367a:	781b      	ldrb	r3, [r3, #0]
    367c:	2b2c      	cmp	r3, #44	; 0x2c
    367e:	d116      	bne.n	36ae <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
    3680:	239c      	movs	r3, #156	; 0x9c
    3682:	18f9      	adds	r1, r7, r3
    3684:	6838      	ldr	r0, [r7, #0]
    3686:	2300      	movs	r3, #0
    3688:	2204      	movs	r2, #4
    368a:	4ccc      	ldr	r4, [pc, #816]	; (39bc <m2m_wifi_cb+0x358>)
    368c:	47a0      	blx	r4
    368e:	1e03      	subs	r3, r0, #0
    3690:	d000      	beq.n	3694 <m2m_wifi_cb+0x30>
    3692:	e1b6      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    3694:	4bca      	ldr	r3, [pc, #808]	; (39c0 <m2m_wifi_cb+0x35c>)
    3696:	681b      	ldr	r3, [r3, #0]
    3698:	2b00      	cmp	r3, #0
    369a:	d100      	bne.n	369e <m2m_wifi_cb+0x3a>
    369c:	e1b1      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
    369e:	4bc8      	ldr	r3, [pc, #800]	; (39c0 <m2m_wifi_cb+0x35c>)
    36a0:	681b      	ldr	r3, [r3, #0]
    36a2:	229c      	movs	r2, #156	; 0x9c
    36a4:	18ba      	adds	r2, r7, r2
    36a6:	0011      	movs	r1, r2
    36a8:	202c      	movs	r0, #44	; 0x2c
    36aa:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    36ac:	e1a9      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
    36ae:	1dfb      	adds	r3, r7, #7
    36b0:	781b      	ldrb	r3, [r3, #0]
    36b2:	2b1b      	cmp	r3, #27
    36b4:	d116      	bne.n	36e4 <m2m_wifi_cb+0x80>
	{
		tstrSystemTime strSysTime;
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
    36b6:	2394      	movs	r3, #148	; 0x94
    36b8:	18f9      	adds	r1, r7, r3
    36ba:	6838      	ldr	r0, [r7, #0]
    36bc:	2300      	movs	r3, #0
    36be:	2208      	movs	r2, #8
    36c0:	4cbe      	ldr	r4, [pc, #760]	; (39bc <m2m_wifi_cb+0x358>)
    36c2:	47a0      	blx	r4
    36c4:	1e03      	subs	r3, r0, #0
    36c6:	d000      	beq.n	36ca <m2m_wifi_cb+0x66>
    36c8:	e19b      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    36ca:	4bbd      	ldr	r3, [pc, #756]	; (39c0 <m2m_wifi_cb+0x35c>)
    36cc:	681b      	ldr	r3, [r3, #0]
    36ce:	2b00      	cmp	r3, #0
    36d0:	d100      	bne.n	36d4 <m2m_wifi_cb+0x70>
    36d2:	e196      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
    36d4:	4bba      	ldr	r3, [pc, #744]	; (39c0 <m2m_wifi_cb+0x35c>)
    36d6:	681b      	ldr	r3, [r3, #0]
    36d8:	2294      	movs	r2, #148	; 0x94
    36da:	18ba      	adds	r2, r7, r2
    36dc:	0011      	movs	r1, r2
    36de:	201b      	movs	r0, #27
    36e0:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    36e2:	e18e      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
    36e4:	1dfb      	adds	r3, r7, #7
    36e6:	781b      	ldrb	r3, [r3, #0]
    36e8:	2b06      	cmp	r3, #6
    36ea:	d116      	bne.n	371a <m2m_wifi_cb+0xb6>
	{
		tstrM2MConnInfo		strConnInfo;
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
    36ec:	230c      	movs	r3, #12
    36ee:	18f9      	adds	r1, r7, r3
    36f0:	6838      	ldr	r0, [r7, #0]
    36f2:	2301      	movs	r3, #1
    36f4:	2230      	movs	r2, #48	; 0x30
    36f6:	4cb1      	ldr	r4, [pc, #708]	; (39bc <m2m_wifi_cb+0x358>)
    36f8:	47a0      	blx	r4
    36fa:	1e03      	subs	r3, r0, #0
    36fc:	d000      	beq.n	3700 <m2m_wifi_cb+0x9c>
    36fe:	e180      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    3700:	4baf      	ldr	r3, [pc, #700]	; (39c0 <m2m_wifi_cb+0x35c>)
    3702:	681b      	ldr	r3, [r3, #0]
    3704:	2b00      	cmp	r3, #0
    3706:	d100      	bne.n	370a <m2m_wifi_cb+0xa6>
    3708:	e17b      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
    370a:	4bad      	ldr	r3, [pc, #692]	; (39c0 <m2m_wifi_cb+0x35c>)
    370c:	681b      	ldr	r3, [r3, #0]
    370e:	220c      	movs	r2, #12
    3710:	18ba      	adds	r2, r7, r2
    3712:	0011      	movs	r1, r2
    3714:	2006      	movs	r0, #6
    3716:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3718:	e173      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
    371a:	1dfb      	adds	r3, r7, #7
    371c:	781b      	ldrb	r3, [r3, #0]
    371e:	2b0e      	cmp	r3, #14
    3720:	d100      	bne.n	3724 <m2m_wifi_cb+0xc0>
    3722:	e16e      	b.n	3a02 <m2m_wifi_cb+0x39e>
			if (app_wifi_recover_cb)
				app_wifi_recover_cb(strState.u8CurrState);
		}
#endif
	}
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
    3724:	1dfb      	adds	r3, r7, #7
    3726:	781b      	ldrb	r3, [r3, #0]
    3728:	2b32      	cmp	r3, #50	; 0x32
    372a:	d116      	bne.n	375a <m2m_wifi_cb+0xf6>
	{
		tstrM2MIPConfig strIpConfig;
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
    372c:	2384      	movs	r3, #132	; 0x84
    372e:	18f9      	adds	r1, r7, r3
    3730:	6838      	ldr	r0, [r7, #0]
    3732:	2300      	movs	r3, #0
    3734:	2210      	movs	r2, #16
    3736:	4ca1      	ldr	r4, [pc, #644]	; (39bc <m2m_wifi_cb+0x358>)
    3738:	47a0      	blx	r4
    373a:	1e03      	subs	r3, r0, #0
    373c:	d000      	beq.n	3740 <m2m_wifi_cb+0xdc>
    373e:	e160      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    3740:	4b9f      	ldr	r3, [pc, #636]	; (39c0 <m2m_wifi_cb+0x35c>)
    3742:	681b      	ldr	r3, [r3, #0]
    3744:	2b00      	cmp	r3, #0
    3746:	d100      	bne.n	374a <m2m_wifi_cb+0xe6>
    3748:	e15b      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
    374a:	4b9d      	ldr	r3, [pc, #628]	; (39c0 <m2m_wifi_cb+0x35c>)
    374c:	681b      	ldr	r3, [r3, #0]
    374e:	2284      	movs	r2, #132	; 0x84
    3750:	18ba      	adds	r2, r7, r2
    3752:	0011      	movs	r1, r2
    3754:	2032      	movs	r0, #50	; 0x32
    3756:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3758:	e153      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
		}
	}
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
    375a:	1dfb      	adds	r3, r7, #7
    375c:	781b      	ldrb	r3, [r3, #0]
    375e:	2b2f      	cmp	r3, #47	; 0x2f
    3760:	d11d      	bne.n	379e <m2m_wifi_cb+0x13a>
	{
		tstrM2MWPSInfo strWps;
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
    3762:	230c      	movs	r3, #12
    3764:	18fb      	adds	r3, r7, r3
    3766:	2264      	movs	r2, #100	; 0x64
    3768:	2100      	movs	r1, #0
    376a:	0018      	movs	r0, r3
    376c:	4b95      	ldr	r3, [pc, #596]	; (39c4 <m2m_wifi_cb+0x360>)
    376e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
    3770:	230c      	movs	r3, #12
    3772:	18f9      	adds	r1, r7, r3
    3774:	6838      	ldr	r0, [r7, #0]
    3776:	2300      	movs	r3, #0
    3778:	2264      	movs	r2, #100	; 0x64
    377a:	4c90      	ldr	r4, [pc, #576]	; (39bc <m2m_wifi_cb+0x358>)
    377c:	47a0      	blx	r4
    377e:	1e03      	subs	r3, r0, #0
    3780:	d000      	beq.n	3784 <m2m_wifi_cb+0x120>
    3782:	e13e      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    3784:	4b8e      	ldr	r3, [pc, #568]	; (39c0 <m2m_wifi_cb+0x35c>)
    3786:	681b      	ldr	r3, [r3, #0]
    3788:	2b00      	cmp	r3, #0
    378a:	d100      	bne.n	378e <m2m_wifi_cb+0x12a>
    378c:	e139      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
    378e:	4b8c      	ldr	r3, [pc, #560]	; (39c0 <m2m_wifi_cb+0x35c>)
    3790:	681b      	ldr	r3, [r3, #0]
    3792:	220c      	movs	r2, #12
    3794:	18ba      	adds	r2, r7, r2
    3796:	0011      	movs	r1, r2
    3798:	202f      	movs	r0, #47	; 0x2f
    379a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    379c:	e131      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
    379e:	1dfb      	adds	r3, r7, #7
    37a0:	781b      	ldrb	r3, [r3, #0]
    37a2:	2b34      	cmp	r3, #52	; 0x34
    37a4:	d13a      	bne.n	381c <m2m_wifi_cb+0x1b8>
	{
		uint32  u32ConflictedIP;
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
    37a6:	2380      	movs	r3, #128	; 0x80
    37a8:	18f9      	adds	r1, r7, r3
    37aa:	6838      	ldr	r0, [r7, #0]
    37ac:	2300      	movs	r3, #0
    37ae:	2204      	movs	r2, #4
    37b0:	4c82      	ldr	r4, [pc, #520]	; (39bc <m2m_wifi_cb+0x358>)
    37b2:	47a0      	blx	r4
    37b4:	1e03      	subs	r3, r0, #0
    37b6:	d000      	beq.n	37ba <m2m_wifi_cb+0x156>
    37b8:	e123      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
    37ba:	4b83      	ldr	r3, [pc, #524]	; (39c8 <m2m_wifi_cb+0x364>)
    37bc:	0018      	movs	r0, r3
    37be:	4b83      	ldr	r3, [pc, #524]	; (39cc <m2m_wifi_cb+0x368>)
    37c0:	4798      	blx	r3
    37c2:	2380      	movs	r3, #128	; 0x80
    37c4:	18fb      	adds	r3, r7, r3
    37c6:	681b      	ldr	r3, [r3, #0]
    37c8:	001a      	movs	r2, r3
    37ca:	23ff      	movs	r3, #255	; 0xff
    37cc:	401a      	ands	r2, r3
    37ce:	0011      	movs	r1, r2
    37d0:	2380      	movs	r3, #128	; 0x80
    37d2:	18fb      	adds	r3, r7, r3
    37d4:	681b      	ldr	r3, [r3, #0]
    37d6:	0a1b      	lsrs	r3, r3, #8
    37d8:	001a      	movs	r2, r3
    37da:	23ff      	movs	r3, #255	; 0xff
    37dc:	401a      	ands	r2, r3
    37de:	2380      	movs	r3, #128	; 0x80
    37e0:	18fb      	adds	r3, r7, r3
    37e2:	681b      	ldr	r3, [r3, #0]
    37e4:	0c1b      	lsrs	r3, r3, #16
    37e6:	0018      	movs	r0, r3
    37e8:	23ff      	movs	r3, #255	; 0xff
    37ea:	4018      	ands	r0, r3
    37ec:	0004      	movs	r4, r0
    37ee:	2380      	movs	r3, #128	; 0x80
    37f0:	18fb      	adds	r3, r7, r3
    37f2:	681b      	ldr	r3, [r3, #0]
    37f4:	0e1b      	lsrs	r3, r3, #24
    37f6:	4876      	ldr	r0, [pc, #472]	; (39d0 <m2m_wifi_cb+0x36c>)
    37f8:	9300      	str	r3, [sp, #0]
    37fa:	0023      	movs	r3, r4
    37fc:	4c73      	ldr	r4, [pc, #460]	; (39cc <m2m_wifi_cb+0x368>)
    37fe:	47a0      	blx	r4
    3800:	200d      	movs	r0, #13
    3802:	4b74      	ldr	r3, [pc, #464]	; (39d4 <m2m_wifi_cb+0x370>)
    3804:	4798      	blx	r3
				BYTE_0(u32ConflictedIP),BYTE_1(u32ConflictedIP),BYTE_2(u32ConflictedIP),BYTE_3(u32ConflictedIP));
			if (gpfAppWifiCb)
    3806:	4b6e      	ldr	r3, [pc, #440]	; (39c0 <m2m_wifi_cb+0x35c>)
    3808:	681b      	ldr	r3, [r3, #0]
    380a:	2b00      	cmp	r3, #0
    380c:	d100      	bne.n	3810 <m2m_wifi_cb+0x1ac>
    380e:	e0f8      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
    3810:	4b6b      	ldr	r3, [pc, #428]	; (39c0 <m2m_wifi_cb+0x35c>)
    3812:	681b      	ldr	r3, [r3, #0]
    3814:	2100      	movs	r1, #0
    3816:	2034      	movs	r0, #52	; 0x34
    3818:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    381a:	e0f2      	b.n	3a02 <m2m_wifi_cb+0x39e>
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);

		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
    381c:	1dfb      	adds	r3, r7, #7
    381e:	781b      	ldrb	r3, [r3, #0]
    3820:	2b11      	cmp	r3, #17
    3822:	d11e      	bne.n	3862 <m2m_wifi_cb+0x1fe>
	{
		tstrM2mScanDone strState;
		gu8scanInProgress = 0;
    3824:	4b6c      	ldr	r3, [pc, #432]	; (39d8 <m2m_wifi_cb+0x374>)
    3826:	2200      	movs	r2, #0
    3828:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
    382a:	237c      	movs	r3, #124	; 0x7c
    382c:	18f9      	adds	r1, r7, r3
    382e:	6838      	ldr	r0, [r7, #0]
    3830:	2300      	movs	r3, #0
    3832:	2204      	movs	r2, #4
    3834:	4c61      	ldr	r4, [pc, #388]	; (39bc <m2m_wifi_cb+0x358>)
    3836:	47a0      	blx	r4
    3838:	1e03      	subs	r3, r0, #0
    383a:	d000      	beq.n	383e <m2m_wifi_cb+0x1da>
    383c:	e0e1      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			gu8ChNum = strState.u8NumofCh;
    383e:	237c      	movs	r3, #124	; 0x7c
    3840:	18fb      	adds	r3, r7, r3
    3842:	781a      	ldrb	r2, [r3, #0]
    3844:	4b65      	ldr	r3, [pc, #404]	; (39dc <m2m_wifi_cb+0x378>)
    3846:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
    3848:	4b5d      	ldr	r3, [pc, #372]	; (39c0 <m2m_wifi_cb+0x35c>)
    384a:	681b      	ldr	r3, [r3, #0]
    384c:	2b00      	cmp	r3, #0
    384e:	d100      	bne.n	3852 <m2m_wifi_cb+0x1ee>
    3850:	e0d7      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
    3852:	4b5b      	ldr	r3, [pc, #364]	; (39c0 <m2m_wifi_cb+0x35c>)
    3854:	681b      	ldr	r3, [r3, #0]
    3856:	227c      	movs	r2, #124	; 0x7c
    3858:	18ba      	adds	r2, r7, r2
    385a:	0011      	movs	r1, r2
    385c:	2011      	movs	r0, #17
    385e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3860:	e0cf      	b.n	3a02 <m2m_wifi_cb+0x39e>
			gu8ChNum = strState.u8NumofCh;
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
    3862:	1dfb      	adds	r3, r7, #7
    3864:	781b      	ldrb	r3, [r3, #0]
    3866:	2b13      	cmp	r3, #19
    3868:	d116      	bne.n	3898 <m2m_wifi_cb+0x234>
	{
		tstrM2mWifiscanResult strScanResult;
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
    386a:	230c      	movs	r3, #12
    386c:	18f9      	adds	r1, r7, r3
    386e:	6838      	ldr	r0, [r7, #0]
    3870:	2300      	movs	r3, #0
    3872:	222c      	movs	r2, #44	; 0x2c
    3874:	4c51      	ldr	r4, [pc, #324]	; (39bc <m2m_wifi_cb+0x358>)
    3876:	47a0      	blx	r4
    3878:	1e03      	subs	r3, r0, #0
    387a:	d000      	beq.n	387e <m2m_wifi_cb+0x21a>
    387c:	e0c1      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    387e:	4b50      	ldr	r3, [pc, #320]	; (39c0 <m2m_wifi_cb+0x35c>)
    3880:	681b      	ldr	r3, [r3, #0]
    3882:	2b00      	cmp	r3, #0
    3884:	d100      	bne.n	3888 <m2m_wifi_cb+0x224>
    3886:	e0bc      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
    3888:	4b4d      	ldr	r3, [pc, #308]	; (39c0 <m2m_wifi_cb+0x35c>)
    388a:	681b      	ldr	r3, [r3, #0]
    388c:	220c      	movs	r2, #12
    388e:	18ba      	adds	r2, r7, r2
    3890:	0011      	movs	r1, r2
    3892:	2013      	movs	r0, #19
    3894:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3896:	e0b4      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
    3898:	1dfb      	adds	r3, r7, #7
    389a:	781b      	ldrb	r3, [r3, #0]
    389c:	2b04      	cmp	r3, #4
    389e:	d116      	bne.n	38ce <m2m_wifi_cb+0x26a>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    38a0:	23a0      	movs	r3, #160	; 0xa0
    38a2:	18f9      	adds	r1, r7, r3
    38a4:	6838      	ldr	r0, [r7, #0]
    38a6:	2300      	movs	r3, #0
    38a8:	2204      	movs	r2, #4
    38aa:	4c44      	ldr	r4, [pc, #272]	; (39bc <m2m_wifi_cb+0x358>)
    38ac:	47a0      	blx	r4
    38ae:	1e03      	subs	r3, r0, #0
    38b0:	d000      	beq.n	38b4 <m2m_wifi_cb+0x250>
    38b2:	e0a6      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    38b4:	4b42      	ldr	r3, [pc, #264]	; (39c0 <m2m_wifi_cb+0x35c>)
    38b6:	681b      	ldr	r3, [r3, #0]
    38b8:	2b00      	cmp	r3, #0
    38ba:	d100      	bne.n	38be <m2m_wifi_cb+0x25a>
    38bc:	e0a1      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
    38be:	4b40      	ldr	r3, [pc, #256]	; (39c0 <m2m_wifi_cb+0x35c>)
    38c0:	681b      	ldr	r3, [r3, #0]
    38c2:	22a0      	movs	r2, #160	; 0xa0
    38c4:	18ba      	adds	r2, r7, r2
    38c6:	0011      	movs	r1, r2
    38c8:	2004      	movs	r0, #4
    38ca:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    38cc:	e099      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
		}
	}
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
    38ce:	1dfb      	adds	r3, r7, #7
    38d0:	781b      	ldrb	r3, [r3, #0]
    38d2:	2b65      	cmp	r3, #101	; 0x65
    38d4:	d116      	bne.n	3904 <m2m_wifi_cb+0x2a0>
	{
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
    38d6:	23a0      	movs	r3, #160	; 0xa0
    38d8:	18f9      	adds	r1, r7, r3
    38da:	6838      	ldr	r0, [r7, #0]
    38dc:	2300      	movs	r3, #0
    38de:	2204      	movs	r2, #4
    38e0:	4c36      	ldr	r4, [pc, #216]	; (39bc <m2m_wifi_cb+0x358>)
    38e2:	47a0      	blx	r4
    38e4:	1e03      	subs	r3, r0, #0
    38e6:	d000      	beq.n	38ea <m2m_wifi_cb+0x286>
    38e8:	e08b      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
    38ea:	4b35      	ldr	r3, [pc, #212]	; (39c0 <m2m_wifi_cb+0x35c>)
    38ec:	681b      	ldr	r3, [r3, #0]
    38ee:	2b00      	cmp	r3, #0
    38f0:	d100      	bne.n	38f4 <m2m_wifi_cb+0x290>
    38f2:	e086      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
    38f4:	4b32      	ldr	r3, [pc, #200]	; (39c0 <m2m_wifi_cb+0x35c>)
    38f6:	681b      	ldr	r3, [r3, #0]
    38f8:	22a0      	movs	r2, #160	; 0xa0
    38fa:	18ba      	adds	r2, r7, r2
    38fc:	0011      	movs	r1, r2
    38fe:	2065      	movs	r0, #101	; 0x65
    3900:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3902:	e07e      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if (gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
    3904:	1dfb      	adds	r3, r7, #7
    3906:	781b      	ldrb	r3, [r3, #0]
    3908:	2b09      	cmp	r3, #9
    390a:	d116      	bne.n	393a <m2m_wifi_cb+0x2d6>
	{
		tstrM2MProvisionInfo	strProvInfo;
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
    390c:	230c      	movs	r3, #12
    390e:	18f9      	adds	r1, r7, r3
    3910:	6838      	ldr	r0, [r7, #0]
    3912:	2301      	movs	r3, #1
    3914:	2264      	movs	r2, #100	; 0x64
    3916:	4c29      	ldr	r4, [pc, #164]	; (39bc <m2m_wifi_cb+0x358>)
    3918:	47a0      	blx	r4
    391a:	1e03      	subs	r3, r0, #0
    391c:	d000      	beq.n	3920 <m2m_wifi_cb+0x2bc>
    391e:	e070      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    3920:	4b27      	ldr	r3, [pc, #156]	; (39c0 <m2m_wifi_cb+0x35c>)
    3922:	681b      	ldr	r3, [r3, #0]
    3924:	2b00      	cmp	r3, #0
    3926:	d100      	bne.n	392a <m2m_wifi_cb+0x2c6>
    3928:	e06b      	b.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
    392a:	4b25      	ldr	r3, [pc, #148]	; (39c0 <m2m_wifi_cb+0x35c>)
    392c:	681b      	ldr	r3, [r3, #0]
    392e:	220c      	movs	r2, #12
    3930:	18ba      	adds	r2, r7, r2
    3932:	0011      	movs	r1, r2
    3934:	2009      	movs	r0, #9
    3936:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    3938:	e063      	b.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
		}
	}
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
    393a:	1dfb      	adds	r3, r7, #7
    393c:	781b      	ldrb	r3, [r3, #0]
    393e:	2b2a      	cmp	r3, #42	; 0x2a
    3940:	d114      	bne.n	396c <m2m_wifi_cb+0x308>
	{
		tstrM2MDefaultConnResp	strResp;
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
    3942:	2378      	movs	r3, #120	; 0x78
    3944:	18f9      	adds	r1, r7, r3
    3946:	6838      	ldr	r0, [r7, #0]
    3948:	2301      	movs	r3, #1
    394a:	2204      	movs	r2, #4
    394c:	4c1b      	ldr	r4, [pc, #108]	; (39bc <m2m_wifi_cb+0x358>)
    394e:	47a0      	blx	r4
    3950:	1e03      	subs	r3, r0, #0
    3952:	d156      	bne.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if(gpfAppWifiCb)
    3954:	4b1a      	ldr	r3, [pc, #104]	; (39c0 <m2m_wifi_cb+0x35c>)
    3956:	681b      	ldr	r3, [r3, #0]
    3958:	2b00      	cmp	r3, #0
    395a:	d052      	beq.n	3a02 <m2m_wifi_cb+0x39e>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
    395c:	4b18      	ldr	r3, [pc, #96]	; (39c0 <m2m_wifi_cb+0x35c>)
    395e:	681b      	ldr	r3, [r3, #0]
    3960:	2278      	movs	r2, #120	; 0x78
    3962:	18ba      	adds	r2, r7, r2
    3964:	0011      	movs	r1, r2
    3966:	202a      	movs	r0, #42	; 0x2a
    3968:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    396a:	e04a      	b.n	3a02 <m2m_wifi_cb+0x39e>
			if(gpfAppWifiCb)
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
		}
	}
	
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
    396c:	1dfb      	adds	r3, r7, #7
    396e:	781b      	ldrb	r3, [r3, #0]
    3970:	2b20      	cmp	r3, #32
    3972:	d135      	bne.n	39e0 <m2m_wifi_cb+0x37c>
	{
		tstrPrng strPrng;
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
    3974:	2370      	movs	r3, #112	; 0x70
    3976:	18f9      	adds	r1, r7, r3
    3978:	6838      	ldr	r0, [r7, #0]
    397a:	2300      	movs	r3, #0
    397c:	2208      	movs	r2, #8
    397e:	4c0f      	ldr	r4, [pc, #60]	; (39bc <m2m_wifi_cb+0x358>)
    3980:	47a0      	blx	r4
    3982:	1e03      	subs	r3, r0, #0
    3984:	d13d      	bne.n	3a02 <m2m_wifi_cb+0x39e>
		{
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
    3986:	683b      	ldr	r3, [r7, #0]
    3988:	3308      	adds	r3, #8
    398a:	0018      	movs	r0, r3
    398c:	2370      	movs	r3, #112	; 0x70
    398e:	18fb      	adds	r3, r7, r3
    3990:	6819      	ldr	r1, [r3, #0]
    3992:	2370      	movs	r3, #112	; 0x70
    3994:	18fb      	adds	r3, r7, r3
    3996:	889a      	ldrh	r2, [r3, #4]
    3998:	2301      	movs	r3, #1
    399a:	4c08      	ldr	r4, [pc, #32]	; (39bc <m2m_wifi_cb+0x358>)
    399c:	47a0      	blx	r4
    399e:	1e03      	subs	r3, r0, #0
    39a0:	d12f      	bne.n	3a02 <m2m_wifi_cb+0x39e>
			{
				if(gpfAppWifiCb)
    39a2:	4b07      	ldr	r3, [pc, #28]	; (39c0 <m2m_wifi_cb+0x35c>)
    39a4:	681b      	ldr	r3, [r3, #0]
    39a6:	2b00      	cmp	r3, #0
    39a8:	d02b      	beq.n	3a02 <m2m_wifi_cb+0x39e>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
    39aa:	4b05      	ldr	r3, [pc, #20]	; (39c0 <m2m_wifi_cb+0x35c>)
    39ac:	681b      	ldr	r3, [r3, #0]
    39ae:	2270      	movs	r2, #112	; 0x70
    39b0:	18ba      	adds	r2, r7, r2
    39b2:	0011      	movs	r1, r2
    39b4:	2020      	movs	r0, #32
    39b6:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
    39b8:	e023      	b.n	3a02 <m2m_wifi_cb+0x39e>
    39ba:	46c0      	nop			; (mov r8, r8)
    39bc:	000033a5 	.word	0x000033a5
    39c0:	200000e0 	.word	0x200000e0
    39c4:	000027e9 	.word	0x000027e9
    39c8:	00011630 	.word	0x00011630
    39cc:	000100d1 	.word	0x000100d1
    39d0:	0001163c 	.word	0x0001163c
    39d4:	00010105 	.word	0x00010105
    39d8:	200000dd 	.word	0x200000dd
    39dc:	200000dc 	.word	0x200000dc
		}
	}
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
    39e0:	2395      	movs	r3, #149	; 0x95
    39e2:	005a      	lsls	r2, r3, #1
    39e4:	4909      	ldr	r1, [pc, #36]	; (3a0c <m2m_wifi_cb+0x3a8>)
    39e6:	4b0a      	ldr	r3, [pc, #40]	; (3a10 <m2m_wifi_cb+0x3ac>)
    39e8:	0018      	movs	r0, r3
    39ea:	4b0a      	ldr	r3, [pc, #40]	; (3a14 <m2m_wifi_cb+0x3b0>)
    39ec:	4798      	blx	r3
    39ee:	1dfb      	adds	r3, r7, #7
    39f0:	781a      	ldrb	r2, [r3, #0]
    39f2:	4b09      	ldr	r3, [pc, #36]	; (3a18 <m2m_wifi_cb+0x3b4>)
    39f4:	0011      	movs	r1, r2
    39f6:	0018      	movs	r0, r3
    39f8:	4b06      	ldr	r3, [pc, #24]	; (3a14 <m2m_wifi_cb+0x3b0>)
    39fa:	4798      	blx	r3
    39fc:	200d      	movs	r0, #13
    39fe:	4b07      	ldr	r3, [pc, #28]	; (3a1c <m2m_wifi_cb+0x3b8>)
    3a00:	4798      	blx	r3
	}
}
    3a02:	46c0      	nop			; (mov r8, r8)
    3a04:	46bd      	mov	sp, r7
    3a06:	b02b      	add	sp, #172	; 0xac
    3a08:	bd90      	pop	{r4, r7, pc}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	00011954 	.word	0x00011954
    3a10:	0001165c 	.word	0x0001165c
    3a14:	000100d1 	.word	0x000100d1
    3a18:	00011670 	.word	0x00011670
    3a1c:	00010105 	.word	0x00010105

00003a20 <m2m_wifi_init>:
	}	
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
    3a20:	b590      	push	{r4, r7, lr}
    3a22:	b08d      	sub	sp, #52	; 0x34
    3a24:	af00      	add	r7, sp, #0
    3a26:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
    3a28:	232f      	movs	r3, #47	; 0x2f
    3a2a:	18fb      	adds	r3, r7, r3
    3a2c:	2200      	movs	r2, #0
    3a2e:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
    3a30:	230b      	movs	r3, #11
    3a32:	18fb      	adds	r3, r7, r3
    3a34:	2201      	movs	r2, #1
    3a36:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
    3a38:	687b      	ldr	r3, [r7, #4]
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d104      	bne.n	3a48 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
    3a3e:	232f      	movs	r3, #47	; 0x2f
    3a40:	18fb      	adds	r3, r7, r3
    3a42:	22f4      	movs	r2, #244	; 0xf4
    3a44:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
    3a46:	e085      	b.n	3b54 <m2m_wifi_init+0x134>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
    3a48:	687b      	ldr	r3, [r7, #4]
    3a4a:	681a      	ldr	r2, [r3, #0]
    3a4c:	4b45      	ldr	r3, [pc, #276]	; (3b64 <m2m_wifi_init+0x144>)
    3a4e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
    3a50:	4b45      	ldr	r3, [pc, #276]	; (3b68 <m2m_wifi_init+0x148>)
    3a52:	2200      	movs	r2, #0
    3a54:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
    3a56:	232f      	movs	r3, #47	; 0x2f
    3a58:	18fc      	adds	r4, r7, r3
    3a5a:	230b      	movs	r3, #11
    3a5c:	18fb      	adds	r3, r7, r3
    3a5e:	0018      	movs	r0, r3
    3a60:	4b42      	ldr	r3, [pc, #264]	; (3b6c <m2m_wifi_init+0x14c>)
    3a62:	4798      	blx	r3
    3a64:	0003      	movs	r3, r0
    3a66:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    3a68:	232f      	movs	r3, #47	; 0x2f
    3a6a:	18fb      	adds	r3, r7, r3
    3a6c:	781b      	ldrb	r3, [r3, #0]
    3a6e:	b25b      	sxtb	r3, r3
    3a70:	2b00      	cmp	r3, #0
    3a72:	d16c      	bne.n	3b4e <m2m_wifi_init+0x12e>
	/* Initialize host interface module */
	ret = hif_init(NULL);
    3a74:	232f      	movs	r3, #47	; 0x2f
    3a76:	18fc      	adds	r4, r7, r3
    3a78:	2000      	movs	r0, #0
    3a7a:	4b3d      	ldr	r3, [pc, #244]	; (3b70 <m2m_wifi_init+0x150>)
    3a7c:	4798      	blx	r3
    3a7e:	0003      	movs	r3, r0
    3a80:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    3a82:	232f      	movs	r3, #47	; 0x2f
    3a84:	18fb      	adds	r3, r7, r3
    3a86:	781b      	ldrb	r3, [r3, #0]
    3a88:	b25b      	sxtb	r3, r3
    3a8a:	2b00      	cmp	r3, #0
    3a8c:	d15a      	bne.n	3b44 <m2m_wifi_init+0x124>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
    3a8e:	4b39      	ldr	r3, [pc, #228]	; (3b74 <m2m_wifi_init+0x154>)
    3a90:	0019      	movs	r1, r3
    3a92:	2001      	movs	r0, #1
    3a94:	4b38      	ldr	r3, [pc, #224]	; (3b78 <m2m_wifi_init+0x158>)
    3a96:	4798      	blx	r3

	ret = nm_get_firmware_info(&strtmp);
    3a98:	232f      	movs	r3, #47	; 0x2f
    3a9a:	18fc      	adds	r4, r7, r3
    3a9c:	230c      	movs	r3, #12
    3a9e:	18fb      	adds	r3, r7, r3
    3aa0:	0018      	movs	r0, r3
    3aa2:	4b36      	ldr	r3, [pc, #216]	; (3b7c <m2m_wifi_init+0x15c>)
    3aa4:	4798      	blx	r3
    3aa6:	0003      	movs	r3, r0
    3aa8:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch);
    3aaa:	4b35      	ldr	r3, [pc, #212]	; (3b80 <m2m_wifi_init+0x160>)
    3aac:	0018      	movs	r0, r3
    3aae:	4b35      	ldr	r3, [pc, #212]	; (3b84 <m2m_wifi_init+0x164>)
    3ab0:	4798      	blx	r3
    3ab2:	230c      	movs	r3, #12
    3ab4:	18fb      	adds	r3, r7, r3
    3ab6:	791b      	ldrb	r3, [r3, #4]
    3ab8:	0019      	movs	r1, r3
    3aba:	230c      	movs	r3, #12
    3abc:	18fb      	adds	r3, r7, r3
    3abe:	795b      	ldrb	r3, [r3, #5]
    3ac0:	001a      	movs	r2, r3
    3ac2:	230c      	movs	r3, #12
    3ac4:	18fb      	adds	r3, r7, r3
    3ac6:	799b      	ldrb	r3, [r3, #6]
    3ac8:	482f      	ldr	r0, [pc, #188]	; (3b88 <m2m_wifi_init+0x168>)
    3aca:	4c2e      	ldr	r4, [pc, #184]	; (3b84 <m2m_wifi_init+0x164>)
    3acc:	47a0      	blx	r4
    3ace:	200d      	movs	r0, #13
    3ad0:	4b2e      	ldr	r3, [pc, #184]	; (3b8c <m2m_wifi_init+0x16c>)
    3ad2:	4798      	blx	r3
	M2M_INFO("Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
    3ad4:	4b2a      	ldr	r3, [pc, #168]	; (3b80 <m2m_wifi_init+0x160>)
    3ad6:	0018      	movs	r0, r3
    3ad8:	4b2a      	ldr	r3, [pc, #168]	; (3b84 <m2m_wifi_init+0x164>)
    3ada:	4798      	blx	r3
    3adc:	230c      	movs	r3, #12
    3ade:	18fb      	adds	r3, r7, r3
    3ae0:	79db      	ldrb	r3, [r3, #7]
    3ae2:	0019      	movs	r1, r3
    3ae4:	230c      	movs	r3, #12
    3ae6:	18fb      	adds	r3, r7, r3
    3ae8:	7a1b      	ldrb	r3, [r3, #8]
    3aea:	001a      	movs	r2, r3
    3aec:	230c      	movs	r3, #12
    3aee:	18fb      	adds	r3, r7, r3
    3af0:	7a5b      	ldrb	r3, [r3, #9]
    3af2:	4827      	ldr	r0, [pc, #156]	; (3b90 <m2m_wifi_init+0x170>)
    3af4:	4c23      	ldr	r4, [pc, #140]	; (3b84 <m2m_wifi_init+0x164>)
    3af6:	47a0      	blx	r4
    3af8:	200d      	movs	r0, #13
    3afa:	4b24      	ldr	r3, [pc, #144]	; (3b8c <m2m_wifi_init+0x16c>)
    3afc:	4798      	blx	r3
	M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    3afe:	4b20      	ldr	r3, [pc, #128]	; (3b80 <m2m_wifi_init+0x160>)
    3b00:	0018      	movs	r0, r3
    3b02:	4b20      	ldr	r3, [pc, #128]	; (3b84 <m2m_wifi_init+0x164>)
    3b04:	4798      	blx	r3
    3b06:	4823      	ldr	r0, [pc, #140]	; (3b94 <m2m_wifi_init+0x174>)
    3b08:	2300      	movs	r3, #0
    3b0a:	2203      	movs	r2, #3
    3b0c:	2113      	movs	r1, #19
    3b0e:	4c1d      	ldr	r4, [pc, #116]	; (3b84 <m2m_wifi_init+0x164>)
    3b10:	47a0      	blx	r4
    3b12:	200d      	movs	r0, #13
    3b14:	4b1d      	ldr	r3, [pc, #116]	; (3b8c <m2m_wifi_init+0x16c>)
    3b16:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
    3b18:	232f      	movs	r3, #47	; 0x2f
    3b1a:	18fb      	adds	r3, r7, r3
    3b1c:	781b      	ldrb	r3, [r3, #0]
    3b1e:	b25b      	sxtb	r3, r3
    3b20:	330d      	adds	r3, #13
    3b22:	d116      	bne.n	3b52 <m2m_wifi_init+0x132>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
    3b24:	23d6      	movs	r3, #214	; 0xd6
    3b26:	33ff      	adds	r3, #255	; 0xff
    3b28:	001a      	movs	r2, r3
    3b2a:	491b      	ldr	r1, [pc, #108]	; (3b98 <m2m_wifi_init+0x178>)
    3b2c:	4b1b      	ldr	r3, [pc, #108]	; (3b9c <m2m_wifi_init+0x17c>)
    3b2e:	0018      	movs	r0, r3
    3b30:	4b14      	ldr	r3, [pc, #80]	; (3b84 <m2m_wifi_init+0x164>)
    3b32:	4798      	blx	r3
    3b34:	4b1a      	ldr	r3, [pc, #104]	; (3ba0 <m2m_wifi_init+0x180>)
    3b36:	0018      	movs	r0, r3
    3b38:	4b1a      	ldr	r3, [pc, #104]	; (3ba4 <m2m_wifi_init+0x184>)
    3b3a:	4798      	blx	r3
    3b3c:	200d      	movs	r0, #13
    3b3e:	4b13      	ldr	r3, [pc, #76]	; (3b8c <m2m_wifi_init+0x16c>)
    3b40:	4798      	blx	r3
	}

	goto _EXIT0;
    3b42:	e006      	b.n	3b52 <m2m_wifi_init+0x132>
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
	/* Initialize host interface module */
	ret = hif_init(NULL);
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
    3b44:	46c0      	nop			; (mov r8, r8)
	}

	goto _EXIT0;

_EXIT1:
	nm_drv_deinit(NULL);
    3b46:	2000      	movs	r0, #0
    3b48:	4b17      	ldr	r3, [pc, #92]	; (3ba8 <m2m_wifi_init+0x188>)
    3b4a:	4798      	blx	r3
    3b4c:	e002      	b.n	3b54 <m2m_wifi_init+0x134>
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
    3b4e:	46c0      	nop			; (mov r8, r8)
    3b50:	e000      	b.n	3b54 <m2m_wifi_init+0x134>
	if(M2M_ERR_FW_VER_MISMATCH == ret)
	{
		M2M_ERR("Mismatch Firmawre Version\n");
	}

	goto _EXIT0;
    3b52:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
_EXIT0:
	return ret;
    3b54:	232f      	movs	r3, #47	; 0x2f
    3b56:	18fb      	adds	r3, r7, r3
    3b58:	781b      	ldrb	r3, [r3, #0]
    3b5a:	b25b      	sxtb	r3, r3
}
    3b5c:	0018      	movs	r0, r3
    3b5e:	46bd      	mov	sp, r7
    3b60:	b00d      	add	sp, #52	; 0x34
    3b62:	bd90      	pop	{r4, r7, pc}
    3b64:	200000e0 	.word	0x200000e0
    3b68:	200000dd 	.word	0x200000dd
    3b6c:	00004ea5 	.word	0x00004ea5
    3b70:	00002b5d 	.word	0x00002b5d
    3b74:	00003665 	.word	0x00003665
    3b78:	0000359d 	.word	0x0000359d
    3b7c:	00004d3d 	.word	0x00004d3d
    3b80:	00011630 	.word	0x00011630
    3b84:	000100d1 	.word	0x000100d1
    3b88:	00011798 	.word	0x00011798
    3b8c:	00010105 	.word	0x00010105
    3b90:	000117b4 	.word	0x000117b4
    3b94:	000117d0 	.word	0x000117d0
    3b98:	00011960 	.word	0x00011960
    3b9c:	0001165c 	.word	0x0001165c
    3ba0:	000117ec 	.word	0x000117ec
    3ba4:	000101f1 	.word	0x000101f1
    3ba8:	00005035 	.word	0x00005035

00003bac <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    3bac:	b580      	push	{r7, lr}
    3bae:	b082      	sub	sp, #8
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    3bb4:	4b03      	ldr	r3, [pc, #12]	; (3bc4 <m2m_wifi_handle_events+0x18>)
    3bb6:	4798      	blx	r3
    3bb8:	0003      	movs	r3, r0
}
    3bba:	0018      	movs	r0, r3
    3bbc:	46bd      	mov	sp, r7
    3bbe:	b002      	add	sp, #8
    3bc0:	bd80      	pop	{r7, pc}
    3bc2:	46c0      	nop			; (mov r8, r8)
    3bc4:	00003315 	.word	0x00003315

00003bc8 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    3bc8:	b590      	push	{r4, r7, lr}
    3bca:	b087      	sub	sp, #28
    3bcc:	af02      	add	r7, sp, #8
    3bce:	60f8      	str	r0, [r7, #12]
    3bd0:	0008      	movs	r0, r1
    3bd2:	0011      	movs	r1, r2
    3bd4:	607b      	str	r3, [r7, #4]
    3bd6:	230b      	movs	r3, #11
    3bd8:	18fb      	adds	r3, r7, r3
    3bda:	1c02      	adds	r2, r0, #0
    3bdc:	701a      	strb	r2, [r3, #0]
    3bde:	230a      	movs	r3, #10
    3be0:	18fb      	adds	r3, r7, r3
    3be2:	1c0a      	adds	r2, r1, #0
    3be4:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    3be6:	687c      	ldr	r4, [r7, #4]
    3be8:	230a      	movs	r3, #10
    3bea:	18fb      	adds	r3, r7, r3
    3bec:	781a      	ldrb	r2, [r3, #0]
    3bee:	230b      	movs	r3, #11
    3bf0:	18fb      	adds	r3, r7, r3
    3bf2:	7819      	ldrb	r1, [r3, #0]
    3bf4:	68f8      	ldr	r0, [r7, #12]
    3bf6:	2300      	movs	r3, #0
    3bf8:	9301      	str	r3, [sp, #4]
    3bfa:	2320      	movs	r3, #32
    3bfc:	18fb      	adds	r3, r7, r3
    3bfe:	881b      	ldrh	r3, [r3, #0]
    3c00:	9300      	str	r3, [sp, #0]
    3c02:	0023      	movs	r3, r4
    3c04:	4c03      	ldr	r4, [pc, #12]	; (3c14 <m2m_wifi_connect+0x4c>)
    3c06:	47a0      	blx	r4
    3c08:	0003      	movs	r3, r0
}
    3c0a:	0018      	movs	r0, r3
    3c0c:	46bd      	mov	sp, r7
    3c0e:	b005      	add	sp, #20
    3c10:	bd90      	pop	{r4, r7, pc}
    3c12:	46c0      	nop			; (mov r8, r8)
    3c14:	00003c19 	.word	0x00003c19

00003c18 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    3c18:	b5b0      	push	{r4, r5, r7, lr}
    3c1a:	b0aa      	sub	sp, #168	; 0xa8
    3c1c:	af04      	add	r7, sp, #16
    3c1e:	60f8      	str	r0, [r7, #12]
    3c20:	0008      	movs	r0, r1
    3c22:	0011      	movs	r1, r2
    3c24:	607b      	str	r3, [r7, #4]
    3c26:	230b      	movs	r3, #11
    3c28:	18fb      	adds	r3, r7, r3
    3c2a:	1c02      	adds	r2, r0, #0
    3c2c:	701a      	strb	r2, [r3, #0]
    3c2e:	230a      	movs	r3, #10
    3c30:	18fb      	adds	r3, r7, r3
    3c32:	1c0a      	adds	r2, r1, #0
    3c34:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    3c36:	2397      	movs	r3, #151	; 0x97
    3c38:	18fb      	adds	r3, r7, r3
    3c3a:	2200      	movs	r2, #0
    3c3c:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    3c3e:	230a      	movs	r3, #10
    3c40:	18fb      	adds	r3, r7, r3
    3c42:	781b      	ldrb	r3, [r3, #0]
    3c44:	2b01      	cmp	r3, #1
    3c46:	d100      	bne.n	3c4a <m2m_wifi_connect_sc+0x32>
    3c48:	e083      	b.n	3d52 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    3c4a:	687b      	ldr	r3, [r7, #4]
    3c4c:	2b00      	cmp	r3, #0
    3c4e:	d111      	bne.n	3c74 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    3c50:	4ad8      	ldr	r2, [pc, #864]	; (3fb4 <m2m_wifi_connect_sc+0x39c>)
    3c52:	49d9      	ldr	r1, [pc, #868]	; (3fb8 <m2m_wifi_connect_sc+0x3a0>)
    3c54:	4bd9      	ldr	r3, [pc, #868]	; (3fbc <m2m_wifi_connect_sc+0x3a4>)
    3c56:	0018      	movs	r0, r3
    3c58:	4bd9      	ldr	r3, [pc, #868]	; (3fc0 <m2m_wifi_connect_sc+0x3a8>)
    3c5a:	4798      	blx	r3
    3c5c:	4bd9      	ldr	r3, [pc, #868]	; (3fc4 <m2m_wifi_connect_sc+0x3ac>)
    3c5e:	0018      	movs	r0, r3
    3c60:	4bd9      	ldr	r3, [pc, #868]	; (3fc8 <m2m_wifi_connect_sc+0x3b0>)
    3c62:	4798      	blx	r3
    3c64:	200d      	movs	r0, #13
    3c66:	4bd9      	ldr	r3, [pc, #868]	; (3fcc <m2m_wifi_connect_sc+0x3b4>)
    3c68:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3c6a:	2397      	movs	r3, #151	; 0x97
    3c6c:	18fb      	adds	r3, r7, r3
    3c6e:	22f4      	movs	r2, #244	; 0xf4
    3c70:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3c72:	e1ef      	b.n	4054 <m2m_wifi_connect_sc+0x43c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    3c74:	230a      	movs	r3, #10
    3c76:	18fb      	adds	r3, r7, r3
    3c78:	781b      	ldrb	r3, [r3, #0]
    3c7a:	2b02      	cmp	r3, #2
    3c7c:	d169      	bne.n	3d52 <m2m_wifi_connect_sc+0x13a>
    3c7e:	687b      	ldr	r3, [r7, #4]
    3c80:	0018      	movs	r0, r3
    3c82:	4bd3      	ldr	r3, [pc, #844]	; (3fd0 <m2m_wifi_connect_sc+0x3b8>)
    3c84:	4798      	blx	r3
    3c86:	1e03      	subs	r3, r0, #0
    3c88:	2b40      	cmp	r3, #64	; 0x40
    3c8a:	d162      	bne.n	3d52 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    3c8c:	2396      	movs	r3, #150	; 0x96
    3c8e:	18fb      	adds	r3, r7, r3
    3c90:	2200      	movs	r2, #0
    3c92:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    3c94:	687b      	ldr	r3, [r7, #4]
    3c96:	2290      	movs	r2, #144	; 0x90
    3c98:	18ba      	adds	r2, r7, r2
    3c9a:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    3c9c:	e054      	b.n	3d48 <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    3c9e:	2396      	movs	r3, #150	; 0x96
    3ca0:	18fb      	adds	r3, r7, r3
    3ca2:	781b      	ldrb	r3, [r3, #0]
    3ca4:	2290      	movs	r2, #144	; 0x90
    3ca6:	18ba      	adds	r2, r7, r2
    3ca8:	6812      	ldr	r2, [r2, #0]
    3caa:	18d3      	adds	r3, r2, r3
    3cac:	781b      	ldrb	r3, [r3, #0]
    3cae:	2b2f      	cmp	r3, #47	; 0x2f
    3cb0:	d931      	bls.n	3d16 <m2m_wifi_connect_sc+0xfe>
    3cb2:	2396      	movs	r3, #150	; 0x96
    3cb4:	18fb      	adds	r3, r7, r3
    3cb6:	781b      	ldrb	r3, [r3, #0]
    3cb8:	2290      	movs	r2, #144	; 0x90
    3cba:	18ba      	adds	r2, r7, r2
    3cbc:	6812      	ldr	r2, [r2, #0]
    3cbe:	18d3      	adds	r3, r2, r3
    3cc0:	781b      	ldrb	r3, [r3, #0]
    3cc2:	2b39      	cmp	r3, #57	; 0x39
    3cc4:	d909      	bls.n	3cda <m2m_wifi_connect_sc+0xc2>
    3cc6:	2396      	movs	r3, #150	; 0x96
    3cc8:	18fb      	adds	r3, r7, r3
    3cca:	781b      	ldrb	r3, [r3, #0]
    3ccc:	2290      	movs	r2, #144	; 0x90
    3cce:	18ba      	adds	r2, r7, r2
    3cd0:	6812      	ldr	r2, [r2, #0]
    3cd2:	18d3      	adds	r3, r2, r3
    3cd4:	781b      	ldrb	r3, [r3, #0]
    3cd6:	2b40      	cmp	r3, #64	; 0x40
    3cd8:	d91d      	bls.n	3d16 <m2m_wifi_connect_sc+0xfe>
    3cda:	2396      	movs	r3, #150	; 0x96
    3cdc:	18fb      	adds	r3, r7, r3
    3cde:	781b      	ldrb	r3, [r3, #0]
    3ce0:	2290      	movs	r2, #144	; 0x90
    3ce2:	18ba      	adds	r2, r7, r2
    3ce4:	6812      	ldr	r2, [r2, #0]
    3ce6:	18d3      	adds	r3, r2, r3
    3ce8:	781b      	ldrb	r3, [r3, #0]
    3cea:	2b46      	cmp	r3, #70	; 0x46
    3cec:	d909      	bls.n	3d02 <m2m_wifi_connect_sc+0xea>
    3cee:	2396      	movs	r3, #150	; 0x96
    3cf0:	18fb      	adds	r3, r7, r3
    3cf2:	781b      	ldrb	r3, [r3, #0]
    3cf4:	2290      	movs	r2, #144	; 0x90
    3cf6:	18ba      	adds	r2, r7, r2
    3cf8:	6812      	ldr	r2, [r2, #0]
    3cfa:	18d3      	adds	r3, r2, r3
    3cfc:	781b      	ldrb	r3, [r3, #0]
    3cfe:	2b60      	cmp	r3, #96	; 0x60
    3d00:	d909      	bls.n	3d16 <m2m_wifi_connect_sc+0xfe>
    3d02:	2396      	movs	r3, #150	; 0x96
    3d04:	18fb      	adds	r3, r7, r3
    3d06:	781b      	ldrb	r3, [r3, #0]
    3d08:	2290      	movs	r2, #144	; 0x90
    3d0a:	18ba      	adds	r2, r7, r2
    3d0c:	6812      	ldr	r2, [r2, #0]
    3d0e:	18d3      	adds	r3, r2, r3
    3d10:	781b      	ldrb	r3, [r3, #0]
    3d12:	2b66      	cmp	r3, #102	; 0x66
    3d14:	d911      	bls.n	3d3a <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    3d16:	4aaf      	ldr	r2, [pc, #700]	; (3fd4 <m2m_wifi_connect_sc+0x3bc>)
    3d18:	49a7      	ldr	r1, [pc, #668]	; (3fb8 <m2m_wifi_connect_sc+0x3a0>)
    3d1a:	4ba8      	ldr	r3, [pc, #672]	; (3fbc <m2m_wifi_connect_sc+0x3a4>)
    3d1c:	0018      	movs	r0, r3
    3d1e:	4ba8      	ldr	r3, [pc, #672]	; (3fc0 <m2m_wifi_connect_sc+0x3a8>)
    3d20:	4798      	blx	r3
    3d22:	4bad      	ldr	r3, [pc, #692]	; (3fd8 <m2m_wifi_connect_sc+0x3c0>)
    3d24:	0018      	movs	r0, r3
    3d26:	4ba8      	ldr	r3, [pc, #672]	; (3fc8 <m2m_wifi_connect_sc+0x3b0>)
    3d28:	4798      	blx	r3
    3d2a:	200d      	movs	r0, #13
    3d2c:	4ba7      	ldr	r3, [pc, #668]	; (3fcc <m2m_wifi_connect_sc+0x3b4>)
    3d2e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    3d30:	2397      	movs	r3, #151	; 0x97
    3d32:	18fb      	adds	r3, r7, r3
    3d34:	22f4      	movs	r2, #244	; 0xf4
    3d36:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    3d38:	e18c      	b.n	4054 <m2m_wifi_connect_sc+0x43c>
				}
				i++;
    3d3a:	2396      	movs	r3, #150	; 0x96
    3d3c:	18fb      	adds	r3, r7, r3
    3d3e:	781a      	ldrb	r2, [r3, #0]
    3d40:	2396      	movs	r3, #150	; 0x96
    3d42:	18fb      	adds	r3, r7, r3
    3d44:	3201      	adds	r2, #1
    3d46:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    3d48:	2396      	movs	r3, #150	; 0x96
    3d4a:	18fb      	adds	r3, r7, r3
    3d4c:	781b      	ldrb	r3, [r3, #0]
    3d4e:	2b3f      	cmp	r3, #63	; 0x3f
    3d50:	d9a5      	bls.n	3c9e <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    3d52:	230b      	movs	r3, #11
    3d54:	18fb      	adds	r3, r7, r3
    3d56:	781b      	ldrb	r3, [r3, #0]
    3d58:	2b00      	cmp	r3, #0
    3d5a:	d004      	beq.n	3d66 <m2m_wifi_connect_sc+0x14e>
    3d5c:	230b      	movs	r3, #11
    3d5e:	18fb      	adds	r3, r7, r3
    3d60:	781b      	ldrb	r3, [r3, #0]
    3d62:	2b20      	cmp	r3, #32
    3d64:	d911      	bls.n	3d8a <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    3d66:	4a9d      	ldr	r2, [pc, #628]	; (3fdc <m2m_wifi_connect_sc+0x3c4>)
    3d68:	4993      	ldr	r1, [pc, #588]	; (3fb8 <m2m_wifi_connect_sc+0x3a0>)
    3d6a:	4b94      	ldr	r3, [pc, #592]	; (3fbc <m2m_wifi_connect_sc+0x3a4>)
    3d6c:	0018      	movs	r0, r3
    3d6e:	4b94      	ldr	r3, [pc, #592]	; (3fc0 <m2m_wifi_connect_sc+0x3a8>)
    3d70:	4798      	blx	r3
    3d72:	4b9b      	ldr	r3, [pc, #620]	; (3fe0 <m2m_wifi_connect_sc+0x3c8>)
    3d74:	0018      	movs	r0, r3
    3d76:	4b94      	ldr	r3, [pc, #592]	; (3fc8 <m2m_wifi_connect_sc+0x3b0>)
    3d78:	4798      	blx	r3
    3d7a:	200d      	movs	r0, #13
    3d7c:	4b93      	ldr	r3, [pc, #588]	; (3fcc <m2m_wifi_connect_sc+0x3b4>)
    3d7e:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    3d80:	2397      	movs	r3, #151	; 0x97
    3d82:	18fb      	adds	r3, r7, r3
    3d84:	22f4      	movs	r2, #244	; 0xf4
    3d86:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    3d88:	e164      	b.n	4054 <m2m_wifi_connect_sc+0x43c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    3d8a:	23a8      	movs	r3, #168	; 0xa8
    3d8c:	18fb      	adds	r3, r7, r3
    3d8e:	881b      	ldrh	r3, [r3, #0]
    3d90:	2b0d      	cmp	r3, #13
    3d92:	d916      	bls.n	3dc2 <m2m_wifi_connect_sc+0x1aa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    3d94:	23a8      	movs	r3, #168	; 0xa8
    3d96:	18fb      	adds	r3, r7, r3
    3d98:	881b      	ldrh	r3, [r3, #0]
    3d9a:	2bff      	cmp	r3, #255	; 0xff
    3d9c:	d011      	beq.n	3dc2 <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("CH INVALID\n");
    3d9e:	4a91      	ldr	r2, [pc, #580]	; (3fe4 <m2m_wifi_connect_sc+0x3cc>)
    3da0:	4985      	ldr	r1, [pc, #532]	; (3fb8 <m2m_wifi_connect_sc+0x3a0>)
    3da2:	4b86      	ldr	r3, [pc, #536]	; (3fbc <m2m_wifi_connect_sc+0x3a4>)
    3da4:	0018      	movs	r0, r3
    3da6:	4b86      	ldr	r3, [pc, #536]	; (3fc0 <m2m_wifi_connect_sc+0x3a8>)
    3da8:	4798      	blx	r3
    3daa:	4b8f      	ldr	r3, [pc, #572]	; (3fe8 <m2m_wifi_connect_sc+0x3d0>)
    3dac:	0018      	movs	r0, r3
    3dae:	4b86      	ldr	r3, [pc, #536]	; (3fc8 <m2m_wifi_connect_sc+0x3b0>)
    3db0:	4798      	blx	r3
    3db2:	200d      	movs	r0, #13
    3db4:	4b85      	ldr	r3, [pc, #532]	; (3fcc <m2m_wifi_connect_sc+0x3b4>)
    3db6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3db8:	2397      	movs	r3, #151	; 0x97
    3dba:	18fb      	adds	r3, r7, r3
    3dbc:	22f4      	movs	r2, #244	; 0xf4
    3dbe:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3dc0:	e148      	b.n	4054 <m2m_wifi_connect_sc+0x43c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    3dc2:	230b      	movs	r3, #11
    3dc4:	18fb      	adds	r3, r7, r3
    3dc6:	781a      	ldrb	r2, [r3, #0]
    3dc8:	68f9      	ldr	r1, [r7, #12]
    3dca:	2314      	movs	r3, #20
    3dcc:	18fb      	adds	r3, r7, r3
    3dce:	3346      	adds	r3, #70	; 0x46
    3dd0:	0018      	movs	r0, r3
    3dd2:	4b86      	ldr	r3, [pc, #536]	; (3fec <m2m_wifi_connect_sc+0x3d4>)
    3dd4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    3dd6:	230b      	movs	r3, #11
    3dd8:	18fb      	adds	r3, r7, r3
    3dda:	781b      	ldrb	r3, [r3, #0]
    3ddc:	2214      	movs	r2, #20
    3dde:	18ba      	adds	r2, r7, r2
    3de0:	2146      	movs	r1, #70	; 0x46
    3de2:	18d3      	adds	r3, r2, r3
    3de4:	185b      	adds	r3, r3, r1
    3de6:	2200      	movs	r2, #0
    3de8:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    3dea:	2314      	movs	r3, #20
    3dec:	18fb      	adds	r3, r7, r3
    3dee:	22a8      	movs	r2, #168	; 0xa8
    3df0:	18ba      	adds	r2, r7, r2
    3df2:	2144      	movs	r1, #68	; 0x44
    3df4:	8812      	ldrh	r2, [r2, #0]
    3df6:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    3df8:	23ac      	movs	r3, #172	; 0xac
    3dfa:	18fb      	adds	r3, r7, r3
    3dfc:	781b      	ldrb	r3, [r3, #0]
    3dfe:	1e5a      	subs	r2, r3, #1
    3e00:	4193      	sbcs	r3, r2
    3e02:	b2db      	uxtb	r3, r3
    3e04:	0019      	movs	r1, r3
    3e06:	2314      	movs	r3, #20
    3e08:	18fb      	adds	r3, r7, r3
    3e0a:	2267      	movs	r2, #103	; 0x67
    3e0c:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    3e0e:	2314      	movs	r3, #20
    3e10:	18fb      	adds	r3, r7, r3
    3e12:	228c      	movs	r2, #140	; 0x8c
    3e14:	18ba      	adds	r2, r7, r2
    3e16:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    3e18:	238c      	movs	r3, #140	; 0x8c
    3e1a:	18fb      	adds	r3, r7, r3
    3e1c:	681b      	ldr	r3, [r3, #0]
    3e1e:	220a      	movs	r2, #10
    3e20:	18ba      	adds	r2, r7, r2
    3e22:	2141      	movs	r1, #65	; 0x41
    3e24:	7812      	ldrb	r2, [r2, #0]
    3e26:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    3e28:	230a      	movs	r3, #10
    3e2a:	18fb      	adds	r3, r7, r3
    3e2c:	781b      	ldrb	r3, [r3, #0]
    3e2e:	2b03      	cmp	r3, #3
    3e30:	d000      	beq.n	3e34 <m2m_wifi_connect_sc+0x21c>
    3e32:	e07b      	b.n	3f2c <m2m_wifi_connect_sc+0x314>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    3e34:	687b      	ldr	r3, [r7, #4]
    3e36:	2288      	movs	r2, #136	; 0x88
    3e38:	18ba      	adds	r2, r7, r2
    3e3a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    3e3c:	238c      	movs	r3, #140	; 0x8c
    3e3e:	18fb      	adds	r3, r7, r3
    3e40:	681b      	ldr	r3, [r3, #0]
    3e42:	2284      	movs	r2, #132	; 0x84
    3e44:	18ba      	adds	r2, r7, r2
    3e46:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    3e48:	2388      	movs	r3, #136	; 0x88
    3e4a:	18fb      	adds	r3, r7, r3
    3e4c:	681b      	ldr	r3, [r3, #0]
    3e4e:	781b      	ldrb	r3, [r3, #0]
    3e50:	3b01      	subs	r3, #1
    3e52:	b2da      	uxtb	r2, r3
    3e54:	2384      	movs	r3, #132	; 0x84
    3e56:	18fb      	adds	r3, r7, r3
    3e58:	681b      	ldr	r3, [r3, #0]
    3e5a:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    3e5c:	2384      	movs	r3, #132	; 0x84
    3e5e:	18fb      	adds	r3, r7, r3
    3e60:	681b      	ldr	r3, [r3, #0]
    3e62:	781b      	ldrb	r3, [r3, #0]
    3e64:	2b03      	cmp	r3, #3
    3e66:	d917      	bls.n	3e98 <m2m_wifi_connect_sc+0x280>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    3e68:	4a61      	ldr	r2, [pc, #388]	; (3ff0 <m2m_wifi_connect_sc+0x3d8>)
    3e6a:	4953      	ldr	r1, [pc, #332]	; (3fb8 <m2m_wifi_connect_sc+0x3a0>)
    3e6c:	4b53      	ldr	r3, [pc, #332]	; (3fbc <m2m_wifi_connect_sc+0x3a4>)
    3e6e:	0018      	movs	r0, r3
    3e70:	4b53      	ldr	r3, [pc, #332]	; (3fc0 <m2m_wifi_connect_sc+0x3a8>)
    3e72:	4798      	blx	r3
    3e74:	2384      	movs	r3, #132	; 0x84
    3e76:	18fb      	adds	r3, r7, r3
    3e78:	681b      	ldr	r3, [r3, #0]
    3e7a:	781b      	ldrb	r3, [r3, #0]
    3e7c:	001a      	movs	r2, r3
    3e7e:	4b5d      	ldr	r3, [pc, #372]	; (3ff4 <m2m_wifi_connect_sc+0x3dc>)
    3e80:	0011      	movs	r1, r2
    3e82:	0018      	movs	r0, r3
    3e84:	4b4e      	ldr	r3, [pc, #312]	; (3fc0 <m2m_wifi_connect_sc+0x3a8>)
    3e86:	4798      	blx	r3
    3e88:	200d      	movs	r0, #13
    3e8a:	4b50      	ldr	r3, [pc, #320]	; (3fcc <m2m_wifi_connect_sc+0x3b4>)
    3e8c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3e8e:	2397      	movs	r3, #151	; 0x97
    3e90:	18fb      	adds	r3, r7, r3
    3e92:	22f4      	movs	r2, #244	; 0xf4
    3e94:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3e96:	e0dd      	b.n	4054 <m2m_wifi_connect_sc+0x43c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    3e98:	2388      	movs	r3, #136	; 0x88
    3e9a:	18fb      	adds	r3, r7, r3
    3e9c:	681b      	ldr	r3, [r3, #0]
    3e9e:	785b      	ldrb	r3, [r3, #1]
    3ea0:	3b01      	subs	r3, #1
    3ea2:	b2da      	uxtb	r2, r3
    3ea4:	2384      	movs	r3, #132	; 0x84
    3ea6:	18fb      	adds	r3, r7, r3
    3ea8:	681b      	ldr	r3, [r3, #0]
    3eaa:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    3eac:	2384      	movs	r3, #132	; 0x84
    3eae:	18fb      	adds	r3, r7, r3
    3eb0:	681b      	ldr	r3, [r3, #0]
    3eb2:	785b      	ldrb	r3, [r3, #1]
    3eb4:	2b0a      	cmp	r3, #10
    3eb6:	d01e      	beq.n	3ef6 <m2m_wifi_connect_sc+0x2de>
    3eb8:	2384      	movs	r3, #132	; 0x84
    3eba:	18fb      	adds	r3, r7, r3
    3ebc:	681b      	ldr	r3, [r3, #0]
    3ebe:	785b      	ldrb	r3, [r3, #1]
    3ec0:	2b1a      	cmp	r3, #26
    3ec2:	d018      	beq.n	3ef6 <m2m_wifi_connect_sc+0x2de>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    3ec4:	2390      	movs	r3, #144	; 0x90
    3ec6:	009a      	lsls	r2, r3, #2
    3ec8:	493b      	ldr	r1, [pc, #236]	; (3fb8 <m2m_wifi_connect_sc+0x3a0>)
    3eca:	4b3c      	ldr	r3, [pc, #240]	; (3fbc <m2m_wifi_connect_sc+0x3a4>)
    3ecc:	0018      	movs	r0, r3
    3ece:	4b3c      	ldr	r3, [pc, #240]	; (3fc0 <m2m_wifi_connect_sc+0x3a8>)
    3ed0:	4798      	blx	r3
    3ed2:	2384      	movs	r3, #132	; 0x84
    3ed4:	18fb      	adds	r3, r7, r3
    3ed6:	681b      	ldr	r3, [r3, #0]
    3ed8:	785b      	ldrb	r3, [r3, #1]
    3eda:	001a      	movs	r2, r3
    3edc:	4b46      	ldr	r3, [pc, #280]	; (3ff8 <m2m_wifi_connect_sc+0x3e0>)
    3ede:	0011      	movs	r1, r2
    3ee0:	0018      	movs	r0, r3
    3ee2:	4b37      	ldr	r3, [pc, #220]	; (3fc0 <m2m_wifi_connect_sc+0x3a8>)
    3ee4:	4798      	blx	r3
    3ee6:	200d      	movs	r0, #13
    3ee8:	4b38      	ldr	r3, [pc, #224]	; (3fcc <m2m_wifi_connect_sc+0x3b4>)
    3eea:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3eec:	2397      	movs	r3, #151	; 0x97
    3eee:	18fb      	adds	r3, r7, r3
    3ef0:	22f4      	movs	r2, #244	; 0xf4
    3ef2:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3ef4:	e0ae      	b.n	4054 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    3ef6:	2384      	movs	r3, #132	; 0x84
    3ef8:	18fb      	adds	r3, r7, r3
    3efa:	681b      	ldr	r3, [r3, #0]
    3efc:	1c98      	adds	r0, r3, #2
    3efe:	2388      	movs	r3, #136	; 0x88
    3f00:	18fb      	adds	r3, r7, r3
    3f02:	681b      	ldr	r3, [r3, #0]
    3f04:	1c99      	adds	r1, r3, #2
    3f06:	2388      	movs	r3, #136	; 0x88
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	681b      	ldr	r3, [r3, #0]
    3f0c:	785b      	ldrb	r3, [r3, #1]
    3f0e:	001a      	movs	r2, r3
    3f10:	4b36      	ldr	r3, [pc, #216]	; (3fec <m2m_wifi_connect_sc+0x3d4>)
    3f12:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    3f14:	2388      	movs	r3, #136	; 0x88
    3f16:	18fb      	adds	r3, r7, r3
    3f18:	681b      	ldr	r3, [r3, #0]
    3f1a:	785b      	ldrb	r3, [r3, #1]
    3f1c:	001a      	movs	r2, r3
    3f1e:	2384      	movs	r3, #132	; 0x84
    3f20:	18fb      	adds	r3, r7, r3
    3f22:	681b      	ldr	r3, [r3, #0]
    3f24:	189b      	adds	r3, r3, r2
    3f26:	2200      	movs	r2, #0
    3f28:	709a      	strb	r2, [r3, #2]
    3f2a:	e082      	b.n	4032 <m2m_wifi_connect_sc+0x41a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    3f2c:	230a      	movs	r3, #10
    3f2e:	18fb      	adds	r3, r7, r3
    3f30:	781b      	ldrb	r3, [r3, #0]
    3f32:	2b02      	cmp	r3, #2
    3f34:	d130      	bne.n	3f98 <m2m_wifi_connect_sc+0x380>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    3f36:	2382      	movs	r3, #130	; 0x82
    3f38:	18fc      	adds	r4, r7, r3
    3f3a:	687b      	ldr	r3, [r7, #4]
    3f3c:	0018      	movs	r0, r3
    3f3e:	4b24      	ldr	r3, [pc, #144]	; (3fd0 <m2m_wifi_connect_sc+0x3b8>)
    3f40:	4798      	blx	r3
    3f42:	0003      	movs	r3, r0
    3f44:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    3f46:	2382      	movs	r3, #130	; 0x82
    3f48:	18fb      	adds	r3, r7, r3
    3f4a:	881b      	ldrh	r3, [r3, #0]
    3f4c:	2b00      	cmp	r3, #0
    3f4e:	d004      	beq.n	3f5a <m2m_wifi_connect_sc+0x342>
    3f50:	2382      	movs	r3, #130	; 0x82
    3f52:	18fb      	adds	r3, r7, r3
    3f54:	881b      	ldrh	r3, [r3, #0]
    3f56:	2b40      	cmp	r3, #64	; 0x40
    3f58:	d911      	bls.n	3f7e <m2m_wifi_connect_sc+0x366>
		{
			M2M_ERR("Incorrect PSK key length\n");
    3f5a:	4a28      	ldr	r2, [pc, #160]	; (3ffc <m2m_wifi_connect_sc+0x3e4>)
    3f5c:	4916      	ldr	r1, [pc, #88]	; (3fb8 <m2m_wifi_connect_sc+0x3a0>)
    3f5e:	4b17      	ldr	r3, [pc, #92]	; (3fbc <m2m_wifi_connect_sc+0x3a4>)
    3f60:	0018      	movs	r0, r3
    3f62:	4b17      	ldr	r3, [pc, #92]	; (3fc0 <m2m_wifi_connect_sc+0x3a8>)
    3f64:	4798      	blx	r3
    3f66:	4b26      	ldr	r3, [pc, #152]	; (4000 <m2m_wifi_connect_sc+0x3e8>)
    3f68:	0018      	movs	r0, r3
    3f6a:	4b17      	ldr	r3, [pc, #92]	; (3fc8 <m2m_wifi_connect_sc+0x3b0>)
    3f6c:	4798      	blx	r3
    3f6e:	200d      	movs	r0, #13
    3f70:	4b16      	ldr	r3, [pc, #88]	; (3fcc <m2m_wifi_connect_sc+0x3b4>)
    3f72:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    3f74:	2397      	movs	r3, #151	; 0x97
    3f76:	18fb      	adds	r3, r7, r3
    3f78:	22f4      	movs	r2, #244	; 0xf4
    3f7a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    3f7c:	e06a      	b.n	4054 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    3f7e:	238c      	movs	r3, #140	; 0x8c
    3f80:	18fb      	adds	r3, r7, r3
    3f82:	6818      	ldr	r0, [r3, #0]
    3f84:	2382      	movs	r3, #130	; 0x82
    3f86:	18fb      	adds	r3, r7, r3
    3f88:	881b      	ldrh	r3, [r3, #0]
    3f8a:	3301      	adds	r3, #1
    3f8c:	001a      	movs	r2, r3
    3f8e:	687b      	ldr	r3, [r7, #4]
    3f90:	0019      	movs	r1, r3
    3f92:	4b16      	ldr	r3, [pc, #88]	; (3fec <m2m_wifi_connect_sc+0x3d4>)
    3f94:	4798      	blx	r3
    3f96:	e04c      	b.n	4032 <m2m_wifi_connect_sc+0x41a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    3f98:	230a      	movs	r3, #10
    3f9a:	18fb      	adds	r3, r7, r3
    3f9c:	781b      	ldrb	r3, [r3, #0]
    3f9e:	2b04      	cmp	r3, #4
    3fa0:	d130      	bne.n	4004 <m2m_wifi_connect_sc+0x3ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    3fa2:	238c      	movs	r3, #140	; 0x8c
    3fa4:	18fb      	adds	r3, r7, r3
    3fa6:	681b      	ldr	r3, [r3, #0]
    3fa8:	6879      	ldr	r1, [r7, #4]
    3faa:	223e      	movs	r2, #62	; 0x3e
    3fac:	0018      	movs	r0, r3
    3fae:	4b0f      	ldr	r3, [pc, #60]	; (3fec <m2m_wifi_connect_sc+0x3d4>)
    3fb0:	4798      	blx	r3
    3fb2:	e03e      	b.n	4032 <m2m_wifi_connect_sc+0x41a>
    3fb4:	00000203 	.word	0x00000203
    3fb8:	00011970 	.word	0x00011970
    3fbc:	0001165c 	.word	0x0001165c
    3fc0:	000100d1 	.word	0x000100d1
    3fc4:	00011808 	.word	0x00011808
    3fc8:	000101f1 	.word	0x000101f1
    3fcc:	00010105 	.word	0x00010105
    3fd0:	00002829 	.word	0x00002829
    3fd4:	0000020f 	.word	0x0000020f
    3fd8:	0001181c 	.word	0x0001181c
    3fdc:	00000219 	.word	0x00000219
    3fe0:	00011828 	.word	0x00011828
    3fe4:	00000222 	.word	0x00000222
    3fe8:	0001183c 	.word	0x0001183c
    3fec:	000027ad 	.word	0x000027ad
    3ff0:	00000239 	.word	0x00000239
    3ff4:	00011848 	.word	0x00011848
    3ff8:	00011864 	.word	0x00011864
    3ffc:	0000024f 	.word	0x0000024f
    4000:	00011880 	.word	0x00011880
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    4004:	230a      	movs	r3, #10
    4006:	18fb      	adds	r3, r7, r3
    4008:	781b      	ldrb	r3, [r3, #0]
    400a:	2b01      	cmp	r3, #1
    400c:	d011      	beq.n	4032 <m2m_wifi_connect_sc+0x41a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    400e:	4a15      	ldr	r2, [pc, #84]	; (4064 <m2m_wifi_connect_sc+0x44c>)
    4010:	4915      	ldr	r1, [pc, #84]	; (4068 <m2m_wifi_connect_sc+0x450>)
    4012:	4b16      	ldr	r3, [pc, #88]	; (406c <m2m_wifi_connect_sc+0x454>)
    4014:	0018      	movs	r0, r3
    4016:	4b16      	ldr	r3, [pc, #88]	; (4070 <m2m_wifi_connect_sc+0x458>)
    4018:	4798      	blx	r3
    401a:	4b16      	ldr	r3, [pc, #88]	; (4074 <m2m_wifi_connect_sc+0x45c>)
    401c:	0018      	movs	r0, r3
    401e:	4b16      	ldr	r3, [pc, #88]	; (4078 <m2m_wifi_connect_sc+0x460>)
    4020:	4798      	blx	r3
    4022:	200d      	movs	r0, #13
    4024:	4b15      	ldr	r3, [pc, #84]	; (407c <m2m_wifi_connect_sc+0x464>)
    4026:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    4028:	2397      	movs	r3, #151	; 0x97
    402a:	18fb      	adds	r3, r7, r3
    402c:	22f4      	movs	r2, #244	; 0xf4
    402e:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    4030:	e010      	b.n	4054 <m2m_wifi_connect_sc+0x43c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    4032:	2397      	movs	r3, #151	; 0x97
    4034:	18fc      	adds	r4, r7, r3
    4036:	2314      	movs	r3, #20
    4038:	18fa      	adds	r2, r7, r3
    403a:	2300      	movs	r3, #0
    403c:	9302      	str	r3, [sp, #8]
    403e:	2300      	movs	r3, #0
    4040:	9301      	str	r3, [sp, #4]
    4042:	2300      	movs	r3, #0
    4044:	9300      	str	r3, [sp, #0]
    4046:	236c      	movs	r3, #108	; 0x6c
    4048:	2128      	movs	r1, #40	; 0x28
    404a:	2001      	movs	r0, #1
    404c:	4d0c      	ldr	r5, [pc, #48]	; (4080 <m2m_wifi_connect_sc+0x468>)
    404e:	47a8      	blx	r5
    4050:	0003      	movs	r3, r0
    4052:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    4054:	2397      	movs	r3, #151	; 0x97
    4056:	18fb      	adds	r3, r7, r3
    4058:	781b      	ldrb	r3, [r3, #0]
    405a:	b25b      	sxtb	r3, r3
}
    405c:	0018      	movs	r0, r3
    405e:	46bd      	mov	sp, r7
    4060:	b026      	add	sp, #152	; 0x98
    4062:	bdb0      	pop	{r4, r5, r7, pc}
    4064:	0000025f 	.word	0x0000025f
    4068:	00011970 	.word	0x00011970
    406c:	0001165c 	.word	0x0001165c
    4070:	000100d1 	.word	0x000100d1
    4074:	0001189c 	.word	0x0001189c
    4078:	000101f1 	.word	0x000101f1
    407c:	00010105 	.word	0x00010105
    4080:	00002bc5 	.word	0x00002bc5

00004084 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8* pu8IsValid)
{
    4084:	b590      	push	{r4, r7, lr}
    4086:	b085      	sub	sp, #20
    4088:	af00      	add	r7, sp, #0
    408a:	6078      	str	r0, [r7, #4]
    408c:	6039      	str	r1, [r7, #0]
	sint8 ret = M2M_SUCCESS;
    408e:	230f      	movs	r3, #15
    4090:	18fb      	adds	r3, r7, r3
    4092:	2200      	movs	r2, #0
    4094:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    4096:	230f      	movs	r3, #15
    4098:	18fc      	adds	r4, r7, r3
    409a:	4b14      	ldr	r3, [pc, #80]	; (40ec <m2m_wifi_get_otp_mac_address+0x68>)
    409c:	4798      	blx	r3
    409e:	0003      	movs	r3, r0
    40a0:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    40a2:	230f      	movs	r3, #15
    40a4:	18fb      	adds	r3, r7, r3
    40a6:	781b      	ldrb	r3, [r3, #0]
    40a8:	b25b      	sxtb	r3, r3
    40aa:	2b00      	cmp	r3, #0
    40ac:	d115      	bne.n	40da <m2m_wifi_get_otp_mac_address+0x56>
	{
		ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
    40ae:	230f      	movs	r3, #15
    40b0:	18fc      	adds	r4, r7, r3
    40b2:	683a      	ldr	r2, [r7, #0]
    40b4:	687b      	ldr	r3, [r7, #4]
    40b6:	0011      	movs	r1, r2
    40b8:	0018      	movs	r0, r3
    40ba:	4b0d      	ldr	r3, [pc, #52]	; (40f0 <m2m_wifi_get_otp_mac_address+0x6c>)
    40bc:	4798      	blx	r3
    40be:	0003      	movs	r3, r0
    40c0:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    40c2:	230f      	movs	r3, #15
    40c4:	18fb      	adds	r3, r7, r3
    40c6:	781b      	ldrb	r3, [r3, #0]
    40c8:	b25b      	sxtb	r3, r3
    40ca:	2b00      	cmp	r3, #0
    40cc:	d105      	bne.n	40da <m2m_wifi_get_otp_mac_address+0x56>
		{
			ret = hif_chip_sleep();
    40ce:	230f      	movs	r3, #15
    40d0:	18fc      	adds	r4, r7, r3
    40d2:	4b08      	ldr	r3, [pc, #32]	; (40f4 <m2m_wifi_get_otp_mac_address+0x70>)
    40d4:	4798      	blx	r3
    40d6:	0003      	movs	r3, r0
    40d8:	7023      	strb	r3, [r4, #0]
		}
	}
	return ret;
    40da:	230f      	movs	r3, #15
    40dc:	18fb      	adds	r3, r7, r3
    40de:	781b      	ldrb	r3, [r3, #0]
    40e0:	b25b      	sxtb	r3, r3
}
    40e2:	0018      	movs	r0, r3
    40e4:	46bd      	mov	sp, r7
    40e6:	b005      	add	sp, #20
    40e8:	bd90      	pop	{r4, r7, pc}
    40ea:	46c0      	nop			; (mov r8, r8)
    40ec:	000029f9 	.word	0x000029f9
    40f0:	000048b5 	.word	0x000048b5
    40f4:	00002a91 	.word	0x00002a91

000040f8 <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address             
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
    40f8:	b590      	push	{r4, r7, lr}
    40fa:	b085      	sub	sp, #20
    40fc:	af00      	add	r7, sp, #0
    40fe:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    4100:	230f      	movs	r3, #15
    4102:	18fb      	adds	r3, r7, r3
    4104:	2200      	movs	r2, #0
    4106:	701a      	strb	r2, [r3, #0]
	ret = hif_chip_wake();
    4108:	230f      	movs	r3, #15
    410a:	18fc      	adds	r4, r7, r3
    410c:	4b12      	ldr	r3, [pc, #72]	; (4158 <m2m_wifi_get_mac_address+0x60>)
    410e:	4798      	blx	r3
    4110:	0003      	movs	r3, r0
    4112:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    4114:	230f      	movs	r3, #15
    4116:	18fb      	adds	r3, r7, r3
    4118:	781b      	ldrb	r3, [r3, #0]
    411a:	b25b      	sxtb	r3, r3
    411c:	2b00      	cmp	r3, #0
    411e:	d113      	bne.n	4148 <m2m_wifi_get_mac_address+0x50>
	{
		ret = nmi_get_mac_address(pu8MacAddr);
    4120:	230f      	movs	r3, #15
    4122:	18fc      	adds	r4, r7, r3
    4124:	687b      	ldr	r3, [r7, #4]
    4126:	0018      	movs	r0, r3
    4128:	4b0c      	ldr	r3, [pc, #48]	; (415c <m2m_wifi_get_mac_address+0x64>)
    412a:	4798      	blx	r3
    412c:	0003      	movs	r3, r0
    412e:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
    4130:	230f      	movs	r3, #15
    4132:	18fb      	adds	r3, r7, r3
    4134:	781b      	ldrb	r3, [r3, #0]
    4136:	b25b      	sxtb	r3, r3
    4138:	2b00      	cmp	r3, #0
    413a:	d105      	bne.n	4148 <m2m_wifi_get_mac_address+0x50>
		{
			ret = hif_chip_sleep();
    413c:	230f      	movs	r3, #15
    413e:	18fc      	adds	r4, r7, r3
    4140:	4b07      	ldr	r3, [pc, #28]	; (4160 <m2m_wifi_get_mac_address+0x68>)
    4142:	4798      	blx	r3
    4144:	0003      	movs	r3, r0
    4146:	7023      	strb	r3, [r4, #0]
		}
	}

	return ret;
    4148:	230f      	movs	r3, #15
    414a:	18fb      	adds	r3, r7, r3
    414c:	781b      	ldrb	r3, [r3, #0]
    414e:	b25b      	sxtb	r3, r3
}
    4150:	0018      	movs	r0, r3
    4152:	46bd      	mov	sp, r7
    4154:	b005      	add	sp, #20
    4156:	bd90      	pop	{r4, r7, pc}
    4158:	000029f9 	.word	0x000029f9
    415c:	000049b9 	.word	0x000049b9
    4160:	00002a91 	.word	0x00002a91

00004164 <chip_apply_conf>:
#define M2M_DISABLE_PS				(0xd0ul)

static uint32 clk_status_reg_adr = 0xf; /* Assume initially it is B0 chip */

sint8 chip_apply_conf(uint32 u32Conf)
{
    4164:	b590      	push	{r4, r7, lr}
    4166:	b087      	sub	sp, #28
    4168:	af00      	add	r7, sp, #0
    416a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    416c:	2317      	movs	r3, #23
    416e:	18fb      	adds	r3, r7, r3
    4170:	2200      	movs	r2, #0
    4172:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
    4174:	687b      	ldr	r3, [r7, #4]
    4176:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
	val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
    4178:	693a      	ldr	r2, [r7, #16]
    417a:	23a5      	movs	r3, #165	; 0xa5
    417c:	015b      	lsls	r3, r3, #5
    417e:	0011      	movs	r1, r2
    4180:	0018      	movs	r0, r3
    4182:	4b13      	ldr	r3, [pc, #76]	; (41d0 <chip_apply_conf+0x6c>)
    4184:	4798      	blx	r3
		if(val32 != 0) {		
    4186:	693b      	ldr	r3, [r7, #16]
    4188:	2b00      	cmp	r3, #0
    418a:	d018      	beq.n	41be <chip_apply_conf+0x5a>
			uint32 reg = 0;
    418c:	2300      	movs	r3, #0
    418e:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
    4190:	2317      	movs	r3, #23
    4192:	18fc      	adds	r4, r7, r3
    4194:	230c      	movs	r3, #12
    4196:	18fa      	adds	r2, r7, r3
    4198:	23a5      	movs	r3, #165	; 0xa5
    419a:	015b      	lsls	r3, r3, #5
    419c:	0011      	movs	r1, r2
    419e:	0018      	movs	r0, r3
    41a0:	4b0c      	ldr	r3, [pc, #48]	; (41d4 <chip_apply_conf+0x70>)
    41a2:	4798      	blx	r3
    41a4:	0003      	movs	r3, r0
    41a6:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    41a8:	2317      	movs	r3, #23
    41aa:	18fb      	adds	r3, r7, r3
    41ac:	781b      	ldrb	r3, [r3, #0]
    41ae:	b25b      	sxtb	r3, r3
    41b0:	2b00      	cmp	r3, #0
    41b2:	d1e1      	bne.n	4178 <chip_apply_conf+0x14>
				if(reg == val32)
    41b4:	68fa      	ldr	r2, [r7, #12]
    41b6:	693b      	ldr	r3, [r7, #16]
    41b8:	429a      	cmp	r2, r3
    41ba:	d002      	beq.n	41c2 <chip_apply_conf+0x5e>
					break;
			}
		} else {
			break;
		}
	} while(1);
    41bc:	e7dc      	b.n	4178 <chip_apply_conf+0x14>
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
			}
		} else {
			break;
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	e000      	b.n	41c4 <chip_apply_conf+0x60>
		if(val32 != 0) {		
			uint32 reg = 0;
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
			if(ret == M2M_SUCCESS) {
				if(reg == val32)
					break;
    41c2:	46c0      	nop			; (mov r8, r8)
		} else {
			break;
		}
	} while(1);

	return M2M_SUCCESS;
    41c4:	2300      	movs	r3, #0
}
    41c6:	0018      	movs	r0, r3
    41c8:	46bd      	mov	sp, r7
    41ca:	b007      	add	sp, #28
    41cc:	bd90      	pop	{r4, r7, pc}
    41ce:	46c0      	nop			; (mov r8, r8)
    41d0:	00004b29 	.word	0x00004b29
    41d4:	00004b05 	.word	0x00004b05

000041d8 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    41d8:	b590      	push	{r4, r7, lr}
    41da:	b085      	sub	sp, #20
    41dc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    41de:	230f      	movs	r3, #15
    41e0:	18fb      	adds	r3, r7, r3
    41e2:	2200      	movs	r2, #0
    41e4:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    41e6:	2300      	movs	r3, #0
    41e8:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    41ea:	2001      	movs	r0, #1
    41ec:	4b64      	ldr	r3, [pc, #400]	; (4380 <nm_clkless_wake+0x1a8>)
    41ee:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    41f0:	230f      	movs	r3, #15
    41f2:	18fc      	adds	r4, r7, r3
    41f4:	1d3b      	adds	r3, r7, #4
    41f6:	0019      	movs	r1, r3
    41f8:	2001      	movs	r0, #1
    41fa:	4b62      	ldr	r3, [pc, #392]	; (4384 <nm_clkless_wake+0x1ac>)
    41fc:	4798      	blx	r3
    41fe:	0003      	movs	r3, r0
    4200:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    4202:	230f      	movs	r3, #15
    4204:	18fb      	adds	r3, r7, r3
    4206:	781b      	ldrb	r3, [r3, #0]
    4208:	b25b      	sxtb	r3, r3
    420a:	2b00      	cmp	r3, #0
    420c:	d00d      	beq.n	422a <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    420e:	495e      	ldr	r1, [pc, #376]	; (4388 <nm_clkless_wake+0x1b0>)
    4210:	4b5e      	ldr	r3, [pc, #376]	; (438c <nm_clkless_wake+0x1b4>)
    4212:	2272      	movs	r2, #114	; 0x72
    4214:	0018      	movs	r0, r3
    4216:	4b5e      	ldr	r3, [pc, #376]	; (4390 <nm_clkless_wake+0x1b8>)
    4218:	4798      	blx	r3
    421a:	4b5e      	ldr	r3, [pc, #376]	; (4394 <nm_clkless_wake+0x1bc>)
    421c:	0018      	movs	r0, r3
    421e:	4b5e      	ldr	r3, [pc, #376]	; (4398 <nm_clkless_wake+0x1c0>)
    4220:	4798      	blx	r3
    4222:	200d      	movs	r0, #13
    4224:	4b5d      	ldr	r3, [pc, #372]	; (439c <nm_clkless_wake+0x1c4>)
    4226:	4798      	blx	r3
		goto _WAKE_EXIT;
    4228:	e0a1      	b.n	436e <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    422a:	687b      	ldr	r3, [r7, #4]
    422c:	2202      	movs	r2, #2
    422e:	4313      	orrs	r3, r2
    4230:	0019      	movs	r1, r3
    4232:	2001      	movs	r0, #1
    4234:	4b5a      	ldr	r3, [pc, #360]	; (43a0 <nm_clkless_wake+0x1c8>)
    4236:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    4238:	2001      	movs	r0, #1
    423a:	4b51      	ldr	r3, [pc, #324]	; (4380 <nm_clkless_wake+0x1a8>)
    423c:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    423e:	4b59      	ldr	r3, [pc, #356]	; (43a4 <nm_clkless_wake+0x1cc>)
    4240:	681b      	ldr	r3, [r3, #0]
    4242:	220f      	movs	r2, #15
    4244:	18bc      	adds	r4, r7, r2
    4246:	003a      	movs	r2, r7
    4248:	0011      	movs	r1, r2
    424a:	0018      	movs	r0, r3
    424c:	4b4d      	ldr	r3, [pc, #308]	; (4384 <nm_clkless_wake+0x1ac>)
    424e:	4798      	blx	r3
    4250:	0003      	movs	r3, r0
    4252:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    4254:	230f      	movs	r3, #15
    4256:	18fb      	adds	r3, r7, r3
    4258:	781b      	ldrb	r3, [r3, #0]
    425a:	b25b      	sxtb	r3, r3
    425c:	2b00      	cmp	r3, #0
    425e:	d108      	bne.n	4272 <nm_clkless_wake+0x9a>
    4260:	230f      	movs	r3, #15
    4262:	18fb      	adds	r3, r7, r3
    4264:	781b      	ldrb	r3, [r3, #0]
    4266:	b25b      	sxtb	r3, r3
    4268:	2b00      	cmp	r3, #0
    426a:	d162      	bne.n	4332 <nm_clkless_wake+0x15a>
    426c:	683b      	ldr	r3, [r7, #0]
    426e:	2b00      	cmp	r3, #0
    4270:	d15f      	bne.n	4332 <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    4272:	4b4c      	ldr	r3, [pc, #304]	; (43a4 <nm_clkless_wake+0x1cc>)
    4274:	220e      	movs	r2, #14
    4276:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    4278:	2001      	movs	r0, #1
    427a:	4b41      	ldr	r3, [pc, #260]	; (4380 <nm_clkless_wake+0x1a8>)
    427c:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    427e:	4b49      	ldr	r3, [pc, #292]	; (43a4 <nm_clkless_wake+0x1cc>)
    4280:	681b      	ldr	r3, [r3, #0]
    4282:	220f      	movs	r2, #15
    4284:	18bc      	adds	r4, r7, r2
    4286:	003a      	movs	r2, r7
    4288:	0011      	movs	r1, r2
    428a:	0018      	movs	r0, r3
    428c:	4b3d      	ldr	r3, [pc, #244]	; (4384 <nm_clkless_wake+0x1ac>)
    428e:	4798      	blx	r3
    4290:	0003      	movs	r3, r0
    4292:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    4294:	230f      	movs	r3, #15
    4296:	18fb      	adds	r3, r7, r3
    4298:	781b      	ldrb	r3, [r3, #0]
    429a:	b25b      	sxtb	r3, r3
    429c:	2b00      	cmp	r3, #0
    429e:	d108      	bne.n	42b2 <nm_clkless_wake+0xda>
    42a0:	230f      	movs	r3, #15
    42a2:	18fb      	adds	r3, r7, r3
    42a4:	781b      	ldrb	r3, [r3, #0]
    42a6:	b25b      	sxtb	r3, r3
    42a8:	2b00      	cmp	r3, #0
    42aa:	d142      	bne.n	4332 <nm_clkless_wake+0x15a>
    42ac:	683b      	ldr	r3, [r7, #0]
    42ae:	2b00      	cmp	r3, #0
    42b0:	d13f      	bne.n	4332 <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    42b2:	4b3c      	ldr	r3, [pc, #240]	; (43a4 <nm_clkless_wake+0x1cc>)
    42b4:	2213      	movs	r2, #19
    42b6:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    42b8:	2001      	movs	r0, #1
    42ba:	4b31      	ldr	r3, [pc, #196]	; (4380 <nm_clkless_wake+0x1a8>)
    42bc:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    42be:	4b39      	ldr	r3, [pc, #228]	; (43a4 <nm_clkless_wake+0x1cc>)
    42c0:	681b      	ldr	r3, [r3, #0]
    42c2:	220f      	movs	r2, #15
    42c4:	18bc      	adds	r4, r7, r2
    42c6:	003a      	movs	r2, r7
    42c8:	0011      	movs	r1, r2
    42ca:	0018      	movs	r0, r3
    42cc:	4b2d      	ldr	r3, [pc, #180]	; (4384 <nm_clkless_wake+0x1ac>)
    42ce:	4798      	blx	r3
    42d0:	0003      	movs	r3, r0
    42d2:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    42d4:	230f      	movs	r3, #15
    42d6:	18fb      	adds	r3, r7, r3
    42d8:	781b      	ldrb	r3, [r3, #0]
    42da:	b25b      	sxtb	r3, r3
    42dc:	2b00      	cmp	r3, #0
    42de:	d028      	beq.n	4332 <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    42e0:	4929      	ldr	r1, [pc, #164]	; (4388 <nm_clkless_wake+0x1b0>)
    42e2:	4b2a      	ldr	r3, [pc, #168]	; (438c <nm_clkless_wake+0x1b4>)
    42e4:	2296      	movs	r2, #150	; 0x96
    42e6:	0018      	movs	r0, r3
    42e8:	4b29      	ldr	r3, [pc, #164]	; (4390 <nm_clkless_wake+0x1b8>)
    42ea:	4798      	blx	r3
    42ec:	4b2e      	ldr	r3, [pc, #184]	; (43a8 <nm_clkless_wake+0x1d0>)
    42ee:	0018      	movs	r0, r3
    42f0:	4b29      	ldr	r3, [pc, #164]	; (4398 <nm_clkless_wake+0x1c0>)
    42f2:	4798      	blx	r3
    42f4:	200d      	movs	r0, #13
    42f6:	4b29      	ldr	r3, [pc, #164]	; (439c <nm_clkless_wake+0x1c4>)
    42f8:	4798      	blx	r3
					goto _WAKE_EXIT;
    42fa:	e038      	b.n	436e <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    42fc:	2002      	movs	r0, #2
    42fe:	4b20      	ldr	r3, [pc, #128]	; (4380 <nm_clkless_wake+0x1a8>)
    4300:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    4302:	4b28      	ldr	r3, [pc, #160]	; (43a4 <nm_clkless_wake+0x1cc>)
    4304:	681b      	ldr	r3, [r3, #0]
    4306:	003a      	movs	r2, r7
    4308:	0011      	movs	r1, r2
    430a:	0018      	movs	r0, r3
    430c:	4b1d      	ldr	r3, [pc, #116]	; (4384 <nm_clkless_wake+0x1ac>)
    430e:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    4310:	683b      	ldr	r3, [r7, #0]
    4312:	2204      	movs	r2, #4
    4314:	4013      	ands	r3, r2
    4316:	d10c      	bne.n	4332 <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    4318:	491b      	ldr	r1, [pc, #108]	; (4388 <nm_clkless_wake+0x1b0>)
    431a:	4b1c      	ldr	r3, [pc, #112]	; (438c <nm_clkless_wake+0x1b4>)
    431c:	22aa      	movs	r2, #170	; 0xaa
    431e:	0018      	movs	r0, r3
    4320:	4b1b      	ldr	r3, [pc, #108]	; (4390 <nm_clkless_wake+0x1b8>)
    4322:	4798      	blx	r3
    4324:	4b21      	ldr	r3, [pc, #132]	; (43ac <nm_clkless_wake+0x1d4>)
    4326:	0018      	movs	r0, r3
    4328:	4b1b      	ldr	r3, [pc, #108]	; (4398 <nm_clkless_wake+0x1c0>)
    432a:	4798      	blx	r3
    432c:	200d      	movs	r0, #13
    432e:	4b1b      	ldr	r3, [pc, #108]	; (439c <nm_clkless_wake+0x1c4>)
    4330:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    4332:	683b      	ldr	r3, [r7, #0]
    4334:	2204      	movs	r2, #4
    4336:	4013      	ands	r3, r2
    4338:	d109      	bne.n	434e <nm_clkless_wake+0x176>
    433a:	68bb      	ldr	r3, [r7, #8]
    433c:	3301      	adds	r3, #1
    433e:	60bb      	str	r3, [r7, #8]
    4340:	68ba      	ldr	r2, [r7, #8]
    4342:	4b1b      	ldr	r3, [pc, #108]	; (43b0 <nm_clkless_wake+0x1d8>)
    4344:	2103      	movs	r1, #3
    4346:	0010      	movs	r0, r2
    4348:	4798      	blx	r3
    434a:	1e0b      	subs	r3, r1, #0
    434c:	d0d6      	beq.n	42fc <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    434e:	683b      	ldr	r3, [r7, #0]
    4350:	2204      	movs	r2, #4
    4352:	4013      	ands	r3, r2
    4354:	d106      	bne.n	4364 <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    4356:	687b      	ldr	r3, [r7, #4]
    4358:	2202      	movs	r2, #2
    435a:	4313      	orrs	r3, r2
    435c:	0019      	movs	r1, r3
    435e:	2001      	movs	r0, #1
    4360:	4b0f      	ldr	r3, [pc, #60]	; (43a0 <nm_clkless_wake+0x1c8>)
    4362:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    4364:	683b      	ldr	r3, [r7, #0]
    4366:	2204      	movs	r2, #4
    4368:	4013      	ands	r3, r2
    436a:	d100      	bne.n	436e <nm_clkless_wake+0x196>
    436c:	e75d      	b.n	422a <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    436e:	230f      	movs	r3, #15
    4370:	18fb      	adds	r3, r7, r3
    4372:	781b      	ldrb	r3, [r3, #0]
    4374:	b25b      	sxtb	r3, r3
}
    4376:	0018      	movs	r0, r3
    4378:	46bd      	mov	sp, r7
    437a:	b005      	add	sp, #20
    437c:	bd90      	pop	{r4, r7, pc}
    437e:	46c0      	nop			; (mov r8, r8)
    4380:	00001f05 	.word	0x00001f05
    4384:	00004b05 	.word	0x00004b05
    4388:	00011aac 	.word	0x00011aac
    438c:	00011984 	.word	0x00011984
    4390:	000100d1 	.word	0x000100d1
    4394:	00011998 	.word	0x00011998
    4398:	000101f1 	.word	0x000101f1
    439c:	00010105 	.word	0x00010105
    43a0:	00004b29 	.word	0x00004b29
    43a4:	20000014 	.word	0x20000014
    43a8:	000119b8 	.word	0x000119b8
    43ac:	000119d8 	.word	0x000119d8
    43b0:	0000f0a5 	.word	0x0000f0a5

000043b4 <enable_interrupts>:
	nm_write_reg(0x6, 0x0);
	nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
    43b4:	b590      	push	{r4, r7, lr}
    43b6:	b083      	sub	sp, #12
    43b8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret;
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
    43ba:	1dfc      	adds	r4, r7, #7
    43bc:	003b      	movs	r3, r7
    43be:	4a29      	ldr	r2, [pc, #164]	; (4464 <enable_interrupts+0xb0>)
    43c0:	0019      	movs	r1, r3
    43c2:	0010      	movs	r0, r2
    43c4:	4b28      	ldr	r3, [pc, #160]	; (4468 <enable_interrupts+0xb4>)
    43c6:	4798      	blx	r3
    43c8:	0003      	movs	r3, r0
    43ca:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    43cc:	1dfb      	adds	r3, r7, #7
    43ce:	781b      	ldrb	r3, [r3, #0]
    43d0:	b25b      	sxtb	r3, r3
    43d2:	2b00      	cmp	r3, #0
    43d4:	d002      	beq.n	43dc <enable_interrupts+0x28>
		return M2M_ERR_BUS_FAIL;
    43d6:	2306      	movs	r3, #6
    43d8:	425b      	negs	r3, r3
    43da:	e03f      	b.n	445c <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 8);
    43dc:	683b      	ldr	r3, [r7, #0]
    43de:	2280      	movs	r2, #128	; 0x80
    43e0:	0052      	lsls	r2, r2, #1
    43e2:	4313      	orrs	r3, r2
    43e4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
    43e6:	683b      	ldr	r3, [r7, #0]
    43e8:	1dfc      	adds	r4, r7, #7
    43ea:	4a1e      	ldr	r2, [pc, #120]	; (4464 <enable_interrupts+0xb0>)
    43ec:	0019      	movs	r1, r3
    43ee:	0010      	movs	r0, r2
    43f0:	4b1e      	ldr	r3, [pc, #120]	; (446c <enable_interrupts+0xb8>)
    43f2:	4798      	blx	r3
    43f4:	0003      	movs	r3, r0
    43f6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    43f8:	1dfb      	adds	r3, r7, #7
    43fa:	781b      	ldrb	r3, [r3, #0]
    43fc:	b25b      	sxtb	r3, r3
    43fe:	2b00      	cmp	r3, #0
    4400:	d002      	beq.n	4408 <enable_interrupts+0x54>
		return M2M_ERR_BUS_FAIL;
    4402:	2306      	movs	r3, #6
    4404:	425b      	negs	r3, r3
    4406:	e029      	b.n	445c <enable_interrupts+0xa8>
	}
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
    4408:	1dfc      	adds	r4, r7, #7
    440a:	003a      	movs	r2, r7
    440c:	23d0      	movs	r3, #208	; 0xd0
    440e:	015b      	lsls	r3, r3, #5
    4410:	0011      	movs	r1, r2
    4412:	0018      	movs	r0, r3
    4414:	4b14      	ldr	r3, [pc, #80]	; (4468 <enable_interrupts+0xb4>)
    4416:	4798      	blx	r3
    4418:	0003      	movs	r3, r0
    441a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    441c:	1dfb      	adds	r3, r7, #7
    441e:	781b      	ldrb	r3, [r3, #0]
    4420:	b25b      	sxtb	r3, r3
    4422:	2b00      	cmp	r3, #0
    4424:	d002      	beq.n	442c <enable_interrupts+0x78>
		return M2M_ERR_BUS_FAIL;
    4426:	2306      	movs	r3, #6
    4428:	425b      	negs	r3, r3
    442a:	e017      	b.n	445c <enable_interrupts+0xa8>
	}
	reg |= ((uint32) 1 << 16);
    442c:	683b      	ldr	r3, [r7, #0]
    442e:	2280      	movs	r2, #128	; 0x80
    4430:	0252      	lsls	r2, r2, #9
    4432:	4313      	orrs	r3, r2
    4434:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
    4436:	683a      	ldr	r2, [r7, #0]
    4438:	1dfc      	adds	r4, r7, #7
    443a:	23d0      	movs	r3, #208	; 0xd0
    443c:	015b      	lsls	r3, r3, #5
    443e:	0011      	movs	r1, r2
    4440:	0018      	movs	r0, r3
    4442:	4b0a      	ldr	r3, [pc, #40]	; (446c <enable_interrupts+0xb8>)
    4444:	4798      	blx	r3
    4446:	0003      	movs	r3, r0
    4448:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    444a:	1dfb      	adds	r3, r7, #7
    444c:	781b      	ldrb	r3, [r3, #0]
    444e:	b25b      	sxtb	r3, r3
    4450:	2b00      	cmp	r3, #0
    4452:	d002      	beq.n	445a <enable_interrupts+0xa6>
		return M2M_ERR_BUS_FAIL;
    4454:	2306      	movs	r3, #6
    4456:	425b      	negs	r3, r3
    4458:	e000      	b.n	445c <enable_interrupts+0xa8>
	}
	return M2M_SUCCESS;
    445a:	2300      	movs	r3, #0
}
    445c:	0018      	movs	r0, r3
    445e:	46bd      	mov	sp, r7
    4460:	b003      	add	sp, #12
    4462:	bd90      	pop	{r4, r7, pc}
    4464:	00001408 	.word	0x00001408
    4468:	00004b05 	.word	0x00004b05
    446c:	00004b29 	.word	0x00004b29

00004470 <nmi_get_chipid>:
	nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	return ret;
}

uint32 nmi_get_chipid(void)
{
    4470:	b580      	push	{r7, lr}
    4472:	b082      	sub	sp, #8
    4474:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
    4476:	4b32      	ldr	r3, [pc, #200]	; (4540 <nmi_get_chipid+0xd0>)
    4478:	681b      	ldr	r3, [r3, #0]
    447a:	2b00      	cmp	r3, #0
    447c:	d159      	bne.n	4532 <nmi_get_chipid+0xc2>
		uint32 rfrevid;

		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
    447e:	4a30      	ldr	r2, [pc, #192]	; (4540 <nmi_get_chipid+0xd0>)
    4480:	2380      	movs	r3, #128	; 0x80
    4482:	015b      	lsls	r3, r3, #5
    4484:	0011      	movs	r1, r2
    4486:	0018      	movs	r0, r3
    4488:	4b2e      	ldr	r3, [pc, #184]	; (4544 <nmi_get_chipid+0xd4>)
    448a:	4798      	blx	r3
    448c:	1e03      	subs	r3, r0, #0
    448e:	d004      	beq.n	449a <nmi_get_chipid+0x2a>
			chipid = 0;
    4490:	4b2b      	ldr	r3, [pc, #172]	; (4540 <nmi_get_chipid+0xd0>)
    4492:	2200      	movs	r2, #0
    4494:	601a      	str	r2, [r3, #0]
			return 0;
    4496:	2300      	movs	r3, #0
    4498:	e04d      	b.n	4536 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
    449a:	1d3b      	adds	r3, r7, #4
    449c:	4a2a      	ldr	r2, [pc, #168]	; (4548 <nmi_get_chipid+0xd8>)
    449e:	0019      	movs	r1, r3
    44a0:	0010      	movs	r0, r2
    44a2:	4b28      	ldr	r3, [pc, #160]	; (4544 <nmi_get_chipid+0xd4>)
    44a4:	4798      	blx	r3
    44a6:	1e03      	subs	r3, r0, #0
    44a8:	d004      	beq.n	44b4 <nmi_get_chipid+0x44>
			chipid = 0;
    44aa:	4b25      	ldr	r3, [pc, #148]	; (4540 <nmi_get_chipid+0xd0>)
    44ac:	2200      	movs	r2, #0
    44ae:	601a      	str	r2, [r3, #0]
			return 0;
    44b0:	2300      	movs	r3, #0
    44b2:	e040      	b.n	4536 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
    44b4:	4b22      	ldr	r3, [pc, #136]	; (4540 <nmi_get_chipid+0xd0>)
    44b6:	681b      	ldr	r3, [r3, #0]
    44b8:	4a24      	ldr	r2, [pc, #144]	; (454c <nmi_get_chipid+0xdc>)
    44ba:	4293      	cmp	r3, r2
    44bc:	d106      	bne.n	44cc <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	2b01      	cmp	r3, #1
    44c2:	d029      	beq.n	4518 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
    44c4:	4b1e      	ldr	r3, [pc, #120]	; (4540 <nmi_get_chipid+0xd0>)
    44c6:	4a22      	ldr	r2, [pc, #136]	; (4550 <nmi_get_chipid+0xe0>)
    44c8:	601a      	str	r2, [r3, #0]
    44ca:	e025      	b.n	4518 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
    44cc:	4b1c      	ldr	r3, [pc, #112]	; (4540 <nmi_get_chipid+0xd0>)
    44ce:	681b      	ldr	r3, [r3, #0]
    44d0:	4a20      	ldr	r2, [pc, #128]	; (4554 <nmi_get_chipid+0xe4>)
    44d2:	4293      	cmp	r3, r2
    44d4:	d10d      	bne.n	44f2 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
    44d6:	687b      	ldr	r3, [r7, #4]
    44d8:	2b03      	cmp	r3, #3
    44da:	d01d      	beq.n	4518 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	2b04      	cmp	r3, #4
    44e0:	d103      	bne.n	44ea <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
    44e2:	4b17      	ldr	r3, [pc, #92]	; (4540 <nmi_get_chipid+0xd0>)
    44e4:	4a1c      	ldr	r2, [pc, #112]	; (4558 <nmi_get_chipid+0xe8>)
    44e6:	601a      	str	r2, [r3, #0]
    44e8:	e016      	b.n	4518 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
    44ea:	4b15      	ldr	r3, [pc, #84]	; (4540 <nmi_get_chipid+0xd0>)
    44ec:	4a1b      	ldr	r2, [pc, #108]	; (455c <nmi_get_chipid+0xec>)
    44ee:	601a      	str	r2, [r3, #0]
    44f0:	e012      	b.n	4518 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1000F0) { 
    44f2:	4b13      	ldr	r3, [pc, #76]	; (4540 <nmi_get_chipid+0xd0>)
    44f4:	681b      	ldr	r3, [r3, #0]
    44f6:	4a1a      	ldr	r2, [pc, #104]	; (4560 <nmi_get_chipid+0xf0>)
    44f8:	4293      	cmp	r3, r2
    44fa:	d10d      	bne.n	4518 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
    44fc:	4a10      	ldr	r2, [pc, #64]	; (4540 <nmi_get_chipid+0xd0>)
    44fe:	23ec      	movs	r3, #236	; 0xec
    4500:	039b      	lsls	r3, r3, #14
    4502:	0011      	movs	r1, r2
    4504:	0018      	movs	r0, r3
    4506:	4b0f      	ldr	r3, [pc, #60]	; (4544 <nmi_get_chipid+0xd4>)
    4508:	4798      	blx	r3
    450a:	1e03      	subs	r3, r0, #0
    450c:	d004      	beq.n	4518 <nmi_get_chipid+0xa8>
			chipid = 0;
    450e:	4b0c      	ldr	r3, [pc, #48]	; (4540 <nmi_get_chipid+0xd0>)
    4510:	2200      	movs	r2, #0
    4512:	601a      	str	r2, [r3, #0]
			return 0;
    4514:	2300      	movs	r3, #0
    4516:	e00e      	b.n	4536 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
    4518:	4b09      	ldr	r3, [pc, #36]	; (4540 <nmi_get_chipid+0xd0>)
    451a:	681b      	ldr	r3, [r3, #0]
    451c:	4a11      	ldr	r2, [pc, #68]	; (4564 <nmi_get_chipid+0xf4>)
    451e:	401a      	ands	r2, r3
    4520:	4b07      	ldr	r3, [pc, #28]	; (4540 <nmi_get_chipid+0xd0>)
    4522:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
    4524:	4b06      	ldr	r3, [pc, #24]	; (4540 <nmi_get_chipid+0xd0>)
    4526:	681b      	ldr	r3, [r3, #0]
    4528:	22a0      	movs	r2, #160	; 0xa0
    452a:	02d2      	lsls	r2, r2, #11
    452c:	431a      	orrs	r2, r3
    452e:	4b04      	ldr	r3, [pc, #16]	; (4540 <nmi_get_chipid+0xd0>)
    4530:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
    4532:	4b03      	ldr	r3, [pc, #12]	; (4540 <nmi_get_chipid+0xd0>)
    4534:	681b      	ldr	r3, [r3, #0]
}
    4536:	0018      	movs	r0, r3
    4538:	46bd      	mov	sp, r7
    453a:	b002      	add	sp, #8
    453c:	bd80      	pop	{r7, pc}
    453e:	46c0      	nop			; (mov r8, r8)
    4540:	200000e4 	.word	0x200000e4
    4544:	00004b05 	.word	0x00004b05
    4548:	000013f4 	.word	0x000013f4
    454c:	001002a0 	.word	0x001002a0
    4550:	001002a1 	.word	0x001002a1
    4554:	001002b0 	.word	0x001002b0
    4558:	001002b1 	.word	0x001002b1
    455c:	001002b2 	.word	0x001002b2
    4560:	001000f0 	.word	0x001000f0
    4564:	fff0ffff 	.word	0xfff0ffff

00004568 <wait_for_bootrom>:
#endif
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
    4568:	b580      	push	{r7, lr}
    456a:	b086      	sub	sp, #24
    456c:	af00      	add	r7, sp, #0
    456e:	0002      	movs	r2, r0
    4570:	1dfb      	adds	r3, r7, #7
    4572:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    4574:	230b      	movs	r3, #11
    4576:	18fb      	adds	r3, r7, r3
    4578:	2200      	movs	r2, #0
    457a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    457c:	2300      	movs	r3, #0
    457e:	617b      	str	r3, [r7, #20]
    4580:	2300      	movs	r3, #0
    4582:	613b      	str	r3, [r7, #16]
	uint32 u32GpReg1 = 0;
    4584:	2300      	movs	r3, #0
    4586:	60fb      	str	r3, [r7, #12]

	reg = 0;
    4588:	2300      	movs	r3, #0
    458a:	617b      	str	r3, [r7, #20]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
    458c:	4b3b      	ldr	r3, [pc, #236]	; (467c <wait_for_bootrom+0x114>)
    458e:	0018      	movs	r0, r3
    4590:	4b3b      	ldr	r3, [pc, #236]	; (4680 <wait_for_bootrom+0x118>)
    4592:	4798      	blx	r3
    4594:	0003      	movs	r3, r0
    4596:	617b      	str	r3, [r7, #20]
		if (reg & 0x80000000) {
    4598:	697b      	ldr	r3, [r7, #20]
    459a:	2b00      	cmp	r3, #0
    459c:	db03      	blt.n	45a6 <wait_for_bootrom+0x3e>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
    459e:	2001      	movs	r0, #1
    45a0:	4b38      	ldr	r3, [pc, #224]	; (4684 <wait_for_bootrom+0x11c>)
    45a2:	4798      	blx	r3
	}
    45a4:	e7f2      	b.n	458c <wait_for_bootrom+0x24>

	reg = 0;
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
		if (reg & 0x80000000) {
			break;
    45a6:	46c0      	nop			; (mov r8, r8)
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
    45a8:	4b37      	ldr	r3, [pc, #220]	; (4688 <wait_for_bootrom+0x120>)
    45aa:	0018      	movs	r0, r3
    45ac:	4b34      	ldr	r3, [pc, #208]	; (4680 <wait_for_bootrom+0x118>)
    45ae:	4798      	blx	r3
    45b0:	0003      	movs	r3, r0
    45b2:	617b      	str	r3, [r7, #20]
	reg &= 0x1;
    45b4:	697b      	ldr	r3, [r7, #20]
    45b6:	2201      	movs	r2, #1
    45b8:	4013      	ands	r3, r2
    45ba:	617b      	str	r3, [r7, #20]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
    45bc:	697b      	ldr	r3, [r7, #20]
    45be:	2b00      	cmp	r3, #0
    45c0:	d112      	bne.n	45e8 <wait_for_bootrom+0x80>
	{
		reg = 0;
    45c2:	2300      	movs	r3, #0
    45c4:	617b      	str	r3, [r7, #20]
		while(reg != M2M_FINISH_BOOT_ROM)
    45c6:	e00b      	b.n	45e0 <wait_for_bootrom+0x78>
		{
			nm_bsp_sleep(1);
    45c8:	2001      	movs	r0, #1
    45ca:	4b2e      	ldr	r3, [pc, #184]	; (4684 <wait_for_bootrom+0x11c>)
    45cc:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
    45ce:	4b2f      	ldr	r3, [pc, #188]	; (468c <wait_for_bootrom+0x124>)
    45d0:	0018      	movs	r0, r3
    45d2:	4b2b      	ldr	r3, [pc, #172]	; (4680 <wait_for_bootrom+0x118>)
    45d4:	4798      	blx	r3
    45d6:	0003      	movs	r3, r0
    45d8:	617b      	str	r3, [r7, #20]

			if(++cnt > TIMEOUT)
    45da:	693b      	ldr	r3, [r7, #16]
    45dc:	3301      	adds	r3, #1
    45de:	613b      	str	r3, [r7, #16]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
	{
		reg = 0;
		while(reg != M2M_FINISH_BOOT_ROM)
    45e0:	697b      	ldr	r3, [r7, #20]
    45e2:	4a2b      	ldr	r2, [pc, #172]	; (4690 <wait_for_bootrom+0x128>)
    45e4:	4293      	cmp	r3, r2
    45e6:	d1ef      	bne.n	45c8 <wait_for_bootrom+0x60>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
    45e8:	1dfb      	adds	r3, r7, #7
    45ea:	781b      	ldrb	r3, [r3, #0]
    45ec:	2b02      	cmp	r3, #2
    45ee:	d10d      	bne.n	460c <wait_for_bootrom+0xa4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    45f0:	4a28      	ldr	r2, [pc, #160]	; (4694 <wait_for_bootrom+0x12c>)
    45f2:	4b29      	ldr	r3, [pc, #164]	; (4698 <wait_for_bootrom+0x130>)
    45f4:	0011      	movs	r1, r2
    45f6:	0018      	movs	r0, r3
    45f8:	4b28      	ldr	r3, [pc, #160]	; (469c <wait_for_bootrom+0x134>)
    45fa:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
    45fc:	2380      	movs	r3, #128	; 0x80
    45fe:	035b      	lsls	r3, r3, #13
    4600:	4a27      	ldr	r2, [pc, #156]	; (46a0 <wait_for_bootrom+0x138>)
    4602:	0019      	movs	r1, r3
    4604:	0010      	movs	r0, r2
    4606:	4b25      	ldr	r3, [pc, #148]	; (469c <wait_for_bootrom+0x134>)
    4608:	4798      	blx	r3
    460a:	e015      	b.n	4638 <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
    460c:	1dfb      	adds	r3, r7, #7
    460e:	781b      	ldrb	r3, [r3, #0]
    4610:	2b03      	cmp	r3, #3
    4612:	d10b      	bne.n	462c <wait_for_bootrom+0xc4>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
    4614:	4a1f      	ldr	r2, [pc, #124]	; (4694 <wait_for_bootrom+0x12c>)
    4616:	4b20      	ldr	r3, [pc, #128]	; (4698 <wait_for_bootrom+0x130>)
    4618:	0011      	movs	r1, r2
    461a:	0018      	movs	r0, r3
    461c:	4b1f      	ldr	r3, [pc, #124]	; (469c <wait_for_bootrom+0x134>)
    461e:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
    4620:	4b1f      	ldr	r3, [pc, #124]	; (46a0 <wait_for_bootrom+0x138>)
    4622:	2100      	movs	r1, #0
    4624:	0018      	movs	r0, r3
    4626:	4b1d      	ldr	r3, [pc, #116]	; (469c <wait_for_bootrom+0x134>)
    4628:	4798      	blx	r3
    462a:	e005      	b.n	4638 <wait_for_bootrom+0xd0>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
    462c:	1dfb      	adds	r3, r7, #7
    462e:	781b      	ldrb	r3, [r3, #0]
    4630:	2b04      	cmp	r3, #4
    4632:	d101      	bne.n	4638 <wait_for_bootrom+0xd0>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
    4634:	2380      	movs	r3, #128	; 0x80
    4636:	60fb      	str	r3, [r7, #12]
	} else {
		/*bypass this step*/
	}

	if(REV(nmi_get_chipid()) == REV_3A0)
    4638:	4b1a      	ldr	r3, [pc, #104]	; (46a4 <wait_for_bootrom+0x13c>)
    463a:	4798      	blx	r3
    463c:	0003      	movs	r3, r0
    463e:	051b      	lsls	r3, r3, #20
    4640:	0d1a      	lsrs	r2, r3, #20
    4642:	23e8      	movs	r3, #232	; 0xe8
    4644:	009b      	lsls	r3, r3, #2
    4646:	429a      	cmp	r2, r3
    4648:	d106      	bne.n	4658 <wait_for_bootrom+0xf0>
	{
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
    464a:	68fb      	ldr	r3, [r7, #12]
    464c:	2202      	movs	r2, #2
    464e:	4313      	orrs	r3, r2
    4650:	0018      	movs	r0, r3
    4652:	4b15      	ldr	r3, [pc, #84]	; (46a8 <wait_for_bootrom+0x140>)
    4654:	4798      	blx	r3
    4656:	e003      	b.n	4660 <wait_for_bootrom+0xf8>
	}
	else
	{
		chip_apply_conf(u32GpReg1);
    4658:	68fb      	ldr	r3, [r7, #12]
    465a:	0018      	movs	r0, r3
    465c:	4b12      	ldr	r3, [pc, #72]	; (46a8 <wait_for_bootrom+0x140>)
    465e:	4798      	blx	r3
	}
	
	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
    4660:	4a12      	ldr	r2, [pc, #72]	; (46ac <wait_for_bootrom+0x144>)
    4662:	4b0a      	ldr	r3, [pc, #40]	; (468c <wait_for_bootrom+0x124>)
    4664:	0011      	movs	r1, r2
    4666:	0018      	movs	r0, r3
    4668:	4b0c      	ldr	r3, [pc, #48]	; (469c <wait_for_bootrom+0x134>)
    466a:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
    466c:	230b      	movs	r3, #11
    466e:	18fb      	adds	r3, r7, r3
    4670:	781b      	ldrb	r3, [r3, #0]
    4672:	b25b      	sxtb	r3, r3
}
    4674:	0018      	movs	r0, r3
    4676:	46bd      	mov	sp, r7
    4678:	b006      	add	sp, #24
    467a:	bd80      	pop	{r7, pc}
    467c:	00001014 	.word	0x00001014
    4680:	00004ae5 	.word	0x00004ae5
    4684:	00001f05 	.word	0x00001f05
    4688:	000207bc 	.word	0x000207bc
    468c:	000c000c 	.word	0x000c000c
    4690:	10add09e 	.word	0x10add09e
    4694:	3c1cd57d 	.word	0x3c1cd57d
    4698:	000207ac 	.word	0x000207ac
    469c:	00004b29 	.word	0x00004b29
    46a0:	0000108c 	.word	0x0000108c
    46a4:	00004471 	.word	0x00004471
    46a8:	00004165 	.word	0x00004165
    46ac:	ef522f61 	.word	0xef522f61

000046b0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
    46b0:	b580      	push	{r7, lr}
    46b2:	b088      	sub	sp, #32
    46b4:	af00      	add	r7, sp, #0
    46b6:	0002      	movs	r2, r0
    46b8:	1dfb      	adds	r3, r7, #7
    46ba:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
    46bc:	231f      	movs	r3, #31
    46be:	18fb      	adds	r3, r7, r3
    46c0:	2200      	movs	r2, #0
    46c2:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
    46c4:	2300      	movs	r3, #0
    46c6:	61bb      	str	r3, [r7, #24]
    46c8:	2300      	movs	r3, #0
    46ca:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
    46cc:	2301      	movs	r3, #1
    46ce:	425b      	negs	r3, r3
    46d0:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
    46d2:	4b1d      	ldr	r3, [pc, #116]	; (4748 <wait_for_firmware_start+0x98>)
    46d4:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
    46d6:	4b1d      	ldr	r3, [pc, #116]	; (474c <wait_for_firmware_start+0x9c>)
    46d8:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
    46da:	1dfb      	adds	r3, r7, #7
    46dc:	781b      	ldrb	r3, [r3, #0]
    46de:	2b02      	cmp	r3, #2
    46e0:	d003      	beq.n	46ea <wait_for_firmware_start+0x3a>
    46e2:	1dfb      	adds	r3, r7, #7
    46e4:	781b      	ldrb	r3, [r3, #0]
    46e6:	2b03      	cmp	r3, #3
    46e8:	d119      	bne.n	471e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
    46ea:	4b19      	ldr	r3, [pc, #100]	; (4750 <wait_for_firmware_start+0xa0>)
    46ec:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
    46ee:	4b19      	ldr	r3, [pc, #100]	; (4754 <wait_for_firmware_start+0xa4>)
    46f0:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    46f2:	e014      	b.n	471e <wait_for_firmware_start+0x6e>
	{
	
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
    46f4:	2002      	movs	r0, #2
    46f6:	4b18      	ldr	r3, [pc, #96]	; (4758 <wait_for_firmware_start+0xa8>)
    46f8:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
    46fa:	68fb      	ldr	r3, [r7, #12]
    46fc:	0018      	movs	r0, r3
    46fe:	4b17      	ldr	r3, [pc, #92]	; (475c <wait_for_firmware_start+0xac>)
    4700:	4798      	blx	r3
    4702:	0003      	movs	r3, r0
    4704:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
    4706:	697b      	ldr	r3, [r7, #20]
    4708:	3301      	adds	r3, #1
    470a:	617b      	str	r3, [r7, #20]
    470c:	697a      	ldr	r2, [r7, #20]
    470e:	693b      	ldr	r3, [r7, #16]
    4710:	429a      	cmp	r2, r3
    4712:	d304      	bcc.n	471e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
    4714:	231f      	movs	r3, #31
    4716:	18fb      	adds	r3, r7, r3
    4718:	22fb      	movs	r2, #251	; 0xfb
    471a:	701a      	strb	r2, [r3, #0]
			goto ERR;
    471c:	e00c      	b.n	4738 <wait_for_firmware_start+0x88>
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
    471e:	68ba      	ldr	r2, [r7, #8]
    4720:	69bb      	ldr	r3, [r7, #24]
    4722:	429a      	cmp	r2, r3
    4724:	d1e6      	bne.n	46f4 <wait_for_firmware_start+0x44>
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
			goto ERR;
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
    4726:	68bb      	ldr	r3, [r7, #8]
    4728:	4a08      	ldr	r2, [pc, #32]	; (474c <wait_for_firmware_start+0x9c>)
    472a:	4293      	cmp	r3, r2
    472c:	d104      	bne.n	4738 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
    472e:	4b06      	ldr	r3, [pc, #24]	; (4748 <wait_for_firmware_start+0x98>)
    4730:	2100      	movs	r1, #0
    4732:	0018      	movs	r0, r3
    4734:	4b0a      	ldr	r3, [pc, #40]	; (4760 <wait_for_firmware_start+0xb0>)
    4736:	4798      	blx	r3
	}
ERR:
	return ret;
    4738:	231f      	movs	r3, #31
    473a:	18fb      	adds	r3, r7, r3
    473c:	781b      	ldrb	r3, [r3, #0]
    473e:	b25b      	sxtb	r3, r3
}
    4740:	0018      	movs	r0, r3
    4742:	46bd      	mov	sp, r7
    4744:	b008      	add	sp, #32
    4746:	bd80      	pop	{r7, pc}
    4748:	0000108c 	.word	0x0000108c
    474c:	02532636 	.word	0x02532636
    4750:	000207ac 	.word	0x000207ac
    4754:	d75dc1c3 	.word	0xd75dc1c3
    4758:	00001f05 	.word	0x00001f05
    475c:	00004ae5 	.word	0x00004ae5
    4760:	00004b29 	.word	0x00004b29

00004764 <chip_deinit>:

sint8 chip_deinit(void)
{
    4764:	b590      	push	{r4, r7, lr}
    4766:	b083      	sub	sp, #12
    4768:	af00      	add	r7, sp, #0
	uint32 reg = 0;
    476a:	2300      	movs	r3, #0
    476c:	603b      	str	r3, [r7, #0]
	sint8 ret;
	uint8 timeout = 10;
    476e:	1dbb      	adds	r3, r7, #6
    4770:	220a      	movs	r2, #10
    4772:	701a      	strb	r2, [r3, #0]

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    4774:	1dfc      	adds	r4, r7, #7
    4776:	003a      	movs	r2, r7
    4778:	23a0      	movs	r3, #160	; 0xa0
    477a:	015b      	lsls	r3, r3, #5
    477c:	0011      	movs	r1, r2
    477e:	0018      	movs	r0, r3
    4780:	4b3f      	ldr	r3, [pc, #252]	; (4880 <chip_deinit+0x11c>)
    4782:	4798      	blx	r3
    4784:	0003      	movs	r3, r0
    4786:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
    4788:	1dfb      	adds	r3, r7, #7
    478a:	781b      	ldrb	r3, [r3, #0]
    478c:	b25b      	sxtb	r3, r3
    478e:	2b00      	cmp	r3, #0
    4790:	d00c      	beq.n	47ac <chip_deinit+0x48>
		M2M_ERR("failed to de-initialize\n");
    4792:	4a3c      	ldr	r2, [pc, #240]	; (4884 <chip_deinit+0x120>)
    4794:	493c      	ldr	r1, [pc, #240]	; (4888 <chip_deinit+0x124>)
    4796:	4b3d      	ldr	r3, [pc, #244]	; (488c <chip_deinit+0x128>)
    4798:	0018      	movs	r0, r3
    479a:	4b3d      	ldr	r3, [pc, #244]	; (4890 <chip_deinit+0x12c>)
    479c:	4798      	blx	r3
    479e:	4b3d      	ldr	r3, [pc, #244]	; (4894 <chip_deinit+0x130>)
    47a0:	0018      	movs	r0, r3
    47a2:	4b3d      	ldr	r3, [pc, #244]	; (4898 <chip_deinit+0x134>)
    47a4:	4798      	blx	r3
    47a6:	200d      	movs	r0, #13
    47a8:	4b3c      	ldr	r3, [pc, #240]	; (489c <chip_deinit+0x138>)
    47aa:	4798      	blx	r3
	}
	reg &= ~(1 << 10);
    47ac:	683b      	ldr	r3, [r7, #0]
    47ae:	4a3c      	ldr	r2, [pc, #240]	; (48a0 <chip_deinit+0x13c>)
    47b0:	4013      	ands	r3, r2
    47b2:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    47b4:	683a      	ldr	r2, [r7, #0]
    47b6:	1dfc      	adds	r4, r7, #7
    47b8:	23a0      	movs	r3, #160	; 0xa0
    47ba:	015b      	lsls	r3, r3, #5
    47bc:	0011      	movs	r1, r2
    47be:	0018      	movs	r0, r3
    47c0:	4b38      	ldr	r3, [pc, #224]	; (48a4 <chip_deinit+0x140>)
    47c2:	4798      	blx	r3
    47c4:	0003      	movs	r3, r0
    47c6:	7023      	strb	r3, [r4, #0]

	if (ret != M2M_SUCCESS) {
    47c8:	1dfb      	adds	r3, r7, #7
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	b25b      	sxtb	r3, r3
    47ce:	2b00      	cmp	r3, #0
    47d0:	d010      	beq.n	47f4 <chip_deinit+0x90>
		M2M_ERR("Error while writing reg\n");
    47d2:	4a35      	ldr	r2, [pc, #212]	; (48a8 <chip_deinit+0x144>)
    47d4:	492c      	ldr	r1, [pc, #176]	; (4888 <chip_deinit+0x124>)
    47d6:	4b2d      	ldr	r3, [pc, #180]	; (488c <chip_deinit+0x128>)
    47d8:	0018      	movs	r0, r3
    47da:	4b2d      	ldr	r3, [pc, #180]	; (4890 <chip_deinit+0x12c>)
    47dc:	4798      	blx	r3
    47de:	4b33      	ldr	r3, [pc, #204]	; (48ac <chip_deinit+0x148>)
    47e0:	0018      	movs	r0, r3
    47e2:	4b2d      	ldr	r3, [pc, #180]	; (4898 <chip_deinit+0x134>)
    47e4:	4798      	blx	r3
    47e6:	200d      	movs	r0, #13
    47e8:	4b2c      	ldr	r3, [pc, #176]	; (489c <chip_deinit+0x138>)
    47ea:	4798      	blx	r3
		return ret;
    47ec:	1dfb      	adds	r3, r7, #7
    47ee:	781b      	ldrb	r3, [r3, #0]
    47f0:	b25b      	sxtb	r3, r3
    47f2:	e041      	b.n	4878 <chip_deinit+0x114>
	}

	do {
		ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
    47f4:	1dfc      	adds	r4, r7, #7
    47f6:	003a      	movs	r2, r7
    47f8:	23a0      	movs	r3, #160	; 0xa0
    47fa:	015b      	lsls	r3, r3, #5
    47fc:	0011      	movs	r1, r2
    47fe:	0018      	movs	r0, r3
    4800:	4b1f      	ldr	r3, [pc, #124]	; (4880 <chip_deinit+0x11c>)
    4802:	4798      	blx	r3
    4804:	0003      	movs	r3, r0
    4806:	7023      	strb	r3, [r4, #0]
		if (ret != M2M_SUCCESS) {
    4808:	1dfb      	adds	r3, r7, #7
    480a:	781b      	ldrb	r3, [r3, #0]
    480c:	b25b      	sxtb	r3, r3
    480e:	2b00      	cmp	r3, #0
    4810:	d011      	beq.n	4836 <chip_deinit+0xd2>
			M2M_ERR("Error while reading reg\n");
    4812:	238f      	movs	r3, #143	; 0x8f
    4814:	009a      	lsls	r2, r3, #2
    4816:	491c      	ldr	r1, [pc, #112]	; (4888 <chip_deinit+0x124>)
    4818:	4b1c      	ldr	r3, [pc, #112]	; (488c <chip_deinit+0x128>)
    481a:	0018      	movs	r0, r3
    481c:	4b1c      	ldr	r3, [pc, #112]	; (4890 <chip_deinit+0x12c>)
    481e:	4798      	blx	r3
    4820:	4b23      	ldr	r3, [pc, #140]	; (48b0 <chip_deinit+0x14c>)
    4822:	0018      	movs	r0, r3
    4824:	4b1c      	ldr	r3, [pc, #112]	; (4898 <chip_deinit+0x134>)
    4826:	4798      	blx	r3
    4828:	200d      	movs	r0, #13
    482a:	4b1c      	ldr	r3, [pc, #112]	; (489c <chip_deinit+0x138>)
    482c:	4798      	blx	r3
			return ret;
    482e:	1dfb      	adds	r3, r7, #7
    4830:	781b      	ldrb	r3, [r3, #0]
    4832:	b25b      	sxtb	r3, r3
    4834:	e020      	b.n	4878 <chip_deinit+0x114>
		}
		/*Workaround to ensure that the chip is actually reset*/
		if ((reg & (1 << 10))) {
    4836:	683a      	ldr	r2, [r7, #0]
    4838:	2380      	movs	r3, #128	; 0x80
    483a:	00db      	lsls	r3, r3, #3
    483c:	4013      	ands	r3, r2
    483e:	d017      	beq.n	4870 <chip_deinit+0x10c>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
    4840:	683b      	ldr	r3, [r7, #0]
    4842:	4a17      	ldr	r2, [pc, #92]	; (48a0 <chip_deinit+0x13c>)
    4844:	4013      	ands	r3, r2
    4846:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
    4848:	683a      	ldr	r2, [r7, #0]
    484a:	1dfc      	adds	r4, r7, #7
    484c:	23a0      	movs	r3, #160	; 0xa0
    484e:	015b      	lsls	r3, r3, #5
    4850:	0011      	movs	r1, r2
    4852:	0018      	movs	r0, r3
    4854:	4b13      	ldr	r3, [pc, #76]	; (48a4 <chip_deinit+0x140>)
    4856:	4798      	blx	r3
    4858:	0003      	movs	r3, r0
    485a:	7023      	strb	r3, [r4, #0]
			timeout--;
    485c:	1dbb      	adds	r3, r7, #6
    485e:	781a      	ldrb	r2, [r3, #0]
    4860:	1dbb      	adds	r3, r7, #6
    4862:	3a01      	subs	r2, #1
    4864:	701a      	strb	r2, [r3, #0]
		} else {
			break;
		}

	} while (timeout);
    4866:	1dbb      	adds	r3, r7, #6
    4868:	781b      	ldrb	r3, [r3, #0]
    486a:	2b00      	cmp	r3, #0
    486c:	d1c2      	bne.n	47f4 <chip_deinit+0x90>
    486e:	e000      	b.n	4872 <chip_deinit+0x10e>
			M2M_DBG("Bit 10 not reset retry %d\n", timeout);
			reg &= ~(1 << 10);
			ret = nm_write_reg(NMI_GLB_RESET_0, reg);
			timeout--;
		} else {
			break;
    4870:	46c0      	nop			; (mov r8, r8)
		}

	} while (timeout);

	return ret;
    4872:	1dfb      	adds	r3, r7, #7
    4874:	781b      	ldrb	r3, [r3, #0]
    4876:	b25b      	sxtb	r3, r3
}
    4878:	0018      	movs	r0, r3
    487a:	46bd      	mov	sp, r7
    487c:	b003      	add	sp, #12
    487e:	bd90      	pop	{r4, r7, pc}
    4880:	00004b05 	.word	0x00004b05
    4884:	0000022f 	.word	0x0000022f
    4888:	00011abc 	.word	0x00011abc
    488c:	00011984 	.word	0x00011984
    4890:	000100d1 	.word	0x000100d1
    4894:	00011a24 	.word	0x00011a24
    4898:	000101f1 	.word	0x000101f1
    489c:	00010105 	.word	0x00010105
    48a0:	fffffbff 	.word	0xfffffbff
    48a4:	00004b29 	.word	0x00004b29
    48a8:	00000235 	.word	0x00000235
    48ac:	00011a3c 	.word	0x00011a3c
    48b0:	00011a54 	.word	0x00011a54

000048b4 <nmi_get_otp_mac_address>:
_EXIT:
	return s8Ret;
}

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 * pu8IsValid)
{
    48b4:	b590      	push	{r4, r7, lr}
    48b6:	b089      	sub	sp, #36	; 0x24
    48b8:	af00      	add	r7, sp, #0
    48ba:	6078      	str	r0, [r7, #4]
    48bc:	6039      	str	r1, [r7, #0]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    48be:	2308      	movs	r3, #8
    48c0:	18fb      	adds	r3, r7, r3
    48c2:	0018      	movs	r0, r3
    48c4:	2308      	movs	r3, #8
    48c6:	001a      	movs	r2, r3
    48c8:	2100      	movs	r1, #0
    48ca:	4b35      	ldr	r3, [pc, #212]	; (49a0 <nmi_get_otp_mac_address+0xec>)
    48cc:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    48ce:	231f      	movs	r3, #31
    48d0:	18fc      	adds	r4, r7, r3
    48d2:	2318      	movs	r3, #24
    48d4:	18fb      	adds	r3, r7, r3
    48d6:	4a33      	ldr	r2, [pc, #204]	; (49a4 <nmi_get_otp_mac_address+0xf0>)
    48d8:	0019      	movs	r1, r3
    48da:	0010      	movs	r0, r2
    48dc:	4b32      	ldr	r3, [pc, #200]	; (49a8 <nmi_get_otp_mac_address+0xf4>)
    48de:	4798      	blx	r3
    48e0:	0003      	movs	r3, r0
    48e2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    48e4:	231f      	movs	r3, #31
    48e6:	18fb      	adds	r3, r7, r3
    48e8:	781b      	ldrb	r3, [r3, #0]
    48ea:	b25b      	sxtb	r3, r3
    48ec:	2b00      	cmp	r3, #0
    48ee:	d145      	bne.n	497c <nmi_get_otp_mac_address+0xc8>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    48f0:	69bb      	ldr	r3, [r7, #24]
    48f2:	22c0      	movs	r2, #192	; 0xc0
    48f4:	0292      	lsls	r2, r2, #10
    48f6:	4313      	orrs	r3, r2
    48f8:	221f      	movs	r2, #31
    48fa:	18bc      	adds	r4, r7, r2
    48fc:	2208      	movs	r2, #8
    48fe:	18b9      	adds	r1, r7, r2
    4900:	2208      	movs	r2, #8
    4902:	0018      	movs	r0, r3
    4904:	4b29      	ldr	r3, [pc, #164]	; (49ac <nmi_get_otp_mac_address+0xf8>)
    4906:	4798      	blx	r3
    4908:	0003      	movs	r3, r0
    490a:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    490c:	231f      	movs	r3, #31
    490e:	18fb      	adds	r3, r7, r3
    4910:	781b      	ldrb	r3, [r3, #0]
    4912:	b25b      	sxtb	r3, r3
    4914:	2b00      	cmp	r3, #0
    4916:	d133      	bne.n	4980 <nmi_get_otp_mac_address+0xcc>
	u32RegValue = strgp.u32Mac_efuse_mib;
    4918:	2308      	movs	r3, #8
    491a:	18fb      	adds	r3, r7, r3
    491c:	681b      	ldr	r3, [r3, #0]
    491e:	61bb      	str	r3, [r7, #24]

	if(!EFUSED_MAC(u32RegValue)) {
    4920:	69bb      	ldr	r3, [r7, #24]
    4922:	0c1b      	lsrs	r3, r3, #16
    4924:	041b      	lsls	r3, r3, #16
    4926:	d106      	bne.n	4936 <nmi_get_otp_mac_address+0x82>
		M2M_DBG("Default MAC\n");
		m2m_memset(pu8MacAddr, 0, 6);
    4928:	687b      	ldr	r3, [r7, #4]
    492a:	2206      	movs	r2, #6
    492c:	2100      	movs	r1, #0
    492e:	0018      	movs	r0, r3
    4930:	4b1f      	ldr	r3, [pc, #124]	; (49b0 <nmi_get_otp_mac_address+0xfc>)
    4932:	4798      	blx	r3
		goto _EXIT_ERR;
    4934:	e025      	b.n	4982 <nmi_get_otp_mac_address+0xce>
	}

	M2M_DBG("OTP MAC\n");
	u32RegValue >>=16;
    4936:	69bb      	ldr	r3, [r7, #24]
    4938:	0c1b      	lsrs	r3, r3, #16
    493a:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    493c:	69bb      	ldr	r3, [r7, #24]
    493e:	22c0      	movs	r2, #192	; 0xc0
    4940:	0292      	lsls	r2, r2, #10
    4942:	4313      	orrs	r3, r2
    4944:	221f      	movs	r2, #31
    4946:	18bc      	adds	r4, r7, r2
    4948:	2210      	movs	r2, #16
    494a:	18b9      	adds	r1, r7, r2
    494c:	2206      	movs	r2, #6
    494e:	0018      	movs	r0, r3
    4950:	4b16      	ldr	r3, [pc, #88]	; (49ac <nmi_get_otp_mac_address+0xf8>)
    4952:	4798      	blx	r3
    4954:	0003      	movs	r3, r0
    4956:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr,mac,6);
    4958:	2310      	movs	r3, #16
    495a:	18f9      	adds	r1, r7, r3
    495c:	687b      	ldr	r3, [r7, #4]
    495e:	2206      	movs	r2, #6
    4960:	0018      	movs	r0, r3
    4962:	4b14      	ldr	r3, [pc, #80]	; (49b4 <nmi_get_otp_mac_address+0x100>)
    4964:	4798      	blx	r3
	if(pu8IsValid) *pu8IsValid = 1;
    4966:	683b      	ldr	r3, [r7, #0]
    4968:	2b00      	cmp	r3, #0
    496a:	d002      	beq.n	4972 <nmi_get_otp_mac_address+0xbe>
    496c:	683b      	ldr	r3, [r7, #0]
    496e:	2201      	movs	r2, #1
    4970:	701a      	strb	r2, [r3, #0]
	return ret;
    4972:	231f      	movs	r3, #31
    4974:	18fb      	adds	r3, r7, r3
    4976:	781b      	ldrb	r3, [r3, #0]
    4978:	b25b      	sxtb	r3, r3
    497a:	e00c      	b.n	4996 <nmi_get_otp_mac_address+0xe2>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    497c:	46c0      	nop			; (mov r8, r8)
    497e:	e000      	b.n	4982 <nmi_get_otp_mac_address+0xce>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    4980:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr,mac,6);
	if(pu8IsValid) *pu8IsValid = 1;
	return ret;

_EXIT_ERR:
	if(pu8IsValid) *pu8IsValid = 0;
    4982:	683b      	ldr	r3, [r7, #0]
    4984:	2b00      	cmp	r3, #0
    4986:	d002      	beq.n	498e <nmi_get_otp_mac_address+0xda>
    4988:	683b      	ldr	r3, [r7, #0]
    498a:	2200      	movs	r2, #0
    498c:	701a      	strb	r2, [r3, #0]
	return ret;
    498e:	231f      	movs	r3, #31
    4990:	18fb      	adds	r3, r7, r3
    4992:	781b      	ldrb	r3, [r3, #0]
    4994:	b25b      	sxtb	r3, r3
}
    4996:	0018      	movs	r0, r3
    4998:	46bd      	mov	sp, r7
    499a:	b009      	add	sp, #36	; 0x24
    499c:	bd90      	pop	{r4, r7, pc}
    499e:	46c0      	nop			; (mov r8, r8)
    49a0:	0000fb1b 	.word	0x0000fb1b
    49a4:	000c0008 	.word	0x000c0008
    49a8:	00004b05 	.word	0x00004b05
    49ac:	00004b79 	.word	0x00004b79
    49b0:	000027e9 	.word	0x000027e9
    49b4:	000027ad 	.word	0x000027ad

000049b8 <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
    49b8:	b590      	push	{r4, r7, lr}
    49ba:	b089      	sub	sp, #36	; 0x24
    49bc:	af00      	add	r7, sp, #0
    49be:	6078      	str	r0, [r7, #4]
	sint8 ret;
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};
    49c0:	2308      	movs	r3, #8
    49c2:	18fb      	adds	r3, r7, r3
    49c4:	0018      	movs	r0, r3
    49c6:	2308      	movs	r3, #8
    49c8:	001a      	movs	r2, r3
    49ca:	2100      	movs	r1, #0
    49cc:	4b29      	ldr	r3, [pc, #164]	; (4a74 <nmi_get_mac_address+0xbc>)
    49ce:	4798      	blx	r3

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
    49d0:	231f      	movs	r3, #31
    49d2:	18fc      	adds	r4, r7, r3
    49d4:	2318      	movs	r3, #24
    49d6:	18fb      	adds	r3, r7, r3
    49d8:	4a27      	ldr	r2, [pc, #156]	; (4a78 <nmi_get_mac_address+0xc0>)
    49da:	0019      	movs	r1, r3
    49dc:	0010      	movs	r0, r2
    49de:	4b27      	ldr	r3, [pc, #156]	; (4a7c <nmi_get_mac_address+0xc4>)
    49e0:	4798      	blx	r3
    49e2:	0003      	movs	r3, r0
    49e4:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    49e6:	231f      	movs	r3, #31
    49e8:	18fb      	adds	r3, r7, r3
    49ea:	781b      	ldrb	r3, [r3, #0]
    49ec:	b25b      	sxtb	r3, r3
    49ee:	2b00      	cmp	r3, #0
    49f0:	d135      	bne.n	4a5e <nmi_get_mac_address+0xa6>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
    49f2:	69bb      	ldr	r3, [r7, #24]
    49f4:	22c0      	movs	r2, #192	; 0xc0
    49f6:	0292      	lsls	r2, r2, #10
    49f8:	4313      	orrs	r3, r2
    49fa:	221f      	movs	r2, #31
    49fc:	18bc      	adds	r4, r7, r2
    49fe:	2208      	movs	r2, #8
    4a00:	18b9      	adds	r1, r7, r2
    4a02:	2208      	movs	r2, #8
    4a04:	0018      	movs	r0, r3
    4a06:	4b1e      	ldr	r3, [pc, #120]	; (4a80 <nmi_get_mac_address+0xc8>)
    4a08:	4798      	blx	r3
    4a0a:	0003      	movs	r3, r0
    4a0c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    4a0e:	231f      	movs	r3, #31
    4a10:	18fb      	adds	r3, r7, r3
    4a12:	781b      	ldrb	r3, [r3, #0]
    4a14:	b25b      	sxtb	r3, r3
    4a16:	2b00      	cmp	r3, #0
    4a18:	d123      	bne.n	4a62 <nmi_get_mac_address+0xaa>
	u32RegValue = strgp.u32Mac_efuse_mib;
    4a1a:	2308      	movs	r3, #8
    4a1c:	18fb      	adds	r3, r7, r3
    4a1e:	681b      	ldr	r3, [r3, #0]
    4a20:	61bb      	str	r3, [r7, #24]

	u32RegValue &=0x0000ffff;
    4a22:	69bb      	ldr	r3, [r7, #24]
    4a24:	041b      	lsls	r3, r3, #16
    4a26:	0c1b      	lsrs	r3, r3, #16
    4a28:	61bb      	str	r3, [r7, #24]
	ret = nm_read_block(u32RegValue|0x30000, mac, 6);
    4a2a:	69bb      	ldr	r3, [r7, #24]
    4a2c:	22c0      	movs	r2, #192	; 0xc0
    4a2e:	0292      	lsls	r2, r2, #10
    4a30:	4313      	orrs	r3, r2
    4a32:	221f      	movs	r2, #31
    4a34:	18bc      	adds	r4, r7, r2
    4a36:	2210      	movs	r2, #16
    4a38:	18b9      	adds	r1, r7, r2
    4a3a:	2206      	movs	r2, #6
    4a3c:	0018      	movs	r0, r3
    4a3e:	4b10      	ldr	r3, [pc, #64]	; (4a80 <nmi_get_mac_address+0xc8>)
    4a40:	4798      	blx	r3
    4a42:	0003      	movs	r3, r0
    4a44:	7023      	strb	r3, [r4, #0]
	m2m_memcpy(pu8MacAddr, mac, 6);
    4a46:	2310      	movs	r3, #16
    4a48:	18f9      	adds	r1, r7, r3
    4a4a:	687b      	ldr	r3, [r7, #4]
    4a4c:	2206      	movs	r2, #6
    4a4e:	0018      	movs	r0, r3
    4a50:	4b0c      	ldr	r3, [pc, #48]	; (4a84 <nmi_get_mac_address+0xcc>)
    4a52:	4798      	blx	r3

	return ret;
    4a54:	231f      	movs	r3, #31
    4a56:	18fb      	adds	r3, r7, r3
    4a58:	781b      	ldrb	r3, [r3, #0]
    4a5a:	b25b      	sxtb	r3, r3
    4a5c:	e006      	b.n	4a6c <nmi_get_mac_address+0xb4>
	uint32	u32RegValue;
	uint8	mac[6];
	tstrGpRegs strgp = {0};

	ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &u32RegValue);
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    4a5e:	46c0      	nop			; (mov r8, r8)
    4a60:	e000      	b.n	4a64 <nmi_get_mac_address+0xac>

	ret = nm_read_block(u32RegValue|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
	if(ret != M2M_SUCCESS) goto _EXIT_ERR;
    4a62:	46c0      	nop			; (mov r8, r8)
	m2m_memcpy(pu8MacAddr, mac, 6);

	return ret;

_EXIT_ERR:
	return ret;
    4a64:	231f      	movs	r3, #31
    4a66:	18fb      	adds	r3, r7, r3
    4a68:	781b      	ldrb	r3, [r3, #0]
    4a6a:	b25b      	sxtb	r3, r3
    4a6c:	0018      	movs	r0, r3
    4a6e:	46bd      	mov	sp, r7
    4a70:	b009      	add	sp, #36	; 0x24
    4a72:	bd90      	pop	{r4, r7, pc}
    4a74:	0000fb1b 	.word	0x0000fb1b
    4a78:	000c0008 	.word	0x000c0008
    4a7c:	00004b05 	.word	0x00004b05
    4a80:	00004b79 	.word	0x00004b79
    4a84:	000027ad 	.word	0x000027ad

00004a88 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
    4a88:	b590      	push	{r4, r7, lr}
    4a8a:	b085      	sub	sp, #20
    4a8c:	af00      	add	r7, sp, #0
    4a8e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    4a90:	230f      	movs	r3, #15
    4a92:	18fb      	adds	r3, r7, r3
    4a94:	2200      	movs	r2, #0
    4a96:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
    4a98:	230f      	movs	r3, #15
    4a9a:	18fc      	adds	r4, r7, r3
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	0018      	movs	r0, r3
    4aa0:	4b05      	ldr	r3, [pc, #20]	; (4ab8 <nm_bus_iface_init+0x30>)
    4aa2:	4798      	blx	r3
    4aa4:	0003      	movs	r3, r0
    4aa6:	7023      	strb	r3, [r4, #0]

	return ret;
    4aa8:	230f      	movs	r3, #15
    4aaa:	18fb      	adds	r3, r7, r3
    4aac:	781b      	ldrb	r3, [r3, #0]
    4aae:	b25b      	sxtb	r3, r3
}
    4ab0:	0018      	movs	r0, r3
    4ab2:	46bd      	mov	sp, r7
    4ab4:	b005      	add	sp, #20
    4ab6:	bd90      	pop	{r4, r7, pc}
    4ab8:	000025f1 	.word	0x000025f1

00004abc <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
    4abc:	b590      	push	{r4, r7, lr}
    4abe:	b083      	sub	sp, #12
    4ac0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    4ac2:	1dfb      	adds	r3, r7, #7
    4ac4:	2200      	movs	r2, #0
    4ac6:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
    4ac8:	1dfc      	adds	r4, r7, #7
    4aca:	4b05      	ldr	r3, [pc, #20]	; (4ae0 <nm_bus_iface_deinit+0x24>)
    4acc:	4798      	blx	r3
    4ace:	0003      	movs	r3, r0
    4ad0:	7023      	strb	r3, [r4, #0]

	return ret;
    4ad2:	1dfb      	adds	r3, r7, #7
    4ad4:	781b      	ldrb	r3, [r3, #0]
    4ad6:	b25b      	sxtb	r3, r3
}
    4ad8:	0018      	movs	r0, r3
    4ada:	46bd      	mov	sp, r7
    4adc:	b003      	add	sp, #12
    4ade:	bd90      	pop	{r4, r7, pc}
    4ae0:	00002769 	.word	0x00002769

00004ae4 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
    4ae4:	b580      	push	{r7, lr}
    4ae6:	b082      	sub	sp, #8
    4ae8:	af00      	add	r7, sp, #0
    4aea:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	0018      	movs	r0, r3
    4af0:	4b03      	ldr	r3, [pc, #12]	; (4b00 <nm_read_reg+0x1c>)
    4af2:	4798      	blx	r3
    4af4:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
    4af6:	0018      	movs	r0, r3
    4af8:	46bd      	mov	sp, r7
    4afa:	b002      	add	sp, #8
    4afc:	bd80      	pop	{r7, pc}
    4afe:	46c0      	nop			; (mov r8, r8)
    4b00:	0000617d 	.word	0x0000617d

00004b04 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    4b04:	b580      	push	{r7, lr}
    4b06:	b082      	sub	sp, #8
    4b08:	af00      	add	r7, sp, #0
    4b0a:	6078      	str	r0, [r7, #4]
    4b0c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    4b0e:	683a      	ldr	r2, [r7, #0]
    4b10:	687b      	ldr	r3, [r7, #4]
    4b12:	0011      	movs	r1, r2
    4b14:	0018      	movs	r0, r3
    4b16:	4b03      	ldr	r3, [pc, #12]	; (4b24 <nm_read_reg_with_ret+0x20>)
    4b18:	4798      	blx	r3
    4b1a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    4b1c:	0018      	movs	r0, r3
    4b1e:	46bd      	mov	sp, r7
    4b20:	b002      	add	sp, #8
    4b22:	bd80      	pop	{r7, pc}
    4b24:	000061a1 	.word	0x000061a1

00004b28 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    4b28:	b580      	push	{r7, lr}
    4b2a:	b082      	sub	sp, #8
    4b2c:	af00      	add	r7, sp, #0
    4b2e:	6078      	str	r0, [r7, #4]
    4b30:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    4b32:	683a      	ldr	r2, [r7, #0]
    4b34:	687b      	ldr	r3, [r7, #4]
    4b36:	0011      	movs	r1, r2
    4b38:	0018      	movs	r0, r3
    4b3a:	4b03      	ldr	r3, [pc, #12]	; (4b48 <nm_write_reg+0x20>)
    4b3c:	4798      	blx	r3
    4b3e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    4b40:	0018      	movs	r0, r3
    4b42:	46bd      	mov	sp, r7
    4b44:	b002      	add	sp, #8
    4b46:	bd80      	pop	{r7, pc}
    4b48:	000061f1 	.word	0x000061f1

00004b4c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4b4c:	b580      	push	{r7, lr}
    4b4e:	b084      	sub	sp, #16
    4b50:	af00      	add	r7, sp, #0
    4b52:	60f8      	str	r0, [r7, #12]
    4b54:	60b9      	str	r1, [r7, #8]
    4b56:	1dbb      	adds	r3, r7, #6
    4b58:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    4b5a:	1dbb      	adds	r3, r7, #6
    4b5c:	881a      	ldrh	r2, [r3, #0]
    4b5e:	68b9      	ldr	r1, [r7, #8]
    4b60:	68fb      	ldr	r3, [r7, #12]
    4b62:	0018      	movs	r0, r3
    4b64:	4b03      	ldr	r3, [pc, #12]	; (4b74 <p_nm_read_block+0x28>)
    4b66:	4798      	blx	r3
    4b68:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4b6a:	0018      	movs	r0, r3
    4b6c:	46bd      	mov	sp, r7
    4b6e:	b004      	add	sp, #16
    4b70:	bd80      	pop	{r7, pc}
    4b72:	46c0      	nop			; (mov r8, r8)
    4b74:	00006241 	.word	0x00006241

00004b78 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4b78:	b580      	push	{r7, lr}
    4b7a:	b086      	sub	sp, #24
    4b7c:	af00      	add	r7, sp, #0
    4b7e:	60f8      	str	r0, [r7, #12]
    4b80:	60b9      	str	r1, [r7, #8]
    4b82:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    4b84:	4b2d      	ldr	r3, [pc, #180]	; (4c3c <nm_read_block+0xc4>)
    4b86:	881a      	ldrh	r2, [r3, #0]
    4b88:	2310      	movs	r3, #16
    4b8a:	18fb      	adds	r3, r7, r3
    4b8c:	3a08      	subs	r2, #8
    4b8e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    4b90:	2300      	movs	r3, #0
    4b92:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    4b94:	2313      	movs	r3, #19
    4b96:	18fb      	adds	r3, r7, r3
    4b98:	2200      	movs	r2, #0
    4b9a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    4b9c:	2310      	movs	r3, #16
    4b9e:	18fb      	adds	r3, r7, r3
    4ba0:	881a      	ldrh	r2, [r3, #0]
    4ba2:	687b      	ldr	r3, [r7, #4]
    4ba4:	429a      	cmp	r2, r3
    4ba6:	d313      	bcc.n	4bd0 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    4ba8:	68ba      	ldr	r2, [r7, #8]
    4baa:	697b      	ldr	r3, [r7, #20]
    4bac:	18d1      	adds	r1, r2, r3
    4bae:	687b      	ldr	r3, [r7, #4]
    4bb0:	b29a      	uxth	r2, r3
    4bb2:	68fb      	ldr	r3, [r7, #12]
    4bb4:	0018      	movs	r0, r3
    4bb6:	4b22      	ldr	r3, [pc, #136]	; (4c40 <nm_read_block+0xc8>)
    4bb8:	4798      	blx	r3
    4bba:	0003      	movs	r3, r0
    4bbc:	b2da      	uxtb	r2, r3
    4bbe:	2313      	movs	r3, #19
    4bc0:	18fb      	adds	r3, r7, r3
    4bc2:	781b      	ldrb	r3, [r3, #0]
    4bc4:	18d3      	adds	r3, r2, r3
    4bc6:	b2da      	uxtb	r2, r3
    4bc8:	2313      	movs	r3, #19
    4bca:	18fb      	adds	r3, r7, r3
    4bcc:	701a      	strb	r2, [r3, #0]
			break;
    4bce:	e02d      	b.n	4c2c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4bd0:	68ba      	ldr	r2, [r7, #8]
    4bd2:	697b      	ldr	r3, [r7, #20]
    4bd4:	18d1      	adds	r1, r2, r3
    4bd6:	2310      	movs	r3, #16
    4bd8:	18fb      	adds	r3, r7, r3
    4bda:	881a      	ldrh	r2, [r3, #0]
    4bdc:	68fb      	ldr	r3, [r7, #12]
    4bde:	0018      	movs	r0, r3
    4be0:	4b17      	ldr	r3, [pc, #92]	; (4c40 <nm_read_block+0xc8>)
    4be2:	4798      	blx	r3
    4be4:	0003      	movs	r3, r0
    4be6:	b2da      	uxtb	r2, r3
    4be8:	2313      	movs	r3, #19
    4bea:	18fb      	adds	r3, r7, r3
    4bec:	781b      	ldrb	r3, [r3, #0]
    4bee:	18d3      	adds	r3, r2, r3
    4bf0:	b2da      	uxtb	r2, r3
    4bf2:	2313      	movs	r3, #19
    4bf4:	18fb      	adds	r3, r7, r3
    4bf6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    4bf8:	2313      	movs	r3, #19
    4bfa:	18fb      	adds	r3, r7, r3
    4bfc:	781b      	ldrb	r3, [r3, #0]
    4bfe:	b25b      	sxtb	r3, r3
    4c00:	2b00      	cmp	r3, #0
    4c02:	d112      	bne.n	4c2a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    4c04:	2310      	movs	r3, #16
    4c06:	18fb      	adds	r3, r7, r3
    4c08:	881b      	ldrh	r3, [r3, #0]
    4c0a:	687a      	ldr	r2, [r7, #4]
    4c0c:	1ad3      	subs	r3, r2, r3
    4c0e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    4c10:	2310      	movs	r3, #16
    4c12:	18fb      	adds	r3, r7, r3
    4c14:	881b      	ldrh	r3, [r3, #0]
    4c16:	697a      	ldr	r2, [r7, #20]
    4c18:	18d3      	adds	r3, r2, r3
    4c1a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    4c1c:	2310      	movs	r3, #16
    4c1e:	18fb      	adds	r3, r7, r3
    4c20:	881b      	ldrh	r3, [r3, #0]
    4c22:	68fa      	ldr	r2, [r7, #12]
    4c24:	18d3      	adds	r3, r2, r3
    4c26:	60fb      	str	r3, [r7, #12]
		}
	}
    4c28:	e7b8      	b.n	4b9c <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    4c2a:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    4c2c:	2313      	movs	r3, #19
    4c2e:	18fb      	adds	r3, r7, r3
    4c30:	781b      	ldrb	r3, [r3, #0]
    4c32:	b25b      	sxtb	r3, r3
}
    4c34:	0018      	movs	r0, r3
    4c36:	46bd      	mov	sp, r7
    4c38:	b006      	add	sp, #24
    4c3a:	bd80      	pop	{r7, pc}
    4c3c:	20000010 	.word	0x20000010
    4c40:	00004b4d 	.word	0x00004b4d

00004c44 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    4c44:	b580      	push	{r7, lr}
    4c46:	b084      	sub	sp, #16
    4c48:	af00      	add	r7, sp, #0
    4c4a:	60f8      	str	r0, [r7, #12]
    4c4c:	60b9      	str	r1, [r7, #8]
    4c4e:	1dbb      	adds	r3, r7, #6
    4c50:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    4c52:	1dbb      	adds	r3, r7, #6
    4c54:	881a      	ldrh	r2, [r3, #0]
    4c56:	68b9      	ldr	r1, [r7, #8]
    4c58:	68fb      	ldr	r3, [r7, #12]
    4c5a:	0018      	movs	r0, r3
    4c5c:	4b03      	ldr	r3, [pc, #12]	; (4c6c <p_nm_write_block+0x28>)
    4c5e:	4798      	blx	r3
    4c60:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    4c62:	0018      	movs	r0, r3
    4c64:	46bd      	mov	sp, r7
    4c66:	b004      	add	sp, #16
    4c68:	bd80      	pop	{r7, pc}
    4c6a:	46c0      	nop			; (mov r8, r8)
    4c6c:	00006299 	.word	0x00006299

00004c70 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    4c70:	b580      	push	{r7, lr}
    4c72:	b086      	sub	sp, #24
    4c74:	af00      	add	r7, sp, #0
    4c76:	60f8      	str	r0, [r7, #12]
    4c78:	60b9      	str	r1, [r7, #8]
    4c7a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    4c7c:	4b2d      	ldr	r3, [pc, #180]	; (4d34 <nm_write_block+0xc4>)
    4c7e:	881a      	ldrh	r2, [r3, #0]
    4c80:	2310      	movs	r3, #16
    4c82:	18fb      	adds	r3, r7, r3
    4c84:	3a08      	subs	r2, #8
    4c86:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    4c88:	2300      	movs	r3, #0
    4c8a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    4c8c:	2313      	movs	r3, #19
    4c8e:	18fb      	adds	r3, r7, r3
    4c90:	2200      	movs	r2, #0
    4c92:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    4c94:	2310      	movs	r3, #16
    4c96:	18fb      	adds	r3, r7, r3
    4c98:	881a      	ldrh	r2, [r3, #0]
    4c9a:	687b      	ldr	r3, [r7, #4]
    4c9c:	429a      	cmp	r2, r3
    4c9e:	d313      	bcc.n	4cc8 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    4ca0:	68ba      	ldr	r2, [r7, #8]
    4ca2:	697b      	ldr	r3, [r7, #20]
    4ca4:	18d1      	adds	r1, r2, r3
    4ca6:	687b      	ldr	r3, [r7, #4]
    4ca8:	b29a      	uxth	r2, r3
    4caa:	68fb      	ldr	r3, [r7, #12]
    4cac:	0018      	movs	r0, r3
    4cae:	4b22      	ldr	r3, [pc, #136]	; (4d38 <nm_write_block+0xc8>)
    4cb0:	4798      	blx	r3
    4cb2:	0003      	movs	r3, r0
    4cb4:	b2da      	uxtb	r2, r3
    4cb6:	2313      	movs	r3, #19
    4cb8:	18fb      	adds	r3, r7, r3
    4cba:	781b      	ldrb	r3, [r3, #0]
    4cbc:	18d3      	adds	r3, r2, r3
    4cbe:	b2da      	uxtb	r2, r3
    4cc0:	2313      	movs	r3, #19
    4cc2:	18fb      	adds	r3, r7, r3
    4cc4:	701a      	strb	r2, [r3, #0]
			break;
    4cc6:	e02d      	b.n	4d24 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    4cc8:	68ba      	ldr	r2, [r7, #8]
    4cca:	697b      	ldr	r3, [r7, #20]
    4ccc:	18d1      	adds	r1, r2, r3
    4cce:	2310      	movs	r3, #16
    4cd0:	18fb      	adds	r3, r7, r3
    4cd2:	881a      	ldrh	r2, [r3, #0]
    4cd4:	68fb      	ldr	r3, [r7, #12]
    4cd6:	0018      	movs	r0, r3
    4cd8:	4b17      	ldr	r3, [pc, #92]	; (4d38 <nm_write_block+0xc8>)
    4cda:	4798      	blx	r3
    4cdc:	0003      	movs	r3, r0
    4cde:	b2da      	uxtb	r2, r3
    4ce0:	2313      	movs	r3, #19
    4ce2:	18fb      	adds	r3, r7, r3
    4ce4:	781b      	ldrb	r3, [r3, #0]
    4ce6:	18d3      	adds	r3, r2, r3
    4ce8:	b2da      	uxtb	r2, r3
    4cea:	2313      	movs	r3, #19
    4cec:	18fb      	adds	r3, r7, r3
    4cee:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    4cf0:	2313      	movs	r3, #19
    4cf2:	18fb      	adds	r3, r7, r3
    4cf4:	781b      	ldrb	r3, [r3, #0]
    4cf6:	b25b      	sxtb	r3, r3
    4cf8:	2b00      	cmp	r3, #0
    4cfa:	d112      	bne.n	4d22 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    4cfc:	2310      	movs	r3, #16
    4cfe:	18fb      	adds	r3, r7, r3
    4d00:	881b      	ldrh	r3, [r3, #0]
    4d02:	687a      	ldr	r2, [r7, #4]
    4d04:	1ad3      	subs	r3, r2, r3
    4d06:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    4d08:	2310      	movs	r3, #16
    4d0a:	18fb      	adds	r3, r7, r3
    4d0c:	881b      	ldrh	r3, [r3, #0]
    4d0e:	697a      	ldr	r2, [r7, #20]
    4d10:	18d3      	adds	r3, r2, r3
    4d12:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    4d14:	2310      	movs	r3, #16
    4d16:	18fb      	adds	r3, r7, r3
    4d18:	881b      	ldrh	r3, [r3, #0]
    4d1a:	68fa      	ldr	r2, [r7, #12]
    4d1c:	18d3      	adds	r3, r2, r3
    4d1e:	60fb      	str	r3, [r7, #12]
		}
	}
    4d20:	e7b8      	b.n	4c94 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    4d22:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    4d24:	2313      	movs	r3, #19
    4d26:	18fb      	adds	r3, r7, r3
    4d28:	781b      	ldrb	r3, [r3, #0]
    4d2a:	b25b      	sxtb	r3, r3
}
    4d2c:	0018      	movs	r0, r3
    4d2e:	46bd      	mov	sp, r7
    4d30:	b006      	add	sp, #24
    4d32:	bd80      	pop	{r7, pc}
    4d34:	20000010 	.word	0x20000010
    4d38:	00004c45 	.word	0x00004c45

00004d3c <nm_get_firmware_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_info(tstrM2mRev* M2mRev)
{
    4d3c:	b590      	push	{r4, r7, lr}
    4d3e:	b087      	sub	sp, #28
    4d40:	af00      	add	r7, sp, #0
    4d42:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
    4d44:	2300      	movs	r3, #0
    4d46:	60fb      	str	r3, [r7, #12]
	sint8	ret = M2M_SUCCESS;
    4d48:	2317      	movs	r3, #23
    4d4a:	18fb      	adds	r3, r7, r3
    4d4c:	2200      	movs	r2, #0
    4d4e:	701a      	strb	r2, [r3, #0]

	ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
    4d50:	2317      	movs	r3, #23
    4d52:	18fc      	adds	r4, r7, r3
    4d54:	230c      	movs	r3, #12
    4d56:	18fb      	adds	r3, r7, r3
    4d58:	4a4c      	ldr	r2, [pc, #304]	; (4e8c <nm_get_firmware_info+0x150>)
    4d5a:	0019      	movs	r1, r3
    4d5c:	0010      	movs	r0, r2
    4d5e:	4b4c      	ldr	r3, [pc, #304]	; (4e90 <nm_get_firmware_info+0x154>)
    4d60:	4798      	blx	r3
    4d62:	0003      	movs	r3, r0
    4d64:	7023      	strb	r3, [r4, #0]
	//In case the Firmware running is ATE fw
	if(M2M_ATE_FW_IS_UP_VALUE == reg)
    4d66:	68fb      	ldr	r3, [r7, #12]
    4d68:	4a4a      	ldr	r2, [pc, #296]	; (4e94 <nm_get_firmware_info+0x158>)
    4d6a:	4293      	cmp	r3, r2
    4d6c:	d10a      	bne.n	4d84 <nm_get_firmware_info+0x48>
	{
		//Read FW info again from the register specified for ATE
		ret = nm_read_reg_with_ret(NMI_REV_REG_ATE, &reg);
    4d6e:	2317      	movs	r3, #23
    4d70:	18fc      	adds	r4, r7, r3
    4d72:	230c      	movs	r3, #12
    4d74:	18fb      	adds	r3, r7, r3
    4d76:	4a48      	ldr	r2, [pc, #288]	; (4e98 <nm_get_firmware_info+0x15c>)
    4d78:	0019      	movs	r1, r3
    4d7a:	0010      	movs	r0, r2
    4d7c:	4b44      	ldr	r3, [pc, #272]	; (4e90 <nm_get_firmware_info+0x154>)
    4d7e:	4798      	blx	r3
    4d80:	0003      	movs	r3, r0
    4d82:	7023      	strb	r3, [r4, #0]
	}
	M2mRev->u8DriverMajor	= M2M_GET_DRV_MAJOR(reg);
    4d84:	68fb      	ldr	r3, [r7, #12]
    4d86:	0c1b      	lsrs	r3, r3, #16
    4d88:	121b      	asrs	r3, r3, #8
    4d8a:	b2da      	uxtb	r2, r3
    4d8c:	687b      	ldr	r3, [r7, #4]
    4d8e:	71da      	strb	r2, [r3, #7]
	M2mRev->u8DriverMinor   = M2M_GET_DRV_MINOR(reg);
    4d90:	68fb      	ldr	r3, [r7, #12]
    4d92:	0c1b      	lsrs	r3, r3, #16
    4d94:	111b      	asrs	r3, r3, #4
    4d96:	b2db      	uxtb	r3, r3
    4d98:	220f      	movs	r2, #15
    4d9a:	4013      	ands	r3, r2
    4d9c:	b2da      	uxtb	r2, r3
    4d9e:	687b      	ldr	r3, [r7, #4]
    4da0:	721a      	strb	r2, [r3, #8]
	M2mRev->u8DriverPatch	= M2M_GET_DRV_PATCH(reg);
    4da2:	68fb      	ldr	r3, [r7, #12]
    4da4:	0c1b      	lsrs	r3, r3, #16
    4da6:	b2db      	uxtb	r3, r3
    4da8:	220f      	movs	r2, #15
    4daa:	4013      	ands	r3, r2
    4dac:	b2da      	uxtb	r2, r3
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	725a      	strb	r2, [r3, #9]
	M2mRev->u8FirmwareMajor	= M2M_GET_FW_MAJOR(reg);
    4db2:	68fb      	ldr	r3, [r7, #12]
    4db4:	121b      	asrs	r3, r3, #8
    4db6:	b2da      	uxtb	r2, r3
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	711a      	strb	r2, [r3, #4]
	M2mRev->u8FirmwareMinor = M2M_GET_FW_MINOR(reg);
    4dbc:	68fb      	ldr	r3, [r7, #12]
    4dbe:	111b      	asrs	r3, r3, #4
    4dc0:	b2db      	uxtb	r3, r3
    4dc2:	220f      	movs	r2, #15
    4dc4:	4013      	ands	r3, r2
    4dc6:	b2da      	uxtb	r2, r3
    4dc8:	687b      	ldr	r3, [r7, #4]
    4dca:	715a      	strb	r2, [r3, #5]
	M2mRev->u8FirmwarePatch = M2M_GET_FW_PATCH(reg);
    4dcc:	68fb      	ldr	r3, [r7, #12]
    4dce:	b2db      	uxtb	r3, r3
    4dd0:	220f      	movs	r2, #15
    4dd2:	4013      	ands	r3, r2
    4dd4:	b2da      	uxtb	r2, r3
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	719a      	strb	r2, [r3, #6]
	M2mRev->u32Chipid	= nmi_get_chipid();
    4dda:	4b30      	ldr	r3, [pc, #192]	; (4e9c <nm_get_firmware_info+0x160>)
    4ddc:	4798      	blx	r3
    4dde:	0002      	movs	r2, r0
    4de0:	687b      	ldr	r3, [r7, #4]
    4de2:	601a      	str	r2, [r3, #0]
	
	curr_firm_ver   = M2M_MAKE_VERSION(M2mRev->u8FirmwareMajor, M2mRev->u8FirmwareMinor,M2mRev->u8FirmwarePatch);
    4de4:	687b      	ldr	r3, [r7, #4]
    4de6:	791b      	ldrb	r3, [r3, #4]
    4de8:	021b      	lsls	r3, r3, #8
    4dea:	b21a      	sxth	r2, r3
    4dec:	687b      	ldr	r3, [r7, #4]
    4dee:	795b      	ldrb	r3, [r3, #5]
    4df0:	011b      	lsls	r3, r3, #4
    4df2:	b21b      	sxth	r3, r3
    4df4:	21ff      	movs	r1, #255	; 0xff
    4df6:	400b      	ands	r3, r1
    4df8:	b21b      	sxth	r3, r3
    4dfa:	4313      	orrs	r3, r2
    4dfc:	b21a      	sxth	r2, r3
    4dfe:	687b      	ldr	r3, [r7, #4]
    4e00:	799b      	ldrb	r3, [r3, #6]
    4e02:	b21b      	sxth	r3, r3
    4e04:	210f      	movs	r1, #15
    4e06:	400b      	ands	r3, r1
    4e08:	b21b      	sxth	r3, r3
    4e0a:	4313      	orrs	r3, r2
    4e0c:	b21a      	sxth	r2, r3
    4e0e:	2314      	movs	r3, #20
    4e10:	18fb      	adds	r3, r7, r3
    4e12:	801a      	strh	r2, [r3, #0]
	curr_drv_ver    = M2M_MAKE_VERSION(M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
    4e14:	2312      	movs	r3, #18
    4e16:	18fb      	adds	r3, r7, r3
    4e18:	4a21      	ldr	r2, [pc, #132]	; (4ea0 <nm_get_firmware_info+0x164>)
    4e1a:	801a      	strh	r2, [r3, #0]
	min_req_drv_ver = M2M_MAKE_VERSION(M2mRev->u8DriverMajor, M2mRev->u8DriverMinor,M2mRev->u8DriverPatch);
    4e1c:	687b      	ldr	r3, [r7, #4]
    4e1e:	79db      	ldrb	r3, [r3, #7]
    4e20:	021b      	lsls	r3, r3, #8
    4e22:	b21a      	sxth	r2, r3
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	7a1b      	ldrb	r3, [r3, #8]
    4e28:	011b      	lsls	r3, r3, #4
    4e2a:	b21b      	sxth	r3, r3
    4e2c:	21ff      	movs	r1, #255	; 0xff
    4e2e:	400b      	ands	r3, r1
    4e30:	b21b      	sxth	r3, r3
    4e32:	4313      	orrs	r3, r2
    4e34:	b21a      	sxth	r2, r3
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	7a5b      	ldrb	r3, [r3, #9]
    4e3a:	b21b      	sxth	r3, r3
    4e3c:	210f      	movs	r1, #15
    4e3e:	400b      	ands	r3, r1
    4e40:	b21b      	sxth	r3, r3
    4e42:	4313      	orrs	r3, r2
    4e44:	b21a      	sxth	r2, r3
    4e46:	2310      	movs	r3, #16
    4e48:	18fb      	adds	r3, r7, r3
    4e4a:	801a      	strh	r2, [r3, #0]
	if(curr_drv_ver <  min_req_drv_ver) {
    4e4c:	2312      	movs	r3, #18
    4e4e:	18fa      	adds	r2, r7, r3
    4e50:	2310      	movs	r3, #16
    4e52:	18fb      	adds	r3, r7, r3
    4e54:	8812      	ldrh	r2, [r2, #0]
    4e56:	881b      	ldrh	r3, [r3, #0]
    4e58:	429a      	cmp	r2, r3
    4e5a:	d203      	bcs.n	4e64 <nm_get_firmware_info+0x128>
		/*The current driver version should be larger or equal 
		than the min driver that the current firmware support  */
		ret = M2M_ERR_FW_VER_MISMATCH;
    4e5c:	2317      	movs	r3, #23
    4e5e:	18fb      	adds	r3, r7, r3
    4e60:	22f3      	movs	r2, #243	; 0xf3
    4e62:	701a      	strb	r2, [r3, #0]
	}
	if(curr_drv_ver >  curr_firm_ver) {
    4e64:	2312      	movs	r3, #18
    4e66:	18fa      	adds	r2, r7, r3
    4e68:	2314      	movs	r3, #20
    4e6a:	18fb      	adds	r3, r7, r3
    4e6c:	8812      	ldrh	r2, [r2, #0]
    4e6e:	881b      	ldrh	r3, [r3, #0]
    4e70:	429a      	cmp	r2, r3
    4e72:	d903      	bls.n	4e7c <nm_get_firmware_info+0x140>
		/*The current driver should be equal or less than the firmware version*/
		ret = M2M_ERR_FW_VER_MISMATCH;
    4e74:	2317      	movs	r3, #23
    4e76:	18fb      	adds	r3, r7, r3
    4e78:	22f3      	movs	r2, #243	; 0xf3
    4e7a:	701a      	strb	r2, [r3, #0]
	}
	return ret;
    4e7c:	2317      	movs	r3, #23
    4e7e:	18fb      	adds	r3, r7, r3
    4e80:	781b      	ldrb	r3, [r3, #0]
    4e82:	b25b      	sxtb	r3, r3
}
    4e84:	0018      	movs	r0, r3
    4e86:	46bd      	mov	sp, r7
    4e88:	b007      	add	sp, #28
    4e8a:	bd90      	pop	{r4, r7, pc}
    4e8c:	000207ac 	.word	0x000207ac
    4e90:	00004b05 	.word	0x00004b05
    4e94:	d75dc1c3 	.word	0xd75dc1c3
    4e98:	00001048 	.word	0x00001048
    4e9c:	00004471 	.word	0x00004471
    4ea0:	00001330 	.word	0x00001330

00004ea4 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
    4ea4:	b590      	push	{r4, r7, lr}
    4ea6:	b085      	sub	sp, #20
    4ea8:	af00      	add	r7, sp, #0
    4eaa:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
    4eac:	230f      	movs	r3, #15
    4eae:	18fb      	adds	r3, r7, r3
    4eb0:	2200      	movs	r2, #0
    4eb2:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	2b00      	cmp	r3, #0
    4eb8:	d013      	beq.n	4ee2 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
    4eba:	230e      	movs	r3, #14
    4ebc:	18fb      	adds	r3, r7, r3
    4ebe:	687a      	ldr	r2, [r7, #4]
    4ec0:	7812      	ldrb	r2, [r2, #0]
    4ec2:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
    4ec4:	230e      	movs	r3, #14
    4ec6:	18fb      	adds	r3, r7, r3
    4ec8:	781b      	ldrb	r3, [r3, #0]
    4eca:	2b00      	cmp	r3, #0
    4ecc:	d004      	beq.n	4ed8 <nm_drv_init+0x34>
    4ece:	230e      	movs	r3, #14
    4ed0:	18fb      	adds	r3, r7, r3
    4ed2:	781b      	ldrb	r3, [r3, #0]
    4ed4:	2b04      	cmp	r3, #4
    4ed6:	d908      	bls.n	4eea <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
    4ed8:	230e      	movs	r3, #14
    4eda:	18fb      	adds	r3, r7, r3
    4edc:	2201      	movs	r2, #1
    4ede:	701a      	strb	r2, [r3, #0]
    4ee0:	e003      	b.n	4eea <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
    4ee2:	230e      	movs	r3, #14
    4ee4:	18fb      	adds	r3, r7, r3
    4ee6:	2201      	movs	r2, #1
    4ee8:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
    4eea:	230f      	movs	r3, #15
    4eec:	18fc      	adds	r4, r7, r3
    4eee:	2000      	movs	r0, #0
    4ef0:	4b40      	ldr	r3, [pc, #256]	; (4ff4 <nm_drv_init+0x150>)
    4ef2:	4798      	blx	r3
    4ef4:	0003      	movs	r3, r0
    4ef6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4ef8:	230f      	movs	r3, #15
    4efa:	18fb      	adds	r3, r7, r3
    4efc:	781b      	ldrb	r3, [r3, #0]
    4efe:	b25b      	sxtb	r3, r3
    4f00:	2b00      	cmp	r3, #0
    4f02:	d00e      	beq.n	4f22 <nm_drv_init+0x7e>
		M2M_ERR("[nmi start]: fail init bus\n");
    4f04:	2392      	movs	r3, #146	; 0x92
    4f06:	005a      	lsls	r2, r3, #1
    4f08:	493b      	ldr	r1, [pc, #236]	; (4ff8 <nm_drv_init+0x154>)
    4f0a:	4b3c      	ldr	r3, [pc, #240]	; (4ffc <nm_drv_init+0x158>)
    4f0c:	0018      	movs	r0, r3
    4f0e:	4b3c      	ldr	r3, [pc, #240]	; (5000 <nm_drv_init+0x15c>)
    4f10:	4798      	blx	r3
    4f12:	4b3c      	ldr	r3, [pc, #240]	; (5004 <nm_drv_init+0x160>)
    4f14:	0018      	movs	r0, r3
    4f16:	4b3c      	ldr	r3, [pc, #240]	; (5008 <nm_drv_init+0x164>)
    4f18:	4798      	blx	r3
    4f1a:	200d      	movs	r0, #13
    4f1c:	4b3b      	ldr	r3, [pc, #236]	; (500c <nm_drv_init+0x168>)
    4f1e:	4798      	blx	r3
		goto ERR1;
    4f20:	e05f      	b.n	4fe2 <nm_drv_init+0x13e>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
    4f22:	4b3b      	ldr	r3, [pc, #236]	; (5010 <nm_drv_init+0x16c>)
    4f24:	0018      	movs	r0, r3
    4f26:	4b36      	ldr	r3, [pc, #216]	; (5000 <nm_drv_init+0x15c>)
    4f28:	4798      	blx	r3
    4f2a:	4b3a      	ldr	r3, [pc, #232]	; (5014 <nm_drv_init+0x170>)
    4f2c:	4798      	blx	r3
    4f2e:	0002      	movs	r2, r0
    4f30:	4b39      	ldr	r3, [pc, #228]	; (5018 <nm_drv_init+0x174>)
    4f32:	0011      	movs	r1, r2
    4f34:	0018      	movs	r0, r3
    4f36:	4b32      	ldr	r3, [pc, #200]	; (5000 <nm_drv_init+0x15c>)
    4f38:	4798      	blx	r3
    4f3a:	200d      	movs	r0, #13
    4f3c:	4b33      	ldr	r3, [pc, #204]	; (500c <nm_drv_init+0x168>)
    4f3e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
    4f40:	4b36      	ldr	r3, [pc, #216]	; (501c <nm_drv_init+0x178>)
    4f42:	4798      	blx	r3
	ret = cpu_start();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
    4f44:	230f      	movs	r3, #15
    4f46:	18fc      	adds	r4, r7, r3
    4f48:	230e      	movs	r3, #14
    4f4a:	18fb      	adds	r3, r7, r3
    4f4c:	781b      	ldrb	r3, [r3, #0]
    4f4e:	0018      	movs	r0, r3
    4f50:	4b33      	ldr	r3, [pc, #204]	; (5020 <nm_drv_init+0x17c>)
    4f52:	4798      	blx	r3
    4f54:	0003      	movs	r3, r0
    4f56:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4f58:	230f      	movs	r3, #15
    4f5a:	18fb      	adds	r3, r7, r3
    4f5c:	781b      	ldrb	r3, [r3, #0]
    4f5e:	b25b      	sxtb	r3, r3
    4f60:	2b00      	cmp	r3, #0
    4f62:	d139      	bne.n	4fd8 <nm_drv_init+0x134>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
    4f64:	230f      	movs	r3, #15
    4f66:	18fc      	adds	r4, r7, r3
    4f68:	230e      	movs	r3, #14
    4f6a:	18fb      	adds	r3, r7, r3
    4f6c:	781b      	ldrb	r3, [r3, #0]
    4f6e:	0018      	movs	r0, r3
    4f70:	4b2c      	ldr	r3, [pc, #176]	; (5024 <nm_drv_init+0x180>)
    4f72:	4798      	blx	r3
    4f74:	0003      	movs	r3, r0
    4f76:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4f78:	230f      	movs	r3, #15
    4f7a:	18fb      	adds	r3, r7, r3
    4f7c:	781b      	ldrb	r3, [r3, #0]
    4f7e:	b25b      	sxtb	r3, r3
    4f80:	2b00      	cmp	r3, #0
    4f82:	d12b      	bne.n	4fdc <nm_drv_init+0x138>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
    4f84:	230e      	movs	r3, #14
    4f86:	18fb      	adds	r3, r7, r3
    4f88:	781b      	ldrb	r3, [r3, #0]
    4f8a:	2b02      	cmp	r3, #2
    4f8c:	d029      	beq.n	4fe2 <nm_drv_init+0x13e>
    4f8e:	230e      	movs	r3, #14
    4f90:	18fb      	adds	r3, r7, r3
    4f92:	781b      	ldrb	r3, [r3, #0]
    4f94:	2b03      	cmp	r3, #3
    4f96:	d024      	beq.n	4fe2 <nm_drv_init+0x13e>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
    4f98:	230f      	movs	r3, #15
    4f9a:	18fc      	adds	r4, r7, r3
    4f9c:	4b22      	ldr	r3, [pc, #136]	; (5028 <nm_drv_init+0x184>)
    4f9e:	4798      	blx	r3
    4fa0:	0003      	movs	r3, r0
    4fa2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    4fa4:	230f      	movs	r3, #15
    4fa6:	18fb      	adds	r3, r7, r3
    4fa8:	781b      	ldrb	r3, [r3, #0]
    4faa:	b25b      	sxtb	r3, r3
    4fac:	2b00      	cmp	r3, #0
    4fae:	d00e      	beq.n	4fce <nm_drv_init+0x12a>
		M2M_ERR("failed to enable interrupts..\n");
    4fb0:	23ae      	movs	r3, #174	; 0xae
    4fb2:	005a      	lsls	r2, r3, #1
    4fb4:	4910      	ldr	r1, [pc, #64]	; (4ff8 <nm_drv_init+0x154>)
    4fb6:	4b11      	ldr	r3, [pc, #68]	; (4ffc <nm_drv_init+0x158>)
    4fb8:	0018      	movs	r0, r3
    4fba:	4b11      	ldr	r3, [pc, #68]	; (5000 <nm_drv_init+0x15c>)
    4fbc:	4798      	blx	r3
    4fbe:	4b1b      	ldr	r3, [pc, #108]	; (502c <nm_drv_init+0x188>)
    4fc0:	0018      	movs	r0, r3
    4fc2:	4b11      	ldr	r3, [pc, #68]	; (5008 <nm_drv_init+0x164>)
    4fc4:	4798      	blx	r3
    4fc6:	200d      	movs	r0, #13
    4fc8:	4b10      	ldr	r3, [pc, #64]	; (500c <nm_drv_init+0x168>)
    4fca:	4798      	blx	r3
		goto ERR2;
    4fcc:	e007      	b.n	4fde <nm_drv_init+0x13a>
	}
	
	return ret;
    4fce:	230f      	movs	r3, #15
    4fd0:	18fb      	adds	r3, r7, r3
    4fd2:	781b      	ldrb	r3, [r3, #0]
    4fd4:	b25b      	sxtb	r3, r3
    4fd6:	e008      	b.n	4fea <nm_drv_init+0x146>
		goto ERR2;
	}
#endif
	ret = wait_for_bootrom(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    4fd8:	46c0      	nop			; (mov r8, r8)
    4fda:	e000      	b.n	4fde <nm_drv_init+0x13a>
	}
		
	ret = wait_for_firmware_start(u8Mode);
	if (M2M_SUCCESS != ret) {
		goto ERR2;
    4fdc:	46c0      	nop			; (mov r8, r8)
		goto ERR2;
	}
	
	return ret;
ERR2:
	nm_bus_iface_deinit();
    4fde:	4b14      	ldr	r3, [pc, #80]	; (5030 <nm_drv_init+0x18c>)
    4fe0:	4798      	blx	r3
ERR1:
	return ret;
    4fe2:	230f      	movs	r3, #15
    4fe4:	18fb      	adds	r3, r7, r3
    4fe6:	781b      	ldrb	r3, [r3, #0]
    4fe8:	b25b      	sxtb	r3, r3
}
    4fea:	0018      	movs	r0, r3
    4fec:	46bd      	mov	sp, r7
    4fee:	b005      	add	sp, #20
    4ff0:	bd90      	pop	{r4, r7, pc}
    4ff2:	46c0      	nop			; (mov r8, r8)
    4ff4:	00004a89 	.word	0x00004a89
    4ff8:	00011b94 	.word	0x00011b94
    4ffc:	00011ac8 	.word	0x00011ac8
    5000:	000100d1 	.word	0x000100d1
    5004:	00011adc 	.word	0x00011adc
    5008:	000101f1 	.word	0x000101f1
    500c:	00010105 	.word	0x00010105
    5010:	00011af8 	.word	0x00011af8
    5014:	00004471 	.word	0x00004471
    5018:	00011b04 	.word	0x00011b04
    501c:	0000601d 	.word	0x0000601d
    5020:	00004569 	.word	0x00004569
    5024:	000046b1 	.word	0x000046b1
    5028:	000043b5 	.word	0x000043b5
    502c:	00011b14 	.word	0x00011b14
    5030:	00004abd 	.word	0x00004abd

00005034 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
    5034:	b590      	push	{r4, r7, lr}
    5036:	b085      	sub	sp, #20
    5038:	af00      	add	r7, sp, #0
    503a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
    503c:	230f      	movs	r3, #15
    503e:	18fc      	adds	r4, r7, r3
    5040:	4b2d      	ldr	r3, [pc, #180]	; (50f8 <nm_drv_deinit+0xc4>)
    5042:	4798      	blx	r3
    5044:	0003      	movs	r3, r0
    5046:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5048:	230f      	movs	r3, #15
    504a:	18fb      	adds	r3, r7, r3
    504c:	781b      	ldrb	r3, [r3, #0]
    504e:	b25b      	sxtb	r3, r3
    5050:	2b00      	cmp	r3, #0
    5052:	d00e      	beq.n	5072 <nm_drv_deinit+0x3e>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
    5054:	23ba      	movs	r3, #186	; 0xba
    5056:	005a      	lsls	r2, r3, #1
    5058:	4928      	ldr	r1, [pc, #160]	; (50fc <nm_drv_deinit+0xc8>)
    505a:	4b29      	ldr	r3, [pc, #164]	; (5100 <nm_drv_deinit+0xcc>)
    505c:	0018      	movs	r0, r3
    505e:	4b29      	ldr	r3, [pc, #164]	; (5104 <nm_drv_deinit+0xd0>)
    5060:	4798      	blx	r3
    5062:	4b29      	ldr	r3, [pc, #164]	; (5108 <nm_drv_deinit+0xd4>)
    5064:	0018      	movs	r0, r3
    5066:	4b29      	ldr	r3, [pc, #164]	; (510c <nm_drv_deinit+0xd8>)
    5068:	4798      	blx	r3
    506a:	200d      	movs	r0, #13
    506c:	4b28      	ldr	r3, [pc, #160]	; (5110 <nm_drv_deinit+0xdc>)
    506e:	4798      	blx	r3
		goto ERR1;
    5070:	e03a      	b.n	50e8 <nm_drv_deinit+0xb4>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
    5072:	230f      	movs	r3, #15
    5074:	18fc      	adds	r4, r7, r3
    5076:	2000      	movs	r0, #0
    5078:	4b26      	ldr	r3, [pc, #152]	; (5114 <nm_drv_deinit+0xe0>)
    507a:	4798      	blx	r3
    507c:	0003      	movs	r3, r0
    507e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    5080:	230f      	movs	r3, #15
    5082:	18fb      	adds	r3, r7, r3
    5084:	781b      	ldrb	r3, [r3, #0]
    5086:	b25b      	sxtb	r3, r3
    5088:	2b00      	cmp	r3, #0
    508a:	d00f      	beq.n	50ac <nm_drv_deinit+0x78>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
    508c:	237c      	movs	r3, #124	; 0x7c
    508e:	33ff      	adds	r3, #255	; 0xff
    5090:	001a      	movs	r2, r3
    5092:	491a      	ldr	r1, [pc, #104]	; (50fc <nm_drv_deinit+0xc8>)
    5094:	4b1a      	ldr	r3, [pc, #104]	; (5100 <nm_drv_deinit+0xcc>)
    5096:	0018      	movs	r0, r3
    5098:	4b1a      	ldr	r3, [pc, #104]	; (5104 <nm_drv_deinit+0xd0>)
    509a:	4798      	blx	r3
    509c:	4b1e      	ldr	r3, [pc, #120]	; (5118 <nm_drv_deinit+0xe4>)
    509e:	0018      	movs	r0, r3
    50a0:	4b1a      	ldr	r3, [pc, #104]	; (510c <nm_drv_deinit+0xd8>)
    50a2:	4798      	blx	r3
    50a4:	200d      	movs	r0, #13
    50a6:	4b1a      	ldr	r3, [pc, #104]	; (5110 <nm_drv_deinit+0xdc>)
    50a8:	4798      	blx	r3
		goto ERR1;
    50aa:	e01d      	b.n	50e8 <nm_drv_deinit+0xb4>
	}

	ret = nm_bus_iface_deinit();
    50ac:	230f      	movs	r3, #15
    50ae:	18fc      	adds	r4, r7, r3
    50b0:	4b1a      	ldr	r3, [pc, #104]	; (511c <nm_drv_deinit+0xe8>)
    50b2:	4798      	blx	r3
    50b4:	0003      	movs	r3, r0
    50b6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
    50b8:	230f      	movs	r3, #15
    50ba:	18fb      	adds	r3, r7, r3
    50bc:	781b      	ldrb	r3, [r3, #0]
    50be:	b25b      	sxtb	r3, r3
    50c0:	2b00      	cmp	r3, #0
    50c2:	d00f      	beq.n	50e4 <nm_drv_deinit+0xb0>
		M2M_ERR("[nmi stop]: fail init bus\n");
    50c4:	2382      	movs	r3, #130	; 0x82
    50c6:	33ff      	adds	r3, #255	; 0xff
    50c8:	001a      	movs	r2, r3
    50ca:	490c      	ldr	r1, [pc, #48]	; (50fc <nm_drv_deinit+0xc8>)
    50cc:	4b0c      	ldr	r3, [pc, #48]	; (5100 <nm_drv_deinit+0xcc>)
    50ce:	0018      	movs	r0, r3
    50d0:	4b0c      	ldr	r3, [pc, #48]	; (5104 <nm_drv_deinit+0xd0>)
    50d2:	4798      	blx	r3
    50d4:	4b12      	ldr	r3, [pc, #72]	; (5120 <nm_drv_deinit+0xec>)
    50d6:	0018      	movs	r0, r3
    50d8:	4b0c      	ldr	r3, [pc, #48]	; (510c <nm_drv_deinit+0xd8>)
    50da:	4798      	blx	r3
    50dc:	200d      	movs	r0, #13
    50de:	4b0c      	ldr	r3, [pc, #48]	; (5110 <nm_drv_deinit+0xdc>)
    50e0:	4798      	blx	r3
		goto ERR1;
    50e2:	e001      	b.n	50e8 <nm_drv_deinit+0xb4>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
    50e4:	4b0f      	ldr	r3, [pc, #60]	; (5124 <nm_drv_deinit+0xf0>)
    50e6:	4798      	blx	r3
#endif

ERR1:
	return ret;
    50e8:	230f      	movs	r3, #15
    50ea:	18fb      	adds	r3, r7, r3
    50ec:	781b      	ldrb	r3, [r3, #0]
    50ee:	b25b      	sxtb	r3, r3
}
    50f0:	0018      	movs	r0, r3
    50f2:	46bd      	mov	sp, r7
    50f4:	b005      	add	sp, #20
    50f6:	bd90      	pop	{r4, r7, pc}
    50f8:	00004765 	.word	0x00004765
    50fc:	00011ba0 	.word	0x00011ba0
    5100:	00011ac8 	.word	0x00011ac8
    5104:	000100d1 	.word	0x000100d1
    5108:	00011b34 	.word	0x00011b34
    510c:	000101f1 	.word	0x000101f1
    5110:	00010105 	.word	0x00010105
    5114:	00007231 	.word	0x00007231
    5118:	00011b54 	.word	0x00011b54
    511c:	00004abd 	.word	0x00004abd
    5120:	00011b78 	.word	0x00011b78
    5124:	00006165 	.word	0x00006165

00005128 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    5128:	b580      	push	{r7, lr}
    512a:	b086      	sub	sp, #24
    512c:	af00      	add	r7, sp, #0
    512e:	6078      	str	r0, [r7, #4]
    5130:	000a      	movs	r2, r1
    5132:	1cbb      	adds	r3, r7, #2
    5134:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    5136:	230c      	movs	r3, #12
    5138:	18fb      	adds	r3, r7, r3
    513a:	2200      	movs	r2, #0
    513c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    513e:	230c      	movs	r3, #12
    5140:	18fb      	adds	r3, r7, r3
    5142:	687a      	ldr	r2, [r7, #4]
    5144:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    5146:	230c      	movs	r3, #12
    5148:	18fb      	adds	r3, r7, r3
    514a:	1cba      	adds	r2, r7, #2
    514c:	8812      	ldrh	r2, [r2, #0]
    514e:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    5150:	230c      	movs	r3, #12
    5152:	18fb      	adds	r3, r7, r3
    5154:	0019      	movs	r1, r3
    5156:	2003      	movs	r0, #3
    5158:	4b03      	ldr	r3, [pc, #12]	; (5168 <nmi_spi_read+0x40>)
    515a:	4798      	blx	r3
    515c:	0003      	movs	r3, r0
}
    515e:	0018      	movs	r0, r3
    5160:	46bd      	mov	sp, r7
    5162:	b006      	add	sp, #24
    5164:	bd80      	pop	{r7, pc}
    5166:	46c0      	nop			; (mov r8, r8)
    5168:	000026d9 	.word	0x000026d9

0000516c <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    516c:	b580      	push	{r7, lr}
    516e:	b086      	sub	sp, #24
    5170:	af00      	add	r7, sp, #0
    5172:	6078      	str	r0, [r7, #4]
    5174:	000a      	movs	r2, r1
    5176:	1cbb      	adds	r3, r7, #2
    5178:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    517a:	230c      	movs	r3, #12
    517c:	18fb      	adds	r3, r7, r3
    517e:	687a      	ldr	r2, [r7, #4]
    5180:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    5182:	230c      	movs	r3, #12
    5184:	18fb      	adds	r3, r7, r3
    5186:	2200      	movs	r2, #0
    5188:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    518a:	230c      	movs	r3, #12
    518c:	18fb      	adds	r3, r7, r3
    518e:	1cba      	adds	r2, r7, #2
    5190:	8812      	ldrh	r2, [r2, #0]
    5192:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    5194:	230c      	movs	r3, #12
    5196:	18fb      	adds	r3, r7, r3
    5198:	0019      	movs	r1, r3
    519a:	2003      	movs	r0, #3
    519c:	4b03      	ldr	r3, [pc, #12]	; (51ac <nmi_spi_write+0x40>)
    519e:	4798      	blx	r3
    51a0:	0003      	movs	r3, r0
}
    51a2:	0018      	movs	r0, r3
    51a4:	46bd      	mov	sp, r7
    51a6:	b006      	add	sp, #24
    51a8:	bd80      	pop	{r7, pc}
    51aa:	46c0      	nop			; (mov r8, r8)
    51ac:	000026d9 	.word	0x000026d9

000051b0 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    51b0:	b580      	push	{r7, lr}
    51b2:	b082      	sub	sp, #8
    51b4:	af00      	add	r7, sp, #0
    51b6:	0002      	movs	r2, r0
    51b8:	1dfb      	adds	r3, r7, #7
    51ba:	701a      	strb	r2, [r3, #0]
    51bc:	1dbb      	adds	r3, r7, #6
    51be:	1c0a      	adds	r2, r1, #0
    51c0:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    51c2:	1dfb      	adds	r3, r7, #7
    51c4:	781b      	ldrb	r3, [r3, #0]
    51c6:	005a      	lsls	r2, r3, #1
    51c8:	1dbb      	adds	r3, r7, #6
    51ca:	781b      	ldrb	r3, [r3, #0]
    51cc:	4053      	eors	r3, r2
    51ce:	4a03      	ldr	r2, [pc, #12]	; (51dc <crc7_byte+0x2c>)
    51d0:	5cd3      	ldrb	r3, [r2, r3]
}
    51d2:	0018      	movs	r0, r3
    51d4:	46bd      	mov	sp, r7
    51d6:	b002      	add	sp, #8
    51d8:	bd80      	pop	{r7, pc}
    51da:	46c0      	nop			; (mov r8, r8)
    51dc:	00011bb0 	.word	0x00011bb0

000051e0 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    51e0:	b590      	push	{r4, r7, lr}
    51e2:	b085      	sub	sp, #20
    51e4:	af00      	add	r7, sp, #0
    51e6:	60b9      	str	r1, [r7, #8]
    51e8:	607a      	str	r2, [r7, #4]
    51ea:	230f      	movs	r3, #15
    51ec:	18fb      	adds	r3, r7, r3
    51ee:	1c02      	adds	r2, r0, #0
    51f0:	701a      	strb	r2, [r3, #0]
	while (len--)
    51f2:	e00e      	b.n	5212 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    51f4:	68bb      	ldr	r3, [r7, #8]
    51f6:	1c5a      	adds	r2, r3, #1
    51f8:	60ba      	str	r2, [r7, #8]
    51fa:	781a      	ldrb	r2, [r3, #0]
    51fc:	230f      	movs	r3, #15
    51fe:	18fc      	adds	r4, r7, r3
    5200:	230f      	movs	r3, #15
    5202:	18fb      	adds	r3, r7, r3
    5204:	781b      	ldrb	r3, [r3, #0]
    5206:	0011      	movs	r1, r2
    5208:	0018      	movs	r0, r3
    520a:	4b08      	ldr	r3, [pc, #32]	; (522c <crc7+0x4c>)
    520c:	4798      	blx	r3
    520e:	0003      	movs	r3, r0
    5210:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    5212:	687b      	ldr	r3, [r7, #4]
    5214:	1e5a      	subs	r2, r3, #1
    5216:	607a      	str	r2, [r7, #4]
    5218:	2b00      	cmp	r3, #0
    521a:	d1eb      	bne.n	51f4 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    521c:	230f      	movs	r3, #15
    521e:	18fb      	adds	r3, r7, r3
    5220:	781b      	ldrb	r3, [r3, #0]
}
    5222:	0018      	movs	r0, r3
    5224:	46bd      	mov	sp, r7
    5226:	b005      	add	sp, #20
    5228:	bd90      	pop	{r4, r7, pc}
    522a:	46c0      	nop			; (mov r8, r8)
    522c:	000051b1 	.word	0x000051b1

00005230 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    5230:	b590      	push	{r4, r7, lr}
    5232:	b089      	sub	sp, #36	; 0x24
    5234:	af00      	add	r7, sp, #0
    5236:	60b9      	str	r1, [r7, #8]
    5238:	607a      	str	r2, [r7, #4]
    523a:	603b      	str	r3, [r7, #0]
    523c:	230f      	movs	r3, #15
    523e:	18fb      	adds	r3, r7, r3
    5240:	1c02      	adds	r2, r0, #0
    5242:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    5244:	231f      	movs	r3, #31
    5246:	18fb      	adds	r3, r7, r3
    5248:	2205      	movs	r2, #5
    524a:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    524c:	231e      	movs	r3, #30
    524e:	18fb      	adds	r3, r7, r3
    5250:	2201      	movs	r2, #1
    5252:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    5254:	2314      	movs	r3, #20
    5256:	18fb      	adds	r3, r7, r3
    5258:	220f      	movs	r2, #15
    525a:	18ba      	adds	r2, r7, r2
    525c:	7812      	ldrb	r2, [r2, #0]
    525e:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    5260:	230f      	movs	r3, #15
    5262:	18fb      	adds	r3, r7, r3
    5264:	781b      	ldrb	r3, [r3, #0]
    5266:	3bc1      	subs	r3, #193	; 0xc1
    5268:	2b0e      	cmp	r3, #14
    526a:	d900      	bls.n	526e <spi_cmd+0x3e>
    526c:	e11b      	b.n	54a6 <spi_cmd+0x276>
    526e:	009a      	lsls	r2, r3, #2
    5270:	4bb6      	ldr	r3, [pc, #728]	; (554c <spi_cmd+0x31c>)
    5272:	18d3      	adds	r3, r2, r3
    5274:	681b      	ldr	r3, [r3, #0]
    5276:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    5278:	68bb      	ldr	r3, [r7, #8]
    527a:	0c1b      	lsrs	r3, r3, #16
    527c:	b2da      	uxtb	r2, r3
    527e:	2314      	movs	r3, #20
    5280:	18fb      	adds	r3, r7, r3
    5282:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    5284:	68bb      	ldr	r3, [r7, #8]
    5286:	0a1b      	lsrs	r3, r3, #8
    5288:	b2da      	uxtb	r2, r3
    528a:	2314      	movs	r3, #20
    528c:	18fb      	adds	r3, r7, r3
    528e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    5290:	68bb      	ldr	r3, [r7, #8]
    5292:	b2da      	uxtb	r2, r3
    5294:	2314      	movs	r3, #20
    5296:	18fb      	adds	r3, r7, r3
    5298:	70da      	strb	r2, [r3, #3]
		len = 5;
    529a:	231f      	movs	r3, #31
    529c:	18fb      	adds	r3, r7, r3
    529e:	2205      	movs	r2, #5
    52a0:	701a      	strb	r2, [r3, #0]
		break;
    52a2:	e105      	b.n	54b0 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    52a4:	68bb      	ldr	r3, [r7, #8]
    52a6:	0a1b      	lsrs	r3, r3, #8
    52a8:	b2da      	uxtb	r2, r3
    52aa:	2314      	movs	r3, #20
    52ac:	18fb      	adds	r3, r7, r3
    52ae:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    52b0:	2330      	movs	r3, #48	; 0x30
    52b2:	18fb      	adds	r3, r7, r3
    52b4:	781b      	ldrb	r3, [r3, #0]
    52b6:	2b00      	cmp	r3, #0
    52b8:	d009      	beq.n	52ce <spi_cmd+0x9e>
    52ba:	2314      	movs	r3, #20
    52bc:	18fb      	adds	r3, r7, r3
    52be:	785b      	ldrb	r3, [r3, #1]
    52c0:	2280      	movs	r2, #128	; 0x80
    52c2:	4252      	negs	r2, r2
    52c4:	4313      	orrs	r3, r2
    52c6:	b2da      	uxtb	r2, r3
    52c8:	2314      	movs	r3, #20
    52ca:	18fb      	adds	r3, r7, r3
    52cc:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    52ce:	68bb      	ldr	r3, [r7, #8]
    52d0:	b2da      	uxtb	r2, r3
    52d2:	2314      	movs	r3, #20
    52d4:	18fb      	adds	r3, r7, r3
    52d6:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    52d8:	2314      	movs	r3, #20
    52da:	18fb      	adds	r3, r7, r3
    52dc:	2200      	movs	r2, #0
    52de:	70da      	strb	r2, [r3, #3]
		len = 5;
    52e0:	231f      	movs	r3, #31
    52e2:	18fb      	adds	r3, r7, r3
    52e4:	2205      	movs	r2, #5
    52e6:	701a      	strb	r2, [r3, #0]
		break;
    52e8:	e0e2      	b.n	54b0 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    52ea:	2314      	movs	r3, #20
    52ec:	18fb      	adds	r3, r7, r3
    52ee:	2200      	movs	r2, #0
    52f0:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    52f2:	2314      	movs	r3, #20
    52f4:	18fb      	adds	r3, r7, r3
    52f6:	2200      	movs	r2, #0
    52f8:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    52fa:	2314      	movs	r3, #20
    52fc:	18fb      	adds	r3, r7, r3
    52fe:	2200      	movs	r2, #0
    5300:	70da      	strb	r2, [r3, #3]
		len = 5;
    5302:	231f      	movs	r3, #31
    5304:	18fb      	adds	r3, r7, r3
    5306:	2205      	movs	r2, #5
    5308:	701a      	strb	r2, [r3, #0]
		break;
    530a:	e0d1      	b.n	54b0 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    530c:	2314      	movs	r3, #20
    530e:	18fb      	adds	r3, r7, r3
    5310:	2200      	movs	r2, #0
    5312:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    5314:	2314      	movs	r3, #20
    5316:	18fb      	adds	r3, r7, r3
    5318:	2200      	movs	r2, #0
    531a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    531c:	2314      	movs	r3, #20
    531e:	18fb      	adds	r3, r7, r3
    5320:	2200      	movs	r2, #0
    5322:	70da      	strb	r2, [r3, #3]
		len = 5;
    5324:	231f      	movs	r3, #31
    5326:	18fb      	adds	r3, r7, r3
    5328:	2205      	movs	r2, #5
    532a:	701a      	strb	r2, [r3, #0]
		break;
    532c:	e0c0      	b.n	54b0 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    532e:	2314      	movs	r3, #20
    5330:	18fb      	adds	r3, r7, r3
    5332:	22ff      	movs	r2, #255	; 0xff
    5334:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    5336:	2314      	movs	r3, #20
    5338:	18fb      	adds	r3, r7, r3
    533a:	22ff      	movs	r2, #255	; 0xff
    533c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    533e:	2314      	movs	r3, #20
    5340:	18fb      	adds	r3, r7, r3
    5342:	22ff      	movs	r2, #255	; 0xff
    5344:	70da      	strb	r2, [r3, #3]
		len = 5;
    5346:	231f      	movs	r3, #31
    5348:	18fb      	adds	r3, r7, r3
    534a:	2205      	movs	r2, #5
    534c:	701a      	strb	r2, [r3, #0]
		break;
    534e:	e0af      	b.n	54b0 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    5350:	68bb      	ldr	r3, [r7, #8]
    5352:	0c1b      	lsrs	r3, r3, #16
    5354:	b2da      	uxtb	r2, r3
    5356:	2314      	movs	r3, #20
    5358:	18fb      	adds	r3, r7, r3
    535a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    535c:	68bb      	ldr	r3, [r7, #8]
    535e:	0a1b      	lsrs	r3, r3, #8
    5360:	b2da      	uxtb	r2, r3
    5362:	2314      	movs	r3, #20
    5364:	18fb      	adds	r3, r7, r3
    5366:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    5368:	68bb      	ldr	r3, [r7, #8]
    536a:	b2da      	uxtb	r2, r3
    536c:	2314      	movs	r3, #20
    536e:	18fb      	adds	r3, r7, r3
    5370:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    5372:	683b      	ldr	r3, [r7, #0]
    5374:	0a1b      	lsrs	r3, r3, #8
    5376:	b2da      	uxtb	r2, r3
    5378:	2314      	movs	r3, #20
    537a:	18fb      	adds	r3, r7, r3
    537c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    537e:	683b      	ldr	r3, [r7, #0]
    5380:	b2da      	uxtb	r2, r3
    5382:	2314      	movs	r3, #20
    5384:	18fb      	adds	r3, r7, r3
    5386:	715a      	strb	r2, [r3, #5]
		len = 7;
    5388:	231f      	movs	r3, #31
    538a:	18fb      	adds	r3, r7, r3
    538c:	2207      	movs	r2, #7
    538e:	701a      	strb	r2, [r3, #0]
		break;
    5390:	e08e      	b.n	54b0 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    5392:	68bb      	ldr	r3, [r7, #8]
    5394:	0c1b      	lsrs	r3, r3, #16
    5396:	b2da      	uxtb	r2, r3
    5398:	2314      	movs	r3, #20
    539a:	18fb      	adds	r3, r7, r3
    539c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    539e:	68bb      	ldr	r3, [r7, #8]
    53a0:	0a1b      	lsrs	r3, r3, #8
    53a2:	b2da      	uxtb	r2, r3
    53a4:	2314      	movs	r3, #20
    53a6:	18fb      	adds	r3, r7, r3
    53a8:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    53aa:	68bb      	ldr	r3, [r7, #8]
    53ac:	b2da      	uxtb	r2, r3
    53ae:	2314      	movs	r3, #20
    53b0:	18fb      	adds	r3, r7, r3
    53b2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    53b4:	683b      	ldr	r3, [r7, #0]
    53b6:	0c1b      	lsrs	r3, r3, #16
    53b8:	b2da      	uxtb	r2, r3
    53ba:	2314      	movs	r3, #20
    53bc:	18fb      	adds	r3, r7, r3
    53be:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    53c0:	683b      	ldr	r3, [r7, #0]
    53c2:	0a1b      	lsrs	r3, r3, #8
    53c4:	b2da      	uxtb	r2, r3
    53c6:	2314      	movs	r3, #20
    53c8:	18fb      	adds	r3, r7, r3
    53ca:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    53cc:	683b      	ldr	r3, [r7, #0]
    53ce:	b2da      	uxtb	r2, r3
    53d0:	2314      	movs	r3, #20
    53d2:	18fb      	adds	r3, r7, r3
    53d4:	719a      	strb	r2, [r3, #6]
		len = 8;
    53d6:	231f      	movs	r3, #31
    53d8:	18fb      	adds	r3, r7, r3
    53da:	2208      	movs	r2, #8
    53dc:	701a      	strb	r2, [r3, #0]
		break;
    53de:	e067      	b.n	54b0 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    53e0:	68bb      	ldr	r3, [r7, #8]
    53e2:	0a1b      	lsrs	r3, r3, #8
    53e4:	b2da      	uxtb	r2, r3
    53e6:	2314      	movs	r3, #20
    53e8:	18fb      	adds	r3, r7, r3
    53ea:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    53ec:	2330      	movs	r3, #48	; 0x30
    53ee:	18fb      	adds	r3, r7, r3
    53f0:	781b      	ldrb	r3, [r3, #0]
    53f2:	2b00      	cmp	r3, #0
    53f4:	d009      	beq.n	540a <spi_cmd+0x1da>
    53f6:	2314      	movs	r3, #20
    53f8:	18fb      	adds	r3, r7, r3
    53fa:	785b      	ldrb	r3, [r3, #1]
    53fc:	2280      	movs	r2, #128	; 0x80
    53fe:	4252      	negs	r2, r2
    5400:	4313      	orrs	r3, r2
    5402:	b2da      	uxtb	r2, r3
    5404:	2314      	movs	r3, #20
    5406:	18fb      	adds	r3, r7, r3
    5408:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    540a:	68bb      	ldr	r3, [r7, #8]
    540c:	b2da      	uxtb	r2, r3
    540e:	2314      	movs	r3, #20
    5410:	18fb      	adds	r3, r7, r3
    5412:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    5414:	687b      	ldr	r3, [r7, #4]
    5416:	0e1b      	lsrs	r3, r3, #24
    5418:	b2da      	uxtb	r2, r3
    541a:	2314      	movs	r3, #20
    541c:	18fb      	adds	r3, r7, r3
    541e:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    5420:	687b      	ldr	r3, [r7, #4]
    5422:	0c1b      	lsrs	r3, r3, #16
    5424:	b2da      	uxtb	r2, r3
    5426:	2314      	movs	r3, #20
    5428:	18fb      	adds	r3, r7, r3
    542a:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    542c:	687b      	ldr	r3, [r7, #4]
    542e:	0a1b      	lsrs	r3, r3, #8
    5430:	b2da      	uxtb	r2, r3
    5432:	2314      	movs	r3, #20
    5434:	18fb      	adds	r3, r7, r3
    5436:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    5438:	687b      	ldr	r3, [r7, #4]
    543a:	b2da      	uxtb	r2, r3
    543c:	2314      	movs	r3, #20
    543e:	18fb      	adds	r3, r7, r3
    5440:	719a      	strb	r2, [r3, #6]
		len = 8;
    5442:	231f      	movs	r3, #31
    5444:	18fb      	adds	r3, r7, r3
    5446:	2208      	movs	r2, #8
    5448:	701a      	strb	r2, [r3, #0]
		break;
    544a:	e031      	b.n	54b0 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    544c:	68bb      	ldr	r3, [r7, #8]
    544e:	0c1b      	lsrs	r3, r3, #16
    5450:	b2da      	uxtb	r2, r3
    5452:	2314      	movs	r3, #20
    5454:	18fb      	adds	r3, r7, r3
    5456:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    5458:	68bb      	ldr	r3, [r7, #8]
    545a:	0a1b      	lsrs	r3, r3, #8
    545c:	b2da      	uxtb	r2, r3
    545e:	2314      	movs	r3, #20
    5460:	18fb      	adds	r3, r7, r3
    5462:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    5464:	68bb      	ldr	r3, [r7, #8]
    5466:	b2da      	uxtb	r2, r3
    5468:	2314      	movs	r3, #20
    546a:	18fb      	adds	r3, r7, r3
    546c:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    546e:	687b      	ldr	r3, [r7, #4]
    5470:	0e1b      	lsrs	r3, r3, #24
    5472:	b2da      	uxtb	r2, r3
    5474:	2314      	movs	r3, #20
    5476:	18fb      	adds	r3, r7, r3
    5478:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    547a:	687b      	ldr	r3, [r7, #4]
    547c:	0c1b      	lsrs	r3, r3, #16
    547e:	b2da      	uxtb	r2, r3
    5480:	2314      	movs	r3, #20
    5482:	18fb      	adds	r3, r7, r3
    5484:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    5486:	687b      	ldr	r3, [r7, #4]
    5488:	0a1b      	lsrs	r3, r3, #8
    548a:	b2da      	uxtb	r2, r3
    548c:	2314      	movs	r3, #20
    548e:	18fb      	adds	r3, r7, r3
    5490:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    5492:	687b      	ldr	r3, [r7, #4]
    5494:	b2da      	uxtb	r2, r3
    5496:	2314      	movs	r3, #20
    5498:	18fb      	adds	r3, r7, r3
    549a:	71da      	strb	r2, [r3, #7]
		len = 9;
    549c:	231f      	movs	r3, #31
    549e:	18fb      	adds	r3, r7, r3
    54a0:	2209      	movs	r2, #9
    54a2:	701a      	strb	r2, [r3, #0]
		break;
    54a4:	e004      	b.n	54b0 <spi_cmd+0x280>
	default:
		result = N_FAIL;
    54a6:	231e      	movs	r3, #30
    54a8:	18fb      	adds	r3, r7, r3
    54aa:	2200      	movs	r2, #0
    54ac:	701a      	strb	r2, [r3, #0]
		break;
    54ae:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    54b0:	231e      	movs	r3, #30
    54b2:	18fb      	adds	r3, r7, r3
    54b4:	781b      	ldrb	r3, [r3, #0]
    54b6:	b25b      	sxtb	r3, r3
    54b8:	2b00      	cmp	r3, #0
    54ba:	d03e      	beq.n	553a <spi_cmd+0x30a>
		if (!gu8Crc_off)
    54bc:	4b24      	ldr	r3, [pc, #144]	; (5550 <spi_cmd+0x320>)
    54be:	781b      	ldrb	r3, [r3, #0]
    54c0:	2b00      	cmp	r3, #0
    54c2:	d115      	bne.n	54f0 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    54c4:	231f      	movs	r3, #31
    54c6:	18fb      	adds	r3, r7, r3
    54c8:	781b      	ldrb	r3, [r3, #0]
    54ca:	1e5c      	subs	r4, r3, #1
    54cc:	231f      	movs	r3, #31
    54ce:	18fb      	adds	r3, r7, r3
    54d0:	781b      	ldrb	r3, [r3, #0]
    54d2:	3b01      	subs	r3, #1
    54d4:	001a      	movs	r2, r3
    54d6:	2314      	movs	r3, #20
    54d8:	18fb      	adds	r3, r7, r3
    54da:	0019      	movs	r1, r3
    54dc:	207f      	movs	r0, #127	; 0x7f
    54de:	4b1d      	ldr	r3, [pc, #116]	; (5554 <spi_cmd+0x324>)
    54e0:	4798      	blx	r3
    54e2:	0003      	movs	r3, r0
    54e4:	18db      	adds	r3, r3, r3
    54e6:	b2da      	uxtb	r2, r3
    54e8:	2314      	movs	r3, #20
    54ea:	18fb      	adds	r3, r7, r3
    54ec:	551a      	strb	r2, [r3, r4]
    54ee:	e006      	b.n	54fe <spi_cmd+0x2ce>
		else
			len-=1;
    54f0:	231f      	movs	r3, #31
    54f2:	18fb      	adds	r3, r7, r3
    54f4:	221f      	movs	r2, #31
    54f6:	18ba      	adds	r2, r7, r2
    54f8:	7812      	ldrb	r2, [r2, #0]
    54fa:	3a01      	subs	r2, #1
    54fc:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    54fe:	231f      	movs	r3, #31
    5500:	18fb      	adds	r3, r7, r3
    5502:	781b      	ldrb	r3, [r3, #0]
    5504:	b29a      	uxth	r2, r3
    5506:	2314      	movs	r3, #20
    5508:	18fb      	adds	r3, r7, r3
    550a:	0011      	movs	r1, r2
    550c:	0018      	movs	r0, r3
    550e:	4b12      	ldr	r3, [pc, #72]	; (5558 <spi_cmd+0x328>)
    5510:	4798      	blx	r3
    5512:	1e03      	subs	r3, r0, #0
    5514:	d011      	beq.n	553a <spi_cmd+0x30a>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    5516:	2384      	movs	r3, #132	; 0x84
    5518:	005a      	lsls	r2, r3, #1
    551a:	4910      	ldr	r1, [pc, #64]	; (555c <spi_cmd+0x32c>)
    551c:	4b10      	ldr	r3, [pc, #64]	; (5560 <spi_cmd+0x330>)
    551e:	0018      	movs	r0, r3
    5520:	4b10      	ldr	r3, [pc, #64]	; (5564 <spi_cmd+0x334>)
    5522:	4798      	blx	r3
    5524:	4b10      	ldr	r3, [pc, #64]	; (5568 <spi_cmd+0x338>)
    5526:	0018      	movs	r0, r3
    5528:	4b10      	ldr	r3, [pc, #64]	; (556c <spi_cmd+0x33c>)
    552a:	4798      	blx	r3
    552c:	200d      	movs	r0, #13
    552e:	4b10      	ldr	r3, [pc, #64]	; (5570 <spi_cmd+0x340>)
    5530:	4798      	blx	r3
			result = N_FAIL;
    5532:	231e      	movs	r3, #30
    5534:	18fb      	adds	r3, r7, r3
    5536:	2200      	movs	r2, #0
    5538:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    553a:	231e      	movs	r3, #30
    553c:	18fb      	adds	r3, r7, r3
    553e:	781b      	ldrb	r3, [r3, #0]
    5540:	b25b      	sxtb	r3, r3
}
    5542:	0018      	movs	r0, r3
    5544:	46bd      	mov	sp, r7
    5546:	b009      	add	sp, #36	; 0x24
    5548:	bd90      	pop	{r4, r7, pc}
    554a:	46c0      	nop			; (mov r8, r8)
    554c:	00012168 	.word	0x00012168
    5550:	200000e8 	.word	0x200000e8
    5554:	000051e1 	.word	0x000051e1
    5558:	0000516d 	.word	0x0000516d
    555c:	000121a4 	.word	0x000121a4
    5560:	00011cb0 	.word	0x00011cb0
    5564:	000100d1 	.word	0x000100d1
    5568:	00011cc4 	.word	0x00011cc4
    556c:	000101f1 	.word	0x000101f1
    5570:	00010105 	.word	0x00010105

00005574 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    5574:	b580      	push	{r7, lr}
    5576:	b084      	sub	sp, #16
    5578:	af00      	add	r7, sp, #0
    557a:	0002      	movs	r2, r0
    557c:	1dfb      	adds	r3, r7, #7
    557e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    5580:	230f      	movs	r3, #15
    5582:	18fb      	adds	r3, r7, r3
    5584:	2201      	movs	r2, #1
    5586:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    5588:	1dfb      	adds	r3, r7, #7
    558a:	781b      	ldrb	r3, [r3, #0]
    558c:	2bcf      	cmp	r3, #207	; 0xcf
    558e:	d007      	beq.n	55a0 <spi_cmd_rsp+0x2c>
    5590:	1dfb      	adds	r3, r7, #7
    5592:	781b      	ldrb	r3, [r3, #0]
    5594:	2bc5      	cmp	r3, #197	; 0xc5
    5596:	d003      	beq.n	55a0 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    5598:	1dfb      	adds	r3, r7, #7
    559a:	781b      	ldrb	r3, [r3, #0]
    559c:	2bc6      	cmp	r3, #198	; 0xc6
    559e:	d10c      	bne.n	55ba <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    55a0:	230d      	movs	r3, #13
    55a2:	18fb      	adds	r3, r7, r3
    55a4:	2101      	movs	r1, #1
    55a6:	0018      	movs	r0, r3
    55a8:	4b3a      	ldr	r3, [pc, #232]	; (5694 <spi_cmd_rsp+0x120>)
    55aa:	4798      	blx	r3
    55ac:	1e03      	subs	r3, r0, #0
    55ae:	d004      	beq.n	55ba <spi_cmd_rsp+0x46>
			result = N_FAIL;
    55b0:	230f      	movs	r3, #15
    55b2:	18fb      	adds	r3, r7, r3
    55b4:	2200      	movs	r2, #0
    55b6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    55b8:	e063      	b.n	5682 <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    55ba:	230e      	movs	r3, #14
    55bc:	18fb      	adds	r3, r7, r3
    55be:	220a      	movs	r2, #10
    55c0:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    55c2:	230d      	movs	r3, #13
    55c4:	18fb      	adds	r3, r7, r3
    55c6:	2101      	movs	r1, #1
    55c8:	0018      	movs	r0, r3
    55ca:	4b32      	ldr	r3, [pc, #200]	; (5694 <spi_cmd_rsp+0x120>)
    55cc:	4798      	blx	r3
    55ce:	1e03      	subs	r3, r0, #0
    55d0:	d013      	beq.n	55fa <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    55d2:	2328      	movs	r3, #40	; 0x28
    55d4:	33ff      	adds	r3, #255	; 0xff
    55d6:	001a      	movs	r2, r3
    55d8:	492f      	ldr	r1, [pc, #188]	; (5698 <spi_cmd_rsp+0x124>)
    55da:	4b30      	ldr	r3, [pc, #192]	; (569c <spi_cmd_rsp+0x128>)
    55dc:	0018      	movs	r0, r3
    55de:	4b30      	ldr	r3, [pc, #192]	; (56a0 <spi_cmd_rsp+0x12c>)
    55e0:	4798      	blx	r3
    55e2:	4b30      	ldr	r3, [pc, #192]	; (56a4 <spi_cmd_rsp+0x130>)
    55e4:	0018      	movs	r0, r3
    55e6:	4b30      	ldr	r3, [pc, #192]	; (56a8 <spi_cmd_rsp+0x134>)
    55e8:	4798      	blx	r3
    55ea:	200d      	movs	r0, #13
    55ec:	4b2f      	ldr	r3, [pc, #188]	; (56ac <spi_cmd_rsp+0x138>)
    55ee:	4798      	blx	r3
			result = N_FAIL;
    55f0:	230f      	movs	r3, #15
    55f2:	18fb      	adds	r3, r7, r3
    55f4:	2200      	movs	r2, #0
    55f6:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    55f8:	e043      	b.n	5682 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    55fa:	230d      	movs	r3, #13
    55fc:	18fb      	adds	r3, r7, r3
    55fe:	781b      	ldrb	r3, [r3, #0]
    5600:	1dfa      	adds	r2, r7, #7
    5602:	7812      	ldrb	r2, [r2, #0]
    5604:	429a      	cmp	r2, r3
    5606:	d00b      	beq.n	5620 <spi_cmd_rsp+0xac>
    5608:	230e      	movs	r3, #14
    560a:	18fb      	adds	r3, r7, r3
    560c:	781b      	ldrb	r3, [r3, #0]
    560e:	b25b      	sxtb	r3, r3
    5610:	b2da      	uxtb	r2, r3
    5612:	3a01      	subs	r2, #1
    5614:	b2d1      	uxtb	r1, r2
    5616:	220e      	movs	r2, #14
    5618:	18ba      	adds	r2, r7, r2
    561a:	7011      	strb	r1, [r2, #0]
    561c:	2b00      	cmp	r3, #0
    561e:	dcd0      	bgt.n	55c2 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    5620:	230e      	movs	r3, #14
    5622:	18fb      	adds	r3, r7, r3
    5624:	220a      	movs	r2, #10
    5626:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5628:	230d      	movs	r3, #13
    562a:	18fb      	adds	r3, r7, r3
    562c:	2101      	movs	r1, #1
    562e:	0018      	movs	r0, r3
    5630:	4b18      	ldr	r3, [pc, #96]	; (5694 <spi_cmd_rsp+0x120>)
    5632:	4798      	blx	r3
    5634:	1e03      	subs	r3, r0, #0
    5636:	d013      	beq.n	5660 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    5638:	2336      	movs	r3, #54	; 0x36
    563a:	33ff      	adds	r3, #255	; 0xff
    563c:	001a      	movs	r2, r3
    563e:	4916      	ldr	r1, [pc, #88]	; (5698 <spi_cmd_rsp+0x124>)
    5640:	4b16      	ldr	r3, [pc, #88]	; (569c <spi_cmd_rsp+0x128>)
    5642:	0018      	movs	r0, r3
    5644:	4b16      	ldr	r3, [pc, #88]	; (56a0 <spi_cmd_rsp+0x12c>)
    5646:	4798      	blx	r3
    5648:	4b16      	ldr	r3, [pc, #88]	; (56a4 <spi_cmd_rsp+0x130>)
    564a:	0018      	movs	r0, r3
    564c:	4b16      	ldr	r3, [pc, #88]	; (56a8 <spi_cmd_rsp+0x134>)
    564e:	4798      	blx	r3
    5650:	200d      	movs	r0, #13
    5652:	4b16      	ldr	r3, [pc, #88]	; (56ac <spi_cmd_rsp+0x138>)
    5654:	4798      	blx	r3
			result = N_FAIL;
    5656:	230f      	movs	r3, #15
    5658:	18fb      	adds	r3, r7, r3
    565a:	2200      	movs	r2, #0
    565c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    565e:	e010      	b.n	5682 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    5660:	230d      	movs	r3, #13
    5662:	18fb      	adds	r3, r7, r3
    5664:	781b      	ldrb	r3, [r3, #0]
    5666:	2b00      	cmp	r3, #0
    5668:	d00b      	beq.n	5682 <spi_cmd_rsp+0x10e>
    566a:	230e      	movs	r3, #14
    566c:	18fb      	adds	r3, r7, r3
    566e:	781b      	ldrb	r3, [r3, #0]
    5670:	b25b      	sxtb	r3, r3
    5672:	b2da      	uxtb	r2, r3
    5674:	3a01      	subs	r2, #1
    5676:	b2d1      	uxtb	r1, r2
    5678:	220e      	movs	r2, #14
    567a:	18ba      	adds	r2, r7, r2
    567c:	7011      	strb	r1, [r2, #0]
    567e:	2b00      	cmp	r3, #0
    5680:	dcd2      	bgt.n	5628 <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    5682:	230f      	movs	r3, #15
    5684:	18fb      	adds	r3, r7, r3
    5686:	781b      	ldrb	r3, [r3, #0]
    5688:	b25b      	sxtb	r3, r3
}
    568a:	0018      	movs	r0, r3
    568c:	46bd      	mov	sp, r7
    568e:	b004      	add	sp, #16
    5690:	bd80      	pop	{r7, pc}
    5692:	46c0      	nop			; (mov r8, r8)
    5694:	00005129 	.word	0x00005129
    5698:	000121ac 	.word	0x000121ac
    569c:	00011cb0 	.word	0x00011cb0
    56a0:	000100d1 	.word	0x000100d1
    56a4:	00011cf0 	.word	0x00011cf0
    56a8:	000101f1 	.word	0x000101f1
    56ac:	00010105 	.word	0x00010105

000056b0 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    56b0:	b580      	push	{r7, lr}
    56b2:	b086      	sub	sp, #24
    56b4:	af00      	add	r7, sp, #0
    56b6:	6078      	str	r0, [r7, #4]
    56b8:	0008      	movs	r0, r1
    56ba:	0011      	movs	r1, r2
    56bc:	1cbb      	adds	r3, r7, #2
    56be:	1c02      	adds	r2, r0, #0
    56c0:	801a      	strh	r2, [r3, #0]
    56c2:	1c7b      	adds	r3, r7, #1
    56c4:	1c0a      	adds	r2, r1, #0
    56c6:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    56c8:	2311      	movs	r3, #17
    56ca:	18fb      	adds	r3, r7, r3
    56cc:	2201      	movs	r2, #1
    56ce:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    56d0:	2314      	movs	r3, #20
    56d2:	18fb      	adds	r3, r7, r3
    56d4:	2200      	movs	r2, #0
    56d6:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    56d8:	1cbb      	adds	r3, r7, #2
    56da:	881a      	ldrh	r2, [r3, #0]
    56dc:	2380      	movs	r3, #128	; 0x80
    56de:	019b      	lsls	r3, r3, #6
    56e0:	429a      	cmp	r2, r3
    56e2:	d805      	bhi.n	56f0 <spi_data_read+0x40>
			nbytes = sz;
    56e4:	2312      	movs	r3, #18
    56e6:	18fb      	adds	r3, r7, r3
    56e8:	1cba      	adds	r2, r7, #2
    56ea:	8812      	ldrh	r2, [r2, #0]
    56ec:	801a      	strh	r2, [r3, #0]
    56ee:	e004      	b.n	56fa <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    56f0:	2312      	movs	r3, #18
    56f2:	18fb      	adds	r3, r7, r3
    56f4:	2280      	movs	r2, #128	; 0x80
    56f6:	0192      	lsls	r2, r2, #6
    56f8:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    56fa:	2316      	movs	r3, #22
    56fc:	18fb      	adds	r3, r7, r3
    56fe:	220a      	movs	r2, #10
    5700:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    5702:	230b      	movs	r3, #11
    5704:	18fb      	adds	r3, r7, r3
    5706:	2101      	movs	r1, #1
    5708:	0018      	movs	r0, r3
    570a:	4b5f      	ldr	r3, [pc, #380]	; (5888 <spi_data_read+0x1d8>)
    570c:	4798      	blx	r3
    570e:	1e03      	subs	r3, r0, #0
    5710:	d013      	beq.n	573a <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    5712:	2358      	movs	r3, #88	; 0x58
    5714:	33ff      	adds	r3, #255	; 0xff
    5716:	001a      	movs	r2, r3
    5718:	495c      	ldr	r1, [pc, #368]	; (588c <spi_data_read+0x1dc>)
    571a:	4b5d      	ldr	r3, [pc, #372]	; (5890 <spi_data_read+0x1e0>)
    571c:	0018      	movs	r0, r3
    571e:	4b5d      	ldr	r3, [pc, #372]	; (5894 <spi_data_read+0x1e4>)
    5720:	4798      	blx	r3
    5722:	4b5d      	ldr	r3, [pc, #372]	; (5898 <spi_data_read+0x1e8>)
    5724:	0018      	movs	r0, r3
    5726:	4b5d      	ldr	r3, [pc, #372]	; (589c <spi_data_read+0x1ec>)
    5728:	4798      	blx	r3
    572a:	200d      	movs	r0, #13
    572c:	4b5c      	ldr	r3, [pc, #368]	; (58a0 <spi_data_read+0x1f0>)
    572e:	4798      	blx	r3
				result = N_FAIL;
    5730:	2311      	movs	r3, #17
    5732:	18fb      	adds	r3, r7, r3
    5734:	2200      	movs	r2, #0
    5736:	701a      	strb	r2, [r3, #0]
				break;
    5738:	e017      	b.n	576a <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    573a:	230b      	movs	r3, #11
    573c:	18fb      	adds	r3, r7, r3
    573e:	781b      	ldrb	r3, [r3, #0]
    5740:	091b      	lsrs	r3, r3, #4
    5742:	b2db      	uxtb	r3, r3
    5744:	001a      	movs	r2, r3
    5746:	230f      	movs	r3, #15
    5748:	4013      	ands	r3, r2
    574a:	2b0f      	cmp	r3, #15
    574c:	d00c      	beq.n	5768 <spi_data_read+0xb8>
				break;
		} while (retry--);
    574e:	2316      	movs	r3, #22
    5750:	18fb      	adds	r3, r7, r3
    5752:	2200      	movs	r2, #0
    5754:	5e9b      	ldrsh	r3, [r3, r2]
    5756:	b29a      	uxth	r2, r3
    5758:	3a01      	subs	r2, #1
    575a:	b291      	uxth	r1, r2
    575c:	2216      	movs	r2, #22
    575e:	18ba      	adds	r2, r7, r2
    5760:	8011      	strh	r1, [r2, #0]
    5762:	2b00      	cmp	r3, #0
    5764:	d1cd      	bne.n	5702 <spi_data_read+0x52>
    5766:	e000      	b.n	576a <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    5768:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    576a:	2311      	movs	r3, #17
    576c:	18fb      	adds	r3, r7, r3
    576e:	781b      	ldrb	r3, [r3, #0]
    5770:	b25b      	sxtb	r3, r3
    5772:	2b00      	cmp	r3, #0
    5774:	d100      	bne.n	5778 <spi_data_read+0xc8>
    5776:	e07d      	b.n	5874 <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    5778:	2316      	movs	r3, #22
    577a:	18fb      	adds	r3, r7, r3
    577c:	2200      	movs	r2, #0
    577e:	5e9b      	ldrsh	r3, [r3, r2]
    5780:	2b00      	cmp	r3, #0
    5782:	dc18      	bgt.n	57b6 <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    5784:	2364      	movs	r3, #100	; 0x64
    5786:	33ff      	adds	r3, #255	; 0xff
    5788:	001a      	movs	r2, r3
    578a:	4940      	ldr	r1, [pc, #256]	; (588c <spi_data_read+0x1dc>)
    578c:	4b40      	ldr	r3, [pc, #256]	; (5890 <spi_data_read+0x1e0>)
    578e:	0018      	movs	r0, r3
    5790:	4b40      	ldr	r3, [pc, #256]	; (5894 <spi_data_read+0x1e4>)
    5792:	4798      	blx	r3
    5794:	230b      	movs	r3, #11
    5796:	18fb      	adds	r3, r7, r3
    5798:	781b      	ldrb	r3, [r3, #0]
    579a:	001a      	movs	r2, r3
    579c:	4b41      	ldr	r3, [pc, #260]	; (58a4 <spi_data_read+0x1f4>)
    579e:	0011      	movs	r1, r2
    57a0:	0018      	movs	r0, r3
    57a2:	4b3c      	ldr	r3, [pc, #240]	; (5894 <spi_data_read+0x1e4>)
    57a4:	4798      	blx	r3
    57a6:	200d      	movs	r0, #13
    57a8:	4b3d      	ldr	r3, [pc, #244]	; (58a0 <spi_data_read+0x1f0>)
    57aa:	4798      	blx	r3
			result = N_FAIL;
    57ac:	2311      	movs	r3, #17
    57ae:	18fb      	adds	r3, r7, r3
    57b0:	2200      	movs	r2, #0
    57b2:	701a      	strb	r2, [r3, #0]
			break;
    57b4:	e05f      	b.n	5876 <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    57b6:	2314      	movs	r3, #20
    57b8:	18fb      	adds	r3, r7, r3
    57ba:	2200      	movs	r2, #0
    57bc:	5e9b      	ldrsh	r3, [r3, r2]
    57be:	687a      	ldr	r2, [r7, #4]
    57c0:	18d2      	adds	r2, r2, r3
    57c2:	2312      	movs	r3, #18
    57c4:	18fb      	adds	r3, r7, r3
    57c6:	881b      	ldrh	r3, [r3, #0]
    57c8:	0019      	movs	r1, r3
    57ca:	0010      	movs	r0, r2
    57cc:	4b2e      	ldr	r3, [pc, #184]	; (5888 <spi_data_read+0x1d8>)
    57ce:	4798      	blx	r3
    57d0:	1e03      	subs	r3, r0, #0
    57d2:	d012      	beq.n	57fa <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    57d4:	23b6      	movs	r3, #182	; 0xb6
    57d6:	005a      	lsls	r2, r3, #1
    57d8:	492c      	ldr	r1, [pc, #176]	; (588c <spi_data_read+0x1dc>)
    57da:	4b2d      	ldr	r3, [pc, #180]	; (5890 <spi_data_read+0x1e0>)
    57dc:	0018      	movs	r0, r3
    57de:	4b2d      	ldr	r3, [pc, #180]	; (5894 <spi_data_read+0x1e4>)
    57e0:	4798      	blx	r3
    57e2:	4b31      	ldr	r3, [pc, #196]	; (58a8 <spi_data_read+0x1f8>)
    57e4:	0018      	movs	r0, r3
    57e6:	4b2d      	ldr	r3, [pc, #180]	; (589c <spi_data_read+0x1ec>)
    57e8:	4798      	blx	r3
    57ea:	200d      	movs	r0, #13
    57ec:	4b2c      	ldr	r3, [pc, #176]	; (58a0 <spi_data_read+0x1f0>)
    57ee:	4798      	blx	r3
			result = N_FAIL;
    57f0:	2311      	movs	r3, #17
    57f2:	18fb      	adds	r3, r7, r3
    57f4:	2200      	movs	r2, #0
    57f6:	701a      	strb	r2, [r3, #0]
			break;
    57f8:	e03d      	b.n	5876 <spi_data_read+0x1c6>
		}
		if(!clockless)
    57fa:	1c7b      	adds	r3, r7, #1
    57fc:	781b      	ldrb	r3, [r3, #0]
    57fe:	2b00      	cmp	r3, #0
    5800:	d11f      	bne.n	5842 <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    5802:	4b2a      	ldr	r3, [pc, #168]	; (58ac <spi_data_read+0x1fc>)
    5804:	781b      	ldrb	r3, [r3, #0]
    5806:	2b00      	cmp	r3, #0
    5808:	d11b      	bne.n	5842 <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    580a:	230c      	movs	r3, #12
    580c:	18fb      	adds	r3, r7, r3
    580e:	2102      	movs	r1, #2
    5810:	0018      	movs	r0, r3
    5812:	4b1d      	ldr	r3, [pc, #116]	; (5888 <spi_data_read+0x1d8>)
    5814:	4798      	blx	r3
    5816:	1e03      	subs	r3, r0, #0
    5818:	d013      	beq.n	5842 <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    581a:	2378      	movs	r3, #120	; 0x78
    581c:	33ff      	adds	r3, #255	; 0xff
    581e:	001a      	movs	r2, r3
    5820:	491a      	ldr	r1, [pc, #104]	; (588c <spi_data_read+0x1dc>)
    5822:	4b1b      	ldr	r3, [pc, #108]	; (5890 <spi_data_read+0x1e0>)
    5824:	0018      	movs	r0, r3
    5826:	4b1b      	ldr	r3, [pc, #108]	; (5894 <spi_data_read+0x1e4>)
    5828:	4798      	blx	r3
    582a:	4b21      	ldr	r3, [pc, #132]	; (58b0 <spi_data_read+0x200>)
    582c:	0018      	movs	r0, r3
    582e:	4b1b      	ldr	r3, [pc, #108]	; (589c <spi_data_read+0x1ec>)
    5830:	4798      	blx	r3
    5832:	200d      	movs	r0, #13
    5834:	4b1a      	ldr	r3, [pc, #104]	; (58a0 <spi_data_read+0x1f0>)
    5836:	4798      	blx	r3
					result = N_FAIL;
    5838:	2311      	movs	r3, #17
    583a:	18fb      	adds	r3, r7, r3
    583c:	2200      	movs	r2, #0
    583e:	701a      	strb	r2, [r3, #0]
					break;
    5840:	e019      	b.n	5876 <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    5842:	2314      	movs	r3, #20
    5844:	18fb      	adds	r3, r7, r3
    5846:	881a      	ldrh	r2, [r3, #0]
    5848:	2312      	movs	r3, #18
    584a:	18fb      	adds	r3, r7, r3
    584c:	881b      	ldrh	r3, [r3, #0]
    584e:	18d3      	adds	r3, r2, r3
    5850:	b29a      	uxth	r2, r3
    5852:	2314      	movs	r3, #20
    5854:	18fb      	adds	r3, r7, r3
    5856:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    5858:	2312      	movs	r3, #18
    585a:	18fb      	adds	r3, r7, r3
    585c:	881a      	ldrh	r2, [r3, #0]
    585e:	1cbb      	adds	r3, r7, #2
    5860:	1cb9      	adds	r1, r7, #2
    5862:	8809      	ldrh	r1, [r1, #0]
    5864:	1a8a      	subs	r2, r1, r2
    5866:	801a      	strh	r2, [r3, #0]

	} while (sz);
    5868:	1cbb      	adds	r3, r7, #2
    586a:	881b      	ldrh	r3, [r3, #0]
    586c:	2b00      	cmp	r3, #0
    586e:	d000      	beq.n	5872 <spi_data_read+0x1c2>
    5870:	e732      	b.n	56d8 <spi_data_read+0x28>
    5872:	e000      	b.n	5876 <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    5874:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    5876:	2311      	movs	r3, #17
    5878:	18fb      	adds	r3, r7, r3
    587a:	781b      	ldrb	r3, [r3, #0]
    587c:	b25b      	sxtb	r3, r3
}
    587e:	0018      	movs	r0, r3
    5880:	46bd      	mov	sp, r7
    5882:	b006      	add	sp, #24
    5884:	bd80      	pop	{r7, pc}
    5886:	46c0      	nop			; (mov r8, r8)
    5888:	00005129 	.word	0x00005129
    588c:	000121b8 	.word	0x000121b8
    5890:	00011cb0 	.word	0x00011cb0
    5894:	000100d1 	.word	0x000100d1
    5898:	00011d24 	.word	0x00011d24
    589c:	000101f1 	.word	0x000101f1
    58a0:	00010105 	.word	0x00010105
    58a4:	00011d58 	.word	0x00011d58
    58a8:	00011d88 	.word	0x00011d88
    58ac:	200000e8 	.word	0x200000e8
    58b0:	00011db8 	.word	0x00011db8

000058b4 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    58b4:	b580      	push	{r7, lr}
    58b6:	b086      	sub	sp, #24
    58b8:	af00      	add	r7, sp, #0
    58ba:	6078      	str	r0, [r7, #4]
    58bc:	000a      	movs	r2, r1
    58be:	1cbb      	adds	r3, r7, #2
    58c0:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    58c2:	2313      	movs	r3, #19
    58c4:	18fb      	adds	r3, r7, r3
    58c6:	2201      	movs	r2, #1
    58c8:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    58ca:	230c      	movs	r3, #12
    58cc:	18fb      	adds	r3, r7, r3
    58ce:	2200      	movs	r2, #0
    58d0:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    58d2:	2316      	movs	r3, #22
    58d4:	18fb      	adds	r3, r7, r3
    58d6:	2200      	movs	r2, #0
    58d8:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    58da:	1cbb      	adds	r3, r7, #2
    58dc:	881a      	ldrh	r2, [r3, #0]
    58de:	2380      	movs	r3, #128	; 0x80
    58e0:	019b      	lsls	r3, r3, #6
    58e2:	429a      	cmp	r2, r3
    58e4:	d805      	bhi.n	58f2 <spi_data_write+0x3e>
			nbytes = sz;
    58e6:	2314      	movs	r3, #20
    58e8:	18fb      	adds	r3, r7, r3
    58ea:	1cba      	adds	r2, r7, #2
    58ec:	8812      	ldrh	r2, [r2, #0]
    58ee:	801a      	strh	r2, [r3, #0]
    58f0:	e004      	b.n	58fc <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    58f2:	2314      	movs	r3, #20
    58f4:	18fb      	adds	r3, r7, r3
    58f6:	2280      	movs	r2, #128	; 0x80
    58f8:	0192      	lsls	r2, r2, #6
    58fa:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    58fc:	2311      	movs	r3, #17
    58fe:	18fb      	adds	r3, r7, r3
    5900:	22f0      	movs	r2, #240	; 0xf0
    5902:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    5904:	2316      	movs	r3, #22
    5906:	18fb      	adds	r3, r7, r3
    5908:	2200      	movs	r2, #0
    590a:	5e9b      	ldrsh	r3, [r3, r2]
    590c:	2b00      	cmp	r3, #0
    590e:	d10f      	bne.n	5930 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    5910:	1cbb      	adds	r3, r7, #2
    5912:	881a      	ldrh	r2, [r3, #0]
    5914:	2380      	movs	r3, #128	; 0x80
    5916:	019b      	lsls	r3, r3, #6
    5918:	429a      	cmp	r2, r3
    591a:	d804      	bhi.n	5926 <spi_data_write+0x72>
				order = 0x3;
    591c:	2312      	movs	r3, #18
    591e:	18fb      	adds	r3, r7, r3
    5920:	2203      	movs	r2, #3
    5922:	701a      	strb	r2, [r3, #0]
    5924:	e013      	b.n	594e <spi_data_write+0x9a>
			else
				order = 0x1;
    5926:	2312      	movs	r3, #18
    5928:	18fb      	adds	r3, r7, r3
    592a:	2201      	movs	r2, #1
    592c:	701a      	strb	r2, [r3, #0]
    592e:	e00e      	b.n	594e <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    5930:	1cbb      	adds	r3, r7, #2
    5932:	881a      	ldrh	r2, [r3, #0]
    5934:	2380      	movs	r3, #128	; 0x80
    5936:	019b      	lsls	r3, r3, #6
    5938:	429a      	cmp	r2, r3
    593a:	d804      	bhi.n	5946 <spi_data_write+0x92>
				order = 0x3;
    593c:	2312      	movs	r3, #18
    593e:	18fb      	adds	r3, r7, r3
    5940:	2203      	movs	r2, #3
    5942:	701a      	strb	r2, [r3, #0]
    5944:	e003      	b.n	594e <spi_data_write+0x9a>
			else
				order = 0x2;
    5946:	2312      	movs	r3, #18
    5948:	18fb      	adds	r3, r7, r3
    594a:	2202      	movs	r2, #2
    594c:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    594e:	2311      	movs	r3, #17
    5950:	18fb      	adds	r3, r7, r3
    5952:	781a      	ldrb	r2, [r3, #0]
    5954:	2312      	movs	r3, #18
    5956:	18fb      	adds	r3, r7, r3
    5958:	781b      	ldrb	r3, [r3, #0]
    595a:	4313      	orrs	r3, r2
    595c:	b2da      	uxtb	r2, r3
    595e:	2311      	movs	r3, #17
    5960:	18fb      	adds	r3, r7, r3
    5962:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    5964:	2311      	movs	r3, #17
    5966:	18fb      	adds	r3, r7, r3
    5968:	2101      	movs	r1, #1
    596a:	0018      	movs	r0, r3
    596c:	4b3c      	ldr	r3, [pc, #240]	; (5a60 <spi_data_write+0x1ac>)
    596e:	4798      	blx	r3
    5970:	1e03      	subs	r3, r0, #0
    5972:	d012      	beq.n	599a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    5974:	23d4      	movs	r3, #212	; 0xd4
    5976:	005a      	lsls	r2, r3, #1
    5978:	493a      	ldr	r1, [pc, #232]	; (5a64 <spi_data_write+0x1b0>)
    597a:	4b3b      	ldr	r3, [pc, #236]	; (5a68 <spi_data_write+0x1b4>)
    597c:	0018      	movs	r0, r3
    597e:	4b3b      	ldr	r3, [pc, #236]	; (5a6c <spi_data_write+0x1b8>)
    5980:	4798      	blx	r3
    5982:	4b3b      	ldr	r3, [pc, #236]	; (5a70 <spi_data_write+0x1bc>)
    5984:	0018      	movs	r0, r3
    5986:	4b3b      	ldr	r3, [pc, #236]	; (5a74 <spi_data_write+0x1c0>)
    5988:	4798      	blx	r3
    598a:	200d      	movs	r0, #13
    598c:	4b3a      	ldr	r3, [pc, #232]	; (5a78 <spi_data_write+0x1c4>)
    598e:	4798      	blx	r3
			result = N_FAIL;
    5990:	2313      	movs	r3, #19
    5992:	18fb      	adds	r3, r7, r3
    5994:	2200      	movs	r2, #0
    5996:	701a      	strb	r2, [r3, #0]
			break;
    5998:	e05a      	b.n	5a50 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    599a:	2316      	movs	r3, #22
    599c:	18fb      	adds	r3, r7, r3
    599e:	2200      	movs	r2, #0
    59a0:	5e9b      	ldrsh	r3, [r3, r2]
    59a2:	687a      	ldr	r2, [r7, #4]
    59a4:	18d2      	adds	r2, r2, r3
    59a6:	2314      	movs	r3, #20
    59a8:	18fb      	adds	r3, r7, r3
    59aa:	881b      	ldrh	r3, [r3, #0]
    59ac:	0019      	movs	r1, r3
    59ae:	0010      	movs	r0, r2
    59b0:	4b2b      	ldr	r3, [pc, #172]	; (5a60 <spi_data_write+0x1ac>)
    59b2:	4798      	blx	r3
    59b4:	1e03      	subs	r3, r0, #0
    59b6:	d013      	beq.n	59e0 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    59b8:	23b2      	movs	r3, #178	; 0xb2
    59ba:	33ff      	adds	r3, #255	; 0xff
    59bc:	001a      	movs	r2, r3
    59be:	4929      	ldr	r1, [pc, #164]	; (5a64 <spi_data_write+0x1b0>)
    59c0:	4b29      	ldr	r3, [pc, #164]	; (5a68 <spi_data_write+0x1b4>)
    59c2:	0018      	movs	r0, r3
    59c4:	4b29      	ldr	r3, [pc, #164]	; (5a6c <spi_data_write+0x1b8>)
    59c6:	4798      	blx	r3
    59c8:	4b2c      	ldr	r3, [pc, #176]	; (5a7c <spi_data_write+0x1c8>)
    59ca:	0018      	movs	r0, r3
    59cc:	4b29      	ldr	r3, [pc, #164]	; (5a74 <spi_data_write+0x1c0>)
    59ce:	4798      	blx	r3
    59d0:	200d      	movs	r0, #13
    59d2:	4b29      	ldr	r3, [pc, #164]	; (5a78 <spi_data_write+0x1c4>)
    59d4:	4798      	blx	r3
			result = N_FAIL;
    59d6:	2313      	movs	r3, #19
    59d8:	18fb      	adds	r3, r7, r3
    59da:	2200      	movs	r2, #0
    59dc:	701a      	strb	r2, [r3, #0]
			break;
    59de:	e037      	b.n	5a50 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    59e0:	4b27      	ldr	r3, [pc, #156]	; (5a80 <spi_data_write+0x1cc>)
    59e2:	781b      	ldrb	r3, [r3, #0]
    59e4:	2b00      	cmp	r3, #0
    59e6:	d11b      	bne.n	5a20 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    59e8:	230c      	movs	r3, #12
    59ea:	18fb      	adds	r3, r7, r3
    59ec:	2102      	movs	r1, #2
    59ee:	0018      	movs	r0, r3
    59f0:	4b1b      	ldr	r3, [pc, #108]	; (5a60 <spi_data_write+0x1ac>)
    59f2:	4798      	blx	r3
    59f4:	1e03      	subs	r3, r0, #0
    59f6:	d013      	beq.n	5a20 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    59f8:	23bc      	movs	r3, #188	; 0xbc
    59fa:	33ff      	adds	r3, #255	; 0xff
    59fc:	001a      	movs	r2, r3
    59fe:	4919      	ldr	r1, [pc, #100]	; (5a64 <spi_data_write+0x1b0>)
    5a00:	4b19      	ldr	r3, [pc, #100]	; (5a68 <spi_data_write+0x1b4>)
    5a02:	0018      	movs	r0, r3
    5a04:	4b19      	ldr	r3, [pc, #100]	; (5a6c <spi_data_write+0x1b8>)
    5a06:	4798      	blx	r3
    5a08:	4b1e      	ldr	r3, [pc, #120]	; (5a84 <spi_data_write+0x1d0>)
    5a0a:	0018      	movs	r0, r3
    5a0c:	4b19      	ldr	r3, [pc, #100]	; (5a74 <spi_data_write+0x1c0>)
    5a0e:	4798      	blx	r3
    5a10:	200d      	movs	r0, #13
    5a12:	4b19      	ldr	r3, [pc, #100]	; (5a78 <spi_data_write+0x1c4>)
    5a14:	4798      	blx	r3
				result = N_FAIL;
    5a16:	2313      	movs	r3, #19
    5a18:	18fb      	adds	r3, r7, r3
    5a1a:	2200      	movs	r2, #0
    5a1c:	701a      	strb	r2, [r3, #0]
				break;
    5a1e:	e017      	b.n	5a50 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    5a20:	2316      	movs	r3, #22
    5a22:	18fb      	adds	r3, r7, r3
    5a24:	881a      	ldrh	r2, [r3, #0]
    5a26:	2314      	movs	r3, #20
    5a28:	18fb      	adds	r3, r7, r3
    5a2a:	881b      	ldrh	r3, [r3, #0]
    5a2c:	18d3      	adds	r3, r2, r3
    5a2e:	b29a      	uxth	r2, r3
    5a30:	2316      	movs	r3, #22
    5a32:	18fb      	adds	r3, r7, r3
    5a34:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    5a36:	1cbb      	adds	r3, r7, #2
    5a38:	1cb9      	adds	r1, r7, #2
    5a3a:	2214      	movs	r2, #20
    5a3c:	18ba      	adds	r2, r7, r2
    5a3e:	8809      	ldrh	r1, [r1, #0]
    5a40:	8812      	ldrh	r2, [r2, #0]
    5a42:	1a8a      	subs	r2, r1, r2
    5a44:	801a      	strh	r2, [r3, #0]
	} while (sz);
    5a46:	1cbb      	adds	r3, r7, #2
    5a48:	881b      	ldrh	r3, [r3, #0]
    5a4a:	2b00      	cmp	r3, #0
    5a4c:	d000      	beq.n	5a50 <spi_data_write+0x19c>
    5a4e:	e744      	b.n	58da <spi_data_write+0x26>


	return result;
    5a50:	2313      	movs	r3, #19
    5a52:	18fb      	adds	r3, r7, r3
    5a54:	781b      	ldrb	r3, [r3, #0]
    5a56:	b25b      	sxtb	r3, r3
}
    5a58:	0018      	movs	r0, r3
    5a5a:	46bd      	mov	sp, r7
    5a5c:	b006      	add	sp, #24
    5a5e:	bd80      	pop	{r7, pc}
    5a60:	0000516d 	.word	0x0000516d
    5a64:	000121c8 	.word	0x000121c8
    5a68:	00011cb0 	.word	0x00011cb0
    5a6c:	000100d1 	.word	0x000100d1
    5a70:	00011dec 	.word	0x00011dec
    5a74:	000101f1 	.word	0x000101f1
    5a78:	00010105 	.word	0x00010105
    5a7c:	00011e24 	.word	0x00011e24
    5a80:	200000e8 	.word	0x200000e8
    5a84:	00011e58 	.word	0x00011e58

00005a88 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    5a88:	b5b0      	push	{r4, r5, r7, lr}
    5a8a:	b086      	sub	sp, #24
    5a8c:	af02      	add	r7, sp, #8
    5a8e:	6078      	str	r0, [r7, #4]
    5a90:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    5a92:	230d      	movs	r3, #13
    5a94:	18fb      	adds	r3, r7, r3
    5a96:	2201      	movs	r2, #1
    5a98:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    5a9a:	230f      	movs	r3, #15
    5a9c:	18fb      	adds	r3, r7, r3
    5a9e:	22c9      	movs	r2, #201	; 0xc9
    5aa0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    5aa2:	230e      	movs	r3, #14
    5aa4:	18fb      	adds	r3, r7, r3
    5aa6:	2200      	movs	r2, #0
    5aa8:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    5aaa:	687b      	ldr	r3, [r7, #4]
    5aac:	2b30      	cmp	r3, #48	; 0x30
    5aae:	d808      	bhi.n	5ac2 <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    5ab0:	230f      	movs	r3, #15
    5ab2:	18fb      	adds	r3, r7, r3
    5ab4:	22c3      	movs	r2, #195	; 0xc3
    5ab6:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    5ab8:	230e      	movs	r3, #14
    5aba:	18fb      	adds	r3, r7, r3
    5abc:	2201      	movs	r2, #1
    5abe:	701a      	strb	r2, [r3, #0]
    5ac0:	e007      	b.n	5ad2 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    5ac2:	230f      	movs	r3, #15
    5ac4:	18fb      	adds	r3, r7, r3
    5ac6:	22c9      	movs	r2, #201	; 0xc9
    5ac8:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    5aca:	230e      	movs	r3, #14
    5acc:	18fb      	adds	r3, r7, r3
    5ace:	2200      	movs	r2, #0
    5ad0:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    5ad2:	230d      	movs	r3, #13
    5ad4:	18fc      	adds	r4, r7, r3
    5ad6:	683a      	ldr	r2, [r7, #0]
    5ad8:	6879      	ldr	r1, [r7, #4]
    5ada:	230f      	movs	r3, #15
    5adc:	18fb      	adds	r3, r7, r3
    5ade:	7818      	ldrb	r0, [r3, #0]
    5ae0:	230e      	movs	r3, #14
    5ae2:	18fb      	adds	r3, r7, r3
    5ae4:	781b      	ldrb	r3, [r3, #0]
    5ae6:	9300      	str	r3, [sp, #0]
    5ae8:	2304      	movs	r3, #4
    5aea:	4d26      	ldr	r5, [pc, #152]	; (5b84 <spi_write_reg+0xfc>)
    5aec:	47a8      	blx	r5
    5aee:	0003      	movs	r3, r0
    5af0:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5af2:	230d      	movs	r3, #13
    5af4:	18fb      	adds	r3, r7, r3
    5af6:	781b      	ldrb	r3, [r3, #0]
    5af8:	b25b      	sxtb	r3, r3
    5afa:	2b01      	cmp	r3, #1
    5afc:	d012      	beq.n	5b24 <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    5afe:	23ec      	movs	r3, #236	; 0xec
    5b00:	33ff      	adds	r3, #255	; 0xff
    5b02:	001a      	movs	r2, r3
    5b04:	4920      	ldr	r1, [pc, #128]	; (5b88 <spi_write_reg+0x100>)
    5b06:	4b21      	ldr	r3, [pc, #132]	; (5b8c <spi_write_reg+0x104>)
    5b08:	0018      	movs	r0, r3
    5b0a:	4b21      	ldr	r3, [pc, #132]	; (5b90 <spi_write_reg+0x108>)
    5b0c:	4798      	blx	r3
    5b0e:	687a      	ldr	r2, [r7, #4]
    5b10:	4b20      	ldr	r3, [pc, #128]	; (5b94 <spi_write_reg+0x10c>)
    5b12:	0011      	movs	r1, r2
    5b14:	0018      	movs	r0, r3
    5b16:	4b1e      	ldr	r3, [pc, #120]	; (5b90 <spi_write_reg+0x108>)
    5b18:	4798      	blx	r3
    5b1a:	200d      	movs	r0, #13
    5b1c:	4b1e      	ldr	r3, [pc, #120]	; (5b98 <spi_write_reg+0x110>)
    5b1e:	4798      	blx	r3
		return N_FAIL;
    5b20:	2300      	movs	r3, #0
    5b22:	e02b      	b.n	5b7c <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    5b24:	230d      	movs	r3, #13
    5b26:	18fc      	adds	r4, r7, r3
    5b28:	230f      	movs	r3, #15
    5b2a:	18fb      	adds	r3, r7, r3
    5b2c:	781b      	ldrb	r3, [r3, #0]
    5b2e:	0018      	movs	r0, r3
    5b30:	4b1a      	ldr	r3, [pc, #104]	; (5b9c <spi_write_reg+0x114>)
    5b32:	4798      	blx	r3
    5b34:	0003      	movs	r3, r0
    5b36:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5b38:	230d      	movs	r3, #13
    5b3a:	18fb      	adds	r3, r7, r3
    5b3c:	781b      	ldrb	r3, [r3, #0]
    5b3e:	b25b      	sxtb	r3, r3
    5b40:	2b01      	cmp	r3, #1
    5b42:	d01a      	beq.n	5b7a <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    5b44:	23f2      	movs	r3, #242	; 0xf2
    5b46:	33ff      	adds	r3, #255	; 0xff
    5b48:	001a      	movs	r2, r3
    5b4a:	490f      	ldr	r1, [pc, #60]	; (5b88 <spi_write_reg+0x100>)
    5b4c:	4b0f      	ldr	r3, [pc, #60]	; (5b8c <spi_write_reg+0x104>)
    5b4e:	0018      	movs	r0, r3
    5b50:	4b0f      	ldr	r3, [pc, #60]	; (5b90 <spi_write_reg+0x108>)
    5b52:	4798      	blx	r3
    5b54:	687a      	ldr	r2, [r7, #4]
    5b56:	4b12      	ldr	r3, [pc, #72]	; (5ba0 <spi_write_reg+0x118>)
    5b58:	0011      	movs	r1, r2
    5b5a:	0018      	movs	r0, r3
    5b5c:	4b0c      	ldr	r3, [pc, #48]	; (5b90 <spi_write_reg+0x108>)
    5b5e:	4798      	blx	r3
    5b60:	200d      	movs	r0, #13
    5b62:	4b0d      	ldr	r3, [pc, #52]	; (5b98 <spi_write_reg+0x110>)
    5b64:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5b66:	2300      	movs	r3, #0
    5b68:	9300      	str	r3, [sp, #0]
    5b6a:	2300      	movs	r3, #0
    5b6c:	2200      	movs	r2, #0
    5b6e:	2100      	movs	r1, #0
    5b70:	20cf      	movs	r0, #207	; 0xcf
    5b72:	4c04      	ldr	r4, [pc, #16]	; (5b84 <spi_write_reg+0xfc>)
    5b74:	47a0      	blx	r4
		return N_FAIL;
    5b76:	2300      	movs	r3, #0
    5b78:	e000      	b.n	5b7c <spi_write_reg+0xf4>
	}

	return N_OK;
    5b7a:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    5b7c:	0018      	movs	r0, r3
    5b7e:	46bd      	mov	sp, r7
    5b80:	b004      	add	sp, #16
    5b82:	bdb0      	pop	{r4, r5, r7, pc}
    5b84:	00005231 	.word	0x00005231
    5b88:	000121d8 	.word	0x000121d8
    5b8c:	00011cb0 	.word	0x00011cb0
    5b90:	000100d1 	.word	0x000100d1
    5b94:	00011e90 	.word	0x00011e90
    5b98:	00010105 	.word	0x00010105
    5b9c:	00005575 	.word	0x00005575
    5ba0:	00011ebc 	.word	0x00011ebc

00005ba4 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    5ba4:	b5b0      	push	{r4, r5, r7, lr}
    5ba6:	b088      	sub	sp, #32
    5ba8:	af02      	add	r7, sp, #8
    5baa:	60f8      	str	r0, [r7, #12]
    5bac:	60b9      	str	r1, [r7, #8]
    5bae:	1dbb      	adds	r3, r7, #6
    5bb0:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    5bb2:	2317      	movs	r3, #23
    5bb4:	18fb      	adds	r3, r7, r3
    5bb6:	22c7      	movs	r2, #199	; 0xc7
    5bb8:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    5bba:	1dbb      	adds	r3, r7, #6
    5bbc:	881a      	ldrh	r2, [r3, #0]
    5bbe:	2316      	movs	r3, #22
    5bc0:	18fc      	adds	r4, r7, r3
    5bc2:	68f9      	ldr	r1, [r7, #12]
    5bc4:	2317      	movs	r3, #23
    5bc6:	18fb      	adds	r3, r7, r3
    5bc8:	7818      	ldrb	r0, [r3, #0]
    5bca:	2300      	movs	r3, #0
    5bcc:	9300      	str	r3, [sp, #0]
    5bce:	0013      	movs	r3, r2
    5bd0:	2200      	movs	r2, #0
    5bd2:	4d37      	ldr	r5, [pc, #220]	; (5cb0 <nm_spi_write+0x10c>)
    5bd4:	47a8      	blx	r5
    5bd6:	0003      	movs	r3, r0
    5bd8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5bda:	2316      	movs	r3, #22
    5bdc:	18fb      	adds	r3, r7, r3
    5bde:	781b      	ldrb	r3, [r3, #0]
    5be0:	b25b      	sxtb	r3, r3
    5be2:	2b01      	cmp	r3, #1
    5be4:	d010      	beq.n	5c08 <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    5be6:	4a33      	ldr	r2, [pc, #204]	; (5cb4 <nm_spi_write+0x110>)
    5be8:	4933      	ldr	r1, [pc, #204]	; (5cb8 <nm_spi_write+0x114>)
    5bea:	4b34      	ldr	r3, [pc, #208]	; (5cbc <nm_spi_write+0x118>)
    5bec:	0018      	movs	r0, r3
    5bee:	4b34      	ldr	r3, [pc, #208]	; (5cc0 <nm_spi_write+0x11c>)
    5bf0:	4798      	blx	r3
    5bf2:	68fa      	ldr	r2, [r7, #12]
    5bf4:	4b33      	ldr	r3, [pc, #204]	; (5cc4 <nm_spi_write+0x120>)
    5bf6:	0011      	movs	r1, r2
    5bf8:	0018      	movs	r0, r3
    5bfa:	4b31      	ldr	r3, [pc, #196]	; (5cc0 <nm_spi_write+0x11c>)
    5bfc:	4798      	blx	r3
    5bfe:	200d      	movs	r0, #13
    5c00:	4b31      	ldr	r3, [pc, #196]	; (5cc8 <nm_spi_write+0x124>)
    5c02:	4798      	blx	r3
		return N_FAIL;
    5c04:	2300      	movs	r3, #0
    5c06:	e04f      	b.n	5ca8 <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    5c08:	2316      	movs	r3, #22
    5c0a:	18fc      	adds	r4, r7, r3
    5c0c:	2317      	movs	r3, #23
    5c0e:	18fb      	adds	r3, r7, r3
    5c10:	781b      	ldrb	r3, [r3, #0]
    5c12:	0018      	movs	r0, r3
    5c14:	4b2d      	ldr	r3, [pc, #180]	; (5ccc <nm_spi_write+0x128>)
    5c16:	4798      	blx	r3
    5c18:	0003      	movs	r3, r0
    5c1a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5c1c:	2316      	movs	r3, #22
    5c1e:	18fb      	adds	r3, r7, r3
    5c20:	781b      	ldrb	r3, [r3, #0]
    5c22:	b25b      	sxtb	r3, r3
    5c24:	2b01      	cmp	r3, #1
    5c26:	d018      	beq.n	5c5a <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    5c28:	4a29      	ldr	r2, [pc, #164]	; (5cd0 <nm_spi_write+0x12c>)
    5c2a:	4923      	ldr	r1, [pc, #140]	; (5cb8 <nm_spi_write+0x114>)
    5c2c:	4b23      	ldr	r3, [pc, #140]	; (5cbc <nm_spi_write+0x118>)
    5c2e:	0018      	movs	r0, r3
    5c30:	4b23      	ldr	r3, [pc, #140]	; (5cc0 <nm_spi_write+0x11c>)
    5c32:	4798      	blx	r3
    5c34:	68fa      	ldr	r2, [r7, #12]
    5c36:	4b27      	ldr	r3, [pc, #156]	; (5cd4 <nm_spi_write+0x130>)
    5c38:	0011      	movs	r1, r2
    5c3a:	0018      	movs	r0, r3
    5c3c:	4b20      	ldr	r3, [pc, #128]	; (5cc0 <nm_spi_write+0x11c>)
    5c3e:	4798      	blx	r3
    5c40:	200d      	movs	r0, #13
    5c42:	4b21      	ldr	r3, [pc, #132]	; (5cc8 <nm_spi_write+0x124>)
    5c44:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5c46:	2300      	movs	r3, #0
    5c48:	9300      	str	r3, [sp, #0]
    5c4a:	2300      	movs	r3, #0
    5c4c:	2200      	movs	r2, #0
    5c4e:	2100      	movs	r1, #0
    5c50:	20cf      	movs	r0, #207	; 0xcf
    5c52:	4c17      	ldr	r4, [pc, #92]	; (5cb0 <nm_spi_write+0x10c>)
    5c54:	47a0      	blx	r4
		return N_FAIL;
    5c56:	2300      	movs	r3, #0
    5c58:	e026      	b.n	5ca8 <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    5c5a:	2316      	movs	r3, #22
    5c5c:	18fc      	adds	r4, r7, r3
    5c5e:	1dbb      	adds	r3, r7, #6
    5c60:	881a      	ldrh	r2, [r3, #0]
    5c62:	68bb      	ldr	r3, [r7, #8]
    5c64:	0011      	movs	r1, r2
    5c66:	0018      	movs	r0, r3
    5c68:	4b1b      	ldr	r3, [pc, #108]	; (5cd8 <nm_spi_write+0x134>)
    5c6a:	4798      	blx	r3
    5c6c:	0003      	movs	r3, r0
    5c6e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5c70:	2316      	movs	r3, #22
    5c72:	18fb      	adds	r3, r7, r3
    5c74:	781b      	ldrb	r3, [r3, #0]
    5c76:	b25b      	sxtb	r3, r3
    5c78:	2b01      	cmp	r3, #1
    5c7a:	d014      	beq.n	5ca6 <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    5c7c:	4a17      	ldr	r2, [pc, #92]	; (5cdc <nm_spi_write+0x138>)
    5c7e:	490e      	ldr	r1, [pc, #56]	; (5cb8 <nm_spi_write+0x114>)
    5c80:	4b0e      	ldr	r3, [pc, #56]	; (5cbc <nm_spi_write+0x118>)
    5c82:	0018      	movs	r0, r3
    5c84:	4b0e      	ldr	r3, [pc, #56]	; (5cc0 <nm_spi_write+0x11c>)
    5c86:	4798      	blx	r3
    5c88:	4b15      	ldr	r3, [pc, #84]	; (5ce0 <nm_spi_write+0x13c>)
    5c8a:	0018      	movs	r0, r3
    5c8c:	4b15      	ldr	r3, [pc, #84]	; (5ce4 <nm_spi_write+0x140>)
    5c8e:	4798      	blx	r3
    5c90:	200d      	movs	r0, #13
    5c92:	4b0d      	ldr	r3, [pc, #52]	; (5cc8 <nm_spi_write+0x124>)
    5c94:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5c96:	2300      	movs	r3, #0
    5c98:	9300      	str	r3, [sp, #0]
    5c9a:	2300      	movs	r3, #0
    5c9c:	2200      	movs	r2, #0
    5c9e:	2100      	movs	r1, #0
    5ca0:	20cf      	movs	r0, #207	; 0xcf
    5ca2:	4c03      	ldr	r4, [pc, #12]	; (5cb0 <nm_spi_write+0x10c>)
    5ca4:	47a0      	blx	r4
	}

	return N_OK;
    5ca6:	2301      	movs	r3, #1
}
    5ca8:	0018      	movs	r0, r3
    5caa:	46bd      	mov	sp, r7
    5cac:	b006      	add	sp, #24
    5cae:	bdb0      	pop	{r4, r5, r7, pc}
    5cb0:	00005231 	.word	0x00005231
    5cb4:	0000020f 	.word	0x0000020f
    5cb8:	000121e8 	.word	0x000121e8
    5cbc:	00011cb0 	.word	0x00011cb0
    5cc0:	000100d1 	.word	0x000100d1
    5cc4:	00011ef4 	.word	0x00011ef4
    5cc8:	00010105 	.word	0x00010105
    5ccc:	00005575 	.word	0x00005575
    5cd0:	00000215 	.word	0x00000215
    5cd4:	00011f24 	.word	0x00011f24
    5cd8:	000058b5 	.word	0x000058b5
    5cdc:	00000226 	.word	0x00000226
    5ce0:	00011f5c 	.word	0x00011f5c
    5ce4:	000101f1 	.word	0x000101f1

00005ce8 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    5ce8:	b5b0      	push	{r4, r5, r7, lr}
    5cea:	b086      	sub	sp, #24
    5cec:	af02      	add	r7, sp, #8
    5cee:	6078      	str	r0, [r7, #4]
    5cf0:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    5cf2:	230d      	movs	r3, #13
    5cf4:	18fb      	adds	r3, r7, r3
    5cf6:	2201      	movs	r2, #1
    5cf8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    5cfa:	230f      	movs	r3, #15
    5cfc:	18fb      	adds	r3, r7, r3
    5cfe:	22ca      	movs	r2, #202	; 0xca
    5d00:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    5d02:	230e      	movs	r3, #14
    5d04:	18fb      	adds	r3, r7, r3
    5d06:	2200      	movs	r2, #0
    5d08:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    5d0a:	687b      	ldr	r3, [r7, #4]
    5d0c:	2bff      	cmp	r3, #255	; 0xff
    5d0e:	d808      	bhi.n	5d22 <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    5d10:	230f      	movs	r3, #15
    5d12:	18fb      	adds	r3, r7, r3
    5d14:	22c4      	movs	r2, #196	; 0xc4
    5d16:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    5d18:	230e      	movs	r3, #14
    5d1a:	18fb      	adds	r3, r7, r3
    5d1c:	2201      	movs	r2, #1
    5d1e:	701a      	strb	r2, [r3, #0]
    5d20:	e007      	b.n	5d32 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    5d22:	230f      	movs	r3, #15
    5d24:	18fb      	adds	r3, r7, r3
    5d26:	22ca      	movs	r2, #202	; 0xca
    5d28:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    5d2a:	230e      	movs	r3, #14
    5d2c:	18fb      	adds	r3, r7, r3
    5d2e:	2200      	movs	r2, #0
    5d30:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    5d32:	230d      	movs	r3, #13
    5d34:	18fc      	adds	r4, r7, r3
    5d36:	6879      	ldr	r1, [r7, #4]
    5d38:	230f      	movs	r3, #15
    5d3a:	18fb      	adds	r3, r7, r3
    5d3c:	7818      	ldrb	r0, [r3, #0]
    5d3e:	230e      	movs	r3, #14
    5d40:	18fb      	adds	r3, r7, r3
    5d42:	781b      	ldrb	r3, [r3, #0]
    5d44:	9300      	str	r3, [sp, #0]
    5d46:	2304      	movs	r3, #4
    5d48:	2200      	movs	r2, #0
    5d4a:	4d44      	ldr	r5, [pc, #272]	; (5e5c <spi_read_reg+0x174>)
    5d4c:	47a8      	blx	r5
    5d4e:	0003      	movs	r3, r0
    5d50:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5d52:	230d      	movs	r3, #13
    5d54:	18fb      	adds	r3, r7, r3
    5d56:	781b      	ldrb	r3, [r3, #0]
    5d58:	b25b      	sxtb	r3, r3
    5d5a:	2b01      	cmp	r3, #1
    5d5c:	d010      	beq.n	5d80 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    5d5e:	4a40      	ldr	r2, [pc, #256]	; (5e60 <spi_read_reg+0x178>)
    5d60:	4940      	ldr	r1, [pc, #256]	; (5e64 <spi_read_reg+0x17c>)
    5d62:	4b41      	ldr	r3, [pc, #260]	; (5e68 <spi_read_reg+0x180>)
    5d64:	0018      	movs	r0, r3
    5d66:	4b41      	ldr	r3, [pc, #260]	; (5e6c <spi_read_reg+0x184>)
    5d68:	4798      	blx	r3
    5d6a:	687a      	ldr	r2, [r7, #4]
    5d6c:	4b40      	ldr	r3, [pc, #256]	; (5e70 <spi_read_reg+0x188>)
    5d6e:	0011      	movs	r1, r2
    5d70:	0018      	movs	r0, r3
    5d72:	4b3e      	ldr	r3, [pc, #248]	; (5e6c <spi_read_reg+0x184>)
    5d74:	4798      	blx	r3
    5d76:	200d      	movs	r0, #13
    5d78:	4b3e      	ldr	r3, [pc, #248]	; (5e74 <spi_read_reg+0x18c>)
    5d7a:	4798      	blx	r3
		return N_FAIL;
    5d7c:	2300      	movs	r3, #0
    5d7e:	e068      	b.n	5e52 <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    5d80:	230d      	movs	r3, #13
    5d82:	18fc      	adds	r4, r7, r3
    5d84:	230f      	movs	r3, #15
    5d86:	18fb      	adds	r3, r7, r3
    5d88:	781b      	ldrb	r3, [r3, #0]
    5d8a:	0018      	movs	r0, r3
    5d8c:	4b3a      	ldr	r3, [pc, #232]	; (5e78 <spi_read_reg+0x190>)
    5d8e:	4798      	blx	r3
    5d90:	0003      	movs	r3, r0
    5d92:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5d94:	230d      	movs	r3, #13
    5d96:	18fb      	adds	r3, r7, r3
    5d98:	781b      	ldrb	r3, [r3, #0]
    5d9a:	b25b      	sxtb	r3, r3
    5d9c:	2b01      	cmp	r3, #1
    5d9e:	d018      	beq.n	5dd2 <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    5da0:	4a36      	ldr	r2, [pc, #216]	; (5e7c <spi_read_reg+0x194>)
    5da2:	4930      	ldr	r1, [pc, #192]	; (5e64 <spi_read_reg+0x17c>)
    5da4:	4b30      	ldr	r3, [pc, #192]	; (5e68 <spi_read_reg+0x180>)
    5da6:	0018      	movs	r0, r3
    5da8:	4b30      	ldr	r3, [pc, #192]	; (5e6c <spi_read_reg+0x184>)
    5daa:	4798      	blx	r3
    5dac:	687a      	ldr	r2, [r7, #4]
    5dae:	4b34      	ldr	r3, [pc, #208]	; (5e80 <spi_read_reg+0x198>)
    5db0:	0011      	movs	r1, r2
    5db2:	0018      	movs	r0, r3
    5db4:	4b2d      	ldr	r3, [pc, #180]	; (5e6c <spi_read_reg+0x184>)
    5db6:	4798      	blx	r3
    5db8:	200d      	movs	r0, #13
    5dba:	4b2e      	ldr	r3, [pc, #184]	; (5e74 <spi_read_reg+0x18c>)
    5dbc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5dbe:	2300      	movs	r3, #0
    5dc0:	9300      	str	r3, [sp, #0]
    5dc2:	2300      	movs	r3, #0
    5dc4:	2200      	movs	r2, #0
    5dc6:	2100      	movs	r1, #0
    5dc8:	20cf      	movs	r0, #207	; 0xcf
    5dca:	4c24      	ldr	r4, [pc, #144]	; (5e5c <spi_read_reg+0x174>)
    5dcc:	47a0      	blx	r4
		return N_FAIL;
    5dce:	2300      	movs	r3, #0
    5dd0:	e03f      	b.n	5e52 <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    5dd2:	230d      	movs	r3, #13
    5dd4:	18fc      	adds	r4, r7, r3
    5dd6:	230e      	movs	r3, #14
    5dd8:	18fb      	adds	r3, r7, r3
    5dda:	781a      	ldrb	r2, [r3, #0]
    5ddc:	2308      	movs	r3, #8
    5dde:	18fb      	adds	r3, r7, r3
    5de0:	2104      	movs	r1, #4
    5de2:	0018      	movs	r0, r3
    5de4:	4b27      	ldr	r3, [pc, #156]	; (5e84 <spi_read_reg+0x19c>)
    5de6:	4798      	blx	r3
    5de8:	0003      	movs	r3, r0
    5dea:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5dec:	230d      	movs	r3, #13
    5dee:	18fb      	adds	r3, r7, r3
    5df0:	781b      	ldrb	r3, [r3, #0]
    5df2:	b25b      	sxtb	r3, r3
    5df4:	2b01      	cmp	r3, #1
    5df6:	d016      	beq.n	5e26 <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    5df8:	4a23      	ldr	r2, [pc, #140]	; (5e88 <spi_read_reg+0x1a0>)
    5dfa:	491a      	ldr	r1, [pc, #104]	; (5e64 <spi_read_reg+0x17c>)
    5dfc:	4b1a      	ldr	r3, [pc, #104]	; (5e68 <spi_read_reg+0x180>)
    5dfe:	0018      	movs	r0, r3
    5e00:	4b1a      	ldr	r3, [pc, #104]	; (5e6c <spi_read_reg+0x184>)
    5e02:	4798      	blx	r3
    5e04:	4b21      	ldr	r3, [pc, #132]	; (5e8c <spi_read_reg+0x1a4>)
    5e06:	0018      	movs	r0, r3
    5e08:	4b21      	ldr	r3, [pc, #132]	; (5e90 <spi_read_reg+0x1a8>)
    5e0a:	4798      	blx	r3
    5e0c:	200d      	movs	r0, #13
    5e0e:	4b19      	ldr	r3, [pc, #100]	; (5e74 <spi_read_reg+0x18c>)
    5e10:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5e12:	2300      	movs	r3, #0
    5e14:	9300      	str	r3, [sp, #0]
    5e16:	2300      	movs	r3, #0
    5e18:	2200      	movs	r2, #0
    5e1a:	2100      	movs	r1, #0
    5e1c:	20cf      	movs	r0, #207	; 0xcf
    5e1e:	4c0f      	ldr	r4, [pc, #60]	; (5e5c <spi_read_reg+0x174>)
    5e20:	47a0      	blx	r4
		return N_FAIL;
    5e22:	2300      	movs	r3, #0
    5e24:	e015      	b.n	5e52 <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    5e26:	2308      	movs	r3, #8
    5e28:	18fb      	adds	r3, r7, r3
    5e2a:	781b      	ldrb	r3, [r3, #0]
    5e2c:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    5e2e:	2308      	movs	r3, #8
    5e30:	18fb      	adds	r3, r7, r3
    5e32:	785b      	ldrb	r3, [r3, #1]
    5e34:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    5e36:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5e38:	2308      	movs	r3, #8
    5e3a:	18fb      	adds	r3, r7, r3
    5e3c:	789b      	ldrb	r3, [r3, #2]
    5e3e:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    5e40:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    5e42:	2308      	movs	r3, #8
    5e44:	18fb      	adds	r3, r7, r3
    5e46:	78db      	ldrb	r3, [r3, #3]
    5e48:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    5e4a:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    5e4c:	683b      	ldr	r3, [r7, #0]
    5e4e:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    5e50:	2301      	movs	r3, #1
}
    5e52:	0018      	movs	r0, r3
    5e54:	46bd      	mov	sp, r7
    5e56:	b004      	add	sp, #16
    5e58:	bdb0      	pop	{r4, r5, r7, pc}
    5e5a:	46c0      	nop			; (mov r8, r8)
    5e5c:	00005231 	.word	0x00005231
    5e60:	00000245 	.word	0x00000245
    5e64:	000121f8 	.word	0x000121f8
    5e68:	00011cb0 	.word	0x00011cb0
    5e6c:	000100d1 	.word	0x000100d1
    5e70:	00011f84 	.word	0x00011f84
    5e74:	00010105 	.word	0x00010105
    5e78:	00005575 	.word	0x00005575
    5e7c:	0000024b 	.word	0x0000024b
    5e80:	00011fb0 	.word	0x00011fb0
    5e84:	000056b1 	.word	0x000056b1
    5e88:	00000253 	.word	0x00000253
    5e8c:	00011fe4 	.word	0x00011fe4
    5e90:	000101f1 	.word	0x000101f1

00005e94 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    5e94:	b5b0      	push	{r4, r5, r7, lr}
    5e96:	b088      	sub	sp, #32
    5e98:	af02      	add	r7, sp, #8
    5e9a:	60f8      	str	r0, [r7, #12]
    5e9c:	60b9      	str	r1, [r7, #8]
    5e9e:	1dbb      	adds	r3, r7, #6
    5ea0:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    5ea2:	2317      	movs	r3, #23
    5ea4:	18fb      	adds	r3, r7, r3
    5ea6:	22c8      	movs	r2, #200	; 0xc8
    5ea8:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    5eaa:	1dbb      	adds	r3, r7, #6
    5eac:	881a      	ldrh	r2, [r3, #0]
    5eae:	2316      	movs	r3, #22
    5eb0:	18fc      	adds	r4, r7, r3
    5eb2:	68f9      	ldr	r1, [r7, #12]
    5eb4:	2317      	movs	r3, #23
    5eb6:	18fb      	adds	r3, r7, r3
    5eb8:	7818      	ldrb	r0, [r3, #0]
    5eba:	2300      	movs	r3, #0
    5ebc:	9300      	str	r3, [sp, #0]
    5ebe:	0013      	movs	r3, r2
    5ec0:	2200      	movs	r2, #0
    5ec2:	4d39      	ldr	r5, [pc, #228]	; (5fa8 <nm_spi_read+0x114>)
    5ec4:	47a8      	blx	r5
    5ec6:	0003      	movs	r3, r0
    5ec8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5eca:	2316      	movs	r3, #22
    5ecc:	18fb      	adds	r3, r7, r3
    5ece:	781b      	ldrb	r3, [r3, #0]
    5ed0:	b25b      	sxtb	r3, r3
    5ed2:	2b01      	cmp	r3, #1
    5ed4:	d011      	beq.n	5efa <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    5ed6:	239d      	movs	r3, #157	; 0x9d
    5ed8:	009a      	lsls	r2, r3, #2
    5eda:	4934      	ldr	r1, [pc, #208]	; (5fac <nm_spi_read+0x118>)
    5edc:	4b34      	ldr	r3, [pc, #208]	; (5fb0 <nm_spi_read+0x11c>)
    5ede:	0018      	movs	r0, r3
    5ee0:	4b34      	ldr	r3, [pc, #208]	; (5fb4 <nm_spi_read+0x120>)
    5ee2:	4798      	blx	r3
    5ee4:	68fa      	ldr	r2, [r7, #12]
    5ee6:	4b34      	ldr	r3, [pc, #208]	; (5fb8 <nm_spi_read+0x124>)
    5ee8:	0011      	movs	r1, r2
    5eea:	0018      	movs	r0, r3
    5eec:	4b31      	ldr	r3, [pc, #196]	; (5fb4 <nm_spi_read+0x120>)
    5eee:	4798      	blx	r3
    5ef0:	200d      	movs	r0, #13
    5ef2:	4b32      	ldr	r3, [pc, #200]	; (5fbc <nm_spi_read+0x128>)
    5ef4:	4798      	blx	r3
		return N_FAIL;
    5ef6:	2300      	movs	r3, #0
    5ef8:	e052      	b.n	5fa0 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    5efa:	2316      	movs	r3, #22
    5efc:	18fc      	adds	r4, r7, r3
    5efe:	2317      	movs	r3, #23
    5f00:	18fb      	adds	r3, r7, r3
    5f02:	781b      	ldrb	r3, [r3, #0]
    5f04:	0018      	movs	r0, r3
    5f06:	4b2e      	ldr	r3, [pc, #184]	; (5fc0 <nm_spi_read+0x12c>)
    5f08:	4798      	blx	r3
    5f0a:	0003      	movs	r3, r0
    5f0c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5f0e:	2316      	movs	r3, #22
    5f10:	18fb      	adds	r3, r7, r3
    5f12:	781b      	ldrb	r3, [r3, #0]
    5f14:	b25b      	sxtb	r3, r3
    5f16:	2b01      	cmp	r3, #1
    5f18:	d018      	beq.n	5f4c <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    5f1a:	4a2a      	ldr	r2, [pc, #168]	; (5fc4 <nm_spi_read+0x130>)
    5f1c:	4923      	ldr	r1, [pc, #140]	; (5fac <nm_spi_read+0x118>)
    5f1e:	4b24      	ldr	r3, [pc, #144]	; (5fb0 <nm_spi_read+0x11c>)
    5f20:	0018      	movs	r0, r3
    5f22:	4b24      	ldr	r3, [pc, #144]	; (5fb4 <nm_spi_read+0x120>)
    5f24:	4798      	blx	r3
    5f26:	68fa      	ldr	r2, [r7, #12]
    5f28:	4b27      	ldr	r3, [pc, #156]	; (5fc8 <nm_spi_read+0x134>)
    5f2a:	0011      	movs	r1, r2
    5f2c:	0018      	movs	r0, r3
    5f2e:	4b21      	ldr	r3, [pc, #132]	; (5fb4 <nm_spi_read+0x120>)
    5f30:	4798      	blx	r3
    5f32:	200d      	movs	r0, #13
    5f34:	4b21      	ldr	r3, [pc, #132]	; (5fbc <nm_spi_read+0x128>)
    5f36:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5f38:	2300      	movs	r3, #0
    5f3a:	9300      	str	r3, [sp, #0]
    5f3c:	2300      	movs	r3, #0
    5f3e:	2200      	movs	r2, #0
    5f40:	2100      	movs	r1, #0
    5f42:	20cf      	movs	r0, #207	; 0xcf
    5f44:	4c18      	ldr	r4, [pc, #96]	; (5fa8 <nm_spi_read+0x114>)
    5f46:	47a0      	blx	r4
		return N_FAIL;
    5f48:	2300      	movs	r3, #0
    5f4a:	e029      	b.n	5fa0 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    5f4c:	2316      	movs	r3, #22
    5f4e:	18fc      	adds	r4, r7, r3
    5f50:	1dbb      	adds	r3, r7, #6
    5f52:	8819      	ldrh	r1, [r3, #0]
    5f54:	68bb      	ldr	r3, [r7, #8]
    5f56:	2200      	movs	r2, #0
    5f58:	0018      	movs	r0, r3
    5f5a:	4b1c      	ldr	r3, [pc, #112]	; (5fcc <nm_spi_read+0x138>)
    5f5c:	4798      	blx	r3
    5f5e:	0003      	movs	r3, r0
    5f60:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    5f62:	2316      	movs	r3, #22
    5f64:	18fb      	adds	r3, r7, r3
    5f66:	781b      	ldrb	r3, [r3, #0]
    5f68:	b25b      	sxtb	r3, r3
    5f6a:	2b01      	cmp	r3, #1
    5f6c:	d017      	beq.n	5f9e <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    5f6e:	23a1      	movs	r3, #161	; 0xa1
    5f70:	009a      	lsls	r2, r3, #2
    5f72:	490e      	ldr	r1, [pc, #56]	; (5fac <nm_spi_read+0x118>)
    5f74:	4b0e      	ldr	r3, [pc, #56]	; (5fb0 <nm_spi_read+0x11c>)
    5f76:	0018      	movs	r0, r3
    5f78:	4b0e      	ldr	r3, [pc, #56]	; (5fb4 <nm_spi_read+0x120>)
    5f7a:	4798      	blx	r3
    5f7c:	4b14      	ldr	r3, [pc, #80]	; (5fd0 <nm_spi_read+0x13c>)
    5f7e:	0018      	movs	r0, r3
    5f80:	4b14      	ldr	r3, [pc, #80]	; (5fd4 <nm_spi_read+0x140>)
    5f82:	4798      	blx	r3
    5f84:	200d      	movs	r0, #13
    5f86:	4b0d      	ldr	r3, [pc, #52]	; (5fbc <nm_spi_read+0x128>)
    5f88:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    5f8a:	2300      	movs	r3, #0
    5f8c:	9300      	str	r3, [sp, #0]
    5f8e:	2300      	movs	r3, #0
    5f90:	2200      	movs	r2, #0
    5f92:	2100      	movs	r1, #0
    5f94:	20cf      	movs	r0, #207	; 0xcf
    5f96:	4c04      	ldr	r4, [pc, #16]	; (5fa8 <nm_spi_read+0x114>)
    5f98:	47a0      	blx	r4
		return N_FAIL;
    5f9a:	2300      	movs	r3, #0
    5f9c:	e000      	b.n	5fa0 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    5f9e:	2301      	movs	r3, #1
}
    5fa0:	0018      	movs	r0, r3
    5fa2:	46bd      	mov	sp, r7
    5fa4:	b006      	add	sp, #24
    5fa6:	bdb0      	pop	{r4, r5, r7, pc}
    5fa8:	00005231 	.word	0x00005231
    5fac:	00012208 	.word	0x00012208
    5fb0:	00011cb0 	.word	0x00011cb0
    5fb4:	000100d1 	.word	0x000100d1
    5fb8:	00012004 	.word	0x00012004
    5fbc:	00010105 	.word	0x00010105
    5fc0:	00005575 	.word	0x00005575
    5fc4:	0000027a 	.word	0x0000027a
    5fc8:	00012034 	.word	0x00012034
    5fcc:	000056b1 	.word	0x000056b1
    5fd0:	0001206c 	.word	0x0001206c
    5fd4:	000101f1 	.word	0x000101f1

00005fd8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
    5fd8:	b580      	push	{r7, lr}
    5fda:	b082      	sub	sp, #8
    5fdc:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
    5fde:	4b0c      	ldr	r3, [pc, #48]	; (6010 <spi_init_pkt_sz+0x38>)
    5fe0:	0018      	movs	r0, r3
    5fe2:	4b0c      	ldr	r3, [pc, #48]	; (6014 <spi_init_pkt_sz+0x3c>)
    5fe4:	4798      	blx	r3
    5fe6:	0003      	movs	r3, r0
    5fe8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
    5fea:	687b      	ldr	r3, [r7, #4]
    5fec:	2270      	movs	r2, #112	; 0x70
    5fee:	4393      	bics	r3, r2
    5ff0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
    5ff2:	687b      	ldr	r3, [r7, #4]
    5ff4:	2250      	movs	r2, #80	; 0x50
    5ff6:	4313      	orrs	r3, r2
    5ff8:	607b      	str	r3, [r7, #4]
    5ffa:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
    5ffc:	687b      	ldr	r3, [r7, #4]
    5ffe:	4a04      	ldr	r2, [pc, #16]	; (6010 <spi_init_pkt_sz+0x38>)
    6000:	0019      	movs	r1, r3
    6002:	0010      	movs	r0, r2
    6004:	4b04      	ldr	r3, [pc, #16]	; (6018 <spi_init_pkt_sz+0x40>)
    6006:	4798      	blx	r3
}
    6008:	46c0      	nop			; (mov r8, r8)
    600a:	46bd      	mov	sp, r7
    600c:	b002      	add	sp, #8
    600e:	bd80      	pop	{r7, pc}
    6010:	0000e824 	.word	0x0000e824
    6014:	0000617d 	.word	0x0000617d
    6018:	000061f1 	.word	0x000061f1

0000601c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
    601c:	b580      	push	{r7, lr}
    601e:	b082      	sub	sp, #8
    6020:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg =0;
    6022:	2300      	movs	r3, #0
    6024:	603b      	str	r3, [r7, #0]

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
    6026:	4b3f      	ldr	r3, [pc, #252]	; (6124 <nm_spi_init+0x108>)
    6028:	2200      	movs	r2, #0
    602a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
    602c:	003b      	movs	r3, r7
    602e:	4a3e      	ldr	r2, [pc, #248]	; (6128 <nm_spi_init+0x10c>)
    6030:	0019      	movs	r1, r3
    6032:	0010      	movs	r0, r2
    6034:	4b3d      	ldr	r3, [pc, #244]	; (612c <nm_spi_init+0x110>)
    6036:	4798      	blx	r3
    6038:	1e03      	subs	r3, r0, #0
    603a:	d127      	bne.n	608c <nm_spi_init+0x70>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
    603c:	4b39      	ldr	r3, [pc, #228]	; (6124 <nm_spi_init+0x108>)
    603e:	2201      	movs	r2, #1
    6040:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
    6042:	4a3b      	ldr	r2, [pc, #236]	; (6130 <nm_spi_init+0x114>)
    6044:	493b      	ldr	r1, [pc, #236]	; (6134 <nm_spi_init+0x118>)
    6046:	4b3c      	ldr	r3, [pc, #240]	; (6138 <nm_spi_init+0x11c>)
    6048:	0018      	movs	r0, r3
    604a:	4b3c      	ldr	r3, [pc, #240]	; (613c <nm_spi_init+0x120>)
    604c:	4798      	blx	r3
    604e:	4b3c      	ldr	r3, [pc, #240]	; (6140 <nm_spi_init+0x124>)
    6050:	0018      	movs	r0, r3
    6052:	4b3c      	ldr	r3, [pc, #240]	; (6144 <nm_spi_init+0x128>)
    6054:	4798      	blx	r3
    6056:	200d      	movs	r0, #13
    6058:	4b3b      	ldr	r3, [pc, #236]	; (6148 <nm_spi_init+0x12c>)
    605a:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
    605c:	003b      	movs	r3, r7
    605e:	4a32      	ldr	r2, [pc, #200]	; (6128 <nm_spi_init+0x10c>)
    6060:	0019      	movs	r1, r3
    6062:	0010      	movs	r0, r2
    6064:	4b31      	ldr	r3, [pc, #196]	; (612c <nm_spi_init+0x110>)
    6066:	4798      	blx	r3
    6068:	1e03      	subs	r3, r0, #0
    606a:	d10f      	bne.n	608c <nm_spi_init+0x70>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
    606c:	23b2      	movs	r3, #178	; 0xb2
    606e:	009a      	lsls	r2, r3, #2
    6070:	4930      	ldr	r1, [pc, #192]	; (6134 <nm_spi_init+0x118>)
    6072:	4b31      	ldr	r3, [pc, #196]	; (6138 <nm_spi_init+0x11c>)
    6074:	0018      	movs	r0, r3
    6076:	4b31      	ldr	r3, [pc, #196]	; (613c <nm_spi_init+0x120>)
    6078:	4798      	blx	r3
    607a:	4b34      	ldr	r3, [pc, #208]	; (614c <nm_spi_init+0x130>)
    607c:	0018      	movs	r0, r3
    607e:	4b31      	ldr	r3, [pc, #196]	; (6144 <nm_spi_init+0x128>)
    6080:	4798      	blx	r3
    6082:	200d      	movs	r0, #13
    6084:	4b30      	ldr	r3, [pc, #192]	; (6148 <nm_spi_init+0x12c>)
    6086:	4798      	blx	r3
			return 0;
    6088:	2300      	movs	r3, #0
    608a:	e046      	b.n	611a <nm_spi_init+0xfe>
		}
	}
	if(gu8Crc_off == 0)
    608c:	4b25      	ldr	r3, [pc, #148]	; (6124 <nm_spi_init+0x108>)
    608e:	781b      	ldrb	r3, [r3, #0]
    6090:	2b00      	cmp	r3, #0
    6092:	d125      	bne.n	60e0 <nm_spi_init+0xc4>
	{
		reg &= ~0xc;	/* disable crc checking */
    6094:	683b      	ldr	r3, [r7, #0]
    6096:	220c      	movs	r2, #12
    6098:	4393      	bics	r3, r2
    609a:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
    609c:	683b      	ldr	r3, [r7, #0]
    609e:	2270      	movs	r2, #112	; 0x70
    60a0:	4393      	bics	r3, r2
    60a2:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
    60a4:	683b      	ldr	r3, [r7, #0]
    60a6:	2250      	movs	r2, #80	; 0x50
    60a8:	4313      	orrs	r3, r2
    60aa:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
    60ac:	683b      	ldr	r3, [r7, #0]
    60ae:	4a1e      	ldr	r2, [pc, #120]	; (6128 <nm_spi_init+0x10c>)
    60b0:	0019      	movs	r1, r3
    60b2:	0010      	movs	r0, r2
    60b4:	4b26      	ldr	r3, [pc, #152]	; (6150 <nm_spi_init+0x134>)
    60b6:	4798      	blx	r3
    60b8:	1e03      	subs	r3, r0, #0
    60ba:	d10e      	bne.n	60da <nm_spi_init+0xbe>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
    60bc:	4a25      	ldr	r2, [pc, #148]	; (6154 <nm_spi_init+0x138>)
    60be:	491d      	ldr	r1, [pc, #116]	; (6134 <nm_spi_init+0x118>)
    60c0:	4b1d      	ldr	r3, [pc, #116]	; (6138 <nm_spi_init+0x11c>)
    60c2:	0018      	movs	r0, r3
    60c4:	4b1d      	ldr	r3, [pc, #116]	; (613c <nm_spi_init+0x120>)
    60c6:	4798      	blx	r3
    60c8:	4b23      	ldr	r3, [pc, #140]	; (6158 <nm_spi_init+0x13c>)
    60ca:	0018      	movs	r0, r3
    60cc:	4b1d      	ldr	r3, [pc, #116]	; (6144 <nm_spi_init+0x128>)
    60ce:	4798      	blx	r3
    60d0:	200d      	movs	r0, #13
    60d2:	4b1d      	ldr	r3, [pc, #116]	; (6148 <nm_spi_init+0x12c>)
    60d4:	4798      	blx	r3
			return 0;
    60d6:	2300      	movs	r3, #0
    60d8:	e01f      	b.n	611a <nm_spi_init+0xfe>
		}
		gu8Crc_off = 1;
    60da:	4b12      	ldr	r3, [pc, #72]	; (6124 <nm_spi_init+0x108>)
    60dc:	2201      	movs	r2, #1
    60de:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
    60e0:	1d3a      	adds	r2, r7, #4
    60e2:	2380      	movs	r3, #128	; 0x80
    60e4:	015b      	lsls	r3, r3, #5
    60e6:	0011      	movs	r1, r2
    60e8:	0018      	movs	r0, r3
    60ea:	4b10      	ldr	r3, [pc, #64]	; (612c <nm_spi_init+0x110>)
    60ec:	4798      	blx	r3
    60ee:	1e03      	subs	r3, r0, #0
    60f0:	d110      	bne.n	6114 <nm_spi_init+0xf8>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
    60f2:	23b7      	movs	r3, #183	; 0xb7
    60f4:	009a      	lsls	r2, r3, #2
    60f6:	490f      	ldr	r1, [pc, #60]	; (6134 <nm_spi_init+0x118>)
    60f8:	4b0f      	ldr	r3, [pc, #60]	; (6138 <nm_spi_init+0x11c>)
    60fa:	0018      	movs	r0, r3
    60fc:	4b0f      	ldr	r3, [pc, #60]	; (613c <nm_spi_init+0x120>)
    60fe:	4798      	blx	r3
    6100:	4b16      	ldr	r3, [pc, #88]	; (615c <nm_spi_init+0x140>)
    6102:	0018      	movs	r0, r3
    6104:	4b0f      	ldr	r3, [pc, #60]	; (6144 <nm_spi_init+0x128>)
    6106:	4798      	blx	r3
    6108:	200d      	movs	r0, #13
    610a:	4b0f      	ldr	r3, [pc, #60]	; (6148 <nm_spi_init+0x12c>)
    610c:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
    610e:	2306      	movs	r3, #6
    6110:	425b      	negs	r3, r3
    6112:	e002      	b.n	611a <nm_spi_init+0xfe>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
    6114:	4b12      	ldr	r3, [pc, #72]	; (6160 <nm_spi_init+0x144>)
    6116:	4798      	blx	r3


	return M2M_SUCCESS;
    6118:	2300      	movs	r3, #0
}
    611a:	0018      	movs	r0, r3
    611c:	46bd      	mov	sp, r7
    611e:	b002      	add	sp, #8
    6120:	bd80      	pop	{r7, pc}
    6122:	46c0      	nop			; (mov r8, r8)
    6124:	200000e8 	.word	0x200000e8
    6128:	0000e824 	.word	0x0000e824
    612c:	00005ce9 	.word	0x00005ce9
    6130:	000002c5 	.word	0x000002c5
    6134:	00012214 	.word	0x00012214
    6138:	00011cb0 	.word	0x00011cb0
    613c:	000100d1 	.word	0x000100d1
    6140:	00012094 	.word	0x00012094
    6144:	000101f1 	.word	0x000101f1
    6148:	00010105 	.word	0x00010105
    614c:	000120e4 	.word	0x000120e4
    6150:	00005a89 	.word	0x00005a89
    6154:	000002d2 	.word	0x000002d2
    6158:	00012110 	.word	0x00012110
    615c:	00012144 	.word	0x00012144
    6160:	00005fd9 	.word	0x00005fd9

00006164 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/
sint8 nm_spi_deinit(void)
{
    6164:	b580      	push	{r7, lr}
    6166:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
    6168:	4b03      	ldr	r3, [pc, #12]	; (6178 <nm_spi_deinit+0x14>)
    616a:	2200      	movs	r2, #0
    616c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
    616e:	2300      	movs	r3, #0
}
    6170:	0018      	movs	r0, r3
    6172:	46bd      	mov	sp, r7
    6174:	bd80      	pop	{r7, pc}
    6176:	46c0      	nop			; (mov r8, r8)
    6178:	200000e8 	.word	0x200000e8

0000617c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
    617c:	b580      	push	{r7, lr}
    617e:	b084      	sub	sp, #16
    6180:	af00      	add	r7, sp, #0
    6182:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
    6184:	230c      	movs	r3, #12
    6186:	18fa      	adds	r2, r7, r3
    6188:	687b      	ldr	r3, [r7, #4]
    618a:	0011      	movs	r1, r2
    618c:	0018      	movs	r0, r3
    618e:	4b03      	ldr	r3, [pc, #12]	; (619c <nm_spi_read_reg+0x20>)
    6190:	4798      	blx	r3

	return u32Val;
    6192:	68fb      	ldr	r3, [r7, #12]
}
    6194:	0018      	movs	r0, r3
    6196:	46bd      	mov	sp, r7
    6198:	b004      	add	sp, #16
    619a:	bd80      	pop	{r7, pc}
    619c:	00005ce9 	.word	0x00005ce9

000061a0 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    61a0:	b590      	push	{r4, r7, lr}
    61a2:	b085      	sub	sp, #20
    61a4:	af00      	add	r7, sp, #0
    61a6:	6078      	str	r0, [r7, #4]
    61a8:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    61aa:	230f      	movs	r3, #15
    61ac:	18fc      	adds	r4, r7, r3
    61ae:	683a      	ldr	r2, [r7, #0]
    61b0:	687b      	ldr	r3, [r7, #4]
    61b2:	0011      	movs	r1, r2
    61b4:	0018      	movs	r0, r3
    61b6:	4b0d      	ldr	r3, [pc, #52]	; (61ec <nm_spi_read_reg_with_ret+0x4c>)
    61b8:	4798      	blx	r3
    61ba:	0003      	movs	r3, r0
    61bc:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    61be:	230f      	movs	r3, #15
    61c0:	18fb      	adds	r3, r7, r3
    61c2:	781b      	ldrb	r3, [r3, #0]
    61c4:	b25b      	sxtb	r3, r3
    61c6:	2b01      	cmp	r3, #1
    61c8:	d104      	bne.n	61d4 <nm_spi_read_reg_with_ret+0x34>
    61ca:	230f      	movs	r3, #15
    61cc:	18fb      	adds	r3, r7, r3
    61ce:	2200      	movs	r2, #0
    61d0:	701a      	strb	r2, [r3, #0]
    61d2:	e003      	b.n	61dc <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    61d4:	230f      	movs	r3, #15
    61d6:	18fb      	adds	r3, r7, r3
    61d8:	22fa      	movs	r2, #250	; 0xfa
    61da:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    61dc:	230f      	movs	r3, #15
    61de:	18fb      	adds	r3, r7, r3
    61e0:	781b      	ldrb	r3, [r3, #0]
    61e2:	b25b      	sxtb	r3, r3
}
    61e4:	0018      	movs	r0, r3
    61e6:	46bd      	mov	sp, r7
    61e8:	b005      	add	sp, #20
    61ea:	bd90      	pop	{r4, r7, pc}
    61ec:	00005ce9 	.word	0x00005ce9

000061f0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    61f0:	b590      	push	{r4, r7, lr}
    61f2:	b085      	sub	sp, #20
    61f4:	af00      	add	r7, sp, #0
    61f6:	6078      	str	r0, [r7, #4]
    61f8:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    61fa:	230f      	movs	r3, #15
    61fc:	18fc      	adds	r4, r7, r3
    61fe:	683a      	ldr	r2, [r7, #0]
    6200:	687b      	ldr	r3, [r7, #4]
    6202:	0011      	movs	r1, r2
    6204:	0018      	movs	r0, r3
    6206:	4b0d      	ldr	r3, [pc, #52]	; (623c <nm_spi_write_reg+0x4c>)
    6208:	4798      	blx	r3
    620a:	0003      	movs	r3, r0
    620c:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    620e:	230f      	movs	r3, #15
    6210:	18fb      	adds	r3, r7, r3
    6212:	781b      	ldrb	r3, [r3, #0]
    6214:	b25b      	sxtb	r3, r3
    6216:	2b01      	cmp	r3, #1
    6218:	d104      	bne.n	6224 <nm_spi_write_reg+0x34>
    621a:	230f      	movs	r3, #15
    621c:	18fb      	adds	r3, r7, r3
    621e:	2200      	movs	r2, #0
    6220:	701a      	strb	r2, [r3, #0]
    6222:	e003      	b.n	622c <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    6224:	230f      	movs	r3, #15
    6226:	18fb      	adds	r3, r7, r3
    6228:	22fa      	movs	r2, #250	; 0xfa
    622a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    622c:	230f      	movs	r3, #15
    622e:	18fb      	adds	r3, r7, r3
    6230:	781b      	ldrb	r3, [r3, #0]
    6232:	b25b      	sxtb	r3, r3
}
    6234:	0018      	movs	r0, r3
    6236:	46bd      	mov	sp, r7
    6238:	b005      	add	sp, #20
    623a:	bd90      	pop	{r4, r7, pc}
    623c:	00005a89 	.word	0x00005a89

00006240 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6240:	b590      	push	{r4, r7, lr}
    6242:	b087      	sub	sp, #28
    6244:	af00      	add	r7, sp, #0
    6246:	60f8      	str	r0, [r7, #12]
    6248:	60b9      	str	r1, [r7, #8]
    624a:	1dbb      	adds	r3, r7, #6
    624c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    624e:	2317      	movs	r3, #23
    6250:	18fc      	adds	r4, r7, r3
    6252:	1dbb      	adds	r3, r7, #6
    6254:	881a      	ldrh	r2, [r3, #0]
    6256:	68b9      	ldr	r1, [r7, #8]
    6258:	68fb      	ldr	r3, [r7, #12]
    625a:	0018      	movs	r0, r3
    625c:	4b0d      	ldr	r3, [pc, #52]	; (6294 <nm_spi_read_block+0x54>)
    625e:	4798      	blx	r3
    6260:	0003      	movs	r3, r0
    6262:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    6264:	2317      	movs	r3, #23
    6266:	18fb      	adds	r3, r7, r3
    6268:	781b      	ldrb	r3, [r3, #0]
    626a:	b25b      	sxtb	r3, r3
    626c:	2b01      	cmp	r3, #1
    626e:	d104      	bne.n	627a <nm_spi_read_block+0x3a>
    6270:	2317      	movs	r3, #23
    6272:	18fb      	adds	r3, r7, r3
    6274:	2200      	movs	r2, #0
    6276:	701a      	strb	r2, [r3, #0]
    6278:	e003      	b.n	6282 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    627a:	2317      	movs	r3, #23
    627c:	18fb      	adds	r3, r7, r3
    627e:	22fa      	movs	r2, #250	; 0xfa
    6280:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    6282:	2317      	movs	r3, #23
    6284:	18fb      	adds	r3, r7, r3
    6286:	781b      	ldrb	r3, [r3, #0]
    6288:	b25b      	sxtb	r3, r3
}
    628a:	0018      	movs	r0, r3
    628c:	46bd      	mov	sp, r7
    628e:	b007      	add	sp, #28
    6290:	bd90      	pop	{r4, r7, pc}
    6292:	46c0      	nop			; (mov r8, r8)
    6294:	00005e95 	.word	0x00005e95

00006298 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    6298:	b590      	push	{r4, r7, lr}
    629a:	b087      	sub	sp, #28
    629c:	af00      	add	r7, sp, #0
    629e:	60f8      	str	r0, [r7, #12]
    62a0:	60b9      	str	r1, [r7, #8]
    62a2:	1dbb      	adds	r3, r7, #6
    62a4:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    62a6:	2317      	movs	r3, #23
    62a8:	18fc      	adds	r4, r7, r3
    62aa:	1dbb      	adds	r3, r7, #6
    62ac:	881a      	ldrh	r2, [r3, #0]
    62ae:	68b9      	ldr	r1, [r7, #8]
    62b0:	68fb      	ldr	r3, [r7, #12]
    62b2:	0018      	movs	r0, r3
    62b4:	4b0d      	ldr	r3, [pc, #52]	; (62ec <nm_spi_write_block+0x54>)
    62b6:	4798      	blx	r3
    62b8:	0003      	movs	r3, r0
    62ba:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    62bc:	2317      	movs	r3, #23
    62be:	18fb      	adds	r3, r7, r3
    62c0:	781b      	ldrb	r3, [r3, #0]
    62c2:	b25b      	sxtb	r3, r3
    62c4:	2b01      	cmp	r3, #1
    62c6:	d104      	bne.n	62d2 <nm_spi_write_block+0x3a>
    62c8:	2317      	movs	r3, #23
    62ca:	18fb      	adds	r3, r7, r3
    62cc:	2200      	movs	r2, #0
    62ce:	701a      	strb	r2, [r3, #0]
    62d0:	e003      	b.n	62da <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    62d2:	2317      	movs	r3, #23
    62d4:	18fb      	adds	r3, r7, r3
    62d6:	22fa      	movs	r2, #250	; 0xfa
    62d8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    62da:	2317      	movs	r3, #23
    62dc:	18fb      	adds	r3, r7, r3
    62de:	781b      	ldrb	r3, [r3, #0]
    62e0:	b25b      	sxtb	r3, r3
}
    62e2:	0018      	movs	r0, r3
    62e4:	46bd      	mov	sp, r7
    62e6:	b007      	add	sp, #28
    62e8:	bd90      	pop	{r4, r7, pc}
    62ea:	46c0      	nop			; (mov r8, r8)
    62ec:	00005ba5 	.word	0x00005ba5

000062f0 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
    62f0:	b590      	push	{r4, r7, lr}
    62f2:	b089      	sub	sp, #36	; 0x24
    62f4:	af00      	add	r7, sp, #0
    62f6:	60b9      	str	r1, [r7, #8]
    62f8:	0011      	movs	r1, r2
    62fa:	607b      	str	r3, [r7, #4]
    62fc:	230f      	movs	r3, #15
    62fe:	18fb      	adds	r3, r7, r3
    6300:	1c02      	adds	r2, r0, #0
    6302:	701a      	strb	r2, [r3, #0]
    6304:	230e      	movs	r3, #14
    6306:	18fb      	adds	r3, r7, r3
    6308:	1c0a      	adds	r2, r1, #0
    630a:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
    630c:	2330      	movs	r3, #48	; 0x30
    630e:	18fb      	adds	r3, r7, r3
    6310:	881b      	ldrh	r3, [r3, #0]
    6312:	2b00      	cmp	r3, #0
    6314:	d100      	bne.n	6318 <Socket_ReadSocketData+0x28>
    6316:	e0bf      	b.n	6498 <Socket_ReadSocketData+0x1a8>
    6318:	230f      	movs	r3, #15
    631a:	18fb      	adds	r3, r7, r3
    631c:	2200      	movs	r2, #0
    631e:	569a      	ldrsb	r2, [r3, r2]
    6320:	4b5f      	ldr	r3, [pc, #380]	; (64a0 <Socket_ReadSocketData+0x1b0>)
    6322:	0112      	lsls	r2, r2, #4
    6324:	58d3      	ldr	r3, [r2, r3]
    6326:	2b00      	cmp	r3, #0
    6328:	d100      	bne.n	632c <Socket_ReadSocketData+0x3c>
    632a:	e0b5      	b.n	6498 <Socket_ReadSocketData+0x1a8>
    632c:	230f      	movs	r3, #15
    632e:	18fb      	adds	r3, r7, r3
    6330:	781b      	ldrb	r3, [r3, #0]
    6332:	b25b      	sxtb	r3, r3
    6334:	4a5a      	ldr	r2, [pc, #360]	; (64a0 <Socket_ReadSocketData+0x1b0>)
    6336:	011b      	lsls	r3, r3, #4
    6338:	18d3      	adds	r3, r2, r3
    633a:	3304      	adds	r3, #4
    633c:	881b      	ldrh	r3, [r3, #0]
    633e:	b29b      	uxth	r3, r3
    6340:	2b00      	cmp	r3, #0
    6342:	d100      	bne.n	6346 <Socket_ReadSocketData+0x56>
    6344:	e0a8      	b.n	6498 <Socket_ReadSocketData+0x1a8>
    6346:	230f      	movs	r3, #15
    6348:	18fb      	adds	r3, r7, r3
    634a:	781b      	ldrb	r3, [r3, #0]
    634c:	b25b      	sxtb	r3, r3
    634e:	4a54      	ldr	r2, [pc, #336]	; (64a0 <Socket_ReadSocketData+0x1b0>)
    6350:	011b      	lsls	r3, r3, #4
    6352:	18d3      	adds	r3, r2, r3
    6354:	330a      	adds	r3, #10
    6356:	781b      	ldrb	r3, [r3, #0]
    6358:	b2db      	uxtb	r3, r3
    635a:	2b01      	cmp	r3, #1
    635c:	d000      	beq.n	6360 <Socket_ReadSocketData+0x70>
    635e:	e09b      	b.n	6498 <Socket_ReadSocketData+0x1a8>
	{
		uint32	u32Address = u32StartAddress;
    6360:	687b      	ldr	r3, [r7, #4]
    6362:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
    6364:	68bb      	ldr	r3, [r7, #8]
    6366:	2230      	movs	r2, #48	; 0x30
    6368:	18ba      	adds	r2, r7, r2
    636a:	8812      	ldrh	r2, [r2, #0]
    636c:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
    636e:	2319      	movs	r3, #25
    6370:	18fb      	adds	r3, r7, r3
    6372:	2201      	movs	r2, #1
    6374:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
    6376:	231a      	movs	r3, #26
    6378:	18fb      	adds	r3, r7, r3
    637a:	2230      	movs	r2, #48	; 0x30
    637c:	18ba      	adds	r2, r7, r2
    637e:	8812      	ldrh	r2, [r2, #0]
    6380:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
    6382:	230f      	movs	r3, #15
    6384:	18fb      	adds	r3, r7, r3
    6386:	781b      	ldrb	r3, [r3, #0]
    6388:	b25b      	sxtb	r3, r3
    638a:	4a45      	ldr	r2, [pc, #276]	; (64a0 <Socket_ReadSocketData+0x1b0>)
    638c:	011b      	lsls	r3, r3, #4
    638e:	18d3      	adds	r3, r2, r3
    6390:	3304      	adds	r3, #4
    6392:	881b      	ldrh	r3, [r3, #0]
    6394:	b29b      	uxth	r3, r3
    6396:	221a      	movs	r2, #26
    6398:	18ba      	adds	r2, r7, r2
    639a:	8812      	ldrh	r2, [r2, #0]
    639c:	1ad3      	subs	r3, r2, r3
    639e:	b29a      	uxth	r2, r3
    63a0:	2316      	movs	r3, #22
    63a2:	18fb      	adds	r3, r7, r3
    63a4:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
    63a6:	2316      	movs	r3, #22
    63a8:	18fb      	adds	r3, r7, r3
    63aa:	2200      	movs	r2, #0
    63ac:	5e9b      	ldrsh	r3, [r3, r2]
    63ae:	2b00      	cmp	r3, #0
    63b0:	dd0f      	ble.n	63d2 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
    63b2:	2319      	movs	r3, #25
    63b4:	18fb      	adds	r3, r7, r3
    63b6:	2200      	movs	r2, #0
    63b8:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
    63ba:	230f      	movs	r3, #15
    63bc:	18fb      	adds	r3, r7, r3
    63be:	2200      	movs	r2, #0
    63c0:	569a      	ldrsb	r2, [r3, r2]
    63c2:	231a      	movs	r3, #26
    63c4:	18fb      	adds	r3, r7, r3
    63c6:	4936      	ldr	r1, [pc, #216]	; (64a0 <Socket_ReadSocketData+0x1b0>)
    63c8:	0112      	lsls	r2, r2, #4
    63ca:	188a      	adds	r2, r1, r2
    63cc:	3204      	adds	r2, #4
    63ce:	8812      	ldrh	r2, [r2, #0]
    63d0:	801a      	strh	r2, [r3, #0]
			}
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
    63d2:	230f      	movs	r3, #15
    63d4:	18fb      	adds	r3, r7, r3
    63d6:	2200      	movs	r2, #0
    63d8:	569a      	ldrsb	r2, [r3, r2]
    63da:	4b31      	ldr	r3, [pc, #196]	; (64a0 <Socket_ReadSocketData+0x1b0>)
    63dc:	0112      	lsls	r2, r2, #4
    63de:	58d1      	ldr	r1, [r2, r3]
    63e0:	2319      	movs	r3, #25
    63e2:	18fb      	adds	r3, r7, r3
    63e4:	781c      	ldrb	r4, [r3, #0]
    63e6:	231a      	movs	r3, #26
    63e8:	18fb      	adds	r3, r7, r3
    63ea:	881a      	ldrh	r2, [r3, #0]
    63ec:	69f8      	ldr	r0, [r7, #28]
    63ee:	0023      	movs	r3, r4
    63f0:	4c2c      	ldr	r4, [pc, #176]	; (64a4 <Socket_ReadSocketData+0x1b4>)
    63f2:	47a0      	blx	r4
    63f4:	1e03      	subs	r3, r0, #0
    63f6:	d138      	bne.n	646a <Socket_ReadSocketData+0x17a>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
    63f8:	230f      	movs	r3, #15
    63fa:	18fb      	adds	r3, r7, r3
    63fc:	2200      	movs	r2, #0
    63fe:	569a      	ldrsb	r2, [r3, r2]
    6400:	4b27      	ldr	r3, [pc, #156]	; (64a0 <Socket_ReadSocketData+0x1b0>)
    6402:	0112      	lsls	r2, r2, #4
    6404:	58d2      	ldr	r2, [r2, r3]
    6406:	68bb      	ldr	r3, [r7, #8]
    6408:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
    640a:	231a      	movs	r3, #26
    640c:	18fb      	adds	r3, r7, r3
    640e:	2200      	movs	r2, #0
    6410:	5e9a      	ldrsh	r2, [r3, r2]
    6412:	68bb      	ldr	r3, [r7, #8]
    6414:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
    6416:	68bb      	ldr	r3, [r7, #8]
    6418:	88da      	ldrh	r2, [r3, #6]
    641a:	231a      	movs	r3, #26
    641c:	18fb      	adds	r3, r7, r3
    641e:	881b      	ldrh	r3, [r3, #0]
    6420:	1ad3      	subs	r3, r2, r3
    6422:	b29a      	uxth	r2, r3
    6424:	68bb      	ldr	r3, [r7, #8]
    6426:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
    6428:	4b1f      	ldr	r3, [pc, #124]	; (64a8 <Socket_ReadSocketData+0x1b8>)
    642a:	681b      	ldr	r3, [r3, #0]
    642c:	2b00      	cmp	r3, #0
    642e:	d00b      	beq.n	6448 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
    6430:	4b1d      	ldr	r3, [pc, #116]	; (64a8 <Socket_ReadSocketData+0x1b8>)
    6432:	681b      	ldr	r3, [r3, #0]
    6434:	68bc      	ldr	r4, [r7, #8]
    6436:	220e      	movs	r2, #14
    6438:	18ba      	adds	r2, r7, r2
    643a:	7811      	ldrb	r1, [r2, #0]
    643c:	220f      	movs	r2, #15
    643e:	18ba      	adds	r2, r7, r2
    6440:	2000      	movs	r0, #0
    6442:	5610      	ldrsb	r0, [r2, r0]
    6444:	0022      	movs	r2, r4
    6446:	4798      	blx	r3

				u16ReadCount -= u16Read;
    6448:	2330      	movs	r3, #48	; 0x30
    644a:	18f9      	adds	r1, r7, r3
    644c:	2330      	movs	r3, #48	; 0x30
    644e:	18fa      	adds	r2, r7, r3
    6450:	231a      	movs	r3, #26
    6452:	18fb      	adds	r3, r7, r3
    6454:	8812      	ldrh	r2, [r2, #0]
    6456:	881b      	ldrh	r3, [r3, #0]
    6458:	1ad3      	subs	r3, r2, r3
    645a:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
    645c:	231a      	movs	r3, #26
    645e:	18fb      	adds	r3, r7, r3
    6460:	881b      	ldrh	r3, [r3, #0]
    6462:	69fa      	ldr	r2, [r7, #28]
    6464:	18d3      	adds	r3, r2, r3
    6466:	61fb      	str	r3, [r7, #28]
    6468:	e010      	b.n	648c <Socket_ReadSocketData+0x19c>
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
    646a:	4b10      	ldr	r3, [pc, #64]	; (64ac <Socket_ReadSocketData+0x1bc>)
    646c:	0018      	movs	r0, r3
    646e:	4b10      	ldr	r3, [pc, #64]	; (64b0 <Socket_ReadSocketData+0x1c0>)
    6470:	4798      	blx	r3
    6472:	2330      	movs	r3, #48	; 0x30
    6474:	18fb      	adds	r3, r7, r3
    6476:	881a      	ldrh	r2, [r3, #0]
    6478:	4b0e      	ldr	r3, [pc, #56]	; (64b4 <Socket_ReadSocketData+0x1c4>)
    647a:	0011      	movs	r1, r2
    647c:	0018      	movs	r0, r3
    647e:	4b0c      	ldr	r3, [pc, #48]	; (64b0 <Socket_ReadSocketData+0x1c0>)
    6480:	4798      	blx	r3
    6482:	200d      	movs	r0, #13
    6484:	4b0c      	ldr	r3, [pc, #48]	; (64b8 <Socket_ReadSocketData+0x1c8>)
    6486:	4798      	blx	r3
				break;
    6488:	46c0      	nop			; (mov r8, r8)
			}
		}while(u16ReadCount != 0);
	}
}
    648a:	e005      	b.n	6498 <Socket_ReadSocketData+0x1a8>
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
				break;
			}
		}while(u16ReadCount != 0);
    648c:	2330      	movs	r3, #48	; 0x30
    648e:	18fb      	adds	r3, r7, r3
    6490:	881b      	ldrh	r3, [r3, #0]
    6492:	2b00      	cmp	r3, #0
    6494:	d000      	beq.n	6498 <Socket_ReadSocketData+0x1a8>
    6496:	e76a      	b.n	636e <Socket_ReadSocketData+0x7e>
	}
}
    6498:	46c0      	nop			; (mov r8, r8)
    649a:	46bd      	mov	sp, r7
    649c:	b009      	add	sp, #36	; 0x24
    649e:	bd90      	pop	{r4, r7, pc}
    64a0:	20004660 	.word	0x20004660
    64a4:	000033a5 	.word	0x000033a5
    64a8:	20004710 	.word	0x20004710
    64ac:	00012220 	.word	0x00012220
    64b0:	000100d1 	.word	0x000100d1
    64b4:	0001222c 	.word	0x0001222c
    64b8:	00010105 	.word	0x00010105

000064bc <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{
    64bc:	b590      	push	{r4, r7, lr}
    64be:	b0bb      	sub	sp, #236	; 0xec
    64c0:	af02      	add	r7, sp, #8
    64c2:	603a      	str	r2, [r7, #0]
    64c4:	1dfb      	adds	r3, r7, #7
    64c6:	1c02      	adds	r2, r0, #0
    64c8:	701a      	strb	r2, [r3, #0]
    64ca:	1d3b      	adds	r3, r7, #4
    64cc:	1c0a      	adds	r2, r1, #0
    64ce:	801a      	strh	r2, [r3, #0]
	if(u8OpCode == SOCKET_CMD_BIND)
    64d0:	1dfb      	adds	r3, r7, #7
    64d2:	781b      	ldrb	r3, [r3, #0]
    64d4:	2b41      	cmp	r3, #65	; 0x41
    64d6:	d120      	bne.n	651a <m2m_ip_cb+0x5e>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
    64d8:	23cc      	movs	r3, #204	; 0xcc
    64da:	18f9      	adds	r1, r7, r3
    64dc:	6838      	ldr	r0, [r7, #0]
    64de:	2300      	movs	r3, #0
    64e0:	2204      	movs	r2, #4
    64e2:	4c8d      	ldr	r4, [pc, #564]	; (6718 <m2m_ip_cb+0x25c>)
    64e4:	47a0      	blx	r4
    64e6:	1e03      	subs	r3, r0, #0
    64e8:	d000      	beq.n	64ec <m2m_ip_cb+0x30>
    64ea:	e264      	b.n	69b6 <m2m_ip_cb+0x4fa>
		{
			strBind.status = strBindReply.s8Status;
    64ec:	23cc      	movs	r3, #204	; 0xcc
    64ee:	18fb      	adds	r3, r7, r3
    64f0:	2201      	movs	r2, #1
    64f2:	569a      	ldrsb	r2, [r3, r2]
    64f4:	23c8      	movs	r3, #200	; 0xc8
    64f6:	18fb      	adds	r3, r7, r3
    64f8:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    64fa:	4b88      	ldr	r3, [pc, #544]	; (671c <m2m_ip_cb+0x260>)
    64fc:	681b      	ldr	r3, [r3, #0]
    64fe:	2b00      	cmp	r3, #0
    6500:	d100      	bne.n	6504 <m2m_ip_cb+0x48>
    6502:	e258      	b.n	69b6 <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
    6504:	4b85      	ldr	r3, [pc, #532]	; (671c <m2m_ip_cb+0x260>)
    6506:	681b      	ldr	r3, [r3, #0]
    6508:	22cc      	movs	r2, #204	; 0xcc
    650a:	18ba      	adds	r2, r7, r2
    650c:	2000      	movs	r0, #0
    650e:	5610      	ldrsb	r0, [r2, r0]
    6510:	22c8      	movs	r2, #200	; 0xc8
    6512:	18ba      	adds	r2, r7, r2
    6514:	2101      	movs	r1, #1
    6516:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6518:	e24d      	b.n	69b6 <m2m_ip_cb+0x4fa>
			strBind.status = strBindReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
    651a:	1dfb      	adds	r3, r7, #7
    651c:	781b      	ldrb	r3, [r3, #0]
    651e:	2b42      	cmp	r3, #66	; 0x42
    6520:	d120      	bne.n	6564 <m2m_ip_cb+0xa8>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
    6522:	23c4      	movs	r3, #196	; 0xc4
    6524:	18f9      	adds	r1, r7, r3
    6526:	6838      	ldr	r0, [r7, #0]
    6528:	2300      	movs	r3, #0
    652a:	2204      	movs	r2, #4
    652c:	4c7a      	ldr	r4, [pc, #488]	; (6718 <m2m_ip_cb+0x25c>)
    652e:	47a0      	blx	r4
    6530:	1e03      	subs	r3, r0, #0
    6532:	d000      	beq.n	6536 <m2m_ip_cb+0x7a>
    6534:	e23f      	b.n	69b6 <m2m_ip_cb+0x4fa>
		{
			strListen.status = strListenReply.s8Status;
    6536:	23c4      	movs	r3, #196	; 0xc4
    6538:	18fb      	adds	r3, r7, r3
    653a:	2201      	movs	r2, #1
    653c:	569a      	ldrsb	r2, [r3, r2]
    653e:	23c0      	movs	r3, #192	; 0xc0
    6540:	18fb      	adds	r3, r7, r3
    6542:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
    6544:	4b75      	ldr	r3, [pc, #468]	; (671c <m2m_ip_cb+0x260>)
    6546:	681b      	ldr	r3, [r3, #0]
    6548:	2b00      	cmp	r3, #0
    654a:	d100      	bne.n	654e <m2m_ip_cb+0x92>
    654c:	e233      	b.n	69b6 <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
    654e:	4b73      	ldr	r3, [pc, #460]	; (671c <m2m_ip_cb+0x260>)
    6550:	681b      	ldr	r3, [r3, #0]
    6552:	22c4      	movs	r2, #196	; 0xc4
    6554:	18ba      	adds	r2, r7, r2
    6556:	2000      	movs	r0, #0
    6558:	5610      	ldrsb	r0, [r2, r0]
    655a:	22c0      	movs	r2, #192	; 0xc0
    655c:	18ba      	adds	r2, r7, r2
    655e:	2102      	movs	r1, #2
    6560:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6562:	e228      	b.n	69b6 <m2m_ip_cb+0x4fa>
			strListen.status = strListenReply.s8Status;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
		}
	}
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
    6564:	1dfb      	adds	r3, r7, #7
    6566:	781b      	ldrb	r3, [r3, #0]
    6568:	2b43      	cmp	r3, #67	; 0x43
    656a:	d16b      	bne.n	6644 <m2m_ip_cb+0x188>
	{
		tstrAcceptReply			strAcceptReply;
		tstrSocketAcceptMsg		strAccept;
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
    656c:	23b4      	movs	r3, #180	; 0xb4
    656e:	18f9      	adds	r1, r7, r3
    6570:	6838      	ldr	r0, [r7, #0]
    6572:	2300      	movs	r3, #0
    6574:	220c      	movs	r2, #12
    6576:	4c68      	ldr	r4, [pc, #416]	; (6718 <m2m_ip_cb+0x25c>)
    6578:	47a0      	blx	r4
    657a:	1e03      	subs	r3, r0, #0
    657c:	d000      	beq.n	6580 <m2m_ip_cb+0xc4>
    657e:	e21a      	b.n	69b6 <m2m_ip_cb+0x4fa>
		{
			if(strAcceptReply.sConnectedSock >= 0)
    6580:	23b4      	movs	r3, #180	; 0xb4
    6582:	18fb      	adds	r3, r7, r3
    6584:	7a5b      	ldrb	r3, [r3, #9]
    6586:	b25b      	sxtb	r3, r3
    6588:	2b00      	cmp	r3, #0
    658a:	db34      	blt.n	65f6 <m2m_ip_cb+0x13a>
			{
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 	= 0;
    658c:	23b4      	movs	r3, #180	; 0xb4
    658e:	18fb      	adds	r3, r7, r3
    6590:	7a5b      	ldrb	r3, [r3, #9]
    6592:	b25b      	sxtb	r3, r3
    6594:	4a62      	ldr	r2, [pc, #392]	; (6720 <m2m_ip_cb+0x264>)
    6596:	011b      	lsls	r3, r3, #4
    6598:	18d3      	adds	r3, r2, r3
    659a:	330b      	adds	r3, #11
    659c:	2200      	movs	r2, #0
    659e:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 	= 1;
    65a0:	23b4      	movs	r3, #180	; 0xb4
    65a2:	18fb      	adds	r3, r7, r3
    65a4:	7a5b      	ldrb	r3, [r3, #9]
    65a6:	b25b      	sxtb	r3, r3
    65a8:	4a5d      	ldr	r2, [pc, #372]	; (6720 <m2m_ip_cb+0x264>)
    65aa:	011b      	lsls	r3, r3, #4
    65ac:	18d3      	adds	r3, r2, r3
    65ae:	330a      	adds	r3, #10
    65b0:	2201      	movs	r2, #1
    65b2:	701a      	strb	r2, [r3, #0]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    65b4:	4b5b      	ldr	r3, [pc, #364]	; (6724 <m2m_ip_cb+0x268>)
    65b6:	881b      	ldrh	r3, [r3, #0]
    65b8:	b29b      	uxth	r3, r3
    65ba:	3301      	adds	r3, #1
    65bc:	b29a      	uxth	r2, r3
    65be:	4b59      	ldr	r3, [pc, #356]	; (6724 <m2m_ip_cb+0x268>)
    65c0:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    65c2:	4b58      	ldr	r3, [pc, #352]	; (6724 <m2m_ip_cb+0x268>)
    65c4:	881b      	ldrh	r3, [r3, #0]
    65c6:	b29b      	uxth	r3, r3
    65c8:	2b00      	cmp	r3, #0
    65ca:	d106      	bne.n	65da <m2m_ip_cb+0x11e>
					++gu16SessionID;
    65cc:	4b55      	ldr	r3, [pc, #340]	; (6724 <m2m_ip_cb+0x268>)
    65ce:	881b      	ldrh	r3, [r3, #0]
    65d0:	b29b      	uxth	r3, r3
    65d2:	3301      	adds	r3, #1
    65d4:	b29a      	uxth	r2, r3
    65d6:	4b53      	ldr	r3, [pc, #332]	; (6724 <m2m_ip_cb+0x268>)
    65d8:	801a      	strh	r2, [r3, #0]

				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
    65da:	23b4      	movs	r3, #180	; 0xb4
    65dc:	18fb      	adds	r3, r7, r3
    65de:	7a5b      	ldrb	r3, [r3, #9]
    65e0:	b25b      	sxtb	r3, r3
    65e2:	0018      	movs	r0, r3
    65e4:	4b4f      	ldr	r3, [pc, #316]	; (6724 <m2m_ip_cb+0x268>)
    65e6:	881b      	ldrh	r3, [r3, #0]
    65e8:	b299      	uxth	r1, r3
    65ea:	4a4d      	ldr	r2, [pc, #308]	; (6720 <m2m_ip_cb+0x264>)
    65ec:	0103      	lsls	r3, r0, #4
    65ee:	18d3      	adds	r3, r2, r3
    65f0:	3306      	adds	r3, #6
    65f2:	1c0a      	adds	r2, r1, #0
    65f4:	801a      	strh	r2, [r3, #0]
				M2M_DBG("Socket %d session ID = %d\r\n",strAcceptReply.sConnectedSock , gu16SessionID );		
			}
			strAccept.sock = strAcceptReply.sConnectedSock;
    65f6:	23b4      	movs	r3, #180	; 0xb4
    65f8:	18fb      	adds	r3, r7, r3
    65fa:	2209      	movs	r2, #9
    65fc:	569a      	ldrsb	r2, [r3, r2]
    65fe:	23a0      	movs	r3, #160	; 0xa0
    6600:	18fb      	adds	r3, r7, r3
    6602:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
    6604:	23a0      	movs	r3, #160	; 0xa0
    6606:	18fb      	adds	r3, r7, r3
    6608:	2202      	movs	r2, #2
    660a:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
    660c:	23b4      	movs	r3, #180	; 0xb4
    660e:	18fb      	adds	r3, r7, r3
    6610:	885a      	ldrh	r2, [r3, #2]
    6612:	23a0      	movs	r3, #160	; 0xa0
    6614:	18fb      	adds	r3, r7, r3
    6616:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
    6618:	23b4      	movs	r3, #180	; 0xb4
    661a:	18fb      	adds	r3, r7, r3
    661c:	685a      	ldr	r2, [r3, #4]
    661e:	23a0      	movs	r3, #160	; 0xa0
    6620:	18fb      	adds	r3, r7, r3
    6622:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
    6624:	4b3d      	ldr	r3, [pc, #244]	; (671c <m2m_ip_cb+0x260>)
    6626:	681b      	ldr	r3, [r3, #0]
    6628:	2b00      	cmp	r3, #0
    662a:	d100      	bne.n	662e <m2m_ip_cb+0x172>
    662c:	e1c3      	b.n	69b6 <m2m_ip_cb+0x4fa>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
    662e:	4b3b      	ldr	r3, [pc, #236]	; (671c <m2m_ip_cb+0x260>)
    6630:	681b      	ldr	r3, [r3, #0]
    6632:	22b4      	movs	r2, #180	; 0xb4
    6634:	18ba      	adds	r2, r7, r2
    6636:	2008      	movs	r0, #8
    6638:	5610      	ldrsb	r0, [r2, r0]
    663a:	22a0      	movs	r2, #160	; 0xa0
    663c:	18ba      	adds	r2, r7, r2
    663e:	2104      	movs	r1, #4
    6640:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6642:	e1b8      	b.n	69b6 <m2m_ip_cb+0x4fa>
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
    6644:	1dfb      	adds	r3, r7, #7
    6646:	781b      	ldrb	r3, [r3, #0]
    6648:	2b44      	cmp	r3, #68	; 0x44
    664a:	d003      	beq.n	6654 <m2m_ip_cb+0x198>
    664c:	1dfb      	adds	r3, r7, #7
    664e:	781b      	ldrb	r3, [r3, #0]
    6650:	2b4b      	cmp	r3, #75	; 0x4b
    6652:	d13d      	bne.n	66d0 <m2m_ip_cb+0x214>
	{
		tstrConnectReply		strConnectReply;
		tstrSocketConnectMsg	strConnMsg;
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
    6654:	239c      	movs	r3, #156	; 0x9c
    6656:	18f9      	adds	r1, r7, r3
    6658:	6838      	ldr	r0, [r7, #0]
    665a:	2300      	movs	r3, #0
    665c:	2204      	movs	r2, #4
    665e:	4c2e      	ldr	r4, [pc, #184]	; (6718 <m2m_ip_cb+0x25c>)
    6660:	47a0      	blx	r4
    6662:	1e03      	subs	r3, r0, #0
    6664:	d000      	beq.n	6668 <m2m_ip_cb+0x1ac>
    6666:	e1a1      	b.n	69ac <m2m_ip_cb+0x4f0>
		{
			strConnMsg.sock		= strConnectReply.sock;
    6668:	239c      	movs	r3, #156	; 0x9c
    666a:	18fb      	adds	r3, r7, r3
    666c:	2200      	movs	r2, #0
    666e:	569a      	ldrsb	r2, [r3, r2]
    6670:	2398      	movs	r3, #152	; 0x98
    6672:	18fb      	adds	r3, r7, r3
    6674:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
    6676:	239c      	movs	r3, #156	; 0x9c
    6678:	18fb      	adds	r3, r7, r3
    667a:	2201      	movs	r2, #1
    667c:	569a      	ldrsb	r2, [r3, r2]
    667e:	2398      	movs	r3, #152	; 0x98
    6680:	18fb      	adds	r3, r7, r3
    6682:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
    6684:	239c      	movs	r3, #156	; 0x9c
    6686:	18fb      	adds	r3, r7, r3
    6688:	785b      	ldrb	r3, [r3, #1]
    668a:	b25b      	sxtb	r3, r3
    668c:	2b00      	cmp	r3, #0
    668e:	d10f      	bne.n	66b0 <m2m_ip_cb+0x1f4>
			{
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
    6690:	239c      	movs	r3, #156	; 0x9c
    6692:	18fb      	adds	r3, r7, r3
    6694:	781b      	ldrb	r3, [r3, #0]
    6696:	b25b      	sxtb	r3, r3
    6698:	0018      	movs	r0, r3
    669a:	239c      	movs	r3, #156	; 0x9c
    669c:	18fb      	adds	r3, r7, r3
    669e:	885b      	ldrh	r3, [r3, #2]
    66a0:	3b08      	subs	r3, #8
    66a2:	b299      	uxth	r1, r3
    66a4:	4a1e      	ldr	r2, [pc, #120]	; (6720 <m2m_ip_cb+0x264>)
    66a6:	0103      	lsls	r3, r0, #4
    66a8:	18d3      	adds	r3, r2, r3
    66aa:	3308      	adds	r3, #8
    66ac:	1c0a      	adds	r2, r1, #0
    66ae:	801a      	strh	r2, [r3, #0]
			}
			if(gpfAppSocketCb)
    66b0:	4b1a      	ldr	r3, [pc, #104]	; (671c <m2m_ip_cb+0x260>)
    66b2:	681b      	ldr	r3, [r3, #0]
    66b4:	2b00      	cmp	r3, #0
    66b6:	d100      	bne.n	66ba <m2m_ip_cb+0x1fe>
    66b8:	e178      	b.n	69ac <m2m_ip_cb+0x4f0>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
    66ba:	4b18      	ldr	r3, [pc, #96]	; (671c <m2m_ip_cb+0x260>)
    66bc:	681b      	ldr	r3, [r3, #0]
    66be:	229c      	movs	r2, #156	; 0x9c
    66c0:	18ba      	adds	r2, r7, r2
    66c2:	2000      	movs	r0, #0
    66c4:	5610      	ldrsb	r0, [r2, r0]
    66c6:	2298      	movs	r2, #152	; 0x98
    66c8:	18ba      	adds	r2, r7, r2
    66ca:	2105      	movs	r1, #5
    66cc:	4798      	blx	r3
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    66ce:	e16d      	b.n	69ac <m2m_ip_cb+0x4f0>
			}
			if(gpfAppSocketCb)
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
		}
	}
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
    66d0:	1dfb      	adds	r3, r7, #7
    66d2:	781b      	ldrb	r3, [r3, #0]
    66d4:	2b4a      	cmp	r3, #74	; 0x4a
    66d6:	d129      	bne.n	672c <m2m_ip_cb+0x270>
	{
		tstrDnsReply	strDnsReply;
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
    66d8:	230c      	movs	r3, #12
    66da:	18f9      	adds	r1, r7, r3
    66dc:	6838      	ldr	r0, [r7, #0]
    66de:	2300      	movs	r3, #0
    66e0:	2244      	movs	r2, #68	; 0x44
    66e2:	4c0d      	ldr	r4, [pc, #52]	; (6718 <m2m_ip_cb+0x25c>)
    66e4:	47a0      	blx	r4
    66e6:	1e03      	subs	r3, r0, #0
    66e8:	d000      	beq.n	66ec <m2m_ip_cb+0x230>
    66ea:	e164      	b.n	69b6 <m2m_ip_cb+0x4fa>
		{
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
    66ec:	230c      	movs	r3, #12
    66ee:	18fb      	adds	r3, r7, r3
    66f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    66f2:	230c      	movs	r3, #12
    66f4:	18fb      	adds	r3, r7, r3
    66f6:	641a      	str	r2, [r3, #64]	; 0x40
			if(gpfAppResolveCb)
    66f8:	4b0b      	ldr	r3, [pc, #44]	; (6728 <m2m_ip_cb+0x26c>)
    66fa:	681b      	ldr	r3, [r3, #0]
    66fc:	2b00      	cmp	r3, #0
    66fe:	d100      	bne.n	6702 <m2m_ip_cb+0x246>
    6700:	e159      	b.n	69b6 <m2m_ip_cb+0x4fa>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
    6702:	4b09      	ldr	r3, [pc, #36]	; (6728 <m2m_ip_cb+0x26c>)
    6704:	681a      	ldr	r2, [r3, #0]
    6706:	230c      	movs	r3, #12
    6708:	18fb      	adds	r3, r7, r3
    670a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    670c:	230c      	movs	r3, #12
    670e:	18fb      	adds	r3, r7, r3
    6710:	0018      	movs	r0, r3
    6712:	4790      	blx	r2
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    6714:	e14f      	b.n	69b6 <m2m_ip_cb+0x4fa>
    6716:	46c0      	nop			; (mov r8, r8)
    6718:	000033a5 	.word	0x000033a5
    671c:	20004710 	.word	0x20004710
    6720:	20004660 	.word	0x20004660
    6724:	200000ea 	.word	0x200000ea
    6728:	20004718 	.word	0x20004718
			strDnsReply.u32HostIP = strDnsReply.u32HostIP;
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
    672c:	1dfb      	adds	r3, r7, #7
    672e:	781b      	ldrb	r3, [r3, #0]
    6730:	2b46      	cmp	r3, #70	; 0x46
    6732:	d008      	beq.n	6746 <m2m_ip_cb+0x28a>
    6734:	1dfb      	adds	r3, r7, #7
    6736:	781b      	ldrb	r3, [r3, #0]
    6738:	2b48      	cmp	r3, #72	; 0x48
    673a:	d004      	beq.n	6746 <m2m_ip_cb+0x28a>
    673c:	1dfb      	adds	r3, r7, #7
    673e:	781b      	ldrb	r3, [r3, #0]
    6740:	2b4d      	cmp	r3, #77	; 0x4d
    6742:	d000      	beq.n	6746 <m2m_ip_cb+0x28a>
    6744:	e0b4      	b.n	68b0 <m2m_ip_cb+0x3f4>
		SOCKET				sock;
		sint16				s16RecvStatus;
		tstrRecvReply		strRecvReply;
		uint16				u16ReadSize;
		tstrSocketRecvMsg	strRecvMsg;
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
    6746:	23df      	movs	r3, #223	; 0xdf
    6748:	18fb      	adds	r3, r7, r3
    674a:	2206      	movs	r2, #6
    674c:	701a      	strb	r2, [r3, #0]
		uint16				u16DataOffset;

		if(u8OpCode == SOCKET_CMD_RECVFROM)
    674e:	1dfb      	adds	r3, r7, #7
    6750:	781b      	ldrb	r3, [r3, #0]
    6752:	2b48      	cmp	r3, #72	; 0x48
    6754:	d103      	bne.n	675e <m2m_ip_cb+0x2a2>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
    6756:	23df      	movs	r3, #223	; 0xdf
    6758:	18fb      	adds	r3, r7, r3
    675a:	2209      	movs	r2, #9
    675c:	701a      	strb	r2, [r3, #0]

		/* Read RECV REPLY data structure.
		*/
		u16ReadSize = sizeof(tstrRecvReply);
    675e:	23d8      	movs	r3, #216	; 0xd8
    6760:	18fb      	adds	r3, r7, r3
    6762:	2210      	movs	r2, #16
    6764:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
    6766:	23d8      	movs	r3, #216	; 0xd8
    6768:	18fb      	adds	r3, r7, r3
    676a:	881a      	ldrh	r2, [r3, #0]
    676c:	2388      	movs	r3, #136	; 0x88
    676e:	18f9      	adds	r1, r7, r3
    6770:	6838      	ldr	r0, [r7, #0]
    6772:	2300      	movs	r3, #0
    6774:	4c92      	ldr	r4, [pc, #584]	; (69c0 <m2m_ip_cb+0x504>)
    6776:	47a0      	blx	r4
    6778:	1e03      	subs	r3, r0, #0
    677a:	d000      	beq.n	677e <m2m_ip_cb+0x2c2>
    677c:	e118      	b.n	69b0 <m2m_ip_cb+0x4f4>
		{
			uint16 u16SessionID = 0;
    677e:	23d6      	movs	r3, #214	; 0xd6
    6780:	18fb      	adds	r3, r7, r3
    6782:	2200      	movs	r2, #0
    6784:	801a      	strh	r2, [r3, #0]

			sock			= strRecvReply.sock;
    6786:	23d5      	movs	r3, #213	; 0xd5
    6788:	18fb      	adds	r3, r7, r3
    678a:	2288      	movs	r2, #136	; 0x88
    678c:	18ba      	adds	r2, r7, r2
    678e:	7b12      	ldrb	r2, [r2, #12]
    6790:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
    6792:	23d6      	movs	r3, #214	; 0xd6
    6794:	18fb      	adds	r3, r7, r3
    6796:	2288      	movs	r2, #136	; 0x88
    6798:	18ba      	adds	r2, r7, r2
    679a:	89d2      	ldrh	r2, [r2, #14]
    679c:	801a      	strh	r2, [r3, #0]
			M2M_DBG("recv callback session ID = %d\r\n",u16SessionID);
			
			/* Reset the Socket RX Pending Flag.
			*/
			gastrSockets[sock].bIsRecvPending = 0;
    679e:	23d5      	movs	r3, #213	; 0xd5
    67a0:	18fb      	adds	r3, r7, r3
    67a2:	781b      	ldrb	r3, [r3, #0]
    67a4:	b25b      	sxtb	r3, r3
    67a6:	4a87      	ldr	r2, [pc, #540]	; (69c4 <m2m_ip_cb+0x508>)
    67a8:	011b      	lsls	r3, r3, #4
    67aa:	18d3      	adds	r3, r2, r3
    67ac:	330c      	adds	r3, #12
    67ae:	2200      	movs	r2, #0
    67b0:	701a      	strb	r2, [r3, #0]

			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
    67b2:	23d2      	movs	r3, #210	; 0xd2
    67b4:	18fb      	adds	r3, r7, r3
    67b6:	2288      	movs	r2, #136	; 0x88
    67b8:	18ba      	adds	r2, r7, r2
    67ba:	8912      	ldrh	r2, [r2, #8]
    67bc:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
    67be:	23d0      	movs	r3, #208	; 0xd0
    67c0:	18fb      	adds	r3, r7, r3
    67c2:	2288      	movs	r2, #136	; 0x88
    67c4:	18ba      	adds	r2, r7, r2
    67c6:	8952      	ldrh	r2, [r2, #10]
    67c8:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
    67ca:	2388      	movs	r3, #136	; 0x88
    67cc:	18fb      	adds	r3, r7, r3
    67ce:	885a      	ldrh	r2, [r3, #2]
    67d0:	2370      	movs	r3, #112	; 0x70
    67d2:	18fb      	adds	r3, r7, r3
    67d4:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
    67d6:	2388      	movs	r3, #136	; 0x88
    67d8:	18fb      	adds	r3, r7, r3
    67da:	685a      	ldr	r2, [r3, #4]
    67dc:	2370      	movs	r3, #112	; 0x70
    67de:	18fb      	adds	r3, r7, r3
    67e0:	60da      	str	r2, [r3, #12]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    67e2:	23d5      	movs	r3, #213	; 0xd5
    67e4:	18fb      	adds	r3, r7, r3
    67e6:	781b      	ldrb	r3, [r3, #0]
    67e8:	b25b      	sxtb	r3, r3
    67ea:	4a76      	ldr	r2, [pc, #472]	; (69c4 <m2m_ip_cb+0x508>)
    67ec:	011b      	lsls	r3, r3, #4
    67ee:	18d3      	adds	r3, r2, r3
    67f0:	3306      	adds	r3, #6
    67f2:	881b      	ldrh	r3, [r3, #0]
    67f4:	b29b      	uxth	r3, r3
    67f6:	22d6      	movs	r2, #214	; 0xd6
    67f8:	18ba      	adds	r2, r7, r2
    67fa:	8812      	ldrh	r2, [r2, #0]
    67fc:	429a      	cmp	r2, r3
    67fe:	d148      	bne.n	6892 <m2m_ip_cb+0x3d6>
			{
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
    6800:	23d2      	movs	r3, #210	; 0xd2
    6802:	18fb      	adds	r3, r7, r3
    6804:	2200      	movs	r2, #0
    6806:	5e9b      	ldrsh	r3, [r3, r2]
    6808:	2b00      	cmp	r3, #0
    680a:	dd25      	ble.n	6858 <m2m_ip_cb+0x39c>
    680c:	23d2      	movs	r3, #210	; 0xd2
    680e:	18fb      	adds	r3, r7, r3
    6810:	2200      	movs	r2, #0
    6812:	5e9a      	ldrsh	r2, [r3, r2]
    6814:	1d3b      	adds	r3, r7, #4
    6816:	881b      	ldrh	r3, [r3, #0]
    6818:	429a      	cmp	r2, r3
    681a:	da1d      	bge.n	6858 <m2m_ip_cb+0x39c>
				{
					/* Skip incoming bytes until reaching the Start of Application Data. 
					*/
					u32Address += u16DataOffset;
    681c:	23d0      	movs	r3, #208	; 0xd0
    681e:	18fb      	adds	r3, r7, r3
    6820:	881b      	ldrh	r3, [r3, #0]
    6822:	683a      	ldr	r2, [r7, #0]
    6824:	18d3      	adds	r3, r2, r3
    6826:	603b      	str	r3, [r7, #0]

					/* Read the Application data and deliver it to the application callback in
					the given application buffer. If the buffer is smaller than the received data,
					the data is passed to the application in chunks according to its buffer size.
					*/
					u16ReadSize = (uint16)s16RecvStatus;
    6828:	23d8      	movs	r3, #216	; 0xd8
    682a:	18fb      	adds	r3, r7, r3
    682c:	22d2      	movs	r2, #210	; 0xd2
    682e:	18ba      	adds	r2, r7, r2
    6830:	8812      	ldrh	r2, [r2, #0]
    6832:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
    6834:	683c      	ldr	r4, [r7, #0]
    6836:	23df      	movs	r3, #223	; 0xdf
    6838:	18fb      	adds	r3, r7, r3
    683a:	781a      	ldrb	r2, [r3, #0]
    683c:	2370      	movs	r3, #112	; 0x70
    683e:	18f9      	adds	r1, r7, r3
    6840:	23d5      	movs	r3, #213	; 0xd5
    6842:	18fb      	adds	r3, r7, r3
    6844:	2000      	movs	r0, #0
    6846:	5618      	ldrsb	r0, [r3, r0]
    6848:	23d8      	movs	r3, #216	; 0xd8
    684a:	18fb      	adds	r3, r7, r3
    684c:	881b      	ldrh	r3, [r3, #0]
    684e:	9300      	str	r3, [sp, #0]
    6850:	0023      	movs	r3, r4
    6852:	4c5d      	ldr	r4, [pc, #372]	; (69c8 <m2m_ip_cb+0x50c>)
    6854:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    6856:	e0ab      	b.n	69b0 <m2m_ip_cb+0x4f4>
					u16ReadSize = (uint16)s16RecvStatus;
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
				}
				else
				{
					strRecvMsg.s16BufferSize	= s16RecvStatus;
    6858:	2370      	movs	r3, #112	; 0x70
    685a:	18fb      	adds	r3, r7, r3
    685c:	22d2      	movs	r2, #210	; 0xd2
    685e:	18ba      	adds	r2, r7, r2
    6860:	8812      	ldrh	r2, [r2, #0]
    6862:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
    6864:	2370      	movs	r3, #112	; 0x70
    6866:	18fb      	adds	r3, r7, r3
    6868:	2200      	movs	r2, #0
    686a:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
    686c:	4b57      	ldr	r3, [pc, #348]	; (69cc <m2m_ip_cb+0x510>)
    686e:	681b      	ldr	r3, [r3, #0]
    6870:	2b00      	cmp	r3, #0
    6872:	d100      	bne.n	6876 <m2m_ip_cb+0x3ba>
    6874:	e09c      	b.n	69b0 <m2m_ip_cb+0x4f4>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
    6876:	4b55      	ldr	r3, [pc, #340]	; (69cc <m2m_ip_cb+0x510>)
    6878:	681b      	ldr	r3, [r3, #0]
    687a:	2270      	movs	r2, #112	; 0x70
    687c:	18bc      	adds	r4, r7, r2
    687e:	22df      	movs	r2, #223	; 0xdf
    6880:	18ba      	adds	r2, r7, r2
    6882:	7811      	ldrb	r1, [r2, #0]
    6884:	22d5      	movs	r2, #213	; 0xd5
    6886:	18ba      	adds	r2, r7, r2
    6888:	2000      	movs	r0, #0
    688a:	5610      	ldrsb	r0, [r2, r0]
    688c:	0022      	movs	r2, r4
    688e:	4798      	blx	r3
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    6890:	e08e      	b.n	69b0 <m2m_ip_cb+0x4f4>
				}
			}
			else
			{
				M2M_DBG("Discard recv callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
				if(u16ReadSize < u16BufferSize)
    6892:	23d8      	movs	r3, #216	; 0xd8
    6894:	18fa      	adds	r2, r7, r3
    6896:	1d3b      	adds	r3, r7, #4
    6898:	8812      	ldrh	r2, [r2, #0]
    689a:	881b      	ldrh	r3, [r3, #0]
    689c:	429a      	cmp	r2, r3
    689e:	d300      	bcc.n	68a2 <m2m_ip_cb+0x3e6>
    68a0:	e086      	b.n	69b0 <m2m_ip_cb+0x4f4>
					hif_receive(0, NULL, 0, 1);
    68a2:	2301      	movs	r3, #1
    68a4:	2200      	movs	r2, #0
    68a6:	2100      	movs	r1, #0
    68a8:	2000      	movs	r0, #0
    68aa:	4c45      	ldr	r4, [pc, #276]	; (69c0 <m2m_ip_cb+0x504>)
    68ac:	47a0      	blx	r4
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    68ae:	e07f      	b.n	69b0 <m2m_ip_cb+0x4f4>
				if(u16ReadSize < u16BufferSize)
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
    68b0:	1dfb      	adds	r3, r7, #7
    68b2:	781b      	ldrb	r3, [r3, #0]
    68b4:	2b45      	cmp	r3, #69	; 0x45
    68b6:	d007      	beq.n	68c8 <m2m_ip_cb+0x40c>
    68b8:	1dfb      	adds	r3, r7, #7
    68ba:	781b      	ldrb	r3, [r3, #0]
    68bc:	2b47      	cmp	r3, #71	; 0x47
    68be:	d003      	beq.n	68c8 <m2m_ip_cb+0x40c>
    68c0:	1dfb      	adds	r3, r7, #7
    68c2:	781b      	ldrb	r3, [r3, #0]
    68c4:	2b4c      	cmp	r3, #76	; 0x4c
    68c6:	d14c      	bne.n	6962 <m2m_ip_cb+0x4a6>
	{
		SOCKET			sock;
		sint16			s16Rcvd;
		tstrSendReply	strReply;
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
    68c8:	23de      	movs	r3, #222	; 0xde
    68ca:	18fb      	adds	r3, r7, r3
    68cc:	2207      	movs	r2, #7
    68ce:	701a      	strb	r2, [r3, #0]

		if(u8OpCode == SOCKET_CMD_SENDTO)
    68d0:	1dfb      	adds	r3, r7, #7
    68d2:	781b      	ldrb	r3, [r3, #0]
    68d4:	2b47      	cmp	r3, #71	; 0x47
    68d6:	d103      	bne.n	68e0 <m2m_ip_cb+0x424>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
    68d8:	23de      	movs	r3, #222	; 0xde
    68da:	18fb      	adds	r3, r7, r3
    68dc:	2208      	movs	r2, #8
    68de:	701a      	strb	r2, [r3, #0]

		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
    68e0:	2364      	movs	r3, #100	; 0x64
    68e2:	18f9      	adds	r1, r7, r3
    68e4:	6838      	ldr	r0, [r7, #0]
    68e6:	2300      	movs	r3, #0
    68e8:	2208      	movs	r2, #8
    68ea:	4c35      	ldr	r4, [pc, #212]	; (69c0 <m2m_ip_cb+0x504>)
    68ec:	47a0      	blx	r4
    68ee:	1e03      	subs	r3, r0, #0
    68f0:	d160      	bne.n	69b4 <m2m_ip_cb+0x4f8>
		{
			uint16 u16SessionID = 0;
    68f2:	23dc      	movs	r3, #220	; 0xdc
    68f4:	18fb      	adds	r3, r7, r3
    68f6:	2200      	movs	r2, #0
    68f8:	801a      	strh	r2, [r3, #0]
			
			sock = strReply.sock;
    68fa:	23db      	movs	r3, #219	; 0xdb
    68fc:	18fb      	adds	r3, r7, r3
    68fe:	2264      	movs	r2, #100	; 0x64
    6900:	18ba      	adds	r2, r7, r2
    6902:	7812      	ldrb	r2, [r2, #0]
    6904:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
    6906:	23dc      	movs	r3, #220	; 0xdc
    6908:	18fb      	adds	r3, r7, r3
    690a:	2264      	movs	r2, #100	; 0x64
    690c:	18ba      	adds	r2, r7, r2
    690e:	8892      	ldrh	r2, [r2, #4]
    6910:	801a      	strh	r2, [r3, #0]
			M2M_DBG("send callback session ID = %d\r\n",u16SessionID);
			
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
    6912:	2364      	movs	r3, #100	; 0x64
    6914:	18fb      	adds	r3, r7, r3
    6916:	2202      	movs	r2, #2
    6918:	5e9a      	ldrsh	r2, [r3, r2]
    691a:	236e      	movs	r3, #110	; 0x6e
    691c:	18fb      	adds	r3, r7, r3
    691e:	801a      	strh	r2, [r3, #0]

			if(u16SessionID == gastrSockets[sock].u16SessionID)
    6920:	23db      	movs	r3, #219	; 0xdb
    6922:	18fb      	adds	r3, r7, r3
    6924:	781b      	ldrb	r3, [r3, #0]
    6926:	b25b      	sxtb	r3, r3
    6928:	4a26      	ldr	r2, [pc, #152]	; (69c4 <m2m_ip_cb+0x508>)
    692a:	011b      	lsls	r3, r3, #4
    692c:	18d3      	adds	r3, r2, r3
    692e:	3306      	adds	r3, #6
    6930:	881b      	ldrh	r3, [r3, #0]
    6932:	b29b      	uxth	r3, r3
    6934:	22dc      	movs	r2, #220	; 0xdc
    6936:	18ba      	adds	r2, r7, r2
    6938:	8812      	ldrh	r2, [r2, #0]
    693a:	429a      	cmp	r2, r3
    693c:	d13a      	bne.n	69b4 <m2m_ip_cb+0x4f8>
			{
				if(gpfAppSocketCb)
    693e:	4b23      	ldr	r3, [pc, #140]	; (69cc <m2m_ip_cb+0x510>)
    6940:	681b      	ldr	r3, [r3, #0]
    6942:	2b00      	cmp	r3, #0
    6944:	d036      	beq.n	69b4 <m2m_ip_cb+0x4f8>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
    6946:	4b21      	ldr	r3, [pc, #132]	; (69cc <m2m_ip_cb+0x510>)
    6948:	681b      	ldr	r3, [r3, #0]
    694a:	226e      	movs	r2, #110	; 0x6e
    694c:	18bc      	adds	r4, r7, r2
    694e:	22de      	movs	r2, #222	; 0xde
    6950:	18ba      	adds	r2, r7, r2
    6952:	7811      	ldrb	r1, [r2, #0]
    6954:	22db      	movs	r2, #219	; 0xdb
    6956:	18ba      	adds	r2, r7, r2
    6958:	2000      	movs	r0, #0
    695a:	5610      	ldrsb	r0, [r2, r0]
    695c:	0022      	movs	r2, r4
    695e:	4798      	blx	r3
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    6960:	e028      	b.n	69b4 <m2m_ip_cb+0x4f8>
			{
				M2M_DBG("Discard send callback %d %d \r\n",u16SessionID , gastrSockets[sock].u16SessionID);
			}
		}
	}
	else if(u8OpCode == SOCKET_CMD_PING)
    6962:	1dfb      	adds	r3, r7, #7
    6964:	781b      	ldrb	r3, [r3, #0]
    6966:	2b52      	cmp	r3, #82	; 0x52
    6968:	d125      	bne.n	69b6 <m2m_ip_cb+0x4fa>
	{
		tstrPingReply	strPingReply;
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
    696a:	2350      	movs	r3, #80	; 0x50
    696c:	18f9      	adds	r1, r7, r3
    696e:	6838      	ldr	r0, [r7, #0]
    6970:	2301      	movs	r3, #1
    6972:	2214      	movs	r2, #20
    6974:	4c12      	ldr	r4, [pc, #72]	; (69c0 <m2m_ip_cb+0x504>)
    6976:	47a0      	blx	r4
    6978:	1e03      	subs	r3, r0, #0
    697a:	d11c      	bne.n	69b6 <m2m_ip_cb+0x4fa>
		{
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
    697c:	2350      	movs	r3, #80	; 0x50
    697e:	18fb      	adds	r3, r7, r3
    6980:	685b      	ldr	r3, [r3, #4]
    6982:	001a      	movs	r2, r3
    6984:	4b12      	ldr	r3, [pc, #72]	; (69d0 <m2m_ip_cb+0x514>)
    6986:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
    6988:	4b11      	ldr	r3, [pc, #68]	; (69d0 <m2m_ip_cb+0x514>)
    698a:	681b      	ldr	r3, [r3, #0]
    698c:	2b00      	cmp	r3, #0
    698e:	d012      	beq.n	69b6 <m2m_ip_cb+0x4fa>
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
    6990:	4b0f      	ldr	r3, [pc, #60]	; (69d0 <m2m_ip_cb+0x514>)
    6992:	681c      	ldr	r4, [r3, #0]
    6994:	2350      	movs	r3, #80	; 0x50
    6996:	18fb      	adds	r3, r7, r3
    6998:	6818      	ldr	r0, [r3, #0]
    699a:	2350      	movs	r3, #80	; 0x50
    699c:	18fb      	adds	r3, r7, r3
    699e:	6899      	ldr	r1, [r3, #8]
    69a0:	2350      	movs	r3, #80	; 0x50
    69a2:	18fb      	adds	r3, r7, r3
    69a4:	7c1b      	ldrb	r3, [r3, #16]
    69a6:	001a      	movs	r2, r3
    69a8:	47a0      	blx	r4
			}
		}
	}
}
    69aa:	e004      	b.n	69b6 <m2m_ip_cb+0x4fa>
			if(gpfAppSocketCb)
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
		}
	}
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
	{
    69ac:	46c0      	nop			; (mov r8, r8)
    69ae:	e002      	b.n	69b6 <m2m_ip_cb+0x4fa>
			if(gpfAppResolveCb)
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
		}
	}
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
	{
    69b0:	46c0      	nop			; (mov r8, r8)
    69b2:	e000      	b.n	69b6 <m2m_ip_cb+0x4fa>
					hif_receive(0, NULL, 0, 1);
			}
		}
	}
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
	{
    69b4:	46c0      	nop			; (mov r8, r8)
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
    69b6:	46c0      	nop			; (mov r8, r8)
    69b8:	46bd      	mov	sp, r7
    69ba:	b039      	add	sp, #228	; 0xe4
    69bc:	bd90      	pop	{r4, r7, pc}
    69be:	46c0      	nop			; (mov r8, r8)
    69c0:	000033a5 	.word	0x000033a5
    69c4:	20004660 	.word	0x20004660
    69c8:	000062f1 	.word	0x000062f1
    69cc:	20004710 	.word	0x20004710
    69d0:	20004714 	.word	0x20004714

000069d4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
    69d4:	b580      	push	{r7, lr}
    69d6:	af00      	add	r7, sp, #0
	if(gbSocketInit==0)
    69d8:	4b0c      	ldr	r3, [pc, #48]	; (6a0c <socketInit+0x38>)
    69da:	781b      	ldrb	r3, [r3, #0]
    69dc:	b2db      	uxtb	r3, r3
    69de:	2b00      	cmp	r3, #0
    69e0:	d110      	bne.n	6a04 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
    69e2:	4b0b      	ldr	r3, [pc, #44]	; (6a10 <socketInit+0x3c>)
    69e4:	22b0      	movs	r2, #176	; 0xb0
    69e6:	2100      	movs	r1, #0
    69e8:	0018      	movs	r0, r3
    69ea:	4b0a      	ldr	r3, [pc, #40]	; (6a14 <socketInit+0x40>)
    69ec:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
    69ee:	4b0a      	ldr	r3, [pc, #40]	; (6a18 <socketInit+0x44>)
    69f0:	0019      	movs	r1, r3
    69f2:	2002      	movs	r0, #2
    69f4:	4b09      	ldr	r3, [pc, #36]	; (6a1c <socketInit+0x48>)
    69f6:	4798      	blx	r3
		gbSocketInit=1;
    69f8:	4b04      	ldr	r3, [pc, #16]	; (6a0c <socketInit+0x38>)
    69fa:	2201      	movs	r2, #1
    69fc:	701a      	strb	r2, [r3, #0]
		gu16SessionID = 0;
    69fe:	4b08      	ldr	r3, [pc, #32]	; (6a20 <socketInit+0x4c>)
    6a00:	2200      	movs	r2, #0
    6a02:	801a      	strh	r2, [r3, #0]
	}
}
    6a04:	46c0      	nop			; (mov r8, r8)
    6a06:	46bd      	mov	sp, r7
    6a08:	bd80      	pop	{r7, pc}
    6a0a:	46c0      	nop			; (mov r8, r8)
    6a0c:	200000ec 	.word	0x200000ec
    6a10:	20004660 	.word	0x20004660
    6a14:	000027e9 	.word	0x000027e9
    6a18:	000064bd 	.word	0x000064bd
    6a1c:	0000359d 	.word	0x0000359d
    6a20:	200000ea 	.word	0x200000ea

00006a24 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
    6a24:	b580      	push	{r7, lr}
    6a26:	b082      	sub	sp, #8
    6a28:	af00      	add	r7, sp, #0
    6a2a:	6078      	str	r0, [r7, #4]
    6a2c:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
    6a2e:	4b05      	ldr	r3, [pc, #20]	; (6a44 <registerSocketCallback+0x20>)
    6a30:	687a      	ldr	r2, [r7, #4]
    6a32:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
    6a34:	4b04      	ldr	r3, [pc, #16]	; (6a48 <registerSocketCallback+0x24>)
    6a36:	683a      	ldr	r2, [r7, #0]
    6a38:	601a      	str	r2, [r3, #0]
}
    6a3a:	46c0      	nop			; (mov r8, r8)
    6a3c:	46bd      	mov	sp, r7
    6a3e:	b002      	add	sp, #8
    6a40:	bd80      	pop	{r7, pc}
    6a42:	46c0      	nop			; (mov r8, r8)
    6a44:	20004710 	.word	0x20004710
    6a48:	20004718 	.word	0x20004718

00006a4c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    6a4c:	b590      	push	{r4, r7, lr}
    6a4e:	b08b      	sub	sp, #44	; 0x2c
    6a50:	af04      	add	r7, sp, #16
    6a52:	0004      	movs	r4, r0
    6a54:	0008      	movs	r0, r1
    6a56:	0011      	movs	r1, r2
    6a58:	1dbb      	adds	r3, r7, #6
    6a5a:	1c22      	adds	r2, r4, #0
    6a5c:	801a      	strh	r2, [r3, #0]
    6a5e:	1d7b      	adds	r3, r7, #5
    6a60:	1c02      	adds	r2, r0, #0
    6a62:	701a      	strb	r2, [r3, #0]
    6a64:	1d3b      	adds	r3, r7, #4
    6a66:	1c0a      	adds	r2, r1, #0
    6a68:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    6a6a:	2317      	movs	r3, #23
    6a6c:	18fb      	adds	r3, r7, r3
    6a6e:	22ff      	movs	r2, #255	; 0xff
    6a70:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    6a72:	2315      	movs	r3, #21
    6a74:	18fb      	adds	r3, r7, r3
    6a76:	220b      	movs	r2, #11
    6a78:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    6a7a:	1dbb      	adds	r3, r7, #6
    6a7c:	881b      	ldrh	r3, [r3, #0]
    6a7e:	2b02      	cmp	r3, #2
    6a80:	d000      	beq.n	6a84 <socket+0x38>
    6a82:	e07e      	b.n	6b82 <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    6a84:	1d7b      	adds	r3, r7, #5
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	2b01      	cmp	r3, #1
    6a8a:	d108      	bne.n	6a9e <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    6a8c:	2315      	movs	r3, #21
    6a8e:	18fb      	adds	r3, r7, r3
    6a90:	2207      	movs	r2, #7
    6a92:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    6a94:	2316      	movs	r3, #22
    6a96:	18fb      	adds	r3, r7, r3
    6a98:	2200      	movs	r2, #0
    6a9a:	701a      	strb	r2, [r3, #0]
    6a9c:	e067      	b.n	6b6e <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    6a9e:	1d7b      	adds	r3, r7, #5
    6aa0:	781b      	ldrb	r3, [r3, #0]
    6aa2:	2b02      	cmp	r3, #2
    6aa4:	d108      	bne.n	6ab8 <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    6aa6:	2315      	movs	r3, #21
    6aa8:	18fb      	adds	r3, r7, r3
    6aaa:	220b      	movs	r2, #11
    6aac:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    6aae:	2316      	movs	r3, #22
    6ab0:	18fb      	adds	r3, r7, r3
    6ab2:	2207      	movs	r2, #7
    6ab4:	701a      	strb	r2, [r3, #0]
    6ab6:	e05a      	b.n	6b6e <socket+0x122>
		}
		else
			return sock;
    6ab8:	2317      	movs	r3, #23
    6aba:	18fb      	adds	r3, r7, r3
    6abc:	781b      	ldrb	r3, [r3, #0]
    6abe:	b25b      	sxtb	r3, r3
    6ac0:	e063      	b.n	6b8a <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    6ac2:	2316      	movs	r3, #22
    6ac4:	18fb      	adds	r3, r7, r3
    6ac6:	781b      	ldrb	r3, [r3, #0]
    6ac8:	011a      	lsls	r2, r3, #4
    6aca:	4b32      	ldr	r3, [pc, #200]	; (6b94 <socket+0x148>)
    6acc:	18d3      	adds	r3, r2, r3
    6ace:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    6ad0:	693b      	ldr	r3, [r7, #16]
    6ad2:	7a9b      	ldrb	r3, [r3, #10]
    6ad4:	b2db      	uxtb	r3, r3
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d142      	bne.n	6b60 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    6ada:	693b      	ldr	r3, [r7, #16]
    6adc:	2210      	movs	r2, #16
    6ade:	2100      	movs	r1, #0
    6ae0:	0018      	movs	r0, r3
    6ae2:	4b2d      	ldr	r3, [pc, #180]	; (6b98 <socket+0x14c>)
    6ae4:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    6ae6:	693b      	ldr	r3, [r7, #16]
    6ae8:	2201      	movs	r2, #1
    6aea:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    6aec:	4b2b      	ldr	r3, [pc, #172]	; (6b9c <socket+0x150>)
    6aee:	881b      	ldrh	r3, [r3, #0]
    6af0:	b29b      	uxth	r3, r3
    6af2:	3301      	adds	r3, #1
    6af4:	b29a      	uxth	r2, r3
    6af6:	4b29      	ldr	r3, [pc, #164]	; (6b9c <socket+0x150>)
    6af8:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    6afa:	4b28      	ldr	r3, [pc, #160]	; (6b9c <socket+0x150>)
    6afc:	881b      	ldrh	r3, [r3, #0]
    6afe:	b29b      	uxth	r3, r3
    6b00:	2b00      	cmp	r3, #0
    6b02:	d106      	bne.n	6b12 <socket+0xc6>
					++gu16SessionID;
    6b04:	4b25      	ldr	r3, [pc, #148]	; (6b9c <socket+0x150>)
    6b06:	881b      	ldrh	r3, [r3, #0]
    6b08:	b29b      	uxth	r3, r3
    6b0a:	3301      	adds	r3, #1
    6b0c:	b29a      	uxth	r2, r3
    6b0e:	4b23      	ldr	r3, [pc, #140]	; (6b9c <socket+0x150>)
    6b10:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    6b12:	4b22      	ldr	r3, [pc, #136]	; (6b9c <socket+0x150>)
    6b14:	881b      	ldrh	r3, [r3, #0]
    6b16:	b29a      	uxth	r2, r3
    6b18:	693b      	ldr	r3, [r7, #16]
    6b1a:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    6b1c:	2317      	movs	r3, #23
    6b1e:	18fb      	adds	r3, r7, r3
    6b20:	2216      	movs	r2, #22
    6b22:	18ba      	adds	r2, r7, r2
    6b24:	7812      	ldrb	r2, [r2, #0]
    6b26:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    6b28:	1d3b      	adds	r3, r7, #4
    6b2a:	781b      	ldrb	r3, [r3, #0]
    6b2c:	2201      	movs	r2, #1
    6b2e:	4013      	ands	r3, r2
    6b30:	d026      	beq.n	6b80 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    6b32:	230c      	movs	r3, #12
    6b34:	18fb      	adds	r3, r7, r3
    6b36:	2217      	movs	r2, #23
    6b38:	18ba      	adds	r2, r7, r2
    6b3a:	7812      	ldrb	r2, [r2, #0]
    6b3c:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    6b3e:	693b      	ldr	r3, [r7, #16]
    6b40:	2221      	movs	r2, #33	; 0x21
    6b42:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    6b44:	230c      	movs	r3, #12
    6b46:	18fa      	adds	r2, r7, r3
    6b48:	2300      	movs	r3, #0
    6b4a:	9302      	str	r3, [sp, #8]
    6b4c:	2300      	movs	r3, #0
    6b4e:	9301      	str	r3, [sp, #4]
    6b50:	2300      	movs	r3, #0
    6b52:	9300      	str	r3, [sp, #0]
    6b54:	2304      	movs	r3, #4
    6b56:	2150      	movs	r1, #80	; 0x50
    6b58:	2002      	movs	r0, #2
    6b5a:	4c11      	ldr	r4, [pc, #68]	; (6ba0 <socket+0x154>)
    6b5c:	47a0      	blx	r4
				}
				break;
    6b5e:	e00f      	b.n	6b80 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    6b60:	2316      	movs	r3, #22
    6b62:	18fb      	adds	r3, r7, r3
    6b64:	781a      	ldrb	r2, [r3, #0]
    6b66:	2316      	movs	r3, #22
    6b68:	18fb      	adds	r3, r7, r3
    6b6a:	3201      	adds	r2, #1
    6b6c:	701a      	strb	r2, [r3, #0]
    6b6e:	2316      	movs	r3, #22
    6b70:	18fa      	adds	r2, r7, r3
    6b72:	2315      	movs	r3, #21
    6b74:	18fb      	adds	r3, r7, r3
    6b76:	7812      	ldrb	r2, [r2, #0]
    6b78:	781b      	ldrb	r3, [r3, #0]
    6b7a:	429a      	cmp	r2, r3
    6b7c:	d3a1      	bcc.n	6ac2 <socket+0x76>
    6b7e:	e000      	b.n	6b82 <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    6b80:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    6b82:	2317      	movs	r3, #23
    6b84:	18fb      	adds	r3, r7, r3
    6b86:	781b      	ldrb	r3, [r3, #0]
    6b88:	b25b      	sxtb	r3, r3
}
    6b8a:	0018      	movs	r0, r3
    6b8c:	46bd      	mov	sp, r7
    6b8e:	b007      	add	sp, #28
    6b90:	bd90      	pop	{r4, r7, pc}
    6b92:	46c0      	nop			; (mov r8, r8)
    6b94:	20004660 	.word	0x20004660
    6b98:	000027e9 	.word	0x000027e9
    6b9c:	200000ea 	.word	0x200000ea
    6ba0:	00002bc5 	.word	0x00002bc5

00006ba4 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    6ba4:	b5b0      	push	{r4, r5, r7, lr}
    6ba6:	b08a      	sub	sp, #40	; 0x28
    6ba8:	af04      	add	r7, sp, #16
    6baa:	6039      	str	r1, [r7, #0]
    6bac:	0011      	movs	r1, r2
    6bae:	1dfb      	adds	r3, r7, #7
    6bb0:	1c02      	adds	r2, r0, #0
    6bb2:	701a      	strb	r2, [r3, #0]
    6bb4:	1dbb      	adds	r3, r7, #6
    6bb6:	1c0a      	adds	r2, r1, #0
    6bb8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    6bba:	2317      	movs	r3, #23
    6bbc:	18fb      	adds	r3, r7, r3
    6bbe:	22fa      	movs	r2, #250	; 0xfa
    6bc0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    6bc2:	1dfb      	adds	r3, r7, #7
    6bc4:	781b      	ldrb	r3, [r3, #0]
    6bc6:	2b7f      	cmp	r3, #127	; 0x7f
    6bc8:	d867      	bhi.n	6c9a <connect+0xf6>
    6bca:	683b      	ldr	r3, [r7, #0]
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d064      	beq.n	6c9a <connect+0xf6>
    6bd0:	1dfb      	adds	r3, r7, #7
    6bd2:	781b      	ldrb	r3, [r3, #0]
    6bd4:	b25b      	sxtb	r3, r3
    6bd6:	4a35      	ldr	r2, [pc, #212]	; (6cac <connect+0x108>)
    6bd8:	011b      	lsls	r3, r3, #4
    6bda:	18d3      	adds	r3, r2, r3
    6bdc:	330a      	adds	r3, #10
    6bde:	781b      	ldrb	r3, [r3, #0]
    6be0:	b2db      	uxtb	r3, r3
    6be2:	2b01      	cmp	r3, #1
    6be4:	d159      	bne.n	6c9a <connect+0xf6>
    6be6:	1dbb      	adds	r3, r7, #6
    6be8:	781b      	ldrb	r3, [r3, #0]
    6bea:	2b00      	cmp	r3, #0
    6bec:	d055      	beq.n	6c9a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    6bee:	2316      	movs	r3, #22
    6bf0:	18fb      	adds	r3, r7, r3
    6bf2:	2244      	movs	r2, #68	; 0x44
    6bf4:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    6bf6:	1dfb      	adds	r3, r7, #7
    6bf8:	781b      	ldrb	r3, [r3, #0]
    6bfa:	b25b      	sxtb	r3, r3
    6bfc:	4a2b      	ldr	r2, [pc, #172]	; (6cac <connect+0x108>)
    6bfe:	011b      	lsls	r3, r3, #4
    6c00:	18d3      	adds	r3, r2, r3
    6c02:	330b      	adds	r3, #11
    6c04:	781b      	ldrb	r3, [r3, #0]
    6c06:	b2db      	uxtb	r3, r3
    6c08:	001a      	movs	r2, r3
    6c0a:	2301      	movs	r3, #1
    6c0c:	4013      	ands	r3, r2
    6c0e:	d00f      	beq.n	6c30 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    6c10:	2316      	movs	r3, #22
    6c12:	18fb      	adds	r3, r7, r3
    6c14:	224b      	movs	r2, #75	; 0x4b
    6c16:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    6c18:	1dfb      	adds	r3, r7, #7
    6c1a:	781b      	ldrb	r3, [r3, #0]
    6c1c:	b25b      	sxtb	r3, r3
    6c1e:	4a23      	ldr	r2, [pc, #140]	; (6cac <connect+0x108>)
    6c20:	011b      	lsls	r3, r3, #4
    6c22:	18d3      	adds	r3, r2, r3
    6c24:	330b      	adds	r3, #11
    6c26:	781b      	ldrb	r3, [r3, #0]
    6c28:	b2da      	uxtb	r2, r3
    6c2a:	2308      	movs	r3, #8
    6c2c:	18fb      	adds	r3, r7, r3
    6c2e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    6c30:	2308      	movs	r3, #8
    6c32:	18fb      	adds	r3, r7, r3
    6c34:	1dfa      	adds	r2, r7, #7
    6c36:	7812      	ldrb	r2, [r2, #0]
    6c38:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    6c3a:	6839      	ldr	r1, [r7, #0]
    6c3c:	2308      	movs	r3, #8
    6c3e:	18fb      	adds	r3, r7, r3
    6c40:	2208      	movs	r2, #8
    6c42:	0018      	movs	r0, r3
    6c44:	4b1a      	ldr	r3, [pc, #104]	; (6cb0 <connect+0x10c>)
    6c46:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    6c48:	1dfb      	adds	r3, r7, #7
    6c4a:	781b      	ldrb	r3, [r3, #0]
    6c4c:	b25b      	sxtb	r3, r3
    6c4e:	4a17      	ldr	r2, [pc, #92]	; (6cac <connect+0x108>)
    6c50:	011b      	lsls	r3, r3, #4
    6c52:	18d3      	adds	r3, r2, r3
    6c54:	3306      	adds	r3, #6
    6c56:	881b      	ldrh	r3, [r3, #0]
    6c58:	b29a      	uxth	r2, r3
    6c5a:	2308      	movs	r3, #8
    6c5c:	18fb      	adds	r3, r7, r3
    6c5e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    6c60:	2317      	movs	r3, #23
    6c62:	18fc      	adds	r4, r7, r3
    6c64:	2308      	movs	r3, #8
    6c66:	18fa      	adds	r2, r7, r3
    6c68:	2316      	movs	r3, #22
    6c6a:	18fb      	adds	r3, r7, r3
    6c6c:	7819      	ldrb	r1, [r3, #0]
    6c6e:	2300      	movs	r3, #0
    6c70:	9302      	str	r3, [sp, #8]
    6c72:	2300      	movs	r3, #0
    6c74:	9301      	str	r3, [sp, #4]
    6c76:	2300      	movs	r3, #0
    6c78:	9300      	str	r3, [sp, #0]
    6c7a:	230c      	movs	r3, #12
    6c7c:	2002      	movs	r0, #2
    6c7e:	4d0d      	ldr	r5, [pc, #52]	; (6cb4 <connect+0x110>)
    6c80:	47a8      	blx	r5
    6c82:	0003      	movs	r3, r0
    6c84:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    6c86:	2317      	movs	r3, #23
    6c88:	18fb      	adds	r3, r7, r3
    6c8a:	781b      	ldrb	r3, [r3, #0]
    6c8c:	b25b      	sxtb	r3, r3
    6c8e:	2b00      	cmp	r3, #0
    6c90:	d003      	beq.n	6c9a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    6c92:	2317      	movs	r3, #23
    6c94:	18fb      	adds	r3, r7, r3
    6c96:	22f7      	movs	r2, #247	; 0xf7
    6c98:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    6c9a:	2317      	movs	r3, #23
    6c9c:	18fb      	adds	r3, r7, r3
    6c9e:	781b      	ldrb	r3, [r3, #0]
    6ca0:	b25b      	sxtb	r3, r3
}
    6ca2:	0018      	movs	r0, r3
    6ca4:	46bd      	mov	sp, r7
    6ca6:	b006      	add	sp, #24
    6ca8:	bdb0      	pop	{r4, r5, r7, pc}
    6caa:	46c0      	nop			; (mov r8, r8)
    6cac:	20004660 	.word	0x20004660
    6cb0:	000027ad 	.word	0x000027ad
    6cb4:	00002bc5 	.word	0x00002bc5

00006cb8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    6cb8:	b590      	push	{r4, r7, lr}
    6cba:	b08f      	sub	sp, #60	; 0x3c
    6cbc:	af04      	add	r7, sp, #16
    6cbe:	0004      	movs	r4, r0
    6cc0:	60b9      	str	r1, [r7, #8]
    6cc2:	0010      	movs	r0, r2
    6cc4:	0019      	movs	r1, r3
    6cc6:	230f      	movs	r3, #15
    6cc8:	18fb      	adds	r3, r7, r3
    6cca:	1c22      	adds	r2, r4, #0
    6ccc:	701a      	strb	r2, [r3, #0]
    6cce:	230c      	movs	r3, #12
    6cd0:	18fb      	adds	r3, r7, r3
    6cd2:	1c02      	adds	r2, r0, #0
    6cd4:	801a      	strh	r2, [r3, #0]
    6cd6:	1dbb      	adds	r3, r7, #6
    6cd8:	1c0a      	adds	r2, r1, #0
    6cda:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    6cdc:	2326      	movs	r3, #38	; 0x26
    6cde:	18fb      	adds	r3, r7, r3
    6ce0:	2206      	movs	r2, #6
    6ce2:	4252      	negs	r2, r2
    6ce4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    6ce6:	230f      	movs	r3, #15
    6ce8:	18fb      	adds	r3, r7, r3
    6cea:	781b      	ldrb	r3, [r3, #0]
    6cec:	2b7f      	cmp	r3, #127	; 0x7f
    6cee:	d900      	bls.n	6cf2 <send+0x3a>
    6cf0:	e087      	b.n	6e02 <send+0x14a>
    6cf2:	68bb      	ldr	r3, [r7, #8]
    6cf4:	2b00      	cmp	r3, #0
    6cf6:	d100      	bne.n	6cfa <send+0x42>
    6cf8:	e083      	b.n	6e02 <send+0x14a>
    6cfa:	230c      	movs	r3, #12
    6cfc:	18fb      	adds	r3, r7, r3
    6cfe:	881a      	ldrh	r2, [r3, #0]
    6d00:	23af      	movs	r3, #175	; 0xaf
    6d02:	00db      	lsls	r3, r3, #3
    6d04:	429a      	cmp	r2, r3
    6d06:	d900      	bls.n	6d0a <send+0x52>
    6d08:	e07b      	b.n	6e02 <send+0x14a>
    6d0a:	230f      	movs	r3, #15
    6d0c:	18fb      	adds	r3, r7, r3
    6d0e:	781b      	ldrb	r3, [r3, #0]
    6d10:	b25b      	sxtb	r3, r3
    6d12:	4a40      	ldr	r2, [pc, #256]	; (6e14 <send+0x15c>)
    6d14:	011b      	lsls	r3, r3, #4
    6d16:	18d3      	adds	r3, r2, r3
    6d18:	330a      	adds	r3, #10
    6d1a:	781b      	ldrb	r3, [r3, #0]
    6d1c:	b2db      	uxtb	r3, r3
    6d1e:	2b01      	cmp	r3, #1
    6d20:	d16f      	bne.n	6e02 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    6d22:	2323      	movs	r3, #35	; 0x23
    6d24:	18fb      	adds	r3, r7, r3
    6d26:	2245      	movs	r2, #69	; 0x45
    6d28:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    6d2a:	2324      	movs	r3, #36	; 0x24
    6d2c:	18fb      	adds	r3, r7, r3
    6d2e:	2250      	movs	r2, #80	; 0x50
    6d30:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    6d32:	2310      	movs	r3, #16
    6d34:	18fb      	adds	r3, r7, r3
    6d36:	220f      	movs	r2, #15
    6d38:	18ba      	adds	r2, r7, r2
    6d3a:	7812      	ldrb	r2, [r2, #0]
    6d3c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    6d3e:	2310      	movs	r3, #16
    6d40:	18fb      	adds	r3, r7, r3
    6d42:	220c      	movs	r2, #12
    6d44:	18ba      	adds	r2, r7, r2
    6d46:	8812      	ldrh	r2, [r2, #0]
    6d48:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    6d4a:	230f      	movs	r3, #15
    6d4c:	18fb      	adds	r3, r7, r3
    6d4e:	781b      	ldrb	r3, [r3, #0]
    6d50:	b25b      	sxtb	r3, r3
    6d52:	4a30      	ldr	r2, [pc, #192]	; (6e14 <send+0x15c>)
    6d54:	011b      	lsls	r3, r3, #4
    6d56:	18d3      	adds	r3, r2, r3
    6d58:	3306      	adds	r3, #6
    6d5a:	881b      	ldrh	r3, [r3, #0]
    6d5c:	b29a      	uxth	r2, r3
    6d5e:	2310      	movs	r3, #16
    6d60:	18fb      	adds	r3, r7, r3
    6d62:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    6d64:	230f      	movs	r3, #15
    6d66:	18fb      	adds	r3, r7, r3
    6d68:	781b      	ldrb	r3, [r3, #0]
    6d6a:	b25b      	sxtb	r3, r3
    6d6c:	2b06      	cmp	r3, #6
    6d6e:	dd03      	ble.n	6d78 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    6d70:	2324      	movs	r3, #36	; 0x24
    6d72:	18fb      	adds	r3, r7, r3
    6d74:	2244      	movs	r2, #68	; 0x44
    6d76:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6d78:	230f      	movs	r3, #15
    6d7a:	18fb      	adds	r3, r7, r3
    6d7c:	781b      	ldrb	r3, [r3, #0]
    6d7e:	b25b      	sxtb	r3, r3
    6d80:	4a24      	ldr	r2, [pc, #144]	; (6e14 <send+0x15c>)
    6d82:	011b      	lsls	r3, r3, #4
    6d84:	18d3      	adds	r3, r2, r3
    6d86:	330b      	adds	r3, #11
    6d88:	781b      	ldrb	r3, [r3, #0]
    6d8a:	b2db      	uxtb	r3, r3
    6d8c:	001a      	movs	r2, r3
    6d8e:	2301      	movs	r3, #1
    6d90:	4013      	ands	r3, r2
    6d92:	d00f      	beq.n	6db4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    6d94:	2323      	movs	r3, #35	; 0x23
    6d96:	18fb      	adds	r3, r7, r3
    6d98:	224c      	movs	r2, #76	; 0x4c
    6d9a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    6d9c:	230f      	movs	r3, #15
    6d9e:	18fb      	adds	r3, r7, r3
    6da0:	2200      	movs	r2, #0
    6da2:	569a      	ldrsb	r2, [r3, r2]
    6da4:	2324      	movs	r3, #36	; 0x24
    6da6:	18fb      	adds	r3, r7, r3
    6da8:	491a      	ldr	r1, [pc, #104]	; (6e14 <send+0x15c>)
    6daa:	0112      	lsls	r2, r2, #4
    6dac:	188a      	adds	r2, r1, r2
    6dae:	3208      	adds	r2, #8
    6db0:	8812      	ldrh	r2, [r2, #0]
    6db2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    6db4:	2323      	movs	r3, #35	; 0x23
    6db6:	18fb      	adds	r3, r7, r3
    6db8:	781b      	ldrb	r3, [r3, #0]
    6dba:	2280      	movs	r2, #128	; 0x80
    6dbc:	4252      	negs	r2, r2
    6dbe:	4313      	orrs	r3, r2
    6dc0:	b2d9      	uxtb	r1, r3
    6dc2:	2310      	movs	r3, #16
    6dc4:	18fa      	adds	r2, r7, r3
    6dc6:	2324      	movs	r3, #36	; 0x24
    6dc8:	18fb      	adds	r3, r7, r3
    6dca:	881b      	ldrh	r3, [r3, #0]
    6dcc:	9302      	str	r3, [sp, #8]
    6dce:	230c      	movs	r3, #12
    6dd0:	18fb      	adds	r3, r7, r3
    6dd2:	881b      	ldrh	r3, [r3, #0]
    6dd4:	9301      	str	r3, [sp, #4]
    6dd6:	68bb      	ldr	r3, [r7, #8]
    6dd8:	9300      	str	r3, [sp, #0]
    6dda:	2310      	movs	r3, #16
    6ddc:	2002      	movs	r0, #2
    6dde:	4c0e      	ldr	r4, [pc, #56]	; (6e18 <send+0x160>)
    6de0:	47a0      	blx	r4
    6de2:	0003      	movs	r3, r0
    6de4:	001a      	movs	r2, r3
    6de6:	2326      	movs	r3, #38	; 0x26
    6de8:	18fb      	adds	r3, r7, r3
    6dea:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    6dec:	2326      	movs	r3, #38	; 0x26
    6dee:	18fb      	adds	r3, r7, r3
    6df0:	2200      	movs	r2, #0
    6df2:	5e9b      	ldrsh	r3, [r3, r2]
    6df4:	2b00      	cmp	r3, #0
    6df6:	d004      	beq.n	6e02 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    6df8:	2326      	movs	r3, #38	; 0x26
    6dfa:	18fb      	adds	r3, r7, r3
    6dfc:	220e      	movs	r2, #14
    6dfe:	4252      	negs	r2, r2
    6e00:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    6e02:	2326      	movs	r3, #38	; 0x26
    6e04:	18fb      	adds	r3, r7, r3
    6e06:	2200      	movs	r2, #0
    6e08:	5e9b      	ldrsh	r3, [r3, r2]
}
    6e0a:	0018      	movs	r0, r3
    6e0c:	46bd      	mov	sp, r7
    6e0e:	b00b      	add	sp, #44	; 0x2c
    6e10:	bd90      	pop	{r4, r7, pc}
    6e12:	46c0      	nop			; (mov r8, r8)
    6e14:	20004660 	.word	0x20004660
    6e18:	00002bc5 	.word	0x00002bc5

00006e1c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    6e1c:	b590      	push	{r4, r7, lr}
    6e1e:	b08d      	sub	sp, #52	; 0x34
    6e20:	af04      	add	r7, sp, #16
    6e22:	60b9      	str	r1, [r7, #8]
    6e24:	0011      	movs	r1, r2
    6e26:	607b      	str	r3, [r7, #4]
    6e28:	230f      	movs	r3, #15
    6e2a:	18fb      	adds	r3, r7, r3
    6e2c:	1c02      	adds	r2, r0, #0
    6e2e:	701a      	strb	r2, [r3, #0]
    6e30:	230c      	movs	r3, #12
    6e32:	18fb      	adds	r3, r7, r3
    6e34:	1c0a      	adds	r2, r1, #0
    6e36:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    6e38:	231e      	movs	r3, #30
    6e3a:	18fb      	adds	r3, r7, r3
    6e3c:	2206      	movs	r2, #6
    6e3e:	4252      	negs	r2, r2
    6e40:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    6e42:	230f      	movs	r3, #15
    6e44:	18fb      	adds	r3, r7, r3
    6e46:	781b      	ldrb	r3, [r3, #0]
    6e48:	2b7f      	cmp	r3, #127	; 0x7f
    6e4a:	d900      	bls.n	6e4e <recv+0x32>
    6e4c:	e099      	b.n	6f82 <recv+0x166>
    6e4e:	68bb      	ldr	r3, [r7, #8]
    6e50:	2b00      	cmp	r3, #0
    6e52:	d100      	bne.n	6e56 <recv+0x3a>
    6e54:	e095      	b.n	6f82 <recv+0x166>
    6e56:	230c      	movs	r3, #12
    6e58:	18fb      	adds	r3, r7, r3
    6e5a:	881b      	ldrh	r3, [r3, #0]
    6e5c:	2b00      	cmp	r3, #0
    6e5e:	d100      	bne.n	6e62 <recv+0x46>
    6e60:	e08f      	b.n	6f82 <recv+0x166>
    6e62:	230f      	movs	r3, #15
    6e64:	18fb      	adds	r3, r7, r3
    6e66:	781b      	ldrb	r3, [r3, #0]
    6e68:	b25b      	sxtb	r3, r3
    6e6a:	4a4a      	ldr	r2, [pc, #296]	; (6f94 <recv+0x178>)
    6e6c:	011b      	lsls	r3, r3, #4
    6e6e:	18d3      	adds	r3, r2, r3
    6e70:	330a      	adds	r3, #10
    6e72:	781b      	ldrb	r3, [r3, #0]
    6e74:	b2db      	uxtb	r3, r3
    6e76:	2b01      	cmp	r3, #1
    6e78:	d000      	beq.n	6e7c <recv+0x60>
    6e7a:	e082      	b.n	6f82 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    6e7c:	231e      	movs	r3, #30
    6e7e:	18fb      	adds	r3, r7, r3
    6e80:	2200      	movs	r2, #0
    6e82:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    6e84:	230f      	movs	r3, #15
    6e86:	18fb      	adds	r3, r7, r3
    6e88:	2200      	movs	r2, #0
    6e8a:	569a      	ldrsb	r2, [r3, r2]
    6e8c:	4b41      	ldr	r3, [pc, #260]	; (6f94 <recv+0x178>)
    6e8e:	0112      	lsls	r2, r2, #4
    6e90:	68b9      	ldr	r1, [r7, #8]
    6e92:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    6e94:	230f      	movs	r3, #15
    6e96:	18fb      	adds	r3, r7, r3
    6e98:	781b      	ldrb	r3, [r3, #0]
    6e9a:	b25b      	sxtb	r3, r3
    6e9c:	4a3d      	ldr	r2, [pc, #244]	; (6f94 <recv+0x178>)
    6e9e:	011b      	lsls	r3, r3, #4
    6ea0:	18d3      	adds	r3, r2, r3
    6ea2:	3304      	adds	r3, #4
    6ea4:	220c      	movs	r2, #12
    6ea6:	18ba      	adds	r2, r7, r2
    6ea8:	8812      	ldrh	r2, [r2, #0]
    6eaa:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    6eac:	230f      	movs	r3, #15
    6eae:	18fb      	adds	r3, r7, r3
    6eb0:	781b      	ldrb	r3, [r3, #0]
    6eb2:	b25b      	sxtb	r3, r3
    6eb4:	4a37      	ldr	r2, [pc, #220]	; (6f94 <recv+0x178>)
    6eb6:	011b      	lsls	r3, r3, #4
    6eb8:	18d3      	adds	r3, r2, r3
    6eba:	330c      	adds	r3, #12
    6ebc:	781b      	ldrb	r3, [r3, #0]
    6ebe:	b2db      	uxtb	r3, r3
    6ec0:	2b00      	cmp	r3, #0
    6ec2:	d15e      	bne.n	6f82 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    6ec4:	231d      	movs	r3, #29
    6ec6:	18fb      	adds	r3, r7, r3
    6ec8:	2246      	movs	r2, #70	; 0x46
    6eca:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    6ecc:	230f      	movs	r3, #15
    6ece:	18fb      	adds	r3, r7, r3
    6ed0:	781b      	ldrb	r3, [r3, #0]
    6ed2:	b25b      	sxtb	r3, r3
    6ed4:	4a2f      	ldr	r2, [pc, #188]	; (6f94 <recv+0x178>)
    6ed6:	011b      	lsls	r3, r3, #4
    6ed8:	18d3      	adds	r3, r2, r3
    6eda:	330c      	adds	r3, #12
    6edc:	2201      	movs	r2, #1
    6ede:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    6ee0:	230f      	movs	r3, #15
    6ee2:	18fb      	adds	r3, r7, r3
    6ee4:	781b      	ldrb	r3, [r3, #0]
    6ee6:	b25b      	sxtb	r3, r3
    6ee8:	4a2a      	ldr	r2, [pc, #168]	; (6f94 <recv+0x178>)
    6eea:	011b      	lsls	r3, r3, #4
    6eec:	18d3      	adds	r3, r2, r3
    6eee:	330b      	adds	r3, #11
    6ef0:	781b      	ldrb	r3, [r3, #0]
    6ef2:	b2db      	uxtb	r3, r3
    6ef4:	001a      	movs	r2, r3
    6ef6:	2301      	movs	r3, #1
    6ef8:	4013      	ands	r3, r2
    6efa:	d003      	beq.n	6f04 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    6efc:	231d      	movs	r3, #29
    6efe:	18fb      	adds	r3, r7, r3
    6f00:	224d      	movs	r2, #77	; 0x4d
    6f02:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    6f04:	687b      	ldr	r3, [r7, #4]
    6f06:	2b00      	cmp	r3, #0
    6f08:	d105      	bne.n	6f16 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    6f0a:	2314      	movs	r3, #20
    6f0c:	18fb      	adds	r3, r7, r3
    6f0e:	2201      	movs	r2, #1
    6f10:	4252      	negs	r2, r2
    6f12:	601a      	str	r2, [r3, #0]
    6f14:	e003      	b.n	6f1e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    6f16:	2314      	movs	r3, #20
    6f18:	18fb      	adds	r3, r7, r3
    6f1a:	687a      	ldr	r2, [r7, #4]
    6f1c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    6f1e:	2314      	movs	r3, #20
    6f20:	18fb      	adds	r3, r7, r3
    6f22:	220f      	movs	r2, #15
    6f24:	18ba      	adds	r2, r7, r2
    6f26:	7812      	ldrb	r2, [r2, #0]
    6f28:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    6f2a:	230f      	movs	r3, #15
    6f2c:	18fb      	adds	r3, r7, r3
    6f2e:	781b      	ldrb	r3, [r3, #0]
    6f30:	b25b      	sxtb	r3, r3
    6f32:	4a18      	ldr	r2, [pc, #96]	; (6f94 <recv+0x178>)
    6f34:	011b      	lsls	r3, r3, #4
    6f36:	18d3      	adds	r3, r2, r3
    6f38:	3306      	adds	r3, #6
    6f3a:	881b      	ldrh	r3, [r3, #0]
    6f3c:	b29a      	uxth	r2, r3
    6f3e:	2314      	movs	r3, #20
    6f40:	18fb      	adds	r3, r7, r3
    6f42:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    6f44:	2314      	movs	r3, #20
    6f46:	18fa      	adds	r2, r7, r3
    6f48:	231d      	movs	r3, #29
    6f4a:	18fb      	adds	r3, r7, r3
    6f4c:	7819      	ldrb	r1, [r3, #0]
    6f4e:	2300      	movs	r3, #0
    6f50:	9302      	str	r3, [sp, #8]
    6f52:	2300      	movs	r3, #0
    6f54:	9301      	str	r3, [sp, #4]
    6f56:	2300      	movs	r3, #0
    6f58:	9300      	str	r3, [sp, #0]
    6f5a:	2308      	movs	r3, #8
    6f5c:	2002      	movs	r0, #2
    6f5e:	4c0e      	ldr	r4, [pc, #56]	; (6f98 <recv+0x17c>)
    6f60:	47a0      	blx	r4
    6f62:	0003      	movs	r3, r0
    6f64:	001a      	movs	r2, r3
    6f66:	231e      	movs	r3, #30
    6f68:	18fb      	adds	r3, r7, r3
    6f6a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    6f6c:	231e      	movs	r3, #30
    6f6e:	18fb      	adds	r3, r7, r3
    6f70:	2200      	movs	r2, #0
    6f72:	5e9b      	ldrsh	r3, [r3, r2]
    6f74:	2b00      	cmp	r3, #0
    6f76:	d004      	beq.n	6f82 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    6f78:	231e      	movs	r3, #30
    6f7a:	18fb      	adds	r3, r7, r3
    6f7c:	220e      	movs	r2, #14
    6f7e:	4252      	negs	r2, r2
    6f80:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    6f82:	231e      	movs	r3, #30
    6f84:	18fb      	adds	r3, r7, r3
    6f86:	2200      	movs	r2, #0
    6f88:	5e9b      	ldrsh	r3, [r3, r2]
}
    6f8a:	0018      	movs	r0, r3
    6f8c:	46bd      	mov	sp, r7
    6f8e:	b009      	add	sp, #36	; 0x24
    6f90:	bd90      	pop	{r4, r7, pc}
    6f92:	46c0      	nop			; (mov r8, r8)
    6f94:	20004660 	.word	0x20004660
    6f98:	00002bc5 	.word	0x00002bc5

00006f9c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    6f9c:	b5b0      	push	{r4, r5, r7, lr}
    6f9e:	b088      	sub	sp, #32
    6fa0:	af04      	add	r7, sp, #16
    6fa2:	0002      	movs	r2, r0
    6fa4:	1dfb      	adds	r3, r7, #7
    6fa6:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    6fa8:	230f      	movs	r3, #15
    6faa:	18fb      	adds	r3, r7, r3
    6fac:	22fa      	movs	r2, #250	; 0xfa
    6fae:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    6fb0:	1dfb      	adds	r3, r7, #7
    6fb2:	781b      	ldrb	r3, [r3, #0]
    6fb4:	2b7f      	cmp	r3, #127	; 0x7f
    6fb6:	d86a      	bhi.n	708e <close+0xf2>
    6fb8:	1dfb      	adds	r3, r7, #7
    6fba:	781b      	ldrb	r3, [r3, #0]
    6fbc:	b25b      	sxtb	r3, r3
    6fbe:	4a38      	ldr	r2, [pc, #224]	; (70a0 <close+0x104>)
    6fc0:	011b      	lsls	r3, r3, #4
    6fc2:	18d3      	adds	r3, r2, r3
    6fc4:	330a      	adds	r3, #10
    6fc6:	781b      	ldrb	r3, [r3, #0]
    6fc8:	b2db      	uxtb	r3, r3
    6fca:	2b01      	cmp	r3, #1
    6fcc:	d15f      	bne.n	708e <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    6fce:	230e      	movs	r3, #14
    6fd0:	18fb      	adds	r3, r7, r3
    6fd2:	2249      	movs	r2, #73	; 0x49
    6fd4:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    6fd6:	2308      	movs	r3, #8
    6fd8:	18fb      	adds	r3, r7, r3
    6fda:	1dfa      	adds	r2, r7, #7
    6fdc:	7812      	ldrb	r2, [r2, #0]
    6fde:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    6fe0:	1dfb      	adds	r3, r7, #7
    6fe2:	781b      	ldrb	r3, [r3, #0]
    6fe4:	b25b      	sxtb	r3, r3
    6fe6:	4a2e      	ldr	r2, [pc, #184]	; (70a0 <close+0x104>)
    6fe8:	011b      	lsls	r3, r3, #4
    6fea:	18d3      	adds	r3, r2, r3
    6fec:	3306      	adds	r3, #6
    6fee:	881b      	ldrh	r3, [r3, #0]
    6ff0:	b29a      	uxth	r2, r3
    6ff2:	2308      	movs	r3, #8
    6ff4:	18fb      	adds	r3, r7, r3
    6ff6:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    6ff8:	1dfb      	adds	r3, r7, #7
    6ffa:	781b      	ldrb	r3, [r3, #0]
    6ffc:	b25b      	sxtb	r3, r3
    6ffe:	4a28      	ldr	r2, [pc, #160]	; (70a0 <close+0x104>)
    7000:	011b      	lsls	r3, r3, #4
    7002:	18d3      	adds	r3, r2, r3
    7004:	330a      	adds	r3, #10
    7006:	2200      	movs	r2, #0
    7008:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    700a:	1dfb      	adds	r3, r7, #7
    700c:	781b      	ldrb	r3, [r3, #0]
    700e:	b25b      	sxtb	r3, r3
    7010:	4a23      	ldr	r2, [pc, #140]	; (70a0 <close+0x104>)
    7012:	011b      	lsls	r3, r3, #4
    7014:	18d3      	adds	r3, r2, r3
    7016:	3306      	adds	r3, #6
    7018:	2200      	movs	r2, #0
    701a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    701c:	1dfb      	adds	r3, r7, #7
    701e:	781b      	ldrb	r3, [r3, #0]
    7020:	b25b      	sxtb	r3, r3
    7022:	4a1f      	ldr	r2, [pc, #124]	; (70a0 <close+0x104>)
    7024:	011b      	lsls	r3, r3, #4
    7026:	18d3      	adds	r3, r2, r3
    7028:	330b      	adds	r3, #11
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	b2db      	uxtb	r3, r3
    702e:	001a      	movs	r2, r3
    7030:	2301      	movs	r3, #1
    7032:	4013      	ands	r3, r2
    7034:	d003      	beq.n	703e <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    7036:	230e      	movs	r3, #14
    7038:	18fb      	adds	r3, r7, r3
    703a:	224e      	movs	r2, #78	; 0x4e
    703c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    703e:	230f      	movs	r3, #15
    7040:	18fc      	adds	r4, r7, r3
    7042:	2308      	movs	r3, #8
    7044:	18fa      	adds	r2, r7, r3
    7046:	230e      	movs	r3, #14
    7048:	18fb      	adds	r3, r7, r3
    704a:	7819      	ldrb	r1, [r3, #0]
    704c:	2300      	movs	r3, #0
    704e:	9302      	str	r3, [sp, #8]
    7050:	2300      	movs	r3, #0
    7052:	9301      	str	r3, [sp, #4]
    7054:	2300      	movs	r3, #0
    7056:	9300      	str	r3, [sp, #0]
    7058:	2304      	movs	r3, #4
    705a:	2002      	movs	r0, #2
    705c:	4d11      	ldr	r5, [pc, #68]	; (70a4 <close+0x108>)
    705e:	47a8      	blx	r5
    7060:	0003      	movs	r3, r0
    7062:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    7064:	230f      	movs	r3, #15
    7066:	18fb      	adds	r3, r7, r3
    7068:	781b      	ldrb	r3, [r3, #0]
    706a:	b25b      	sxtb	r3, r3
    706c:	2b00      	cmp	r3, #0
    706e:	d003      	beq.n	7078 <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    7070:	230f      	movs	r3, #15
    7072:	18fb      	adds	r3, r7, r3
    7074:	22f7      	movs	r2, #247	; 0xf7
    7076:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    7078:	1dfb      	adds	r3, r7, #7
    707a:	781b      	ldrb	r3, [r3, #0]
    707c:	b25b      	sxtb	r3, r3
    707e:	011a      	lsls	r2, r3, #4
    7080:	4b07      	ldr	r3, [pc, #28]	; (70a0 <close+0x104>)
    7082:	18d3      	adds	r3, r2, r3
    7084:	2210      	movs	r2, #16
    7086:	2100      	movs	r1, #0
    7088:	0018      	movs	r0, r3
    708a:	4b07      	ldr	r3, [pc, #28]	; (70a8 <close+0x10c>)
    708c:	4798      	blx	r3
	}
	return s8Ret;
    708e:	230f      	movs	r3, #15
    7090:	18fb      	adds	r3, r7, r3
    7092:	781b      	ldrb	r3, [r3, #0]
    7094:	b25b      	sxtb	r3, r3
}
    7096:	0018      	movs	r0, r3
    7098:	46bd      	mov	sp, r7
    709a:	b004      	add	sp, #16
    709c:	bdb0      	pop	{r4, r5, r7, pc}
    709e:	46c0      	nop			; (mov r8, r8)
    70a0:	20004660 	.word	0x20004660
    70a4:	00002bc5 	.word	0x00002bc5
    70a8:	000027e9 	.word	0x000027e9

000070ac <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    70ac:	b5b0      	push	{r4, r5, r7, lr}
    70ae:	b088      	sub	sp, #32
    70b0:	af04      	add	r7, sp, #16
    70b2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    70b4:	230f      	movs	r3, #15
    70b6:	18fb      	adds	r3, r7, r3
    70b8:	22fa      	movs	r2, #250	; 0xfa
    70ba:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    70bc:	687b      	ldr	r3, [r7, #4]
    70be:	0018      	movs	r0, r3
    70c0:	4b19      	ldr	r3, [pc, #100]	; (7128 <gethostbyname+0x7c>)
    70c2:	4798      	blx	r3
    70c4:	0003      	movs	r3, r0
    70c6:	001a      	movs	r2, r3
    70c8:	230e      	movs	r3, #14
    70ca:	18fb      	adds	r3, r7, r3
    70cc:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    70ce:	230e      	movs	r3, #14
    70d0:	18fb      	adds	r3, r7, r3
    70d2:	781b      	ldrb	r3, [r3, #0]
    70d4:	2b40      	cmp	r3, #64	; 0x40
    70d6:	d81f      	bhi.n	7118 <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    70d8:	230e      	movs	r3, #14
    70da:	18fb      	adds	r3, r7, r3
    70dc:	781b      	ldrb	r3, [r3, #0]
    70de:	b29b      	uxth	r3, r3
    70e0:	3301      	adds	r3, #1
    70e2:	b299      	uxth	r1, r3
    70e4:	230f      	movs	r3, #15
    70e6:	18fc      	adds	r4, r7, r3
    70e8:	687a      	ldr	r2, [r7, #4]
    70ea:	2300      	movs	r3, #0
    70ec:	9302      	str	r3, [sp, #8]
    70ee:	2300      	movs	r3, #0
    70f0:	9301      	str	r3, [sp, #4]
    70f2:	2300      	movs	r3, #0
    70f4:	9300      	str	r3, [sp, #0]
    70f6:	000b      	movs	r3, r1
    70f8:	21ca      	movs	r1, #202	; 0xca
    70fa:	2002      	movs	r0, #2
    70fc:	4d0b      	ldr	r5, [pc, #44]	; (712c <gethostbyname+0x80>)
    70fe:	47a8      	blx	r5
    7100:	0003      	movs	r3, r0
    7102:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    7104:	230f      	movs	r3, #15
    7106:	18fb      	adds	r3, r7, r3
    7108:	781b      	ldrb	r3, [r3, #0]
    710a:	b25b      	sxtb	r3, r3
    710c:	2b00      	cmp	r3, #0
    710e:	d003      	beq.n	7118 <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    7110:	230f      	movs	r3, #15
    7112:	18fb      	adds	r3, r7, r3
    7114:	22f7      	movs	r2, #247	; 0xf7
    7116:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    7118:	230f      	movs	r3, #15
    711a:	18fb      	adds	r3, r7, r3
    711c:	781b      	ldrb	r3, [r3, #0]
    711e:	b25b      	sxtb	r3, r3
}
    7120:	0018      	movs	r0, r3
    7122:	46bd      	mov	sp, r7
    7124:	b004      	add	sp, #16
    7126:	bdb0      	pop	{r4, r5, r7, pc}
    7128:	00002829 	.word	0x00002829
    712c:	00002bc5 	.word	0x00002bc5

00007130 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
    7130:	b580      	push	{r7, lr}
    7132:	b082      	sub	sp, #8
    7134:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    7136:	003b      	movs	r3, r7
    7138:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
    713a:	687b      	ldr	r3, [r7, #4]
    713c:	22b9      	movs	r2, #185	; 0xb9
    713e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    7140:	4b13      	ldr	r3, [pc, #76]	; (7190 <spi_flash_enter_low_power_mode+0x60>)
    7142:	2100      	movs	r1, #0
    7144:	0018      	movs	r0, r3
    7146:	4b13      	ldr	r3, [pc, #76]	; (7194 <spi_flash_enter_low_power_mode+0x64>)
    7148:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    714a:	687b      	ldr	r3, [r7, #4]
    714c:	781b      	ldrb	r3, [r3, #0]
    714e:	001a      	movs	r2, r3
    7150:	4b11      	ldr	r3, [pc, #68]	; (7198 <spi_flash_enter_low_power_mode+0x68>)
    7152:	0011      	movs	r1, r2
    7154:	0018      	movs	r0, r3
    7156:	4b0f      	ldr	r3, [pc, #60]	; (7194 <spi_flash_enter_low_power_mode+0x64>)
    7158:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    715a:	4b10      	ldr	r3, [pc, #64]	; (719c <spi_flash_enter_low_power_mode+0x6c>)
    715c:	2101      	movs	r1, #1
    715e:	0018      	movs	r0, r3
    7160:	4b0c      	ldr	r3, [pc, #48]	; (7194 <spi_flash_enter_low_power_mode+0x64>)
    7162:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    7164:	4b0e      	ldr	r3, [pc, #56]	; (71a0 <spi_flash_enter_low_power_mode+0x70>)
    7166:	2100      	movs	r1, #0
    7168:	0018      	movs	r0, r3
    716a:	4b0a      	ldr	r3, [pc, #40]	; (7194 <spi_flash_enter_low_power_mode+0x64>)
    716c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
    716e:	4b0d      	ldr	r3, [pc, #52]	; (71a4 <spi_flash_enter_low_power_mode+0x74>)
    7170:	2181      	movs	r1, #129	; 0x81
    7172:	0018      	movs	r0, r3
    7174:	4b07      	ldr	r3, [pc, #28]	; (7194 <spi_flash_enter_low_power_mode+0x64>)
    7176:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    7178:	46c0      	nop			; (mov r8, r8)
    717a:	4b0b      	ldr	r3, [pc, #44]	; (71a8 <spi_flash_enter_low_power_mode+0x78>)
    717c:	0018      	movs	r0, r3
    717e:	4b0b      	ldr	r3, [pc, #44]	; (71ac <spi_flash_enter_low_power_mode+0x7c>)
    7180:	4798      	blx	r3
    7182:	1e03      	subs	r3, r0, #0
    7184:	2b01      	cmp	r3, #1
    7186:	d1f8      	bne.n	717a <spi_flash_enter_low_power_mode+0x4a>
}
    7188:	46c0      	nop			; (mov r8, r8)
    718a:	46bd      	mov	sp, r7
    718c:	b002      	add	sp, #8
    718e:	bd80      	pop	{r7, pc}
    7190:	00010208 	.word	0x00010208
    7194:	00004b29 	.word	0x00004b29
    7198:	0001020c 	.word	0x0001020c
    719c:	00010214 	.word	0x00010214
    71a0:	0001021c 	.word	0x0001021c
    71a4:	00010204 	.word	0x00010204
    71a8:	00010218 	.word	0x00010218
    71ac:	00004ae5 	.word	0x00004ae5

000071b0 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
    71b0:	b580      	push	{r7, lr}
    71b2:	b082      	sub	sp, #8
    71b4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
    71b6:	003b      	movs	r3, r7
    71b8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	22ab      	movs	r2, #171	; 0xab
    71be:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
    71c0:	4b13      	ldr	r3, [pc, #76]	; (7210 <spi_flash_leave_low_power_mode+0x60>)
    71c2:	2100      	movs	r1, #0
    71c4:	0018      	movs	r0, r3
    71c6:	4b13      	ldr	r3, [pc, #76]	; (7214 <spi_flash_leave_low_power_mode+0x64>)
    71c8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
    71ca:	687b      	ldr	r3, [r7, #4]
    71cc:	781b      	ldrb	r3, [r3, #0]
    71ce:	001a      	movs	r2, r3
    71d0:	4b11      	ldr	r3, [pc, #68]	; (7218 <spi_flash_leave_low_power_mode+0x68>)
    71d2:	0011      	movs	r1, r2
    71d4:	0018      	movs	r0, r3
    71d6:	4b0f      	ldr	r3, [pc, #60]	; (7214 <spi_flash_leave_low_power_mode+0x64>)
    71d8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
    71da:	4b10      	ldr	r3, [pc, #64]	; (721c <spi_flash_leave_low_power_mode+0x6c>)
    71dc:	2101      	movs	r1, #1
    71de:	0018      	movs	r0, r3
    71e0:	4b0c      	ldr	r3, [pc, #48]	; (7214 <spi_flash_leave_low_power_mode+0x64>)
    71e2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
    71e4:	4b0e      	ldr	r3, [pc, #56]	; (7220 <spi_flash_leave_low_power_mode+0x70>)
    71e6:	2100      	movs	r1, #0
    71e8:	0018      	movs	r0, r3
    71ea:	4b0a      	ldr	r3, [pc, #40]	; (7214 <spi_flash_leave_low_power_mode+0x64>)
    71ec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
    71ee:	4b0d      	ldr	r3, [pc, #52]	; (7224 <spi_flash_leave_low_power_mode+0x74>)
    71f0:	2181      	movs	r1, #129	; 0x81
    71f2:	0018      	movs	r0, r3
    71f4:	4b07      	ldr	r3, [pc, #28]	; (7214 <spi_flash_leave_low_power_mode+0x64>)
    71f6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
    71f8:	46c0      	nop			; (mov r8, r8)
    71fa:	4b0b      	ldr	r3, [pc, #44]	; (7228 <spi_flash_leave_low_power_mode+0x78>)
    71fc:	0018      	movs	r0, r3
    71fe:	4b0b      	ldr	r3, [pc, #44]	; (722c <spi_flash_leave_low_power_mode+0x7c>)
    7200:	4798      	blx	r3
    7202:	1e03      	subs	r3, r0, #0
    7204:	2b01      	cmp	r3, #1
    7206:	d1f8      	bne.n	71fa <spi_flash_leave_low_power_mode+0x4a>
}
    7208:	46c0      	nop			; (mov r8, r8)
    720a:	46bd      	mov	sp, r7
    720c:	b002      	add	sp, #8
    720e:	bd80      	pop	{r7, pc}
    7210:	00010208 	.word	0x00010208
    7214:	00004b29 	.word	0x00004b29
    7218:	0001020c 	.word	0x0001020c
    721c:	00010214 	.word	0x00010214
    7220:	0001021c 	.word	0x0001021c
    7224:	00010204 	.word	0x00010204
    7228:	00010218 	.word	0x00010218
    722c:	00004ae5 	.word	0x00004ae5

00007230 <spi_flash_enable>:
/**
 *	@fn		spi_flash_enable
 *	@brief	Enable spi flash operations
 */
sint8 spi_flash_enable(uint8 enable)
{
    7230:	b590      	push	{r4, r7, lr}
    7232:	b085      	sub	sp, #20
    7234:	af00      	add	r7, sp, #0
    7236:	0002      	movs	r2, r0
    7238:	1dfb      	adds	r3, r7, #7
    723a:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
    723c:	230f      	movs	r3, #15
    723e:	18fb      	adds	r3, r7, r3
    7240:	2200      	movs	r2, #0
    7242:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
    7244:	4b24      	ldr	r3, [pc, #144]	; (72d8 <spi_flash_enable+0xa8>)
    7246:	4798      	blx	r3
    7248:	0003      	movs	r3, r0
    724a:	051b      	lsls	r3, r3, #20
    724c:	0d1b      	lsrs	r3, r3, #20
    724e:	4a23      	ldr	r2, [pc, #140]	; (72dc <spi_flash_enable+0xac>)
    7250:	4293      	cmp	r3, r2
    7252:	d938      	bls.n	72c6 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
    7254:	230f      	movs	r3, #15
    7256:	18fc      	adds	r4, r7, r3
    7258:	2308      	movs	r3, #8
    725a:	18fb      	adds	r3, r7, r3
    725c:	4a20      	ldr	r2, [pc, #128]	; (72e0 <spi_flash_enable+0xb0>)
    725e:	0019      	movs	r1, r3
    7260:	0010      	movs	r0, r2
    7262:	4b20      	ldr	r3, [pc, #128]	; (72e4 <spi_flash_enable+0xb4>)
    7264:	4798      	blx	r3
    7266:	0003      	movs	r3, r0
    7268:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
    726a:	230f      	movs	r3, #15
    726c:	18fb      	adds	r3, r7, r3
    726e:	781b      	ldrb	r3, [r3, #0]
    7270:	b25b      	sxtb	r3, r3
    7272:	2b00      	cmp	r3, #0
    7274:	d126      	bne.n	72c4 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
    7276:	68bb      	ldr	r3, [r7, #8]
    7278:	4a1b      	ldr	r2, [pc, #108]	; (72e8 <spi_flash_enable+0xb8>)
    727a:	4013      	ands	r3, r2
    727c:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
    727e:	68bb      	ldr	r3, [r7, #8]
    7280:	4a1a      	ldr	r2, [pc, #104]	; (72ec <spi_flash_enable+0xbc>)
    7282:	4313      	orrs	r3, r2
    7284:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    7286:	68bb      	ldr	r3, [r7, #8]
    7288:	4a15      	ldr	r2, [pc, #84]	; (72e0 <spi_flash_enable+0xb0>)
    728a:	0019      	movs	r1, r3
    728c:	0010      	movs	r0, r2
    728e:	4b18      	ldr	r3, [pc, #96]	; (72f0 <spi_flash_enable+0xc0>)
    7290:	4798      	blx	r3
		if(enable) {
    7292:	1dfb      	adds	r3, r7, #7
    7294:	781b      	ldrb	r3, [r3, #0]
    7296:	2b00      	cmp	r3, #0
    7298:	d002      	beq.n	72a0 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
    729a:	4b16      	ldr	r3, [pc, #88]	; (72f4 <spi_flash_enable+0xc4>)
    729c:	4798      	blx	r3
    729e:	e001      	b.n	72a4 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
    72a0:	4b15      	ldr	r3, [pc, #84]	; (72f8 <spi_flash_enable+0xc8>)
    72a2:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
    72a4:	68bb      	ldr	r3, [r7, #8]
    72a6:	4a10      	ldr	r2, [pc, #64]	; (72e8 <spi_flash_enable+0xb8>)
    72a8:	4013      	ands	r3, r2
    72aa:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
    72ac:	68bb      	ldr	r3, [r7, #8]
    72ae:	2280      	movs	r2, #128	; 0x80
    72b0:	0252      	lsls	r2, r2, #9
    72b2:	4313      	orrs	r3, r2
    72b4:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
    72b6:	68bb      	ldr	r3, [r7, #8]
    72b8:	4a09      	ldr	r2, [pc, #36]	; (72e0 <spi_flash_enable+0xb0>)
    72ba:	0019      	movs	r1, r3
    72bc:	0010      	movs	r0, r2
    72be:	4b0c      	ldr	r3, [pc, #48]	; (72f0 <spi_flash_enable+0xc0>)
    72c0:	4798      	blx	r3
    72c2:	e000      	b.n	72c6 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
		if(s8Ret != M2M_SUCCESS) {
			goto ERR1;
    72c4:	46c0      	nop			; (mov r8, r8)
		u32Val &= ~((0x7777ul) << 12);
		u32Val |= ((0x0010ul) << 12);
		nm_write_reg(0x1410, u32Val);
	}
ERR1:
	return s8Ret;
    72c6:	230f      	movs	r3, #15
    72c8:	18fb      	adds	r3, r7, r3
    72ca:	781b      	ldrb	r3, [r3, #0]
    72cc:	b25b      	sxtb	r3, r3
}
    72ce:	0018      	movs	r0, r3
    72d0:	46bd      	mov	sp, r7
    72d2:	b005      	add	sp, #20
    72d4:	bd90      	pop	{r4, r7, pc}
    72d6:	46c0      	nop			; (mov r8, r8)
    72d8:	00004471 	.word	0x00004471
    72dc:	0000039f 	.word	0x0000039f
    72e0:	00001410 	.word	0x00001410
    72e4:	00004b05 	.word	0x00004b05
    72e8:	f8888fff 	.word	0xf8888fff
    72ec:	01111000 	.word	0x01111000
    72f0:	00004b29 	.word	0x00004b29
    72f4:	000071b1 	.word	0x000071b1
    72f8:	00007131 	.word	0x00007131

000072fc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    72fc:	b580      	push	{r7, lr}
    72fe:	b082      	sub	sp, #8
    7300:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    7302:	4b10      	ldr	r3, [pc, #64]	; (7344 <cpu_irq_enter_critical+0x48>)
    7304:	681b      	ldr	r3, [r3, #0]
    7306:	2b00      	cmp	r3, #0
    7308:	d112      	bne.n	7330 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    730a:	f3ef 8310 	mrs	r3, PRIMASK
    730e:	607b      	str	r3, [r7, #4]
  return(result);
    7310:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    7312:	2b00      	cmp	r3, #0
    7314:	d109      	bne.n	732a <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    7316:	b672      	cpsid	i
    7318:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    731c:	4b0a      	ldr	r3, [pc, #40]	; (7348 <cpu_irq_enter_critical+0x4c>)
    731e:	2200      	movs	r2, #0
    7320:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    7322:	4b0a      	ldr	r3, [pc, #40]	; (734c <cpu_irq_enter_critical+0x50>)
    7324:	2201      	movs	r2, #1
    7326:	701a      	strb	r2, [r3, #0]
    7328:	e002      	b.n	7330 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    732a:	4b08      	ldr	r3, [pc, #32]	; (734c <cpu_irq_enter_critical+0x50>)
    732c:	2200      	movs	r2, #0
    732e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    7330:	4b04      	ldr	r3, [pc, #16]	; (7344 <cpu_irq_enter_critical+0x48>)
    7332:	681b      	ldr	r3, [r3, #0]
    7334:	1c5a      	adds	r2, r3, #1
    7336:	4b03      	ldr	r3, [pc, #12]	; (7344 <cpu_irq_enter_critical+0x48>)
    7338:	601a      	str	r2, [r3, #0]
}
    733a:	46c0      	nop			; (mov r8, r8)
    733c:	46bd      	mov	sp, r7
    733e:	b002      	add	sp, #8
    7340:	bd80      	pop	{r7, pc}
    7342:	46c0      	nop			; (mov r8, r8)
    7344:	200000f0 	.word	0x200000f0
    7348:	20000018 	.word	0x20000018
    734c:	200000f4 	.word	0x200000f4

00007350 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    7350:	b580      	push	{r7, lr}
    7352:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    7354:	4b0b      	ldr	r3, [pc, #44]	; (7384 <cpu_irq_leave_critical+0x34>)
    7356:	681b      	ldr	r3, [r3, #0]
    7358:	1e5a      	subs	r2, r3, #1
    735a:	4b0a      	ldr	r3, [pc, #40]	; (7384 <cpu_irq_leave_critical+0x34>)
    735c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    735e:	4b09      	ldr	r3, [pc, #36]	; (7384 <cpu_irq_leave_critical+0x34>)
    7360:	681b      	ldr	r3, [r3, #0]
    7362:	2b00      	cmp	r3, #0
    7364:	d10a      	bne.n	737c <cpu_irq_leave_critical+0x2c>
    7366:	4b08      	ldr	r3, [pc, #32]	; (7388 <cpu_irq_leave_critical+0x38>)
    7368:	781b      	ldrb	r3, [r3, #0]
    736a:	b2db      	uxtb	r3, r3
    736c:	2b00      	cmp	r3, #0
    736e:	d005      	beq.n	737c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    7370:	4b06      	ldr	r3, [pc, #24]	; (738c <cpu_irq_leave_critical+0x3c>)
    7372:	2201      	movs	r2, #1
    7374:	701a      	strb	r2, [r3, #0]
    7376:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    737a:	b662      	cpsie	i
	}
}
    737c:	46c0      	nop			; (mov r8, r8)
    737e:	46bd      	mov	sp, r7
    7380:	bd80      	pop	{r7, pc}
    7382:	46c0      	nop			; (mov r8, r8)
    7384:	200000f0 	.word	0x200000f0
    7388:	200000f4 	.word	0x200000f4
    738c:	20000018 	.word	0x20000018

00007390 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    7390:	b580      	push	{r7, lr}
    7392:	b084      	sub	sp, #16
    7394:	af00      	add	r7, sp, #0
    7396:	0002      	movs	r2, r0
    7398:	1dfb      	adds	r3, r7, #7
    739a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    739c:	230f      	movs	r3, #15
    739e:	18fb      	adds	r3, r7, r3
    73a0:	1dfa      	adds	r2, r7, #7
    73a2:	7812      	ldrb	r2, [r2, #0]
    73a4:	09d2      	lsrs	r2, r2, #7
    73a6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    73a8:	230e      	movs	r3, #14
    73aa:	18fb      	adds	r3, r7, r3
    73ac:	1dfa      	adds	r2, r7, #7
    73ae:	7812      	ldrb	r2, [r2, #0]
    73b0:	0952      	lsrs	r2, r2, #5
    73b2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    73b4:	4b0d      	ldr	r3, [pc, #52]	; (73ec <system_pinmux_get_group_from_gpio_pin+0x5c>)
    73b6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    73b8:	230f      	movs	r3, #15
    73ba:	18fb      	adds	r3, r7, r3
    73bc:	781b      	ldrb	r3, [r3, #0]
    73be:	2b00      	cmp	r3, #0
    73c0:	d10f      	bne.n	73e2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    73c2:	230f      	movs	r3, #15
    73c4:	18fb      	adds	r3, r7, r3
    73c6:	781b      	ldrb	r3, [r3, #0]
    73c8:	009b      	lsls	r3, r3, #2
    73ca:	2210      	movs	r2, #16
    73cc:	4694      	mov	ip, r2
    73ce:	44bc      	add	ip, r7
    73d0:	4463      	add	r3, ip
    73d2:	3b08      	subs	r3, #8
    73d4:	681a      	ldr	r2, [r3, #0]
    73d6:	230e      	movs	r3, #14
    73d8:	18fb      	adds	r3, r7, r3
    73da:	781b      	ldrb	r3, [r3, #0]
    73dc:	01db      	lsls	r3, r3, #7
    73de:	18d3      	adds	r3, r2, r3
    73e0:	e000      	b.n	73e4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    73e2:	2300      	movs	r3, #0
	}
}
    73e4:	0018      	movs	r0, r3
    73e6:	46bd      	mov	sp, r7
    73e8:	b004      	add	sp, #16
    73ea:	bd80      	pop	{r7, pc}
    73ec:	41004400 	.word	0x41004400

000073f0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    73f0:	b580      	push	{r7, lr}
    73f2:	b082      	sub	sp, #8
    73f4:	af00      	add	r7, sp, #0
    73f6:	0002      	movs	r2, r0
    73f8:	1dfb      	adds	r3, r7, #7
    73fa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    73fc:	1dfb      	adds	r3, r7, #7
    73fe:	781b      	ldrb	r3, [r3, #0]
    7400:	0018      	movs	r0, r3
    7402:	4b03      	ldr	r3, [pc, #12]	; (7410 <port_get_group_from_gpio_pin+0x20>)
    7404:	4798      	blx	r3
    7406:	0003      	movs	r3, r0
}
    7408:	0018      	movs	r0, r3
    740a:	46bd      	mov	sp, r7
    740c:	b002      	add	sp, #8
    740e:	bd80      	pop	{r7, pc}
    7410:	00007391 	.word	0x00007391

00007414 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    7414:	b580      	push	{r7, lr}
    7416:	b082      	sub	sp, #8
    7418:	af00      	add	r7, sp, #0
    741a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    741c:	687b      	ldr	r3, [r7, #4]
    741e:	2200      	movs	r2, #0
    7420:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    7422:	687b      	ldr	r3, [r7, #4]
    7424:	2201      	movs	r2, #1
    7426:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    7428:	687b      	ldr	r3, [r7, #4]
    742a:	2200      	movs	r2, #0
    742c:	709a      	strb	r2, [r3, #2]
}
    742e:	46c0      	nop			; (mov r8, r8)
    7430:	46bd      	mov	sp, r7
    7432:	b002      	add	sp, #8
    7434:	bd80      	pop	{r7, pc}
    7436:	46c0      	nop			; (mov r8, r8)

00007438 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    7438:	b580      	push	{r7, lr}
    743a:	b084      	sub	sp, #16
    743c:	af00      	add	r7, sp, #0
    743e:	0002      	movs	r2, r0
    7440:	1dfb      	adds	r3, r7, #7
    7442:	701a      	strb	r2, [r3, #0]
    7444:	1dbb      	adds	r3, r7, #6
    7446:	1c0a      	adds	r2, r1, #0
    7448:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    744a:	1dfb      	adds	r3, r7, #7
    744c:	781b      	ldrb	r3, [r3, #0]
    744e:	0018      	movs	r0, r3
    7450:	4b0d      	ldr	r3, [pc, #52]	; (7488 <port_pin_set_output_level+0x50>)
    7452:	4798      	blx	r3
    7454:	0003      	movs	r3, r0
    7456:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    7458:	1dfb      	adds	r3, r7, #7
    745a:	781b      	ldrb	r3, [r3, #0]
    745c:	221f      	movs	r2, #31
    745e:	4013      	ands	r3, r2
    7460:	2201      	movs	r2, #1
    7462:	409a      	lsls	r2, r3
    7464:	0013      	movs	r3, r2
    7466:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    7468:	1dbb      	adds	r3, r7, #6
    746a:	781b      	ldrb	r3, [r3, #0]
    746c:	2b00      	cmp	r3, #0
    746e:	d003      	beq.n	7478 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    7470:	68fb      	ldr	r3, [r7, #12]
    7472:	68ba      	ldr	r2, [r7, #8]
    7474:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    7476:	e002      	b.n	747e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    7478:	68fb      	ldr	r3, [r7, #12]
    747a:	68ba      	ldr	r2, [r7, #8]
    747c:	615a      	str	r2, [r3, #20]
	}
}
    747e:	46c0      	nop			; (mov r8, r8)
    7480:	46bd      	mov	sp, r7
    7482:	b004      	add	sp, #16
    7484:	bd80      	pop	{r7, pc}
    7486:	46c0      	nop			; (mov r8, r8)
    7488:	000073f1 	.word	0x000073f1

0000748c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    748c:	b580      	push	{r7, lr}
    748e:	b082      	sub	sp, #8
    7490:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    7492:	1d3b      	adds	r3, r7, #4
    7494:	0018      	movs	r0, r3
    7496:	4b0e      	ldr	r3, [pc, #56]	; (74d0 <system_board_init+0x44>)
    7498:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    749a:	1d3b      	adds	r3, r7, #4
    749c:	2201      	movs	r2, #1
    749e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    74a0:	1d3b      	adds	r3, r7, #4
    74a2:	0019      	movs	r1, r3
    74a4:	2017      	movs	r0, #23
    74a6:	4b0b      	ldr	r3, [pc, #44]	; (74d4 <system_board_init+0x48>)
    74a8:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    74aa:	2101      	movs	r1, #1
    74ac:	2017      	movs	r0, #23
    74ae:	4b0a      	ldr	r3, [pc, #40]	; (74d8 <system_board_init+0x4c>)
    74b0:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    74b2:	1d3b      	adds	r3, r7, #4
    74b4:	2200      	movs	r2, #0
    74b6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    74b8:	1d3b      	adds	r3, r7, #4
    74ba:	2201      	movs	r2, #1
    74bc:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    74be:	1d3b      	adds	r3, r7, #4
    74c0:	0019      	movs	r1, r3
    74c2:	2037      	movs	r0, #55	; 0x37
    74c4:	4b03      	ldr	r3, [pc, #12]	; (74d4 <system_board_init+0x48>)
    74c6:	4798      	blx	r3
}
    74c8:	46c0      	nop			; (mov r8, r8)
    74ca:	46bd      	mov	sp, r7
    74cc:	b002      	add	sp, #8
    74ce:	bd80      	pop	{r7, pc}
    74d0:	00007415 	.word	0x00007415
    74d4:	00007cdd 	.word	0x00007cdd
    74d8:	00007439 	.word	0x00007439

000074dc <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    74dc:	b580      	push	{r7, lr}
    74de:	b084      	sub	sp, #16
    74e0:	af00      	add	r7, sp, #0
    74e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    74e4:	687b      	ldr	r3, [r7, #4]
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    74ea:	68fb      	ldr	r3, [r7, #12]
    74ec:	7e5b      	ldrb	r3, [r3, #25]
    74ee:	b2db      	uxtb	r3, r3
    74f0:	b25b      	sxtb	r3, r3
    74f2:	2b00      	cmp	r3, #0
    74f4:	da01      	bge.n	74fa <adc_is_syncing+0x1e>
		return true;
    74f6:	2301      	movs	r3, #1
    74f8:	e000      	b.n	74fc <adc_is_syncing+0x20>
	}

	return false;
    74fa:	2300      	movs	r3, #0
}
    74fc:	0018      	movs	r0, r3
    74fe:	46bd      	mov	sp, r7
    7500:	b004      	add	sp, #16
    7502:	bd80      	pop	{r7, pc}

00007504 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    7504:	b580      	push	{r7, lr}
    7506:	b084      	sub	sp, #16
    7508:	af00      	add	r7, sp, #0
    750a:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    750c:	687b      	ldr	r3, [r7, #4]
    750e:	681b      	ldr	r3, [r3, #0]
    7510:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    7512:	46c0      	nop			; (mov r8, r8)
    7514:	687b      	ldr	r3, [r7, #4]
    7516:	0018      	movs	r0, r3
    7518:	4b0b      	ldr	r3, [pc, #44]	; (7548 <adc_start_conversion+0x44>)
    751a:	4798      	blx	r3
    751c:	1e03      	subs	r3, r0, #0
    751e:	d1f9      	bne.n	7514 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    7520:	68fb      	ldr	r3, [r7, #12]
    7522:	7b1b      	ldrb	r3, [r3, #12]
    7524:	b2db      	uxtb	r3, r3
    7526:	2202      	movs	r2, #2
    7528:	4313      	orrs	r3, r2
    752a:	b2da      	uxtb	r2, r3
    752c:	68fb      	ldr	r3, [r7, #12]
    752e:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    7530:	46c0      	nop			; (mov r8, r8)
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	0018      	movs	r0, r3
    7536:	4b04      	ldr	r3, [pc, #16]	; (7548 <adc_start_conversion+0x44>)
    7538:	4798      	blx	r3
    753a:	1e03      	subs	r3, r0, #0
    753c:	d1f9      	bne.n	7532 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    753e:	46c0      	nop			; (mov r8, r8)
    7540:	46bd      	mov	sp, r7
    7542:	b004      	add	sp, #16
    7544:	bd80      	pop	{r7, pc}
    7546:	46c0      	nop			; (mov r8, r8)
    7548:	000074dd 	.word	0x000074dd

0000754c <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    754c:	b580      	push	{r7, lr}
    754e:	b084      	sub	sp, #16
    7550:	af00      	add	r7, sp, #0
    7552:	6078      	str	r0, [r7, #4]
    7554:	000a      	movs	r2, r1
    7556:	1cfb      	adds	r3, r7, #3
    7558:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    755a:	687b      	ldr	r3, [r7, #4]
    755c:	681b      	ldr	r3, [r3, #0]
    755e:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    7560:	68fb      	ldr	r3, [r7, #12]
    7562:	1cfa      	adds	r2, r7, #3
    7564:	7812      	ldrb	r2, [r2, #0]
    7566:	759a      	strb	r2, [r3, #22]
}
    7568:	46c0      	nop			; (mov r8, r8)
    756a:	46bd      	mov	sp, r7
    756c:	b004      	add	sp, #16
    756e:	bd80      	pop	{r7, pc}

00007570 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    7570:	b580      	push	{r7, lr}
    7572:	b084      	sub	sp, #16
    7574:	af00      	add	r7, sp, #0
    7576:	0002      	movs	r2, r0
    7578:	1dfb      	adds	r3, r7, #7
    757a:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    757c:	1dfb      	adds	r3, r7, #7
    757e:	781a      	ldrb	r2, [r3, #0]
    7580:	4b44      	ldr	r3, [pc, #272]	; (7694 <_adc_interrupt_handler+0x124>)
    7582:	0092      	lsls	r2, r2, #2
    7584:	58d3      	ldr	r3, [r2, r3]
    7586:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    7588:	68fb      	ldr	r3, [r7, #12]
    758a:	681b      	ldr	r3, [r3, #0]
    758c:	7e1b      	ldrb	r3, [r3, #24]
    758e:	b2db      	uxtb	r3, r3
    7590:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    7592:	68bb      	ldr	r3, [r7, #8]
    7594:	2201      	movs	r2, #1
    7596:	4013      	ands	r3, r2
    7598:	d045      	beq.n	7626 <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    759a:	68fb      	ldr	r3, [r7, #12]
    759c:	7edb      	ldrb	r3, [r3, #27]
    759e:	001a      	movs	r2, r3
    75a0:	2301      	movs	r3, #1
    75a2:	4013      	ands	r3, r2
    75a4:	d03f      	beq.n	7626 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    75a6:	68fb      	ldr	r3, [r7, #12]
    75a8:	7e9b      	ldrb	r3, [r3, #26]
    75aa:	001a      	movs	r2, r3
    75ac:	2301      	movs	r3, #1
    75ae:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    75b0:	d039      	beq.n	7626 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    75b2:	68fb      	ldr	r3, [r7, #12]
    75b4:	681b      	ldr	r3, [r3, #0]
    75b6:	2201      	movs	r2, #1
    75b8:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    75ba:	46c0      	nop			; (mov r8, r8)
    75bc:	68fb      	ldr	r3, [r7, #12]
    75be:	0018      	movs	r0, r3
    75c0:	4b35      	ldr	r3, [pc, #212]	; (7698 <_adc_interrupt_handler+0x128>)
    75c2:	4798      	blx	r3
    75c4:	1e03      	subs	r3, r0, #0
    75c6:	d1f9      	bne.n	75bc <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    75c8:	68fb      	ldr	r3, [r7, #12]
    75ca:	695b      	ldr	r3, [r3, #20]
    75cc:	1c99      	adds	r1, r3, #2
    75ce:	68fa      	ldr	r2, [r7, #12]
    75d0:	6151      	str	r1, [r2, #20]
    75d2:	68fa      	ldr	r2, [r7, #12]
    75d4:	6812      	ldr	r2, [r2, #0]
    75d6:	8b52      	ldrh	r2, [r2, #26]
    75d8:	b292      	uxth	r2, r2
    75da:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    75dc:	68fb      	ldr	r3, [r7, #12]
    75de:	8b1b      	ldrh	r3, [r3, #24]
    75e0:	b29b      	uxth	r3, r3
    75e2:	3b01      	subs	r3, #1
    75e4:	b29b      	uxth	r3, r3
    75e6:	68fa      	ldr	r2, [r7, #12]
    75e8:	1c19      	adds	r1, r3, #0
    75ea:	8311      	strh	r1, [r2, #24]
    75ec:	2b00      	cmp	r3, #0
    75ee:	d008      	beq.n	7602 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    75f0:	68fb      	ldr	r3, [r7, #12]
    75f2:	7f5b      	ldrb	r3, [r3, #29]
    75f4:	2b00      	cmp	r3, #0
    75f6:	d016      	beq.n	7626 <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    75f8:	68fb      	ldr	r3, [r7, #12]
    75fa:	0018      	movs	r0, r3
    75fc:	4b27      	ldr	r3, [pc, #156]	; (769c <_adc_interrupt_handler+0x12c>)
    75fe:	4798      	blx	r3
    7600:	e011      	b.n	7626 <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    7602:	68fb      	ldr	r3, [r7, #12]
    7604:	7f1b      	ldrb	r3, [r3, #28]
    7606:	b2db      	uxtb	r3, r3
    7608:	2b05      	cmp	r3, #5
    760a:	d10c      	bne.n	7626 <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    760c:	68fb      	ldr	r3, [r7, #12]
    760e:	2200      	movs	r2, #0
    7610:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    7612:	68fb      	ldr	r3, [r7, #12]
    7614:	2101      	movs	r1, #1
    7616:	0018      	movs	r0, r3
    7618:	4b21      	ldr	r3, [pc, #132]	; (76a0 <_adc_interrupt_handler+0x130>)
    761a:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    761c:	68fb      	ldr	r3, [r7, #12]
    761e:	689b      	ldr	r3, [r3, #8]
    7620:	68fa      	ldr	r2, [r7, #12]
    7622:	0010      	movs	r0, r2
    7624:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    7626:	68bb      	ldr	r3, [r7, #8]
    7628:	2204      	movs	r2, #4
    762a:	4013      	ands	r3, r2
    762c:	d014      	beq.n	7658 <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    762e:	68fb      	ldr	r3, [r7, #12]
    7630:	681b      	ldr	r3, [r3, #0]
    7632:	2204      	movs	r2, #4
    7634:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    7636:	68fb      	ldr	r3, [r7, #12]
    7638:	7edb      	ldrb	r3, [r3, #27]
    763a:	001a      	movs	r2, r3
    763c:	2302      	movs	r3, #2
    763e:	4013      	ands	r3, r2
    7640:	d00a      	beq.n	7658 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    7642:	68fb      	ldr	r3, [r7, #12]
    7644:	7e9b      	ldrb	r3, [r3, #26]
    7646:	001a      	movs	r2, r3
    7648:	2302      	movs	r3, #2
    764a:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    764c:	d004      	beq.n	7658 <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    764e:	68fb      	ldr	r3, [r7, #12]
    7650:	68db      	ldr	r3, [r3, #12]
    7652:	68fa      	ldr	r2, [r7, #12]
    7654:	0010      	movs	r0, r2
    7656:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    7658:	68bb      	ldr	r3, [r7, #8]
    765a:	2202      	movs	r2, #2
    765c:	4013      	ands	r3, r2
    765e:	d014      	beq.n	768a <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    7660:	68fb      	ldr	r3, [r7, #12]
    7662:	681b      	ldr	r3, [r3, #0]
    7664:	2202      	movs	r2, #2
    7666:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    7668:	68fb      	ldr	r3, [r7, #12]
    766a:	7edb      	ldrb	r3, [r3, #27]
    766c:	001a      	movs	r2, r3
    766e:	2304      	movs	r3, #4
    7670:	4013      	ands	r3, r2
    7672:	d00a      	beq.n	768a <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    7674:	68fb      	ldr	r3, [r7, #12]
    7676:	7e9b      	ldrb	r3, [r3, #26]
    7678:	001a      	movs	r2, r3
    767a:	2304      	movs	r3, #4
    767c:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    767e:	d004      	beq.n	768a <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    7680:	68fb      	ldr	r3, [r7, #12]
    7682:	691b      	ldr	r3, [r3, #16]
    7684:	68fa      	ldr	r2, [r7, #12]
    7686:	0010      	movs	r0, r2
    7688:	4798      	blx	r3
		}
	}
}
    768a:	46c0      	nop			; (mov r8, r8)
    768c:	46bd      	mov	sp, r7
    768e:	b004      	add	sp, #16
    7690:	bd80      	pop	{r7, pc}
    7692:	46c0      	nop			; (mov r8, r8)
    7694:	2000471c 	.word	0x2000471c
    7698:	000074dd 	.word	0x000074dd
    769c:	00007505 	.word	0x00007505
    76a0:	0000754d 	.word	0x0000754d

000076a4 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    76a4:	b580      	push	{r7, lr}
    76a6:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    76a8:	2000      	movs	r0, #0
    76aa:	4b02      	ldr	r3, [pc, #8]	; (76b4 <ADC_Handler+0x10>)
    76ac:	4798      	blx	r3
}
    76ae:	46c0      	nop			; (mov r8, r8)
    76b0:	46bd      	mov	sp, r7
    76b2:	bd80      	pop	{r7, pc}
    76b4:	00007571 	.word	0x00007571

000076b8 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    76b8:	b580      	push	{r7, lr}
    76ba:	b084      	sub	sp, #16
    76bc:	af00      	add	r7, sp, #0
    76be:	0002      	movs	r2, r0
    76c0:	1dfb      	adds	r3, r7, #7
    76c2:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    76c4:	230f      	movs	r3, #15
    76c6:	18fb      	adds	r3, r7, r3
    76c8:	1dfa      	adds	r2, r7, #7
    76ca:	7812      	ldrb	r2, [r2, #0]
    76cc:	0952      	lsrs	r2, r2, #5
    76ce:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    76d0:	230f      	movs	r3, #15
    76d2:	18fb      	adds	r3, r7, r3
    76d4:	781b      	ldrb	r3, [r3, #0]
    76d6:	2b00      	cmp	r3, #0
    76d8:	d10c      	bne.n	76f4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    76da:	4b09      	ldr	r3, [pc, #36]	; (7700 <_extint_get_eic_from_channel+0x48>)
    76dc:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    76de:	230f      	movs	r3, #15
    76e0:	18fb      	adds	r3, r7, r3
    76e2:	781b      	ldrb	r3, [r3, #0]
    76e4:	009b      	lsls	r3, r3, #2
    76e6:	2210      	movs	r2, #16
    76e8:	4694      	mov	ip, r2
    76ea:	44bc      	add	ip, r7
    76ec:	4463      	add	r3, ip
    76ee:	3b08      	subs	r3, #8
    76f0:	681b      	ldr	r3, [r3, #0]
    76f2:	e000      	b.n	76f6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    76f4:	2300      	movs	r3, #0
	}
}
    76f6:	0018      	movs	r0, r3
    76f8:	46bd      	mov	sp, r7
    76fa:	b004      	add	sp, #16
    76fc:	bd80      	pop	{r7, pc}
    76fe:	46c0      	nop			; (mov r8, r8)
    7700:	40001800 	.word	0x40001800

00007704 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    7704:	b580      	push	{r7, lr}
    7706:	b084      	sub	sp, #16
    7708:	af00      	add	r7, sp, #0
    770a:	0002      	movs	r2, r0
    770c:	1dfb      	adds	r3, r7, #7
    770e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    7710:	1dfb      	adds	r3, r7, #7
    7712:	781b      	ldrb	r3, [r3, #0]
    7714:	0018      	movs	r0, r3
    7716:	4b0b      	ldr	r3, [pc, #44]	; (7744 <extint_chan_is_detected+0x40>)
    7718:	4798      	blx	r3
    771a:	0003      	movs	r3, r0
    771c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    771e:	1dfb      	adds	r3, r7, #7
    7720:	781b      	ldrb	r3, [r3, #0]
    7722:	221f      	movs	r2, #31
    7724:	4013      	ands	r3, r2
    7726:	2201      	movs	r2, #1
    7728:	409a      	lsls	r2, r3
    772a:	0013      	movs	r3, r2
    772c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    772e:	68fb      	ldr	r3, [r7, #12]
    7730:	691b      	ldr	r3, [r3, #16]
    7732:	68ba      	ldr	r2, [r7, #8]
    7734:	4013      	ands	r3, r2
    7736:	1e5a      	subs	r2, r3, #1
    7738:	4193      	sbcs	r3, r2
    773a:	b2db      	uxtb	r3, r3
}
    773c:	0018      	movs	r0, r3
    773e:	46bd      	mov	sp, r7
    7740:	b004      	add	sp, #16
    7742:	bd80      	pop	{r7, pc}
    7744:	000076b9 	.word	0x000076b9

00007748 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    7748:	b580      	push	{r7, lr}
    774a:	b084      	sub	sp, #16
    774c:	af00      	add	r7, sp, #0
    774e:	0002      	movs	r2, r0
    7750:	1dfb      	adds	r3, r7, #7
    7752:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    7754:	1dfb      	adds	r3, r7, #7
    7756:	781b      	ldrb	r3, [r3, #0]
    7758:	0018      	movs	r0, r3
    775a:	4b09      	ldr	r3, [pc, #36]	; (7780 <extint_chan_clear_detected+0x38>)
    775c:	4798      	blx	r3
    775e:	0003      	movs	r3, r0
    7760:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    7762:	1dfb      	adds	r3, r7, #7
    7764:	781b      	ldrb	r3, [r3, #0]
    7766:	221f      	movs	r2, #31
    7768:	4013      	ands	r3, r2
    776a:	2201      	movs	r2, #1
    776c:	409a      	lsls	r2, r3
    776e:	0013      	movs	r3, r2
    7770:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    7772:	68fb      	ldr	r3, [r7, #12]
    7774:	68ba      	ldr	r2, [r7, #8]
    7776:	611a      	str	r2, [r3, #16]
}
    7778:	46c0      	nop			; (mov r8, r8)
    777a:	46bd      	mov	sp, r7
    777c:	b004      	add	sp, #16
    777e:	bd80      	pop	{r7, pc}
    7780:	000076b9 	.word	0x000076b9

00007784 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
    7784:	b580      	push	{r7, lr}
    7786:	b082      	sub	sp, #8
    7788:	af00      	add	r7, sp, #0
    778a:	6078      	str	r0, [r7, #4]
    778c:	0008      	movs	r0, r1
    778e:	0011      	movs	r1, r2
    7790:	1cfb      	adds	r3, r7, #3
    7792:	1c02      	adds	r2, r0, #0
    7794:	701a      	strb	r2, [r3, #0]
    7796:	1cbb      	adds	r3, r7, #2
    7798:	1c0a      	adds	r2, r1, #0
    779a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
    779c:	1cbb      	adds	r3, r7, #2
    779e:	781b      	ldrb	r3, [r3, #0]
    77a0:	2b00      	cmp	r3, #0
    77a2:	d001      	beq.n	77a8 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    77a4:	2317      	movs	r3, #23
    77a6:	e019      	b.n	77dc <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
    77a8:	1cfb      	adds	r3, r7, #3
    77aa:	781a      	ldrb	r2, [r3, #0]
    77ac:	4b0d      	ldr	r3, [pc, #52]	; (77e4 <extint_register_callback+0x60>)
    77ae:	0092      	lsls	r2, r2, #2
    77b0:	58d3      	ldr	r3, [r2, r3]
    77b2:	2b00      	cmp	r3, #0
    77b4:	d107      	bne.n	77c6 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
    77b6:	1cfb      	adds	r3, r7, #3
    77b8:	781a      	ldrb	r2, [r3, #0]
    77ba:	4b0a      	ldr	r3, [pc, #40]	; (77e4 <extint_register_callback+0x60>)
    77bc:	0092      	lsls	r2, r2, #2
    77be:	6879      	ldr	r1, [r7, #4]
    77c0:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
    77c2:	2300      	movs	r3, #0
    77c4:	e00a      	b.n	77dc <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
    77c6:	1cfb      	adds	r3, r7, #3
    77c8:	781a      	ldrb	r2, [r3, #0]
    77ca:	4b06      	ldr	r3, [pc, #24]	; (77e4 <extint_register_callback+0x60>)
    77cc:	0092      	lsls	r2, r2, #2
    77ce:	58d2      	ldr	r2, [r2, r3]
    77d0:	687b      	ldr	r3, [r7, #4]
    77d2:	429a      	cmp	r2, r3
    77d4:	d101      	bne.n	77da <extint_register_callback+0x56>
		return STATUS_OK;
    77d6:	2300      	movs	r3, #0
    77d8:	e000      	b.n	77dc <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
    77da:	231d      	movs	r3, #29
}
    77dc:	0018      	movs	r0, r3
    77de:	46bd      	mov	sp, r7
    77e0:	b002      	add	sp, #8
    77e2:	bd80      	pop	{r7, pc}
    77e4:	20004724 	.word	0x20004724

000077e8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    77e8:	b580      	push	{r7, lr}
    77ea:	b084      	sub	sp, #16
    77ec:	af00      	add	r7, sp, #0
    77ee:	0002      	movs	r2, r0
    77f0:	1dfb      	adds	r3, r7, #7
    77f2:	701a      	strb	r2, [r3, #0]
    77f4:	1dbb      	adds	r3, r7, #6
    77f6:	1c0a      	adds	r2, r1, #0
    77f8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    77fa:	1dbb      	adds	r3, r7, #6
    77fc:	781b      	ldrb	r3, [r3, #0]
    77fe:	2b00      	cmp	r3, #0
    7800:	d10e      	bne.n	7820 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    7802:	1dfb      	adds	r3, r7, #7
    7804:	781b      	ldrb	r3, [r3, #0]
    7806:	0018      	movs	r0, r3
    7808:	4b08      	ldr	r3, [pc, #32]	; (782c <extint_chan_enable_callback+0x44>)
    780a:	4798      	blx	r3
    780c:	0003      	movs	r3, r0
    780e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    7810:	1dfb      	adds	r3, r7, #7
    7812:	781b      	ldrb	r3, [r3, #0]
    7814:	2201      	movs	r2, #1
    7816:	409a      	lsls	r2, r3
    7818:	68fb      	ldr	r3, [r7, #12]
    781a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    781c:	2300      	movs	r3, #0
    781e:	e000      	b.n	7822 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7820:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    7822:	0018      	movs	r0, r3
    7824:	46bd      	mov	sp, r7
    7826:	b004      	add	sp, #16
    7828:	bd80      	pop	{r7, pc}
    782a:	46c0      	nop			; (mov r8, r8)
    782c:	000076b9 	.word	0x000076b9

00007830 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    7830:	b580      	push	{r7, lr}
    7832:	b084      	sub	sp, #16
    7834:	af00      	add	r7, sp, #0
    7836:	0002      	movs	r2, r0
    7838:	1dfb      	adds	r3, r7, #7
    783a:	701a      	strb	r2, [r3, #0]
    783c:	1dbb      	adds	r3, r7, #6
    783e:	1c0a      	adds	r2, r1, #0
    7840:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    7842:	1dbb      	adds	r3, r7, #6
    7844:	781b      	ldrb	r3, [r3, #0]
    7846:	2b00      	cmp	r3, #0
    7848:	d10e      	bne.n	7868 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    784a:	1dfb      	adds	r3, r7, #7
    784c:	781b      	ldrb	r3, [r3, #0]
    784e:	0018      	movs	r0, r3
    7850:	4b08      	ldr	r3, [pc, #32]	; (7874 <extint_chan_disable_callback+0x44>)
    7852:	4798      	blx	r3
    7854:	0003      	movs	r3, r0
    7856:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    7858:	1dfb      	adds	r3, r7, #7
    785a:	781b      	ldrb	r3, [r3, #0]
    785c:	2201      	movs	r2, #1
    785e:	409a      	lsls	r2, r3
    7860:	68fb      	ldr	r3, [r7, #12]
    7862:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    7864:	2300      	movs	r3, #0
    7866:	e000      	b.n	786a <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    7868:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    786a:	0018      	movs	r0, r3
    786c:	46bd      	mov	sp, r7
    786e:	b004      	add	sp, #16
    7870:	bd80      	pop	{r7, pc}
    7872:	46c0      	nop			; (mov r8, r8)
    7874:	000076b9 	.word	0x000076b9

00007878 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    7878:	b580      	push	{r7, lr}
    787a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    787c:	4b15      	ldr	r3, [pc, #84]	; (78d4 <EIC_Handler+0x5c>)
    787e:	2200      	movs	r2, #0
    7880:	701a      	strb	r2, [r3, #0]
    7882:	e020      	b.n	78c6 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    7884:	4b13      	ldr	r3, [pc, #76]	; (78d4 <EIC_Handler+0x5c>)
    7886:	781b      	ldrb	r3, [r3, #0]
    7888:	0018      	movs	r0, r3
    788a:	4b13      	ldr	r3, [pc, #76]	; (78d8 <EIC_Handler+0x60>)
    788c:	4798      	blx	r3
    788e:	1e03      	subs	r3, r0, #0
    7890:	d013      	beq.n	78ba <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    7892:	4b10      	ldr	r3, [pc, #64]	; (78d4 <EIC_Handler+0x5c>)
    7894:	781b      	ldrb	r3, [r3, #0]
    7896:	0018      	movs	r0, r3
    7898:	4b10      	ldr	r3, [pc, #64]	; (78dc <EIC_Handler+0x64>)
    789a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    789c:	4b0d      	ldr	r3, [pc, #52]	; (78d4 <EIC_Handler+0x5c>)
    789e:	781b      	ldrb	r3, [r3, #0]
    78a0:	001a      	movs	r2, r3
    78a2:	4b0f      	ldr	r3, [pc, #60]	; (78e0 <EIC_Handler+0x68>)
    78a4:	0092      	lsls	r2, r2, #2
    78a6:	58d3      	ldr	r3, [r2, r3]
    78a8:	2b00      	cmp	r3, #0
    78aa:	d006      	beq.n	78ba <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    78ac:	4b09      	ldr	r3, [pc, #36]	; (78d4 <EIC_Handler+0x5c>)
    78ae:	781b      	ldrb	r3, [r3, #0]
    78b0:	001a      	movs	r2, r3
    78b2:	4b0b      	ldr	r3, [pc, #44]	; (78e0 <EIC_Handler+0x68>)
    78b4:	0092      	lsls	r2, r2, #2
    78b6:	58d3      	ldr	r3, [r2, r3]
    78b8:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    78ba:	4b06      	ldr	r3, [pc, #24]	; (78d4 <EIC_Handler+0x5c>)
    78bc:	781b      	ldrb	r3, [r3, #0]
    78be:	3301      	adds	r3, #1
    78c0:	b2da      	uxtb	r2, r3
    78c2:	4b04      	ldr	r3, [pc, #16]	; (78d4 <EIC_Handler+0x5c>)
    78c4:	701a      	strb	r2, [r3, #0]
    78c6:	4b03      	ldr	r3, [pc, #12]	; (78d4 <EIC_Handler+0x5c>)
    78c8:	781b      	ldrb	r3, [r3, #0]
    78ca:	2b0f      	cmp	r3, #15
    78cc:	d9da      	bls.n	7884 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    78ce:	46c0      	nop			; (mov r8, r8)
    78d0:	46bd      	mov	sp, r7
    78d2:	bd80      	pop	{r7, pc}
    78d4:	20004720 	.word	0x20004720
    78d8:	00007705 	.word	0x00007705
    78dc:	00007749 	.word	0x00007749
    78e0:	20004724 	.word	0x20004724

000078e4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    78e4:	b580      	push	{r7, lr}
    78e6:	b082      	sub	sp, #8
    78e8:	af00      	add	r7, sp, #0
    78ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    78ec:	687b      	ldr	r3, [r7, #4]
    78ee:	2200      	movs	r2, #0
    78f0:	701a      	strb	r2, [r3, #0]
}
    78f2:	46c0      	nop			; (mov r8, r8)
    78f4:	46bd      	mov	sp, r7
    78f6:	b002      	add	sp, #8
    78f8:	bd80      	pop	{r7, pc}
    78fa:	46c0      	nop			; (mov r8, r8)

000078fc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    78fc:	b580      	push	{r7, lr}
    78fe:	b082      	sub	sp, #8
    7900:	af00      	add	r7, sp, #0
    7902:	0002      	movs	r2, r0
    7904:	6039      	str	r1, [r7, #0]
    7906:	1dfb      	adds	r3, r7, #7
    7908:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    790a:	1dfb      	adds	r3, r7, #7
    790c:	781b      	ldrb	r3, [r3, #0]
    790e:	2b01      	cmp	r3, #1
    7910:	d00a      	beq.n	7928 <system_apb_clock_set_mask+0x2c>
    7912:	2b02      	cmp	r3, #2
    7914:	d00f      	beq.n	7936 <system_apb_clock_set_mask+0x3a>
    7916:	2b00      	cmp	r3, #0
    7918:	d114      	bne.n	7944 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    791a:	4b0e      	ldr	r3, [pc, #56]	; (7954 <system_apb_clock_set_mask+0x58>)
    791c:	4a0d      	ldr	r2, [pc, #52]	; (7954 <system_apb_clock_set_mask+0x58>)
    791e:	6991      	ldr	r1, [r2, #24]
    7920:	683a      	ldr	r2, [r7, #0]
    7922:	430a      	orrs	r2, r1
    7924:	619a      	str	r2, [r3, #24]
			break;
    7926:	e00f      	b.n	7948 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    7928:	4b0a      	ldr	r3, [pc, #40]	; (7954 <system_apb_clock_set_mask+0x58>)
    792a:	4a0a      	ldr	r2, [pc, #40]	; (7954 <system_apb_clock_set_mask+0x58>)
    792c:	69d1      	ldr	r1, [r2, #28]
    792e:	683a      	ldr	r2, [r7, #0]
    7930:	430a      	orrs	r2, r1
    7932:	61da      	str	r2, [r3, #28]
			break;
    7934:	e008      	b.n	7948 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    7936:	4b07      	ldr	r3, [pc, #28]	; (7954 <system_apb_clock_set_mask+0x58>)
    7938:	4a06      	ldr	r2, [pc, #24]	; (7954 <system_apb_clock_set_mask+0x58>)
    793a:	6a11      	ldr	r1, [r2, #32]
    793c:	683a      	ldr	r2, [r7, #0]
    793e:	430a      	orrs	r2, r1
    7940:	621a      	str	r2, [r3, #32]
			break;
    7942:	e001      	b.n	7948 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    7944:	2317      	movs	r3, #23
    7946:	e000      	b.n	794a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    7948:	2300      	movs	r3, #0
}
    794a:	0018      	movs	r0, r3
    794c:	46bd      	mov	sp, r7
    794e:	b002      	add	sp, #8
    7950:	bd80      	pop	{r7, pc}
    7952:	46c0      	nop			; (mov r8, r8)
    7954:	40000400 	.word	0x40000400

00007958 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    7958:	b580      	push	{r7, lr}
    795a:	b082      	sub	sp, #8
    795c:	af00      	add	r7, sp, #0
    795e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7960:	687b      	ldr	r3, [r7, #4]
    7962:	2280      	movs	r2, #128	; 0x80
    7964:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7966:	687b      	ldr	r3, [r7, #4]
    7968:	2200      	movs	r2, #0
    796a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    796c:	687b      	ldr	r3, [r7, #4]
    796e:	2201      	movs	r2, #1
    7970:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7972:	687b      	ldr	r3, [r7, #4]
    7974:	2200      	movs	r2, #0
    7976:	70da      	strb	r2, [r3, #3]
}
    7978:	46c0      	nop			; (mov r8, r8)
    797a:	46bd      	mov	sp, r7
    797c:	b002      	add	sp, #8
    797e:	bd80      	pop	{r7, pc}

00007980 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    7980:	b580      	push	{r7, lr}
    7982:	b082      	sub	sp, #8
    7984:	af00      	add	r7, sp, #0
    7986:	0002      	movs	r2, r0
    7988:	1dfb      	adds	r3, r7, #7
    798a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    798c:	4b06      	ldr	r3, [pc, #24]	; (79a8 <system_interrupt_enable+0x28>)
    798e:	1dfa      	adds	r2, r7, #7
    7990:	7812      	ldrb	r2, [r2, #0]
    7992:	0011      	movs	r1, r2
    7994:	221f      	movs	r2, #31
    7996:	400a      	ands	r2, r1
    7998:	2101      	movs	r1, #1
    799a:	4091      	lsls	r1, r2
    799c:	000a      	movs	r2, r1
    799e:	601a      	str	r2, [r3, #0]
}
    79a0:	46c0      	nop			; (mov r8, r8)
    79a2:	46bd      	mov	sp, r7
    79a4:	b002      	add	sp, #8
    79a6:	bd80      	pop	{r7, pc}
    79a8:	e000e100 	.word	0xe000e100

000079ac <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    79ac:	b580      	push	{r7, lr}
    79ae:	b084      	sub	sp, #16
    79b0:	af00      	add	r7, sp, #0
    79b2:	0002      	movs	r2, r0
    79b4:	1dfb      	adds	r3, r7, #7
    79b6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    79b8:	230f      	movs	r3, #15
    79ba:	18fb      	adds	r3, r7, r3
    79bc:	1dfa      	adds	r2, r7, #7
    79be:	7812      	ldrb	r2, [r2, #0]
    79c0:	0952      	lsrs	r2, r2, #5
    79c2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    79c4:	230f      	movs	r3, #15
    79c6:	18fb      	adds	r3, r7, r3
    79c8:	781b      	ldrb	r3, [r3, #0]
    79ca:	2b00      	cmp	r3, #0
    79cc:	d10c      	bne.n	79e8 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    79ce:	4b09      	ldr	r3, [pc, #36]	; (79f4 <_extint_get_eic_from_channel+0x48>)
    79d0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    79d2:	230f      	movs	r3, #15
    79d4:	18fb      	adds	r3, r7, r3
    79d6:	781b      	ldrb	r3, [r3, #0]
    79d8:	009b      	lsls	r3, r3, #2
    79da:	2210      	movs	r2, #16
    79dc:	4694      	mov	ip, r2
    79de:	44bc      	add	ip, r7
    79e0:	4463      	add	r3, ip
    79e2:	3b08      	subs	r3, #8
    79e4:	681b      	ldr	r3, [r3, #0]
    79e6:	e000      	b.n	79ea <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    79e8:	2300      	movs	r3, #0
	}
}
    79ea:	0018      	movs	r0, r3
    79ec:	46bd      	mov	sp, r7
    79ee:	b004      	add	sp, #16
    79f0:	bd80      	pop	{r7, pc}
    79f2:	46c0      	nop			; (mov r8, r8)
    79f4:	40001800 	.word	0x40001800

000079f8 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    79f8:	b580      	push	{r7, lr}
    79fa:	b082      	sub	sp, #8
    79fc:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    79fe:	4b0f      	ldr	r3, [pc, #60]	; (7a3c <extint_is_syncing+0x44>)
    7a00:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7a02:	2300      	movs	r3, #0
    7a04:	607b      	str	r3, [r7, #4]
    7a06:	e011      	b.n	7a2c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    7a08:	687b      	ldr	r3, [r7, #4]
    7a0a:	009b      	lsls	r3, r3, #2
    7a0c:	2208      	movs	r2, #8
    7a0e:	4694      	mov	ip, r2
    7a10:	44bc      	add	ip, r7
    7a12:	4463      	add	r3, ip
    7a14:	3b08      	subs	r3, #8
    7a16:	681b      	ldr	r3, [r3, #0]
    7a18:	785b      	ldrb	r3, [r3, #1]
    7a1a:	b2db      	uxtb	r3, r3
    7a1c:	b25b      	sxtb	r3, r3
    7a1e:	2b00      	cmp	r3, #0
    7a20:	da01      	bge.n	7a26 <extint_is_syncing+0x2e>
			return true;
    7a22:	2301      	movs	r3, #1
    7a24:	e006      	b.n	7a34 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7a26:	687b      	ldr	r3, [r7, #4]
    7a28:	3301      	adds	r3, #1
    7a2a:	607b      	str	r3, [r7, #4]
    7a2c:	687b      	ldr	r3, [r7, #4]
    7a2e:	2b00      	cmp	r3, #0
    7a30:	d0ea      	beq.n	7a08 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    7a32:	2300      	movs	r3, #0
}
    7a34:	0018      	movs	r0, r3
    7a36:	46bd      	mov	sp, r7
    7a38:	b002      	add	sp, #8
    7a3a:	bd80      	pop	{r7, pc}
    7a3c:	40001800 	.word	0x40001800

00007a40 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    7a40:	b580      	push	{r7, lr}
    7a42:	b084      	sub	sp, #16
    7a44:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    7a46:	4b2d      	ldr	r3, [pc, #180]	; (7afc <_system_extint_init+0xbc>)
    7a48:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    7a4a:	2140      	movs	r1, #64	; 0x40
    7a4c:	2000      	movs	r0, #0
    7a4e:	4b2c      	ldr	r3, [pc, #176]	; (7b00 <_system_extint_init+0xc0>)
    7a50:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7a52:	003b      	movs	r3, r7
    7a54:	0018      	movs	r0, r3
    7a56:	4b2b      	ldr	r3, [pc, #172]	; (7b04 <_system_extint_init+0xc4>)
    7a58:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    7a5a:	003b      	movs	r3, r7
    7a5c:	2200      	movs	r2, #0
    7a5e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    7a60:	003b      	movs	r3, r7
    7a62:	0019      	movs	r1, r3
    7a64:	2005      	movs	r0, #5
    7a66:	4b28      	ldr	r3, [pc, #160]	; (7b08 <_system_extint_init+0xc8>)
    7a68:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    7a6a:	2005      	movs	r0, #5
    7a6c:	4b27      	ldr	r3, [pc, #156]	; (7b0c <_system_extint_init+0xcc>)
    7a6e:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7a70:	2300      	movs	r3, #0
    7a72:	60fb      	str	r3, [r7, #12]
    7a74:	e018      	b.n	7aa8 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    7a76:	68fb      	ldr	r3, [r7, #12]
    7a78:	009b      	lsls	r3, r3, #2
    7a7a:	2210      	movs	r2, #16
    7a7c:	4694      	mov	ip, r2
    7a7e:	44bc      	add	ip, r7
    7a80:	4463      	add	r3, ip
    7a82:	3b0c      	subs	r3, #12
    7a84:	681a      	ldr	r2, [r3, #0]
    7a86:	68fb      	ldr	r3, [r7, #12]
    7a88:	009b      	lsls	r3, r3, #2
    7a8a:	2110      	movs	r1, #16
    7a8c:	468c      	mov	ip, r1
    7a8e:	44bc      	add	ip, r7
    7a90:	4463      	add	r3, ip
    7a92:	3b0c      	subs	r3, #12
    7a94:	681b      	ldr	r3, [r3, #0]
    7a96:	781b      	ldrb	r3, [r3, #0]
    7a98:	b2db      	uxtb	r3, r3
    7a9a:	2101      	movs	r1, #1
    7a9c:	430b      	orrs	r3, r1
    7a9e:	b2db      	uxtb	r3, r3
    7aa0:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7aa2:	68fb      	ldr	r3, [r7, #12]
    7aa4:	3301      	adds	r3, #1
    7aa6:	60fb      	str	r3, [r7, #12]
    7aa8:	68fb      	ldr	r3, [r7, #12]
    7aaa:	2b00      	cmp	r3, #0
    7aac:	d0e3      	beq.n	7a76 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    7aae:	46c0      	nop			; (mov r8, r8)
    7ab0:	4b17      	ldr	r3, [pc, #92]	; (7b10 <_system_extint_init+0xd0>)
    7ab2:	4798      	blx	r3
    7ab4:	1e03      	subs	r3, r0, #0
    7ab6:	d1fb      	bne.n	7ab0 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    7ab8:	230b      	movs	r3, #11
    7aba:	18fb      	adds	r3, r7, r3
    7abc:	2200      	movs	r2, #0
    7abe:	701a      	strb	r2, [r3, #0]
    7ac0:	e00d      	b.n	7ade <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    7ac2:	230b      	movs	r3, #11
    7ac4:	18fb      	adds	r3, r7, r3
    7ac6:	781a      	ldrb	r2, [r3, #0]
    7ac8:	4b12      	ldr	r3, [pc, #72]	; (7b14 <_system_extint_init+0xd4>)
    7aca:	0092      	lsls	r2, r2, #2
    7acc:	2100      	movs	r1, #0
    7ace:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    7ad0:	230b      	movs	r3, #11
    7ad2:	18fb      	adds	r3, r7, r3
    7ad4:	781a      	ldrb	r2, [r3, #0]
    7ad6:	230b      	movs	r3, #11
    7ad8:	18fb      	adds	r3, r7, r3
    7ada:	3201      	adds	r2, #1
    7adc:	701a      	strb	r2, [r3, #0]
    7ade:	230b      	movs	r3, #11
    7ae0:	18fb      	adds	r3, r7, r3
    7ae2:	781b      	ldrb	r3, [r3, #0]
    7ae4:	2b0f      	cmp	r3, #15
    7ae6:	d9ec      	bls.n	7ac2 <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    7ae8:	2004      	movs	r0, #4
    7aea:	4b0b      	ldr	r3, [pc, #44]	; (7b18 <_system_extint_init+0xd8>)
    7aec:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    7aee:	4b0b      	ldr	r3, [pc, #44]	; (7b1c <_system_extint_init+0xdc>)
    7af0:	4798      	blx	r3
}
    7af2:	46c0      	nop			; (mov r8, r8)
    7af4:	46bd      	mov	sp, r7
    7af6:	b004      	add	sp, #16
    7af8:	bd80      	pop	{r7, pc}
    7afa:	46c0      	nop			; (mov r8, r8)
    7afc:	40001800 	.word	0x40001800
    7b00:	000078fd 	.word	0x000078fd
    7b04:	000078e5 	.word	0x000078e5
    7b08:	0000a979 	.word	0x0000a979
    7b0c:	0000a9bd 	.word	0x0000a9bd
    7b10:	000079f9 	.word	0x000079f9
    7b14:	20004724 	.word	0x20004724
    7b18:	00007981 	.word	0x00007981
    7b1c:	00007b21 	.word	0x00007b21

00007b20 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    7b20:	b580      	push	{r7, lr}
    7b22:	b082      	sub	sp, #8
    7b24:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    7b26:	4b15      	ldr	r3, [pc, #84]	; (7b7c <_extint_enable+0x5c>)
    7b28:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7b2a:	2300      	movs	r3, #0
    7b2c:	607b      	str	r3, [r7, #4]
    7b2e:	e018      	b.n	7b62 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    7b30:	687b      	ldr	r3, [r7, #4]
    7b32:	009b      	lsls	r3, r3, #2
    7b34:	2208      	movs	r2, #8
    7b36:	4694      	mov	ip, r2
    7b38:	44bc      	add	ip, r7
    7b3a:	4463      	add	r3, ip
    7b3c:	3b08      	subs	r3, #8
    7b3e:	681a      	ldr	r2, [r3, #0]
    7b40:	687b      	ldr	r3, [r7, #4]
    7b42:	009b      	lsls	r3, r3, #2
    7b44:	2108      	movs	r1, #8
    7b46:	468c      	mov	ip, r1
    7b48:	44bc      	add	ip, r7
    7b4a:	4463      	add	r3, ip
    7b4c:	3b08      	subs	r3, #8
    7b4e:	681b      	ldr	r3, [r3, #0]
    7b50:	781b      	ldrb	r3, [r3, #0]
    7b52:	b2db      	uxtb	r3, r3
    7b54:	2102      	movs	r1, #2
    7b56:	430b      	orrs	r3, r1
    7b58:	b2db      	uxtb	r3, r3
    7b5a:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    7b5c:	687b      	ldr	r3, [r7, #4]
    7b5e:	3301      	adds	r3, #1
    7b60:	607b      	str	r3, [r7, #4]
    7b62:	687b      	ldr	r3, [r7, #4]
    7b64:	2b00      	cmp	r3, #0
    7b66:	d0e3      	beq.n	7b30 <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    7b68:	46c0      	nop			; (mov r8, r8)
    7b6a:	4b05      	ldr	r3, [pc, #20]	; (7b80 <_extint_enable+0x60>)
    7b6c:	4798      	blx	r3
    7b6e:	1e03      	subs	r3, r0, #0
    7b70:	d1fb      	bne.n	7b6a <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    7b72:	46c0      	nop			; (mov r8, r8)
    7b74:	46bd      	mov	sp, r7
    7b76:	b002      	add	sp, #8
    7b78:	bd80      	pop	{r7, pc}
    7b7a:	46c0      	nop			; (mov r8, r8)
    7b7c:	40001800 	.word	0x40001800
    7b80:	000079f9 	.word	0x000079f9

00007b84 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    7b84:	b580      	push	{r7, lr}
    7b86:	b082      	sub	sp, #8
    7b88:	af00      	add	r7, sp, #0
    7b8a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    7b8c:	687b      	ldr	r3, [r7, #4]
    7b8e:	2200      	movs	r2, #0
    7b90:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    7b92:	687b      	ldr	r3, [r7, #4]
    7b94:	2200      	movs	r2, #0
    7b96:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    7b98:	687b      	ldr	r3, [r7, #4]
    7b9a:	2201      	movs	r2, #1
    7b9c:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    7b9e:	687b      	ldr	r3, [r7, #4]
    7ba0:	2201      	movs	r2, #1
    7ba2:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    7ba4:	687b      	ldr	r3, [r7, #4]
    7ba6:	2200      	movs	r2, #0
    7ba8:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    7baa:	687b      	ldr	r3, [r7, #4]
    7bac:	2202      	movs	r2, #2
    7bae:	72da      	strb	r2, [r3, #11]
}
    7bb0:	46c0      	nop			; (mov r8, r8)
    7bb2:	46bd      	mov	sp, r7
    7bb4:	b002      	add	sp, #8
    7bb6:	bd80      	pop	{r7, pc}

00007bb8 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    7bb8:	b580      	push	{r7, lr}
    7bba:	b086      	sub	sp, #24
    7bbc:	af00      	add	r7, sp, #0
    7bbe:	0002      	movs	r2, r0
    7bc0:	6039      	str	r1, [r7, #0]
    7bc2:	1dfb      	adds	r3, r7, #7
    7bc4:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    7bc6:	2308      	movs	r3, #8
    7bc8:	18fb      	adds	r3, r7, r3
    7bca:	0018      	movs	r0, r3
    7bcc:	4b36      	ldr	r3, [pc, #216]	; (7ca8 <extint_chan_set_config+0xf0>)
    7bce:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    7bd0:	683b      	ldr	r3, [r7, #0]
    7bd2:	685b      	ldr	r3, [r3, #4]
    7bd4:	b2da      	uxtb	r2, r3
    7bd6:	2308      	movs	r3, #8
    7bd8:	18fb      	adds	r3, r7, r3
    7bda:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7bdc:	2308      	movs	r3, #8
    7bde:	18fb      	adds	r3, r7, r3
    7be0:	2200      	movs	r2, #0
    7be2:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    7be4:	683b      	ldr	r3, [r7, #0]
    7be6:	7a1a      	ldrb	r2, [r3, #8]
    7be8:	2308      	movs	r3, #8
    7bea:	18fb      	adds	r3, r7, r3
    7bec:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    7bee:	683b      	ldr	r3, [r7, #0]
    7bf0:	681b      	ldr	r3, [r3, #0]
    7bf2:	b2db      	uxtb	r3, r3
    7bf4:	2208      	movs	r2, #8
    7bf6:	18ba      	adds	r2, r7, r2
    7bf8:	0011      	movs	r1, r2
    7bfa:	0018      	movs	r0, r3
    7bfc:	4b2b      	ldr	r3, [pc, #172]	; (7cac <extint_chan_set_config+0xf4>)
    7bfe:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    7c00:	1dfb      	adds	r3, r7, #7
    7c02:	781b      	ldrb	r3, [r3, #0]
    7c04:	0018      	movs	r0, r3
    7c06:	4b2a      	ldr	r3, [pc, #168]	; (7cb0 <extint_chan_set_config+0xf8>)
    7c08:	4798      	blx	r3
    7c0a:	0003      	movs	r3, r0
    7c0c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    7c0e:	1dfb      	adds	r3, r7, #7
    7c10:	781b      	ldrb	r3, [r3, #0]
    7c12:	2207      	movs	r2, #7
    7c14:	4013      	ands	r3, r2
    7c16:	009b      	lsls	r3, r3, #2
    7c18:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    7c1a:	683b      	ldr	r3, [r7, #0]
    7c1c:	7adb      	ldrb	r3, [r3, #11]
    7c1e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    7c20:	683b      	ldr	r3, [r7, #0]
    7c22:	7a9b      	ldrb	r3, [r3, #10]
    7c24:	2b00      	cmp	r3, #0
    7c26:	d003      	beq.n	7c30 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
    7c28:	697b      	ldr	r3, [r7, #20]
    7c2a:	2208      	movs	r2, #8
    7c2c:	4313      	orrs	r3, r2
    7c2e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    7c30:	1dfb      	adds	r3, r7, #7
    7c32:	781b      	ldrb	r3, [r3, #0]
    7c34:	08db      	lsrs	r3, r3, #3
    7c36:	b2db      	uxtb	r3, r3
    7c38:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    7c3a:	1dfb      	adds	r3, r7, #7
    7c3c:	781b      	ldrb	r3, [r3, #0]
    7c3e:	08db      	lsrs	r3, r3, #3
    7c40:	b2db      	uxtb	r3, r3
    7c42:	001a      	movs	r2, r3
    7c44:	693b      	ldr	r3, [r7, #16]
    7c46:	3206      	adds	r2, #6
    7c48:	0092      	lsls	r2, r2, #2
    7c4a:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    7c4c:	210f      	movs	r1, #15
    7c4e:	68fa      	ldr	r2, [r7, #12]
    7c50:	4091      	lsls	r1, r2
    7c52:	000a      	movs	r2, r1
    7c54:	43d2      	mvns	r2, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    7c56:	401a      	ands	r2, r3
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);
    7c58:	6979      	ldr	r1, [r7, #20]
    7c5a:	68fb      	ldr	r3, [r7, #12]
    7c5c:	4099      	lsls	r1, r3
    7c5e:	000b      	movs	r3, r1
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    7c60:	431a      	orrs	r2, r3
    7c62:	0011      	movs	r1, r2
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
    7c64:	693b      	ldr	r3, [r7, #16]
    7c66:	1d82      	adds	r2, r0, #6
    7c68:	0092      	lsls	r2, r2, #2
    7c6a:	50d1      	str	r1, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
			(new_config << config_pos);

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    7c6c:	683b      	ldr	r3, [r7, #0]
    7c6e:	7a5b      	ldrb	r3, [r3, #9]
    7c70:	2b00      	cmp	r3, #0
    7c72:	d00a      	beq.n	7c8a <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    7c74:	693b      	ldr	r3, [r7, #16]
    7c76:	695a      	ldr	r2, [r3, #20]
    7c78:	1dfb      	adds	r3, r7, #7
    7c7a:	781b      	ldrb	r3, [r3, #0]
    7c7c:	2101      	movs	r1, #1
    7c7e:	4099      	lsls	r1, r3
    7c80:	000b      	movs	r3, r1
    7c82:	431a      	orrs	r2, r3
    7c84:	693b      	ldr	r3, [r7, #16]
    7c86:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    7c88:	e00a      	b.n	7ca0 <extint_chan_set_config+0xe8>

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    7c8a:	693b      	ldr	r3, [r7, #16]
    7c8c:	695b      	ldr	r3, [r3, #20]
    7c8e:	1dfa      	adds	r2, r7, #7
    7c90:	7812      	ldrb	r2, [r2, #0]
    7c92:	2101      	movs	r1, #1
    7c94:	4091      	lsls	r1, r2
    7c96:	000a      	movs	r2, r1
    7c98:	43d2      	mvns	r2, r2
    7c9a:	401a      	ands	r2, r3
    7c9c:	693b      	ldr	r3, [r7, #16]
    7c9e:	615a      	str	r2, [r3, #20]
	}
}
    7ca0:	46c0      	nop			; (mov r8, r8)
    7ca2:	46bd      	mov	sp, r7
    7ca4:	b006      	add	sp, #24
    7ca6:	bd80      	pop	{r7, pc}
    7ca8:	00007959 	.word	0x00007959
    7cac:	0000ac65 	.word	0x0000ac65
    7cb0:	000079ad 	.word	0x000079ad

00007cb4 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    7cb4:	b580      	push	{r7, lr}
    7cb6:	b082      	sub	sp, #8
    7cb8:	af00      	add	r7, sp, #0
    7cba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7cbc:	687b      	ldr	r3, [r7, #4]
    7cbe:	2280      	movs	r2, #128	; 0x80
    7cc0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7cc2:	687b      	ldr	r3, [r7, #4]
    7cc4:	2200      	movs	r2, #0
    7cc6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7cc8:	687b      	ldr	r3, [r7, #4]
    7cca:	2201      	movs	r2, #1
    7ccc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7cce:	687b      	ldr	r3, [r7, #4]
    7cd0:	2200      	movs	r2, #0
    7cd2:	70da      	strb	r2, [r3, #3]
}
    7cd4:	46c0      	nop			; (mov r8, r8)
    7cd6:	46bd      	mov	sp, r7
    7cd8:	b002      	add	sp, #8
    7cda:	bd80      	pop	{r7, pc}

00007cdc <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7cdc:	b580      	push	{r7, lr}
    7cde:	b084      	sub	sp, #16
    7ce0:	af00      	add	r7, sp, #0
    7ce2:	0002      	movs	r2, r0
    7ce4:	6039      	str	r1, [r7, #0]
    7ce6:	1dfb      	adds	r3, r7, #7
    7ce8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    7cea:	230c      	movs	r3, #12
    7cec:	18fb      	adds	r3, r7, r3
    7cee:	0018      	movs	r0, r3
    7cf0:	4b10      	ldr	r3, [pc, #64]	; (7d34 <port_pin_set_config+0x58>)
    7cf2:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    7cf4:	230c      	movs	r3, #12
    7cf6:	18fb      	adds	r3, r7, r3
    7cf8:	2280      	movs	r2, #128	; 0x80
    7cfa:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7cfc:	683b      	ldr	r3, [r7, #0]
    7cfe:	781a      	ldrb	r2, [r3, #0]
    7d00:	230c      	movs	r3, #12
    7d02:	18fb      	adds	r3, r7, r3
    7d04:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    7d06:	683b      	ldr	r3, [r7, #0]
    7d08:	785a      	ldrb	r2, [r3, #1]
    7d0a:	230c      	movs	r3, #12
    7d0c:	18fb      	adds	r3, r7, r3
    7d0e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    7d10:	683b      	ldr	r3, [r7, #0]
    7d12:	789a      	ldrb	r2, [r3, #2]
    7d14:	230c      	movs	r3, #12
    7d16:	18fb      	adds	r3, r7, r3
    7d18:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    7d1a:	230c      	movs	r3, #12
    7d1c:	18fa      	adds	r2, r7, r3
    7d1e:	1dfb      	adds	r3, r7, #7
    7d20:	781b      	ldrb	r3, [r3, #0]
    7d22:	0011      	movs	r1, r2
    7d24:	0018      	movs	r0, r3
    7d26:	4b04      	ldr	r3, [pc, #16]	; (7d38 <port_pin_set_config+0x5c>)
    7d28:	4798      	blx	r3
}
    7d2a:	46c0      	nop			; (mov r8, r8)
    7d2c:	46bd      	mov	sp, r7
    7d2e:	b004      	add	sp, #16
    7d30:	bd80      	pop	{r7, pc}
    7d32:	46c0      	nop			; (mov r8, r8)
    7d34:	00007cb5 	.word	0x00007cb5
    7d38:	0000ac65 	.word	0x0000ac65

00007d3c <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    7d3c:	b580      	push	{r7, lr}
    7d3e:	b086      	sub	sp, #24
    7d40:	af00      	add	r7, sp, #0
    7d42:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    7d44:	4b28      	ldr	r3, [pc, #160]	; (7de8 <_rtc_interrupt_handler+0xac>)
    7d46:	687a      	ldr	r2, [r7, #4]
    7d48:	0092      	lsls	r2, r2, #2
    7d4a:	58d3      	ldr	r3, [r2, r3]
    7d4c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    7d4e:	697b      	ldr	r3, [r7, #20]
    7d50:	681b      	ldr	r3, [r3, #0]
    7d52:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    7d54:	230e      	movs	r3, #14
    7d56:	18fb      	adds	r3, r7, r3
    7d58:	697a      	ldr	r2, [r7, #20]
    7d5a:	8a52      	ldrh	r2, [r2, #18]
    7d5c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    7d5e:	697b      	ldr	r3, [r7, #20]
    7d60:	8a1b      	ldrh	r3, [r3, #16]
    7d62:	b29a      	uxth	r2, r3
    7d64:	230e      	movs	r3, #14
    7d66:	18fb      	adds	r3, r7, r3
    7d68:	210e      	movs	r1, #14
    7d6a:	1879      	adds	r1, r7, r1
    7d6c:	8809      	ldrh	r1, [r1, #0]
    7d6e:	400a      	ands	r2, r1
    7d70:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    7d72:	693b      	ldr	r3, [r7, #16]
    7d74:	7a1b      	ldrb	r3, [r3, #8]
    7d76:	b2da      	uxtb	r2, r3
    7d78:	230c      	movs	r3, #12
    7d7a:	18fb      	adds	r3, r7, r3
    7d7c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    7d7e:	693b      	ldr	r3, [r7, #16]
    7d80:	79db      	ldrb	r3, [r3, #7]
    7d82:	b2db      	uxtb	r3, r3
    7d84:	b29a      	uxth	r2, r3
    7d86:	230c      	movs	r3, #12
    7d88:	18fb      	adds	r3, r7, r3
    7d8a:	210c      	movs	r1, #12
    7d8c:	1879      	adds	r1, r7, r1
    7d8e:	8809      	ldrh	r1, [r1, #0]
    7d90:	400a      	ands	r2, r1
    7d92:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    7d94:	230c      	movs	r3, #12
    7d96:	18fb      	adds	r3, r7, r3
    7d98:	881b      	ldrh	r3, [r3, #0]
    7d9a:	2280      	movs	r2, #128	; 0x80
    7d9c:	4013      	ands	r3, r2
    7d9e:	d00c      	beq.n	7dba <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    7da0:	230e      	movs	r3, #14
    7da2:	18fb      	adds	r3, r7, r3
    7da4:	881b      	ldrh	r3, [r3, #0]
    7da6:	2202      	movs	r2, #2
    7da8:	4013      	ands	r3, r2
    7daa:	d002      	beq.n	7db2 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    7dac:	697b      	ldr	r3, [r7, #20]
    7dae:	68db      	ldr	r3, [r3, #12]
    7db0:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    7db2:	693b      	ldr	r3, [r7, #16]
    7db4:	2280      	movs	r2, #128	; 0x80
    7db6:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    7db8:	e011      	b.n	7dde <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    7dba:	230c      	movs	r3, #12
    7dbc:	18fb      	adds	r3, r7, r3
    7dbe:	881b      	ldrh	r3, [r3, #0]
    7dc0:	2201      	movs	r2, #1
    7dc2:	4013      	ands	r3, r2
    7dc4:	d00b      	beq.n	7dde <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    7dc6:	230e      	movs	r3, #14
    7dc8:	18fb      	adds	r3, r7, r3
    7dca:	881b      	ldrh	r3, [r3, #0]
    7dcc:	2201      	movs	r2, #1
    7dce:	4013      	ands	r3, r2
    7dd0:	d002      	beq.n	7dd8 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    7dd2:	697b      	ldr	r3, [r7, #20]
    7dd4:	689b      	ldr	r3, [r3, #8]
    7dd6:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    7dd8:	693b      	ldr	r3, [r7, #16]
    7dda:	2201      	movs	r2, #1
    7ddc:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    7dde:	46c0      	nop			; (mov r8, r8)
    7de0:	46bd      	mov	sp, r7
    7de2:	b006      	add	sp, #24
    7de4:	bd80      	pop	{r7, pc}
    7de6:	46c0      	nop			; (mov r8, r8)
    7de8:	20004764 	.word	0x20004764

00007dec <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    7dec:	b580      	push	{r7, lr}
    7dee:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    7df0:	2000      	movs	r0, #0
    7df2:	4b02      	ldr	r3, [pc, #8]	; (7dfc <RTC_Handler+0x10>)
    7df4:	4798      	blx	r3
}
    7df6:	46c0      	nop			; (mov r8, r8)
    7df8:	46bd      	mov	sp, r7
    7dfa:	bd80      	pop	{r7, pc}
    7dfc:	00007d3d 	.word	0x00007d3d

00007e00 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    7e00:	b580      	push	{r7, lr}
    7e02:	b082      	sub	sp, #8
    7e04:	af00      	add	r7, sp, #0
    7e06:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    7e08:	687b      	ldr	r3, [r7, #4]
    7e0a:	2200      	movs	r2, #0
    7e0c:	701a      	strb	r2, [r3, #0]
}
    7e0e:	46c0      	nop			; (mov r8, r8)
    7e10:	46bd      	mov	sp, r7
    7e12:	b002      	add	sp, #8
    7e14:	bd80      	pop	{r7, pc}
    7e16:	46c0      	nop			; (mov r8, r8)

00007e18 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    7e18:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e1a:	b08d      	sub	sp, #52	; 0x34
    7e1c:	af00      	add	r7, sp, #0
    7e1e:	60b8      	str	r0, [r7, #8]
    7e20:	60f9      	str	r1, [r7, #12]
    7e22:	603a      	str	r2, [r7, #0]
    7e24:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    7e26:	2300      	movs	r3, #0
    7e28:	2400      	movs	r4, #0
    7e2a:	623b      	str	r3, [r7, #32]
    7e2c:	627c      	str	r4, [r7, #36]	; 0x24
    7e2e:	2300      	movs	r3, #0
    7e30:	2400      	movs	r4, #0
    7e32:	61bb      	str	r3, [r7, #24]
    7e34:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    7e36:	233f      	movs	r3, #63	; 0x3f
    7e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    7e3a:	e053      	b.n	7ee4 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    7e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7e3e:	3b20      	subs	r3, #32
    7e40:	2b00      	cmp	r3, #0
    7e42:	db04      	blt.n	7e4e <long_division+0x36>
    7e44:	2201      	movs	r2, #1
    7e46:	409a      	lsls	r2, r3
    7e48:	0013      	movs	r3, r2
    7e4a:	617b      	str	r3, [r7, #20]
    7e4c:	e00b      	b.n	7e66 <long_division+0x4e>
    7e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7e50:	2220      	movs	r2, #32
    7e52:	1ad3      	subs	r3, r2, r3
    7e54:	2201      	movs	r2, #1
    7e56:	40da      	lsrs	r2, r3
    7e58:	0013      	movs	r3, r2
    7e5a:	2100      	movs	r1, #0
    7e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7e5e:	4091      	lsls	r1, r2
    7e60:	000a      	movs	r2, r1
    7e62:	4313      	orrs	r3, r2
    7e64:	617b      	str	r3, [r7, #20]
    7e66:	2201      	movs	r2, #1
    7e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7e6a:	409a      	lsls	r2, r3
    7e6c:	0013      	movs	r3, r2
    7e6e:	613b      	str	r3, [r7, #16]

		r = r << 1;
    7e70:	69bb      	ldr	r3, [r7, #24]
    7e72:	69fc      	ldr	r4, [r7, #28]
    7e74:	18db      	adds	r3, r3, r3
    7e76:	4164      	adcs	r4, r4
    7e78:	61bb      	str	r3, [r7, #24]
    7e7a:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    7e7c:	68bb      	ldr	r3, [r7, #8]
    7e7e:	693a      	ldr	r2, [r7, #16]
    7e80:	401a      	ands	r2, r3
    7e82:	0015      	movs	r5, r2
    7e84:	68fb      	ldr	r3, [r7, #12]
    7e86:	697a      	ldr	r2, [r7, #20]
    7e88:	401a      	ands	r2, r3
    7e8a:	0016      	movs	r6, r2
    7e8c:	002b      	movs	r3, r5
    7e8e:	4333      	orrs	r3, r6
    7e90:	d007      	beq.n	7ea2 <long_division+0x8a>
			r |= 0x01;
    7e92:	69bb      	ldr	r3, [r7, #24]
    7e94:	2201      	movs	r2, #1
    7e96:	4313      	orrs	r3, r2
    7e98:	61bb      	str	r3, [r7, #24]
    7e9a:	69fb      	ldr	r3, [r7, #28]
    7e9c:	2200      	movs	r2, #0
    7e9e:	4313      	orrs	r3, r2
    7ea0:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    7ea2:	687a      	ldr	r2, [r7, #4]
    7ea4:	69fb      	ldr	r3, [r7, #28]
    7ea6:	429a      	cmp	r2, r3
    7ea8:	d819      	bhi.n	7ede <long_division+0xc6>
    7eaa:	687a      	ldr	r2, [r7, #4]
    7eac:	69fb      	ldr	r3, [r7, #28]
    7eae:	429a      	cmp	r2, r3
    7eb0:	d103      	bne.n	7eba <long_division+0xa2>
    7eb2:	683a      	ldr	r2, [r7, #0]
    7eb4:	69bb      	ldr	r3, [r7, #24]
    7eb6:	429a      	cmp	r2, r3
    7eb8:	d811      	bhi.n	7ede <long_division+0xc6>
			r = r - d;
    7eba:	69b9      	ldr	r1, [r7, #24]
    7ebc:	69fa      	ldr	r2, [r7, #28]
    7ebe:	683b      	ldr	r3, [r7, #0]
    7ec0:	687c      	ldr	r4, [r7, #4]
    7ec2:	1ac9      	subs	r1, r1, r3
    7ec4:	41a2      	sbcs	r2, r4
    7ec6:	000b      	movs	r3, r1
    7ec8:	0014      	movs	r4, r2
    7eca:	61bb      	str	r3, [r7, #24]
    7ecc:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    7ece:	6a3a      	ldr	r2, [r7, #32]
    7ed0:	693b      	ldr	r3, [r7, #16]
    7ed2:	4313      	orrs	r3, r2
    7ed4:	623b      	str	r3, [r7, #32]
    7ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    7ed8:	697b      	ldr	r3, [r7, #20]
    7eda:	4313      	orrs	r3, r2
    7edc:	627b      	str	r3, [r7, #36]	; 0x24
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
    7ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ee0:	3b01      	subs	r3, #1
    7ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    7ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ee6:	2b00      	cmp	r3, #0
    7ee8:	daa8      	bge.n	7e3c <long_division+0x24>
			r = r - d;
			q |= bit_shift;
		}
	}

	return q;
    7eea:	6a3b      	ldr	r3, [r7, #32]
    7eec:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    7eee:	0018      	movs	r0, r3
    7ef0:	0021      	movs	r1, r4
    7ef2:	46bd      	mov	sp, r7
    7ef4:	b00d      	add	sp, #52	; 0x34
    7ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007ef8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    7ef8:	b580      	push	{r7, lr}
    7efa:	b086      	sub	sp, #24
    7efc:	af00      	add	r7, sp, #0
    7efe:	60f8      	str	r0, [r7, #12]
    7f00:	60b9      	str	r1, [r7, #8]
    7f02:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    7f04:	2316      	movs	r3, #22
    7f06:	18fb      	adds	r3, r7, r3
    7f08:	2200      	movs	r2, #0
    7f0a:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    7f0c:	68bb      	ldr	r3, [r7, #8]
    7f0e:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7f10:	68bb      	ldr	r3, [r7, #8]
    7f12:	085a      	lsrs	r2, r3, #1
    7f14:	68fb      	ldr	r3, [r7, #12]
    7f16:	429a      	cmp	r2, r3
    7f18:	d201      	bcs.n	7f1e <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7f1a:	2340      	movs	r3, #64	; 0x40
    7f1c:	e026      	b.n	7f6c <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    7f1e:	68bb      	ldr	r3, [r7, #8]
    7f20:	085b      	lsrs	r3, r3, #1
    7f22:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    7f24:	e00a      	b.n	7f3c <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    7f26:	693a      	ldr	r2, [r7, #16]
    7f28:	68fb      	ldr	r3, [r7, #12]
    7f2a:	1ad3      	subs	r3, r2, r3
    7f2c:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    7f2e:	2316      	movs	r3, #22
    7f30:	18fb      	adds	r3, r7, r3
    7f32:	881a      	ldrh	r2, [r3, #0]
    7f34:	2316      	movs	r3, #22
    7f36:	18fb      	adds	r3, r7, r3
    7f38:	3201      	adds	r2, #1
    7f3a:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    7f3c:	693a      	ldr	r2, [r7, #16]
    7f3e:	68fb      	ldr	r3, [r7, #12]
    7f40:	429a      	cmp	r2, r3
    7f42:	d2f0      	bcs.n	7f26 <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    7f44:	2316      	movs	r3, #22
    7f46:	18fb      	adds	r3, r7, r3
    7f48:	2216      	movs	r2, #22
    7f4a:	18ba      	adds	r2, r7, r2
    7f4c:	8812      	ldrh	r2, [r2, #0]
    7f4e:	3a01      	subs	r2, #1
    7f50:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    7f52:	2316      	movs	r3, #22
    7f54:	18fb      	adds	r3, r7, r3
    7f56:	881b      	ldrh	r3, [r3, #0]
    7f58:	2bff      	cmp	r3, #255	; 0xff
    7f5a:	d901      	bls.n	7f60 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7f5c:	2340      	movs	r3, #64	; 0x40
    7f5e:	e005      	b.n	7f6c <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	2216      	movs	r2, #22
    7f64:	18ba      	adds	r2, r7, r2
    7f66:	8812      	ldrh	r2, [r2, #0]
    7f68:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    7f6a:	2300      	movs	r3, #0
	}
}
    7f6c:	0018      	movs	r0, r3
    7f6e:	46bd      	mov	sp, r7
    7f70:	b006      	add	sp, #24
    7f72:	bd80      	pop	{r7, pc}

00007f74 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    7f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f76:	b09d      	sub	sp, #116	; 0x74
    7f78:	af00      	add	r7, sp, #0
    7f7a:	63f8      	str	r0, [r7, #60]	; 0x3c
    7f7c:	63b9      	str	r1, [r7, #56]	; 0x38
    7f7e:	637a      	str	r2, [r7, #52]	; 0x34
    7f80:	2233      	movs	r2, #51	; 0x33
    7f82:	18ba      	adds	r2, r7, r2
    7f84:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    7f86:	2300      	movs	r3, #0
    7f88:	2400      	movs	r4, #0
    7f8a:	65bb      	str	r3, [r7, #88]	; 0x58
    7f8c:	65fc      	str	r4, [r7, #92]	; 0x5c
	uint64_t scale = 0;
    7f8e:	2300      	movs	r3, #0
    7f90:	2400      	movs	r4, #0
    7f92:	653b      	str	r3, [r7, #80]	; 0x50
    7f94:	657c      	str	r4, [r7, #84]	; 0x54
	uint64_t baud_calculated = 0;
    7f96:	2300      	movs	r3, #0
    7f98:	2400      	movs	r4, #0
    7f9a:	66bb      	str	r3, [r7, #104]	; 0x68
    7f9c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    7f9e:	2300      	movs	r3, #0
    7fa0:	663b      	str	r3, [r7, #96]	; 0x60
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    7fa2:	2358      	movs	r3, #88	; 0x58
    7fa4:	2230      	movs	r2, #48	; 0x30
    7fa6:	4694      	mov	ip, r2
    7fa8:	44bc      	add	ip, r7
    7faa:	4463      	add	r3, ip
    7fac:	781a      	ldrb	r2, [r3, #0]
    7fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7fb0:	435a      	muls	r2, r3
    7fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7fb4:	429a      	cmp	r2, r3
    7fb6:	d901      	bls.n	7fbc <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    7fb8:	2340      	movs	r3, #64	; 0x40
    7fba:	e0c6      	b.n	814a <_sercom_get_async_baud_val+0x1d6>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    7fbc:	2333      	movs	r3, #51	; 0x33
    7fbe:	18fb      	adds	r3, r7, r3
    7fc0:	781b      	ldrb	r3, [r3, #0]
    7fc2:	2b00      	cmp	r3, #0
    7fc4:	d13d      	bne.n	8042 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    7fc6:	2358      	movs	r3, #88	; 0x58
    7fc8:	2230      	movs	r2, #48	; 0x30
    7fca:	4694      	mov	ip, r2
    7fcc:	44bc      	add	ip, r7
    7fce:	4463      	add	r3, ip
    7fd0:	781b      	ldrb	r3, [r3, #0]
    7fd2:	b2db      	uxtb	r3, r3
    7fd4:	613b      	str	r3, [r7, #16]
    7fd6:	2300      	movs	r3, #0
    7fd8:	617b      	str	r3, [r7, #20]
    7fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7fdc:	60bb      	str	r3, [r7, #8]
    7fde:	2300      	movs	r3, #0
    7fe0:	60fb      	str	r3, [r7, #12]
    7fe2:	4c5c      	ldr	r4, [pc, #368]	; (8154 <_sercom_get_async_baud_val+0x1e0>)
    7fe4:	68ba      	ldr	r2, [r7, #8]
    7fe6:	68fb      	ldr	r3, [r7, #12]
    7fe8:	6938      	ldr	r0, [r7, #16]
    7fea:	6979      	ldr	r1, [r7, #20]
    7fec:	47a0      	blx	r4
    7fee:	0003      	movs	r3, r0
    7ff0:	000c      	movs	r4, r1
    7ff2:	001b      	movs	r3, r3
    7ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
    7ff6:	2300      	movs	r3, #0
    7ff8:	64bb      	str	r3, [r7, #72]	; 0x48
		ratio = long_division(temp1, peripheral_clock);
    7ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7ffc:	603b      	str	r3, [r7, #0]
    7ffe:	2300      	movs	r3, #0
    8000:	607b      	str	r3, [r7, #4]
    8002:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    8004:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    8006:	683a      	ldr	r2, [r7, #0]
    8008:	687b      	ldr	r3, [r7, #4]
    800a:	4c53      	ldr	r4, [pc, #332]	; (8158 <_sercom_get_async_baud_val+0x1e4>)
    800c:	47a0      	blx	r4
    800e:	0003      	movs	r3, r0
    8010:	000c      	movs	r4, r1
    8012:	65bb      	str	r3, [r7, #88]	; 0x58
    8014:	65fc      	str	r4, [r7, #92]	; 0x5c
		scale = ((uint64_t)1 << SHIFT) - ratio;
    8016:	2100      	movs	r1, #0
    8018:	2201      	movs	r2, #1
    801a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    801c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    801e:	1ac9      	subs	r1, r1, r3
    8020:	41a2      	sbcs	r2, r4
    8022:	000b      	movs	r3, r1
    8024:	0014      	movs	r4, r2
    8026:	653b      	str	r3, [r7, #80]	; 0x50
    8028:	657c      	str	r4, [r7, #84]	; 0x54
		baud_calculated = (65536 * scale) >> SHIFT;
    802a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    802c:	0c1b      	lsrs	r3, r3, #16
    802e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    8030:	0416      	lsls	r6, r2, #16
    8032:	431e      	orrs	r6, r3
    8034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    8036:	041d      	lsls	r5, r3, #16
    8038:	0033      	movs	r3, r6
    803a:	66bb      	str	r3, [r7, #104]	; 0x68
    803c:	2300      	movs	r3, #0
    803e:	66fb      	str	r3, [r7, #108]	; 0x6c
    8040:	e07d      	b.n	813e <_sercom_get_async_baud_val+0x1ca>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    8042:	2333      	movs	r3, #51	; 0x33
    8044:	18fb      	adds	r3, r7, r3
    8046:	781b      	ldrb	r3, [r3, #0]
    8048:	2b01      	cmp	r3, #1
    804a:	d000      	beq.n	804e <_sercom_get_async_baud_val+0xda>
    804c:	e077      	b.n	813e <_sercom_get_async_baud_val+0x1ca>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    804e:	2337      	movs	r3, #55	; 0x37
    8050:	2230      	movs	r2, #48	; 0x30
    8052:	4694      	mov	ip, r2
    8054:	44bc      	add	ip, r7
    8056:	4463      	add	r3, ip
    8058:	2200      	movs	r2, #0
    805a:	701a      	strb	r2, [r3, #0]
    805c:	e04e      	b.n	80fc <_sercom_get_async_baud_val+0x188>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
    805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8060:	62bb      	str	r3, [r7, #40]	; 0x28
    8062:	2300      	movs	r3, #0
    8064:	62fb      	str	r3, [r7, #44]	; 0x2c
    8066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    8068:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    806a:	0003      	movs	r3, r0
    806c:	0f5b      	lsrs	r3, r3, #29
    806e:	000a      	movs	r2, r1
    8070:	00d2      	lsls	r2, r2, #3
    8072:	4313      	orrs	r3, r2
    8074:	64fb      	str	r3, [r7, #76]	; 0x4c
    8076:	0003      	movs	r3, r0
    8078:	00db      	lsls	r3, r3, #3
    807a:	64bb      	str	r3, [r7, #72]	; 0x48
			temp2 = ((uint64_t)baudrate * sample_num);
    807c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    807e:	623b      	str	r3, [r7, #32]
    8080:	2300      	movs	r3, #0
    8082:	627b      	str	r3, [r7, #36]	; 0x24
    8084:	2358      	movs	r3, #88	; 0x58
    8086:	2230      	movs	r2, #48	; 0x30
    8088:	4694      	mov	ip, r2
    808a:	44bc      	add	ip, r7
    808c:	4463      	add	r3, ip
    808e:	781b      	ldrb	r3, [r3, #0]
    8090:	b2db      	uxtb	r3, r3
    8092:	61bb      	str	r3, [r7, #24]
    8094:	2300      	movs	r3, #0
    8096:	61fb      	str	r3, [r7, #28]
    8098:	4c2e      	ldr	r4, [pc, #184]	; (8154 <_sercom_get_async_baud_val+0x1e0>)
    809a:	69ba      	ldr	r2, [r7, #24]
    809c:	69fb      	ldr	r3, [r7, #28]
    809e:	6a38      	ldr	r0, [r7, #32]
    80a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    80a2:	47a0      	blx	r4
    80a4:	0003      	movs	r3, r0
    80a6:	000c      	movs	r4, r1
    80a8:	643b      	str	r3, [r7, #64]	; 0x40
    80aa:	647c      	str	r4, [r7, #68]	; 0x44
			baud_int = long_division(temp1, temp2);
    80ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    80ae:	6c7c      	ldr	r4, [r7, #68]	; 0x44
    80b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    80b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    80b4:	001a      	movs	r2, r3
    80b6:	0023      	movs	r3, r4
    80b8:	4c27      	ldr	r4, [pc, #156]	; (8158 <_sercom_get_async_baud_val+0x1e4>)
    80ba:	47a0      	blx	r4
    80bc:	0003      	movs	r3, r0
    80be:	000c      	movs	r4, r1
    80c0:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int -= baud_fp;
    80c2:	2337      	movs	r3, #55	; 0x37
    80c4:	2230      	movs	r2, #48	; 0x30
    80c6:	4694      	mov	ip, r2
    80c8:	44bc      	add	ip, r7
    80ca:	4463      	add	r3, ip
    80cc:	781b      	ldrb	r3, [r3, #0]
    80ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    80d0:	1ad3      	subs	r3, r2, r3
    80d2:	663b      	str	r3, [r7, #96]	; 0x60
			baud_int = baud_int / BAUD_FP_MAX;
    80d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    80d6:	08db      	lsrs	r3, r3, #3
    80d8:	663b      	str	r3, [r7, #96]	; 0x60
			if(baud_int < BAUD_INT_MAX) {
    80da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    80dc:	4a1f      	ldr	r2, [pc, #124]	; (815c <_sercom_get_async_baud_val+0x1e8>)
    80de:	4293      	cmp	r3, r2
    80e0:	d915      	bls.n	810e <_sercom_get_async_baud_val+0x19a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
    80e2:	2337      	movs	r3, #55	; 0x37
    80e4:	2230      	movs	r2, #48	; 0x30
    80e6:	4694      	mov	ip, r2
    80e8:	44bc      	add	ip, r7
    80ea:	4463      	add	r3, ip
    80ec:	781a      	ldrb	r2, [r3, #0]
    80ee:	2337      	movs	r3, #55	; 0x37
    80f0:	2130      	movs	r1, #48	; 0x30
    80f2:	468c      	mov	ip, r1
    80f4:	44bc      	add	ip, r7
    80f6:	4463      	add	r3, ip
    80f8:	3201      	adds	r2, #1
    80fa:	701a      	strb	r2, [r3, #0]
    80fc:	2337      	movs	r3, #55	; 0x37
    80fe:	2230      	movs	r2, #48	; 0x30
    8100:	4694      	mov	ip, r2
    8102:	44bc      	add	ip, r7
    8104:	4463      	add	r3, ip
    8106:	781b      	ldrb	r3, [r3, #0]
    8108:	2b07      	cmp	r3, #7
    810a:	d9a8      	bls.n	805e <_sercom_get_async_baud_val+0xea>
    810c:	e000      	b.n	8110 <_sercom_get_async_baud_val+0x19c>
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
    810e:	46c0      	nop			; (mov r8, r8)
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
    8110:	2337      	movs	r3, #55	; 0x37
    8112:	2230      	movs	r2, #48	; 0x30
    8114:	4694      	mov	ip, r2
    8116:	44bc      	add	ip, r7
    8118:	4463      	add	r3, ip
    811a:	781b      	ldrb	r3, [r3, #0]
    811c:	2b08      	cmp	r3, #8
    811e:	d101      	bne.n	8124 <_sercom_get_async_baud_val+0x1b0>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    8120:	2340      	movs	r3, #64	; 0x40
    8122:	e012      	b.n	814a <_sercom_get_async_baud_val+0x1d6>
		}
		baud_calculated = baud_int | (baud_fp << 13);
    8124:	2337      	movs	r3, #55	; 0x37
    8126:	2230      	movs	r2, #48	; 0x30
    8128:	4694      	mov	ip, r2
    812a:	44bc      	add	ip, r7
    812c:	4463      	add	r3, ip
    812e:	781b      	ldrb	r3, [r3, #0]
    8130:	035b      	lsls	r3, r3, #13
    8132:	001a      	movs	r2, r3
    8134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    8136:	4313      	orrs	r3, r2
    8138:	66bb      	str	r3, [r7, #104]	; 0x68
    813a:	2300      	movs	r3, #0
    813c:	66fb      	str	r3, [r7, #108]	; 0x6c
	}

	*baudval = baud_calculated;
    813e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    8140:	6efc      	ldr	r4, [r7, #108]	; 0x6c
    8142:	b29a      	uxth	r2, r3
    8144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8146:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    8148:	2300      	movs	r3, #0
}
    814a:	0018      	movs	r0, r3
    814c:	46bd      	mov	sp, r7
    814e:	b01d      	add	sp, #116	; 0x74
    8150:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8152:	46c0      	nop			; (mov r8, r8)
    8154:	0000f2c5 	.word	0x0000f2c5
    8158:	00007e19 	.word	0x00007e19
    815c:	00001fff 	.word	0x00001fff

00008160 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    8160:	b580      	push	{r7, lr}
    8162:	b084      	sub	sp, #16
    8164:	af00      	add	r7, sp, #0
    8166:	0002      	movs	r2, r0
    8168:	1dfb      	adds	r3, r7, #7
    816a:	701a      	strb	r2, [r3, #0]
    816c:	1dbb      	adds	r3, r7, #6
    816e:	1c0a      	adds	r2, r1, #0
    8170:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    8172:	4b1a      	ldr	r3, [pc, #104]	; (81dc <sercom_set_gclk_generator+0x7c>)
    8174:	781b      	ldrb	r3, [r3, #0]
    8176:	2201      	movs	r2, #1
    8178:	4053      	eors	r3, r2
    817a:	b2db      	uxtb	r3, r3
    817c:	2b00      	cmp	r3, #0
    817e:	d103      	bne.n	8188 <sercom_set_gclk_generator+0x28>
    8180:	1dbb      	adds	r3, r7, #6
    8182:	781b      	ldrb	r3, [r3, #0]
    8184:	2b00      	cmp	r3, #0
    8186:	d01b      	beq.n	81c0 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8188:	230c      	movs	r3, #12
    818a:	18fb      	adds	r3, r7, r3
    818c:	0018      	movs	r0, r3
    818e:	4b14      	ldr	r3, [pc, #80]	; (81e0 <sercom_set_gclk_generator+0x80>)
    8190:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    8192:	230c      	movs	r3, #12
    8194:	18fb      	adds	r3, r7, r3
    8196:	1dfa      	adds	r2, r7, #7
    8198:	7812      	ldrb	r2, [r2, #0]
    819a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    819c:	230c      	movs	r3, #12
    819e:	18fb      	adds	r3, r7, r3
    81a0:	0019      	movs	r1, r3
    81a2:	2013      	movs	r0, #19
    81a4:	4b0f      	ldr	r3, [pc, #60]	; (81e4 <sercom_set_gclk_generator+0x84>)
    81a6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    81a8:	2013      	movs	r0, #19
    81aa:	4b0f      	ldr	r3, [pc, #60]	; (81e8 <sercom_set_gclk_generator+0x88>)
    81ac:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    81ae:	4b0b      	ldr	r3, [pc, #44]	; (81dc <sercom_set_gclk_generator+0x7c>)
    81b0:	1dfa      	adds	r2, r7, #7
    81b2:	7812      	ldrb	r2, [r2, #0]
    81b4:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    81b6:	4b09      	ldr	r3, [pc, #36]	; (81dc <sercom_set_gclk_generator+0x7c>)
    81b8:	2201      	movs	r2, #1
    81ba:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    81bc:	2300      	movs	r3, #0
    81be:	e008      	b.n	81d2 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    81c0:	4b06      	ldr	r3, [pc, #24]	; (81dc <sercom_set_gclk_generator+0x7c>)
    81c2:	785b      	ldrb	r3, [r3, #1]
    81c4:	1dfa      	adds	r2, r7, #7
    81c6:	7812      	ldrb	r2, [r2, #0]
    81c8:	429a      	cmp	r2, r3
    81ca:	d101      	bne.n	81d0 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    81cc:	2300      	movs	r3, #0
    81ce:	e000      	b.n	81d2 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    81d0:	231d      	movs	r3, #29
}
    81d2:	0018      	movs	r0, r3
    81d4:	46bd      	mov	sp, r7
    81d6:	b004      	add	sp, #16
    81d8:	bd80      	pop	{r7, pc}
    81da:	46c0      	nop			; (mov r8, r8)
    81dc:	200000f8 	.word	0x200000f8
    81e0:	00007e01 	.word	0x00007e01
    81e4:	0000a979 	.word	0x0000a979
    81e8:	0000a9bd 	.word	0x0000a9bd

000081ec <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    81ec:	b580      	push	{r7, lr}
    81ee:	b082      	sub	sp, #8
    81f0:	af00      	add	r7, sp, #0
    81f2:	6078      	str	r0, [r7, #4]
    81f4:	000a      	movs	r2, r1
    81f6:	1cfb      	adds	r3, r7, #3
    81f8:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    81fa:	687b      	ldr	r3, [r7, #4]
    81fc:	4a4d      	ldr	r2, [pc, #308]	; (8334 <_sercom_get_default_pad+0x148>)
    81fe:	4293      	cmp	r3, r2
    8200:	d03f      	beq.n	8282 <_sercom_get_default_pad+0x96>
    8202:	4a4c      	ldr	r2, [pc, #304]	; (8334 <_sercom_get_default_pad+0x148>)
    8204:	4293      	cmp	r3, r2
    8206:	d806      	bhi.n	8216 <_sercom_get_default_pad+0x2a>
    8208:	4a4b      	ldr	r2, [pc, #300]	; (8338 <_sercom_get_default_pad+0x14c>)
    820a:	4293      	cmp	r3, r2
    820c:	d00f      	beq.n	822e <_sercom_get_default_pad+0x42>
    820e:	4a4b      	ldr	r2, [pc, #300]	; (833c <_sercom_get_default_pad+0x150>)
    8210:	4293      	cmp	r3, r2
    8212:	d021      	beq.n	8258 <_sercom_get_default_pad+0x6c>
    8214:	e089      	b.n	832a <_sercom_get_default_pad+0x13e>
    8216:	4a4a      	ldr	r2, [pc, #296]	; (8340 <_sercom_get_default_pad+0x154>)
    8218:	4293      	cmp	r3, r2
    821a:	d100      	bne.n	821e <_sercom_get_default_pad+0x32>
    821c:	e05b      	b.n	82d6 <_sercom_get_default_pad+0xea>
    821e:	4a49      	ldr	r2, [pc, #292]	; (8344 <_sercom_get_default_pad+0x158>)
    8220:	4293      	cmp	r3, r2
    8222:	d100      	bne.n	8226 <_sercom_get_default_pad+0x3a>
    8224:	e06c      	b.n	8300 <_sercom_get_default_pad+0x114>
    8226:	4a48      	ldr	r2, [pc, #288]	; (8348 <_sercom_get_default_pad+0x15c>)
    8228:	4293      	cmp	r3, r2
    822a:	d03f      	beq.n	82ac <_sercom_get_default_pad+0xc0>
    822c:	e07d      	b.n	832a <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    822e:	1cfb      	adds	r3, r7, #3
    8230:	781b      	ldrb	r3, [r3, #0]
    8232:	2b01      	cmp	r3, #1
    8234:	d00a      	beq.n	824c <_sercom_get_default_pad+0x60>
    8236:	dc02      	bgt.n	823e <_sercom_get_default_pad+0x52>
    8238:	2b00      	cmp	r3, #0
    823a:	d005      	beq.n	8248 <_sercom_get_default_pad+0x5c>
    823c:	e075      	b.n	832a <_sercom_get_default_pad+0x13e>
    823e:	2b02      	cmp	r3, #2
    8240:	d006      	beq.n	8250 <_sercom_get_default_pad+0x64>
    8242:	2b03      	cmp	r3, #3
    8244:	d006      	beq.n	8254 <_sercom_get_default_pad+0x68>
    8246:	e070      	b.n	832a <_sercom_get_default_pad+0x13e>
    8248:	4b40      	ldr	r3, [pc, #256]	; (834c <_sercom_get_default_pad+0x160>)
    824a:	e06f      	b.n	832c <_sercom_get_default_pad+0x140>
    824c:	4b40      	ldr	r3, [pc, #256]	; (8350 <_sercom_get_default_pad+0x164>)
    824e:	e06d      	b.n	832c <_sercom_get_default_pad+0x140>
    8250:	4b40      	ldr	r3, [pc, #256]	; (8354 <_sercom_get_default_pad+0x168>)
    8252:	e06b      	b.n	832c <_sercom_get_default_pad+0x140>
    8254:	4b40      	ldr	r3, [pc, #256]	; (8358 <_sercom_get_default_pad+0x16c>)
    8256:	e069      	b.n	832c <_sercom_get_default_pad+0x140>
    8258:	1cfb      	adds	r3, r7, #3
    825a:	781b      	ldrb	r3, [r3, #0]
    825c:	2b01      	cmp	r3, #1
    825e:	d00a      	beq.n	8276 <_sercom_get_default_pad+0x8a>
    8260:	dc02      	bgt.n	8268 <_sercom_get_default_pad+0x7c>
    8262:	2b00      	cmp	r3, #0
    8264:	d005      	beq.n	8272 <_sercom_get_default_pad+0x86>
    8266:	e060      	b.n	832a <_sercom_get_default_pad+0x13e>
    8268:	2b02      	cmp	r3, #2
    826a:	d006      	beq.n	827a <_sercom_get_default_pad+0x8e>
    826c:	2b03      	cmp	r3, #3
    826e:	d006      	beq.n	827e <_sercom_get_default_pad+0x92>
    8270:	e05b      	b.n	832a <_sercom_get_default_pad+0x13e>
    8272:	2303      	movs	r3, #3
    8274:	e05a      	b.n	832c <_sercom_get_default_pad+0x140>
    8276:	4b39      	ldr	r3, [pc, #228]	; (835c <_sercom_get_default_pad+0x170>)
    8278:	e058      	b.n	832c <_sercom_get_default_pad+0x140>
    827a:	4b39      	ldr	r3, [pc, #228]	; (8360 <_sercom_get_default_pad+0x174>)
    827c:	e056      	b.n	832c <_sercom_get_default_pad+0x140>
    827e:	4b39      	ldr	r3, [pc, #228]	; (8364 <_sercom_get_default_pad+0x178>)
    8280:	e054      	b.n	832c <_sercom_get_default_pad+0x140>
    8282:	1cfb      	adds	r3, r7, #3
    8284:	781b      	ldrb	r3, [r3, #0]
    8286:	2b01      	cmp	r3, #1
    8288:	d00a      	beq.n	82a0 <_sercom_get_default_pad+0xb4>
    828a:	dc02      	bgt.n	8292 <_sercom_get_default_pad+0xa6>
    828c:	2b00      	cmp	r3, #0
    828e:	d005      	beq.n	829c <_sercom_get_default_pad+0xb0>
    8290:	e04b      	b.n	832a <_sercom_get_default_pad+0x13e>
    8292:	2b02      	cmp	r3, #2
    8294:	d006      	beq.n	82a4 <_sercom_get_default_pad+0xb8>
    8296:	2b03      	cmp	r3, #3
    8298:	d006      	beq.n	82a8 <_sercom_get_default_pad+0xbc>
    829a:	e046      	b.n	832a <_sercom_get_default_pad+0x13e>
    829c:	4b32      	ldr	r3, [pc, #200]	; (8368 <_sercom_get_default_pad+0x17c>)
    829e:	e045      	b.n	832c <_sercom_get_default_pad+0x140>
    82a0:	4b32      	ldr	r3, [pc, #200]	; (836c <_sercom_get_default_pad+0x180>)
    82a2:	e043      	b.n	832c <_sercom_get_default_pad+0x140>
    82a4:	4b32      	ldr	r3, [pc, #200]	; (8370 <_sercom_get_default_pad+0x184>)
    82a6:	e041      	b.n	832c <_sercom_get_default_pad+0x140>
    82a8:	4b32      	ldr	r3, [pc, #200]	; (8374 <_sercom_get_default_pad+0x188>)
    82aa:	e03f      	b.n	832c <_sercom_get_default_pad+0x140>
    82ac:	1cfb      	adds	r3, r7, #3
    82ae:	781b      	ldrb	r3, [r3, #0]
    82b0:	2b01      	cmp	r3, #1
    82b2:	d00a      	beq.n	82ca <_sercom_get_default_pad+0xde>
    82b4:	dc02      	bgt.n	82bc <_sercom_get_default_pad+0xd0>
    82b6:	2b00      	cmp	r3, #0
    82b8:	d005      	beq.n	82c6 <_sercom_get_default_pad+0xda>
    82ba:	e036      	b.n	832a <_sercom_get_default_pad+0x13e>
    82bc:	2b02      	cmp	r3, #2
    82be:	d006      	beq.n	82ce <_sercom_get_default_pad+0xe2>
    82c0:	2b03      	cmp	r3, #3
    82c2:	d006      	beq.n	82d2 <_sercom_get_default_pad+0xe6>
    82c4:	e031      	b.n	832a <_sercom_get_default_pad+0x13e>
    82c6:	4b2c      	ldr	r3, [pc, #176]	; (8378 <_sercom_get_default_pad+0x18c>)
    82c8:	e030      	b.n	832c <_sercom_get_default_pad+0x140>
    82ca:	4b2c      	ldr	r3, [pc, #176]	; (837c <_sercom_get_default_pad+0x190>)
    82cc:	e02e      	b.n	832c <_sercom_get_default_pad+0x140>
    82ce:	4b2c      	ldr	r3, [pc, #176]	; (8380 <_sercom_get_default_pad+0x194>)
    82d0:	e02c      	b.n	832c <_sercom_get_default_pad+0x140>
    82d2:	4b2c      	ldr	r3, [pc, #176]	; (8384 <_sercom_get_default_pad+0x198>)
    82d4:	e02a      	b.n	832c <_sercom_get_default_pad+0x140>
    82d6:	1cfb      	adds	r3, r7, #3
    82d8:	781b      	ldrb	r3, [r3, #0]
    82da:	2b01      	cmp	r3, #1
    82dc:	d00a      	beq.n	82f4 <_sercom_get_default_pad+0x108>
    82de:	dc02      	bgt.n	82e6 <_sercom_get_default_pad+0xfa>
    82e0:	2b00      	cmp	r3, #0
    82e2:	d005      	beq.n	82f0 <_sercom_get_default_pad+0x104>
    82e4:	e021      	b.n	832a <_sercom_get_default_pad+0x13e>
    82e6:	2b02      	cmp	r3, #2
    82e8:	d006      	beq.n	82f8 <_sercom_get_default_pad+0x10c>
    82ea:	2b03      	cmp	r3, #3
    82ec:	d006      	beq.n	82fc <_sercom_get_default_pad+0x110>
    82ee:	e01c      	b.n	832a <_sercom_get_default_pad+0x13e>
    82f0:	4b25      	ldr	r3, [pc, #148]	; (8388 <_sercom_get_default_pad+0x19c>)
    82f2:	e01b      	b.n	832c <_sercom_get_default_pad+0x140>
    82f4:	4b25      	ldr	r3, [pc, #148]	; (838c <_sercom_get_default_pad+0x1a0>)
    82f6:	e019      	b.n	832c <_sercom_get_default_pad+0x140>
    82f8:	4b25      	ldr	r3, [pc, #148]	; (8390 <_sercom_get_default_pad+0x1a4>)
    82fa:	e017      	b.n	832c <_sercom_get_default_pad+0x140>
    82fc:	4b25      	ldr	r3, [pc, #148]	; (8394 <_sercom_get_default_pad+0x1a8>)
    82fe:	e015      	b.n	832c <_sercom_get_default_pad+0x140>
    8300:	1cfb      	adds	r3, r7, #3
    8302:	781b      	ldrb	r3, [r3, #0]
    8304:	2b01      	cmp	r3, #1
    8306:	d00a      	beq.n	831e <_sercom_get_default_pad+0x132>
    8308:	dc02      	bgt.n	8310 <_sercom_get_default_pad+0x124>
    830a:	2b00      	cmp	r3, #0
    830c:	d005      	beq.n	831a <_sercom_get_default_pad+0x12e>
    830e:	e00c      	b.n	832a <_sercom_get_default_pad+0x13e>
    8310:	2b02      	cmp	r3, #2
    8312:	d006      	beq.n	8322 <_sercom_get_default_pad+0x136>
    8314:	2b03      	cmp	r3, #3
    8316:	d006      	beq.n	8326 <_sercom_get_default_pad+0x13a>
    8318:	e007      	b.n	832a <_sercom_get_default_pad+0x13e>
    831a:	4b1f      	ldr	r3, [pc, #124]	; (8398 <_sercom_get_default_pad+0x1ac>)
    831c:	e006      	b.n	832c <_sercom_get_default_pad+0x140>
    831e:	4b1f      	ldr	r3, [pc, #124]	; (839c <_sercom_get_default_pad+0x1b0>)
    8320:	e004      	b.n	832c <_sercom_get_default_pad+0x140>
    8322:	4b1f      	ldr	r3, [pc, #124]	; (83a0 <_sercom_get_default_pad+0x1b4>)
    8324:	e002      	b.n	832c <_sercom_get_default_pad+0x140>
    8326:	4b1f      	ldr	r3, [pc, #124]	; (83a4 <_sercom_get_default_pad+0x1b8>)
    8328:	e000      	b.n	832c <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    832a:	2300      	movs	r3, #0
}
    832c:	0018      	movs	r0, r3
    832e:	46bd      	mov	sp, r7
    8330:	b002      	add	sp, #8
    8332:	bd80      	pop	{r7, pc}
    8334:	42001000 	.word	0x42001000
    8338:	42000800 	.word	0x42000800
    833c:	42000c00 	.word	0x42000c00
    8340:	42001800 	.word	0x42001800
    8344:	42001c00 	.word	0x42001c00
    8348:	42001400 	.word	0x42001400
    834c:	00040003 	.word	0x00040003
    8350:	00050003 	.word	0x00050003
    8354:	00060003 	.word	0x00060003
    8358:	00070003 	.word	0x00070003
    835c:	00010003 	.word	0x00010003
    8360:	001e0003 	.word	0x001e0003
    8364:	001f0003 	.word	0x001f0003
    8368:	00080003 	.word	0x00080003
    836c:	00090003 	.word	0x00090003
    8370:	000a0003 	.word	0x000a0003
    8374:	000b0003 	.word	0x000b0003
    8378:	00100003 	.word	0x00100003
    837c:	00110003 	.word	0x00110003
    8380:	00120003 	.word	0x00120003
    8384:	00130003 	.word	0x00130003
    8388:	000c0003 	.word	0x000c0003
    838c:	000d0003 	.word	0x000d0003
    8390:	000e0003 	.word	0x000e0003
    8394:	000f0003 	.word	0x000f0003
    8398:	00160003 	.word	0x00160003
    839c:	00170003 	.word	0x00170003
    83a0:	00180003 	.word	0x00180003
    83a4:	00190003 	.word	0x00190003

000083a8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    83a8:	b590      	push	{r4, r7, lr}
    83aa:	b08b      	sub	sp, #44	; 0x2c
    83ac:	af00      	add	r7, sp, #0
    83ae:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    83b0:	230c      	movs	r3, #12
    83b2:	18fb      	adds	r3, r7, r3
    83b4:	4a0f      	ldr	r2, [pc, #60]	; (83f4 <_sercom_get_sercom_inst_index+0x4c>)
    83b6:	ca13      	ldmia	r2!, {r0, r1, r4}
    83b8:	c313      	stmia	r3!, {r0, r1, r4}
    83ba:	ca13      	ldmia	r2!, {r0, r1, r4}
    83bc:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    83be:	2300      	movs	r3, #0
    83c0:	627b      	str	r3, [r7, #36]	; 0x24
    83c2:	e00e      	b.n	83e2 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    83c4:	230c      	movs	r3, #12
    83c6:	18fb      	adds	r3, r7, r3
    83c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    83ca:	0092      	lsls	r2, r2, #2
    83cc:	58d3      	ldr	r3, [r2, r3]
    83ce:	1e1a      	subs	r2, r3, #0
    83d0:	687b      	ldr	r3, [r7, #4]
    83d2:	429a      	cmp	r2, r3
    83d4:	d102      	bne.n	83dc <_sercom_get_sercom_inst_index+0x34>
			return i;
    83d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83d8:	b2db      	uxtb	r3, r3
    83da:	e006      	b.n	83ea <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    83dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83de:	3301      	adds	r3, #1
    83e0:	627b      	str	r3, [r7, #36]	; 0x24
    83e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83e4:	2b05      	cmp	r3, #5
    83e6:	d9ed      	bls.n	83c4 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    83e8:	2300      	movs	r3, #0
}
    83ea:	0018      	movs	r0, r3
    83ec:	46bd      	mov	sp, r7
    83ee:	b00b      	add	sp, #44	; 0x2c
    83f0:	bd90      	pop	{r4, r7, pc}
    83f2:	46c0      	nop			; (mov r8, r8)
    83f4:	0001229c 	.word	0x0001229c

000083f8 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    83f8:	b580      	push	{r7, lr}
    83fa:	b082      	sub	sp, #8
    83fc:	af00      	add	r7, sp, #0
    83fe:	0002      	movs	r2, r0
    8400:	1dfb      	adds	r3, r7, #7
    8402:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    8404:	46c0      	nop			; (mov r8, r8)
    8406:	46bd      	mov	sp, r7
    8408:	b002      	add	sp, #8
    840a:	bd80      	pop	{r7, pc}

0000840c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    840c:	b580      	push	{r7, lr}
    840e:	b084      	sub	sp, #16
    8410:	af00      	add	r7, sp, #0
    8412:	0002      	movs	r2, r0
    8414:	6039      	str	r1, [r7, #0]
    8416:	1dfb      	adds	r3, r7, #7
    8418:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    841a:	4b13      	ldr	r3, [pc, #76]	; (8468 <_sercom_set_handler+0x5c>)
    841c:	781b      	ldrb	r3, [r3, #0]
    841e:	2201      	movs	r2, #1
    8420:	4053      	eors	r3, r2
    8422:	b2db      	uxtb	r3, r3
    8424:	2b00      	cmp	r3, #0
    8426:	d015      	beq.n	8454 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8428:	2300      	movs	r3, #0
    842a:	60fb      	str	r3, [r7, #12]
    842c:	e00c      	b.n	8448 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    842e:	4b0f      	ldr	r3, [pc, #60]	; (846c <_sercom_set_handler+0x60>)
    8430:	68fa      	ldr	r2, [r7, #12]
    8432:	0092      	lsls	r2, r2, #2
    8434:	490e      	ldr	r1, [pc, #56]	; (8470 <_sercom_set_handler+0x64>)
    8436:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    8438:	4b0e      	ldr	r3, [pc, #56]	; (8474 <_sercom_set_handler+0x68>)
    843a:	68fa      	ldr	r2, [r7, #12]
    843c:	0092      	lsls	r2, r2, #2
    843e:	2100      	movs	r1, #0
    8440:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    8442:	68fb      	ldr	r3, [r7, #12]
    8444:	3301      	adds	r3, #1
    8446:	60fb      	str	r3, [r7, #12]
    8448:	68fb      	ldr	r3, [r7, #12]
    844a:	2b05      	cmp	r3, #5
    844c:	d9ef      	bls.n	842e <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    844e:	4b06      	ldr	r3, [pc, #24]	; (8468 <_sercom_set_handler+0x5c>)
    8450:	2201      	movs	r2, #1
    8452:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    8454:	1dfb      	adds	r3, r7, #7
    8456:	781a      	ldrb	r2, [r3, #0]
    8458:	4b04      	ldr	r3, [pc, #16]	; (846c <_sercom_set_handler+0x60>)
    845a:	0092      	lsls	r2, r2, #2
    845c:	6839      	ldr	r1, [r7, #0]
    845e:	50d1      	str	r1, [r2, r3]
}
    8460:	46c0      	nop			; (mov r8, r8)
    8462:	46bd      	mov	sp, r7
    8464:	b004      	add	sp, #16
    8466:	bd80      	pop	{r7, pc}
    8468:	200000fa 	.word	0x200000fa
    846c:	200000fc 	.word	0x200000fc
    8470:	000083f9 	.word	0x000083f9
    8474:	20004768 	.word	0x20004768

00008478 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    8478:	b590      	push	{r4, r7, lr}
    847a:	b085      	sub	sp, #20
    847c:	af00      	add	r7, sp, #0
    847e:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    8480:	2308      	movs	r3, #8
    8482:	18fa      	adds	r2, r7, r3
    8484:	4b0c      	ldr	r3, [pc, #48]	; (84b8 <_sercom_get_interrupt_vector+0x40>)
    8486:	0010      	movs	r0, r2
    8488:	0019      	movs	r1, r3
    848a:	2306      	movs	r3, #6
    848c:	001a      	movs	r2, r3
    848e:	4b0b      	ldr	r3, [pc, #44]	; (84bc <_sercom_get_interrupt_vector+0x44>)
    8490:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    8492:	230f      	movs	r3, #15
    8494:	18fc      	adds	r4, r7, r3
    8496:	687b      	ldr	r3, [r7, #4]
    8498:	0018      	movs	r0, r3
    849a:	4b09      	ldr	r3, [pc, #36]	; (84c0 <_sercom_get_interrupt_vector+0x48>)
    849c:	4798      	blx	r3
    849e:	0003      	movs	r3, r0
    84a0:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    84a2:	230f      	movs	r3, #15
    84a4:	18fb      	adds	r3, r7, r3
    84a6:	781b      	ldrb	r3, [r3, #0]
    84a8:	2208      	movs	r2, #8
    84aa:	18ba      	adds	r2, r7, r2
    84ac:	5cd3      	ldrb	r3, [r2, r3]
    84ae:	b25b      	sxtb	r3, r3
}
    84b0:	0018      	movs	r0, r3
    84b2:	46bd      	mov	sp, r7
    84b4:	b005      	add	sp, #20
    84b6:	bd90      	pop	{r4, r7, pc}
    84b8:	000122b4 	.word	0x000122b4
    84bc:	0000fb09 	.word	0x0000fb09
    84c0:	000083a9 	.word	0x000083a9

000084c4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    84c4:	b580      	push	{r7, lr}
    84c6:	af00      	add	r7, sp, #0
    84c8:	4b03      	ldr	r3, [pc, #12]	; (84d8 <SERCOM0_Handler+0x14>)
    84ca:	681b      	ldr	r3, [r3, #0]
    84cc:	2000      	movs	r0, #0
    84ce:	4798      	blx	r3
    84d0:	46c0      	nop			; (mov r8, r8)
    84d2:	46bd      	mov	sp, r7
    84d4:	bd80      	pop	{r7, pc}
    84d6:	46c0      	nop			; (mov r8, r8)
    84d8:	200000fc 	.word	0x200000fc

000084dc <SERCOM1_Handler>:
    84dc:	b580      	push	{r7, lr}
    84de:	af00      	add	r7, sp, #0
    84e0:	4b03      	ldr	r3, [pc, #12]	; (84f0 <SERCOM1_Handler+0x14>)
    84e2:	685b      	ldr	r3, [r3, #4]
    84e4:	2001      	movs	r0, #1
    84e6:	4798      	blx	r3
    84e8:	46c0      	nop			; (mov r8, r8)
    84ea:	46bd      	mov	sp, r7
    84ec:	bd80      	pop	{r7, pc}
    84ee:	46c0      	nop			; (mov r8, r8)
    84f0:	200000fc 	.word	0x200000fc

000084f4 <SERCOM2_Handler>:
    84f4:	b580      	push	{r7, lr}
    84f6:	af00      	add	r7, sp, #0
    84f8:	4b03      	ldr	r3, [pc, #12]	; (8508 <SERCOM2_Handler+0x14>)
    84fa:	689b      	ldr	r3, [r3, #8]
    84fc:	2002      	movs	r0, #2
    84fe:	4798      	blx	r3
    8500:	46c0      	nop			; (mov r8, r8)
    8502:	46bd      	mov	sp, r7
    8504:	bd80      	pop	{r7, pc}
    8506:	46c0      	nop			; (mov r8, r8)
    8508:	200000fc 	.word	0x200000fc

0000850c <SERCOM3_Handler>:
    850c:	b580      	push	{r7, lr}
    850e:	af00      	add	r7, sp, #0
    8510:	4b03      	ldr	r3, [pc, #12]	; (8520 <SERCOM3_Handler+0x14>)
    8512:	68db      	ldr	r3, [r3, #12]
    8514:	2003      	movs	r0, #3
    8516:	4798      	blx	r3
    8518:	46c0      	nop			; (mov r8, r8)
    851a:	46bd      	mov	sp, r7
    851c:	bd80      	pop	{r7, pc}
    851e:	46c0      	nop			; (mov r8, r8)
    8520:	200000fc 	.word	0x200000fc

00008524 <SERCOM4_Handler>:
    8524:	b580      	push	{r7, lr}
    8526:	af00      	add	r7, sp, #0
    8528:	4b03      	ldr	r3, [pc, #12]	; (8538 <SERCOM4_Handler+0x14>)
    852a:	691b      	ldr	r3, [r3, #16]
    852c:	2004      	movs	r0, #4
    852e:	4798      	blx	r3
    8530:	46c0      	nop			; (mov r8, r8)
    8532:	46bd      	mov	sp, r7
    8534:	bd80      	pop	{r7, pc}
    8536:	46c0      	nop			; (mov r8, r8)
    8538:	200000fc 	.word	0x200000fc

0000853c <SERCOM5_Handler>:
    853c:	b580      	push	{r7, lr}
    853e:	af00      	add	r7, sp, #0
    8540:	4b03      	ldr	r3, [pc, #12]	; (8550 <SERCOM5_Handler+0x14>)
    8542:	695b      	ldr	r3, [r3, #20]
    8544:	2005      	movs	r0, #5
    8546:	4798      	blx	r3
    8548:	46c0      	nop			; (mov r8, r8)
    854a:	46bd      	mov	sp, r7
    854c:	bd80      	pop	{r7, pc}
    854e:	46c0      	nop			; (mov r8, r8)
    8550:	200000fc 	.word	0x200000fc

00008554 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    8554:	b580      	push	{r7, lr}
    8556:	b082      	sub	sp, #8
    8558:	af00      	add	r7, sp, #0
    855a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    855c:	687b      	ldr	r3, [r7, #4]
    855e:	2280      	movs	r2, #128	; 0x80
    8560:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8562:	687b      	ldr	r3, [r7, #4]
    8564:	2200      	movs	r2, #0
    8566:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    8568:	687b      	ldr	r3, [r7, #4]
    856a:	2201      	movs	r2, #1
    856c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    856e:	687b      	ldr	r3, [r7, #4]
    8570:	2200      	movs	r2, #0
    8572:	70da      	strb	r2, [r3, #3]
}
    8574:	46c0      	nop			; (mov r8, r8)
    8576:	46bd      	mov	sp, r7
    8578:	b002      	add	sp, #8
    857a:	bd80      	pop	{r7, pc}

0000857c <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    857c:	b580      	push	{r7, lr}
    857e:	b084      	sub	sp, #16
    8580:	af00      	add	r7, sp, #0
    8582:	0002      	movs	r2, r0
    8584:	1dfb      	adds	r3, r7, #7
    8586:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    8588:	230f      	movs	r3, #15
    858a:	18fb      	adds	r3, r7, r3
    858c:	1dfa      	adds	r2, r7, #7
    858e:	7812      	ldrb	r2, [r2, #0]
    8590:	09d2      	lsrs	r2, r2, #7
    8592:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    8594:	230e      	movs	r3, #14
    8596:	18fb      	adds	r3, r7, r3
    8598:	1dfa      	adds	r2, r7, #7
    859a:	7812      	ldrb	r2, [r2, #0]
    859c:	0952      	lsrs	r2, r2, #5
    859e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    85a0:	4b0d      	ldr	r3, [pc, #52]	; (85d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    85a2:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    85a4:	230f      	movs	r3, #15
    85a6:	18fb      	adds	r3, r7, r3
    85a8:	781b      	ldrb	r3, [r3, #0]
    85aa:	2b00      	cmp	r3, #0
    85ac:	d10f      	bne.n	85ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    85ae:	230f      	movs	r3, #15
    85b0:	18fb      	adds	r3, r7, r3
    85b2:	781b      	ldrb	r3, [r3, #0]
    85b4:	009b      	lsls	r3, r3, #2
    85b6:	2210      	movs	r2, #16
    85b8:	4694      	mov	ip, r2
    85ba:	44bc      	add	ip, r7
    85bc:	4463      	add	r3, ip
    85be:	3b08      	subs	r3, #8
    85c0:	681a      	ldr	r2, [r3, #0]
    85c2:	230e      	movs	r3, #14
    85c4:	18fb      	adds	r3, r7, r3
    85c6:	781b      	ldrb	r3, [r3, #0]
    85c8:	01db      	lsls	r3, r3, #7
    85ca:	18d3      	adds	r3, r2, r3
    85cc:	e000      	b.n	85d0 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    85ce:	2300      	movs	r3, #0
	}
}
    85d0:	0018      	movs	r0, r3
    85d2:	46bd      	mov	sp, r7
    85d4:	b004      	add	sp, #16
    85d6:	bd80      	pop	{r7, pc}
    85d8:	41004400 	.word	0x41004400

000085dc <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    85dc:	b580      	push	{r7, lr}
    85de:	b082      	sub	sp, #8
    85e0:	af00      	add	r7, sp, #0
    85e2:	0002      	movs	r2, r0
    85e4:	1dfb      	adds	r3, r7, #7
    85e6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    85e8:	1dfb      	adds	r3, r7, #7
    85ea:	781b      	ldrb	r3, [r3, #0]
    85ec:	0018      	movs	r0, r3
    85ee:	4b03      	ldr	r3, [pc, #12]	; (85fc <port_get_group_from_gpio_pin+0x20>)
    85f0:	4798      	blx	r3
    85f2:	0003      	movs	r3, r0
}
    85f4:	0018      	movs	r0, r3
    85f6:	46bd      	mov	sp, r7
    85f8:	b002      	add	sp, #8
    85fa:	bd80      	pop	{r7, pc}
    85fc:	0000857d 	.word	0x0000857d

00008600 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    8600:	b580      	push	{r7, lr}
    8602:	b084      	sub	sp, #16
    8604:	af00      	add	r7, sp, #0
    8606:	0002      	movs	r2, r0
    8608:	1dfb      	adds	r3, r7, #7
    860a:	701a      	strb	r2, [r3, #0]
    860c:	1dbb      	adds	r3, r7, #6
    860e:	1c0a      	adds	r2, r1, #0
    8610:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    8612:	1dfb      	adds	r3, r7, #7
    8614:	781b      	ldrb	r3, [r3, #0]
    8616:	0018      	movs	r0, r3
    8618:	4b0d      	ldr	r3, [pc, #52]	; (8650 <port_pin_set_output_level+0x50>)
    861a:	4798      	blx	r3
    861c:	0003      	movs	r3, r0
    861e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    8620:	1dfb      	adds	r3, r7, #7
    8622:	781b      	ldrb	r3, [r3, #0]
    8624:	221f      	movs	r2, #31
    8626:	4013      	ands	r3, r2
    8628:	2201      	movs	r2, #1
    862a:	409a      	lsls	r2, r3
    862c:	0013      	movs	r3, r2
    862e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    8630:	1dbb      	adds	r3, r7, #6
    8632:	781b      	ldrb	r3, [r3, #0]
    8634:	2b00      	cmp	r3, #0
    8636:	d003      	beq.n	8640 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    8638:	68fb      	ldr	r3, [r7, #12]
    863a:	68ba      	ldr	r2, [r7, #8]
    863c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    863e:	e002      	b.n	8646 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    8640:	68fb      	ldr	r3, [r7, #12]
    8642:	68ba      	ldr	r2, [r7, #8]
    8644:	615a      	str	r2, [r3, #20]
	}
}
    8646:	46c0      	nop			; (mov r8, r8)
    8648:	46bd      	mov	sp, r7
    864a:	b004      	add	sp, #16
    864c:	bd80      	pop	{r7, pc}
    864e:	46c0      	nop			; (mov r8, r8)
    8650:	000085dd 	.word	0x000085dd

00008654 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    8654:	b580      	push	{r7, lr}
    8656:	b082      	sub	sp, #8
    8658:	af00      	add	r7, sp, #0
    865a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    865c:	687b      	ldr	r3, [r7, #4]
    865e:	2200      	movs	r2, #0
    8660:	701a      	strb	r2, [r3, #0]
}
    8662:	46c0      	nop			; (mov r8, r8)
    8664:	46bd      	mov	sp, r7
    8666:	b002      	add	sp, #8
    8668:	bd80      	pop	{r7, pc}
    866a:	46c0      	nop			; (mov r8, r8)

0000866c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    866c:	b580      	push	{r7, lr}
    866e:	b082      	sub	sp, #8
    8670:	af00      	add	r7, sp, #0
    8672:	0002      	movs	r2, r0
    8674:	6039      	str	r1, [r7, #0]
    8676:	1dfb      	adds	r3, r7, #7
    8678:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    867a:	1dfb      	adds	r3, r7, #7
    867c:	781b      	ldrb	r3, [r3, #0]
    867e:	2b01      	cmp	r3, #1
    8680:	d00a      	beq.n	8698 <system_apb_clock_set_mask+0x2c>
    8682:	2b02      	cmp	r3, #2
    8684:	d00f      	beq.n	86a6 <system_apb_clock_set_mask+0x3a>
    8686:	2b00      	cmp	r3, #0
    8688:	d114      	bne.n	86b4 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    868a:	4b0e      	ldr	r3, [pc, #56]	; (86c4 <system_apb_clock_set_mask+0x58>)
    868c:	4a0d      	ldr	r2, [pc, #52]	; (86c4 <system_apb_clock_set_mask+0x58>)
    868e:	6991      	ldr	r1, [r2, #24]
    8690:	683a      	ldr	r2, [r7, #0]
    8692:	430a      	orrs	r2, r1
    8694:	619a      	str	r2, [r3, #24]
			break;
    8696:	e00f      	b.n	86b8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    8698:	4b0a      	ldr	r3, [pc, #40]	; (86c4 <system_apb_clock_set_mask+0x58>)
    869a:	4a0a      	ldr	r2, [pc, #40]	; (86c4 <system_apb_clock_set_mask+0x58>)
    869c:	69d1      	ldr	r1, [r2, #28]
    869e:	683a      	ldr	r2, [r7, #0]
    86a0:	430a      	orrs	r2, r1
    86a2:	61da      	str	r2, [r3, #28]
			break;
    86a4:	e008      	b.n	86b8 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    86a6:	4b07      	ldr	r3, [pc, #28]	; (86c4 <system_apb_clock_set_mask+0x58>)
    86a8:	4a06      	ldr	r2, [pc, #24]	; (86c4 <system_apb_clock_set_mask+0x58>)
    86aa:	6a11      	ldr	r1, [r2, #32]
    86ac:	683a      	ldr	r2, [r7, #0]
    86ae:	430a      	orrs	r2, r1
    86b0:	621a      	str	r2, [r3, #32]
			break;
    86b2:	e001      	b.n	86b8 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    86b4:	2317      	movs	r3, #23
    86b6:	e000      	b.n	86ba <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    86b8:	2300      	movs	r3, #0
}
    86ba:	0018      	movs	r0, r3
    86bc:	46bd      	mov	sp, r7
    86be:	b002      	add	sp, #8
    86c0:	bd80      	pop	{r7, pc}
    86c2:	46c0      	nop			; (mov r8, r8)
    86c4:	40000400 	.word	0x40000400

000086c8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    86c8:	b580      	push	{r7, lr}
    86ca:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    86cc:	4b05      	ldr	r3, [pc, #20]	; (86e4 <system_is_debugger_present+0x1c>)
    86ce:	789b      	ldrb	r3, [r3, #2]
    86d0:	b2db      	uxtb	r3, r3
    86d2:	001a      	movs	r2, r3
    86d4:	2302      	movs	r3, #2
    86d6:	4013      	ands	r3, r2
    86d8:	1e5a      	subs	r2, r3, #1
    86da:	4193      	sbcs	r3, r2
    86dc:	b2db      	uxtb	r3, r3
}
    86de:	0018      	movs	r0, r3
    86e0:	46bd      	mov	sp, r7
    86e2:	bd80      	pop	{r7, pc}
    86e4:	41002000 	.word	0x41002000

000086e8 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    86e8:	b580      	push	{r7, lr}
    86ea:	b084      	sub	sp, #16
    86ec:	af00      	add	r7, sp, #0
    86ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    86f0:	687b      	ldr	r3, [r7, #4]
    86f2:	681b      	ldr	r3, [r3, #0]
    86f4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    86f6:	68fb      	ldr	r3, [r7, #12]
    86f8:	7e1b      	ldrb	r3, [r3, #24]
    86fa:	b2db      	uxtb	r3, r3
    86fc:	001a      	movs	r2, r3
    86fe:	2301      	movs	r3, #1
    8700:	4013      	ands	r3, r2
    8702:	1e5a      	subs	r2, r3, #1
    8704:	4193      	sbcs	r3, r2
    8706:	b2db      	uxtb	r3, r3
}
    8708:	0018      	movs	r0, r3
    870a:	46bd      	mov	sp, r7
    870c:	b004      	add	sp, #16
    870e:	bd80      	pop	{r7, pc}

00008710 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    8710:	b580      	push	{r7, lr}
    8712:	b084      	sub	sp, #16
    8714:	af00      	add	r7, sp, #0
    8716:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8718:	687b      	ldr	r3, [r7, #4]
    871a:	681b      	ldr	r3, [r3, #0]
    871c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    871e:	68fb      	ldr	r3, [r7, #12]
    8720:	7e1b      	ldrb	r3, [r3, #24]
    8722:	b2db      	uxtb	r3, r3
    8724:	001a      	movs	r2, r3
    8726:	2304      	movs	r3, #4
    8728:	4013      	ands	r3, r2
    872a:	1e5a      	subs	r2, r3, #1
    872c:	4193      	sbcs	r3, r2
    872e:	b2db      	uxtb	r3, r3
}
    8730:	0018      	movs	r0, r3
    8732:	46bd      	mov	sp, r7
    8734:	b004      	add	sp, #16
    8736:	bd80      	pop	{r7, pc}

00008738 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    8738:	b580      	push	{r7, lr}
    873a:	b084      	sub	sp, #16
    873c:	af00      	add	r7, sp, #0
    873e:	6078      	str	r0, [r7, #4]
    8740:	000a      	movs	r2, r1
    8742:	1cbb      	adds	r3, r7, #2
    8744:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8746:	687b      	ldr	r3, [r7, #4]
    8748:	681b      	ldr	r3, [r3, #0]
    874a:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    874c:	687b      	ldr	r3, [r7, #4]
    874e:	0018      	movs	r0, r3
    8750:	4b0a      	ldr	r3, [pc, #40]	; (877c <spi_write+0x44>)
    8752:	4798      	blx	r3
    8754:	0003      	movs	r3, r0
    8756:	001a      	movs	r2, r3
    8758:	2301      	movs	r3, #1
    875a:	4053      	eors	r3, r2
    875c:	b2db      	uxtb	r3, r3
    875e:	2b00      	cmp	r3, #0
    8760:	d001      	beq.n	8766 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    8762:	2305      	movs	r3, #5
    8764:	e006      	b.n	8774 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    8766:	1cbb      	adds	r3, r7, #2
    8768:	881b      	ldrh	r3, [r3, #0]
    876a:	05db      	lsls	r3, r3, #23
    876c:	0dda      	lsrs	r2, r3, #23
    876e:	68fb      	ldr	r3, [r7, #12]
    8770:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    8772:	2300      	movs	r3, #0
}
    8774:	0018      	movs	r0, r3
    8776:	46bd      	mov	sp, r7
    8778:	b004      	add	sp, #16
    877a:	bd80      	pop	{r7, pc}
    877c:	000086e9 	.word	0x000086e9

00008780 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    8780:	b580      	push	{r7, lr}
    8782:	b084      	sub	sp, #16
    8784:	af00      	add	r7, sp, #0
    8786:	6078      	str	r0, [r7, #4]
    8788:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    878a:	687b      	ldr	r3, [r7, #4]
    878c:	681b      	ldr	r3, [r3, #0]
    878e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    8790:	687b      	ldr	r3, [r7, #4]
    8792:	0018      	movs	r0, r3
    8794:	4b1b      	ldr	r3, [pc, #108]	; (8804 <spi_read+0x84>)
    8796:	4798      	blx	r3
    8798:	0003      	movs	r3, r0
    879a:	001a      	movs	r2, r3
    879c:	2301      	movs	r3, #1
    879e:	4053      	eors	r3, r2
    87a0:	b2db      	uxtb	r3, r3
    87a2:	2b00      	cmp	r3, #0
    87a4:	d001      	beq.n	87aa <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    87a6:	2310      	movs	r3, #16
    87a8:	e027      	b.n	87fa <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    87aa:	230f      	movs	r3, #15
    87ac:	18fb      	adds	r3, r7, r3
    87ae:	2200      	movs	r2, #0
    87b0:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    87b2:	68bb      	ldr	r3, [r7, #8]
    87b4:	8b5b      	ldrh	r3, [r3, #26]
    87b6:	b29b      	uxth	r3, r3
    87b8:	001a      	movs	r2, r3
    87ba:	2304      	movs	r3, #4
    87bc:	4013      	ands	r3, r2
    87be:	d006      	beq.n	87ce <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    87c0:	230f      	movs	r3, #15
    87c2:	18fb      	adds	r3, r7, r3
    87c4:	221e      	movs	r2, #30
    87c6:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    87c8:	68bb      	ldr	r3, [r7, #8]
    87ca:	2204      	movs	r2, #4
    87cc:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	799b      	ldrb	r3, [r3, #6]
    87d2:	2b01      	cmp	r3, #1
    87d4:	d108      	bne.n	87e8 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    87d6:	68bb      	ldr	r3, [r7, #8]
    87d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87da:	b29b      	uxth	r3, r3
    87dc:	05db      	lsls	r3, r3, #23
    87de:	0ddb      	lsrs	r3, r3, #23
    87e0:	b29a      	uxth	r2, r3
    87e2:	683b      	ldr	r3, [r7, #0]
    87e4:	801a      	strh	r2, [r3, #0]
    87e6:	e005      	b.n	87f4 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    87e8:	68bb      	ldr	r3, [r7, #8]
    87ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    87ec:	b2db      	uxtb	r3, r3
    87ee:	b29a      	uxth	r2, r3
    87f0:	683b      	ldr	r3, [r7, #0]
    87f2:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    87f4:	230f      	movs	r3, #15
    87f6:	18fb      	adds	r3, r7, r3
    87f8:	781b      	ldrb	r3, [r3, #0]
}
    87fa:	0018      	movs	r0, r3
    87fc:	46bd      	mov	sp, r7
    87fe:	b004      	add	sp, #16
    8800:	bd80      	pop	{r7, pc}
    8802:	46c0      	nop			; (mov r8, r8)
    8804:	00008711 	.word	0x00008711

00008808 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    8808:	b590      	push	{r4, r7, lr}
    880a:	b093      	sub	sp, #76	; 0x4c
    880c:	af00      	add	r7, sp, #0
    880e:	6078      	str	r0, [r7, #4]
    8810:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    8812:	687b      	ldr	r3, [r7, #4]
    8814:	681b      	ldr	r3, [r3, #0]
    8816:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    8818:	687b      	ldr	r3, [r7, #4]
    881a:	681b      	ldr	r3, [r3, #0]
    881c:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    881e:	231c      	movs	r3, #28
    8820:	18fb      	adds	r3, r7, r3
    8822:	0018      	movs	r0, r3
    8824:	4b75      	ldr	r3, [pc, #468]	; (89fc <_spi_set_config+0x1f4>)
    8826:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    8828:	231c      	movs	r3, #28
    882a:	18fb      	adds	r3, r7, r3
    882c:	2200      	movs	r2, #0
    882e:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    8830:	683b      	ldr	r3, [r7, #0]
    8832:	781b      	ldrb	r3, [r3, #0]
    8834:	2b00      	cmp	r3, #0
    8836:	d103      	bne.n	8840 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    8838:	231c      	movs	r3, #28
    883a:	18fb      	adds	r3, r7, r3
    883c:	2200      	movs	r2, #0
    883e:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    8840:	683b      	ldr	r3, [r7, #0]
    8842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    8844:	230c      	movs	r3, #12
    8846:	18fb      	adds	r3, r7, r3
    8848:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    884a:	683b      	ldr	r3, [r7, #0]
    884c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    884e:	230c      	movs	r3, #12
    8850:	18fb      	adds	r3, r7, r3
    8852:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    8854:	683b      	ldr	r3, [r7, #0]
    8856:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    8858:	230c      	movs	r3, #12
    885a:	18fb      	adds	r3, r7, r3
    885c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    885e:	683b      	ldr	r3, [r7, #0]
    8860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    8862:	230c      	movs	r3, #12
    8864:	18fb      	adds	r3, r7, r3
    8866:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    8868:	2347      	movs	r3, #71	; 0x47
    886a:	18fb      	adds	r3, r7, r3
    886c:	2200      	movs	r2, #0
    886e:	701a      	strb	r2, [r3, #0]
    8870:	e02c      	b.n	88cc <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    8872:	2347      	movs	r3, #71	; 0x47
    8874:	18fb      	adds	r3, r7, r3
    8876:	781a      	ldrb	r2, [r3, #0]
    8878:	230c      	movs	r3, #12
    887a:	18fb      	adds	r3, r7, r3
    887c:	0092      	lsls	r2, r2, #2
    887e:	58d3      	ldr	r3, [r2, r3]
    8880:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    8882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8884:	2b00      	cmp	r3, #0
    8886:	d109      	bne.n	889c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    8888:	2347      	movs	r3, #71	; 0x47
    888a:	18fb      	adds	r3, r7, r3
    888c:	781a      	ldrb	r2, [r3, #0]
    888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8890:	0011      	movs	r1, r2
    8892:	0018      	movs	r0, r3
    8894:	4b5a      	ldr	r3, [pc, #360]	; (8a00 <_spi_set_config+0x1f8>)
    8896:	4798      	blx	r3
    8898:	0003      	movs	r3, r0
    889a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    889c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    889e:	3301      	adds	r3, #1
    88a0:	d00d      	beq.n	88be <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    88a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    88a4:	b2da      	uxtb	r2, r3
    88a6:	231c      	movs	r3, #28
    88a8:	18fb      	adds	r3, r7, r3
    88aa:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    88ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    88ae:	0c1b      	lsrs	r3, r3, #16
    88b0:	b2db      	uxtb	r3, r3
    88b2:	221c      	movs	r2, #28
    88b4:	18ba      	adds	r2, r7, r2
    88b6:	0011      	movs	r1, r2
    88b8:	0018      	movs	r0, r3
    88ba:	4b52      	ldr	r3, [pc, #328]	; (8a04 <_spi_set_config+0x1fc>)
    88bc:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    88be:	2347      	movs	r3, #71	; 0x47
    88c0:	18fb      	adds	r3, r7, r3
    88c2:	781a      	ldrb	r2, [r3, #0]
    88c4:	2347      	movs	r3, #71	; 0x47
    88c6:	18fb      	adds	r3, r7, r3
    88c8:	3201      	adds	r2, #1
    88ca:	701a      	strb	r2, [r3, #0]
    88cc:	2347      	movs	r3, #71	; 0x47
    88ce:	18fb      	adds	r3, r7, r3
    88d0:	781b      	ldrb	r3, [r3, #0]
    88d2:	2b03      	cmp	r3, #3
    88d4:	d9cd      	bls.n	8872 <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    88d6:	683b      	ldr	r3, [r7, #0]
    88d8:	781a      	ldrb	r2, [r3, #0]
    88da:	687b      	ldr	r3, [r7, #4]
    88dc:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    88de:	683b      	ldr	r3, [r7, #0]
    88e0:	7c1a      	ldrb	r2, [r3, #16]
    88e2:	687b      	ldr	r3, [r7, #4]
    88e4:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    88e6:	683b      	ldr	r3, [r7, #0]
    88e8:	7c9a      	ldrb	r2, [r3, #18]
    88ea:	687b      	ldr	r3, [r7, #4]
    88ec:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    88ee:	683b      	ldr	r3, [r7, #0]
    88f0:	7d1a      	ldrb	r2, [r3, #20]
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    88f6:	230a      	movs	r3, #10
    88f8:	18fb      	adds	r3, r7, r3
    88fa:	2200      	movs	r2, #0
    88fc:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    88fe:	2300      	movs	r3, #0
    8900:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    8902:	2300      	movs	r3, #0
    8904:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    8906:	683b      	ldr	r3, [r7, #0]
    8908:	781b      	ldrb	r3, [r3, #0]
    890a:	2b01      	cmp	r3, #1
    890c:	d129      	bne.n	8962 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    890e:	687b      	ldr	r3, [r7, #4]
    8910:	681b      	ldr	r3, [r3, #0]
    8912:	0018      	movs	r0, r3
    8914:	4b3c      	ldr	r3, [pc, #240]	; (8a08 <_spi_set_config+0x200>)
    8916:	4798      	blx	r3
    8918:	0003      	movs	r3, r0
    891a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    891c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    891e:	3314      	adds	r3, #20
    8920:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    8922:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8924:	b2db      	uxtb	r3, r3
    8926:	0018      	movs	r0, r3
    8928:	4b38      	ldr	r3, [pc, #224]	; (8a0c <_spi_set_config+0x204>)
    892a:	4798      	blx	r3
    892c:	0003      	movs	r3, r0
    892e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    8930:	683b      	ldr	r3, [r7, #0]
    8932:	699b      	ldr	r3, [r3, #24]
    8934:	2223      	movs	r2, #35	; 0x23
    8936:	18bc      	adds	r4, r7, r2
    8938:	220a      	movs	r2, #10
    893a:	18ba      	adds	r2, r7, r2
    893c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    893e:	0018      	movs	r0, r3
    8940:	4b33      	ldr	r3, [pc, #204]	; (8a10 <_spi_set_config+0x208>)
    8942:	4798      	blx	r3
    8944:	0003      	movs	r3, r0
    8946:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    8948:	2323      	movs	r3, #35	; 0x23
    894a:	18fb      	adds	r3, r7, r3
    894c:	781b      	ldrb	r3, [r3, #0]
    894e:	2b00      	cmp	r3, #0
    8950:	d001      	beq.n	8956 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    8952:	2317      	movs	r3, #23
    8954:	e04e      	b.n	89f4 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    8956:	230a      	movs	r3, #10
    8958:	18fb      	adds	r3, r7, r3
    895a:	881b      	ldrh	r3, [r3, #0]
    895c:	b2da      	uxtb	r2, r3
    895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8960:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    8962:	683b      	ldr	r3, [r7, #0]
    8964:	685b      	ldr	r3, [r3, #4]
    8966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8968:	4313      	orrs	r3, r2
    896a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    896c:	683b      	ldr	r3, [r7, #0]
    896e:	689b      	ldr	r3, [r3, #8]
    8970:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8972:	4313      	orrs	r3, r2
    8974:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    8976:	683b      	ldr	r3, [r7, #0]
    8978:	68db      	ldr	r3, [r3, #12]
    897a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    897c:	4313      	orrs	r3, r2
    897e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    8980:	683b      	ldr	r3, [r7, #0]
    8982:	7c1b      	ldrb	r3, [r3, #16]
    8984:	001a      	movs	r2, r3
    8986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8988:	4313      	orrs	r3, r2
    898a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    898c:	683b      	ldr	r3, [r7, #0]
    898e:	7c5b      	ldrb	r3, [r3, #17]
    8990:	2b00      	cmp	r3, #0
    8992:	d103      	bne.n	899c <_spi_set_config+0x194>
    8994:	4b1f      	ldr	r3, [pc, #124]	; (8a14 <_spi_set_config+0x20c>)
    8996:	4798      	blx	r3
    8998:	1e03      	subs	r3, r0, #0
    899a:	d003      	beq.n	89a4 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    899c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    899e:	2280      	movs	r2, #128	; 0x80
    89a0:	4313      	orrs	r3, r2
    89a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    89a4:	683b      	ldr	r3, [r7, #0]
    89a6:	7c9b      	ldrb	r3, [r3, #18]
    89a8:	2b00      	cmp	r3, #0
    89aa:	d004      	beq.n	89b6 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    89ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89ae:	2280      	movs	r2, #128	; 0x80
    89b0:	0292      	lsls	r2, r2, #10
    89b2:	4313      	orrs	r3, r2
    89b4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    89b6:	683b      	ldr	r3, [r7, #0]
    89b8:	7cdb      	ldrb	r3, [r3, #19]
    89ba:	2b00      	cmp	r3, #0
    89bc:	d004      	beq.n	89c8 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    89be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89c0:	2280      	movs	r2, #128	; 0x80
    89c2:	0092      	lsls	r2, r2, #2
    89c4:	4313      	orrs	r3, r2
    89c6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    89c8:	683b      	ldr	r3, [r7, #0]
    89ca:	7d1b      	ldrb	r3, [r3, #20]
    89cc:	2b00      	cmp	r3, #0
    89ce:	d004      	beq.n	89da <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    89d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89d2:	2280      	movs	r2, #128	; 0x80
    89d4:	0192      	lsls	r2, r2, #6
    89d6:	4313      	orrs	r3, r2
    89d8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    89da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    89dc:	681a      	ldr	r2, [r3, #0]
    89de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89e0:	431a      	orrs	r2, r3
    89e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    89e4:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    89e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    89e8:	685a      	ldr	r2, [r3, #4]
    89ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89ec:	431a      	orrs	r2, r3
    89ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    89f0:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    89f2:	2300      	movs	r3, #0
}
    89f4:	0018      	movs	r0, r3
    89f6:	46bd      	mov	sp, r7
    89f8:	b013      	add	sp, #76	; 0x4c
    89fa:	bd90      	pop	{r4, r7, pc}
    89fc:	00008555 	.word	0x00008555
    8a00:	000081ed 	.word	0x000081ed
    8a04:	0000ac65 	.word	0x0000ac65
    8a08:	000083a9 	.word	0x000083a9
    8a0c:	0000aa9d 	.word	0x0000aa9d
    8a10:	00007ef9 	.word	0x00007ef9
    8a14:	000086c9 	.word	0x000086c9

00008a18 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    8a18:	b590      	push	{r4, r7, lr}
    8a1a:	b08b      	sub	sp, #44	; 0x2c
    8a1c:	af00      	add	r7, sp, #0
    8a1e:	60f8      	str	r0, [r7, #12]
    8a20:	60b9      	str	r1, [r7, #8]
    8a22:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    8a24:	68fb      	ldr	r3, [r7, #12]
    8a26:	68ba      	ldr	r2, [r7, #8]
    8a28:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    8a2a:	68fb      	ldr	r3, [r7, #12]
    8a2c:	681b      	ldr	r3, [r3, #0]
    8a2e:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    8a30:	6a3b      	ldr	r3, [r7, #32]
    8a32:	681b      	ldr	r3, [r3, #0]
    8a34:	2202      	movs	r2, #2
    8a36:	4013      	ands	r3, r2
    8a38:	d001      	beq.n	8a3e <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    8a3a:	231c      	movs	r3, #28
    8a3c:	e09c      	b.n	8b78 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    8a3e:	6a3b      	ldr	r3, [r7, #32]
    8a40:	681b      	ldr	r3, [r3, #0]
    8a42:	2201      	movs	r2, #1
    8a44:	4013      	ands	r3, r2
    8a46:	d001      	beq.n	8a4c <spi_init+0x34>
		return STATUS_BUSY;
    8a48:	2305      	movs	r3, #5
    8a4a:	e095      	b.n	8b78 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    8a4c:	68fb      	ldr	r3, [r7, #12]
    8a4e:	681b      	ldr	r3, [r3, #0]
    8a50:	0018      	movs	r0, r3
    8a52:	4b4b      	ldr	r3, [pc, #300]	; (8b80 <spi_init+0x168>)
    8a54:	4798      	blx	r3
    8a56:	0003      	movs	r3, r0
    8a58:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    8a5a:	69fb      	ldr	r3, [r7, #28]
    8a5c:	3302      	adds	r3, #2
    8a5e:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    8a60:	69fb      	ldr	r3, [r7, #28]
    8a62:	3314      	adds	r3, #20
    8a64:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    8a66:	2201      	movs	r2, #1
    8a68:	69bb      	ldr	r3, [r7, #24]
    8a6a:	409a      	lsls	r2, r3
    8a6c:	0013      	movs	r3, r2
    8a6e:	0019      	movs	r1, r3
    8a70:	2002      	movs	r0, #2
    8a72:	4b44      	ldr	r3, [pc, #272]	; (8b84 <spi_init+0x16c>)
    8a74:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    8a76:	2310      	movs	r3, #16
    8a78:	18fb      	adds	r3, r7, r3
    8a7a:	0018      	movs	r0, r3
    8a7c:	4b42      	ldr	r3, [pc, #264]	; (8b88 <spi_init+0x170>)
    8a7e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    8a80:	687b      	ldr	r3, [r7, #4]
    8a82:	2224      	movs	r2, #36	; 0x24
    8a84:	5c9a      	ldrb	r2, [r3, r2]
    8a86:	2310      	movs	r3, #16
    8a88:	18fb      	adds	r3, r7, r3
    8a8a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    8a8c:	697b      	ldr	r3, [r7, #20]
    8a8e:	b2db      	uxtb	r3, r3
    8a90:	2210      	movs	r2, #16
    8a92:	18ba      	adds	r2, r7, r2
    8a94:	0011      	movs	r1, r2
    8a96:	0018      	movs	r0, r3
    8a98:	4b3c      	ldr	r3, [pc, #240]	; (8b8c <spi_init+0x174>)
    8a9a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    8a9c:	697b      	ldr	r3, [r7, #20]
    8a9e:	b2db      	uxtb	r3, r3
    8aa0:	0018      	movs	r0, r3
    8aa2:	4b3b      	ldr	r3, [pc, #236]	; (8b90 <spi_init+0x178>)
    8aa4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    8aa6:	687b      	ldr	r3, [r7, #4]
    8aa8:	2224      	movs	r2, #36	; 0x24
    8aaa:	5c9b      	ldrb	r3, [r3, r2]
    8aac:	2100      	movs	r1, #0
    8aae:	0018      	movs	r0, r3
    8ab0:	4b38      	ldr	r3, [pc, #224]	; (8b94 <spi_init+0x17c>)
    8ab2:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    8ab4:	687b      	ldr	r3, [r7, #4]
    8ab6:	781b      	ldrb	r3, [r3, #0]
    8ab8:	2b01      	cmp	r3, #1
    8aba:	d105      	bne.n	8ac8 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    8abc:	6a3b      	ldr	r3, [r7, #32]
    8abe:	681b      	ldr	r3, [r3, #0]
    8ac0:	220c      	movs	r2, #12
    8ac2:	431a      	orrs	r2, r3
    8ac4:	6a3b      	ldr	r3, [r7, #32]
    8ac6:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    8ac8:	2327      	movs	r3, #39	; 0x27
    8aca:	18fb      	adds	r3, r7, r3
    8acc:	2200      	movs	r2, #0
    8ace:	701a      	strb	r2, [r3, #0]
    8ad0:	e010      	b.n	8af4 <spi_init+0xdc>
		module->callback[i]        = NULL;
    8ad2:	2327      	movs	r3, #39	; 0x27
    8ad4:	18fb      	adds	r3, r7, r3
    8ad6:	781b      	ldrb	r3, [r3, #0]
    8ad8:	68fa      	ldr	r2, [r7, #12]
    8ada:	3302      	adds	r3, #2
    8adc:	009b      	lsls	r3, r3, #2
    8ade:	18d3      	adds	r3, r2, r3
    8ae0:	3304      	adds	r3, #4
    8ae2:	2200      	movs	r2, #0
    8ae4:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    8ae6:	2327      	movs	r3, #39	; 0x27
    8ae8:	18fb      	adds	r3, r7, r3
    8aea:	781a      	ldrb	r2, [r3, #0]
    8aec:	2327      	movs	r3, #39	; 0x27
    8aee:	18fb      	adds	r3, r7, r3
    8af0:	3201      	adds	r2, #1
    8af2:	701a      	strb	r2, [r3, #0]
    8af4:	2327      	movs	r3, #39	; 0x27
    8af6:	18fb      	adds	r3, r7, r3
    8af8:	781b      	ldrb	r3, [r3, #0]
    8afa:	2b06      	cmp	r3, #6
    8afc:	d9e9      	bls.n	8ad2 <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    8afe:	68fb      	ldr	r3, [r7, #12]
    8b00:	2200      	movs	r2, #0
    8b02:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    8b04:	68fb      	ldr	r3, [r7, #12]
    8b06:	2200      	movs	r2, #0
    8b08:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    8b0a:	68fb      	ldr	r3, [r7, #12]
    8b0c:	2200      	movs	r2, #0
    8b0e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    8b10:	68fb      	ldr	r3, [r7, #12]
    8b12:	2200      	movs	r2, #0
    8b14:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    8b16:	68fb      	ldr	r3, [r7, #12]
    8b18:	2236      	movs	r2, #54	; 0x36
    8b1a:	2100      	movs	r1, #0
    8b1c:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    8b1e:	68fb      	ldr	r3, [r7, #12]
    8b20:	2237      	movs	r2, #55	; 0x37
    8b22:	2100      	movs	r1, #0
    8b24:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    8b26:	68fb      	ldr	r3, [r7, #12]
    8b28:	2238      	movs	r2, #56	; 0x38
    8b2a:	2100      	movs	r1, #0
    8b2c:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    8b2e:	68fb      	ldr	r3, [r7, #12]
    8b30:	2203      	movs	r2, #3
    8b32:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    8b34:	68fb      	ldr	r3, [r7, #12]
    8b36:	2200      	movs	r2, #0
    8b38:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    8b3a:	68fb      	ldr	r3, [r7, #12]
    8b3c:	681b      	ldr	r3, [r3, #0]
    8b3e:	2213      	movs	r2, #19
    8b40:	18bc      	adds	r4, r7, r2
    8b42:	0018      	movs	r0, r3
    8b44:	4b0e      	ldr	r3, [pc, #56]	; (8b80 <spi_init+0x168>)
    8b46:	4798      	blx	r3
    8b48:	0003      	movs	r3, r0
    8b4a:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    8b4c:	4a12      	ldr	r2, [pc, #72]	; (8b98 <spi_init+0x180>)
    8b4e:	2313      	movs	r3, #19
    8b50:	18fb      	adds	r3, r7, r3
    8b52:	781b      	ldrb	r3, [r3, #0]
    8b54:	0011      	movs	r1, r2
    8b56:	0018      	movs	r0, r3
    8b58:	4b10      	ldr	r3, [pc, #64]	; (8b9c <spi_init+0x184>)
    8b5a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    8b5c:	2313      	movs	r3, #19
    8b5e:	18fb      	adds	r3, r7, r3
    8b60:	781a      	ldrb	r2, [r3, #0]
    8b62:	4b0f      	ldr	r3, [pc, #60]	; (8ba0 <spi_init+0x188>)
    8b64:	0092      	lsls	r2, r2, #2
    8b66:	68f9      	ldr	r1, [r7, #12]
    8b68:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    8b6a:	687a      	ldr	r2, [r7, #4]
    8b6c:	68fb      	ldr	r3, [r7, #12]
    8b6e:	0011      	movs	r1, r2
    8b70:	0018      	movs	r0, r3
    8b72:	4b0c      	ldr	r3, [pc, #48]	; (8ba4 <spi_init+0x18c>)
    8b74:	4798      	blx	r3
    8b76:	0003      	movs	r3, r0
}
    8b78:	0018      	movs	r0, r3
    8b7a:	46bd      	mov	sp, r7
    8b7c:	b00b      	add	sp, #44	; 0x2c
    8b7e:	bd90      	pop	{r4, r7, pc}
    8b80:	000083a9 	.word	0x000083a9
    8b84:	0000866d 	.word	0x0000866d
    8b88:	00008655 	.word	0x00008655
    8b8c:	0000a979 	.word	0x0000a979
    8b90:	0000a9bd 	.word	0x0000a9bd
    8b94:	00008161 	.word	0x00008161
    8b98:	00008f25 	.word	0x00008f25
    8b9c:	0000840d 	.word	0x0000840d
    8ba0:	20004768 	.word	0x20004768
    8ba4:	00008809 	.word	0x00008809

00008ba8 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    8ba8:	b590      	push	{r4, r7, lr}
    8baa:	b087      	sub	sp, #28
    8bac:	af00      	add	r7, sp, #0
    8bae:	60f8      	str	r0, [r7, #12]
    8bb0:	60b9      	str	r1, [r7, #8]
    8bb2:	0019      	movs	r1, r3
    8bb4:	1dbb      	adds	r3, r7, #6
    8bb6:	801a      	strh	r2, [r3, #0]
    8bb8:	1d3b      	adds	r3, r7, #4
    8bba:	1c0a      	adds	r2, r1, #0
    8bbc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    8bbe:	68fb      	ldr	r3, [r7, #12]
    8bc0:	2238      	movs	r2, #56	; 0x38
    8bc2:	5c9b      	ldrb	r3, [r3, r2]
    8bc4:	b2db      	uxtb	r3, r3
    8bc6:	2b05      	cmp	r3, #5
    8bc8:	d101      	bne.n	8bce <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    8bca:	2305      	movs	r3, #5
    8bcc:	e07a      	b.n	8cc4 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    8bce:	1dbb      	adds	r3, r7, #6
    8bd0:	881b      	ldrh	r3, [r3, #0]
    8bd2:	2b00      	cmp	r3, #0
    8bd4:	d101      	bne.n	8bda <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    8bd6:	2317      	movs	r3, #23
    8bd8:	e074      	b.n	8cc4 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    8bda:	68fb      	ldr	r3, [r7, #12]
    8bdc:	79db      	ldrb	r3, [r3, #7]
    8bde:	2201      	movs	r2, #1
    8be0:	4053      	eors	r3, r2
    8be2:	b2db      	uxtb	r3, r3
    8be4:	2b00      	cmp	r3, #0
    8be6:	d001      	beq.n	8bec <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    8be8:	231c      	movs	r3, #28
    8bea:	e06b      	b.n	8cc4 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    8bec:	2316      	movs	r3, #22
    8bee:	18fb      	adds	r3, r7, r3
    8bf0:	2200      	movs	r2, #0
    8bf2:	801a      	strh	r2, [r3, #0]

	while (length--) {
    8bf4:	e05e      	b.n	8cb4 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    8bf6:	68fb      	ldr	r3, [r7, #12]
    8bf8:	795b      	ldrb	r3, [r3, #5]
    8bfa:	2b01      	cmp	r3, #1
    8bfc:	d112      	bne.n	8c24 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    8bfe:	46c0      	nop			; (mov r8, r8)
    8c00:	68fb      	ldr	r3, [r7, #12]
    8c02:	0018      	movs	r0, r3
    8c04:	4b31      	ldr	r3, [pc, #196]	; (8ccc <spi_read_buffer_wait+0x124>)
    8c06:	4798      	blx	r3
    8c08:	0003      	movs	r3, r0
    8c0a:	001a      	movs	r2, r3
    8c0c:	2301      	movs	r3, #1
    8c0e:	4053      	eors	r3, r2
    8c10:	b2db      	uxtb	r3, r3
    8c12:	2b00      	cmp	r3, #0
    8c14:	d1f4      	bne.n	8c00 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    8c16:	1d3b      	adds	r3, r7, #4
    8c18:	881a      	ldrh	r2, [r3, #0]
    8c1a:	68fb      	ldr	r3, [r7, #12]
    8c1c:	0011      	movs	r1, r2
    8c1e:	0018      	movs	r0, r3
    8c20:	4b2b      	ldr	r3, [pc, #172]	; (8cd0 <spi_read_buffer_wait+0x128>)
    8c22:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    8c24:	46c0      	nop			; (mov r8, r8)
    8c26:	68fb      	ldr	r3, [r7, #12]
    8c28:	0018      	movs	r0, r3
    8c2a:	4b2a      	ldr	r3, [pc, #168]	; (8cd4 <spi_read_buffer_wait+0x12c>)
    8c2c:	4798      	blx	r3
    8c2e:	0003      	movs	r3, r0
    8c30:	001a      	movs	r2, r3
    8c32:	2301      	movs	r3, #1
    8c34:	4053      	eors	r3, r2
    8c36:	b2db      	uxtb	r3, r3
    8c38:	2b00      	cmp	r3, #0
    8c3a:	d1f4      	bne.n	8c26 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    8c3c:	2312      	movs	r3, #18
    8c3e:	18fb      	adds	r3, r7, r3
    8c40:	2200      	movs	r2, #0
    8c42:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    8c44:	2315      	movs	r3, #21
    8c46:	18fc      	adds	r4, r7, r3
    8c48:	2312      	movs	r3, #18
    8c4a:	18fa      	adds	r2, r7, r3
    8c4c:	68fb      	ldr	r3, [r7, #12]
    8c4e:	0011      	movs	r1, r2
    8c50:	0018      	movs	r0, r3
    8c52:	4b21      	ldr	r3, [pc, #132]	; (8cd8 <spi_read_buffer_wait+0x130>)
    8c54:	4798      	blx	r3
    8c56:	0003      	movs	r3, r0
    8c58:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    8c5a:	2315      	movs	r3, #21
    8c5c:	18fb      	adds	r3, r7, r3
    8c5e:	781b      	ldrb	r3, [r3, #0]
    8c60:	2b00      	cmp	r3, #0
    8c62:	d003      	beq.n	8c6c <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    8c64:	2315      	movs	r3, #21
    8c66:	18fb      	adds	r3, r7, r3
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	e02b      	b.n	8cc4 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    8c6c:	2316      	movs	r3, #22
    8c6e:	18fb      	adds	r3, r7, r3
    8c70:	881b      	ldrh	r3, [r3, #0]
    8c72:	2216      	movs	r2, #22
    8c74:	18ba      	adds	r2, r7, r2
    8c76:	1c59      	adds	r1, r3, #1
    8c78:	8011      	strh	r1, [r2, #0]
    8c7a:	001a      	movs	r2, r3
    8c7c:	68bb      	ldr	r3, [r7, #8]
    8c7e:	189b      	adds	r3, r3, r2
    8c80:	2212      	movs	r2, #18
    8c82:	18ba      	adds	r2, r7, r2
    8c84:	8812      	ldrh	r2, [r2, #0]
    8c86:	b2d2      	uxtb	r2, r2
    8c88:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8c8a:	68fb      	ldr	r3, [r7, #12]
    8c8c:	799b      	ldrb	r3, [r3, #6]
    8c8e:	2b01      	cmp	r3, #1
    8c90:	d110      	bne.n	8cb4 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    8c92:	2316      	movs	r3, #22
    8c94:	18fb      	adds	r3, r7, r3
    8c96:	881b      	ldrh	r3, [r3, #0]
    8c98:	2216      	movs	r2, #22
    8c9a:	18ba      	adds	r2, r7, r2
    8c9c:	1c59      	adds	r1, r3, #1
    8c9e:	8011      	strh	r1, [r2, #0]
    8ca0:	001a      	movs	r2, r3
    8ca2:	68bb      	ldr	r3, [r7, #8]
    8ca4:	189b      	adds	r3, r3, r2
    8ca6:	2212      	movs	r2, #18
    8ca8:	18ba      	adds	r2, r7, r2
    8caa:	8812      	ldrh	r2, [r2, #0]
    8cac:	0a12      	lsrs	r2, r2, #8
    8cae:	b292      	uxth	r2, r2
    8cb0:	b2d2      	uxtb	r2, r2
    8cb2:	701a      	strb	r2, [r3, #0]
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
    8cb4:	1dbb      	adds	r3, r7, #6
    8cb6:	881b      	ldrh	r3, [r3, #0]
    8cb8:	1dba      	adds	r2, r7, #6
    8cba:	1e59      	subs	r1, r3, #1
    8cbc:	8011      	strh	r1, [r2, #0]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d199      	bne.n	8bf6 <spi_read_buffer_wait+0x4e>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
    8cc2:	2300      	movs	r3, #0
}
    8cc4:	0018      	movs	r0, r3
    8cc6:	46bd      	mov	sp, r7
    8cc8:	b007      	add	sp, #28
    8cca:	bd90      	pop	{r4, r7, pc}
    8ccc:	000086e9 	.word	0x000086e9
    8cd0:	00008739 	.word	0x00008739
    8cd4:	00008711 	.word	0x00008711
    8cd8:	00008781 	.word	0x00008781

00008cdc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    8cdc:	b580      	push	{r7, lr}
    8cde:	b086      	sub	sp, #24
    8ce0:	af00      	add	r7, sp, #0
    8ce2:	60f8      	str	r0, [r7, #12]
    8ce4:	60b9      	str	r1, [r7, #8]
    8ce6:	1dfb      	adds	r3, r7, #7
    8ce8:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    8cea:	68fb      	ldr	r3, [r7, #12]
    8cec:	795b      	ldrb	r3, [r3, #5]
    8cee:	2b01      	cmp	r3, #1
    8cf0:	d001      	beq.n	8cf6 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    8cf2:	2315      	movs	r3, #21
    8cf4:	e05c      	b.n	8db0 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    8cf6:	68fb      	ldr	r3, [r7, #12]
    8cf8:	7a1b      	ldrb	r3, [r3, #8]
    8cfa:	2201      	movs	r2, #1
    8cfc:	4053      	eors	r3, r2
    8cfe:	b2db      	uxtb	r3, r3
    8d00:	2b00      	cmp	r3, #0
    8d02:	d054      	beq.n	8dae <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    8d04:	1dfb      	adds	r3, r7, #7
    8d06:	781b      	ldrb	r3, [r3, #0]
    8d08:	2b00      	cmp	r3, #0
    8d0a:	d04a      	beq.n	8da2 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    8d0c:	68bb      	ldr	r3, [r7, #8]
    8d0e:	785b      	ldrb	r3, [r3, #1]
    8d10:	2b00      	cmp	r3, #0
    8d12:	d03f      	beq.n	8d94 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    8d14:	68fb      	ldr	r3, [r7, #12]
    8d16:	0018      	movs	r0, r3
    8d18:	4b27      	ldr	r3, [pc, #156]	; (8db8 <spi_select_slave+0xdc>)
    8d1a:	4798      	blx	r3
    8d1c:	0003      	movs	r3, r0
    8d1e:	001a      	movs	r2, r3
    8d20:	2301      	movs	r3, #1
    8d22:	4053      	eors	r3, r2
    8d24:	b2db      	uxtb	r3, r3
    8d26:	2b00      	cmp	r3, #0
    8d28:	d007      	beq.n	8d3a <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    8d2a:	68bb      	ldr	r3, [r7, #8]
    8d2c:	781b      	ldrb	r3, [r3, #0]
    8d2e:	2101      	movs	r1, #1
    8d30:	0018      	movs	r0, r3
    8d32:	4b22      	ldr	r3, [pc, #136]	; (8dbc <spi_select_slave+0xe0>)
    8d34:	4798      	blx	r3
					return STATUS_BUSY;
    8d36:	2305      	movs	r3, #5
    8d38:	e03a      	b.n	8db0 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    8d3a:	68bb      	ldr	r3, [r7, #8]
    8d3c:	781b      	ldrb	r3, [r3, #0]
    8d3e:	2100      	movs	r1, #0
    8d40:	0018      	movs	r0, r3
    8d42:	4b1e      	ldr	r3, [pc, #120]	; (8dbc <spi_select_slave+0xe0>)
    8d44:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    8d46:	68bb      	ldr	r3, [r7, #8]
    8d48:	789b      	ldrb	r3, [r3, #2]
    8d4a:	b29a      	uxth	r2, r3
    8d4c:	68fb      	ldr	r3, [r7, #12]
    8d4e:	0011      	movs	r1, r2
    8d50:	0018      	movs	r0, r3
    8d52:	4b1b      	ldr	r3, [pc, #108]	; (8dc0 <spi_select_slave+0xe4>)
    8d54:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    8d56:	68fb      	ldr	r3, [r7, #12]
    8d58:	79db      	ldrb	r3, [r3, #7]
    8d5a:	2201      	movs	r2, #1
    8d5c:	4053      	eors	r3, r2
    8d5e:	b2db      	uxtb	r3, r3
    8d60:	2b00      	cmp	r3, #0
    8d62:	d024      	beq.n	8dae <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    8d64:	46c0      	nop			; (mov r8, r8)
    8d66:	68fb      	ldr	r3, [r7, #12]
    8d68:	0018      	movs	r0, r3
    8d6a:	4b16      	ldr	r3, [pc, #88]	; (8dc4 <spi_select_slave+0xe8>)
    8d6c:	4798      	blx	r3
    8d6e:	0003      	movs	r3, r0
    8d70:	001a      	movs	r2, r3
    8d72:	2301      	movs	r3, #1
    8d74:	4053      	eors	r3, r2
    8d76:	b2db      	uxtb	r3, r3
    8d78:	2b00      	cmp	r3, #0
    8d7a:	d1f4      	bne.n	8d66 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    8d7c:	2316      	movs	r3, #22
    8d7e:	18fb      	adds	r3, r7, r3
    8d80:	2200      	movs	r2, #0
    8d82:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    8d84:	2316      	movs	r3, #22
    8d86:	18fa      	adds	r2, r7, r3
    8d88:	68fb      	ldr	r3, [r7, #12]
    8d8a:	0011      	movs	r1, r2
    8d8c:	0018      	movs	r0, r3
    8d8e:	4b0e      	ldr	r3, [pc, #56]	; (8dc8 <spi_select_slave+0xec>)
    8d90:	4798      	blx	r3
    8d92:	e00c      	b.n	8dae <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    8d94:	68bb      	ldr	r3, [r7, #8]
    8d96:	781b      	ldrb	r3, [r3, #0]
    8d98:	2100      	movs	r1, #0
    8d9a:	0018      	movs	r0, r3
    8d9c:	4b07      	ldr	r3, [pc, #28]	; (8dbc <spi_select_slave+0xe0>)
    8d9e:	4798      	blx	r3
    8da0:	e005      	b.n	8dae <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    8da2:	68bb      	ldr	r3, [r7, #8]
    8da4:	781b      	ldrb	r3, [r3, #0]
    8da6:	2101      	movs	r1, #1
    8da8:	0018      	movs	r0, r3
    8daa:	4b04      	ldr	r3, [pc, #16]	; (8dbc <spi_select_slave+0xe0>)
    8dac:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    8dae:	2300      	movs	r3, #0
}
    8db0:	0018      	movs	r0, r3
    8db2:	46bd      	mov	sp, r7
    8db4:	b006      	add	sp, #24
    8db6:	bd80      	pop	{r7, pc}
    8db8:	000086e9 	.word	0x000086e9
    8dbc:	00008601 	.word	0x00008601
    8dc0:	00008739 	.word	0x00008739
    8dc4:	00008711 	.word	0x00008711
    8dc8:	00008781 	.word	0x00008781

00008dcc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    8dcc:	b580      	push	{r7, lr}
    8dce:	b084      	sub	sp, #16
    8dd0:	af00      	add	r7, sp, #0
    8dd2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8dd4:	687b      	ldr	r3, [r7, #4]
    8dd6:	681b      	ldr	r3, [r3, #0]
    8dd8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    8dda:	687b      	ldr	r3, [r7, #4]
    8ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8dde:	781b      	ldrb	r3, [r3, #0]
    8de0:	b2da      	uxtb	r2, r3
    8de2:	230e      	movs	r3, #14
    8de4:	18fb      	adds	r3, r7, r3
    8de6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    8de8:	687b      	ldr	r3, [r7, #4]
    8dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8dec:	1c5a      	adds	r2, r3, #1
    8dee:	687b      	ldr	r3, [r7, #4]
    8df0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8df2:	687b      	ldr	r3, [r7, #4]
    8df4:	799b      	ldrb	r3, [r3, #6]
    8df6:	2b01      	cmp	r3, #1
    8df8:	d113      	bne.n	8e22 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    8dfa:	687b      	ldr	r3, [r7, #4]
    8dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8dfe:	781b      	ldrb	r3, [r3, #0]
    8e00:	b2db      	uxtb	r3, r3
    8e02:	021b      	lsls	r3, r3, #8
    8e04:	b21a      	sxth	r2, r3
    8e06:	230e      	movs	r3, #14
    8e08:	18fb      	adds	r3, r7, r3
    8e0a:	2100      	movs	r1, #0
    8e0c:	5e5b      	ldrsh	r3, [r3, r1]
    8e0e:	4313      	orrs	r3, r2
    8e10:	b21a      	sxth	r2, r3
    8e12:	230e      	movs	r3, #14
    8e14:	18fb      	adds	r3, r7, r3
    8e16:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    8e18:	687b      	ldr	r3, [r7, #4]
    8e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8e1c:	1c5a      	adds	r2, r3, #1
    8e1e:	687b      	ldr	r3, [r7, #4]
    8e20:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    8e22:	230e      	movs	r3, #14
    8e24:	18fb      	adds	r3, r7, r3
    8e26:	881b      	ldrh	r3, [r3, #0]
    8e28:	05db      	lsls	r3, r3, #23
    8e2a:	0dda      	lsrs	r2, r3, #23
    8e2c:	68bb      	ldr	r3, [r7, #8]
    8e2e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    8e30:	687b      	ldr	r3, [r7, #4]
    8e32:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8e34:	b29b      	uxth	r3, r3
    8e36:	3b01      	subs	r3, #1
    8e38:	b29a      	uxth	r2, r3
    8e3a:	687b      	ldr	r3, [r7, #4]
    8e3c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    8e3e:	46c0      	nop			; (mov r8, r8)
    8e40:	46bd      	mov	sp, r7
    8e42:	b004      	add	sp, #16
    8e44:	bd80      	pop	{r7, pc}
    8e46:	46c0      	nop			; (mov r8, r8)

00008e48 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    8e48:	b580      	push	{r7, lr}
    8e4a:	b084      	sub	sp, #16
    8e4c:	af00      	add	r7, sp, #0
    8e4e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8e50:	687b      	ldr	r3, [r7, #4]
    8e52:	681b      	ldr	r3, [r3, #0]
    8e54:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    8e56:	4b08      	ldr	r3, [pc, #32]	; (8e78 <_spi_write_dummy+0x30>)
    8e58:	881b      	ldrh	r3, [r3, #0]
    8e5a:	001a      	movs	r2, r3
    8e5c:	68fb      	ldr	r3, [r7, #12]
    8e5e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    8e60:	687b      	ldr	r3, [r7, #4]
    8e62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8e64:	b29b      	uxth	r3, r3
    8e66:	3b01      	subs	r3, #1
    8e68:	b29a      	uxth	r2, r3
    8e6a:	687b      	ldr	r3, [r7, #4]
    8e6c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8e6e:	46c0      	nop			; (mov r8, r8)
    8e70:	46bd      	mov	sp, r7
    8e72:	b004      	add	sp, #16
    8e74:	bd80      	pop	{r7, pc}
    8e76:	46c0      	nop			; (mov r8, r8)
    8e78:	20004780 	.word	0x20004780

00008e7c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    8e7c:	b580      	push	{r7, lr}
    8e7e:	b084      	sub	sp, #16
    8e80:	af00      	add	r7, sp, #0
    8e82:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8e84:	687b      	ldr	r3, [r7, #4]
    8e86:	681b      	ldr	r3, [r3, #0]
    8e88:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    8e8a:	230a      	movs	r3, #10
    8e8c:	18fb      	adds	r3, r7, r3
    8e8e:	2200      	movs	r2, #0
    8e90:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    8e92:	68fb      	ldr	r3, [r7, #12]
    8e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8e96:	230a      	movs	r3, #10
    8e98:	18fb      	adds	r3, r7, r3
    8e9a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    8e9c:	687b      	ldr	r3, [r7, #4]
    8e9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8ea0:	b29b      	uxth	r3, r3
    8ea2:	3b01      	subs	r3, #1
    8ea4:	b29a      	uxth	r2, r3
    8ea6:	687b      	ldr	r3, [r7, #4]
    8ea8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8eaa:	46c0      	nop			; (mov r8, r8)
    8eac:	46bd      	mov	sp, r7
    8eae:	b004      	add	sp, #16
    8eb0:	bd80      	pop	{r7, pc}
    8eb2:	46c0      	nop			; (mov r8, r8)

00008eb4 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    8eb4:	b580      	push	{r7, lr}
    8eb6:	b084      	sub	sp, #16
    8eb8:	af00      	add	r7, sp, #0
    8eba:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	681b      	ldr	r3, [r3, #0]
    8ec0:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    8ec2:	68fb      	ldr	r3, [r7, #12]
    8ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ec6:	b29a      	uxth	r2, r3
    8ec8:	230a      	movs	r3, #10
    8eca:	18fb      	adds	r3, r7, r3
    8ecc:	05d2      	lsls	r2, r2, #23
    8ece:	0dd2      	lsrs	r2, r2, #23
    8ed0:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    8ed2:	687b      	ldr	r3, [r7, #4]
    8ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ed6:	220a      	movs	r2, #10
    8ed8:	18ba      	adds	r2, r7, r2
    8eda:	8812      	ldrh	r2, [r2, #0]
    8edc:	b2d2      	uxtb	r2, r2
    8ede:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    8ee0:	687b      	ldr	r3, [r7, #4]
    8ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ee4:	1c5a      	adds	r2, r3, #1
    8ee6:	687b      	ldr	r3, [r7, #4]
    8ee8:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8eea:	687b      	ldr	r3, [r7, #4]
    8eec:	799b      	ldrb	r3, [r3, #6]
    8eee:	2b01      	cmp	r3, #1
    8ef0:	d10d      	bne.n	8f0e <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    8ef2:	687b      	ldr	r3, [r7, #4]
    8ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8ef6:	220a      	movs	r2, #10
    8ef8:	18ba      	adds	r2, r7, r2
    8efa:	8812      	ldrh	r2, [r2, #0]
    8efc:	0a12      	lsrs	r2, r2, #8
    8efe:	b292      	uxth	r2, r2
    8f00:	b2d2      	uxtb	r2, r2
    8f02:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    8f04:	687b      	ldr	r3, [r7, #4]
    8f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8f08:	1c5a      	adds	r2, r3, #1
    8f0a:	687b      	ldr	r3, [r7, #4]
    8f0c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    8f0e:	687b      	ldr	r3, [r7, #4]
    8f10:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    8f12:	b29b      	uxth	r3, r3
    8f14:	3b01      	subs	r3, #1
    8f16:	b29a      	uxth	r2, r3
    8f18:	687b      	ldr	r3, [r7, #4]
    8f1a:	861a      	strh	r2, [r3, #48]	; 0x30
}
    8f1c:	46c0      	nop			; (mov r8, r8)
    8f1e:	46bd      	mov	sp, r7
    8f20:	b004      	add	sp, #16
    8f22:	bd80      	pop	{r7, pc}

00008f24 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    8f24:	b580      	push	{r7, lr}
    8f26:	b086      	sub	sp, #24
    8f28:	af00      	add	r7, sp, #0
    8f2a:	0002      	movs	r2, r0
    8f2c:	1dfb      	adds	r3, r7, #7
    8f2e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    8f30:	1dfb      	adds	r3, r7, #7
    8f32:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    8f34:	4b96      	ldr	r3, [pc, #600]	; (9190 <_spi_interrupt_handler+0x26c>)
    8f36:	0092      	lsls	r2, r2, #2
    8f38:	58d3      	ldr	r3, [r2, r3]
    8f3a:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8f3c:	697b      	ldr	r3, [r7, #20]
    8f3e:	681b      	ldr	r3, [r3, #0]
    8f40:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    8f42:	697b      	ldr	r3, [r7, #20]
    8f44:	2237      	movs	r2, #55	; 0x37
    8f46:	5c9a      	ldrb	r2, [r3, r2]
    8f48:	697b      	ldr	r3, [r7, #20]
    8f4a:	2136      	movs	r1, #54	; 0x36
    8f4c:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    8f4e:	230f      	movs	r3, #15
    8f50:	18fb      	adds	r3, r7, r3
    8f52:	400a      	ands	r2, r1
    8f54:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    8f56:	693b      	ldr	r3, [r7, #16]
    8f58:	7e1b      	ldrb	r3, [r3, #24]
    8f5a:	b2da      	uxtb	r2, r3
    8f5c:	230c      	movs	r3, #12
    8f5e:	18fb      	adds	r3, r7, r3
    8f60:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    8f62:	693b      	ldr	r3, [r7, #16]
    8f64:	7d9b      	ldrb	r3, [r3, #22]
    8f66:	b2db      	uxtb	r3, r3
    8f68:	b29a      	uxth	r2, r3
    8f6a:	230c      	movs	r3, #12
    8f6c:	18fb      	adds	r3, r7, r3
    8f6e:	210c      	movs	r1, #12
    8f70:	1879      	adds	r1, r7, r1
    8f72:	8809      	ldrh	r1, [r1, #0]
    8f74:	400a      	ands	r2, r1
    8f76:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    8f78:	230c      	movs	r3, #12
    8f7a:	18fb      	adds	r3, r7, r3
    8f7c:	881b      	ldrh	r3, [r3, #0]
    8f7e:	2201      	movs	r2, #1
    8f80:	4013      	ands	r3, r2
    8f82:	d038      	beq.n	8ff6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8f84:	697b      	ldr	r3, [r7, #20]
    8f86:	795b      	ldrb	r3, [r3, #5]
    8f88:	2b01      	cmp	r3, #1
    8f8a:	d110      	bne.n	8fae <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    8f8c:	697b      	ldr	r3, [r7, #20]
    8f8e:	7a5b      	ldrb	r3, [r3, #9]
    8f90:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8f92:	2b00      	cmp	r3, #0
    8f94:	d10b      	bne.n	8fae <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    8f96:	697b      	ldr	r3, [r7, #20]
    8f98:	0018      	movs	r0, r3
    8f9a:	4b7e      	ldr	r3, [pc, #504]	; (9194 <_spi_interrupt_handler+0x270>)
    8f9c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    8f9e:	697b      	ldr	r3, [r7, #20]
    8fa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8fa2:	b29b      	uxth	r3, r3
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d102      	bne.n	8fae <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8fa8:	693b      	ldr	r3, [r7, #16]
    8faa:	2201      	movs	r2, #1
    8fac:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    8fae:	697b      	ldr	r3, [r7, #20]
    8fb0:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    8fb2:	2b01      	cmp	r3, #1
    8fb4:	d11f      	bne.n	8ff6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    8fb6:	697b      	ldr	r3, [r7, #20]
    8fb8:	7a5b      	ldrb	r3, [r3, #9]
    8fba:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    8fbc:	2b00      	cmp	r3, #0
    8fbe:	d01a      	beq.n	8ff6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    8fc0:	697b      	ldr	r3, [r7, #20]
    8fc2:	0018      	movs	r0, r3
    8fc4:	4b74      	ldr	r3, [pc, #464]	; (9198 <_spi_interrupt_handler+0x274>)
    8fc6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    8fc8:	697b      	ldr	r3, [r7, #20]
    8fca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8fcc:	b29b      	uxth	r3, r3
    8fce:	2b00      	cmp	r3, #0
    8fd0:	d111      	bne.n	8ff6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8fd2:	693b      	ldr	r3, [r7, #16]
    8fd4:	2201      	movs	r2, #1
    8fd6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    8fd8:	697b      	ldr	r3, [r7, #20]
    8fda:	7a5b      	ldrb	r3, [r3, #9]
    8fdc:	b2db      	uxtb	r3, r3
    8fde:	2b01      	cmp	r3, #1
    8fe0:	d109      	bne.n	8ff6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    8fe2:	697b      	ldr	r3, [r7, #20]
    8fe4:	79db      	ldrb	r3, [r3, #7]
    8fe6:	2201      	movs	r2, #1
    8fe8:	4053      	eors	r3, r2
    8fea:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    8fec:	2b00      	cmp	r3, #0
    8fee:	d002      	beq.n	8ff6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    8ff0:	693b      	ldr	r3, [r7, #16]
    8ff2:	2202      	movs	r2, #2
    8ff4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    8ff6:	230c      	movs	r3, #12
    8ff8:	18fb      	adds	r3, r7, r3
    8ffa:	881b      	ldrh	r3, [r3, #0]
    8ffc:	2204      	movs	r2, #4
    8ffe:	4013      	ands	r3, r2
    9000:	d100      	bne.n	9004 <_spi_interrupt_handler+0xe0>
    9002:	e07e      	b.n	9102 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    9004:	693b      	ldr	r3, [r7, #16]
    9006:	8b5b      	ldrh	r3, [r3, #26]
    9008:	b29b      	uxth	r3, r3
    900a:	001a      	movs	r2, r3
    900c:	2304      	movs	r3, #4
    900e:	4013      	ands	r3, r2
    9010:	d022      	beq.n	9058 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    9012:	697b      	ldr	r3, [r7, #20]
    9014:	7a5b      	ldrb	r3, [r3, #9]
    9016:	b2db      	uxtb	r3, r3
    9018:	2b01      	cmp	r3, #1
    901a:	d014      	beq.n	9046 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    901c:	697b      	ldr	r3, [r7, #20]
    901e:	2238      	movs	r2, #56	; 0x38
    9020:	211e      	movs	r1, #30
    9022:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    9024:	697b      	ldr	r3, [r7, #20]
    9026:	2203      	movs	r2, #3
    9028:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    902a:	693b      	ldr	r3, [r7, #16]
    902c:	2205      	movs	r2, #5
    902e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    9030:	230f      	movs	r3, #15
    9032:	18fb      	adds	r3, r7, r3
    9034:	781b      	ldrb	r3, [r3, #0]
    9036:	2208      	movs	r2, #8
    9038:	4013      	ands	r3, r2
    903a:	d004      	beq.n	9046 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    903c:	697b      	ldr	r3, [r7, #20]
    903e:	699b      	ldr	r3, [r3, #24]
    9040:	697a      	ldr	r2, [r7, #20]
    9042:	0010      	movs	r0, r2
    9044:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    9046:	693b      	ldr	r3, [r7, #16]
    9048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    904a:	230a      	movs	r3, #10
    904c:	18fb      	adds	r3, r7, r3
    904e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    9050:	693b      	ldr	r3, [r7, #16]
    9052:	2204      	movs	r2, #4
    9054:	835a      	strh	r2, [r3, #26]
    9056:	e054      	b.n	9102 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    9058:	697b      	ldr	r3, [r7, #20]
    905a:	7a5b      	ldrb	r3, [r3, #9]
    905c:	b2db      	uxtb	r3, r3
    905e:	2b01      	cmp	r3, #1
    9060:	d11e      	bne.n	90a0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    9062:	697b      	ldr	r3, [r7, #20]
    9064:	0018      	movs	r0, r3
    9066:	4b4d      	ldr	r3, [pc, #308]	; (919c <_spi_interrupt_handler+0x278>)
    9068:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    906a:	697b      	ldr	r3, [r7, #20]
    906c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    906e:	b29b      	uxth	r3, r3
    9070:	2b00      	cmp	r3, #0
    9072:	d146      	bne.n	9102 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    9074:	693b      	ldr	r3, [r7, #16]
    9076:	2204      	movs	r2, #4
    9078:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    907a:	697b      	ldr	r3, [r7, #20]
    907c:	2238      	movs	r2, #56	; 0x38
    907e:	2100      	movs	r1, #0
    9080:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    9082:	697b      	ldr	r3, [r7, #20]
    9084:	2203      	movs	r2, #3
    9086:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    9088:	230f      	movs	r3, #15
    908a:	18fb      	adds	r3, r7, r3
    908c:	781b      	ldrb	r3, [r3, #0]
    908e:	2201      	movs	r2, #1
    9090:	4013      	ands	r3, r2
    9092:	d036      	beq.n	9102 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    9094:	697b      	ldr	r3, [r7, #20]
    9096:	68db      	ldr	r3, [r3, #12]
    9098:	697a      	ldr	r2, [r7, #20]
    909a:	0010      	movs	r0, r2
    909c:	4798      	blx	r3
    909e:	e030      	b.n	9102 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    90a0:	697b      	ldr	r3, [r7, #20]
    90a2:	0018      	movs	r0, r3
    90a4:	4b3e      	ldr	r3, [pc, #248]	; (91a0 <_spi_interrupt_handler+0x27c>)
    90a6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    90a8:	697b      	ldr	r3, [r7, #20]
    90aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    90ac:	b29b      	uxth	r3, r3
    90ae:	2b00      	cmp	r3, #0
    90b0:	d127      	bne.n	9102 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    90b2:	697b      	ldr	r3, [r7, #20]
    90b4:	2238      	movs	r2, #56	; 0x38
    90b6:	2100      	movs	r1, #0
    90b8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    90ba:	693b      	ldr	r3, [r7, #16]
    90bc:	2204      	movs	r2, #4
    90be:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    90c0:	697b      	ldr	r3, [r7, #20]
    90c2:	7a5b      	ldrb	r3, [r3, #9]
    90c4:	b2db      	uxtb	r3, r3
    90c6:	2b02      	cmp	r3, #2
    90c8:	d10b      	bne.n	90e2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    90ca:	230f      	movs	r3, #15
    90cc:	18fb      	adds	r3, r7, r3
    90ce:	781b      	ldrb	r3, [r3, #0]
    90d0:	2204      	movs	r2, #4
    90d2:	4013      	ands	r3, r2
    90d4:	d015      	beq.n	9102 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    90d6:	697b      	ldr	r3, [r7, #20]
    90d8:	695b      	ldr	r3, [r3, #20]
    90da:	697a      	ldr	r2, [r7, #20]
    90dc:	0010      	movs	r0, r2
    90de:	4798      	blx	r3
    90e0:	e00f      	b.n	9102 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    90e2:	697b      	ldr	r3, [r7, #20]
    90e4:	7a5b      	ldrb	r3, [r3, #9]
    90e6:	b2db      	uxtb	r3, r3
    90e8:	2b00      	cmp	r3, #0
    90ea:	d10a      	bne.n	9102 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    90ec:	230f      	movs	r3, #15
    90ee:	18fb      	adds	r3, r7, r3
    90f0:	781b      	ldrb	r3, [r3, #0]
    90f2:	2202      	movs	r2, #2
    90f4:	4013      	ands	r3, r2
    90f6:	d004      	beq.n	9102 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    90f8:	697b      	ldr	r3, [r7, #20]
    90fa:	691b      	ldr	r3, [r3, #16]
    90fc:	697a      	ldr	r2, [r7, #20]
    90fe:	0010      	movs	r0, r2
    9100:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    9102:	230c      	movs	r3, #12
    9104:	18fb      	adds	r3, r7, r3
    9106:	881b      	ldrh	r3, [r3, #0]
    9108:	2202      	movs	r2, #2
    910a:	4013      	ands	r3, r2
    910c:	d024      	beq.n	9158 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    910e:	697b      	ldr	r3, [r7, #20]
    9110:	795b      	ldrb	r3, [r3, #5]
    9112:	2b01      	cmp	r3, #1
    9114:	d120      	bne.n	9158 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9116:	697b      	ldr	r3, [r7, #20]
    9118:	7a5b      	ldrb	r3, [r3, #9]
    911a:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    911c:	2b01      	cmp	r3, #1
    911e:	d11b      	bne.n	9158 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    9120:	697b      	ldr	r3, [r7, #20]
    9122:	79db      	ldrb	r3, [r3, #7]
    9124:	2201      	movs	r2, #1
    9126:	4053      	eors	r3, r2
    9128:	b2db      	uxtb	r3, r3
    912a:	2b00      	cmp	r3, #0
    912c:	d014      	beq.n	9158 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    912e:	693b      	ldr	r3, [r7, #16]
    9130:	2202      	movs	r2, #2
    9132:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    9134:	697b      	ldr	r3, [r7, #20]
    9136:	2203      	movs	r2, #3
    9138:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    913a:	697b      	ldr	r3, [r7, #20]
    913c:	2238      	movs	r2, #56	; 0x38
    913e:	2100      	movs	r1, #0
    9140:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    9142:	230f      	movs	r3, #15
    9144:	18fb      	adds	r3, r7, r3
    9146:	781b      	ldrb	r3, [r3, #0]
    9148:	2201      	movs	r2, #1
    914a:	4013      	ands	r3, r2
    914c:	d004      	beq.n	9158 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    914e:	697b      	ldr	r3, [r7, #20]
    9150:	68db      	ldr	r3, [r3, #12]
    9152:	697a      	ldr	r2, [r7, #20]
    9154:	0010      	movs	r0, r2
    9156:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    9158:	230c      	movs	r3, #12
    915a:	18fb      	adds	r3, r7, r3
    915c:	881b      	ldrh	r3, [r3, #0]
    915e:	2280      	movs	r2, #128	; 0x80
    9160:	4013      	ands	r3, r2
    9162:	d010      	beq.n	9186 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    9164:	693b      	ldr	r3, [r7, #16]
    9166:	2280      	movs	r2, #128	; 0x80
    9168:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    916a:	693b      	ldr	r3, [r7, #16]
    916c:	2280      	movs	r2, #128	; 0x80
    916e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    9170:	230f      	movs	r3, #15
    9172:	18fb      	adds	r3, r7, r3
    9174:	781b      	ldrb	r3, [r3, #0]
    9176:	2240      	movs	r2, #64	; 0x40
    9178:	4013      	ands	r3, r2
    917a:	d004      	beq.n	9186 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    917c:	697b      	ldr	r3, [r7, #20]
    917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9180:	697a      	ldr	r2, [r7, #20]
    9182:	0010      	movs	r0, r2
    9184:	4798      	blx	r3
		}
	}
#  endif
}
    9186:	46c0      	nop			; (mov r8, r8)
    9188:	46bd      	mov	sp, r7
    918a:	b006      	add	sp, #24
    918c:	bd80      	pop	{r7, pc}
    918e:	46c0      	nop			; (mov r8, r8)
    9190:	20004768 	.word	0x20004768
    9194:	00008e49 	.word	0x00008e49
    9198:	00008dcd 	.word	0x00008dcd
    919c:	00008e7d 	.word	0x00008e7d
    91a0:	00008eb5 	.word	0x00008eb5

000091a4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    91a4:	b580      	push	{r7, lr}
    91a6:	b082      	sub	sp, #8
    91a8:	af00      	add	r7, sp, #0
    91aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	2200      	movs	r2, #0
    91b0:	701a      	strb	r2, [r3, #0]
}
    91b2:	46c0      	nop			; (mov r8, r8)
    91b4:	46bd      	mov	sp, r7
    91b6:	b002      	add	sp, #8
    91b8:	bd80      	pop	{r7, pc}
    91ba:	46c0      	nop			; (mov r8, r8)

000091bc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    91bc:	b580      	push	{r7, lr}
    91be:	b082      	sub	sp, #8
    91c0:	af00      	add	r7, sp, #0
    91c2:	0002      	movs	r2, r0
    91c4:	6039      	str	r1, [r7, #0]
    91c6:	1dfb      	adds	r3, r7, #7
    91c8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    91ca:	1dfb      	adds	r3, r7, #7
    91cc:	781b      	ldrb	r3, [r3, #0]
    91ce:	2b01      	cmp	r3, #1
    91d0:	d00a      	beq.n	91e8 <system_apb_clock_set_mask+0x2c>
    91d2:	2b02      	cmp	r3, #2
    91d4:	d00f      	beq.n	91f6 <system_apb_clock_set_mask+0x3a>
    91d6:	2b00      	cmp	r3, #0
    91d8:	d114      	bne.n	9204 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    91da:	4b0e      	ldr	r3, [pc, #56]	; (9214 <system_apb_clock_set_mask+0x58>)
    91dc:	4a0d      	ldr	r2, [pc, #52]	; (9214 <system_apb_clock_set_mask+0x58>)
    91de:	6991      	ldr	r1, [r2, #24]
    91e0:	683a      	ldr	r2, [r7, #0]
    91e2:	430a      	orrs	r2, r1
    91e4:	619a      	str	r2, [r3, #24]
			break;
    91e6:	e00f      	b.n	9208 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    91e8:	4b0a      	ldr	r3, [pc, #40]	; (9214 <system_apb_clock_set_mask+0x58>)
    91ea:	4a0a      	ldr	r2, [pc, #40]	; (9214 <system_apb_clock_set_mask+0x58>)
    91ec:	69d1      	ldr	r1, [r2, #28]
    91ee:	683a      	ldr	r2, [r7, #0]
    91f0:	430a      	orrs	r2, r1
    91f2:	61da      	str	r2, [r3, #28]
			break;
    91f4:	e008      	b.n	9208 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    91f6:	4b07      	ldr	r3, [pc, #28]	; (9214 <system_apb_clock_set_mask+0x58>)
    91f8:	4a06      	ldr	r2, [pc, #24]	; (9214 <system_apb_clock_set_mask+0x58>)
    91fa:	6a11      	ldr	r1, [r2, #32]
    91fc:	683a      	ldr	r2, [r7, #0]
    91fe:	430a      	orrs	r2, r1
    9200:	621a      	str	r2, [r3, #32]
			break;
    9202:	e001      	b.n	9208 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    9204:	2317      	movs	r3, #23
    9206:	e000      	b.n	920a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    9208:	2300      	movs	r3, #0
}
    920a:	0018      	movs	r0, r3
    920c:	46bd      	mov	sp, r7
    920e:	b002      	add	sp, #8
    9210:	bd80      	pop	{r7, pc}
    9212:	46c0      	nop			; (mov r8, r8)
    9214:	40000400 	.word	0x40000400

00009218 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    9218:	b580      	push	{r7, lr}
    921a:	b082      	sub	sp, #8
    921c:	af00      	add	r7, sp, #0
    921e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    9220:	687b      	ldr	r3, [r7, #4]
    9222:	2280      	movs	r2, #128	; 0x80
    9224:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9226:	687b      	ldr	r3, [r7, #4]
    9228:	2200      	movs	r2, #0
    922a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    922c:	687b      	ldr	r3, [r7, #4]
    922e:	2201      	movs	r2, #1
    9230:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    9232:	687b      	ldr	r3, [r7, #4]
    9234:	2200      	movs	r2, #0
    9236:	70da      	strb	r2, [r3, #3]
}
    9238:	46c0      	nop			; (mov r8, r8)
    923a:	46bd      	mov	sp, r7
    923c:	b002      	add	sp, #8
    923e:	bd80      	pop	{r7, pc}

00009240 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    9240:	b580      	push	{r7, lr}
    9242:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    9244:	4b05      	ldr	r3, [pc, #20]	; (925c <system_is_debugger_present+0x1c>)
    9246:	789b      	ldrb	r3, [r3, #2]
    9248:	b2db      	uxtb	r3, r3
    924a:	001a      	movs	r2, r3
    924c:	2302      	movs	r3, #2
    924e:	4013      	ands	r3, r2
    9250:	1e5a      	subs	r2, r3, #1
    9252:	4193      	sbcs	r3, r2
    9254:	b2db      	uxtb	r3, r3
}
    9256:	0018      	movs	r0, r3
    9258:	46bd      	mov	sp, r7
    925a:	bd80      	pop	{r7, pc}
    925c:	41002000 	.word	0x41002000

00009260 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    9260:	b580      	push	{r7, lr}
    9262:	b084      	sub	sp, #16
    9264:	af00      	add	r7, sp, #0
    9266:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    9268:	687b      	ldr	r3, [r7, #4]
    926a:	681b      	ldr	r3, [r3, #0]
    926c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    926e:	68fb      	ldr	r3, [r7, #12]
    9270:	69db      	ldr	r3, [r3, #28]
    9272:	1e5a      	subs	r2, r3, #1
    9274:	4193      	sbcs	r3, r2
    9276:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    9278:	0018      	movs	r0, r3
    927a:	46bd      	mov	sp, r7
    927c:	b004      	add	sp, #16
    927e:	bd80      	pop	{r7, pc}

00009280 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    9280:	b580      	push	{r7, lr}
    9282:	b082      	sub	sp, #8
    9284:	af00      	add	r7, sp, #0
    9286:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    9288:	46c0      	nop			; (mov r8, r8)
    928a:	687b      	ldr	r3, [r7, #4]
    928c:	0018      	movs	r0, r3
    928e:	4b04      	ldr	r3, [pc, #16]	; (92a0 <_usart_wait_for_sync+0x20>)
    9290:	4798      	blx	r3
    9292:	1e03      	subs	r3, r0, #0
    9294:	d1f9      	bne.n	928a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    9296:	46c0      	nop			; (mov r8, r8)
    9298:	46bd      	mov	sp, r7
    929a:	b002      	add	sp, #8
    929c:	bd80      	pop	{r7, pc}
    929e:	46c0      	nop			; (mov r8, r8)
    92a0:	00009261 	.word	0x00009261

000092a4 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    92a4:	b5b0      	push	{r4, r5, r7, lr}
    92a6:	b08c      	sub	sp, #48	; 0x30
    92a8:	af02      	add	r7, sp, #8
    92aa:	6078      	str	r0, [r7, #4]
    92ac:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    92ae:	687b      	ldr	r3, [r7, #4]
    92b0:	681b      	ldr	r3, [r3, #0]
    92b2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	681b      	ldr	r3, [r3, #0]
    92b8:	0018      	movs	r0, r3
    92ba:	4ba8      	ldr	r3, [pc, #672]	; (955c <_usart_set_config+0x2b8>)
    92bc:	4798      	blx	r3
    92be:	0003      	movs	r3, r0
    92c0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    92c2:	697b      	ldr	r3, [r7, #20]
    92c4:	3314      	adds	r3, #20
    92c6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    92c8:	2300      	movs	r3, #0
    92ca:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    92cc:	2300      	movs	r3, #0
    92ce:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    92d0:	230a      	movs	r3, #10
    92d2:	18fb      	adds	r3, r7, r3
    92d4:	2200      	movs	r2, #0
    92d6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    92d8:	231f      	movs	r3, #31
    92da:	18fb      	adds	r3, r7, r3
    92dc:	2200      	movs	r2, #0
    92de:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    92e0:	231e      	movs	r3, #30
    92e2:	18fb      	adds	r3, r7, r3
    92e4:	2210      	movs	r2, #16
    92e6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    92e8:	683b      	ldr	r3, [r7, #0]
    92ea:	8a1b      	ldrh	r3, [r3, #16]
    92ec:	2280      	movs	r2, #128	; 0x80
    92ee:	01d2      	lsls	r2, r2, #7
    92f0:	4293      	cmp	r3, r2
    92f2:	d01c      	beq.n	932e <_usart_set_config+0x8a>
    92f4:	2280      	movs	r2, #128	; 0x80
    92f6:	01d2      	lsls	r2, r2, #7
    92f8:	4293      	cmp	r3, r2
    92fa:	dc06      	bgt.n	930a <_usart_set_config+0x66>
    92fc:	2b00      	cmp	r3, #0
    92fe:	d00d      	beq.n	931c <_usart_set_config+0x78>
    9300:	2280      	movs	r2, #128	; 0x80
    9302:	0192      	lsls	r2, r2, #6
    9304:	4293      	cmp	r3, r2
    9306:	d024      	beq.n	9352 <_usart_set_config+0xae>
    9308:	e035      	b.n	9376 <_usart_set_config+0xd2>
    930a:	22c0      	movs	r2, #192	; 0xc0
    930c:	01d2      	lsls	r2, r2, #7
    930e:	4293      	cmp	r3, r2
    9310:	d028      	beq.n	9364 <_usart_set_config+0xc0>
    9312:	2280      	movs	r2, #128	; 0x80
    9314:	0212      	lsls	r2, r2, #8
    9316:	4293      	cmp	r3, r2
    9318:	d012      	beq.n	9340 <_usart_set_config+0x9c>
    931a:	e02c      	b.n	9376 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    931c:	231f      	movs	r3, #31
    931e:	18fb      	adds	r3, r7, r3
    9320:	2200      	movs	r2, #0
    9322:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    9324:	231e      	movs	r3, #30
    9326:	18fb      	adds	r3, r7, r3
    9328:	2210      	movs	r2, #16
    932a:	701a      	strb	r2, [r3, #0]
			break;
    932c:	e023      	b.n	9376 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    932e:	231f      	movs	r3, #31
    9330:	18fb      	adds	r3, r7, r3
    9332:	2200      	movs	r2, #0
    9334:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    9336:	231e      	movs	r3, #30
    9338:	18fb      	adds	r3, r7, r3
    933a:	2208      	movs	r2, #8
    933c:	701a      	strb	r2, [r3, #0]
			break;
    933e:	e01a      	b.n	9376 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    9340:	231f      	movs	r3, #31
    9342:	18fb      	adds	r3, r7, r3
    9344:	2200      	movs	r2, #0
    9346:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    9348:	231e      	movs	r3, #30
    934a:	18fb      	adds	r3, r7, r3
    934c:	2203      	movs	r2, #3
    934e:	701a      	strb	r2, [r3, #0]
			break;
    9350:	e011      	b.n	9376 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    9352:	231f      	movs	r3, #31
    9354:	18fb      	adds	r3, r7, r3
    9356:	2201      	movs	r2, #1
    9358:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    935a:	231e      	movs	r3, #30
    935c:	18fb      	adds	r3, r7, r3
    935e:	2210      	movs	r2, #16
    9360:	701a      	strb	r2, [r3, #0]
			break;
    9362:	e008      	b.n	9376 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    9364:	231f      	movs	r3, #31
    9366:	18fb      	adds	r3, r7, r3
    9368:	2201      	movs	r2, #1
    936a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    936c:	231e      	movs	r3, #30
    936e:	18fb      	adds	r3, r7, r3
    9370:	2208      	movs	r2, #8
    9372:	701a      	strb	r2, [r3, #0]
			break;
    9374:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    9376:	683b      	ldr	r3, [r7, #0]
    9378:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    937a:	683b      	ldr	r3, [r7, #0]
    937c:	68db      	ldr	r3, [r3, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    937e:	431a      	orrs	r2, r3
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    9380:	683b      	ldr	r3, [r7, #0]
    9382:	695b      	ldr	r3, [r3, #20]
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
    9384:	4313      	orrs	r3, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    9386:	683a      	ldr	r2, [r7, #0]
    9388:	8a12      	ldrh	r2, [r2, #16]

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    938a:	4313      	orrs	r3, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    938c:	683a      	ldr	r2, [r7, #0]
    938e:	7e12      	ldrb	r2, [r2, #24]
    9390:	0212      	lsls	r2, r2, #8
	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
		(uint32_t)config->mux_setting |
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
		config->sample_rate |
    9392:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    9394:	683a      	ldr	r2, [r7, #0]
    9396:	2126      	movs	r1, #38	; 0x26
    9398:	5c52      	ldrb	r2, [r2, r1]
    939a:	0752      	lsls	r2, r2, #29
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    939c:	4313      	orrs	r3, r2
    939e:	627b      	str	r3, [r7, #36]	; 0x24
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    93a0:	231d      	movs	r3, #29
    93a2:	18fb      	adds	r3, r7, r3
    93a4:	2200      	movs	r2, #0
    93a6:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    93a8:	683b      	ldr	r3, [r7, #0]
    93aa:	685b      	ldr	r3, [r3, #4]
    93ac:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    93ae:	68fb      	ldr	r3, [r7, #12]
    93b0:	2b00      	cmp	r3, #0
    93b2:	d01e      	beq.n	93f2 <_usart_set_config+0x14e>
    93b4:	2280      	movs	r2, #128	; 0x80
    93b6:	0552      	lsls	r2, r2, #21
    93b8:	4293      	cmp	r3, r2
    93ba:	d14f      	bne.n	945c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    93bc:	683b      	ldr	r3, [r7, #0]
    93be:	2227      	movs	r2, #39	; 0x27
    93c0:	5c9b      	ldrb	r3, [r3, r2]
    93c2:	2201      	movs	r2, #1
    93c4:	4053      	eors	r3, r2
    93c6:	b2db      	uxtb	r3, r3
    93c8:	2b00      	cmp	r3, #0
    93ca:	d046      	beq.n	945a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    93cc:	683b      	ldr	r3, [r7, #0]
    93ce:	6a1d      	ldr	r5, [r3, #32]
    93d0:	693b      	ldr	r3, [r7, #16]
    93d2:	b2db      	uxtb	r3, r3
    93d4:	0018      	movs	r0, r3
    93d6:	4b62      	ldr	r3, [pc, #392]	; (9560 <_usart_set_config+0x2bc>)
    93d8:	4798      	blx	r3
    93da:	0001      	movs	r1, r0
    93dc:	231d      	movs	r3, #29
    93de:	18fc      	adds	r4, r7, r3
    93e0:	230a      	movs	r3, #10
    93e2:	18fb      	adds	r3, r7, r3
    93e4:	001a      	movs	r2, r3
    93e6:	0028      	movs	r0, r5
    93e8:	4b5e      	ldr	r3, [pc, #376]	; (9564 <_usart_set_config+0x2c0>)
    93ea:	4798      	blx	r3
    93ec:	0003      	movs	r3, r0
    93ee:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    93f0:	e033      	b.n	945a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    93f2:	683b      	ldr	r3, [r7, #0]
    93f4:	2227      	movs	r2, #39	; 0x27
    93f6:	5c9b      	ldrb	r3, [r3, r2]
    93f8:	2b00      	cmp	r3, #0
    93fa:	d014      	beq.n	9426 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    93fc:	683b      	ldr	r3, [r7, #0]
    93fe:	6a18      	ldr	r0, [r3, #32]
    9400:	683b      	ldr	r3, [r7, #0]
    9402:	6a99      	ldr	r1, [r3, #40]	; 0x28

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
				status_code =
    9404:	231d      	movs	r3, #29
    9406:	18fc      	adds	r4, r7, r3
    9408:	231f      	movs	r3, #31
    940a:	18fb      	adds	r3, r7, r3
    940c:	781d      	ldrb	r5, [r3, #0]
    940e:	230a      	movs	r3, #10
    9410:	18fa      	adds	r2, r7, r3
    9412:	231e      	movs	r3, #30
    9414:	18fb      	adds	r3, r7, r3
    9416:	781b      	ldrb	r3, [r3, #0]
    9418:	9300      	str	r3, [sp, #0]
    941a:	002b      	movs	r3, r5
    941c:	4d52      	ldr	r5, [pc, #328]	; (9568 <_usart_set_config+0x2c4>)
    941e:	47a8      	blx	r5
    9420:	0003      	movs	r3, r0
    9422:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    9424:	e01a      	b.n	945c <_usart_set_config+0x1b8>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    9426:	683b      	ldr	r3, [r7, #0]
    9428:	6a1d      	ldr	r5, [r3, #32]
    942a:	693b      	ldr	r3, [r7, #16]
    942c:	b2db      	uxtb	r3, r3
    942e:	0018      	movs	r0, r3
    9430:	4b4b      	ldr	r3, [pc, #300]	; (9560 <_usart_set_config+0x2bc>)
    9432:	4798      	blx	r3
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    9434:	231d      	movs	r3, #29
    9436:	18fc      	adds	r4, r7, r3
    9438:	231f      	movs	r3, #31
    943a:	18fb      	adds	r3, r7, r3
    943c:	7819      	ldrb	r1, [r3, #0]
    943e:	230a      	movs	r3, #10
    9440:	18fa      	adds	r2, r7, r3
    9442:	231e      	movs	r3, #30
    9444:	18fb      	adds	r3, r7, r3
    9446:	781b      	ldrb	r3, [r3, #0]
    9448:	9300      	str	r3, [sp, #0]
    944a:	000b      	movs	r3, r1
    944c:	0001      	movs	r1, r0
    944e:	0028      	movs	r0, r5
    9450:	4d45      	ldr	r5, [pc, #276]	; (9568 <_usart_set_config+0x2c4>)
    9452:	47a8      	blx	r5
    9454:	0003      	movs	r3, r0
    9456:	7023      	strb	r3, [r4, #0]
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    9458:	e000      	b.n	945c <_usart_set_config+0x1b8>
			if (!config->use_external_clock) {
				status_code = _sercom_get_sync_baud_val(config->baudrate,
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    945a:	46c0      	nop			; (mov r8, r8)

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    945c:	231d      	movs	r3, #29
    945e:	18fb      	adds	r3, r7, r3
    9460:	781b      	ldrb	r3, [r3, #0]
    9462:	2b00      	cmp	r3, #0
    9464:	d003      	beq.n	946e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    9466:	231d      	movs	r3, #29
    9468:	18fb      	adds	r3, r7, r3
    946a:	781b      	ldrb	r3, [r3, #0]
    946c:	e071      	b.n	9552 <_usart_set_config+0x2ae>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    946e:	683b      	ldr	r3, [r7, #0]
    9470:	7e5b      	ldrb	r3, [r3, #25]
    9472:	2b00      	cmp	r3, #0
    9474:	d003      	beq.n	947e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    9476:	683b      	ldr	r3, [r7, #0]
    9478:	7e9a      	ldrb	r2, [r3, #26]
    947a:	69bb      	ldr	r3, [r7, #24]
    947c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    947e:	687b      	ldr	r3, [r7, #4]
    9480:	0018      	movs	r0, r3
    9482:	4b3a      	ldr	r3, [pc, #232]	; (956c <_usart_set_config+0x2c8>)
    9484:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    9486:	230a      	movs	r3, #10
    9488:	18fb      	adds	r3, r7, r3
    948a:	881a      	ldrh	r2, [r3, #0]
    948c:	69bb      	ldr	r3, [r7, #24]
    948e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    9490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9492:	68fb      	ldr	r3, [r7, #12]
    9494:	4313      	orrs	r3, r2
    9496:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    9498:	683b      	ldr	r3, [r7, #0]
    949a:	2227      	movs	r2, #39	; 0x27
    949c:	5c9b      	ldrb	r3, [r3, r2]
    949e:	2201      	movs	r2, #1
    94a0:	4053      	eors	r3, r2
    94a2:	b2db      	uxtb	r3, r3
    94a4:	2b00      	cmp	r3, #0
    94a6:	d003      	beq.n	94b0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    94a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94aa:	2204      	movs	r2, #4
    94ac:	4313      	orrs	r3, r2
    94ae:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    94b0:	683b      	ldr	r3, [r7, #0]
    94b2:	7e5b      	ldrb	r3, [r3, #25]
    94b4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    94b6:	683b      	ldr	r3, [r7, #0]
    94b8:	7f1b      	ldrb	r3, [r3, #28]
    94ba:	025b      	lsls	r3, r3, #9
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    94bc:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    94be:	683b      	ldr	r3, [r7, #0]
    94c0:	7f5b      	ldrb	r3, [r3, #29]
    94c2:	021b      	lsls	r3, r3, #8
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    94c4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    94c6:	683b      	ldr	r3, [r7, #0]
    94c8:	2124      	movs	r1, #36	; 0x24
    94ca:	5c5b      	ldrb	r3, [r3, r1]
    94cc:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    94ce:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    94d0:	683b      	ldr	r3, [r7, #0]
    94d2:	2125      	movs	r1, #37	; 0x25
    94d4:	5c5b      	ldrb	r3, [r3, r1]
    94d6:	041b      	lsls	r3, r3, #16
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    94d8:	4313      	orrs	r3, r2
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
    94da:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->character_size;
    94dc:	683b      	ldr	r3, [r7, #0]
    94de:	7adb      	ldrb	r3, [r3, #11]
    94e0:	001a      	movs	r2, r3
    94e2:	6a3b      	ldr	r3, [r7, #32]
    94e4:	4313      	orrs	r3, r2
    94e6:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    94e8:	683b      	ldr	r3, [r7, #0]
    94ea:	891b      	ldrh	r3, [r3, #8]
    94ec:	2bff      	cmp	r3, #255	; 0xff
    94ee:	d00b      	beq.n	9508 <_usart_set_config+0x264>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    94f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    94f2:	2280      	movs	r2, #128	; 0x80
    94f4:	0452      	lsls	r2, r2, #17
    94f6:	4313      	orrs	r3, r2
    94f8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    94fa:	683b      	ldr	r3, [r7, #0]
    94fc:	891b      	ldrh	r3, [r3, #8]
    94fe:	001a      	movs	r2, r3
    9500:	6a3b      	ldr	r3, [r7, #32]
    9502:	4313      	orrs	r3, r2
    9504:	623b      	str	r3, [r7, #32]
    9506:	e008      	b.n	951a <_usart_set_config+0x276>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    9508:	683b      	ldr	r3, [r7, #0]
    950a:	7edb      	ldrb	r3, [r3, #27]
    950c:	2b00      	cmp	r3, #0
    950e:	d004      	beq.n	951a <_usart_set_config+0x276>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    9510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9512:	2280      	movs	r2, #128	; 0x80
    9514:	04d2      	lsls	r2, r2, #19
    9516:	4313      	orrs	r3, r2
    9518:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    951a:	683b      	ldr	r3, [r7, #0]
    951c:	222c      	movs	r2, #44	; 0x2c
    951e:	5c9b      	ldrb	r3, [r3, r2]
    9520:	2b00      	cmp	r3, #0
    9522:	d103      	bne.n	952c <_usart_set_config+0x288>
    9524:	4b12      	ldr	r3, [pc, #72]	; (9570 <_usart_set_config+0x2cc>)
    9526:	4798      	blx	r3
    9528:	1e03      	subs	r3, r0, #0
    952a:	d003      	beq.n	9534 <_usart_set_config+0x290>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    952e:	2280      	movs	r2, #128	; 0x80
    9530:	4313      	orrs	r3, r2
    9532:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9534:	687b      	ldr	r3, [r7, #4]
    9536:	0018      	movs	r0, r3
    9538:	4b0c      	ldr	r3, [pc, #48]	; (956c <_usart_set_config+0x2c8>)
    953a:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    953c:	69bb      	ldr	r3, [r7, #24]
    953e:	6a3a      	ldr	r2, [r7, #32]
    9540:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    9542:	687b      	ldr	r3, [r7, #4]
    9544:	0018      	movs	r0, r3
    9546:	4b09      	ldr	r3, [pc, #36]	; (956c <_usart_set_config+0x2c8>)
    9548:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    954a:	69bb      	ldr	r3, [r7, #24]
    954c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    954e:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    9550:	2300      	movs	r3, #0
}
    9552:	0018      	movs	r0, r3
    9554:	46bd      	mov	sp, r7
    9556:	b00a      	add	sp, #40	; 0x28
    9558:	bdb0      	pop	{r4, r5, r7, pc}
    955a:	46c0      	nop			; (mov r8, r8)
    955c:	000083a9 	.word	0x000083a9
    9560:	0000aa9d 	.word	0x0000aa9d
    9564:	00007ef9 	.word	0x00007ef9
    9568:	00007f75 	.word	0x00007f75
    956c:	00009281 	.word	0x00009281
    9570:	00009241 	.word	0x00009241

00009574 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    9574:	b590      	push	{r4, r7, lr}
    9576:	b093      	sub	sp, #76	; 0x4c
    9578:	af00      	add	r7, sp, #0
    957a:	60f8      	str	r0, [r7, #12]
    957c:	60b9      	str	r1, [r7, #8]
    957e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    9580:	233b      	movs	r3, #59	; 0x3b
    9582:	18fb      	adds	r3, r7, r3
    9584:	2200      	movs	r2, #0
    9586:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    9588:	68fb      	ldr	r3, [r7, #12]
    958a:	68ba      	ldr	r2, [r7, #8]
    958c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    958e:	68fb      	ldr	r3, [r7, #12]
    9590:	681b      	ldr	r3, [r3, #0]
    9592:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    9594:	68fb      	ldr	r3, [r7, #12]
    9596:	681b      	ldr	r3, [r3, #0]
    9598:	0018      	movs	r0, r3
    959a:	4b86      	ldr	r3, [pc, #536]	; (97b4 <usart_init+0x240>)
    959c:	4798      	blx	r3
    959e:	0003      	movs	r3, r0
    95a0:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    95a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    95a4:	3302      	adds	r3, #2
    95a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    95a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    95aa:	3314      	adds	r3, #20
    95ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    95ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95b0:	681b      	ldr	r3, [r3, #0]
    95b2:	2201      	movs	r2, #1
    95b4:	4013      	ands	r3, r2
    95b6:	d001      	beq.n	95bc <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    95b8:	2305      	movs	r3, #5
    95ba:	e0f6      	b.n	97aa <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    95bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    95be:	681b      	ldr	r3, [r3, #0]
    95c0:	2202      	movs	r2, #2
    95c2:	4013      	ands	r3, r2
    95c4:	d001      	beq.n	95ca <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    95c6:	231c      	movs	r3, #28
    95c8:	e0ef      	b.n	97aa <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    95ca:	2201      	movs	r2, #1
    95cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    95ce:	409a      	lsls	r2, r3
    95d0:	0013      	movs	r3, r2
    95d2:	0019      	movs	r1, r3
    95d4:	2002      	movs	r0, #2
    95d6:	4b78      	ldr	r3, [pc, #480]	; (97b8 <usart_init+0x244>)
    95d8:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    95da:	2324      	movs	r3, #36	; 0x24
    95dc:	18fb      	adds	r3, r7, r3
    95de:	0018      	movs	r0, r3
    95e0:	4b76      	ldr	r3, [pc, #472]	; (97bc <usart_init+0x248>)
    95e2:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    95e4:	687b      	ldr	r3, [r7, #4]
    95e6:	222d      	movs	r2, #45	; 0x2d
    95e8:	5c9a      	ldrb	r2, [r3, r2]
    95ea:	2324      	movs	r3, #36	; 0x24
    95ec:	18fb      	adds	r3, r7, r3
    95ee:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    95f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95f2:	b2db      	uxtb	r3, r3
    95f4:	2224      	movs	r2, #36	; 0x24
    95f6:	18ba      	adds	r2, r7, r2
    95f8:	0011      	movs	r1, r2
    95fa:	0018      	movs	r0, r3
    95fc:	4b70      	ldr	r3, [pc, #448]	; (97c0 <usart_init+0x24c>)
    95fe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    9600:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9602:	b2db      	uxtb	r3, r3
    9604:	0018      	movs	r0, r3
    9606:	4b6f      	ldr	r3, [pc, #444]	; (97c4 <usart_init+0x250>)
    9608:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    960a:	687b      	ldr	r3, [r7, #4]
    960c:	222d      	movs	r2, #45	; 0x2d
    960e:	5c9b      	ldrb	r3, [r3, r2]
    9610:	2100      	movs	r1, #0
    9612:	0018      	movs	r0, r3
    9614:	4b6c      	ldr	r3, [pc, #432]	; (97c8 <usart_init+0x254>)
    9616:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    9618:	687b      	ldr	r3, [r7, #4]
    961a:	7ada      	ldrb	r2, [r3, #11]
    961c:	68fb      	ldr	r3, [r7, #12]
    961e:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    9620:	687b      	ldr	r3, [r7, #4]
    9622:	2224      	movs	r2, #36	; 0x24
    9624:	5c9a      	ldrb	r2, [r3, r2]
    9626:	68fb      	ldr	r3, [r7, #12]
    9628:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    962a:	687b      	ldr	r3, [r7, #4]
    962c:	2225      	movs	r2, #37	; 0x25
    962e:	5c9a      	ldrb	r2, [r3, r2]
    9630:	68fb      	ldr	r3, [r7, #12]
    9632:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    9634:	687b      	ldr	r3, [r7, #4]
    9636:	7eda      	ldrb	r2, [r3, #27]
    9638:	68fb      	ldr	r3, [r7, #12]
    963a:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    963c:	687b      	ldr	r3, [r7, #4]
    963e:	7f1a      	ldrb	r2, [r3, #28]
    9640:	68fb      	ldr	r3, [r7, #12]
    9642:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    9644:	233b      	movs	r3, #59	; 0x3b
    9646:	18fc      	adds	r4, r7, r3
    9648:	687a      	ldr	r2, [r7, #4]
    964a:	68fb      	ldr	r3, [r7, #12]
    964c:	0011      	movs	r1, r2
    964e:	0018      	movs	r0, r3
    9650:	4b5e      	ldr	r3, [pc, #376]	; (97cc <usart_init+0x258>)
    9652:	4798      	blx	r3
    9654:	0003      	movs	r3, r0
    9656:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    9658:	233b      	movs	r3, #59	; 0x3b
    965a:	18fb      	adds	r3, r7, r3
    965c:	781b      	ldrb	r3, [r3, #0]
    965e:	2b00      	cmp	r3, #0
    9660:	d003      	beq.n	966a <usart_init+0xf6>
		return status_code;
    9662:	233b      	movs	r3, #59	; 0x3b
    9664:	18fb      	adds	r3, r7, r3
    9666:	781b      	ldrb	r3, [r3, #0]
    9668:	e09f      	b.n	97aa <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    966a:	2320      	movs	r3, #32
    966c:	18fb      	adds	r3, r7, r3
    966e:	0018      	movs	r0, r3
    9670:	4b57      	ldr	r3, [pc, #348]	; (97d0 <usart_init+0x25c>)
    9672:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    9674:	2320      	movs	r3, #32
    9676:	18fb      	adds	r3, r7, r3
    9678:	2200      	movs	r2, #0
    967a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    967c:	2320      	movs	r3, #32
    967e:	18fb      	adds	r3, r7, r3
    9680:	2200      	movs	r2, #0
    9682:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    9684:	687b      	ldr	r3, [r7, #4]
    9686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    9688:	2310      	movs	r3, #16
    968a:	18fb      	adds	r3, r7, r3
    968c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    968e:	687b      	ldr	r3, [r7, #4]
    9690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    9692:	2310      	movs	r3, #16
    9694:	18fb      	adds	r3, r7, r3
    9696:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    9698:	687b      	ldr	r3, [r7, #4]
    969a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    969c:	2310      	movs	r3, #16
    969e:	18fb      	adds	r3, r7, r3
    96a0:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    96a2:	687b      	ldr	r3, [r7, #4]
    96a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;

	uint32_t pad_pinmuxes[] = {
    96a6:	2310      	movs	r3, #16
    96a8:	18fb      	adds	r3, r7, r3
    96aa:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    96ac:	2347      	movs	r3, #71	; 0x47
    96ae:	18fb      	adds	r3, r7, r3
    96b0:	2200      	movs	r2, #0
    96b2:	701a      	strb	r2, [r3, #0]
    96b4:	e02c      	b.n	9710 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    96b6:	2347      	movs	r3, #71	; 0x47
    96b8:	18fb      	adds	r3, r7, r3
    96ba:	781a      	ldrb	r2, [r3, #0]
    96bc:	2310      	movs	r3, #16
    96be:	18fb      	adds	r3, r7, r3
    96c0:	0092      	lsls	r2, r2, #2
    96c2:	58d3      	ldr	r3, [r2, r3]
    96c4:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    96c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    96c8:	2b00      	cmp	r3, #0
    96ca:	d109      	bne.n	96e0 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    96cc:	2347      	movs	r3, #71	; 0x47
    96ce:	18fb      	adds	r3, r7, r3
    96d0:	781a      	ldrb	r2, [r3, #0]
    96d2:	68bb      	ldr	r3, [r7, #8]
    96d4:	0011      	movs	r1, r2
    96d6:	0018      	movs	r0, r3
    96d8:	4b3e      	ldr	r3, [pc, #248]	; (97d4 <usart_init+0x260>)
    96da:	4798      	blx	r3
    96dc:	0003      	movs	r3, r0
    96de:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    96e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    96e2:	3301      	adds	r3, #1
    96e4:	d00d      	beq.n	9702 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    96e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    96e8:	b2da      	uxtb	r2, r3
    96ea:	2320      	movs	r3, #32
    96ec:	18fb      	adds	r3, r7, r3
    96ee:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    96f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    96f2:	0c1b      	lsrs	r3, r3, #16
    96f4:	b2db      	uxtb	r3, r3
    96f6:	2220      	movs	r2, #32
    96f8:	18ba      	adds	r2, r7, r2
    96fa:	0011      	movs	r1, r2
    96fc:	0018      	movs	r0, r3
    96fe:	4b36      	ldr	r3, [pc, #216]	; (97d8 <usart_init+0x264>)
    9700:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    9702:	2347      	movs	r3, #71	; 0x47
    9704:	18fb      	adds	r3, r7, r3
    9706:	781a      	ldrb	r2, [r3, #0]
    9708:	2347      	movs	r3, #71	; 0x47
    970a:	18fb      	adds	r3, r7, r3
    970c:	3201      	adds	r2, #1
    970e:	701a      	strb	r2, [r3, #0]
    9710:	2347      	movs	r3, #71	; 0x47
    9712:	18fb      	adds	r3, r7, r3
    9714:	781b      	ldrb	r3, [r3, #0]
    9716:	2b03      	cmp	r3, #3
    9718:	d9cd      	bls.n	96b6 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    971a:	2300      	movs	r3, #0
    971c:	63fb      	str	r3, [r7, #60]	; 0x3c
    971e:	e00a      	b.n	9736 <usart_init+0x1c2>
		module->callback[i]            = NULL;
    9720:	68fa      	ldr	r2, [r7, #12]
    9722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9724:	3302      	adds	r3, #2
    9726:	009b      	lsls	r3, r3, #2
    9728:	18d3      	adds	r3, r2, r3
    972a:	3304      	adds	r3, #4
    972c:	2200      	movs	r2, #0
    972e:	601a      	str	r2, [r3, #0]
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    9730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9732:	3301      	adds	r3, #1
    9734:	63fb      	str	r3, [r7, #60]	; 0x3c
    9736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9738:	2b05      	cmp	r3, #5
    973a:	d9f1      	bls.n	9720 <usart_init+0x1ac>
		module->callback[i]            = NULL;
	}

	module->tx_buffer_ptr              = NULL;
    973c:	68fb      	ldr	r3, [r7, #12]
    973e:	2200      	movs	r2, #0
    9740:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    9742:	68fb      	ldr	r3, [r7, #12]
    9744:	2200      	movs	r2, #0
    9746:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    9748:	68fb      	ldr	r3, [r7, #12]
    974a:	2200      	movs	r2, #0
    974c:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    974e:	68fb      	ldr	r3, [r7, #12]
    9750:	2200      	movs	r2, #0
    9752:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    9754:	68fb      	ldr	r3, [r7, #12]
    9756:	2230      	movs	r2, #48	; 0x30
    9758:	2100      	movs	r1, #0
    975a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    975c:	68fb      	ldr	r3, [r7, #12]
    975e:	2231      	movs	r2, #49	; 0x31
    9760:	2100      	movs	r1, #0
    9762:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    9764:	68fb      	ldr	r3, [r7, #12]
    9766:	2232      	movs	r2, #50	; 0x32
    9768:	2100      	movs	r1, #0
    976a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    976c:	68fb      	ldr	r3, [r7, #12]
    976e:	2233      	movs	r2, #51	; 0x33
    9770:	2100      	movs	r1, #0
    9772:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    9774:	68fb      	ldr	r3, [r7, #12]
    9776:	681b      	ldr	r3, [r3, #0]
    9778:	2227      	movs	r2, #39	; 0x27
    977a:	18bc      	adds	r4, r7, r2
    977c:	0018      	movs	r0, r3
    977e:	4b0d      	ldr	r3, [pc, #52]	; (97b4 <usart_init+0x240>)
    9780:	4798      	blx	r3
    9782:	0003      	movs	r3, r0
    9784:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    9786:	4a15      	ldr	r2, [pc, #84]	; (97dc <usart_init+0x268>)
    9788:	2327      	movs	r3, #39	; 0x27
    978a:	18fb      	adds	r3, r7, r3
    978c:	781b      	ldrb	r3, [r3, #0]
    978e:	0011      	movs	r1, r2
    9790:	0018      	movs	r0, r3
    9792:	4b13      	ldr	r3, [pc, #76]	; (97e0 <usart_init+0x26c>)
    9794:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    9796:	2327      	movs	r3, #39	; 0x27
    9798:	18fb      	adds	r3, r7, r3
    979a:	781a      	ldrb	r2, [r3, #0]
    979c:	4b11      	ldr	r3, [pc, #68]	; (97e4 <usart_init+0x270>)
    979e:	0092      	lsls	r2, r2, #2
    97a0:	68f9      	ldr	r1, [r7, #12]
    97a2:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    97a4:	233b      	movs	r3, #59	; 0x3b
    97a6:	18fb      	adds	r3, r7, r3
    97a8:	781b      	ldrb	r3, [r3, #0]
}
    97aa:	0018      	movs	r0, r3
    97ac:	46bd      	mov	sp, r7
    97ae:	b013      	add	sp, #76	; 0x4c
    97b0:	bd90      	pop	{r4, r7, pc}
    97b2:	46c0      	nop			; (mov r8, r8)
    97b4:	000083a9 	.word	0x000083a9
    97b8:	000091bd 	.word	0x000091bd
    97bc:	000091a5 	.word	0x000091a5
    97c0:	0000a979 	.word	0x0000a979
    97c4:	0000a9bd 	.word	0x0000a9bd
    97c8:	00008161 	.word	0x00008161
    97cc:	000092a5 	.word	0x000092a5
    97d0:	00009219 	.word	0x00009219
    97d4:	000081ed 	.word	0x000081ed
    97d8:	0000ac65 	.word	0x0000ac65
    97dc:	0000997d 	.word	0x0000997d
    97e0:	0000840d 	.word	0x0000840d
    97e4:	20004768 	.word	0x20004768

000097e8 <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    97e8:	b580      	push	{r7, lr}
    97ea:	b084      	sub	sp, #16
    97ec:	af00      	add	r7, sp, #0
    97ee:	6078      	str	r0, [r7, #4]
    97f0:	000a      	movs	r2, r1
    97f2:	1cbb      	adds	r3, r7, #2
    97f4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    97f6:	687b      	ldr	r3, [r7, #4]
    97f8:	681b      	ldr	r3, [r3, #0]
    97fa:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    97fc:	687b      	ldr	r3, [r7, #4]
    97fe:	79db      	ldrb	r3, [r3, #7]
    9800:	2201      	movs	r2, #1
    9802:	4053      	eors	r3, r2
    9804:	b2db      	uxtb	r3, r3
    9806:	2b00      	cmp	r3, #0
    9808:	d001      	beq.n	980e <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    980a:	231c      	movs	r3, #28
    980c:	e017      	b.n	983e <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    980e:	687b      	ldr	r3, [r7, #4]
    9810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9812:	b29b      	uxth	r3, r3
    9814:	2b00      	cmp	r3, #0
    9816:	d001      	beq.n	981c <usart_write_wait+0x34>
		return STATUS_BUSY;
    9818:	2305      	movs	r3, #5
    981a:	e010      	b.n	983e <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    981c:	687b      	ldr	r3, [r7, #4]
    981e:	0018      	movs	r0, r3
    9820:	4b09      	ldr	r3, [pc, #36]	; (9848 <usart_write_wait+0x60>)
    9822:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    9824:	68fb      	ldr	r3, [r7, #12]
    9826:	1cba      	adds	r2, r7, #2
    9828:	8812      	ldrh	r2, [r2, #0]
    982a:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    982c:	46c0      	nop			; (mov r8, r8)
    982e:	68fb      	ldr	r3, [r7, #12]
    9830:	7e1b      	ldrb	r3, [r3, #24]
    9832:	b2db      	uxtb	r3, r3
    9834:	001a      	movs	r2, r3
    9836:	2302      	movs	r3, #2
    9838:	4013      	ands	r3, r2
    983a:	d0f8      	beq.n	982e <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    983c:	2300      	movs	r3, #0
}
    983e:	0018      	movs	r0, r3
    9840:	46bd      	mov	sp, r7
    9842:	b004      	add	sp, #16
    9844:	bd80      	pop	{r7, pc}
    9846:	46c0      	nop			; (mov r8, r8)
    9848:	00009281 	.word	0x00009281

0000984c <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    984c:	b580      	push	{r7, lr}
    984e:	b084      	sub	sp, #16
    9850:	af00      	add	r7, sp, #0
    9852:	6078      	str	r0, [r7, #4]
    9854:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    9856:	687b      	ldr	r3, [r7, #4]
    9858:	681b      	ldr	r3, [r3, #0]
    985a:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    985c:	687b      	ldr	r3, [r7, #4]
    985e:	799b      	ldrb	r3, [r3, #6]
    9860:	2201      	movs	r2, #1
    9862:	4053      	eors	r3, r2
    9864:	b2db      	uxtb	r3, r3
    9866:	2b00      	cmp	r3, #0
    9868:	d001      	beq.n	986e <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    986a:	231c      	movs	r3, #28
    986c:	e05e      	b.n	992c <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    986e:	687b      	ldr	r3, [r7, #4]
    9870:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9872:	b29b      	uxth	r3, r3
    9874:	2b00      	cmp	r3, #0
    9876:	d001      	beq.n	987c <usart_read_wait+0x30>
		return STATUS_BUSY;
    9878:	2305      	movs	r3, #5
    987a:	e057      	b.n	992c <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    987c:	68fb      	ldr	r3, [r7, #12]
    987e:	7e1b      	ldrb	r3, [r3, #24]
    9880:	b2db      	uxtb	r3, r3
    9882:	001a      	movs	r2, r3
    9884:	2304      	movs	r3, #4
    9886:	4013      	ands	r3, r2
    9888:	d101      	bne.n	988e <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    988a:	2305      	movs	r3, #5
    988c:	e04e      	b.n	992c <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    988e:	687b      	ldr	r3, [r7, #4]
    9890:	0018      	movs	r0, r3
    9892:	4b28      	ldr	r3, [pc, #160]	; (9934 <usart_read_wait+0xe8>)
    9894:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    9896:	68fb      	ldr	r3, [r7, #12]
    9898:	8b5b      	ldrh	r3, [r3, #26]
    989a:	b29b      	uxth	r3, r3
    989c:	b2da      	uxtb	r2, r3
    989e:	230b      	movs	r3, #11
    98a0:	18fb      	adds	r3, r7, r3
    98a2:	213f      	movs	r1, #63	; 0x3f
    98a4:	400a      	ands	r2, r1
    98a6:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    98a8:	230b      	movs	r3, #11
    98aa:	18fb      	adds	r3, r7, r3
    98ac:	781b      	ldrb	r3, [r3, #0]
    98ae:	2b00      	cmp	r3, #0
    98b0:	d036      	beq.n	9920 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    98b2:	230b      	movs	r3, #11
    98b4:	18fb      	adds	r3, r7, r3
    98b6:	781b      	ldrb	r3, [r3, #0]
    98b8:	2202      	movs	r2, #2
    98ba:	4013      	ands	r3, r2
    98bc:	d004      	beq.n	98c8 <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    98be:	68fb      	ldr	r3, [r7, #12]
    98c0:	2202      	movs	r2, #2
    98c2:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    98c4:	231a      	movs	r3, #26
    98c6:	e031      	b.n	992c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    98c8:	230b      	movs	r3, #11
    98ca:	18fb      	adds	r3, r7, r3
    98cc:	781b      	ldrb	r3, [r3, #0]
    98ce:	2204      	movs	r2, #4
    98d0:	4013      	ands	r3, r2
    98d2:	d004      	beq.n	98de <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    98d4:	68fb      	ldr	r3, [r7, #12]
    98d6:	2204      	movs	r2, #4
    98d8:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    98da:	231e      	movs	r3, #30
    98dc:	e026      	b.n	992c <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    98de:	230b      	movs	r3, #11
    98e0:	18fb      	adds	r3, r7, r3
    98e2:	781b      	ldrb	r3, [r3, #0]
    98e4:	2201      	movs	r2, #1
    98e6:	4013      	ands	r3, r2
    98e8:	d004      	beq.n	98f4 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    98ea:	68fb      	ldr	r3, [r7, #12]
    98ec:	2201      	movs	r2, #1
    98ee:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    98f0:	2313      	movs	r3, #19
    98f2:	e01b      	b.n	992c <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    98f4:	230b      	movs	r3, #11
    98f6:	18fb      	adds	r3, r7, r3
    98f8:	781b      	ldrb	r3, [r3, #0]
    98fa:	2210      	movs	r2, #16
    98fc:	4013      	ands	r3, r2
    98fe:	d004      	beq.n	990a <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    9900:	68fb      	ldr	r3, [r7, #12]
    9902:	2210      	movs	r2, #16
    9904:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    9906:	2342      	movs	r3, #66	; 0x42
    9908:	e010      	b.n	992c <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    990a:	230b      	movs	r3, #11
    990c:	18fb      	adds	r3, r7, r3
    990e:	781b      	ldrb	r3, [r3, #0]
    9910:	2220      	movs	r2, #32
    9912:	4013      	ands	r3, r2
    9914:	d004      	beq.n	9920 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    9916:	68fb      	ldr	r3, [r7, #12]
    9918:	2220      	movs	r2, #32
    991a:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    991c:	2341      	movs	r3, #65	; 0x41
    991e:	e005      	b.n	992c <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    9920:	68fb      	ldr	r3, [r7, #12]
    9922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9924:	b29a      	uxth	r2, r3
    9926:	683b      	ldr	r3, [r7, #0]
    9928:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    992a:	2300      	movs	r3, #0
}
    992c:	0018      	movs	r0, r3
    992e:	46bd      	mov	sp, r7
    9930:	b004      	add	sp, #16
    9932:	bd80      	pop	{r7, pc}
    9934:	00009281 	.word	0x00009281

00009938 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    9938:	b580      	push	{r7, lr}
    993a:	b084      	sub	sp, #16
    993c:	af00      	add	r7, sp, #0
    993e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    9940:	687b      	ldr	r3, [r7, #4]
    9942:	681b      	ldr	r3, [r3, #0]
    9944:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    9946:	68fb      	ldr	r3, [r7, #12]
    9948:	69db      	ldr	r3, [r3, #28]
    994a:	1e5a      	subs	r2, r3, #1
    994c:	4193      	sbcs	r3, r2
    994e:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    9950:	0018      	movs	r0, r3
    9952:	46bd      	mov	sp, r7
    9954:	b004      	add	sp, #16
    9956:	bd80      	pop	{r7, pc}

00009958 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    9958:	b580      	push	{r7, lr}
    995a:	b082      	sub	sp, #8
    995c:	af00      	add	r7, sp, #0
    995e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    9960:	46c0      	nop			; (mov r8, r8)
    9962:	687b      	ldr	r3, [r7, #4]
    9964:	0018      	movs	r0, r3
    9966:	4b04      	ldr	r3, [pc, #16]	; (9978 <_usart_wait_for_sync+0x20>)
    9968:	4798      	blx	r3
    996a:	1e03      	subs	r3, r0, #0
    996c:	d1f9      	bne.n	9962 <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    996e:	46c0      	nop			; (mov r8, r8)
    9970:	46bd      	mov	sp, r7
    9972:	b002      	add	sp, #8
    9974:	bd80      	pop	{r7, pc}
    9976:	46c0      	nop			; (mov r8, r8)
    9978:	00009939 	.word	0x00009939

0000997c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    997c:	b580      	push	{r7, lr}
    997e:	b088      	sub	sp, #32
    9980:	af00      	add	r7, sp, #0
    9982:	0002      	movs	r2, r0
    9984:	1dfb      	adds	r3, r7, #7
    9986:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    9988:	1dfb      	adds	r3, r7, #7
    998a:	781a      	ldrb	r2, [r3, #0]
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    998c:	4ba3      	ldr	r3, [pc, #652]	; (9c1c <_usart_interrupt_handler+0x2a0>)
    998e:	0092      	lsls	r2, r2, #2
    9990:	58d3      	ldr	r3, [r2, r3]
    9992:	61bb      	str	r3, [r7, #24]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    9994:	69bb      	ldr	r3, [r7, #24]
    9996:	681b      	ldr	r3, [r3, #0]
	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
    9998:	617b      	str	r3, [r7, #20]
		= &(module->hw->USART);

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    999a:	69bb      	ldr	r3, [r7, #24]
    999c:	0018      	movs	r0, r3
    999e:	4ba0      	ldr	r3, [pc, #640]	; (9c20 <_usart_interrupt_handler+0x2a4>)
    99a0:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    99a2:	697b      	ldr	r3, [r7, #20]
    99a4:	7e1b      	ldrb	r3, [r3, #24]
    99a6:	b2da      	uxtb	r2, r3
    99a8:	2312      	movs	r3, #18
    99aa:	18fb      	adds	r3, r7, r3
    99ac:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    99ae:	697b      	ldr	r3, [r7, #20]
    99b0:	7d9b      	ldrb	r3, [r3, #22]
    99b2:	b2db      	uxtb	r3, r3
    99b4:	b29a      	uxth	r2, r3
    99b6:	2312      	movs	r3, #18
    99b8:	18fb      	adds	r3, r7, r3
    99ba:	2112      	movs	r1, #18
    99bc:	1879      	adds	r1, r7, r1
    99be:	8809      	ldrh	r1, [r1, #0]
    99c0:	400a      	ands	r2, r1
    99c2:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    99c4:	69bb      	ldr	r3, [r7, #24]
    99c6:	2230      	movs	r2, #48	; 0x30
    99c8:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    99ca:	69ba      	ldr	r2, [r7, #24]
    99cc:	2131      	movs	r1, #49	; 0x31
    99ce:	5c52      	ldrb	r2, [r2, r1]
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    99d0:	4013      	ands	r3, r2
    99d2:	b2da      	uxtb	r2, r3
    99d4:	2310      	movs	r3, #16
    99d6:	18fb      	adds	r3, r7, r3
    99d8:	801a      	strh	r2, [r3, #0]
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    99da:	2312      	movs	r3, #18
    99dc:	18fb      	adds	r3, r7, r3
    99de:	881b      	ldrh	r3, [r3, #0]
    99e0:	2201      	movs	r2, #1
    99e2:	4013      	ands	r3, r2
    99e4:	d044      	beq.n	9a70 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    99e6:	69bb      	ldr	r3, [r7, #24]
    99e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    99ea:	b29b      	uxth	r3, r3
    99ec:	2b00      	cmp	r3, #0
    99ee:	d03c      	beq.n	9a6a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    99f0:	69bb      	ldr	r3, [r7, #24]
    99f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    99f4:	781b      	ldrb	r3, [r3, #0]
    99f6:	b2da      	uxtb	r2, r3
    99f8:	231c      	movs	r3, #28
    99fa:	18fb      	adds	r3, r7, r3
    99fc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    99fe:	69bb      	ldr	r3, [r7, #24]
    9a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9a02:	1c5a      	adds	r2, r3, #1
    9a04:	69bb      	ldr	r3, [r7, #24]
    9a06:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    9a08:	69bb      	ldr	r3, [r7, #24]
    9a0a:	795b      	ldrb	r3, [r3, #5]
    9a0c:	2b01      	cmp	r3, #1
    9a0e:	d113      	bne.n	9a38 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    9a10:	69bb      	ldr	r3, [r7, #24]
    9a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9a14:	781b      	ldrb	r3, [r3, #0]
    9a16:	b2db      	uxtb	r3, r3
    9a18:	021b      	lsls	r3, r3, #8
    9a1a:	b21a      	sxth	r2, r3
    9a1c:	231c      	movs	r3, #28
    9a1e:	18fb      	adds	r3, r7, r3
    9a20:	2100      	movs	r1, #0
    9a22:	5e5b      	ldrsh	r3, [r3, r1]
    9a24:	4313      	orrs	r3, r2
    9a26:	b21a      	sxth	r2, r3
    9a28:	231c      	movs	r3, #28
    9a2a:	18fb      	adds	r3, r7, r3
    9a2c:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    9a2e:	69bb      	ldr	r3, [r7, #24]
    9a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9a32:	1c5a      	adds	r2, r3, #1
    9a34:	69bb      	ldr	r3, [r7, #24]
    9a36:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    9a38:	231c      	movs	r3, #28
    9a3a:	18fb      	adds	r3, r7, r3
    9a3c:	881b      	ldrh	r3, [r3, #0]
    9a3e:	05db      	lsls	r3, r3, #23
    9a40:	0ddb      	lsrs	r3, r3, #23
    9a42:	b29a      	uxth	r2, r3
    9a44:	697b      	ldr	r3, [r7, #20]
    9a46:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    9a48:	69bb      	ldr	r3, [r7, #24]
    9a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    9a4c:	b29b      	uxth	r3, r3
    9a4e:	3b01      	subs	r3, #1
    9a50:	b29b      	uxth	r3, r3
    9a52:	69ba      	ldr	r2, [r7, #24]
    9a54:	1c19      	adds	r1, r3, #0
    9a56:	85d1      	strh	r1, [r2, #46]	; 0x2e
    9a58:	2b00      	cmp	r3, #0
    9a5a:	d109      	bne.n	9a70 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    9a5c:	697b      	ldr	r3, [r7, #20]
    9a5e:	2201      	movs	r2, #1
    9a60:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    9a62:	697b      	ldr	r3, [r7, #20]
    9a64:	2202      	movs	r2, #2
    9a66:	759a      	strb	r2, [r3, #22]
    9a68:	e002      	b.n	9a70 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    9a6a:	697b      	ldr	r3, [r7, #20]
    9a6c:	2201      	movs	r2, #1
    9a6e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    9a70:	2312      	movs	r3, #18
    9a72:	18fb      	adds	r3, r7, r3
    9a74:	881b      	ldrh	r3, [r3, #0]
    9a76:	2202      	movs	r2, #2
    9a78:	4013      	ands	r3, r2
    9a7a:	d011      	beq.n	9aa0 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    9a7c:	697b      	ldr	r3, [r7, #20]
    9a7e:	2202      	movs	r2, #2
    9a80:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    9a82:	69bb      	ldr	r3, [r7, #24]
    9a84:	2233      	movs	r2, #51	; 0x33
    9a86:	2100      	movs	r1, #0
    9a88:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    9a8a:	2310      	movs	r3, #16
    9a8c:	18fb      	adds	r3, r7, r3
    9a8e:	881b      	ldrh	r3, [r3, #0]
    9a90:	2201      	movs	r2, #1
    9a92:	4013      	ands	r3, r2
    9a94:	d004      	beq.n	9aa0 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    9a96:	69bb      	ldr	r3, [r7, #24]
    9a98:	68db      	ldr	r3, [r3, #12]
    9a9a:	69ba      	ldr	r2, [r7, #24]
    9a9c:	0010      	movs	r0, r2
    9a9e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    9aa0:	2312      	movs	r3, #18
    9aa2:	18fb      	adds	r3, r7, r3
    9aa4:	881b      	ldrh	r3, [r3, #0]
    9aa6:	2204      	movs	r2, #4
    9aa8:	4013      	ands	r3, r2
    9aaa:	d100      	bne.n	9aae <_usart_interrupt_handler+0x132>
    9aac:	e0bd      	b.n	9c2a <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    9aae:	69bb      	ldr	r3, [r7, #24]
    9ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9ab2:	b29b      	uxth	r3, r3
    9ab4:	2b00      	cmp	r3, #0
    9ab6:	d100      	bne.n	9aba <_usart_interrupt_handler+0x13e>
    9ab8:	e0b4      	b.n	9c24 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    9aba:	697b      	ldr	r3, [r7, #20]
    9abc:	8b5b      	ldrh	r3, [r3, #26]
    9abe:	b29b      	uxth	r3, r3
    9ac0:	b2da      	uxtb	r2, r3
    9ac2:	231f      	movs	r3, #31
    9ac4:	18fb      	adds	r3, r7, r3
    9ac6:	213f      	movs	r1, #63	; 0x3f
    9ac8:	400a      	ands	r2, r1
    9aca:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    9acc:	231f      	movs	r3, #31
    9ace:	18fb      	adds	r3, r7, r3
    9ad0:	781b      	ldrb	r3, [r3, #0]
    9ad2:	2208      	movs	r2, #8
    9ad4:	4013      	ands	r3, r2
    9ad6:	d007      	beq.n	9ae8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    9ad8:	231f      	movs	r3, #31
    9ada:	18fb      	adds	r3, r7, r3
    9adc:	221f      	movs	r2, #31
    9ade:	18ba      	adds	r2, r7, r2
    9ae0:	7812      	ldrb	r2, [r2, #0]
    9ae2:	2108      	movs	r1, #8
    9ae4:	438a      	bics	r2, r1
    9ae6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    9ae8:	231f      	movs	r3, #31
    9aea:	18fb      	adds	r3, r7, r3
    9aec:	781b      	ldrb	r3, [r3, #0]
    9aee:	2b00      	cmp	r3, #0
    9af0:	d050      	beq.n	9b94 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    9af2:	231f      	movs	r3, #31
    9af4:	18fb      	adds	r3, r7, r3
    9af6:	781b      	ldrb	r3, [r3, #0]
    9af8:	2202      	movs	r2, #2
    9afa:	4013      	ands	r3, r2
    9afc:	d007      	beq.n	9b0e <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    9afe:	69bb      	ldr	r3, [r7, #24]
    9b00:	2232      	movs	r2, #50	; 0x32
    9b02:	211a      	movs	r1, #26
    9b04:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    9b06:	697b      	ldr	r3, [r7, #20]
    9b08:	2202      	movs	r2, #2
    9b0a:	835a      	strh	r2, [r3, #26]
    9b0c:	e036      	b.n	9b7c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    9b0e:	231f      	movs	r3, #31
    9b10:	18fb      	adds	r3, r7, r3
    9b12:	781b      	ldrb	r3, [r3, #0]
    9b14:	2204      	movs	r2, #4
    9b16:	4013      	ands	r3, r2
    9b18:	d007      	beq.n	9b2a <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    9b1a:	69bb      	ldr	r3, [r7, #24]
    9b1c:	2232      	movs	r2, #50	; 0x32
    9b1e:	211e      	movs	r1, #30
    9b20:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    9b22:	697b      	ldr	r3, [r7, #20]
    9b24:	2204      	movs	r2, #4
    9b26:	835a      	strh	r2, [r3, #26]
    9b28:	e028      	b.n	9b7c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    9b2a:	231f      	movs	r3, #31
    9b2c:	18fb      	adds	r3, r7, r3
    9b2e:	781b      	ldrb	r3, [r3, #0]
    9b30:	2201      	movs	r2, #1
    9b32:	4013      	ands	r3, r2
    9b34:	d007      	beq.n	9b46 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    9b36:	69bb      	ldr	r3, [r7, #24]
    9b38:	2232      	movs	r2, #50	; 0x32
    9b3a:	2113      	movs	r1, #19
    9b3c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    9b3e:	697b      	ldr	r3, [r7, #20]
    9b40:	2201      	movs	r2, #1
    9b42:	835a      	strh	r2, [r3, #26]
    9b44:	e01a      	b.n	9b7c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    9b46:	231f      	movs	r3, #31
    9b48:	18fb      	adds	r3, r7, r3
    9b4a:	781b      	ldrb	r3, [r3, #0]
    9b4c:	2210      	movs	r2, #16
    9b4e:	4013      	ands	r3, r2
    9b50:	d007      	beq.n	9b62 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    9b52:	69bb      	ldr	r3, [r7, #24]
    9b54:	2232      	movs	r2, #50	; 0x32
    9b56:	2142      	movs	r1, #66	; 0x42
    9b58:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    9b5a:	697b      	ldr	r3, [r7, #20]
    9b5c:	2210      	movs	r2, #16
    9b5e:	835a      	strh	r2, [r3, #26]
    9b60:	e00c      	b.n	9b7c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    9b62:	231f      	movs	r3, #31
    9b64:	18fb      	adds	r3, r7, r3
    9b66:	781b      	ldrb	r3, [r3, #0]
    9b68:	2220      	movs	r2, #32
    9b6a:	4013      	ands	r3, r2
    9b6c:	d006      	beq.n	9b7c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    9b6e:	69bb      	ldr	r3, [r7, #24]
    9b70:	2232      	movs	r2, #50	; 0x32
    9b72:	2141      	movs	r1, #65	; 0x41
    9b74:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    9b76:	697b      	ldr	r3, [r7, #20]
    9b78:	2220      	movs	r2, #32
    9b7a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    9b7c:	2310      	movs	r3, #16
    9b7e:	18fb      	adds	r3, r7, r3
    9b80:	881b      	ldrh	r3, [r3, #0]
    9b82:	2204      	movs	r2, #4
    9b84:	4013      	ands	r3, r2
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    9b86:	d050      	beq.n	9c2a <_usart_interrupt_handler+0x2ae>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    9b88:	69bb      	ldr	r3, [r7, #24]
    9b8a:	695b      	ldr	r3, [r3, #20]
    9b8c:	69ba      	ldr	r2, [r7, #24]
    9b8e:	0010      	movs	r0, r2
    9b90:	4798      	blx	r3
    9b92:	e04a      	b.n	9c2a <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    9b94:	697b      	ldr	r3, [r7, #20]
    9b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    9b98:	b29a      	uxth	r2, r3
    9b9a:	230e      	movs	r3, #14
    9b9c:	18fb      	adds	r3, r7, r3
    9b9e:	05d2      	lsls	r2, r2, #23
    9ba0:	0dd2      	lsrs	r2, r2, #23
    9ba2:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    9ba4:	69bb      	ldr	r3, [r7, #24]
    9ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9ba8:	220e      	movs	r2, #14
    9baa:	18ba      	adds	r2, r7, r2
    9bac:	8812      	ldrh	r2, [r2, #0]
    9bae:	b2d2      	uxtb	r2, r2
    9bb0:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    9bb2:	69bb      	ldr	r3, [r7, #24]
    9bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9bb6:	1c5a      	adds	r2, r3, #1
    9bb8:	69bb      	ldr	r3, [r7, #24]
    9bba:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    9bbc:	69bb      	ldr	r3, [r7, #24]
    9bbe:	795b      	ldrb	r3, [r3, #5]
    9bc0:	2b01      	cmp	r3, #1
    9bc2:	d10d      	bne.n	9be0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    9bc4:	69bb      	ldr	r3, [r7, #24]
    9bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9bc8:	220e      	movs	r2, #14
    9bca:	18ba      	adds	r2, r7, r2
    9bcc:	8812      	ldrh	r2, [r2, #0]
    9bce:	0a12      	lsrs	r2, r2, #8
    9bd0:	b292      	uxth	r2, r2
    9bd2:	b2d2      	uxtb	r2, r2
    9bd4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    9bd6:	69bb      	ldr	r3, [r7, #24]
    9bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9bda:	1c5a      	adds	r2, r3, #1
    9bdc:	69bb      	ldr	r3, [r7, #24]
    9bde:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    9be0:	69bb      	ldr	r3, [r7, #24]
    9be2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    9be4:	b29b      	uxth	r3, r3
    9be6:	3b01      	subs	r3, #1
    9be8:	b29b      	uxth	r3, r3
    9bea:	69ba      	ldr	r2, [r7, #24]
    9bec:	1c19      	adds	r1, r3, #0
    9bee:	8591      	strh	r1, [r2, #44]	; 0x2c
    9bf0:	2b00      	cmp	r3, #0
    9bf2:	d11a      	bne.n	9c2a <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    9bf4:	697b      	ldr	r3, [r7, #20]
    9bf6:	2204      	movs	r2, #4
    9bf8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    9bfa:	69bb      	ldr	r3, [r7, #24]
    9bfc:	2232      	movs	r2, #50	; 0x32
    9bfe:	2100      	movs	r1, #0
    9c00:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    9c02:	2310      	movs	r3, #16
    9c04:	18fb      	adds	r3, r7, r3
    9c06:	881b      	ldrh	r3, [r3, #0]
    9c08:	2202      	movs	r2, #2
    9c0a:	4013      	ands	r3, r2
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
					module->rx_status = STATUS_OK;

					/* Run callback if registered and enabled */
					if (callback_status
    9c0c:	d00d      	beq.n	9c2a <_usart_interrupt_handler+0x2ae>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    9c0e:	69bb      	ldr	r3, [r7, #24]
    9c10:	691b      	ldr	r3, [r3, #16]
    9c12:	69ba      	ldr	r2, [r7, #24]
    9c14:	0010      	movs	r0, r2
    9c16:	4798      	blx	r3
    9c18:	e007      	b.n	9c2a <_usart_interrupt_handler+0x2ae>
    9c1a:	46c0      	nop			; (mov r8, r8)
    9c1c:	20004768 	.word	0x20004768
    9c20:	00009959 	.word	0x00009959
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    9c24:	697b      	ldr	r3, [r7, #20]
    9c26:	2204      	movs	r2, #4
    9c28:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    9c2a:	2312      	movs	r3, #18
    9c2c:	18fb      	adds	r3, r7, r3
    9c2e:	881b      	ldrh	r3, [r3, #0]
    9c30:	2210      	movs	r2, #16
    9c32:	4013      	ands	r3, r2
    9c34:	d010      	beq.n	9c58 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    9c36:	697b      	ldr	r3, [r7, #20]
    9c38:	2210      	movs	r2, #16
    9c3a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    9c3c:	697b      	ldr	r3, [r7, #20]
    9c3e:	2210      	movs	r2, #16
    9c40:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    9c42:	2310      	movs	r3, #16
    9c44:	18fb      	adds	r3, r7, r3
    9c46:	881b      	ldrh	r3, [r3, #0]
    9c48:	2210      	movs	r2, #16
    9c4a:	4013      	ands	r3, r2
    9c4c:	d004      	beq.n	9c58 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    9c4e:	69bb      	ldr	r3, [r7, #24]
    9c50:	69db      	ldr	r3, [r3, #28]
    9c52:	69ba      	ldr	r2, [r7, #24]
    9c54:	0010      	movs	r0, r2
    9c56:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    9c58:	2312      	movs	r3, #18
    9c5a:	18fb      	adds	r3, r7, r3
    9c5c:	881b      	ldrh	r3, [r3, #0]
    9c5e:	2220      	movs	r2, #32
    9c60:	4013      	ands	r3, r2
    9c62:	d010      	beq.n	9c86 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    9c64:	697b      	ldr	r3, [r7, #20]
    9c66:	2220      	movs	r2, #32
    9c68:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    9c6a:	697b      	ldr	r3, [r7, #20]
    9c6c:	2220      	movs	r2, #32
    9c6e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    9c70:	2310      	movs	r3, #16
    9c72:	18fb      	adds	r3, r7, r3
    9c74:	881b      	ldrh	r3, [r3, #0]
    9c76:	2208      	movs	r2, #8
    9c78:	4013      	ands	r3, r2
    9c7a:	d004      	beq.n	9c86 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    9c7c:	69bb      	ldr	r3, [r7, #24]
    9c7e:	699b      	ldr	r3, [r3, #24]
    9c80:	69ba      	ldr	r2, [r7, #24]
    9c82:	0010      	movs	r0, r2
    9c84:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    9c86:	2312      	movs	r3, #18
    9c88:	18fb      	adds	r3, r7, r3
    9c8a:	881b      	ldrh	r3, [r3, #0]
    9c8c:	2208      	movs	r2, #8
    9c8e:	4013      	ands	r3, r2
    9c90:	d010      	beq.n	9cb4 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    9c92:	697b      	ldr	r3, [r7, #20]
    9c94:	2208      	movs	r2, #8
    9c96:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    9c98:	697b      	ldr	r3, [r7, #20]
    9c9a:	2208      	movs	r2, #8
    9c9c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    9c9e:	2310      	movs	r3, #16
    9ca0:	18fb      	adds	r3, r7, r3
    9ca2:	881b      	ldrh	r3, [r3, #0]
    9ca4:	2220      	movs	r2, #32
    9ca6:	4013      	ands	r3, r2
    9ca8:	d004      	beq.n	9cb4 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    9caa:	69bb      	ldr	r3, [r7, #24]
    9cac:	6a1b      	ldr	r3, [r3, #32]
    9cae:	69ba      	ldr	r2, [r7, #24]
    9cb0:	0010      	movs	r0, r2
    9cb2:	4798      	blx	r3
		}
	}
#endif
}
    9cb4:	46c0      	nop			; (mov r8, r8)
    9cb6:	46bd      	mov	sp, r7
    9cb8:	b008      	add	sp, #32
    9cba:	bd80      	pop	{r7, pc}

00009cbc <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    9cbc:	b580      	push	{r7, lr}
    9cbe:	b082      	sub	sp, #8
    9cc0:	af00      	add	r7, sp, #0
    9cc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    9cc4:	687b      	ldr	r3, [r7, #4]
    9cc6:	2201      	movs	r2, #1
    9cc8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    9cca:	687b      	ldr	r3, [r7, #4]
    9ccc:	2200      	movs	r2, #0
    9cce:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    9cd0:	687b      	ldr	r3, [r7, #4]
    9cd2:	2206      	movs	r2, #6
    9cd4:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    9cd6:	687b      	ldr	r3, [r7, #4]
    9cd8:	2200      	movs	r2, #0
    9cda:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    9cdc:	687b      	ldr	r3, [r7, #4]
    9cde:	2200      	movs	r2, #0
    9ce0:	725a      	strb	r2, [r3, #9]
}
    9ce2:	46c0      	nop			; (mov r8, r8)
    9ce4:	46bd      	mov	sp, r7
    9ce6:	b002      	add	sp, #8
    9ce8:	bd80      	pop	{r7, pc}
    9cea:	46c0      	nop			; (mov r8, r8)

00009cec <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    9cec:	b580      	push	{r7, lr}
    9cee:	b082      	sub	sp, #8
    9cf0:	af00      	add	r7, sp, #0
    9cf2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    9cf4:	687b      	ldr	r3, [r7, #4]
    9cf6:	2200      	movs	r2, #0
    9cf8:	701a      	strb	r2, [r3, #0]
}
    9cfa:	46c0      	nop			; (mov r8, r8)
    9cfc:	46bd      	mov	sp, r7
    9cfe:	b002      	add	sp, #8
    9d00:	bd80      	pop	{r7, pc}
    9d02:	46c0      	nop			; (mov r8, r8)

00009d04 <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    9d04:	b580      	push	{r7, lr}
    9d06:	b082      	sub	sp, #8
    9d08:	af00      	add	r7, sp, #0
    9d0a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    9d0c:	687b      	ldr	r3, [r7, #4]
    9d0e:	2200      	movs	r2, #0
    9d10:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    9d12:	687b      	ldr	r3, [r7, #4]
    9d14:	2204      	movs	r2, #4
    9d16:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	2200      	movs	r2, #0
    9d1c:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    9d1e:	687b      	ldr	r3, [r7, #4]
    9d20:	2280      	movs	r2, #128	; 0x80
    9d22:	0212      	lsls	r2, r2, #8
    9d24:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    9d26:	687b      	ldr	r3, [r7, #4]
    9d28:	2200      	movs	r2, #0
    9d2a:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    9d2c:	687b      	ldr	r3, [r7, #4]
    9d2e:	2201      	movs	r2, #1
    9d30:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    9d32:	687b      	ldr	r3, [r7, #4]
    9d34:	2200      	movs	r2, #0
    9d36:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    9d38:	687b      	ldr	r3, [r7, #4]
    9d3a:	2201      	movs	r2, #1
    9d3c:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    9d3e:	687b      	ldr	r3, [r7, #4]
    9d40:	2200      	movs	r2, #0
    9d42:	739a      	strb	r2, [r3, #14]
}
    9d44:	46c0      	nop			; (mov r8, r8)
    9d46:	46bd      	mov	sp, r7
    9d48:	b002      	add	sp, #8
    9d4a:	bd80      	pop	{r7, pc}

00009d4c <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    9d4c:	b580      	push	{r7, lr}
    9d4e:	b082      	sub	sp, #8
    9d50:	af00      	add	r7, sp, #0
    9d52:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    9d54:	687b      	ldr	r3, [r7, #4]
    9d56:	2203      	movs	r2, #3
    9d58:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    9d5a:	687b      	ldr	r3, [r7, #4]
    9d5c:	2200      	movs	r2, #0
    9d5e:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    9d60:	687b      	ldr	r3, [r7, #4]
    9d62:	2201      	movs	r2, #1
    9d64:	709a      	strb	r2, [r3, #2]
}
    9d66:	46c0      	nop			; (mov r8, r8)
    9d68:	46bd      	mov	sp, r7
    9d6a:	b002      	add	sp, #8
    9d6c:	bd80      	pop	{r7, pc}
    9d6e:	46c0      	nop			; (mov r8, r8)

00009d70 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    9d70:	b580      	push	{r7, lr}
    9d72:	b082      	sub	sp, #8
    9d74:	af00      	add	r7, sp, #0
    9d76:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	2200      	movs	r2, #0
    9d7c:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    9d7e:	687b      	ldr	r3, [r7, #4]
    9d80:	2200      	movs	r2, #0
    9d82:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    9d84:	687b      	ldr	r3, [r7, #4]
    9d86:	2200      	movs	r2, #0
    9d88:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    9d8a:	687b      	ldr	r3, [r7, #4]
    9d8c:	2200      	movs	r2, #0
    9d8e:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    9d90:	687b      	ldr	r3, [r7, #4]
    9d92:	2200      	movs	r2, #0
    9d94:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    9d96:	687b      	ldr	r3, [r7, #4]
    9d98:	2201      	movs	r2, #1
    9d9a:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    9d9c:	687b      	ldr	r3, [r7, #4]
    9d9e:	2207      	movs	r2, #7
    9da0:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    9da2:	687b      	ldr	r3, [r7, #4]
    9da4:	223f      	movs	r2, #63	; 0x3f
    9da6:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    9da8:	687b      	ldr	r3, [r7, #4]
    9daa:	2201      	movs	r2, #1
    9dac:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    9dae:	687b      	ldr	r3, [r7, #4]
    9db0:	2201      	movs	r2, #1
    9db2:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    9db4:	687b      	ldr	r3, [r7, #4]
    9db6:	2206      	movs	r2, #6
    9db8:	821a      	strh	r2, [r3, #16]
}
    9dba:	46c0      	nop			; (mov r8, r8)
    9dbc:	46bd      	mov	sp, r7
    9dbe:	b002      	add	sp, #8
    9dc0:	bd80      	pop	{r7, pc}
    9dc2:	46c0      	nop			; (mov r8, r8)

00009dc4 <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    9dc4:	b580      	push	{r7, lr}
    9dc6:	b082      	sub	sp, #8
    9dc8:	af00      	add	r7, sp, #0
    9dca:	0002      	movs	r2, r0
    9dcc:	1dfb      	adds	r3, r7, #7
    9dce:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    9dd0:	4a03      	ldr	r2, [pc, #12]	; (9de0 <system_cpu_clock_set_divider+0x1c>)
    9dd2:	1dfb      	adds	r3, r7, #7
    9dd4:	781b      	ldrb	r3, [r3, #0]
    9dd6:	7213      	strb	r3, [r2, #8]
}
    9dd8:	46c0      	nop			; (mov r8, r8)
    9dda:	46bd      	mov	sp, r7
    9ddc:	b002      	add	sp, #8
    9dde:	bd80      	pop	{r7, pc}
    9de0:	40000400 	.word	0x40000400

00009de4 <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    9de4:	b580      	push	{r7, lr}
    9de6:	b082      	sub	sp, #8
    9de8:	af00      	add	r7, sp, #0
    9dea:	0002      	movs	r2, r0
    9dec:	1dfb      	adds	r3, r7, #7
    9dee:	701a      	strb	r2, [r3, #0]
    9df0:	1dbb      	adds	r3, r7, #6
    9df2:	1c0a      	adds	r2, r1, #0
    9df4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9df6:	1dfb      	adds	r3, r7, #7
    9df8:	781b      	ldrb	r3, [r3, #0]
    9dfa:	2b01      	cmp	r3, #1
    9dfc:	d008      	beq.n	9e10 <system_apb_clock_set_divider+0x2c>
    9dfe:	2b02      	cmp	r3, #2
    9e00:	d00b      	beq.n	9e1a <system_apb_clock_set_divider+0x36>
    9e02:	2b00      	cmp	r3, #0
    9e04:	d10e      	bne.n	9e24 <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    9e06:	4a0b      	ldr	r2, [pc, #44]	; (9e34 <system_apb_clock_set_divider+0x50>)
    9e08:	1dbb      	adds	r3, r7, #6
    9e0a:	781b      	ldrb	r3, [r3, #0]
    9e0c:	7253      	strb	r3, [r2, #9]
			break;
    9e0e:	e00b      	b.n	9e28 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    9e10:	4a08      	ldr	r2, [pc, #32]	; (9e34 <system_apb_clock_set_divider+0x50>)
    9e12:	1dbb      	adds	r3, r7, #6
    9e14:	781b      	ldrb	r3, [r3, #0]
    9e16:	7293      	strb	r3, [r2, #10]
			break;
    9e18:	e006      	b.n	9e28 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    9e1a:	4a06      	ldr	r2, [pc, #24]	; (9e34 <system_apb_clock_set_divider+0x50>)
    9e1c:	1dbb      	adds	r3, r7, #6
    9e1e:	781b      	ldrb	r3, [r3, #0]
    9e20:	72d3      	strb	r3, [r2, #11]
			break;
    9e22:	e001      	b.n	9e28 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    9e24:	2317      	movs	r3, #23
    9e26:	e000      	b.n	9e2a <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    9e28:	2300      	movs	r3, #0
}
    9e2a:	0018      	movs	r0, r3
    9e2c:	46bd      	mov	sp, r7
    9e2e:	b002      	add	sp, #8
    9e30:	bd80      	pop	{r7, pc}
    9e32:	46c0      	nop			; (mov r8, r8)
    9e34:	40000400 	.word	0x40000400

00009e38 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    9e38:	b580      	push	{r7, lr}
    9e3a:	b082      	sub	sp, #8
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	0002      	movs	r2, r0
    9e40:	1dfb      	adds	r3, r7, #7
    9e42:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    9e44:	4a08      	ldr	r2, [pc, #32]	; (9e68 <system_flash_set_waitstates+0x30>)
    9e46:	1dfb      	adds	r3, r7, #7
    9e48:	781b      	ldrb	r3, [r3, #0]
    9e4a:	210f      	movs	r1, #15
    9e4c:	400b      	ands	r3, r1
    9e4e:	b2d9      	uxtb	r1, r3
    9e50:	6853      	ldr	r3, [r2, #4]
    9e52:	200f      	movs	r0, #15
    9e54:	4001      	ands	r1, r0
    9e56:	0049      	lsls	r1, r1, #1
    9e58:	201e      	movs	r0, #30
    9e5a:	4383      	bics	r3, r0
    9e5c:	430b      	orrs	r3, r1
    9e5e:	6053      	str	r3, [r2, #4]
}
    9e60:	46c0      	nop			; (mov r8, r8)
    9e62:	46bd      	mov	sp, r7
    9e64:	b002      	add	sp, #8
    9e66:	bd80      	pop	{r7, pc}
    9e68:	41004000 	.word	0x41004000

00009e6c <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    9e6c:	b580      	push	{r7, lr}
    9e6e:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    9e70:	46c0      	nop			; (mov r8, r8)
    9e72:	4b04      	ldr	r3, [pc, #16]	; (9e84 <_system_dfll_wait_for_sync+0x18>)
    9e74:	68db      	ldr	r3, [r3, #12]
    9e76:	2210      	movs	r2, #16
    9e78:	4013      	ands	r3, r2
    9e7a:	d0fa      	beq.n	9e72 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    9e7c:	46c0      	nop			; (mov r8, r8)
    9e7e:	46bd      	mov	sp, r7
    9e80:	bd80      	pop	{r7, pc}
    9e82:	46c0      	nop			; (mov r8, r8)
    9e84:	40000800 	.word	0x40000800

00009e88 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    9e88:	b580      	push	{r7, lr}
    9e8a:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    9e8c:	4b0c      	ldr	r3, [pc, #48]	; (9ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9e8e:	2202      	movs	r2, #2
    9e90:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    9e92:	4b0c      	ldr	r3, [pc, #48]	; (9ec4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    9e94:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    9e96:	4a0a      	ldr	r2, [pc, #40]	; (9ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9e98:	4b0b      	ldr	r3, [pc, #44]	; (9ec8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9e9a:	689b      	ldr	r3, [r3, #8]
    9e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    9e9e:	4a08      	ldr	r2, [pc, #32]	; (9ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9ea0:	4b09      	ldr	r3, [pc, #36]	; (9ec8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9ea2:	685b      	ldr	r3, [r3, #4]
    9ea4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    9ea6:	4b06      	ldr	r3, [pc, #24]	; (9ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9ea8:	2200      	movs	r2, #0
    9eaa:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    9eac:	4b05      	ldr	r3, [pc, #20]	; (9ec4 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    9eae:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    9eb0:	4a03      	ldr	r2, [pc, #12]	; (9ec0 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    9eb2:	4b05      	ldr	r3, [pc, #20]	; (9ec8 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    9eb4:	681b      	ldr	r3, [r3, #0]
    9eb6:	b29b      	uxth	r3, r3
    9eb8:	8493      	strh	r3, [r2, #36]	; 0x24
}
    9eba:	46c0      	nop			; (mov r8, r8)
    9ebc:	46bd      	mov	sp, r7
    9ebe:	bd80      	pop	{r7, pc}
    9ec0:	40000800 	.word	0x40000800
    9ec4:	00009e6d 	.word	0x00009e6d
    9ec8:	20000114 	.word	0x20000114

00009ecc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    9ecc:	b580      	push	{r7, lr}
    9ece:	b082      	sub	sp, #8
    9ed0:	af00      	add	r7, sp, #0
    9ed2:	0002      	movs	r2, r0
    9ed4:	1dfb      	adds	r3, r7, #7
    9ed6:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    9ed8:	1dfb      	adds	r3, r7, #7
    9eda:	781b      	ldrb	r3, [r3, #0]
    9edc:	2b08      	cmp	r3, #8
    9ede:	d840      	bhi.n	9f62 <system_clock_source_get_hz+0x96>
    9ee0:	009a      	lsls	r2, r3, #2
    9ee2:	4b22      	ldr	r3, [pc, #136]	; (9f6c <system_clock_source_get_hz+0xa0>)
    9ee4:	18d3      	adds	r3, r2, r3
    9ee6:	681b      	ldr	r3, [r3, #0]
    9ee8:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    9eea:	4b21      	ldr	r3, [pc, #132]	; (9f70 <system_clock_source_get_hz+0xa4>)
    9eec:	691b      	ldr	r3, [r3, #16]
    9eee:	e039      	b.n	9f64 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    9ef0:	4b20      	ldr	r3, [pc, #128]	; (9f74 <system_clock_source_get_hz+0xa8>)
    9ef2:	6a1b      	ldr	r3, [r3, #32]
    9ef4:	059b      	lsls	r3, r3, #22
    9ef6:	0f9b      	lsrs	r3, r3, #30
    9ef8:	b2db      	uxtb	r3, r3
    9efa:	001a      	movs	r2, r3
    9efc:	4b1e      	ldr	r3, [pc, #120]	; (9f78 <system_clock_source_get_hz+0xac>)
    9efe:	40d3      	lsrs	r3, r2
    9f00:	e030      	b.n	9f64 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    9f02:	2380      	movs	r3, #128	; 0x80
    9f04:	021b      	lsls	r3, r3, #8
    9f06:	e02d      	b.n	9f64 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    9f08:	2380      	movs	r3, #128	; 0x80
    9f0a:	021b      	lsls	r3, r3, #8
    9f0c:	e02a      	b.n	9f64 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    9f0e:	4b18      	ldr	r3, [pc, #96]	; (9f70 <system_clock_source_get_hz+0xa4>)
    9f10:	695b      	ldr	r3, [r3, #20]
    9f12:	e027      	b.n	9f64 <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    9f14:	4b16      	ldr	r3, [pc, #88]	; (9f70 <system_clock_source_get_hz+0xa4>)
    9f16:	681b      	ldr	r3, [r3, #0]
    9f18:	2202      	movs	r2, #2
    9f1a:	4013      	ands	r3, r2
    9f1c:	d101      	bne.n	9f22 <system_clock_source_get_hz+0x56>
			return 0;
    9f1e:	2300      	movs	r3, #0
    9f20:	e020      	b.n	9f64 <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    9f22:	4b16      	ldr	r3, [pc, #88]	; (9f7c <system_clock_source_get_hz+0xb0>)
    9f24:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    9f26:	4b12      	ldr	r3, [pc, #72]	; (9f70 <system_clock_source_get_hz+0xa4>)
    9f28:	681b      	ldr	r3, [r3, #0]
    9f2a:	2204      	movs	r2, #4
    9f2c:	4013      	ands	r3, r2
    9f2e:	d009      	beq.n	9f44 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9f30:	2000      	movs	r0, #0
    9f32:	4b13      	ldr	r3, [pc, #76]	; (9f80 <system_clock_source_get_hz+0xb4>)
    9f34:	4798      	blx	r3
    9f36:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    9f38:	4b0d      	ldr	r3, [pc, #52]	; (9f70 <system_clock_source_get_hz+0xa4>)
    9f3a:	689b      	ldr	r3, [r3, #8]
    9f3c:	041b      	lsls	r3, r3, #16
    9f3e:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    9f40:	4353      	muls	r3, r2
    9f42:	e00f      	b.n	9f64 <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    9f44:	4b0f      	ldr	r3, [pc, #60]	; (9f84 <system_clock_source_get_hz+0xb8>)
    9f46:	e00d      	b.n	9f64 <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    9f48:	4a0a      	ldr	r2, [pc, #40]	; (9f74 <system_clock_source_get_hz+0xa8>)
    9f4a:	2350      	movs	r3, #80	; 0x50
    9f4c:	5cd3      	ldrb	r3, [r2, r3]
    9f4e:	b2db      	uxtb	r3, r3
    9f50:	001a      	movs	r2, r3
    9f52:	2304      	movs	r3, #4
    9f54:	4013      	ands	r3, r2
    9f56:	d101      	bne.n	9f5c <system_clock_source_get_hz+0x90>
			return 0;
    9f58:	2300      	movs	r3, #0
    9f5a:	e003      	b.n	9f64 <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    9f5c:	4b04      	ldr	r3, [pc, #16]	; (9f70 <system_clock_source_get_hz+0xa4>)
    9f5e:	68db      	ldr	r3, [r3, #12]
    9f60:	e000      	b.n	9f64 <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    9f62:	2300      	movs	r3, #0
	}
}
    9f64:	0018      	movs	r0, r3
    9f66:	46bd      	mov	sp, r7
    9f68:	b002      	add	sp, #8
    9f6a:	bd80      	pop	{r7, pc}
    9f6c:	000122bc 	.word	0x000122bc
    9f70:	20000114 	.word	0x20000114
    9f74:	40000800 	.word	0x40000800
    9f78:	007a1200 	.word	0x007a1200
    9f7c:	00009e6d 	.word	0x00009e6d
    9f80:	0000aa9d 	.word	0x0000aa9d
    9f84:	02dc6c00 	.word	0x02dc6c00

00009f88 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    9f88:	b580      	push	{r7, lr}
    9f8a:	b084      	sub	sp, #16
    9f8c:	af00      	add	r7, sp, #0
    9f8e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    9f90:	4b1a      	ldr	r3, [pc, #104]	; (9ffc <system_clock_source_osc8m_set_config+0x74>)
    9f92:	6a1b      	ldr	r3, [r3, #32]
    9f94:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    9f96:	687b      	ldr	r3, [r7, #4]
    9f98:	781b      	ldrb	r3, [r3, #0]
    9f9a:	1c1a      	adds	r2, r3, #0
    9f9c:	2303      	movs	r3, #3
    9f9e:	4013      	ands	r3, r2
    9fa0:	b2da      	uxtb	r2, r3
    9fa2:	230d      	movs	r3, #13
    9fa4:	18fb      	adds	r3, r7, r3
    9fa6:	2103      	movs	r1, #3
    9fa8:	400a      	ands	r2, r1
    9faa:	0010      	movs	r0, r2
    9fac:	781a      	ldrb	r2, [r3, #0]
    9fae:	2103      	movs	r1, #3
    9fb0:	438a      	bics	r2, r1
    9fb2:	1c11      	adds	r1, r2, #0
    9fb4:	1c02      	adds	r2, r0, #0
    9fb6:	430a      	orrs	r2, r1
    9fb8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    9fba:	687b      	ldr	r3, [r7, #4]
    9fbc:	789a      	ldrb	r2, [r3, #2]
    9fbe:	230c      	movs	r3, #12
    9fc0:	18fb      	adds	r3, r7, r3
    9fc2:	01d0      	lsls	r0, r2, #7
    9fc4:	781a      	ldrb	r2, [r3, #0]
    9fc6:	217f      	movs	r1, #127	; 0x7f
    9fc8:	400a      	ands	r2, r1
    9fca:	1c11      	adds	r1, r2, #0
    9fcc:	1c02      	adds	r2, r0, #0
    9fce:	430a      	orrs	r2, r1
    9fd0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    9fd2:	687b      	ldr	r3, [r7, #4]
    9fd4:	785a      	ldrb	r2, [r3, #1]
    9fd6:	230c      	movs	r3, #12
    9fd8:	18fb      	adds	r3, r7, r3
    9fda:	2101      	movs	r1, #1
    9fdc:	400a      	ands	r2, r1
    9fde:	0190      	lsls	r0, r2, #6
    9fe0:	781a      	ldrb	r2, [r3, #0]
    9fe2:	2140      	movs	r1, #64	; 0x40
    9fe4:	438a      	bics	r2, r1
    9fe6:	1c11      	adds	r1, r2, #0
    9fe8:	1c02      	adds	r2, r0, #0
    9fea:	430a      	orrs	r2, r1
    9fec:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    9fee:	4b03      	ldr	r3, [pc, #12]	; (9ffc <system_clock_source_osc8m_set_config+0x74>)
    9ff0:	68fa      	ldr	r2, [r7, #12]
    9ff2:	621a      	str	r2, [r3, #32]
}
    9ff4:	46c0      	nop			; (mov r8, r8)
    9ff6:	46bd      	mov	sp, r7
    9ff8:	b004      	add	sp, #16
    9ffa:	bd80      	pop	{r7, pc}
    9ffc:	40000800 	.word	0x40000800

0000a000 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    a000:	b580      	push	{r7, lr}
    a002:	b084      	sub	sp, #16
    a004:	af00      	add	r7, sp, #0
    a006:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    a008:	4a43      	ldr	r2, [pc, #268]	; (a118 <system_clock_source_xosc32k_set_config+0x118>)
    a00a:	230c      	movs	r3, #12
    a00c:	18fb      	adds	r3, r7, r3
    a00e:	8a92      	ldrh	r2, [r2, #20]
    a010:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    a012:	687b      	ldr	r3, [r7, #4]
    a014:	785b      	ldrb	r3, [r3, #1]
    a016:	1c1a      	adds	r2, r3, #0
    a018:	2307      	movs	r3, #7
    a01a:	4013      	ands	r3, r2
    a01c:	b2da      	uxtb	r2, r3
    a01e:	230c      	movs	r3, #12
    a020:	18fb      	adds	r3, r7, r3
    a022:	2107      	movs	r1, #7
    a024:	400a      	ands	r2, r1
    a026:	0010      	movs	r0, r2
    a028:	785a      	ldrb	r2, [r3, #1]
    a02a:	2107      	movs	r1, #7
    a02c:	438a      	bics	r2, r1
    a02e:	1c11      	adds	r1, r2, #0
    a030:	1c02      	adds	r2, r0, #0
    a032:	430a      	orrs	r2, r1
    a034:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    a036:	687b      	ldr	r3, [r7, #4]
    a038:	781b      	ldrb	r3, [r3, #0]
    a03a:	2b00      	cmp	r3, #0
    a03c:	d106      	bne.n	a04c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    a03e:	230c      	movs	r3, #12
    a040:	18fb      	adds	r3, r7, r3
    a042:	781a      	ldrb	r2, [r3, #0]
    a044:	2104      	movs	r1, #4
    a046:	430a      	orrs	r2, r1
    a048:	701a      	strb	r2, [r3, #0]
    a04a:	e005      	b.n	a058 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    a04c:	230c      	movs	r3, #12
    a04e:	18fb      	adds	r3, r7, r3
    a050:	781a      	ldrb	r2, [r3, #0]
    a052:	2104      	movs	r1, #4
    a054:	438a      	bics	r2, r1
    a056:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    a058:	687b      	ldr	r3, [r7, #4]
    a05a:	789a      	ldrb	r2, [r3, #2]
    a05c:	230c      	movs	r3, #12
    a05e:	18fb      	adds	r3, r7, r3
    a060:	2101      	movs	r1, #1
    a062:	400a      	ands	r2, r1
    a064:	0150      	lsls	r0, r2, #5
    a066:	781a      	ldrb	r2, [r3, #0]
    a068:	2120      	movs	r1, #32
    a06a:	438a      	bics	r2, r1
    a06c:	1c11      	adds	r1, r2, #0
    a06e:	1c02      	adds	r2, r0, #0
    a070:	430a      	orrs	r2, r1
    a072:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    a074:	687b      	ldr	r3, [r7, #4]
    a076:	78da      	ldrb	r2, [r3, #3]
    a078:	230c      	movs	r3, #12
    a07a:	18fb      	adds	r3, r7, r3
    a07c:	2101      	movs	r1, #1
    a07e:	400a      	ands	r2, r1
    a080:	0110      	lsls	r0, r2, #4
    a082:	781a      	ldrb	r2, [r3, #0]
    a084:	2110      	movs	r1, #16
    a086:	438a      	bics	r2, r1
    a088:	1c11      	adds	r1, r2, #0
    a08a:	1c02      	adds	r2, r0, #0
    a08c:	430a      	orrs	r2, r1
    a08e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    a090:	687b      	ldr	r3, [r7, #4]
    a092:	791a      	ldrb	r2, [r3, #4]
    a094:	230c      	movs	r3, #12
    a096:	18fb      	adds	r3, r7, r3
    a098:	2101      	movs	r1, #1
    a09a:	400a      	ands	r2, r1
    a09c:	00d0      	lsls	r0, r2, #3
    a09e:	781a      	ldrb	r2, [r3, #0]
    a0a0:	2108      	movs	r1, #8
    a0a2:	438a      	bics	r2, r1
    a0a4:	1c11      	adds	r1, r2, #0
    a0a6:	1c02      	adds	r2, r0, #0
    a0a8:	430a      	orrs	r2, r1
    a0aa:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    a0ac:	687b      	ldr	r3, [r7, #4]
    a0ae:	7b5a      	ldrb	r2, [r3, #13]
    a0b0:	230c      	movs	r3, #12
    a0b2:	18fb      	adds	r3, r7, r3
    a0b4:	01d0      	lsls	r0, r2, #7
    a0b6:	781a      	ldrb	r2, [r3, #0]
    a0b8:	217f      	movs	r1, #127	; 0x7f
    a0ba:	400a      	ands	r2, r1
    a0bc:	1c11      	adds	r1, r2, #0
    a0be:	1c02      	adds	r2, r0, #0
    a0c0:	430a      	orrs	r2, r1
    a0c2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    a0c4:	687b      	ldr	r3, [r7, #4]
    a0c6:	7b1a      	ldrb	r2, [r3, #12]
    a0c8:	230c      	movs	r3, #12
    a0ca:	18fb      	adds	r3, r7, r3
    a0cc:	2101      	movs	r1, #1
    a0ce:	400a      	ands	r2, r1
    a0d0:	0190      	lsls	r0, r2, #6
    a0d2:	781a      	ldrb	r2, [r3, #0]
    a0d4:	2140      	movs	r1, #64	; 0x40
    a0d6:	438a      	bics	r2, r1
    a0d8:	1c11      	adds	r1, r2, #0
    a0da:	1c02      	adds	r2, r0, #0
    a0dc:	430a      	orrs	r2, r1
    a0de:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    a0e0:	687b      	ldr	r3, [r7, #4]
    a0e2:	7b9a      	ldrb	r2, [r3, #14]
    a0e4:	230c      	movs	r3, #12
    a0e6:	18fb      	adds	r3, r7, r3
    a0e8:	2101      	movs	r1, #1
    a0ea:	400a      	ands	r2, r1
    a0ec:	0110      	lsls	r0, r2, #4
    a0ee:	785a      	ldrb	r2, [r3, #1]
    a0f0:	2110      	movs	r1, #16
    a0f2:	438a      	bics	r2, r1
    a0f4:	1c11      	adds	r1, r2, #0
    a0f6:	1c02      	adds	r2, r0, #0
    a0f8:	430a      	orrs	r2, r1
    a0fa:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    a0fc:	687b      	ldr	r3, [r7, #4]
    a0fe:	689a      	ldr	r2, [r3, #8]
    a100:	4b06      	ldr	r3, [pc, #24]	; (a11c <system_clock_source_xosc32k_set_config+0x11c>)
    a102:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    a104:	4a04      	ldr	r2, [pc, #16]	; (a118 <system_clock_source_xosc32k_set_config+0x118>)
    a106:	230c      	movs	r3, #12
    a108:	18fb      	adds	r3, r7, r3
    a10a:	881b      	ldrh	r3, [r3, #0]
    a10c:	8293      	strh	r3, [r2, #20]
}
    a10e:	46c0      	nop			; (mov r8, r8)
    a110:	46bd      	mov	sp, r7
    a112:	b004      	add	sp, #16
    a114:	bd80      	pop	{r7, pc}
    a116:	46c0      	nop			; (mov r8, r8)
    a118:	40000800 	.word	0x40000800
    a11c:	20000114 	.word	0x20000114

0000a120 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    a120:	b580      	push	{r7, lr}
    a122:	b082      	sub	sp, #8
    a124:	af00      	add	r7, sp, #0
    a126:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    a128:	687b      	ldr	r3, [r7, #4]
    a12a:	7a1b      	ldrb	r3, [r3, #8]
    a12c:	029b      	lsls	r3, r3, #10
    a12e:	041b      	lsls	r3, r3, #16
    a130:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    a132:	687b      	ldr	r3, [r7, #4]
    a134:	895b      	ldrh	r3, [r3, #10]
    a136:	059b      	lsls	r3, r3, #22
    a138:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    a13a:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    a13c:	4b2a      	ldr	r3, [pc, #168]	; (a1e8 <system_clock_source_dfll_set_config+0xc8>)
    a13e:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    a140:	687b      	ldr	r3, [r7, #4]
    a142:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    a144:	687b      	ldr	r3, [r7, #4]
    a146:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    a148:	4313      	orrs	r3, r2
    a14a:	b2db      	uxtb	r3, r3
    a14c:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    a14e:	687b      	ldr	r3, [r7, #4]
    a150:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    a152:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    a154:	687a      	ldr	r2, [r7, #4]
    a156:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    a158:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    a15a:	687b      	ldr	r3, [r7, #4]
    a15c:	785b      	ldrb	r3, [r3, #1]
    a15e:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    a160:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    a162:	4b21      	ldr	r3, [pc, #132]	; (a1e8 <system_clock_source_dfll_set_config+0xc8>)
    a164:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    a166:	687b      	ldr	r3, [r7, #4]
    a168:	781b      	ldrb	r3, [r3, #0]
    a16a:	2b04      	cmp	r3, #4
    a16c:	d116      	bne.n	a19c <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a16e:	687b      	ldr	r3, [r7, #4]
    a170:	7b1b      	ldrb	r3, [r3, #12]
    a172:	069b      	lsls	r3, r3, #26
    a174:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a176:	687b      	ldr	r3, [r7, #4]
    a178:	89db      	ldrh	r3, [r3, #14]
    a17a:	041b      	lsls	r3, r3, #16
    a17c:	0019      	movs	r1, r3
    a17e:	4b1b      	ldr	r3, [pc, #108]	; (a1ec <system_clock_source_dfll_set_config+0xcc>)
    a180:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a182:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    a184:	687a      	ldr	r2, [r7, #4]
    a186:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a188:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    a18a:	4b17      	ldr	r3, [pc, #92]	; (a1e8 <system_clock_source_dfll_set_config+0xc8>)
    a18c:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    a18e:	4b16      	ldr	r3, [pc, #88]	; (a1e8 <system_clock_source_dfll_set_config+0xc8>)
    a190:	681b      	ldr	r3, [r3, #0]
    a192:	687a      	ldr	r2, [r7, #4]
    a194:	7812      	ldrb	r2, [r2, #0]
    a196:	431a      	orrs	r2, r3
    a198:	4b13      	ldr	r3, [pc, #76]	; (a1e8 <system_clock_source_dfll_set_config+0xc8>)
    a19a:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    a19c:	687b      	ldr	r3, [r7, #4]
    a19e:	781b      	ldrb	r3, [r3, #0]
    a1a0:	2b20      	cmp	r3, #32
    a1a2:	d11c      	bne.n	a1de <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a1a4:	687b      	ldr	r3, [r7, #4]
    a1a6:	7b1b      	ldrb	r3, [r3, #12]
    a1a8:	069b      	lsls	r3, r3, #26
    a1aa:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a1ac:	687b      	ldr	r3, [r7, #4]
    a1ae:	89db      	ldrh	r3, [r3, #14]
    a1b0:	041b      	lsls	r3, r3, #16
    a1b2:	0019      	movs	r1, r3
    a1b4:	4b0d      	ldr	r3, [pc, #52]	; (a1ec <system_clock_source_dfll_set_config+0xcc>)
    a1b6:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    a1b8:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    a1ba:	687a      	ldr	r2, [r7, #4]
    a1bc:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    a1be:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    a1c0:	4b09      	ldr	r3, [pc, #36]	; (a1e8 <system_clock_source_dfll_set_config+0xc8>)
    a1c2:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    a1c4:	4b08      	ldr	r3, [pc, #32]	; (a1e8 <system_clock_source_dfll_set_config+0xc8>)
    a1c6:	681b      	ldr	r3, [r3, #0]
    a1c8:	687a      	ldr	r2, [r7, #4]
    a1ca:	7812      	ldrb	r2, [r2, #0]
    a1cc:	2104      	movs	r1, #4
    a1ce:	430a      	orrs	r2, r1
    a1d0:	b2d2      	uxtb	r2, r2
    a1d2:	4313      	orrs	r3, r2
    a1d4:	2280      	movs	r2, #128	; 0x80
    a1d6:	00d2      	lsls	r2, r2, #3
    a1d8:	431a      	orrs	r2, r3
    a1da:	4b03      	ldr	r3, [pc, #12]	; (a1e8 <system_clock_source_dfll_set_config+0xc8>)
    a1dc:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    a1de:	46c0      	nop			; (mov r8, r8)
    a1e0:	46bd      	mov	sp, r7
    a1e2:	b002      	add	sp, #8
    a1e4:	bd80      	pop	{r7, pc}
    a1e6:	46c0      	nop			; (mov r8, r8)
    a1e8:	20000114 	.word	0x20000114
    a1ec:	03ff0000 	.word	0x03ff0000

0000a1f0 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    a1f0:	b580      	push	{r7, lr}
    a1f2:	b082      	sub	sp, #8
    a1f4:	af00      	add	r7, sp, #0
    a1f6:	0002      	movs	r2, r0
    a1f8:	1dfb      	adds	r3, r7, #7
    a1fa:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    a1fc:	1dfb      	adds	r3, r7, #7
    a1fe:	781b      	ldrb	r3, [r3, #0]
    a200:	2b08      	cmp	r3, #8
    a202:	d83b      	bhi.n	a27c <system_clock_source_enable+0x8c>
    a204:	009a      	lsls	r2, r3, #2
    a206:	4b21      	ldr	r3, [pc, #132]	; (a28c <system_clock_source_enable+0x9c>)
    a208:	18d3      	adds	r3, r2, r3
    a20a:	681b      	ldr	r3, [r3, #0]
    a20c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    a20e:	4b20      	ldr	r3, [pc, #128]	; (a290 <system_clock_source_enable+0xa0>)
    a210:	4a1f      	ldr	r2, [pc, #124]	; (a290 <system_clock_source_enable+0xa0>)
    a212:	6a12      	ldr	r2, [r2, #32]
    a214:	2102      	movs	r1, #2
    a216:	430a      	orrs	r2, r1
    a218:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    a21a:	2300      	movs	r3, #0
    a21c:	e031      	b.n	a282 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    a21e:	4b1c      	ldr	r3, [pc, #112]	; (a290 <system_clock_source_enable+0xa0>)
    a220:	4a1b      	ldr	r2, [pc, #108]	; (a290 <system_clock_source_enable+0xa0>)
    a222:	6992      	ldr	r2, [r2, #24]
    a224:	2102      	movs	r1, #2
    a226:	430a      	orrs	r2, r1
    a228:	619a      	str	r2, [r3, #24]
		break;
    a22a:	e029      	b.n	a280 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    a22c:	4a18      	ldr	r2, [pc, #96]	; (a290 <system_clock_source_enable+0xa0>)
    a22e:	4b18      	ldr	r3, [pc, #96]	; (a290 <system_clock_source_enable+0xa0>)
    a230:	8a1b      	ldrh	r3, [r3, #16]
    a232:	b29b      	uxth	r3, r3
    a234:	2102      	movs	r1, #2
    a236:	430b      	orrs	r3, r1
    a238:	b29b      	uxth	r3, r3
    a23a:	8213      	strh	r3, [r2, #16]
		break;
    a23c:	e020      	b.n	a280 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    a23e:	4a14      	ldr	r2, [pc, #80]	; (a290 <system_clock_source_enable+0xa0>)
    a240:	4b13      	ldr	r3, [pc, #76]	; (a290 <system_clock_source_enable+0xa0>)
    a242:	8a9b      	ldrh	r3, [r3, #20]
    a244:	b29b      	uxth	r3, r3
    a246:	2102      	movs	r1, #2
    a248:	430b      	orrs	r3, r1
    a24a:	b29b      	uxth	r3, r3
    a24c:	8293      	strh	r3, [r2, #20]
		break;
    a24e:	e017      	b.n	a280 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    a250:	4b10      	ldr	r3, [pc, #64]	; (a294 <system_clock_source_enable+0xa4>)
    a252:	681b      	ldr	r3, [r3, #0]
    a254:	2202      	movs	r2, #2
    a256:	431a      	orrs	r2, r3
    a258:	4b0e      	ldr	r3, [pc, #56]	; (a294 <system_clock_source_enable+0xa4>)
    a25a:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    a25c:	4b0e      	ldr	r3, [pc, #56]	; (a298 <system_clock_source_enable+0xa8>)
    a25e:	4798      	blx	r3
		break;
    a260:	e00e      	b.n	a280 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    a262:	4a0b      	ldr	r2, [pc, #44]	; (a290 <system_clock_source_enable+0xa0>)
    a264:	490a      	ldr	r1, [pc, #40]	; (a290 <system_clock_source_enable+0xa0>)
    a266:	2344      	movs	r3, #68	; 0x44
    a268:	5ccb      	ldrb	r3, [r1, r3]
    a26a:	b2db      	uxtb	r3, r3
    a26c:	2102      	movs	r1, #2
    a26e:	430b      	orrs	r3, r1
    a270:	b2d9      	uxtb	r1, r3
    a272:	2344      	movs	r3, #68	; 0x44
    a274:	54d1      	strb	r1, [r2, r3]
		break;
    a276:	e003      	b.n	a280 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    a278:	2300      	movs	r3, #0
    a27a:	e002      	b.n	a282 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    a27c:	2317      	movs	r3, #23
    a27e:	e000      	b.n	a282 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    a280:	2300      	movs	r3, #0
}
    a282:	0018      	movs	r0, r3
    a284:	46bd      	mov	sp, r7
    a286:	b002      	add	sp, #8
    a288:	bd80      	pop	{r7, pc}
    a28a:	46c0      	nop			; (mov r8, r8)
    a28c:	000122e0 	.word	0x000122e0
    a290:	40000800 	.word	0x40000800
    a294:	20000114 	.word	0x20000114
    a298:	00009e89 	.word	0x00009e89

0000a29c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    a29c:	b580      	push	{r7, lr}
    a29e:	b084      	sub	sp, #16
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	0002      	movs	r2, r0
    a2a4:	1dfb      	adds	r3, r7, #7
    a2a6:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    a2a8:	2300      	movs	r3, #0
    a2aa:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    a2ac:	1dfb      	adds	r3, r7, #7
    a2ae:	781b      	ldrb	r3, [r3, #0]
    a2b0:	2b08      	cmp	r3, #8
    a2b2:	d821      	bhi.n	a2f8 <system_clock_source_is_ready+0x5c>
    a2b4:	009a      	lsls	r2, r3, #2
    a2b6:	4b18      	ldr	r3, [pc, #96]	; (a318 <system_clock_source_is_ready+0x7c>)
    a2b8:	18d3      	adds	r3, r2, r3
    a2ba:	681b      	ldr	r3, [r3, #0]
    a2bc:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    a2be:	2308      	movs	r3, #8
    a2c0:	60fb      	str	r3, [r7, #12]
		break;
    a2c2:	e01b      	b.n	a2fc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    a2c4:	2304      	movs	r3, #4
    a2c6:	60fb      	str	r3, [r7, #12]
		break;
    a2c8:	e018      	b.n	a2fc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    a2ca:	2301      	movs	r3, #1
    a2cc:	60fb      	str	r3, [r7, #12]
		break;
    a2ce:	e015      	b.n	a2fc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    a2d0:	2302      	movs	r3, #2
    a2d2:	60fb      	str	r3, [r7, #12]
		break;
    a2d4:	e012      	b.n	a2fc <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    a2d6:	23d0      	movs	r3, #208	; 0xd0
    a2d8:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    a2da:	e00f      	b.n	a2fc <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    a2dc:	4a0f      	ldr	r2, [pc, #60]	; (a31c <system_clock_source_is_ready+0x80>)
    a2de:	2350      	movs	r3, #80	; 0x50
    a2e0:	5cd3      	ldrb	r3, [r2, r3]
    a2e2:	b2db      	uxtb	r3, r3
    a2e4:	001a      	movs	r2, r3
    a2e6:	2303      	movs	r3, #3
    a2e8:	4013      	ands	r3, r2
    a2ea:	3b03      	subs	r3, #3
    a2ec:	425a      	negs	r2, r3
    a2ee:	4153      	adcs	r3, r2
    a2f0:	b2db      	uxtb	r3, r3
    a2f2:	e00c      	b.n	a30e <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    a2f4:	2301      	movs	r3, #1
    a2f6:	e00a      	b.n	a30e <system_clock_source_is_ready+0x72>

	default:
		return false;
    a2f8:	2300      	movs	r3, #0
    a2fa:	e008      	b.n	a30e <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    a2fc:	4b07      	ldr	r3, [pc, #28]	; (a31c <system_clock_source_is_ready+0x80>)
    a2fe:	68db      	ldr	r3, [r3, #12]
    a300:	68fa      	ldr	r2, [r7, #12]
    a302:	401a      	ands	r2, r3
    a304:	68fb      	ldr	r3, [r7, #12]
    a306:	1ad3      	subs	r3, r2, r3
    a308:	425a      	negs	r2, r3
    a30a:	4153      	adcs	r3, r2
    a30c:	b2db      	uxtb	r3, r3
}
    a30e:	0018      	movs	r0, r3
    a310:	46bd      	mov	sp, r7
    a312:	b004      	add	sp, #16
    a314:	bd80      	pop	{r7, pc}
    a316:	46c0      	nop			; (mov r8, r8)
    a318:	00012304 	.word	0x00012304
    a31c:	40000800 	.word	0x40000800

0000a320 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    a320:	b580      	push	{r7, lr}
    a322:	b082      	sub	sp, #8
    a324:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    a326:	003b      	movs	r3, r7
    a328:	2202      	movs	r2, #2
    a32a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    a32c:	2300      	movs	r3, #0
    a32e:	607b      	str	r3, [r7, #4]
    a330:	e009      	b.n	a346 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    a332:	687b      	ldr	r3, [r7, #4]
    a334:	b2db      	uxtb	r3, r3
    a336:	003a      	movs	r2, r7
    a338:	0011      	movs	r1, r2
    a33a:	0018      	movs	r0, r3
    a33c:	4b05      	ldr	r3, [pc, #20]	; (a354 <_switch_peripheral_gclk+0x34>)
    a33e:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    a340:	687b      	ldr	r3, [r7, #4]
    a342:	3301      	adds	r3, #1
    a344:	607b      	str	r3, [r7, #4]
    a346:	687b      	ldr	r3, [r7, #4]
    a348:	2b24      	cmp	r3, #36	; 0x24
    a34a:	d9f2      	bls.n	a332 <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    a34c:	46c0      	nop			; (mov r8, r8)
    a34e:	46bd      	mov	sp, r7
    a350:	b002      	add	sp, #8
    a352:	bd80      	pop	{r7, pc}
    a354:	0000a979 	.word	0x0000a979

0000a358 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    a358:	b580      	push	{r7, lr}
    a35a:	b0aa      	sub	sp, #168	; 0xa8
    a35c:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    a35e:	4ba5      	ldr	r3, [pc, #660]	; (a5f4 <system_clock_init+0x29c>)
    a360:	22c2      	movs	r2, #194	; 0xc2
    a362:	00d2      	lsls	r2, r2, #3
    a364:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    a366:	2002      	movs	r0, #2
    a368:	4ba3      	ldr	r3, [pc, #652]	; (a5f8 <system_clock_init+0x2a0>)
    a36a:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    a36c:	4ba3      	ldr	r3, [pc, #652]	; (a5fc <system_clock_init+0x2a4>)
    a36e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    a370:	2394      	movs	r3, #148	; 0x94
    a372:	18fb      	adds	r3, r7, r3
    a374:	0018      	movs	r0, r3
    a376:	4ba2      	ldr	r3, [pc, #648]	; (a600 <system_clock_init+0x2a8>)
    a378:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    a37a:	2394      	movs	r3, #148	; 0x94
    a37c:	18fb      	adds	r3, r7, r3
    a37e:	2280      	movs	r2, #128	; 0x80
    a380:	0212      	lsls	r2, r2, #8
    a382:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    a384:	2394      	movs	r3, #148	; 0x94
    a386:	18fb      	adds	r3, r7, r3
    a388:	2200      	movs	r2, #0
    a38a:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    a38c:	2394      	movs	r3, #148	; 0x94
    a38e:	18fb      	adds	r3, r7, r3
    a390:	2203      	movs	r2, #3
    a392:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    a394:	2394      	movs	r3, #148	; 0x94
    a396:	18fb      	adds	r3, r7, r3
    a398:	2200      	movs	r2, #0
    a39a:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    a39c:	2394      	movs	r3, #148	; 0x94
    a39e:	18fb      	adds	r3, r7, r3
    a3a0:	2200      	movs	r2, #0
    a3a2:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    a3a4:	2394      	movs	r3, #148	; 0x94
    a3a6:	18fb      	adds	r3, r7, r3
    a3a8:	2201      	movs	r2, #1
    a3aa:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    a3ac:	2394      	movs	r3, #148	; 0x94
    a3ae:	18fb      	adds	r3, r7, r3
    a3b0:	2200      	movs	r2, #0
    a3b2:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    a3b4:	2394      	movs	r3, #148	; 0x94
    a3b6:	18fb      	adds	r3, r7, r3
    a3b8:	2200      	movs	r2, #0
    a3ba:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    a3bc:	2394      	movs	r3, #148	; 0x94
    a3be:	18fb      	adds	r3, r7, r3
    a3c0:	0018      	movs	r0, r3
    a3c2:	4b90      	ldr	r3, [pc, #576]	; (a604 <system_clock_init+0x2ac>)
    a3c4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    a3c6:	2005      	movs	r0, #5
    a3c8:	4b8f      	ldr	r3, [pc, #572]	; (a608 <system_clock_init+0x2b0>)
    a3ca:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    a3cc:	46c0      	nop			; (mov r8, r8)
    a3ce:	2005      	movs	r0, #5
    a3d0:	4b8e      	ldr	r3, [pc, #568]	; (a60c <system_clock_init+0x2b4>)
    a3d2:	4798      	blx	r3
    a3d4:	0003      	movs	r3, r0
    a3d6:	001a      	movs	r2, r3
    a3d8:	2301      	movs	r3, #1
    a3da:	4053      	eors	r3, r2
    a3dc:	b2db      	uxtb	r3, r3
    a3de:	2b00      	cmp	r3, #0
    a3e0:	d1f5      	bne.n	a3ce <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    a3e2:	4a84      	ldr	r2, [pc, #528]	; (a5f4 <system_clock_init+0x29c>)
    a3e4:	8a93      	ldrh	r3, [r2, #20]
    a3e6:	2180      	movs	r1, #128	; 0x80
    a3e8:	430b      	orrs	r3, r1
    a3ea:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    a3ec:	2380      	movs	r3, #128	; 0x80
    a3ee:	18fb      	adds	r3, r7, r3
    a3f0:	0018      	movs	r0, r3
    a3f2:	4b87      	ldr	r3, [pc, #540]	; (a610 <system_clock_init+0x2b8>)
    a3f4:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    a3f6:	2380      	movs	r3, #128	; 0x80
    a3f8:	18fb      	adds	r3, r7, r3
    a3fa:	2204      	movs	r2, #4
    a3fc:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    a3fe:	2380      	movs	r3, #128	; 0x80
    a400:	18fb      	adds	r3, r7, r3
    a402:	2200      	movs	r2, #0
    a404:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    a406:	4b83      	ldr	r3, [pc, #524]	; (a614 <system_clock_init+0x2bc>)
    a408:	681b      	ldr	r3, [r3, #0]
    a40a:	0e9b      	lsrs	r3, r3, #26
    a40c:	22a4      	movs	r2, #164	; 0xa4
    a40e:	18ba      	adds	r2, r7, r2
    a410:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    a412:	23a4      	movs	r3, #164	; 0xa4
    a414:	18fb      	adds	r3, r7, r3
    a416:	681b      	ldr	r3, [r3, #0]
    a418:	2b3f      	cmp	r3, #63	; 0x3f
    a41a:	d103      	bne.n	a424 <system_clock_init+0xcc>
		coarse = 0x1f;
    a41c:	231f      	movs	r3, #31
    a41e:	22a4      	movs	r2, #164	; 0xa4
    a420:	18ba      	adds	r2, r7, r2
    a422:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    a424:	23a4      	movs	r3, #164	; 0xa4
    a426:	18fb      	adds	r3, r7, r3
    a428:	681b      	ldr	r3, [r3, #0]
    a42a:	b2da      	uxtb	r2, r3
    a42c:	2380      	movs	r3, #128	; 0x80
    a42e:	18fb      	adds	r3, r7, r3
    a430:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    a432:	2380      	movs	r3, #128	; 0x80
    a434:	18fb      	adds	r3, r7, r3
    a436:	2200      	movs	r2, #0
    a438:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    a43a:	2380      	movs	r3, #128	; 0x80
    a43c:	18fb      	adds	r3, r7, r3
    a43e:	2200      	movs	r2, #0
    a440:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    a442:	2380      	movs	r3, #128	; 0x80
    a444:	18fb      	adds	r3, r7, r3
    a446:	2200      	movs	r2, #0
    a448:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    a44a:	2380      	movs	r3, #128	; 0x80
    a44c:	18fb      	adds	r3, r7, r3
    a44e:	2200      	movs	r2, #0
    a450:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    a452:	2380      	movs	r3, #128	; 0x80
    a454:	18fb      	adds	r3, r7, r3
    a456:	4a70      	ldr	r2, [pc, #448]	; (a618 <system_clock_init+0x2c0>)
    a458:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    a45a:	2380      	movs	r3, #128	; 0x80
    a45c:	18fb      	adds	r3, r7, r3
    a45e:	2207      	movs	r2, #7
    a460:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    a462:	2380      	movs	r3, #128	; 0x80
    a464:	18fb      	adds	r3, r7, r3
    a466:	223f      	movs	r2, #63	; 0x3f
    a468:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    a46a:	2380      	movs	r3, #128	; 0x80
    a46c:	18fb      	adds	r3, r7, r3
    a46e:	0018      	movs	r0, r3
    a470:	4b6a      	ldr	r3, [pc, #424]	; (a61c <system_clock_init+0x2c4>)
    a472:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    a474:	237c      	movs	r3, #124	; 0x7c
    a476:	18fb      	adds	r3, r7, r3
    a478:	0018      	movs	r0, r3
    a47a:	4b69      	ldr	r3, [pc, #420]	; (a620 <system_clock_init+0x2c8>)
    a47c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    a47e:	237c      	movs	r3, #124	; 0x7c
    a480:	18fb      	adds	r3, r7, r3
    a482:	2200      	movs	r2, #0
    a484:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    a486:	237c      	movs	r3, #124	; 0x7c
    a488:	18fb      	adds	r3, r7, r3
    a48a:	2201      	movs	r2, #1
    a48c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    a48e:	237c      	movs	r3, #124	; 0x7c
    a490:	18fb      	adds	r3, r7, r3
    a492:	2200      	movs	r2, #0
    a494:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    a496:	237c      	movs	r3, #124	; 0x7c
    a498:	18fb      	adds	r3, r7, r3
    a49a:	0018      	movs	r0, r3
    a49c:	4b61      	ldr	r3, [pc, #388]	; (a624 <system_clock_init+0x2cc>)
    a49e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    a4a0:	2006      	movs	r0, #6
    a4a2:	4b59      	ldr	r3, [pc, #356]	; (a608 <system_clock_init+0x2b0>)
    a4a4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    a4a6:	4b60      	ldr	r3, [pc, #384]	; (a628 <system_clock_init+0x2d0>)
    a4a8:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    a4aa:	2364      	movs	r3, #100	; 0x64
    a4ac:	18fb      	adds	r3, r7, r3
    a4ae:	0018      	movs	r0, r3
    a4b0:	4b5e      	ldr	r3, [pc, #376]	; (a62c <system_clock_init+0x2d4>)
    a4b2:	4798      	blx	r3
    a4b4:	2364      	movs	r3, #100	; 0x64
    a4b6:	18fb      	adds	r3, r7, r3
    a4b8:	2205      	movs	r2, #5
    a4ba:	701a      	strb	r2, [r3, #0]
    a4bc:	2364      	movs	r3, #100	; 0x64
    a4be:	18fb      	adds	r3, r7, r3
    a4c0:	2201      	movs	r2, #1
    a4c2:	605a      	str	r2, [r3, #4]
    a4c4:	2364      	movs	r3, #100	; 0x64
    a4c6:	18fb      	adds	r3, r7, r3
    a4c8:	2200      	movs	r2, #0
    a4ca:	721a      	strb	r2, [r3, #8]
    a4cc:	2364      	movs	r3, #100	; 0x64
    a4ce:	18fb      	adds	r3, r7, r3
    a4d0:	2200      	movs	r2, #0
    a4d2:	725a      	strb	r2, [r3, #9]
    a4d4:	2364      	movs	r3, #100	; 0x64
    a4d6:	18fb      	adds	r3, r7, r3
    a4d8:	0019      	movs	r1, r3
    a4da:	2001      	movs	r0, #1
    a4dc:	4b54      	ldr	r3, [pc, #336]	; (a630 <system_clock_init+0x2d8>)
    a4de:	4798      	blx	r3
    a4e0:	2001      	movs	r0, #1
    a4e2:	4b54      	ldr	r3, [pc, #336]	; (a634 <system_clock_init+0x2dc>)
    a4e4:	4798      	blx	r3
    a4e6:	2340      	movs	r3, #64	; 0x40
    a4e8:	18fb      	adds	r3, r7, r3
    a4ea:	0018      	movs	r0, r3
    a4ec:	4b4f      	ldr	r3, [pc, #316]	; (a62c <system_clock_init+0x2d4>)
    a4ee:	4798      	blx	r3
    a4f0:	2340      	movs	r3, #64	; 0x40
    a4f2:	18fb      	adds	r3, r7, r3
    a4f4:	2206      	movs	r2, #6
    a4f6:	701a      	strb	r2, [r3, #0]
    a4f8:	2340      	movs	r3, #64	; 0x40
    a4fa:	18fb      	adds	r3, r7, r3
    a4fc:	2202      	movs	r2, #2
    a4fe:	605a      	str	r2, [r3, #4]
    a500:	2340      	movs	r3, #64	; 0x40
    a502:	18fb      	adds	r3, r7, r3
    a504:	2200      	movs	r2, #0
    a506:	721a      	strb	r2, [r3, #8]
    a508:	2340      	movs	r3, #64	; 0x40
    a50a:	18fb      	adds	r3, r7, r3
    a50c:	2201      	movs	r2, #1
    a50e:	725a      	strb	r2, [r3, #9]
    a510:	2340      	movs	r3, #64	; 0x40
    a512:	18fb      	adds	r3, r7, r3
    a514:	0019      	movs	r1, r3
    a516:	2004      	movs	r0, #4
    a518:	4b45      	ldr	r3, [pc, #276]	; (a630 <system_clock_init+0x2d8>)
    a51a:	4798      	blx	r3
    a51c:	2004      	movs	r0, #4
    a51e:	4b45      	ldr	r3, [pc, #276]	; (a634 <system_clock_init+0x2dc>)
    a520:	4798      	blx	r3
    a522:	2334      	movs	r3, #52	; 0x34
    a524:	18fb      	adds	r3, r7, r3
    a526:	0018      	movs	r0, r3
    a528:	4b40      	ldr	r3, [pc, #256]	; (a62c <system_clock_init+0x2d4>)
    a52a:	4798      	blx	r3
    a52c:	2334      	movs	r3, #52	; 0x34
    a52e:	18fb      	adds	r3, r7, r3
    a530:	2206      	movs	r2, #6
    a532:	701a      	strb	r2, [r3, #0]
    a534:	2334      	movs	r3, #52	; 0x34
    a536:	18fb      	adds	r3, r7, r3
    a538:	2210      	movs	r2, #16
    a53a:	605a      	str	r2, [r3, #4]
    a53c:	2334      	movs	r3, #52	; 0x34
    a53e:	18fb      	adds	r3, r7, r3
    a540:	2200      	movs	r2, #0
    a542:	721a      	strb	r2, [r3, #8]
    a544:	2334      	movs	r3, #52	; 0x34
    a546:	18fb      	adds	r3, r7, r3
    a548:	2201      	movs	r2, #1
    a54a:	725a      	strb	r2, [r3, #9]
    a54c:	2334      	movs	r3, #52	; 0x34
    a54e:	18fb      	adds	r3, r7, r3
    a550:	0019      	movs	r1, r3
    a552:	2005      	movs	r0, #5
    a554:	4b36      	ldr	r3, [pc, #216]	; (a630 <system_clock_init+0x2d8>)
    a556:	4798      	blx	r3
    a558:	2005      	movs	r0, #5
    a55a:	4b36      	ldr	r3, [pc, #216]	; (a634 <system_clock_init+0x2dc>)
    a55c:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    a55e:	230c      	movs	r3, #12
    a560:	18fb      	adds	r3, r7, r3
    a562:	0018      	movs	r0, r3
    a564:	4b34      	ldr	r3, [pc, #208]	; (a638 <system_clock_init+0x2e0>)
    a566:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    a568:	230c      	movs	r3, #12
    a56a:	18fb      	adds	r3, r7, r3
    a56c:	2201      	movs	r2, #1
    a56e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    a570:	230c      	movs	r3, #12
    a572:	18fb      	adds	r3, r7, r3
    a574:	0019      	movs	r1, r3
    a576:	2000      	movs	r0, #0
    a578:	4b30      	ldr	r3, [pc, #192]	; (a63c <system_clock_init+0x2e4>)
    a57a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    a57c:	2000      	movs	r0, #0
    a57e:	4b30      	ldr	r3, [pc, #192]	; (a640 <system_clock_init+0x2e8>)
    a580:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    a582:	2007      	movs	r0, #7
    a584:	4b20      	ldr	r3, [pc, #128]	; (a608 <system_clock_init+0x2b0>)
    a586:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    a588:	46c0      	nop			; (mov r8, r8)
    a58a:	2007      	movs	r0, #7
    a58c:	4b1f      	ldr	r3, [pc, #124]	; (a60c <system_clock_init+0x2b4>)
    a58e:	4798      	blx	r3
    a590:	0003      	movs	r3, r0
    a592:	001a      	movs	r2, r3
    a594:	2301      	movs	r3, #1
    a596:	4053      	eors	r3, r2
    a598:	b2db      	uxtb	r3, r3
    a59a:	2b00      	cmp	r3, #0
    a59c:	d1f5      	bne.n	a58a <system_clock_init+0x232>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    a59e:	2000      	movs	r0, #0
    a5a0:	4b28      	ldr	r3, [pc, #160]	; (a644 <system_clock_init+0x2ec>)
    a5a2:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    a5a4:	2100      	movs	r1, #0
    a5a6:	2000      	movs	r0, #0
    a5a8:	4b27      	ldr	r3, [pc, #156]	; (a648 <system_clock_init+0x2f0>)
    a5aa:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    a5ac:	2100      	movs	r1, #0
    a5ae:	2001      	movs	r0, #1
    a5b0:	4b25      	ldr	r3, [pc, #148]	; (a648 <system_clock_init+0x2f0>)
    a5b2:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    a5b4:	2100      	movs	r1, #0
    a5b6:	2002      	movs	r0, #2
    a5b8:	4b23      	ldr	r3, [pc, #140]	; (a648 <system_clock_init+0x2f0>)
    a5ba:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    a5bc:	003b      	movs	r3, r7
    a5be:	0018      	movs	r0, r3
    a5c0:	4b1a      	ldr	r3, [pc, #104]	; (a62c <system_clock_init+0x2d4>)
    a5c2:	4798      	blx	r3
    a5c4:	003b      	movs	r3, r7
    a5c6:	2207      	movs	r2, #7
    a5c8:	701a      	strb	r2, [r3, #0]
    a5ca:	003b      	movs	r3, r7
    a5cc:	2201      	movs	r2, #1
    a5ce:	605a      	str	r2, [r3, #4]
    a5d0:	003b      	movs	r3, r7
    a5d2:	2200      	movs	r2, #0
    a5d4:	721a      	strb	r2, [r3, #8]
    a5d6:	003b      	movs	r3, r7
    a5d8:	2200      	movs	r2, #0
    a5da:	725a      	strb	r2, [r3, #9]
    a5dc:	003b      	movs	r3, r7
    a5de:	0019      	movs	r1, r3
    a5e0:	2000      	movs	r0, #0
    a5e2:	4b13      	ldr	r3, [pc, #76]	; (a630 <system_clock_init+0x2d8>)
    a5e4:	4798      	blx	r3
    a5e6:	2000      	movs	r0, #0
    a5e8:	4b12      	ldr	r3, [pc, #72]	; (a634 <system_clock_init+0x2dc>)
    a5ea:	4798      	blx	r3
#endif
}
    a5ec:	46c0      	nop			; (mov r8, r8)
    a5ee:	46bd      	mov	sp, r7
    a5f0:	b02a      	add	sp, #168	; 0xa8
    a5f2:	bd80      	pop	{r7, pc}
    a5f4:	40000800 	.word	0x40000800
    a5f8:	00009e39 	.word	0x00009e39
    a5fc:	0000a321 	.word	0x0000a321
    a600:	00009d05 	.word	0x00009d05
    a604:	0000a001 	.word	0x0000a001
    a608:	0000a1f1 	.word	0x0000a1f1
    a60c:	0000a29d 	.word	0x0000a29d
    a610:	00009d71 	.word	0x00009d71
    a614:	00806024 	.word	0x00806024
    a618:	000005b9 	.word	0x000005b9
    a61c:	0000a121 	.word	0x0000a121
    a620:	00009d4d 	.word	0x00009d4d
    a624:	00009f89 	.word	0x00009f89
    a628:	0000a6f1 	.word	0x0000a6f1
    a62c:	00009cbd 	.word	0x00009cbd
    a630:	0000a721 	.word	0x0000a721
    a634:	0000a845 	.word	0x0000a845
    a638:	00009ced 	.word	0x00009ced
    a63c:	0000a979 	.word	0x0000a979
    a640:	0000a9bd 	.word	0x0000a9bd
    a644:	00009dc5 	.word	0x00009dc5
    a648:	00009de5 	.word	0x00009de5

0000a64c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    a64c:	b580      	push	{r7, lr}
    a64e:	b082      	sub	sp, #8
    a650:	af00      	add	r7, sp, #0
    a652:	0002      	movs	r2, r0
    a654:	6039      	str	r1, [r7, #0]
    a656:	1dfb      	adds	r3, r7, #7
    a658:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a65a:	1dfb      	adds	r3, r7, #7
    a65c:	781b      	ldrb	r3, [r3, #0]
    a65e:	2b01      	cmp	r3, #1
    a660:	d00a      	beq.n	a678 <system_apb_clock_set_mask+0x2c>
    a662:	2b02      	cmp	r3, #2
    a664:	d00f      	beq.n	a686 <system_apb_clock_set_mask+0x3a>
    a666:	2b00      	cmp	r3, #0
    a668:	d114      	bne.n	a694 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    a66a:	4b0e      	ldr	r3, [pc, #56]	; (a6a4 <system_apb_clock_set_mask+0x58>)
    a66c:	4a0d      	ldr	r2, [pc, #52]	; (a6a4 <system_apb_clock_set_mask+0x58>)
    a66e:	6991      	ldr	r1, [r2, #24]
    a670:	683a      	ldr	r2, [r7, #0]
    a672:	430a      	orrs	r2, r1
    a674:	619a      	str	r2, [r3, #24]
			break;
    a676:	e00f      	b.n	a698 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    a678:	4b0a      	ldr	r3, [pc, #40]	; (a6a4 <system_apb_clock_set_mask+0x58>)
    a67a:	4a0a      	ldr	r2, [pc, #40]	; (a6a4 <system_apb_clock_set_mask+0x58>)
    a67c:	69d1      	ldr	r1, [r2, #28]
    a67e:	683a      	ldr	r2, [r7, #0]
    a680:	430a      	orrs	r2, r1
    a682:	61da      	str	r2, [r3, #28]
			break;
    a684:	e008      	b.n	a698 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    a686:	4b07      	ldr	r3, [pc, #28]	; (a6a4 <system_apb_clock_set_mask+0x58>)
    a688:	4a06      	ldr	r2, [pc, #24]	; (a6a4 <system_apb_clock_set_mask+0x58>)
    a68a:	6a11      	ldr	r1, [r2, #32]
    a68c:	683a      	ldr	r2, [r7, #0]
    a68e:	430a      	orrs	r2, r1
    a690:	621a      	str	r2, [r3, #32]
			break;
    a692:	e001      	b.n	a698 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    a694:	2317      	movs	r3, #23
    a696:	e000      	b.n	a69a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    a698:	2300      	movs	r3, #0
}
    a69a:	0018      	movs	r0, r3
    a69c:	46bd      	mov	sp, r7
    a69e:	b002      	add	sp, #8
    a6a0:	bd80      	pop	{r7, pc}
    a6a2:	46c0      	nop			; (mov r8, r8)
    a6a4:	40000400 	.word	0x40000400

0000a6a8 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    a6a8:	b580      	push	{r7, lr}
    a6aa:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    a6ac:	4b02      	ldr	r3, [pc, #8]	; (a6b8 <system_interrupt_enter_critical_section+0x10>)
    a6ae:	4798      	blx	r3
}
    a6b0:	46c0      	nop			; (mov r8, r8)
    a6b2:	46bd      	mov	sp, r7
    a6b4:	bd80      	pop	{r7, pc}
    a6b6:	46c0      	nop			; (mov r8, r8)
    a6b8:	000072fd 	.word	0x000072fd

0000a6bc <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    a6bc:	b580      	push	{r7, lr}
    a6be:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    a6c0:	4b02      	ldr	r3, [pc, #8]	; (a6cc <system_interrupt_leave_critical_section+0x10>)
    a6c2:	4798      	blx	r3
}
    a6c4:	46c0      	nop			; (mov r8, r8)
    a6c6:	46bd      	mov	sp, r7
    a6c8:	bd80      	pop	{r7, pc}
    a6ca:	46c0      	nop			; (mov r8, r8)
    a6cc:	00007351 	.word	0x00007351

0000a6d0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    a6d0:	b580      	push	{r7, lr}
    a6d2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    a6d4:	4b05      	ldr	r3, [pc, #20]	; (a6ec <system_gclk_is_syncing+0x1c>)
    a6d6:	785b      	ldrb	r3, [r3, #1]
    a6d8:	b2db      	uxtb	r3, r3
    a6da:	b25b      	sxtb	r3, r3
    a6dc:	2b00      	cmp	r3, #0
    a6de:	da01      	bge.n	a6e4 <system_gclk_is_syncing+0x14>
		return true;
    a6e0:	2301      	movs	r3, #1
    a6e2:	e000      	b.n	a6e6 <system_gclk_is_syncing+0x16>
	}

	return false;
    a6e4:	2300      	movs	r3, #0
}
    a6e6:	0018      	movs	r0, r3
    a6e8:	46bd      	mov	sp, r7
    a6ea:	bd80      	pop	{r7, pc}
    a6ec:	40000c00 	.word	0x40000c00

0000a6f0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    a6f0:	b580      	push	{r7, lr}
    a6f2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    a6f4:	2108      	movs	r1, #8
    a6f6:	2000      	movs	r0, #0
    a6f8:	4b07      	ldr	r3, [pc, #28]	; (a718 <system_gclk_init+0x28>)
    a6fa:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    a6fc:	4b07      	ldr	r3, [pc, #28]	; (a71c <system_gclk_init+0x2c>)
    a6fe:	2201      	movs	r2, #1
    a700:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    a702:	46c0      	nop			; (mov r8, r8)
    a704:	4b05      	ldr	r3, [pc, #20]	; (a71c <system_gclk_init+0x2c>)
    a706:	781b      	ldrb	r3, [r3, #0]
    a708:	b2db      	uxtb	r3, r3
    a70a:	001a      	movs	r2, r3
    a70c:	2301      	movs	r3, #1
    a70e:	4013      	ands	r3, r2
    a710:	d1f8      	bne.n	a704 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    a712:	46c0      	nop			; (mov r8, r8)
    a714:	46bd      	mov	sp, r7
    a716:	bd80      	pop	{r7, pc}
    a718:	0000a64d 	.word	0x0000a64d
    a71c:	40000c00 	.word	0x40000c00

0000a720 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    a720:	b580      	push	{r7, lr}
    a722:	b086      	sub	sp, #24
    a724:	af00      	add	r7, sp, #0
    a726:	0002      	movs	r2, r0
    a728:	6039      	str	r1, [r7, #0]
    a72a:	1dfb      	adds	r3, r7, #7
    a72c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    a72e:	1dfb      	adds	r3, r7, #7
    a730:	781b      	ldrb	r3, [r3, #0]
    a732:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    a734:	1dfb      	adds	r3, r7, #7
    a736:	781b      	ldrb	r3, [r3, #0]
    a738:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    a73a:	683b      	ldr	r3, [r7, #0]
    a73c:	781b      	ldrb	r3, [r3, #0]
    a73e:	021b      	lsls	r3, r3, #8
    a740:	001a      	movs	r2, r3
    a742:	697b      	ldr	r3, [r7, #20]
    a744:	4313      	orrs	r3, r2
    a746:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    a748:	683b      	ldr	r3, [r7, #0]
    a74a:	785b      	ldrb	r3, [r3, #1]
    a74c:	2b00      	cmp	r3, #0
    a74e:	d004      	beq.n	a75a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    a750:	697b      	ldr	r3, [r7, #20]
    a752:	2280      	movs	r2, #128	; 0x80
    a754:	02d2      	lsls	r2, r2, #11
    a756:	4313      	orrs	r3, r2
    a758:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    a75a:	683b      	ldr	r3, [r7, #0]
    a75c:	7a5b      	ldrb	r3, [r3, #9]
    a75e:	2b00      	cmp	r3, #0
    a760:	d004      	beq.n	a76c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    a762:	697b      	ldr	r3, [r7, #20]
    a764:	2280      	movs	r2, #128	; 0x80
    a766:	0312      	lsls	r2, r2, #12
    a768:	4313      	orrs	r3, r2
    a76a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    a76c:	683b      	ldr	r3, [r7, #0]
    a76e:	685b      	ldr	r3, [r3, #4]
    a770:	2b01      	cmp	r3, #1
    a772:	d92c      	bls.n	a7ce <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    a774:	683b      	ldr	r3, [r7, #0]
    a776:	685a      	ldr	r2, [r3, #4]
    a778:	683b      	ldr	r3, [r7, #0]
    a77a:	685b      	ldr	r3, [r3, #4]
    a77c:	3b01      	subs	r3, #1
    a77e:	4013      	ands	r3, r2
    a780:	d11a      	bne.n	a7b8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    a782:	2300      	movs	r3, #0
    a784:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    a786:	2302      	movs	r3, #2
    a788:	60bb      	str	r3, [r7, #8]
    a78a:	e005      	b.n	a798 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    a78c:	68fb      	ldr	r3, [r7, #12]
    a78e:	3301      	adds	r3, #1
    a790:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    a792:	68bb      	ldr	r3, [r7, #8]
    a794:	005b      	lsls	r3, r3, #1
    a796:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    a798:	683b      	ldr	r3, [r7, #0]
    a79a:	685a      	ldr	r2, [r3, #4]
    a79c:	68bb      	ldr	r3, [r7, #8]
    a79e:	429a      	cmp	r2, r3
    a7a0:	d8f4      	bhi.n	a78c <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    a7a2:	68fb      	ldr	r3, [r7, #12]
    a7a4:	021b      	lsls	r3, r3, #8
    a7a6:	693a      	ldr	r2, [r7, #16]
    a7a8:	4313      	orrs	r3, r2
    a7aa:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    a7ac:	697b      	ldr	r3, [r7, #20]
    a7ae:	2280      	movs	r2, #128	; 0x80
    a7b0:	0352      	lsls	r2, r2, #13
    a7b2:	4313      	orrs	r3, r2
    a7b4:	617b      	str	r3, [r7, #20]
    a7b6:	e00a      	b.n	a7ce <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    a7b8:	683b      	ldr	r3, [r7, #0]
    a7ba:	685b      	ldr	r3, [r3, #4]
    a7bc:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    a7be:	693a      	ldr	r2, [r7, #16]
    a7c0:	4313      	orrs	r3, r2
    a7c2:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    a7c4:	697b      	ldr	r3, [r7, #20]
    a7c6:	2280      	movs	r2, #128	; 0x80
    a7c8:	0292      	lsls	r2, r2, #10
    a7ca:	4313      	orrs	r3, r2
    a7cc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    a7ce:	683b      	ldr	r3, [r7, #0]
    a7d0:	7a1b      	ldrb	r3, [r3, #8]
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	d004      	beq.n	a7e0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    a7d6:	697b      	ldr	r3, [r7, #20]
    a7d8:	2280      	movs	r2, #128	; 0x80
    a7da:	0392      	lsls	r2, r2, #14
    a7dc:	4313      	orrs	r3, r2
    a7de:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    a7e0:	46c0      	nop			; (mov r8, r8)
    a7e2:	4b13      	ldr	r3, [pc, #76]	; (a830 <system_gclk_gen_set_config+0x110>)
    a7e4:	4798      	blx	r3
    a7e6:	1e03      	subs	r3, r0, #0
    a7e8:	d1fb      	bne.n	a7e2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    a7ea:	4b12      	ldr	r3, [pc, #72]	; (a834 <system_gclk_gen_set_config+0x114>)
    a7ec:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    a7ee:	4a12      	ldr	r2, [pc, #72]	; (a838 <system_gclk_gen_set_config+0x118>)
    a7f0:	1dfb      	adds	r3, r7, #7
    a7f2:	781b      	ldrb	r3, [r3, #0]
    a7f4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    a7f6:	46c0      	nop			; (mov r8, r8)
    a7f8:	4b0d      	ldr	r3, [pc, #52]	; (a830 <system_gclk_gen_set_config+0x110>)
    a7fa:	4798      	blx	r3
    a7fc:	1e03      	subs	r3, r0, #0
    a7fe:	d1fb      	bne.n	a7f8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    a800:	4b0e      	ldr	r3, [pc, #56]	; (a83c <system_gclk_gen_set_config+0x11c>)
    a802:	693a      	ldr	r2, [r7, #16]
    a804:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    a806:	46c0      	nop			; (mov r8, r8)
    a808:	4b09      	ldr	r3, [pc, #36]	; (a830 <system_gclk_gen_set_config+0x110>)
    a80a:	4798      	blx	r3
    a80c:	1e03      	subs	r3, r0, #0
    a80e:	d1fb      	bne.n	a808 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    a810:	4b0a      	ldr	r3, [pc, #40]	; (a83c <system_gclk_gen_set_config+0x11c>)
    a812:	4a0a      	ldr	r2, [pc, #40]	; (a83c <system_gclk_gen_set_config+0x11c>)
    a814:	6851      	ldr	r1, [r2, #4]
    a816:	2280      	movs	r2, #128	; 0x80
    a818:	0252      	lsls	r2, r2, #9
    a81a:	4011      	ands	r1, r2
    a81c:	697a      	ldr	r2, [r7, #20]
    a81e:	430a      	orrs	r2, r1
    a820:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    a822:	4b07      	ldr	r3, [pc, #28]	; (a840 <system_gclk_gen_set_config+0x120>)
    a824:	4798      	blx	r3
}
    a826:	46c0      	nop			; (mov r8, r8)
    a828:	46bd      	mov	sp, r7
    a82a:	b006      	add	sp, #24
    a82c:	bd80      	pop	{r7, pc}
    a82e:	46c0      	nop			; (mov r8, r8)
    a830:	0000a6d1 	.word	0x0000a6d1
    a834:	0000a6a9 	.word	0x0000a6a9
    a838:	40000c08 	.word	0x40000c08
    a83c:	40000c00 	.word	0x40000c00
    a840:	0000a6bd 	.word	0x0000a6bd

0000a844 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    a844:	b580      	push	{r7, lr}
    a846:	b082      	sub	sp, #8
    a848:	af00      	add	r7, sp, #0
    a84a:	0002      	movs	r2, r0
    a84c:	1dfb      	adds	r3, r7, #7
    a84e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    a850:	46c0      	nop			; (mov r8, r8)
    a852:	4b0e      	ldr	r3, [pc, #56]	; (a88c <system_gclk_gen_enable+0x48>)
    a854:	4798      	blx	r3
    a856:	1e03      	subs	r3, r0, #0
    a858:	d1fb      	bne.n	a852 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    a85a:	4b0d      	ldr	r3, [pc, #52]	; (a890 <system_gclk_gen_enable+0x4c>)
    a85c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a85e:	4a0d      	ldr	r2, [pc, #52]	; (a894 <system_gclk_gen_enable+0x50>)
    a860:	1dfb      	adds	r3, r7, #7
    a862:	781b      	ldrb	r3, [r3, #0]
    a864:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    a866:	46c0      	nop			; (mov r8, r8)
    a868:	4b08      	ldr	r3, [pc, #32]	; (a88c <system_gclk_gen_enable+0x48>)
    a86a:	4798      	blx	r3
    a86c:	1e03      	subs	r3, r0, #0
    a86e:	d1fb      	bne.n	a868 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    a870:	4b09      	ldr	r3, [pc, #36]	; (a898 <system_gclk_gen_enable+0x54>)
    a872:	4a09      	ldr	r2, [pc, #36]	; (a898 <system_gclk_gen_enable+0x54>)
    a874:	6852      	ldr	r2, [r2, #4]
    a876:	2180      	movs	r1, #128	; 0x80
    a878:	0249      	lsls	r1, r1, #9
    a87a:	430a      	orrs	r2, r1
    a87c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    a87e:	4b07      	ldr	r3, [pc, #28]	; (a89c <system_gclk_gen_enable+0x58>)
    a880:	4798      	blx	r3
}
    a882:	46c0      	nop			; (mov r8, r8)
    a884:	46bd      	mov	sp, r7
    a886:	b002      	add	sp, #8
    a888:	bd80      	pop	{r7, pc}
    a88a:	46c0      	nop			; (mov r8, r8)
    a88c:	0000a6d1 	.word	0x0000a6d1
    a890:	0000a6a9 	.word	0x0000a6a9
    a894:	40000c04 	.word	0x40000c04
    a898:	40000c00 	.word	0x40000c00
    a89c:	0000a6bd 	.word	0x0000a6bd

0000a8a0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    a8a0:	b580      	push	{r7, lr}
    a8a2:	b086      	sub	sp, #24
    a8a4:	af00      	add	r7, sp, #0
    a8a6:	0002      	movs	r2, r0
    a8a8:	1dfb      	adds	r3, r7, #7
    a8aa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    a8ac:	46c0      	nop			; (mov r8, r8)
    a8ae:	4b2a      	ldr	r3, [pc, #168]	; (a958 <system_gclk_gen_get_hz+0xb8>)
    a8b0:	4798      	blx	r3
    a8b2:	1e03      	subs	r3, r0, #0
    a8b4:	d1fb      	bne.n	a8ae <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    a8b6:	4b29      	ldr	r3, [pc, #164]	; (a95c <system_gclk_gen_get_hz+0xbc>)
    a8b8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a8ba:	4a29      	ldr	r2, [pc, #164]	; (a960 <system_gclk_gen_get_hz+0xc0>)
    a8bc:	1dfb      	adds	r3, r7, #7
    a8be:	781b      	ldrb	r3, [r3, #0]
    a8c0:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    a8c2:	46c0      	nop			; (mov r8, r8)
    a8c4:	4b24      	ldr	r3, [pc, #144]	; (a958 <system_gclk_gen_get_hz+0xb8>)
    a8c6:	4798      	blx	r3
    a8c8:	1e03      	subs	r3, r0, #0
    a8ca:	d1fb      	bne.n	a8c4 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    a8cc:	4b25      	ldr	r3, [pc, #148]	; (a964 <system_gclk_gen_get_hz+0xc4>)
    a8ce:	685b      	ldr	r3, [r3, #4]
    a8d0:	04db      	lsls	r3, r3, #19
    a8d2:	0edb      	lsrs	r3, r3, #27
    a8d4:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    a8d6:	0018      	movs	r0, r3
    a8d8:	4b23      	ldr	r3, [pc, #140]	; (a968 <system_gclk_gen_get_hz+0xc8>)
    a8da:	4798      	blx	r3
    a8dc:	0003      	movs	r3, r0
    a8de:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    a8e0:	4a1f      	ldr	r2, [pc, #124]	; (a960 <system_gclk_gen_get_hz+0xc0>)
    a8e2:	1dfb      	adds	r3, r7, #7
    a8e4:	781b      	ldrb	r3, [r3, #0]
    a8e6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    a8e8:	4b1e      	ldr	r3, [pc, #120]	; (a964 <system_gclk_gen_get_hz+0xc4>)
    a8ea:	685b      	ldr	r3, [r3, #4]
    a8ec:	02db      	lsls	r3, r3, #11
    a8ee:	0fdb      	lsrs	r3, r3, #31
    a8f0:	b2da      	uxtb	r2, r3
    a8f2:	2313      	movs	r3, #19
    a8f4:	18fb      	adds	r3, r7, r3
    a8f6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    a8f8:	4a1c      	ldr	r2, [pc, #112]	; (a96c <system_gclk_gen_get_hz+0xcc>)
    a8fa:	1dfb      	adds	r3, r7, #7
    a8fc:	781b      	ldrb	r3, [r3, #0]
    a8fe:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    a900:	46c0      	nop			; (mov r8, r8)
    a902:	4b15      	ldr	r3, [pc, #84]	; (a958 <system_gclk_gen_get_hz+0xb8>)
    a904:	4798      	blx	r3
    a906:	1e03      	subs	r3, r0, #0
    a908:	d1fb      	bne.n	a902 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    a90a:	4b16      	ldr	r3, [pc, #88]	; (a964 <system_gclk_gen_get_hz+0xc4>)
    a90c:	689b      	ldr	r3, [r3, #8]
    a90e:	021b      	lsls	r3, r3, #8
    a910:	0c1b      	lsrs	r3, r3, #16
    a912:	b29b      	uxth	r3, r3
    a914:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    a916:	4b16      	ldr	r3, [pc, #88]	; (a970 <system_gclk_gen_get_hz+0xd0>)
    a918:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    a91a:	2313      	movs	r3, #19
    a91c:	18fb      	adds	r3, r7, r3
    a91e:	781b      	ldrb	r3, [r3, #0]
    a920:	2b00      	cmp	r3, #0
    a922:	d109      	bne.n	a938 <system_gclk_gen_get_hz+0x98>
    a924:	68fb      	ldr	r3, [r7, #12]
    a926:	2b01      	cmp	r3, #1
    a928:	d906      	bls.n	a938 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    a92a:	4b12      	ldr	r3, [pc, #72]	; (a974 <system_gclk_gen_get_hz+0xd4>)
    a92c:	68f9      	ldr	r1, [r7, #12]
    a92e:	6978      	ldr	r0, [r7, #20]
    a930:	4798      	blx	r3
    a932:	0003      	movs	r3, r0
    a934:	617b      	str	r3, [r7, #20]
    a936:	e00a      	b.n	a94e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    a938:	2313      	movs	r3, #19
    a93a:	18fb      	adds	r3, r7, r3
    a93c:	781b      	ldrb	r3, [r3, #0]
    a93e:	2b00      	cmp	r3, #0
    a940:	d005      	beq.n	a94e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    a942:	68fb      	ldr	r3, [r7, #12]
    a944:	3301      	adds	r3, #1
    a946:	697a      	ldr	r2, [r7, #20]
    a948:	40da      	lsrs	r2, r3
    a94a:	0013      	movs	r3, r2
    a94c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    a94e:	697b      	ldr	r3, [r7, #20]
}
    a950:	0018      	movs	r0, r3
    a952:	46bd      	mov	sp, r7
    a954:	b006      	add	sp, #24
    a956:	bd80      	pop	{r7, pc}
    a958:	0000a6d1 	.word	0x0000a6d1
    a95c:	0000a6a9 	.word	0x0000a6a9
    a960:	40000c04 	.word	0x40000c04
    a964:	40000c00 	.word	0x40000c00
    a968:	00009ecd 	.word	0x00009ecd
    a96c:	40000c08 	.word	0x40000c08
    a970:	0000a6bd 	.word	0x0000a6bd
    a974:	0000ef99 	.word	0x0000ef99

0000a978 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    a978:	b580      	push	{r7, lr}
    a97a:	b084      	sub	sp, #16
    a97c:	af00      	add	r7, sp, #0
    a97e:	0002      	movs	r2, r0
    a980:	6039      	str	r1, [r7, #0]
    a982:	1dfb      	adds	r3, r7, #7
    a984:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    a986:	1dfb      	adds	r3, r7, #7
    a988:	781b      	ldrb	r3, [r3, #0]
    a98a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    a98c:	683b      	ldr	r3, [r7, #0]
    a98e:	781b      	ldrb	r3, [r3, #0]
    a990:	021b      	lsls	r3, r3, #8
    a992:	001a      	movs	r2, r3
    a994:	68fb      	ldr	r3, [r7, #12]
    a996:	4313      	orrs	r3, r2
    a998:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    a99a:	1dfb      	adds	r3, r7, #7
    a99c:	781b      	ldrb	r3, [r3, #0]
    a99e:	0018      	movs	r0, r3
    a9a0:	4b04      	ldr	r3, [pc, #16]	; (a9b4 <system_gclk_chan_set_config+0x3c>)
    a9a2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    a9a4:	4b04      	ldr	r3, [pc, #16]	; (a9b8 <system_gclk_chan_set_config+0x40>)
    a9a6:	68fa      	ldr	r2, [r7, #12]
    a9a8:	b292      	uxth	r2, r2
    a9aa:	805a      	strh	r2, [r3, #2]
}
    a9ac:	46c0      	nop			; (mov r8, r8)
    a9ae:	46bd      	mov	sp, r7
    a9b0:	b004      	add	sp, #16
    a9b2:	bd80      	pop	{r7, pc}
    a9b4:	0000aa05 	.word	0x0000aa05
    a9b8:	40000c00 	.word	0x40000c00

0000a9bc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    a9bc:	b580      	push	{r7, lr}
    a9be:	b082      	sub	sp, #8
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	0002      	movs	r2, r0
    a9c4:	1dfb      	adds	r3, r7, #7
    a9c6:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    a9c8:	4b0a      	ldr	r3, [pc, #40]	; (a9f4 <system_gclk_chan_enable+0x38>)
    a9ca:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    a9cc:	4a0a      	ldr	r2, [pc, #40]	; (a9f8 <system_gclk_chan_enable+0x3c>)
    a9ce:	1dfb      	adds	r3, r7, #7
    a9d0:	781b      	ldrb	r3, [r3, #0]
    a9d2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    a9d4:	4909      	ldr	r1, [pc, #36]	; (a9fc <system_gclk_chan_enable+0x40>)
    a9d6:	4b09      	ldr	r3, [pc, #36]	; (a9fc <system_gclk_chan_enable+0x40>)
    a9d8:	885b      	ldrh	r3, [r3, #2]
    a9da:	b29b      	uxth	r3, r3
    a9dc:	2280      	movs	r2, #128	; 0x80
    a9de:	01d2      	lsls	r2, r2, #7
    a9e0:	4313      	orrs	r3, r2
    a9e2:	b29b      	uxth	r3, r3
    a9e4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    a9e6:	4b06      	ldr	r3, [pc, #24]	; (aa00 <system_gclk_chan_enable+0x44>)
    a9e8:	4798      	blx	r3
}
    a9ea:	46c0      	nop			; (mov r8, r8)
    a9ec:	46bd      	mov	sp, r7
    a9ee:	b002      	add	sp, #8
    a9f0:	bd80      	pop	{r7, pc}
    a9f2:	46c0      	nop			; (mov r8, r8)
    a9f4:	0000a6a9 	.word	0x0000a6a9
    a9f8:	40000c02 	.word	0x40000c02
    a9fc:	40000c00 	.word	0x40000c00
    aa00:	0000a6bd 	.word	0x0000a6bd

0000aa04 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    aa04:	b580      	push	{r7, lr}
    aa06:	b084      	sub	sp, #16
    aa08:	af00      	add	r7, sp, #0
    aa0a:	0002      	movs	r2, r0
    aa0c:	1dfb      	adds	r3, r7, #7
    aa0e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    aa10:	4b1c      	ldr	r3, [pc, #112]	; (aa84 <system_gclk_chan_disable+0x80>)
    aa12:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    aa14:	4a1c      	ldr	r2, [pc, #112]	; (aa88 <system_gclk_chan_disable+0x84>)
    aa16:	1dfb      	adds	r3, r7, #7
    aa18:	781b      	ldrb	r3, [r3, #0]
    aa1a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    aa1c:	4b1b      	ldr	r3, [pc, #108]	; (aa8c <system_gclk_chan_disable+0x88>)
    aa1e:	885b      	ldrh	r3, [r3, #2]
    aa20:	051b      	lsls	r3, r3, #20
    aa22:	0f1b      	lsrs	r3, r3, #28
    aa24:	b2db      	uxtb	r3, r3
    aa26:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    aa28:	4a18      	ldr	r2, [pc, #96]	; (aa8c <system_gclk_chan_disable+0x88>)
    aa2a:	8853      	ldrh	r3, [r2, #2]
    aa2c:	4918      	ldr	r1, [pc, #96]	; (aa90 <system_gclk_chan_disable+0x8c>)
    aa2e:	400b      	ands	r3, r1
    aa30:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    aa32:	4a16      	ldr	r2, [pc, #88]	; (aa8c <system_gclk_chan_disable+0x88>)
    aa34:	4b15      	ldr	r3, [pc, #84]	; (aa8c <system_gclk_chan_disable+0x88>)
    aa36:	885b      	ldrh	r3, [r3, #2]
    aa38:	b29b      	uxth	r3, r3
    aa3a:	4916      	ldr	r1, [pc, #88]	; (aa94 <system_gclk_chan_disable+0x90>)
    aa3c:	400b      	ands	r3, r1
    aa3e:	b29b      	uxth	r3, r3
    aa40:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    aa42:	46c0      	nop			; (mov r8, r8)
    aa44:	4b11      	ldr	r3, [pc, #68]	; (aa8c <system_gclk_chan_disable+0x88>)
    aa46:	885b      	ldrh	r3, [r3, #2]
    aa48:	b29b      	uxth	r3, r3
    aa4a:	001a      	movs	r2, r3
    aa4c:	2380      	movs	r3, #128	; 0x80
    aa4e:	01db      	lsls	r3, r3, #7
    aa50:	4013      	ands	r3, r2
    aa52:	d1f7      	bne.n	aa44 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    aa54:	4a0d      	ldr	r2, [pc, #52]	; (aa8c <system_gclk_chan_disable+0x88>)
    aa56:	68fb      	ldr	r3, [r7, #12]
    aa58:	b2db      	uxtb	r3, r3
    aa5a:	1c19      	adds	r1, r3, #0
    aa5c:	230f      	movs	r3, #15
    aa5e:	400b      	ands	r3, r1
    aa60:	b2d9      	uxtb	r1, r3
    aa62:	8853      	ldrh	r3, [r2, #2]
    aa64:	1c08      	adds	r0, r1, #0
    aa66:	210f      	movs	r1, #15
    aa68:	4001      	ands	r1, r0
    aa6a:	0208      	lsls	r0, r1, #8
    aa6c:	4908      	ldr	r1, [pc, #32]	; (aa90 <system_gclk_chan_disable+0x8c>)
    aa6e:	400b      	ands	r3, r1
    aa70:	1c19      	adds	r1, r3, #0
    aa72:	1c03      	adds	r3, r0, #0
    aa74:	430b      	orrs	r3, r1
    aa76:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    aa78:	4b07      	ldr	r3, [pc, #28]	; (aa98 <system_gclk_chan_disable+0x94>)
    aa7a:	4798      	blx	r3
}
    aa7c:	46c0      	nop			; (mov r8, r8)
    aa7e:	46bd      	mov	sp, r7
    aa80:	b004      	add	sp, #16
    aa82:	bd80      	pop	{r7, pc}
    aa84:	0000a6a9 	.word	0x0000a6a9
    aa88:	40000c02 	.word	0x40000c02
    aa8c:	40000c00 	.word	0x40000c00
    aa90:	fffff0ff 	.word	0xfffff0ff
    aa94:	ffffbfff 	.word	0xffffbfff
    aa98:	0000a6bd 	.word	0x0000a6bd

0000aa9c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    aa9c:	b580      	push	{r7, lr}
    aa9e:	b084      	sub	sp, #16
    aaa0:	af00      	add	r7, sp, #0
    aaa2:	0002      	movs	r2, r0
    aaa4:	1dfb      	adds	r3, r7, #7
    aaa6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    aaa8:	4b0d      	ldr	r3, [pc, #52]	; (aae0 <system_gclk_chan_get_hz+0x44>)
    aaaa:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    aaac:	4a0d      	ldr	r2, [pc, #52]	; (aae4 <system_gclk_chan_get_hz+0x48>)
    aaae:	1dfb      	adds	r3, r7, #7
    aab0:	781b      	ldrb	r3, [r3, #0]
    aab2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    aab4:	4b0c      	ldr	r3, [pc, #48]	; (aae8 <system_gclk_chan_get_hz+0x4c>)
    aab6:	885b      	ldrh	r3, [r3, #2]
    aab8:	051b      	lsls	r3, r3, #20
    aaba:	0f1b      	lsrs	r3, r3, #28
    aabc:	b2da      	uxtb	r2, r3
    aabe:	230f      	movs	r3, #15
    aac0:	18fb      	adds	r3, r7, r3
    aac2:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    aac4:	4b09      	ldr	r3, [pc, #36]	; (aaec <system_gclk_chan_get_hz+0x50>)
    aac6:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    aac8:	230f      	movs	r3, #15
    aaca:	18fb      	adds	r3, r7, r3
    aacc:	781b      	ldrb	r3, [r3, #0]
    aace:	0018      	movs	r0, r3
    aad0:	4b07      	ldr	r3, [pc, #28]	; (aaf0 <system_gclk_chan_get_hz+0x54>)
    aad2:	4798      	blx	r3
    aad4:	0003      	movs	r3, r0
}
    aad6:	0018      	movs	r0, r3
    aad8:	46bd      	mov	sp, r7
    aada:	b004      	add	sp, #16
    aadc:	bd80      	pop	{r7, pc}
    aade:	46c0      	nop			; (mov r8, r8)
    aae0:	0000a6a9 	.word	0x0000a6a9
    aae4:	40000c02 	.word	0x40000c02
    aae8:	40000c00 	.word	0x40000c00
    aaec:	0000a6bd 	.word	0x0000a6bd
    aaf0:	0000a8a1 	.word	0x0000a8a1

0000aaf4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    aaf4:	b580      	push	{r7, lr}
    aaf6:	b084      	sub	sp, #16
    aaf8:	af00      	add	r7, sp, #0
    aafa:	0002      	movs	r2, r0
    aafc:	1dfb      	adds	r3, r7, #7
    aafe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    ab00:	230f      	movs	r3, #15
    ab02:	18fb      	adds	r3, r7, r3
    ab04:	1dfa      	adds	r2, r7, #7
    ab06:	7812      	ldrb	r2, [r2, #0]
    ab08:	09d2      	lsrs	r2, r2, #7
    ab0a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    ab0c:	230e      	movs	r3, #14
    ab0e:	18fb      	adds	r3, r7, r3
    ab10:	1dfa      	adds	r2, r7, #7
    ab12:	7812      	ldrb	r2, [r2, #0]
    ab14:	0952      	lsrs	r2, r2, #5
    ab16:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    ab18:	4b0d      	ldr	r3, [pc, #52]	; (ab50 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    ab1a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    ab1c:	230f      	movs	r3, #15
    ab1e:	18fb      	adds	r3, r7, r3
    ab20:	781b      	ldrb	r3, [r3, #0]
    ab22:	2b00      	cmp	r3, #0
    ab24:	d10f      	bne.n	ab46 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    ab26:	230f      	movs	r3, #15
    ab28:	18fb      	adds	r3, r7, r3
    ab2a:	781b      	ldrb	r3, [r3, #0]
    ab2c:	009b      	lsls	r3, r3, #2
    ab2e:	2210      	movs	r2, #16
    ab30:	4694      	mov	ip, r2
    ab32:	44bc      	add	ip, r7
    ab34:	4463      	add	r3, ip
    ab36:	3b08      	subs	r3, #8
    ab38:	681a      	ldr	r2, [r3, #0]
    ab3a:	230e      	movs	r3, #14
    ab3c:	18fb      	adds	r3, r7, r3
    ab3e:	781b      	ldrb	r3, [r3, #0]
    ab40:	01db      	lsls	r3, r3, #7
    ab42:	18d3      	adds	r3, r2, r3
    ab44:	e000      	b.n	ab48 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    ab46:	2300      	movs	r3, #0
	}
}
    ab48:	0018      	movs	r0, r3
    ab4a:	46bd      	mov	sp, r7
    ab4c:	b004      	add	sp, #16
    ab4e:	bd80      	pop	{r7, pc}
    ab50:	41004400 	.word	0x41004400

0000ab54 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    ab54:	b580      	push	{r7, lr}
    ab56:	b088      	sub	sp, #32
    ab58:	af00      	add	r7, sp, #0
    ab5a:	60f8      	str	r0, [r7, #12]
    ab5c:	60b9      	str	r1, [r7, #8]
    ab5e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    ab60:	2300      	movs	r3, #0
    ab62:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    ab64:	687b      	ldr	r3, [r7, #4]
    ab66:	78db      	ldrb	r3, [r3, #3]
    ab68:	2201      	movs	r2, #1
    ab6a:	4053      	eors	r3, r2
    ab6c:	b2db      	uxtb	r3, r3
    ab6e:	2b00      	cmp	r3, #0
    ab70:	d035      	beq.n	abde <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    ab72:	687b      	ldr	r3, [r7, #4]
    ab74:	781b      	ldrb	r3, [r3, #0]
    ab76:	2b80      	cmp	r3, #128	; 0x80
    ab78:	d00b      	beq.n	ab92 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    ab7a:	69fb      	ldr	r3, [r7, #28]
    ab7c:	2280      	movs	r2, #128	; 0x80
    ab7e:	0252      	lsls	r2, r2, #9
    ab80:	4313      	orrs	r3, r2
    ab82:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    ab84:	687b      	ldr	r3, [r7, #4]
    ab86:	781b      	ldrb	r3, [r3, #0]
    ab88:	061b      	lsls	r3, r3, #24
    ab8a:	001a      	movs	r2, r3
    ab8c:	69fb      	ldr	r3, [r7, #28]
    ab8e:	4313      	orrs	r3, r2
    ab90:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    ab92:	687b      	ldr	r3, [r7, #4]
    ab94:	785b      	ldrb	r3, [r3, #1]
    ab96:	2b00      	cmp	r3, #0
    ab98:	d003      	beq.n	aba2 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    ab9a:	687b      	ldr	r3, [r7, #4]
    ab9c:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    ab9e:	2b02      	cmp	r3, #2
    aba0:	d110      	bne.n	abc4 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    aba2:	69fb      	ldr	r3, [r7, #28]
    aba4:	2280      	movs	r2, #128	; 0x80
    aba6:	0292      	lsls	r2, r2, #10
    aba8:	4313      	orrs	r3, r2
    abaa:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    abac:	687b      	ldr	r3, [r7, #4]
    abae:	789b      	ldrb	r3, [r3, #2]
    abb0:	2b00      	cmp	r3, #0
    abb2:	d004      	beq.n	abbe <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    abb4:	69fb      	ldr	r3, [r7, #28]
    abb6:	2280      	movs	r2, #128	; 0x80
    abb8:	02d2      	lsls	r2, r2, #11
    abba:	4313      	orrs	r3, r2
    abbc:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    abbe:	68fb      	ldr	r3, [r7, #12]
    abc0:	68ba      	ldr	r2, [r7, #8]
    abc2:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	785b      	ldrb	r3, [r3, #1]
    abc8:	2b01      	cmp	r3, #1
    abca:	d003      	beq.n	abd4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    abcc:	687b      	ldr	r3, [r7, #4]
    abce:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    abd0:	2b02      	cmp	r3, #2
    abd2:	d107      	bne.n	abe4 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    abd4:	69fb      	ldr	r3, [r7, #28]
    abd6:	4a22      	ldr	r2, [pc, #136]	; (ac60 <_system_pinmux_config+0x10c>)
    abd8:	4013      	ands	r3, r2
    abda:	61fb      	str	r3, [r7, #28]
    abdc:	e002      	b.n	abe4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    abde:	68fb      	ldr	r3, [r7, #12]
    abe0:	68ba      	ldr	r2, [r7, #8]
    abe2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    abe4:	68bb      	ldr	r3, [r7, #8]
    abe6:	041b      	lsls	r3, r3, #16
    abe8:	0c1b      	lsrs	r3, r3, #16
    abea:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    abec:	68bb      	ldr	r3, [r7, #8]
    abee:	0c1b      	lsrs	r3, r3, #16
    abf0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    abf2:	69ba      	ldr	r2, [r7, #24]
    abf4:	69fb      	ldr	r3, [r7, #28]
    abf6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    abf8:	22a0      	movs	r2, #160	; 0xa0
    abfa:	05d2      	lsls	r2, r2, #23
    abfc:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    abfe:	68fb      	ldr	r3, [r7, #12]
    ac00:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ac02:	697a      	ldr	r2, [r7, #20]
    ac04:	69fb      	ldr	r3, [r7, #28]
    ac06:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    ac08:	22d0      	movs	r2, #208	; 0xd0
    ac0a:	0612      	lsls	r2, r2, #24
    ac0c:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    ac0e:	68fb      	ldr	r3, [r7, #12]
    ac10:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    ac12:	687b      	ldr	r3, [r7, #4]
    ac14:	78db      	ldrb	r3, [r3, #3]
    ac16:	2201      	movs	r2, #1
    ac18:	4053      	eors	r3, r2
    ac1a:	b2db      	uxtb	r3, r3
    ac1c:	2b00      	cmp	r3, #0
    ac1e:	d01a      	beq.n	ac56 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    ac20:	69fa      	ldr	r2, [r7, #28]
    ac22:	2380      	movs	r3, #128	; 0x80
    ac24:	02db      	lsls	r3, r3, #11
    ac26:	4013      	ands	r3, r2
    ac28:	d00a      	beq.n	ac40 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    ac2a:	687b      	ldr	r3, [r7, #4]
    ac2c:	789b      	ldrb	r3, [r3, #2]
    ac2e:	2b01      	cmp	r3, #1
    ac30:	d103      	bne.n	ac3a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    ac32:	68fb      	ldr	r3, [r7, #12]
    ac34:	68ba      	ldr	r2, [r7, #8]
    ac36:	619a      	str	r2, [r3, #24]
    ac38:	e002      	b.n	ac40 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    ac3a:	68fb      	ldr	r3, [r7, #12]
    ac3c:	68ba      	ldr	r2, [r7, #8]
    ac3e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    ac40:	687b      	ldr	r3, [r7, #4]
    ac42:	785b      	ldrb	r3, [r3, #1]
    ac44:	2b01      	cmp	r3, #1
    ac46:	d003      	beq.n	ac50 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    ac48:	687b      	ldr	r3, [r7, #4]
    ac4a:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    ac4c:	2b02      	cmp	r3, #2
    ac4e:	d102      	bne.n	ac56 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    ac50:	68fb      	ldr	r3, [r7, #12]
    ac52:	68ba      	ldr	r2, [r7, #8]
    ac54:	609a      	str	r2, [r3, #8]
		}
	}
}
    ac56:	46c0      	nop			; (mov r8, r8)
    ac58:	46bd      	mov	sp, r7
    ac5a:	b008      	add	sp, #32
    ac5c:	bd80      	pop	{r7, pc}
    ac5e:	46c0      	nop			; (mov r8, r8)
    ac60:	fffbffff 	.word	0xfffbffff

0000ac64 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    ac64:	b580      	push	{r7, lr}
    ac66:	b084      	sub	sp, #16
    ac68:	af00      	add	r7, sp, #0
    ac6a:	0002      	movs	r2, r0
    ac6c:	6039      	str	r1, [r7, #0]
    ac6e:	1dfb      	adds	r3, r7, #7
    ac70:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    ac72:	1dfb      	adds	r3, r7, #7
    ac74:	781b      	ldrb	r3, [r3, #0]
    ac76:	0018      	movs	r0, r3
    ac78:	4b0a      	ldr	r3, [pc, #40]	; (aca4 <system_pinmux_pin_set_config+0x40>)
    ac7a:	4798      	blx	r3
    ac7c:	0003      	movs	r3, r0
    ac7e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    ac80:	1dfb      	adds	r3, r7, #7
    ac82:	781b      	ldrb	r3, [r3, #0]
    ac84:	221f      	movs	r2, #31
    ac86:	4013      	ands	r3, r2
    ac88:	2201      	movs	r2, #1
    ac8a:	409a      	lsls	r2, r3
    ac8c:	0013      	movs	r3, r2
    ac8e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    ac90:	683a      	ldr	r2, [r7, #0]
    ac92:	68b9      	ldr	r1, [r7, #8]
    ac94:	68fb      	ldr	r3, [r7, #12]
    ac96:	0018      	movs	r0, r3
    ac98:	4b03      	ldr	r3, [pc, #12]	; (aca8 <system_pinmux_pin_set_config+0x44>)
    ac9a:	4798      	blx	r3
}
    ac9c:	46c0      	nop			; (mov r8, r8)
    ac9e:	46bd      	mov	sp, r7
    aca0:	b004      	add	sp, #16
    aca2:	bd80      	pop	{r7, pc}
    aca4:	0000aaf5 	.word	0x0000aaf5
    aca8:	0000ab55 	.word	0x0000ab55

0000acac <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    acac:	b580      	push	{r7, lr}
    acae:	af00      	add	r7, sp, #0
	return;
    acb0:	46c0      	nop			; (mov r8, r8)
}
    acb2:	46bd      	mov	sp, r7
    acb4:	bd80      	pop	{r7, pc}
    acb6:	46c0      	nop			; (mov r8, r8)

0000acb8 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    acb8:	b580      	push	{r7, lr}
    acba:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    acbc:	4b06      	ldr	r3, [pc, #24]	; (acd8 <system_init+0x20>)
    acbe:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    acc0:	4b06      	ldr	r3, [pc, #24]	; (acdc <system_init+0x24>)
    acc2:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    acc4:	4b06      	ldr	r3, [pc, #24]	; (ace0 <system_init+0x28>)
    acc6:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    acc8:	4b06      	ldr	r3, [pc, #24]	; (ace4 <system_init+0x2c>)
    acca:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    accc:	4b06      	ldr	r3, [pc, #24]	; (ace8 <system_init+0x30>)
    acce:	4798      	blx	r3
}
    acd0:	46c0      	nop			; (mov r8, r8)
    acd2:	46bd      	mov	sp, r7
    acd4:	bd80      	pop	{r7, pc}
    acd6:	46c0      	nop			; (mov r8, r8)
    acd8:	0000a359 	.word	0x0000a359
    acdc:	0000748d 	.word	0x0000748d
    ace0:	0000acad 	.word	0x0000acad
    ace4:	00007a41 	.word	0x00007a41
    ace8:	0000acad 	.word	0x0000acad

0000acec <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    acec:	b580      	push	{r7, lr}
    acee:	af00      	add	r7, sp, #0
    acf0:	2000      	movs	r0, #0
    acf2:	4b02      	ldr	r3, [pc, #8]	; (acfc <TCC0_Handler+0x10>)
    acf4:	4798      	blx	r3
    acf6:	46c0      	nop			; (mov r8, r8)
    acf8:	46bd      	mov	sp, r7
    acfa:	bd80      	pop	{r7, pc}
    acfc:	0000ad29 	.word	0x0000ad29

0000ad00 <TCC1_Handler>:
    ad00:	b580      	push	{r7, lr}
    ad02:	af00      	add	r7, sp, #0
    ad04:	2001      	movs	r0, #1
    ad06:	4b02      	ldr	r3, [pc, #8]	; (ad10 <TCC1_Handler+0x10>)
    ad08:	4798      	blx	r3
    ad0a:	46c0      	nop			; (mov r8, r8)
    ad0c:	46bd      	mov	sp, r7
    ad0e:	bd80      	pop	{r7, pc}
    ad10:	0000ad29 	.word	0x0000ad29

0000ad14 <TCC2_Handler>:
    ad14:	b580      	push	{r7, lr}
    ad16:	af00      	add	r7, sp, #0
    ad18:	2002      	movs	r0, #2
    ad1a:	4b02      	ldr	r3, [pc, #8]	; (ad24 <TCC2_Handler+0x10>)
    ad1c:	4798      	blx	r3
    ad1e:	46c0      	nop			; (mov r8, r8)
    ad20:	46bd      	mov	sp, r7
    ad22:	bd80      	pop	{r7, pc}
    ad24:	0000ad29 	.word	0x0000ad29

0000ad28 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    ad28:	b580      	push	{r7, lr}
    ad2a:	b086      	sub	sp, #24
    ad2c:	af00      	add	r7, sp, #0
    ad2e:	0002      	movs	r2, r0
    ad30:	1dfb      	adds	r3, r7, #7
    ad32:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    ad34:	1dfb      	adds	r3, r7, #7
    ad36:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    ad38:	4b18      	ldr	r3, [pc, #96]	; (ad9c <_tcc_interrupt_handler+0x74>)
    ad3a:	0092      	lsls	r2, r2, #2
    ad3c:	58d3      	ldr	r3, [r2, r3]
    ad3e:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    ad40:	693b      	ldr	r3, [r7, #16]
    ad42:	681b      	ldr	r3, [r3, #0]
    ad44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    ad46:	693b      	ldr	r3, [r7, #16]
    ad48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    ad4a:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    ad4c:	693b      	ldr	r3, [r7, #16]
    ad4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    ad50:	4013      	ands	r3, r2
    ad52:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ad54:	2300      	movs	r3, #0
    ad56:	617b      	str	r3, [r7, #20]
    ad58:	e019      	b.n	ad8e <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    ad5a:	4b11      	ldr	r3, [pc, #68]	; (ada0 <_tcc_interrupt_handler+0x78>)
    ad5c:	697a      	ldr	r2, [r7, #20]
    ad5e:	0092      	lsls	r2, r2, #2
    ad60:	58d3      	ldr	r3, [r2, r3]
    ad62:	68fa      	ldr	r2, [r7, #12]
    ad64:	4013      	ands	r3, r2
    ad66:	d00f      	beq.n	ad88 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    ad68:	693a      	ldr	r2, [r7, #16]
    ad6a:	697b      	ldr	r3, [r7, #20]
    ad6c:	009b      	lsls	r3, r3, #2
    ad6e:	18d3      	adds	r3, r2, r3
    ad70:	3304      	adds	r3, #4
    ad72:	681b      	ldr	r3, [r3, #0]
    ad74:	693a      	ldr	r2, [r7, #16]
    ad76:	0010      	movs	r0, r2
    ad78:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    ad7a:	693b      	ldr	r3, [r7, #16]
    ad7c:	681b      	ldr	r3, [r3, #0]
    ad7e:	4a08      	ldr	r2, [pc, #32]	; (ada0 <_tcc_interrupt_handler+0x78>)
    ad80:	6979      	ldr	r1, [r7, #20]
    ad82:	0089      	lsls	r1, r1, #2
    ad84:	588a      	ldr	r2, [r1, r2]
    ad86:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    ad88:	697b      	ldr	r3, [r7, #20]
    ad8a:	3301      	adds	r3, #1
    ad8c:	617b      	str	r3, [r7, #20]
    ad8e:	697b      	ldr	r3, [r7, #20]
    ad90:	2b0b      	cmp	r3, #11
    ad92:	dde2      	ble.n	ad5a <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    ad94:	46c0      	nop			; (mov r8, r8)
    ad96:	46bd      	mov	sp, r7
    ad98:	b006      	add	sp, #24
    ad9a:	bd80      	pop	{r7, pc}
    ad9c:	20004784 	.word	0x20004784
    ada0:	00012328 	.word	0x00012328

0000ada4 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    ada4:	b580      	push	{r7, lr}
    ada6:	b082      	sub	sp, #8
    ada8:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    adaa:	4b2f      	ldr	r3, [pc, #188]	; (ae68 <Reset_Handler+0xc4>)
    adac:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    adae:	4b2f      	ldr	r3, [pc, #188]	; (ae6c <Reset_Handler+0xc8>)
    adb0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    adb2:	687a      	ldr	r2, [r7, #4]
    adb4:	683b      	ldr	r3, [r7, #0]
    adb6:	429a      	cmp	r2, r3
    adb8:	d00c      	beq.n	add4 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    adba:	e007      	b.n	adcc <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    adbc:	683b      	ldr	r3, [r7, #0]
    adbe:	1d1a      	adds	r2, r3, #4
    adc0:	603a      	str	r2, [r7, #0]
    adc2:	687a      	ldr	r2, [r7, #4]
    adc4:	1d11      	adds	r1, r2, #4
    adc6:	6079      	str	r1, [r7, #4]
    adc8:	6812      	ldr	r2, [r2, #0]
    adca:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    adcc:	683a      	ldr	r2, [r7, #0]
    adce:	4b28      	ldr	r3, [pc, #160]	; (ae70 <Reset_Handler+0xcc>)
    add0:	429a      	cmp	r2, r3
    add2:	d3f3      	bcc.n	adbc <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    add4:	4b27      	ldr	r3, [pc, #156]	; (ae74 <Reset_Handler+0xd0>)
    add6:	603b      	str	r3, [r7, #0]
    add8:	e004      	b.n	ade4 <Reset_Handler+0x40>
                *pDest++ = 0;
    adda:	683b      	ldr	r3, [r7, #0]
    addc:	1d1a      	adds	r2, r3, #4
    adde:	603a      	str	r2, [r7, #0]
    ade0:	2200      	movs	r2, #0
    ade2:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    ade4:	683a      	ldr	r2, [r7, #0]
    ade6:	4b24      	ldr	r3, [pc, #144]	; (ae78 <Reset_Handler+0xd4>)
    ade8:	429a      	cmp	r2, r3
    adea:	d3f6      	bcc.n	adda <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    adec:	4b23      	ldr	r3, [pc, #140]	; (ae7c <Reset_Handler+0xd8>)
    adee:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    adf0:	4b23      	ldr	r3, [pc, #140]	; (ae80 <Reset_Handler+0xdc>)
    adf2:	687a      	ldr	r2, [r7, #4]
    adf4:	21ff      	movs	r1, #255	; 0xff
    adf6:	438a      	bics	r2, r1
    adf8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    adfa:	4a22      	ldr	r2, [pc, #136]	; (ae84 <Reset_Handler+0xe0>)
    adfc:	2390      	movs	r3, #144	; 0x90
    adfe:	005b      	lsls	r3, r3, #1
    ae00:	2102      	movs	r1, #2
    ae02:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    ae04:	4a20      	ldr	r2, [pc, #128]	; (ae88 <Reset_Handler+0xe4>)
    ae06:	78d3      	ldrb	r3, [r2, #3]
    ae08:	2103      	movs	r1, #3
    ae0a:	438b      	bics	r3, r1
    ae0c:	1c19      	adds	r1, r3, #0
    ae0e:	2302      	movs	r3, #2
    ae10:	430b      	orrs	r3, r1
    ae12:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    ae14:	4a1c      	ldr	r2, [pc, #112]	; (ae88 <Reset_Handler+0xe4>)
    ae16:	78d3      	ldrb	r3, [r2, #3]
    ae18:	210c      	movs	r1, #12
    ae1a:	438b      	bics	r3, r1
    ae1c:	1c19      	adds	r1, r3, #0
    ae1e:	2308      	movs	r3, #8
    ae20:	430b      	orrs	r3, r1
    ae22:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    ae24:	4a19      	ldr	r2, [pc, #100]	; (ae8c <Reset_Handler+0xe8>)
    ae26:	7b93      	ldrb	r3, [r2, #14]
    ae28:	2130      	movs	r1, #48	; 0x30
    ae2a:	438b      	bics	r3, r1
    ae2c:	1c19      	adds	r1, r3, #0
    ae2e:	2320      	movs	r3, #32
    ae30:	430b      	orrs	r3, r1
    ae32:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    ae34:	4a15      	ldr	r2, [pc, #84]	; (ae8c <Reset_Handler+0xe8>)
    ae36:	7b93      	ldrb	r3, [r2, #14]
    ae38:	210c      	movs	r1, #12
    ae3a:	438b      	bics	r3, r1
    ae3c:	1c19      	adds	r1, r3, #0
    ae3e:	2308      	movs	r3, #8
    ae40:	430b      	orrs	r3, r1
    ae42:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    ae44:	4a11      	ldr	r2, [pc, #68]	; (ae8c <Reset_Handler+0xe8>)
    ae46:	7b93      	ldrb	r3, [r2, #14]
    ae48:	2103      	movs	r1, #3
    ae4a:	438b      	bics	r3, r1
    ae4c:	1c19      	adds	r1, r3, #0
    ae4e:	2302      	movs	r3, #2
    ae50:	430b      	orrs	r3, r1
    ae52:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    ae54:	4a0e      	ldr	r2, [pc, #56]	; (ae90 <Reset_Handler+0xec>)
    ae56:	6853      	ldr	r3, [r2, #4]
    ae58:	2180      	movs	r1, #128	; 0x80
    ae5a:	430b      	orrs	r3, r1
    ae5c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    ae5e:	4b0d      	ldr	r3, [pc, #52]	; (ae94 <Reset_Handler+0xf0>)
    ae60:	4798      	blx	r3

        /* Branch to main function */
        main();
    ae62:	4b0d      	ldr	r3, [pc, #52]	; (ae98 <Reset_Handler+0xf4>)
    ae64:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    ae66:	e7fe      	b.n	ae66 <Reset_Handler+0xc2>
    ae68:	00012c2c 	.word	0x00012c2c
    ae6c:	20000000 	.word	0x20000000
    ae70:	2000009c 	.word	0x2000009c
    ae74:	2000009c 	.word	0x2000009c
    ae78:	200047d8 	.word	0x200047d8
    ae7c:	00000000 	.word	0x00000000
    ae80:	e000ed00 	.word	0xe000ed00
    ae84:	41007000 	.word	0x41007000
    ae88:	41005000 	.word	0x41005000
    ae8c:	41004800 	.word	0x41004800
    ae90:	41004000 	.word	0x41004000
    ae94:	0000fabd 	.word	0x0000fabd
    ae98:	0000dfd9 	.word	0x0000dfd9

0000ae9c <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
 uint32_t phantomISR = 9999;
void Dummy_Handler(void)
{
    ae9c:	b580      	push	{r7, lr}
    ae9e:	b082      	sub	sp, #8
    aea0:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    aea2:	f3ef 8305 	mrs	r3, IPSR
    aea6:	607b      	str	r3, [r7, #4]
  return(result);
    aea8:	687a      	ldr	r2, [r7, #4]
        while (1) {
            phantomISR = __get_IPSR();
    aeaa:	4b01      	ldr	r3, [pc, #4]	; (aeb0 <Dummy_Handler+0x14>)
    aeac:	601a      	str	r2, [r3, #0]
        }
    aeae:	e7f8      	b.n	aea2 <Dummy_Handler+0x6>
    aeb0:	2000001c 	.word	0x2000001c

0000aeb4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    aeb4:	b580      	push	{r7, lr}
    aeb6:	b086      	sub	sp, #24
    aeb8:	af00      	add	r7, sp, #0
    aeba:	60f8      	str	r0, [r7, #12]
    aebc:	60b9      	str	r1, [r7, #8]
    aebe:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    aec0:	2300      	movs	r3, #0
    aec2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    aec4:	68fb      	ldr	r3, [r7, #12]
    aec6:	2b00      	cmp	r3, #0
    aec8:	d012      	beq.n	aef0 <_read+0x3c>
		return -1;
    aeca:	2301      	movs	r3, #1
    aecc:	425b      	negs	r3, r3
    aece:	e013      	b.n	aef8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    aed0:	4b0b      	ldr	r3, [pc, #44]	; (af00 <_read+0x4c>)
    aed2:	681a      	ldr	r2, [r3, #0]
    aed4:	4b0b      	ldr	r3, [pc, #44]	; (af04 <_read+0x50>)
    aed6:	681b      	ldr	r3, [r3, #0]
    aed8:	68b9      	ldr	r1, [r7, #8]
    aeda:	0018      	movs	r0, r3
    aedc:	4790      	blx	r2
		ptr++;
    aede:	68bb      	ldr	r3, [r7, #8]
    aee0:	3301      	adds	r3, #1
    aee2:	60bb      	str	r3, [r7, #8]
		nChars++;
    aee4:	697b      	ldr	r3, [r7, #20]
    aee6:	3301      	adds	r3, #1
    aee8:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    aeea:	687b      	ldr	r3, [r7, #4]
    aeec:	3b01      	subs	r3, #1
    aeee:	607b      	str	r3, [r7, #4]
    aef0:	687b      	ldr	r3, [r7, #4]
    aef2:	2b00      	cmp	r3, #0
    aef4:	dcec      	bgt.n	aed0 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    aef6:	697b      	ldr	r3, [r7, #20]
}
    aef8:	0018      	movs	r0, r3
    aefa:	46bd      	mov	sp, r7
    aefc:	b006      	add	sp, #24
    aefe:	bd80      	pop	{r7, pc}
    af00:	20004790 	.word	0x20004790
    af04:	20004798 	.word	0x20004798

0000af08 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    af08:	b580      	push	{r7, lr}
    af0a:	b086      	sub	sp, #24
    af0c:	af00      	add	r7, sp, #0
    af0e:	60f8      	str	r0, [r7, #12]
    af10:	60b9      	str	r1, [r7, #8]
    af12:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    af14:	2300      	movs	r3, #0
    af16:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    af18:	68fb      	ldr	r3, [r7, #12]
    af1a:	2b01      	cmp	r3, #1
    af1c:	d01d      	beq.n	af5a <_write+0x52>
    af1e:	68fb      	ldr	r3, [r7, #12]
    af20:	2b02      	cmp	r3, #2
    af22:	d01a      	beq.n	af5a <_write+0x52>
    af24:	68fb      	ldr	r3, [r7, #12]
    af26:	2b03      	cmp	r3, #3
    af28:	d017      	beq.n	af5a <_write+0x52>
		return -1;
    af2a:	2301      	movs	r3, #1
    af2c:	425b      	negs	r3, r3
    af2e:	e018      	b.n	af62 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    af30:	4b0e      	ldr	r3, [pc, #56]	; (af6c <_write+0x64>)
    af32:	681a      	ldr	r2, [r3, #0]
    af34:	4b0e      	ldr	r3, [pc, #56]	; (af70 <_write+0x68>)
    af36:	6818      	ldr	r0, [r3, #0]
    af38:	68bb      	ldr	r3, [r7, #8]
    af3a:	1c59      	adds	r1, r3, #1
    af3c:	60b9      	str	r1, [r7, #8]
    af3e:	781b      	ldrb	r3, [r3, #0]
    af40:	0019      	movs	r1, r3
    af42:	4790      	blx	r2
    af44:	1e03      	subs	r3, r0, #0
    af46:	da02      	bge.n	af4e <_write+0x46>
			return -1;
    af48:	2301      	movs	r3, #1
    af4a:	425b      	negs	r3, r3
    af4c:	e009      	b.n	af62 <_write+0x5a>
		}
		++nChars;
    af4e:	697b      	ldr	r3, [r7, #20]
    af50:	3301      	adds	r3, #1
    af52:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    af54:	687b      	ldr	r3, [r7, #4]
    af56:	3b01      	subs	r3, #1
    af58:	607b      	str	r3, [r7, #4]
    af5a:	687b      	ldr	r3, [r7, #4]
    af5c:	2b00      	cmp	r3, #0
    af5e:	d1e7      	bne.n	af30 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    af60:	697b      	ldr	r3, [r7, #20]
}
    af62:	0018      	movs	r0, r3
    af64:	46bd      	mov	sp, r7
    af66:	b006      	add	sp, #24
    af68:	bd80      	pop	{r7, pc}
    af6a:	46c0      	nop			; (mov r8, r8)
    af6c:	20004794 	.word	0x20004794
    af70:	20004798 	.word	0x20004798

0000af74 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    af74:	b580      	push	{r7, lr}
    af76:	b084      	sub	sp, #16
    af78:	af00      	add	r7, sp, #0
    af7a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    af7c:	4b0a      	ldr	r3, [pc, #40]	; (afa8 <_sbrk+0x34>)
    af7e:	681b      	ldr	r3, [r3, #0]
    af80:	2b00      	cmp	r3, #0
    af82:	d102      	bne.n	af8a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    af84:	4b08      	ldr	r3, [pc, #32]	; (afa8 <_sbrk+0x34>)
    af86:	4a09      	ldr	r2, [pc, #36]	; (afac <_sbrk+0x38>)
    af88:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    af8a:	4b07      	ldr	r3, [pc, #28]	; (afa8 <_sbrk+0x34>)
    af8c:	681b      	ldr	r3, [r3, #0]
    af8e:	60fb      	str	r3, [r7, #12]

	heap += incr;
    af90:	4b05      	ldr	r3, [pc, #20]	; (afa8 <_sbrk+0x34>)
    af92:	681a      	ldr	r2, [r3, #0]
    af94:	687b      	ldr	r3, [r7, #4]
    af96:	18d2      	adds	r2, r2, r3
    af98:	4b03      	ldr	r3, [pc, #12]	; (afa8 <_sbrk+0x34>)
    af9a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    af9c:	68fb      	ldr	r3, [r7, #12]
}
    af9e:	0018      	movs	r0, r3
    afa0:	46bd      	mov	sp, r7
    afa2:	b004      	add	sp, #16
    afa4:	bd80      	pop	{r7, pc}
    afa6:	46c0      	nop			; (mov r8, r8)
    afa8:	2000012c 	.word	0x2000012c
    afac:	200067d8 	.word	0x200067d8

0000afb0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    afb0:	b580      	push	{r7, lr}
    afb2:	b082      	sub	sp, #8
    afb4:	af00      	add	r7, sp, #0
    afb6:	6078      	str	r0, [r7, #4]
	return -1;
    afb8:	2301      	movs	r3, #1
    afba:	425b      	negs	r3, r3
}
    afbc:	0018      	movs	r0, r3
    afbe:	46bd      	mov	sp, r7
    afc0:	b002      	add	sp, #8
    afc2:	bd80      	pop	{r7, pc}

0000afc4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    afc4:	b580      	push	{r7, lr}
    afc6:	b082      	sub	sp, #8
    afc8:	af00      	add	r7, sp, #0
    afca:	6078      	str	r0, [r7, #4]
    afcc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    afce:	683b      	ldr	r3, [r7, #0]
    afd0:	2280      	movs	r2, #128	; 0x80
    afd2:	0192      	lsls	r2, r2, #6
    afd4:	605a      	str	r2, [r3, #4]

	return 0;
    afd6:	2300      	movs	r3, #0
}
    afd8:	0018      	movs	r0, r3
    afda:	46bd      	mov	sp, r7
    afdc:	b002      	add	sp, #8
    afde:	bd80      	pop	{r7, pc}

0000afe0 <_isatty>:

extern int _isatty(int file)
{
    afe0:	b580      	push	{r7, lr}
    afe2:	b082      	sub	sp, #8
    afe4:	af00      	add	r7, sp, #0
    afe6:	6078      	str	r0, [r7, #4]
	return 1;
    afe8:	2301      	movs	r3, #1
}
    afea:	0018      	movs	r0, r3
    afec:	46bd      	mov	sp, r7
    afee:	b002      	add	sp, #8
    aff0:	bd80      	pop	{r7, pc}
    aff2:	46c0      	nop			; (mov r8, r8)

0000aff4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    aff4:	b580      	push	{r7, lr}
    aff6:	b084      	sub	sp, #16
    aff8:	af00      	add	r7, sp, #0
    affa:	60f8      	str	r0, [r7, #12]
    affc:	60b9      	str	r1, [r7, #8]
    affe:	607a      	str	r2, [r7, #4]
	return 0;
    b000:	2300      	movs	r3, #0
}
    b002:	0018      	movs	r0, r3
    b004:	46bd      	mov	sp, r7
    b006:	b004      	add	sp, #16
    b008:	bd80      	pop	{r7, pc}
    b00a:	46c0      	nop			; (mov r8, r8)

0000b00c <_exit>:

extern void _exit(int status)
{
    b00c:	b580      	push	{r7, lr}
    b00e:	b082      	sub	sp, #8
    b010:	af00      	add	r7, sp, #0
    b012:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    b014:	be00      	bkpt	0x0000
}
    b016:	46c0      	nop			; (mov r8, r8)
    b018:	46bd      	mov	sp, r7
    b01a:	b002      	add	sp, #8
    b01c:	bd80      	pop	{r7, pc}
    b01e:	46c0      	nop			; (mov r8, r8)

0000b020 <_kill>:

extern void _kill(int pid, int sig)
{
    b020:	b580      	push	{r7, lr}
    b022:	b082      	sub	sp, #8
    b024:	af00      	add	r7, sp, #0
    b026:	6078      	str	r0, [r7, #4]
    b028:	6039      	str	r1, [r7, #0]
	return;
    b02a:	46c0      	nop			; (mov r8, r8)
}
    b02c:	46bd      	mov	sp, r7
    b02e:	b002      	add	sp, #8
    b030:	bd80      	pop	{r7, pc}
    b032:	46c0      	nop			; (mov r8, r8)

0000b034 <_getpid>:

extern int _getpid(void)
{
    b034:	b580      	push	{r7, lr}
    b036:	af00      	add	r7, sp, #0
	return -1;
    b038:	2301      	movs	r3, #1
    b03a:	425b      	negs	r3, r3
}
    b03c:	0018      	movs	r0, r3
    b03e:	46bd      	mov	sp, r7
    b040:	bd80      	pop	{r7, pc}
    b042:	46c0      	nop			; (mov r8, r8)

0000b044 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    b044:	b580      	push	{r7, lr}
    b046:	b082      	sub	sp, #8
    b048:	af00      	add	r7, sp, #0
    b04a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    b04c:	687b      	ldr	r3, [r7, #4]
    b04e:	3308      	adds	r3, #8
    b050:	001a      	movs	r2, r3
    b052:	687b      	ldr	r3, [r7, #4]
    b054:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    b056:	687b      	ldr	r3, [r7, #4]
    b058:	2201      	movs	r2, #1
    b05a:	4252      	negs	r2, r2
    b05c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    b05e:	687b      	ldr	r3, [r7, #4]
    b060:	3308      	adds	r3, #8
    b062:	001a      	movs	r2, r3
    b064:	687b      	ldr	r3, [r7, #4]
    b066:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    b068:	687b      	ldr	r3, [r7, #4]
    b06a:	3308      	adds	r3, #8
    b06c:	001a      	movs	r2, r3
    b06e:	687b      	ldr	r3, [r7, #4]
    b070:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    b072:	687b      	ldr	r3, [r7, #4]
    b074:	2200      	movs	r2, #0
    b076:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    b078:	46c0      	nop			; (mov r8, r8)
    b07a:	46bd      	mov	sp, r7
    b07c:	b002      	add	sp, #8
    b07e:	bd80      	pop	{r7, pc}

0000b080 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    b080:	b580      	push	{r7, lr}
    b082:	b082      	sub	sp, #8
    b084:	af00      	add	r7, sp, #0
    b086:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    b088:	687b      	ldr	r3, [r7, #4]
    b08a:	2200      	movs	r2, #0
    b08c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    b08e:	46c0      	nop			; (mov r8, r8)
    b090:	46bd      	mov	sp, r7
    b092:	b002      	add	sp, #8
    b094:	bd80      	pop	{r7, pc}
    b096:	46c0      	nop			; (mov r8, r8)

0000b098 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    b098:	b580      	push	{r7, lr}
    b09a:	b084      	sub	sp, #16
    b09c:	af00      	add	r7, sp, #0
    b09e:	6078      	str	r0, [r7, #4]
    b0a0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    b0a2:	687b      	ldr	r3, [r7, #4]
    b0a4:	685b      	ldr	r3, [r3, #4]
    b0a6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    b0a8:	683b      	ldr	r3, [r7, #0]
    b0aa:	68fa      	ldr	r2, [r7, #12]
    b0ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    b0ae:	68fb      	ldr	r3, [r7, #12]
    b0b0:	689a      	ldr	r2, [r3, #8]
    b0b2:	683b      	ldr	r3, [r7, #0]
    b0b4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    b0b6:	68fb      	ldr	r3, [r7, #12]
    b0b8:	689b      	ldr	r3, [r3, #8]
    b0ba:	683a      	ldr	r2, [r7, #0]
    b0bc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    b0be:	68fb      	ldr	r3, [r7, #12]
    b0c0:	683a      	ldr	r2, [r7, #0]
    b0c2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    b0c4:	683b      	ldr	r3, [r7, #0]
    b0c6:	687a      	ldr	r2, [r7, #4]
    b0c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    b0ca:	687b      	ldr	r3, [r7, #4]
    b0cc:	681b      	ldr	r3, [r3, #0]
    b0ce:	1c5a      	adds	r2, r3, #1
    b0d0:	687b      	ldr	r3, [r7, #4]
    b0d2:	601a      	str	r2, [r3, #0]
}
    b0d4:	46c0      	nop			; (mov r8, r8)
    b0d6:	46bd      	mov	sp, r7
    b0d8:	b004      	add	sp, #16
    b0da:	bd80      	pop	{r7, pc}

0000b0dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    b0dc:	b580      	push	{r7, lr}
    b0de:	b084      	sub	sp, #16
    b0e0:	af00      	add	r7, sp, #0
    b0e2:	6078      	str	r0, [r7, #4]
    b0e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    b0e6:	683b      	ldr	r3, [r7, #0]
    b0e8:	681b      	ldr	r3, [r3, #0]
    b0ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    b0ec:	68bb      	ldr	r3, [r7, #8]
    b0ee:	3301      	adds	r3, #1
    b0f0:	d103      	bne.n	b0fa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    b0f2:	687b      	ldr	r3, [r7, #4]
    b0f4:	691b      	ldr	r3, [r3, #16]
    b0f6:	60fb      	str	r3, [r7, #12]
    b0f8:	e00c      	b.n	b114 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    b0fa:	687b      	ldr	r3, [r7, #4]
    b0fc:	3308      	adds	r3, #8
    b0fe:	60fb      	str	r3, [r7, #12]
    b100:	e002      	b.n	b108 <vListInsert+0x2c>
    b102:	68fb      	ldr	r3, [r7, #12]
    b104:	685b      	ldr	r3, [r3, #4]
    b106:	60fb      	str	r3, [r7, #12]
    b108:	68fb      	ldr	r3, [r7, #12]
    b10a:	685b      	ldr	r3, [r3, #4]
    b10c:	681a      	ldr	r2, [r3, #0]
    b10e:	68bb      	ldr	r3, [r7, #8]
    b110:	429a      	cmp	r2, r3
    b112:	d9f6      	bls.n	b102 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    b114:	68fb      	ldr	r3, [r7, #12]
    b116:	685a      	ldr	r2, [r3, #4]
    b118:	683b      	ldr	r3, [r7, #0]
    b11a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    b11c:	683b      	ldr	r3, [r7, #0]
    b11e:	685b      	ldr	r3, [r3, #4]
    b120:	683a      	ldr	r2, [r7, #0]
    b122:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    b124:	683b      	ldr	r3, [r7, #0]
    b126:	68fa      	ldr	r2, [r7, #12]
    b128:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    b12a:	68fb      	ldr	r3, [r7, #12]
    b12c:	683a      	ldr	r2, [r7, #0]
    b12e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    b130:	683b      	ldr	r3, [r7, #0]
    b132:	687a      	ldr	r2, [r7, #4]
    b134:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    b136:	687b      	ldr	r3, [r7, #4]
    b138:	681b      	ldr	r3, [r3, #0]
    b13a:	1c5a      	adds	r2, r3, #1
    b13c:	687b      	ldr	r3, [r7, #4]
    b13e:	601a      	str	r2, [r3, #0]
}
    b140:	46c0      	nop			; (mov r8, r8)
    b142:	46bd      	mov	sp, r7
    b144:	b004      	add	sp, #16
    b146:	bd80      	pop	{r7, pc}

0000b148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    b148:	b580      	push	{r7, lr}
    b14a:	b084      	sub	sp, #16
    b14c:	af00      	add	r7, sp, #0
    b14e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    b150:	687b      	ldr	r3, [r7, #4]
    b152:	691b      	ldr	r3, [r3, #16]
    b154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    b156:	687b      	ldr	r3, [r7, #4]
    b158:	685b      	ldr	r3, [r3, #4]
    b15a:	687a      	ldr	r2, [r7, #4]
    b15c:	6892      	ldr	r2, [r2, #8]
    b15e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    b160:	687b      	ldr	r3, [r7, #4]
    b162:	689b      	ldr	r3, [r3, #8]
    b164:	687a      	ldr	r2, [r7, #4]
    b166:	6852      	ldr	r2, [r2, #4]
    b168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    b16a:	68fb      	ldr	r3, [r7, #12]
    b16c:	685a      	ldr	r2, [r3, #4]
    b16e:	687b      	ldr	r3, [r7, #4]
    b170:	429a      	cmp	r2, r3
    b172:	d103      	bne.n	b17c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    b174:	687b      	ldr	r3, [r7, #4]
    b176:	689a      	ldr	r2, [r3, #8]
    b178:	68fb      	ldr	r3, [r7, #12]
    b17a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    b17c:	687b      	ldr	r3, [r7, #4]
    b17e:	2200      	movs	r2, #0
    b180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    b182:	68fb      	ldr	r3, [r7, #12]
    b184:	681b      	ldr	r3, [r3, #0]
    b186:	1e5a      	subs	r2, r3, #1
    b188:	68fb      	ldr	r3, [r7, #12]
    b18a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    b18c:	68fb      	ldr	r3, [r7, #12]
    b18e:	681b      	ldr	r3, [r3, #0]
}
    b190:	0018      	movs	r0, r3
    b192:	46bd      	mov	sp, r7
    b194:	b004      	add	sp, #16
    b196:	bd80      	pop	{r7, pc}

0000b198 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    b198:	b580      	push	{r7, lr}
    b19a:	b084      	sub	sp, #16
    b19c:	af00      	add	r7, sp, #0
    b19e:	60f8      	str	r0, [r7, #12]
    b1a0:	60b9      	str	r1, [r7, #8]
    b1a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    b1a4:	68fb      	ldr	r3, [r7, #12]
    b1a6:	3b04      	subs	r3, #4
    b1a8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    b1aa:	68fb      	ldr	r3, [r7, #12]
    b1ac:	2280      	movs	r2, #128	; 0x80
    b1ae:	0452      	lsls	r2, r2, #17
    b1b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    b1b2:	68fb      	ldr	r3, [r7, #12]
    b1b4:	3b04      	subs	r3, #4
    b1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    b1b8:	68ba      	ldr	r2, [r7, #8]
    b1ba:	68fb      	ldr	r3, [r7, #12]
    b1bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    b1be:	68fb      	ldr	r3, [r7, #12]
    b1c0:	3b04      	subs	r3, #4
    b1c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    b1c4:	4a08      	ldr	r2, [pc, #32]	; (b1e8 <pxPortInitialiseStack+0x50>)
    b1c6:	68fb      	ldr	r3, [r7, #12]
    b1c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    b1ca:	68fb      	ldr	r3, [r7, #12]
    b1cc:	3b14      	subs	r3, #20
    b1ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    b1d0:	687a      	ldr	r2, [r7, #4]
    b1d2:	68fb      	ldr	r3, [r7, #12]
    b1d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    b1d6:	68fb      	ldr	r3, [r7, #12]
    b1d8:	3b20      	subs	r3, #32
    b1da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    b1dc:	68fb      	ldr	r3, [r7, #12]
}
    b1de:	0018      	movs	r0, r3
    b1e0:	46bd      	mov	sp, r7
    b1e2:	b004      	add	sp, #16
    b1e4:	bd80      	pop	{r7, pc}
    b1e6:	46c0      	nop			; (mov r8, r8)
    b1e8:	0000b1ed 	.word	0x0000b1ed

0000b1ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    b1ec:	b580      	push	{r7, lr}
    b1ee:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    b1f0:	4b03      	ldr	r3, [pc, #12]	; (b200 <prvTaskExitError+0x14>)
    b1f2:	681b      	ldr	r3, [r3, #0]
    b1f4:	3301      	adds	r3, #1
    b1f6:	d001      	beq.n	b1fc <prvTaskExitError+0x10>
    b1f8:	b672      	cpsid	i
    b1fa:	e7fe      	b.n	b1fa <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    b1fc:	b672      	cpsid	i
	for( ;; );
    b1fe:	e7fe      	b.n	b1fe <prvTaskExitError+0x12>
    b200:	20000020 	.word	0x20000020

0000b204 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    b204:	b580      	push	{r7, lr}
    b206:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    b208:	46c0      	nop			; (mov r8, r8)
    b20a:	46bd      	mov	sp, r7
    b20c:	bd80      	pop	{r7, pc}
    b20e:	46c0      	nop			; (mov r8, r8)

0000b210 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    b210:	4a0b      	ldr	r2, [pc, #44]	; (b240 <pxCurrentTCBConst2>)
    b212:	6813      	ldr	r3, [r2, #0]
    b214:	6818      	ldr	r0, [r3, #0]
    b216:	3020      	adds	r0, #32
    b218:	f380 8809 	msr	PSP, r0
    b21c:	2002      	movs	r0, #2
    b21e:	f380 8814 	msr	CONTROL, r0
    b222:	f3bf 8f6f 	isb	sy
    b226:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    b228:	46ae      	mov	lr, r5
    b22a:	bc08      	pop	{r3}
    b22c:	bc04      	pop	{r2}
    b22e:	b662      	cpsie	i
    b230:	4718      	bx	r3
    b232:	46c0      	nop			; (mov r8, r8)
    b234:	46c0      	nop			; (mov r8, r8)
    b236:	46c0      	nop			; (mov r8, r8)
    b238:	46c0      	nop			; (mov r8, r8)
    b23a:	46c0      	nop			; (mov r8, r8)
    b23c:	46c0      	nop			; (mov r8, r8)
    b23e:	46c0      	nop			; (mov r8, r8)

0000b240 <pxCurrentTCBConst2>:
    b240:	20003d38 	.word	0x20003d38
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    b244:	46c0      	nop			; (mov r8, r8)
    b246:	46c0      	nop			; (mov r8, r8)

0000b248 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    b248:	b580      	push	{r7, lr}
    b24a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    b24c:	4b0d      	ldr	r3, [pc, #52]	; (b284 <xPortStartScheduler+0x3c>)
    b24e:	4a0d      	ldr	r2, [pc, #52]	; (b284 <xPortStartScheduler+0x3c>)
    b250:	6812      	ldr	r2, [r2, #0]
    b252:	21ff      	movs	r1, #255	; 0xff
    b254:	0409      	lsls	r1, r1, #16
    b256:	430a      	orrs	r2, r1
    b258:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    b25a:	4b0a      	ldr	r3, [pc, #40]	; (b284 <xPortStartScheduler+0x3c>)
    b25c:	4a09      	ldr	r2, [pc, #36]	; (b284 <xPortStartScheduler+0x3c>)
    b25e:	6812      	ldr	r2, [r2, #0]
    b260:	21ff      	movs	r1, #255	; 0xff
    b262:	0609      	lsls	r1, r1, #24
    b264:	430a      	orrs	r2, r1
    b266:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    b268:	4b07      	ldr	r3, [pc, #28]	; (b288 <xPortStartScheduler+0x40>)
    b26a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    b26c:	4b07      	ldr	r3, [pc, #28]	; (b28c <xPortStartScheduler+0x44>)
    b26e:	2200      	movs	r2, #0
    b270:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    b272:	4b07      	ldr	r3, [pc, #28]	; (b290 <xPortStartScheduler+0x48>)
    b274:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    b276:	4b07      	ldr	r3, [pc, #28]	; (b294 <xPortStartScheduler+0x4c>)
    b278:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    b27a:	2300      	movs	r3, #0
}
    b27c:	0018      	movs	r0, r3
    b27e:	46bd      	mov	sp, r7
    b280:	bd80      	pop	{r7, pc}
    b282:	46c0      	nop			; (mov r8, r8)
    b284:	e000ed20 	.word	0xe000ed20
    b288:	0000b3a9 	.word	0x0000b3a9
    b28c:	20000020 	.word	0x20000020
    b290:	0000b211 	.word	0x0000b211
    b294:	0000b1ed 	.word	0x0000b1ed

0000b298 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    b298:	b580      	push	{r7, lr}
    b29a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    b29c:	4b05      	ldr	r3, [pc, #20]	; (b2b4 <vPortYield+0x1c>)
    b29e:	2280      	movs	r2, #128	; 0x80
    b2a0:	0552      	lsls	r2, r2, #21
    b2a2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    b2a4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    b2a8:	f3bf 8f6f 	isb	sy
}
    b2ac:	46c0      	nop			; (mov r8, r8)
    b2ae:	46bd      	mov	sp, r7
    b2b0:	bd80      	pop	{r7, pc}
    b2b2:	46c0      	nop			; (mov r8, r8)
    b2b4:	e000ed04 	.word	0xe000ed04

0000b2b8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    b2b8:	b580      	push	{r7, lr}
    b2ba:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    b2bc:	b672      	cpsid	i
    uxCriticalNesting++;
    b2be:	4b06      	ldr	r3, [pc, #24]	; (b2d8 <vPortEnterCritical+0x20>)
    b2c0:	681b      	ldr	r3, [r3, #0]
    b2c2:	1c5a      	adds	r2, r3, #1
    b2c4:	4b04      	ldr	r3, [pc, #16]	; (b2d8 <vPortEnterCritical+0x20>)
    b2c6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    b2c8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    b2cc:	f3bf 8f6f 	isb	sy
}
    b2d0:	46c0      	nop			; (mov r8, r8)
    b2d2:	46bd      	mov	sp, r7
    b2d4:	bd80      	pop	{r7, pc}
    b2d6:	46c0      	nop			; (mov r8, r8)
    b2d8:	20000020 	.word	0x20000020

0000b2dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    b2dc:	b580      	push	{r7, lr}
    b2de:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    b2e0:	4b09      	ldr	r3, [pc, #36]	; (b308 <vPortExitCritical+0x2c>)
    b2e2:	681b      	ldr	r3, [r3, #0]
    b2e4:	2b00      	cmp	r3, #0
    b2e6:	d101      	bne.n	b2ec <vPortExitCritical+0x10>
    b2e8:	b672      	cpsid	i
    b2ea:	e7fe      	b.n	b2ea <vPortExitCritical+0xe>
    uxCriticalNesting--;
    b2ec:	4b06      	ldr	r3, [pc, #24]	; (b308 <vPortExitCritical+0x2c>)
    b2ee:	681b      	ldr	r3, [r3, #0]
    b2f0:	1e5a      	subs	r2, r3, #1
    b2f2:	4b05      	ldr	r3, [pc, #20]	; (b308 <vPortExitCritical+0x2c>)
    b2f4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    b2f6:	4b04      	ldr	r3, [pc, #16]	; (b308 <vPortExitCritical+0x2c>)
    b2f8:	681b      	ldr	r3, [r3, #0]
    b2fa:	2b00      	cmp	r3, #0
    b2fc:	d100      	bne.n	b300 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    b2fe:	b662      	cpsie	i
    }
}
    b300:	46c0      	nop			; (mov r8, r8)
    b302:	46bd      	mov	sp, r7
    b304:	bd80      	pop	{r7, pc}
    b306:	46c0      	nop			; (mov r8, r8)
    b308:	20000020 	.word	0x20000020

0000b30c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    b30c:	f3ef 8010 	mrs	r0, PRIMASK
    b310:	b672      	cpsid	i
    b312:	4770      	bx	lr
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	//return 0;
}
    b314:	46c0      	nop			; (mov r8, r8)
    b316:	0018      	movs	r0, r3

0000b318 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    b318:	f380 8810 	msr	PRIMASK, r0
    b31c:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	//( void ) ulMask;
}
    b31e:	46c0      	nop			; (mov r8, r8)

0000b320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    b320:	f3ef 8009 	mrs	r0, PSP
    b324:	4b0e      	ldr	r3, [pc, #56]	; (b360 <pxCurrentTCBConst>)
    b326:	681a      	ldr	r2, [r3, #0]
    b328:	3820      	subs	r0, #32
    b32a:	6010      	str	r0, [r2, #0]
    b32c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    b32e:	4644      	mov	r4, r8
    b330:	464d      	mov	r5, r9
    b332:	4656      	mov	r6, sl
    b334:	465f      	mov	r7, fp
    b336:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    b338:	b508      	push	{r3, lr}
    b33a:	b672      	cpsid	i
    b33c:	f001 f98c 	bl	c658 <vTaskSwitchContext>
    b340:	b662      	cpsie	i
    b342:	bc0c      	pop	{r2, r3}
    b344:	6811      	ldr	r1, [r2, #0]
    b346:	6808      	ldr	r0, [r1, #0]
    b348:	3010      	adds	r0, #16
    b34a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    b34c:	46a0      	mov	r8, r4
    b34e:	46a9      	mov	r9, r5
    b350:	46b2      	mov	sl, r6
    b352:	46bb      	mov	fp, r7
    b354:	f380 8809 	msr	PSP, r0
    b358:	3820      	subs	r0, #32
    b35a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    b35c:	4718      	bx	r3
    b35e:	46c0      	nop			; (mov r8, r8)

0000b360 <pxCurrentTCBConst>:
    b360:	20003d38 	.word	0x20003d38
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    b364:	46c0      	nop			; (mov r8, r8)
    b366:	46c0      	nop			; (mov r8, r8)

0000b368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    b368:	b580      	push	{r7, lr}
    b36a:	b082      	sub	sp, #8
    b36c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    b36e:	4b0a      	ldr	r3, [pc, #40]	; (b398 <SysTick_Handler+0x30>)
    b370:	4798      	blx	r3
    b372:	0003      	movs	r3, r0
    b374:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    b376:	4b09      	ldr	r3, [pc, #36]	; (b39c <SysTick_Handler+0x34>)
    b378:	4798      	blx	r3
    b37a:	1e03      	subs	r3, r0, #0
    b37c:	d003      	beq.n	b386 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    b37e:	4b08      	ldr	r3, [pc, #32]	; (b3a0 <SysTick_Handler+0x38>)
    b380:	2280      	movs	r2, #128	; 0x80
    b382:	0552      	lsls	r2, r2, #21
    b384:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    b386:	687b      	ldr	r3, [r7, #4]
    b388:	0018      	movs	r0, r3
    b38a:	4b06      	ldr	r3, [pc, #24]	; (b3a4 <SysTick_Handler+0x3c>)
    b38c:	4798      	blx	r3
}
    b38e:	46c0      	nop			; (mov r8, r8)
    b390:	46bd      	mov	sp, r7
    b392:	b002      	add	sp, #8
    b394:	bd80      	pop	{r7, pc}
    b396:	46c0      	nop			; (mov r8, r8)
    b398:	0000b30d 	.word	0x0000b30d
    b39c:	0000c501 	.word	0x0000c501
    b3a0:	e000ed04 	.word	0xe000ed04
    b3a4:	0000b319 	.word	0x0000b319

0000b3a8 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    b3a8:	b580      	push	{r7, lr}
    b3aa:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    b3ac:	4b04      	ldr	r3, [pc, #16]	; (b3c0 <prvSetupTimerInterrupt+0x18>)
    b3ae:	4a05      	ldr	r2, [pc, #20]	; (b3c4 <prvSetupTimerInterrupt+0x1c>)
    b3b0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    b3b2:	4b05      	ldr	r3, [pc, #20]	; (b3c8 <prvSetupTimerInterrupt+0x20>)
    b3b4:	2207      	movs	r2, #7
    b3b6:	601a      	str	r2, [r3, #0]
}
    b3b8:	46c0      	nop			; (mov r8, r8)
    b3ba:	46bd      	mov	sp, r7
    b3bc:	bd80      	pop	{r7, pc}
    b3be:	46c0      	nop			; (mov r8, r8)
    b3c0:	e000e014 	.word	0xe000e014
    b3c4:	0000bb7f 	.word	0x0000bb7f
    b3c8:	e000e010 	.word	0xe000e010

0000b3cc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    b3cc:	b580      	push	{r7, lr}
    b3ce:	b084      	sub	sp, #16
    b3d0:	af00      	add	r7, sp, #0
    b3d2:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    b3d4:	2300      	movs	r3, #0
    b3d6:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    b3d8:	687b      	ldr	r3, [r7, #4]
    b3da:	2207      	movs	r2, #7
    b3dc:	4013      	ands	r3, r2
    b3de:	d004      	beq.n	b3ea <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    b3e0:	687b      	ldr	r3, [r7, #4]
    b3e2:	2207      	movs	r2, #7
    b3e4:	4393      	bics	r3, r2
    b3e6:	3308      	adds	r3, #8
    b3e8:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    b3ea:	4b19      	ldr	r3, [pc, #100]	; (b450 <pvPortMalloc+0x84>)
    b3ec:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    b3ee:	4b19      	ldr	r3, [pc, #100]	; (b454 <pvPortMalloc+0x88>)
    b3f0:	681b      	ldr	r3, [r3, #0]
    b3f2:	2b00      	cmp	r3, #0
    b3f4:	d105      	bne.n	b402 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    b3f6:	4b18      	ldr	r3, [pc, #96]	; (b458 <pvPortMalloc+0x8c>)
    b3f8:	2207      	movs	r2, #7
    b3fa:	4393      	bics	r3, r2
    b3fc:	001a      	movs	r2, r3
    b3fe:	4b15      	ldr	r3, [pc, #84]	; (b454 <pvPortMalloc+0x88>)
    b400:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    b402:	4b16      	ldr	r3, [pc, #88]	; (b45c <pvPortMalloc+0x90>)
    b404:	681a      	ldr	r2, [r3, #0]
    b406:	687b      	ldr	r3, [r7, #4]
    b408:	18d3      	adds	r3, r2, r3
    b40a:	4a15      	ldr	r2, [pc, #84]	; (b460 <pvPortMalloc+0x94>)
    b40c:	4293      	cmp	r3, r2
    b40e:	d813      	bhi.n	b438 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    b410:	4b12      	ldr	r3, [pc, #72]	; (b45c <pvPortMalloc+0x90>)
    b412:	681a      	ldr	r2, [r3, #0]
    b414:	687b      	ldr	r3, [r7, #4]
    b416:	18d2      	adds	r2, r2, r3
    b418:	4b10      	ldr	r3, [pc, #64]	; (b45c <pvPortMalloc+0x90>)
    b41a:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    b41c:	429a      	cmp	r2, r3
    b41e:	d90b      	bls.n	b438 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    b420:	4b0c      	ldr	r3, [pc, #48]	; (b454 <pvPortMalloc+0x88>)
    b422:	681a      	ldr	r2, [r3, #0]
    b424:	4b0d      	ldr	r3, [pc, #52]	; (b45c <pvPortMalloc+0x90>)
    b426:	681b      	ldr	r3, [r3, #0]
    b428:	18d3      	adds	r3, r2, r3
    b42a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    b42c:	4b0b      	ldr	r3, [pc, #44]	; (b45c <pvPortMalloc+0x90>)
    b42e:	681a      	ldr	r2, [r3, #0]
    b430:	687b      	ldr	r3, [r7, #4]
    b432:	18d2      	adds	r2, r2, r3
    b434:	4b09      	ldr	r3, [pc, #36]	; (b45c <pvPortMalloc+0x90>)
    b436:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    b438:	4b0a      	ldr	r3, [pc, #40]	; (b464 <pvPortMalloc+0x98>)
    b43a:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
    b43c:	68fb      	ldr	r3, [r7, #12]
    b43e:	2b00      	cmp	r3, #0
    b440:	d101      	bne.n	b446 <pvPortMalloc+0x7a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
    b442:	4b09      	ldr	r3, [pc, #36]	; (b468 <pvPortMalloc+0x9c>)
    b444:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
    b446:	68fb      	ldr	r3, [r7, #12]
}
    b448:	0018      	movs	r0, r3
    b44a:	46bd      	mov	sp, r7
    b44c:	b004      	add	sp, #16
    b44e:	bd80      	pop	{r7, pc}
    b450:	0000c399 	.word	0x0000c399
    b454:	20003d34 	.word	0x20003d34
    b458:	20000138 	.word	0x20000138
    b45c:	20003d30 	.word	0x20003d30
    b460:	00003bf7 	.word	0x00003bf7
    b464:	0000c3b1 	.word	0x0000c3b1
    b468:	0000dfc1 	.word	0x0000dfc1

0000b46c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    b46c:	b580      	push	{r7, lr}
    b46e:	b082      	sub	sp, #8
    b470:	af00      	add	r7, sp, #0
    b472:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    b474:	687b      	ldr	r3, [r7, #4]
    b476:	2b00      	cmp	r3, #0
    b478:	d001      	beq.n	b47e <vPortFree+0x12>
    b47a:	b672      	cpsid	i
    b47c:	e7fe      	b.n	b47c <vPortFree+0x10>
}
    b47e:	46c0      	nop			; (mov r8, r8)
    b480:	46bd      	mov	sp, r7
    b482:	b002      	add	sp, #8
    b484:	bd80      	pop	{r7, pc}
    b486:	46c0      	nop			; (mov r8, r8)

0000b488 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    b488:	b580      	push	{r7, lr}
    b48a:	b084      	sub	sp, #16
    b48c:	af00      	add	r7, sp, #0
    b48e:	6078      	str	r0, [r7, #4]
    b490:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b492:	687b      	ldr	r3, [r7, #4]
    b494:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    b496:	68fb      	ldr	r3, [r7, #12]
    b498:	2b00      	cmp	r3, #0
    b49a:	d101      	bne.n	b4a0 <xQueueGenericReset+0x18>
    b49c:	b672      	cpsid	i
    b49e:	e7fe      	b.n	b49e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    b4a0:	4b23      	ldr	r3, [pc, #140]	; (b530 <xQueueGenericReset+0xa8>)
    b4a2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    b4a4:	68fb      	ldr	r3, [r7, #12]
    b4a6:	681a      	ldr	r2, [r3, #0]
    b4a8:	68fb      	ldr	r3, [r7, #12]
    b4aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    b4ac:	68fb      	ldr	r3, [r7, #12]
    b4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b4b0:	434b      	muls	r3, r1
    b4b2:	18d2      	adds	r2, r2, r3
    b4b4:	68fb      	ldr	r3, [r7, #12]
    b4b6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    b4b8:	68fb      	ldr	r3, [r7, #12]
    b4ba:	2200      	movs	r2, #0
    b4bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    b4be:	68fb      	ldr	r3, [r7, #12]
    b4c0:	681a      	ldr	r2, [r3, #0]
    b4c2:	68fb      	ldr	r3, [r7, #12]
    b4c4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    b4c6:	68fb      	ldr	r3, [r7, #12]
    b4c8:	681a      	ldr	r2, [r3, #0]
    b4ca:	68fb      	ldr	r3, [r7, #12]
    b4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b4ce:	1e59      	subs	r1, r3, #1
    b4d0:	68fb      	ldr	r3, [r7, #12]
    b4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b4d4:	434b      	muls	r3, r1
    b4d6:	18d2      	adds	r2, r2, r3
    b4d8:	68fb      	ldr	r3, [r7, #12]
    b4da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    b4dc:	68fb      	ldr	r3, [r7, #12]
    b4de:	2244      	movs	r2, #68	; 0x44
    b4e0:	21ff      	movs	r1, #255	; 0xff
    b4e2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    b4e4:	68fb      	ldr	r3, [r7, #12]
    b4e6:	2245      	movs	r2, #69	; 0x45
    b4e8:	21ff      	movs	r1, #255	; 0xff
    b4ea:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    b4ec:	683b      	ldr	r3, [r7, #0]
    b4ee:	2b00      	cmp	r3, #0
    b4f0:	d10d      	bne.n	b50e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    b4f2:	68fb      	ldr	r3, [r7, #12]
    b4f4:	691b      	ldr	r3, [r3, #16]
    b4f6:	2b00      	cmp	r3, #0
    b4f8:	d013      	beq.n	b522 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    b4fa:	68fb      	ldr	r3, [r7, #12]
    b4fc:	3310      	adds	r3, #16
    b4fe:	0018      	movs	r0, r3
    b500:	4b0c      	ldr	r3, [pc, #48]	; (b534 <xQueueGenericReset+0xac>)
    b502:	4798      	blx	r3
    b504:	1e03      	subs	r3, r0, #0
    b506:	d00c      	beq.n	b522 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    b508:	4b0b      	ldr	r3, [pc, #44]	; (b538 <xQueueGenericReset+0xb0>)
    b50a:	4798      	blx	r3
    b50c:	e009      	b.n	b522 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    b50e:	68fb      	ldr	r3, [r7, #12]
    b510:	3310      	adds	r3, #16
    b512:	0018      	movs	r0, r3
    b514:	4b09      	ldr	r3, [pc, #36]	; (b53c <xQueueGenericReset+0xb4>)
    b516:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    b518:	68fb      	ldr	r3, [r7, #12]
    b51a:	3324      	adds	r3, #36	; 0x24
    b51c:	0018      	movs	r0, r3
    b51e:	4b07      	ldr	r3, [pc, #28]	; (b53c <xQueueGenericReset+0xb4>)
    b520:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    b522:	4b07      	ldr	r3, [pc, #28]	; (b540 <xQueueGenericReset+0xb8>)
    b524:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    b526:	2301      	movs	r3, #1
}
    b528:	0018      	movs	r0, r3
    b52a:	46bd      	mov	sp, r7
    b52c:	b004      	add	sp, #16
    b52e:	bd80      	pop	{r7, pc}
    b530:	0000b2b9 	.word	0x0000b2b9
    b534:	0000c7b9 	.word	0x0000c7b9
    b538:	0000b299 	.word	0x0000b299
    b53c:	0000b045 	.word	0x0000b045
    b540:	0000b2dd 	.word	0x0000b2dd

0000b544 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    b544:	b590      	push	{r4, r7, lr}
    b546:	b08b      	sub	sp, #44	; 0x2c
    b548:	af02      	add	r7, sp, #8
    b54a:	60f8      	str	r0, [r7, #12]
    b54c:	60b9      	str	r1, [r7, #8]
    b54e:	1dfb      	adds	r3, r7, #7
    b550:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    b552:	68fb      	ldr	r3, [r7, #12]
    b554:	2b00      	cmp	r3, #0
    b556:	d101      	bne.n	b55c <xQueueGenericCreate+0x18>
    b558:	b672      	cpsid	i
    b55a:	e7fe      	b.n	b55a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    b55c:	68bb      	ldr	r3, [r7, #8]
    b55e:	2b00      	cmp	r3, #0
    b560:	d102      	bne.n	b568 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    b562:	2300      	movs	r3, #0
    b564:	61fb      	str	r3, [r7, #28]
    b566:	e003      	b.n	b570 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    b568:	68fb      	ldr	r3, [r7, #12]
    b56a:	68ba      	ldr	r2, [r7, #8]
    b56c:	4353      	muls	r3, r2
    b56e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    b570:	69fb      	ldr	r3, [r7, #28]
    b572:	334c      	adds	r3, #76	; 0x4c
    b574:	0018      	movs	r0, r3
    b576:	4b0c      	ldr	r3, [pc, #48]	; (b5a8 <xQueueGenericCreate+0x64>)
    b578:	4798      	blx	r3
    b57a:	0003      	movs	r3, r0
    b57c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    b57e:	69bb      	ldr	r3, [r7, #24]
    b580:	2b00      	cmp	r3, #0
    b582:	d00c      	beq.n	b59e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    b584:	69bb      	ldr	r3, [r7, #24]
    b586:	334c      	adds	r3, #76	; 0x4c
    b588:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    b58a:	1dfb      	adds	r3, r7, #7
    b58c:	781c      	ldrb	r4, [r3, #0]
    b58e:	697a      	ldr	r2, [r7, #20]
    b590:	68b9      	ldr	r1, [r7, #8]
    b592:	68f8      	ldr	r0, [r7, #12]
    b594:	69bb      	ldr	r3, [r7, #24]
    b596:	9300      	str	r3, [sp, #0]
    b598:	0023      	movs	r3, r4
    b59a:	4c04      	ldr	r4, [pc, #16]	; (b5ac <xQueueGenericCreate+0x68>)
    b59c:	47a0      	blx	r4
		}

		return pxNewQueue;
    b59e:	69bb      	ldr	r3, [r7, #24]
	}
    b5a0:	0018      	movs	r0, r3
    b5a2:	46bd      	mov	sp, r7
    b5a4:	b009      	add	sp, #36	; 0x24
    b5a6:	bd90      	pop	{r4, r7, pc}
    b5a8:	0000b3cd 	.word	0x0000b3cd
    b5ac:	0000b5b1 	.word	0x0000b5b1

0000b5b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    b5b0:	b580      	push	{r7, lr}
    b5b2:	b084      	sub	sp, #16
    b5b4:	af00      	add	r7, sp, #0
    b5b6:	60f8      	str	r0, [r7, #12]
    b5b8:	60b9      	str	r1, [r7, #8]
    b5ba:	607a      	str	r2, [r7, #4]
    b5bc:	001a      	movs	r2, r3
    b5be:	1cfb      	adds	r3, r7, #3
    b5c0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    b5c2:	68bb      	ldr	r3, [r7, #8]
    b5c4:	2b00      	cmp	r3, #0
    b5c6:	d103      	bne.n	b5d0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    b5c8:	69bb      	ldr	r3, [r7, #24]
    b5ca:	69ba      	ldr	r2, [r7, #24]
    b5cc:	601a      	str	r2, [r3, #0]
    b5ce:	e002      	b.n	b5d6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    b5d0:	69bb      	ldr	r3, [r7, #24]
    b5d2:	687a      	ldr	r2, [r7, #4]
    b5d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    b5d6:	69bb      	ldr	r3, [r7, #24]
    b5d8:	68fa      	ldr	r2, [r7, #12]
    b5da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    b5dc:	69bb      	ldr	r3, [r7, #24]
    b5de:	68ba      	ldr	r2, [r7, #8]
    b5e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    b5e2:	69bb      	ldr	r3, [r7, #24]
    b5e4:	2101      	movs	r1, #1
    b5e6:	0018      	movs	r0, r3
    b5e8:	4b04      	ldr	r3, [pc, #16]	; (b5fc <prvInitialiseNewQueue+0x4c>)
    b5ea:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    b5ec:	69bb      	ldr	r3, [r7, #24]
    b5ee:	2200      	movs	r2, #0
    b5f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    b5f2:	46c0      	nop			; (mov r8, r8)
    b5f4:	46bd      	mov	sp, r7
    b5f6:	b004      	add	sp, #16
    b5f8:	bd80      	pop	{r7, pc}
    b5fa:	46c0      	nop			; (mov r8, r8)
    b5fc:	0000b489 	.word	0x0000b489

0000b600 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    b600:	b590      	push	{r4, r7, lr}
    b602:	b083      	sub	sp, #12
    b604:	af00      	add	r7, sp, #0
    b606:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
    b608:	687b      	ldr	r3, [r7, #4]
    b60a:	2b00      	cmp	r3, #0
    b60c:	d00e      	beq.n	b62c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    b60e:	687b      	ldr	r3, [r7, #4]
    b610:	2200      	movs	r2, #0
    b612:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    b614:	687b      	ldr	r3, [r7, #4]
    b616:	2200      	movs	r2, #0
    b618:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    b61a:	687b      	ldr	r3, [r7, #4]
    b61c:	2200      	movs	r2, #0
    b61e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    b620:	6878      	ldr	r0, [r7, #4]
    b622:	2300      	movs	r3, #0
    b624:	2200      	movs	r2, #0
    b626:	2100      	movs	r1, #0
    b628:	4c02      	ldr	r4, [pc, #8]	; (b634 <prvInitialiseMutex+0x34>)
    b62a:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    b62c:	46c0      	nop			; (mov r8, r8)
    b62e:	46bd      	mov	sp, r7
    b630:	b003      	add	sp, #12
    b632:	bd90      	pop	{r4, r7, pc}
    b634:	0000b679 	.word	0x0000b679

0000b638 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    b638:	b580      	push	{r7, lr}
    b63a:	b086      	sub	sp, #24
    b63c:	af00      	add	r7, sp, #0
    b63e:	0002      	movs	r2, r0
    b640:	1dfb      	adds	r3, r7, #7
    b642:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    b644:	2301      	movs	r3, #1
    b646:	617b      	str	r3, [r7, #20]
    b648:	2300      	movs	r3, #0
    b64a:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    b64c:	1dfb      	adds	r3, r7, #7
    b64e:	781a      	ldrb	r2, [r3, #0]
    b650:	6939      	ldr	r1, [r7, #16]
    b652:	697b      	ldr	r3, [r7, #20]
    b654:	0018      	movs	r0, r3
    b656:	4b06      	ldr	r3, [pc, #24]	; (b670 <xQueueCreateMutex+0x38>)
    b658:	4798      	blx	r3
    b65a:	0003      	movs	r3, r0
    b65c:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
    b65e:	68fb      	ldr	r3, [r7, #12]
    b660:	0018      	movs	r0, r3
    b662:	4b04      	ldr	r3, [pc, #16]	; (b674 <xQueueCreateMutex+0x3c>)
    b664:	4798      	blx	r3

		return pxNewQueue;
    b666:	68fb      	ldr	r3, [r7, #12]
	}
    b668:	0018      	movs	r0, r3
    b66a:	46bd      	mov	sp, r7
    b66c:	b006      	add	sp, #24
    b66e:	bd80      	pop	{r7, pc}
    b670:	0000b545 	.word	0x0000b545
    b674:	0000b601 	.word	0x0000b601

0000b678 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    b678:	b580      	push	{r7, lr}
    b67a:	b08a      	sub	sp, #40	; 0x28
    b67c:	af00      	add	r7, sp, #0
    b67e:	60f8      	str	r0, [r7, #12]
    b680:	60b9      	str	r1, [r7, #8]
    b682:	607a      	str	r2, [r7, #4]
    b684:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    b686:	2300      	movs	r3, #0
    b688:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b68a:	68fb      	ldr	r3, [r7, #12]
    b68c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    b68e:	6a3b      	ldr	r3, [r7, #32]
    b690:	2b00      	cmp	r3, #0
    b692:	d101      	bne.n	b698 <xQueueGenericSend+0x20>
    b694:	b672      	cpsid	i
    b696:	e7fe      	b.n	b696 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b698:	68bb      	ldr	r3, [r7, #8]
    b69a:	2b00      	cmp	r3, #0
    b69c:	d103      	bne.n	b6a6 <xQueueGenericSend+0x2e>
    b69e:	6a3b      	ldr	r3, [r7, #32]
    b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b6a2:	2b00      	cmp	r3, #0
    b6a4:	d101      	bne.n	b6aa <xQueueGenericSend+0x32>
    b6a6:	2301      	movs	r3, #1
    b6a8:	e000      	b.n	b6ac <xQueueGenericSend+0x34>
    b6aa:	2300      	movs	r3, #0
    b6ac:	2b00      	cmp	r3, #0
    b6ae:	d101      	bne.n	b6b4 <xQueueGenericSend+0x3c>
    b6b0:	b672      	cpsid	i
    b6b2:	e7fe      	b.n	b6b2 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    b6b4:	683b      	ldr	r3, [r7, #0]
    b6b6:	2b02      	cmp	r3, #2
    b6b8:	d103      	bne.n	b6c2 <xQueueGenericSend+0x4a>
    b6ba:	6a3b      	ldr	r3, [r7, #32]
    b6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b6be:	2b01      	cmp	r3, #1
    b6c0:	d101      	bne.n	b6c6 <xQueueGenericSend+0x4e>
    b6c2:	2301      	movs	r3, #1
    b6c4:	e000      	b.n	b6c8 <xQueueGenericSend+0x50>
    b6c6:	2300      	movs	r3, #0
    b6c8:	2b00      	cmp	r3, #0
    b6ca:	d101      	bne.n	b6d0 <xQueueGenericSend+0x58>
    b6cc:	b672      	cpsid	i
    b6ce:	e7fe      	b.n	b6ce <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    b6d0:	4b53      	ldr	r3, [pc, #332]	; (b820 <xQueueGenericSend+0x1a8>)
    b6d2:	4798      	blx	r3
    b6d4:	1e03      	subs	r3, r0, #0
    b6d6:	d102      	bne.n	b6de <xQueueGenericSend+0x66>
    b6d8:	687b      	ldr	r3, [r7, #4]
    b6da:	2b00      	cmp	r3, #0
    b6dc:	d101      	bne.n	b6e2 <xQueueGenericSend+0x6a>
    b6de:	2301      	movs	r3, #1
    b6e0:	e000      	b.n	b6e4 <xQueueGenericSend+0x6c>
    b6e2:	2300      	movs	r3, #0
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	d101      	bne.n	b6ec <xQueueGenericSend+0x74>
    b6e8:	b672      	cpsid	i
    b6ea:	e7fe      	b.n	b6ea <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    b6ec:	4b4d      	ldr	r3, [pc, #308]	; (b824 <xQueueGenericSend+0x1ac>)
    b6ee:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    b6f0:	6a3b      	ldr	r3, [r7, #32]
    b6f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b6f4:	6a3b      	ldr	r3, [r7, #32]
    b6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b6f8:	429a      	cmp	r2, r3
    b6fa:	d302      	bcc.n	b702 <xQueueGenericSend+0x8a>
    b6fc:	683b      	ldr	r3, [r7, #0]
    b6fe:	2b02      	cmp	r3, #2
    b700:	d12d      	bne.n	b75e <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    b702:	683a      	ldr	r2, [r7, #0]
    b704:	68b9      	ldr	r1, [r7, #8]
    b706:	6a3b      	ldr	r3, [r7, #32]
    b708:	0018      	movs	r0, r3
    b70a:	4b47      	ldr	r3, [pc, #284]	; (b828 <xQueueGenericSend+0x1b0>)
    b70c:	4798      	blx	r3
    b70e:	0003      	movs	r3, r0
    b710:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    b712:	6a3b      	ldr	r3, [r7, #32]
    b714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b716:	2b00      	cmp	r3, #0
    b718:	d00a      	beq.n	b730 <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    b71a:	683a      	ldr	r2, [r7, #0]
    b71c:	6a3b      	ldr	r3, [r7, #32]
    b71e:	0011      	movs	r1, r2
    b720:	0018      	movs	r0, r3
    b722:	4b42      	ldr	r3, [pc, #264]	; (b82c <xQueueGenericSend+0x1b4>)
    b724:	4798      	blx	r3
    b726:	1e03      	subs	r3, r0, #0
    b728:	d015      	beq.n	b756 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    b72a:	4b41      	ldr	r3, [pc, #260]	; (b830 <xQueueGenericSend+0x1b8>)
    b72c:	4798      	blx	r3
    b72e:	e012      	b.n	b756 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b730:	6a3b      	ldr	r3, [r7, #32]
    b732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b734:	2b00      	cmp	r3, #0
    b736:	d009      	beq.n	b74c <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b738:	6a3b      	ldr	r3, [r7, #32]
    b73a:	3324      	adds	r3, #36	; 0x24
    b73c:	0018      	movs	r0, r3
    b73e:	4b3d      	ldr	r3, [pc, #244]	; (b834 <xQueueGenericSend+0x1bc>)
    b740:	4798      	blx	r3
    b742:	1e03      	subs	r3, r0, #0
    b744:	d007      	beq.n	b756 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    b746:	4b3a      	ldr	r3, [pc, #232]	; (b830 <xQueueGenericSend+0x1b8>)
    b748:	4798      	blx	r3
    b74a:	e004      	b.n	b756 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    b74c:	69fb      	ldr	r3, [r7, #28]
    b74e:	2b00      	cmp	r3, #0
    b750:	d001      	beq.n	b756 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    b752:	4b37      	ldr	r3, [pc, #220]	; (b830 <xQueueGenericSend+0x1b8>)
    b754:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    b756:	4b38      	ldr	r3, [pc, #224]	; (b838 <xQueueGenericSend+0x1c0>)
    b758:	4798      	blx	r3
				return pdPASS;
    b75a:	2301      	movs	r3, #1
    b75c:	e05c      	b.n	b818 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    b75e:	687b      	ldr	r3, [r7, #4]
    b760:	2b00      	cmp	r3, #0
    b762:	d103      	bne.n	b76c <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    b764:	4b34      	ldr	r3, [pc, #208]	; (b838 <xQueueGenericSend+0x1c0>)
    b766:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    b768:	2300      	movs	r3, #0
    b76a:	e055      	b.n	b818 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    b76e:	2b00      	cmp	r3, #0
    b770:	d106      	bne.n	b780 <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    b772:	2314      	movs	r3, #20
    b774:	18fb      	adds	r3, r7, r3
    b776:	0018      	movs	r0, r3
    b778:	4b30      	ldr	r3, [pc, #192]	; (b83c <xQueueGenericSend+0x1c4>)
    b77a:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    b77c:	2301      	movs	r3, #1
    b77e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    b780:	4b2d      	ldr	r3, [pc, #180]	; (b838 <xQueueGenericSend+0x1c0>)
    b782:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    b784:	4b2e      	ldr	r3, [pc, #184]	; (b840 <xQueueGenericSend+0x1c8>)
    b786:	4798      	blx	r3
		prvLockQueue( pxQueue );
    b788:	4b26      	ldr	r3, [pc, #152]	; (b824 <xQueueGenericSend+0x1ac>)
    b78a:	4798      	blx	r3
    b78c:	6a3b      	ldr	r3, [r7, #32]
    b78e:	2244      	movs	r2, #68	; 0x44
    b790:	5c9b      	ldrb	r3, [r3, r2]
    b792:	b25b      	sxtb	r3, r3
    b794:	3301      	adds	r3, #1
    b796:	d103      	bne.n	b7a0 <xQueueGenericSend+0x128>
    b798:	6a3b      	ldr	r3, [r7, #32]
    b79a:	2244      	movs	r2, #68	; 0x44
    b79c:	2100      	movs	r1, #0
    b79e:	5499      	strb	r1, [r3, r2]
    b7a0:	6a3b      	ldr	r3, [r7, #32]
    b7a2:	2245      	movs	r2, #69	; 0x45
    b7a4:	5c9b      	ldrb	r3, [r3, r2]
    b7a6:	b25b      	sxtb	r3, r3
    b7a8:	3301      	adds	r3, #1
    b7aa:	d103      	bne.n	b7b4 <xQueueGenericSend+0x13c>
    b7ac:	6a3b      	ldr	r3, [r7, #32]
    b7ae:	2245      	movs	r2, #69	; 0x45
    b7b0:	2100      	movs	r1, #0
    b7b2:	5499      	strb	r1, [r3, r2]
    b7b4:	4b20      	ldr	r3, [pc, #128]	; (b838 <xQueueGenericSend+0x1c0>)
    b7b6:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    b7b8:	1d3a      	adds	r2, r7, #4
    b7ba:	2314      	movs	r3, #20
    b7bc:	18fb      	adds	r3, r7, r3
    b7be:	0011      	movs	r1, r2
    b7c0:	0018      	movs	r0, r3
    b7c2:	4b20      	ldr	r3, [pc, #128]	; (b844 <xQueueGenericSend+0x1cc>)
    b7c4:	4798      	blx	r3
    b7c6:	1e03      	subs	r3, r0, #0
    b7c8:	d11f      	bne.n	b80a <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    b7ca:	6a3b      	ldr	r3, [r7, #32]
    b7cc:	0018      	movs	r0, r3
    b7ce:	4b1e      	ldr	r3, [pc, #120]	; (b848 <xQueueGenericSend+0x1d0>)
    b7d0:	4798      	blx	r3
    b7d2:	1e03      	subs	r3, r0, #0
    b7d4:	d012      	beq.n	b7fc <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    b7d6:	6a3b      	ldr	r3, [r7, #32]
    b7d8:	3310      	adds	r3, #16
    b7da:	687a      	ldr	r2, [r7, #4]
    b7dc:	0011      	movs	r1, r2
    b7de:	0018      	movs	r0, r3
    b7e0:	4b1a      	ldr	r3, [pc, #104]	; (b84c <xQueueGenericSend+0x1d4>)
    b7e2:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    b7e4:	6a3b      	ldr	r3, [r7, #32]
    b7e6:	0018      	movs	r0, r3
    b7e8:	4b19      	ldr	r3, [pc, #100]	; (b850 <xQueueGenericSend+0x1d8>)
    b7ea:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    b7ec:	4b19      	ldr	r3, [pc, #100]	; (b854 <xQueueGenericSend+0x1dc>)
    b7ee:	4798      	blx	r3
    b7f0:	1e03      	subs	r3, r0, #0
    b7f2:	d000      	beq.n	b7f6 <xQueueGenericSend+0x17e>
    b7f4:	e77a      	b.n	b6ec <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    b7f6:	4b0e      	ldr	r3, [pc, #56]	; (b830 <xQueueGenericSend+0x1b8>)
    b7f8:	4798      	blx	r3
    b7fa:	e777      	b.n	b6ec <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    b7fc:	6a3b      	ldr	r3, [r7, #32]
    b7fe:	0018      	movs	r0, r3
    b800:	4b13      	ldr	r3, [pc, #76]	; (b850 <xQueueGenericSend+0x1d8>)
    b802:	4798      	blx	r3
				( void ) xTaskResumeAll();
    b804:	4b13      	ldr	r3, [pc, #76]	; (b854 <xQueueGenericSend+0x1dc>)
    b806:	4798      	blx	r3
    b808:	e770      	b.n	b6ec <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    b80a:	6a3b      	ldr	r3, [r7, #32]
    b80c:	0018      	movs	r0, r3
    b80e:	4b10      	ldr	r3, [pc, #64]	; (b850 <xQueueGenericSend+0x1d8>)
    b810:	4798      	blx	r3
			( void ) xTaskResumeAll();
    b812:	4b10      	ldr	r3, [pc, #64]	; (b854 <xQueueGenericSend+0x1dc>)
    b814:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    b816:	2300      	movs	r3, #0
		}
	}
}
    b818:	0018      	movs	r0, r3
    b81a:	46bd      	mov	sp, r7
    b81c:	b00a      	add	sp, #40	; 0x28
    b81e:	bd80      	pop	{r7, pc}
    b820:	0000cb0d 	.word	0x0000cb0d
    b824:	0000b2b9 	.word	0x0000b2b9
    b828:	0000bb7d 	.word	0x0000bb7d
    b82c:	0000bed1 	.word	0x0000bed1
    b830:	0000b299 	.word	0x0000b299
    b834:	0000c7b9 	.word	0x0000c7b9
    b838:	0000b2dd 	.word	0x0000b2dd
    b83c:	0000c879 	.word	0x0000c879
    b840:	0000c399 	.word	0x0000c399
    b844:	0000c8ad 	.word	0x0000c8ad
    b848:	0000bdd1 	.word	0x0000bdd1
    b84c:	0000c721 	.word	0x0000c721
    b850:	0000bcad 	.word	0x0000bcad
    b854:	0000c3b1 	.word	0x0000c3b1

0000b858 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    b858:	b580      	push	{r7, lr}
    b85a:	b088      	sub	sp, #32
    b85c:	af00      	add	r7, sp, #0
    b85e:	60f8      	str	r0, [r7, #12]
    b860:	60b9      	str	r1, [r7, #8]
    b862:	607a      	str	r2, [r7, #4]
    b864:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b866:	68fb      	ldr	r3, [r7, #12]
    b868:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    b86a:	69bb      	ldr	r3, [r7, #24]
    b86c:	2b00      	cmp	r3, #0
    b86e:	d101      	bne.n	b874 <xQueueGenericSendFromISR+0x1c>
    b870:	b672      	cpsid	i
    b872:	e7fe      	b.n	b872 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b874:	68bb      	ldr	r3, [r7, #8]
    b876:	2b00      	cmp	r3, #0
    b878:	d103      	bne.n	b882 <xQueueGenericSendFromISR+0x2a>
    b87a:	69bb      	ldr	r3, [r7, #24]
    b87c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b87e:	2b00      	cmp	r3, #0
    b880:	d101      	bne.n	b886 <xQueueGenericSendFromISR+0x2e>
    b882:	2301      	movs	r3, #1
    b884:	e000      	b.n	b888 <xQueueGenericSendFromISR+0x30>
    b886:	2300      	movs	r3, #0
    b888:	2b00      	cmp	r3, #0
    b88a:	d101      	bne.n	b890 <xQueueGenericSendFromISR+0x38>
    b88c:	b672      	cpsid	i
    b88e:	e7fe      	b.n	b88e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    b890:	683b      	ldr	r3, [r7, #0]
    b892:	2b02      	cmp	r3, #2
    b894:	d103      	bne.n	b89e <xQueueGenericSendFromISR+0x46>
    b896:	69bb      	ldr	r3, [r7, #24]
    b898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b89a:	2b01      	cmp	r3, #1
    b89c:	d101      	bne.n	b8a2 <xQueueGenericSendFromISR+0x4a>
    b89e:	2301      	movs	r3, #1
    b8a0:	e000      	b.n	b8a4 <xQueueGenericSendFromISR+0x4c>
    b8a2:	2300      	movs	r3, #0
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d101      	bne.n	b8ac <xQueueGenericSendFromISR+0x54>
    b8a8:	b672      	cpsid	i
    b8aa:	e7fe      	b.n	b8aa <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    b8ac:	4b2d      	ldr	r3, [pc, #180]	; (b964 <xQueueGenericSendFromISR+0x10c>)
    b8ae:	4798      	blx	r3
    b8b0:	0003      	movs	r3, r0
    b8b2:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    b8b4:	69bb      	ldr	r3, [r7, #24]
    b8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    b8b8:	69bb      	ldr	r3, [r7, #24]
    b8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    b8bc:	429a      	cmp	r2, r3
    b8be:	d302      	bcc.n	b8c6 <xQueueGenericSendFromISR+0x6e>
    b8c0:	683b      	ldr	r3, [r7, #0]
    b8c2:	2b02      	cmp	r3, #2
    b8c4:	d142      	bne.n	b94c <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    b8c6:	2313      	movs	r3, #19
    b8c8:	18fb      	adds	r3, r7, r3
    b8ca:	69ba      	ldr	r2, [r7, #24]
    b8cc:	2145      	movs	r1, #69	; 0x45
    b8ce:	5c52      	ldrb	r2, [r2, r1]
    b8d0:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    b8d2:	683a      	ldr	r2, [r7, #0]
    b8d4:	68b9      	ldr	r1, [r7, #8]
    b8d6:	69bb      	ldr	r3, [r7, #24]
    b8d8:	0018      	movs	r0, r3
    b8da:	4b23      	ldr	r3, [pc, #140]	; (b968 <xQueueGenericSendFromISR+0x110>)
    b8dc:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    b8de:	2313      	movs	r3, #19
    b8e0:	18fb      	adds	r3, r7, r3
    b8e2:	781b      	ldrb	r3, [r3, #0]
    b8e4:	b25b      	sxtb	r3, r3
    b8e6:	3301      	adds	r3, #1
    b8e8:	d124      	bne.n	b934 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    b8ea:	69bb      	ldr	r3, [r7, #24]
    b8ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    b8ee:	2b00      	cmp	r3, #0
    b8f0:	d00e      	beq.n	b910 <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    b8f2:	683a      	ldr	r2, [r7, #0]
    b8f4:	69bb      	ldr	r3, [r7, #24]
    b8f6:	0011      	movs	r1, r2
    b8f8:	0018      	movs	r0, r3
    b8fa:	4b1c      	ldr	r3, [pc, #112]	; (b96c <xQueueGenericSendFromISR+0x114>)
    b8fc:	4798      	blx	r3
    b8fe:	1e03      	subs	r3, r0, #0
    b900:	d021      	beq.n	b946 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    b902:	687b      	ldr	r3, [r7, #4]
    b904:	2b00      	cmp	r3, #0
    b906:	d01e      	beq.n	b946 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    b908:	687b      	ldr	r3, [r7, #4]
    b90a:	2201      	movs	r2, #1
    b90c:	601a      	str	r2, [r3, #0]
    b90e:	e01a      	b.n	b946 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    b910:	69bb      	ldr	r3, [r7, #24]
    b912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b914:	2b00      	cmp	r3, #0
    b916:	d016      	beq.n	b946 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    b918:	69bb      	ldr	r3, [r7, #24]
    b91a:	3324      	adds	r3, #36	; 0x24
    b91c:	0018      	movs	r0, r3
    b91e:	4b14      	ldr	r3, [pc, #80]	; (b970 <xQueueGenericSendFromISR+0x118>)
    b920:	4798      	blx	r3
    b922:	1e03      	subs	r3, r0, #0
    b924:	d00f      	beq.n	b946 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    b926:	687b      	ldr	r3, [r7, #4]
    b928:	2b00      	cmp	r3, #0
    b92a:	d00c      	beq.n	b946 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    b92c:	687b      	ldr	r3, [r7, #4]
    b92e:	2201      	movs	r2, #1
    b930:	601a      	str	r2, [r3, #0]
    b932:	e008      	b.n	b946 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    b934:	2313      	movs	r3, #19
    b936:	18fb      	adds	r3, r7, r3
    b938:	781b      	ldrb	r3, [r3, #0]
    b93a:	3301      	adds	r3, #1
    b93c:	b2db      	uxtb	r3, r3
    b93e:	b259      	sxtb	r1, r3
    b940:	69bb      	ldr	r3, [r7, #24]
    b942:	2245      	movs	r2, #69	; 0x45
    b944:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    b946:	2301      	movs	r3, #1
    b948:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    b94a:	e001      	b.n	b950 <xQueueGenericSendFromISR+0xf8>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    b94c:	2300      	movs	r3, #0
    b94e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    b950:	697b      	ldr	r3, [r7, #20]
    b952:	0018      	movs	r0, r3
    b954:	4b07      	ldr	r3, [pc, #28]	; (b974 <xQueueGenericSendFromISR+0x11c>)
    b956:	4798      	blx	r3

	return xReturn;
    b958:	69fb      	ldr	r3, [r7, #28]
}
    b95a:	0018      	movs	r0, r3
    b95c:	46bd      	mov	sp, r7
    b95e:	b008      	add	sp, #32
    b960:	bd80      	pop	{r7, pc}
    b962:	46c0      	nop			; (mov r8, r8)
    b964:	0000b30d 	.word	0x0000b30d
    b968:	0000bb7d 	.word	0x0000bb7d
    b96c:	0000bed1 	.word	0x0000bed1
    b970:	0000c7b9 	.word	0x0000c7b9
    b974:	0000b319 	.word	0x0000b319

0000b978 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    b978:	b580      	push	{r7, lr}
    b97a:	b08a      	sub	sp, #40	; 0x28
    b97c:	af00      	add	r7, sp, #0
    b97e:	60f8      	str	r0, [r7, #12]
    b980:	60b9      	str	r1, [r7, #8]
    b982:	607a      	str	r2, [r7, #4]
    b984:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    b986:	2300      	movs	r3, #0
    b988:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    b98a:	68fb      	ldr	r3, [r7, #12]
    b98c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    b98e:	6a3b      	ldr	r3, [r7, #32]
    b990:	2b00      	cmp	r3, #0
    b992:	d101      	bne.n	b998 <xQueueGenericReceive+0x20>
    b994:	b672      	cpsid	i
    b996:	e7fe      	b.n	b996 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    b998:	68bb      	ldr	r3, [r7, #8]
    b99a:	2b00      	cmp	r3, #0
    b99c:	d103      	bne.n	b9a6 <xQueueGenericReceive+0x2e>
    b99e:	6a3b      	ldr	r3, [r7, #32]
    b9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	d101      	bne.n	b9aa <xQueueGenericReceive+0x32>
    b9a6:	2301      	movs	r3, #1
    b9a8:	e000      	b.n	b9ac <xQueueGenericReceive+0x34>
    b9aa:	2300      	movs	r3, #0
    b9ac:	2b00      	cmp	r3, #0
    b9ae:	d101      	bne.n	b9b4 <xQueueGenericReceive+0x3c>
    b9b0:	b672      	cpsid	i
    b9b2:	e7fe      	b.n	b9b2 <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    b9b4:	4b62      	ldr	r3, [pc, #392]	; (bb40 <xQueueGenericReceive+0x1c8>)
    b9b6:	4798      	blx	r3
    b9b8:	1e03      	subs	r3, r0, #0
    b9ba:	d102      	bne.n	b9c2 <xQueueGenericReceive+0x4a>
    b9bc:	687b      	ldr	r3, [r7, #4]
    b9be:	2b00      	cmp	r3, #0
    b9c0:	d101      	bne.n	b9c6 <xQueueGenericReceive+0x4e>
    b9c2:	2301      	movs	r3, #1
    b9c4:	e000      	b.n	b9c8 <xQueueGenericReceive+0x50>
    b9c6:	2300      	movs	r3, #0
    b9c8:	2b00      	cmp	r3, #0
    b9ca:	d101      	bne.n	b9d0 <xQueueGenericReceive+0x58>
    b9cc:	b672      	cpsid	i
    b9ce:	e7fe      	b.n	b9ce <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    b9d0:	4b5c      	ldr	r3, [pc, #368]	; (bb44 <xQueueGenericReceive+0x1cc>)
    b9d2:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    b9d4:	6a3b      	ldr	r3, [r7, #32]
    b9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    b9d8:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    b9da:	69fb      	ldr	r3, [r7, #28]
    b9dc:	2b00      	cmp	r3, #0
    b9de:	d03a      	beq.n	ba56 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    b9e0:	6a3b      	ldr	r3, [r7, #32]
    b9e2:	68db      	ldr	r3, [r3, #12]
    b9e4:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    b9e6:	68ba      	ldr	r2, [r7, #8]
    b9e8:	6a3b      	ldr	r3, [r7, #32]
    b9ea:	0011      	movs	r1, r2
    b9ec:	0018      	movs	r0, r3
    b9ee:	4b56      	ldr	r3, [pc, #344]	; (bb48 <xQueueGenericReceive+0x1d0>)
    b9f0:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    b9f2:	683b      	ldr	r3, [r7, #0]
    b9f4:	2b00      	cmp	r3, #0
    b9f6:	d11a      	bne.n	ba2e <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    b9f8:	69fb      	ldr	r3, [r7, #28]
    b9fa:	1e5a      	subs	r2, r3, #1
    b9fc:	6a3b      	ldr	r3, [r7, #32]
    b9fe:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    ba00:	6a3b      	ldr	r3, [r7, #32]
    ba02:	681b      	ldr	r3, [r3, #0]
    ba04:	2b00      	cmp	r3, #0
    ba06:	d104      	bne.n	ba12 <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    ba08:	4b50      	ldr	r3, [pc, #320]	; (bb4c <xQueueGenericReceive+0x1d4>)
    ba0a:	4798      	blx	r3
    ba0c:	0002      	movs	r2, r0
    ba0e:	6a3b      	ldr	r3, [r7, #32]
    ba10:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    ba12:	6a3b      	ldr	r3, [r7, #32]
    ba14:	691b      	ldr	r3, [r3, #16]
    ba16:	2b00      	cmp	r3, #0
    ba18:	d019      	beq.n	ba4e <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    ba1a:	6a3b      	ldr	r3, [r7, #32]
    ba1c:	3310      	adds	r3, #16
    ba1e:	0018      	movs	r0, r3
    ba20:	4b4b      	ldr	r3, [pc, #300]	; (bb50 <xQueueGenericReceive+0x1d8>)
    ba22:	4798      	blx	r3
    ba24:	1e03      	subs	r3, r0, #0
    ba26:	d012      	beq.n	ba4e <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    ba28:	4b4a      	ldr	r3, [pc, #296]	; (bb54 <xQueueGenericReceive+0x1dc>)
    ba2a:	4798      	blx	r3
    ba2c:	e00f      	b.n	ba4e <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    ba2e:	6a3b      	ldr	r3, [r7, #32]
    ba30:	69ba      	ldr	r2, [r7, #24]
    ba32:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    ba34:	6a3b      	ldr	r3, [r7, #32]
    ba36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ba38:	2b00      	cmp	r3, #0
    ba3a:	d008      	beq.n	ba4e <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    ba3c:	6a3b      	ldr	r3, [r7, #32]
    ba3e:	3324      	adds	r3, #36	; 0x24
    ba40:	0018      	movs	r0, r3
    ba42:	4b43      	ldr	r3, [pc, #268]	; (bb50 <xQueueGenericReceive+0x1d8>)
    ba44:	4798      	blx	r3
    ba46:	1e03      	subs	r3, r0, #0
    ba48:	d001      	beq.n	ba4e <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    ba4a:	4b42      	ldr	r3, [pc, #264]	; (bb54 <xQueueGenericReceive+0x1dc>)
    ba4c:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    ba4e:	4b42      	ldr	r3, [pc, #264]	; (bb58 <xQueueGenericReceive+0x1e0>)
    ba50:	4798      	blx	r3
				return pdPASS;
    ba52:	2301      	movs	r3, #1
    ba54:	e070      	b.n	bb38 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    ba56:	687b      	ldr	r3, [r7, #4]
    ba58:	2b00      	cmp	r3, #0
    ba5a:	d103      	bne.n	ba64 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    ba5c:	4b3e      	ldr	r3, [pc, #248]	; (bb58 <xQueueGenericReceive+0x1e0>)
    ba5e:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    ba60:	2300      	movs	r3, #0
    ba62:	e069      	b.n	bb38 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
    ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ba66:	2b00      	cmp	r3, #0
    ba68:	d106      	bne.n	ba78 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    ba6a:	2310      	movs	r3, #16
    ba6c:	18fb      	adds	r3, r7, r3
    ba6e:	0018      	movs	r0, r3
    ba70:	4b3a      	ldr	r3, [pc, #232]	; (bb5c <xQueueGenericReceive+0x1e4>)
    ba72:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    ba74:	2301      	movs	r3, #1
    ba76:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    ba78:	4b37      	ldr	r3, [pc, #220]	; (bb58 <xQueueGenericReceive+0x1e0>)
    ba7a:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    ba7c:	4b38      	ldr	r3, [pc, #224]	; (bb60 <xQueueGenericReceive+0x1e8>)
    ba7e:	4798      	blx	r3
		prvLockQueue( pxQueue );
    ba80:	4b30      	ldr	r3, [pc, #192]	; (bb44 <xQueueGenericReceive+0x1cc>)
    ba82:	4798      	blx	r3
    ba84:	6a3b      	ldr	r3, [r7, #32]
    ba86:	2244      	movs	r2, #68	; 0x44
    ba88:	5c9b      	ldrb	r3, [r3, r2]
    ba8a:	b25b      	sxtb	r3, r3
    ba8c:	3301      	adds	r3, #1
    ba8e:	d103      	bne.n	ba98 <xQueueGenericReceive+0x120>
    ba90:	6a3b      	ldr	r3, [r7, #32]
    ba92:	2244      	movs	r2, #68	; 0x44
    ba94:	2100      	movs	r1, #0
    ba96:	5499      	strb	r1, [r3, r2]
    ba98:	6a3b      	ldr	r3, [r7, #32]
    ba9a:	2245      	movs	r2, #69	; 0x45
    ba9c:	5c9b      	ldrb	r3, [r3, r2]
    ba9e:	b25b      	sxtb	r3, r3
    baa0:	3301      	adds	r3, #1
    baa2:	d103      	bne.n	baac <xQueueGenericReceive+0x134>
    baa4:	6a3b      	ldr	r3, [r7, #32]
    baa6:	2245      	movs	r2, #69	; 0x45
    baa8:	2100      	movs	r1, #0
    baaa:	5499      	strb	r1, [r3, r2]
    baac:	4b2a      	ldr	r3, [pc, #168]	; (bb58 <xQueueGenericReceive+0x1e0>)
    baae:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    bab0:	1d3a      	adds	r2, r7, #4
    bab2:	2310      	movs	r3, #16
    bab4:	18fb      	adds	r3, r7, r3
    bab6:	0011      	movs	r1, r2
    bab8:	0018      	movs	r0, r3
    baba:	4b2a      	ldr	r3, [pc, #168]	; (bb64 <xQueueGenericReceive+0x1ec>)
    babc:	4798      	blx	r3
    babe:	1e03      	subs	r3, r0, #0
    bac0:	d12c      	bne.n	bb1c <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    bac2:	6a3b      	ldr	r3, [r7, #32]
    bac4:	0018      	movs	r0, r3
    bac6:	4b28      	ldr	r3, [pc, #160]	; (bb68 <xQueueGenericReceive+0x1f0>)
    bac8:	4798      	blx	r3
    baca:	1e03      	subs	r3, r0, #0
    bacc:	d01f      	beq.n	bb0e <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    bace:	6a3b      	ldr	r3, [r7, #32]
    bad0:	681b      	ldr	r3, [r3, #0]
    bad2:	2b00      	cmp	r3, #0
    bad4:	d108      	bne.n	bae8 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
    bad6:	4b1b      	ldr	r3, [pc, #108]	; (bb44 <xQueueGenericReceive+0x1cc>)
    bad8:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    bada:	6a3b      	ldr	r3, [r7, #32]
    badc:	685b      	ldr	r3, [r3, #4]
    bade:	0018      	movs	r0, r3
    bae0:	4b22      	ldr	r3, [pc, #136]	; (bb6c <xQueueGenericReceive+0x1f4>)
    bae2:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    bae4:	4b1c      	ldr	r3, [pc, #112]	; (bb58 <xQueueGenericReceive+0x1e0>)
    bae6:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    bae8:	6a3b      	ldr	r3, [r7, #32]
    baea:	3324      	adds	r3, #36	; 0x24
    baec:	687a      	ldr	r2, [r7, #4]
    baee:	0011      	movs	r1, r2
    baf0:	0018      	movs	r0, r3
    baf2:	4b1f      	ldr	r3, [pc, #124]	; (bb70 <xQueueGenericReceive+0x1f8>)
    baf4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    baf6:	6a3b      	ldr	r3, [r7, #32]
    baf8:	0018      	movs	r0, r3
    bafa:	4b1e      	ldr	r3, [pc, #120]	; (bb74 <xQueueGenericReceive+0x1fc>)
    bafc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    bafe:	4b1e      	ldr	r3, [pc, #120]	; (bb78 <xQueueGenericReceive+0x200>)
    bb00:	4798      	blx	r3
    bb02:	1e03      	subs	r3, r0, #0
    bb04:	d000      	beq.n	bb08 <xQueueGenericReceive+0x190>
    bb06:	e763      	b.n	b9d0 <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
    bb08:	4b12      	ldr	r3, [pc, #72]	; (bb54 <xQueueGenericReceive+0x1dc>)
    bb0a:	4798      	blx	r3
    bb0c:	e760      	b.n	b9d0 <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    bb0e:	6a3b      	ldr	r3, [r7, #32]
    bb10:	0018      	movs	r0, r3
    bb12:	4b18      	ldr	r3, [pc, #96]	; (bb74 <xQueueGenericReceive+0x1fc>)
    bb14:	4798      	blx	r3
				( void ) xTaskResumeAll();
    bb16:	4b18      	ldr	r3, [pc, #96]	; (bb78 <xQueueGenericReceive+0x200>)
    bb18:	4798      	blx	r3
    bb1a:	e759      	b.n	b9d0 <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    bb1c:	6a3b      	ldr	r3, [r7, #32]
    bb1e:	0018      	movs	r0, r3
    bb20:	4b14      	ldr	r3, [pc, #80]	; (bb74 <xQueueGenericReceive+0x1fc>)
    bb22:	4798      	blx	r3
			( void ) xTaskResumeAll();
    bb24:	4b14      	ldr	r3, [pc, #80]	; (bb78 <xQueueGenericReceive+0x200>)
    bb26:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    bb28:	6a3b      	ldr	r3, [r7, #32]
    bb2a:	0018      	movs	r0, r3
    bb2c:	4b0e      	ldr	r3, [pc, #56]	; (bb68 <xQueueGenericReceive+0x1f0>)
    bb2e:	4798      	blx	r3
    bb30:	1e03      	subs	r3, r0, #0
    bb32:	d100      	bne.n	bb36 <xQueueGenericReceive+0x1be>
    bb34:	e74c      	b.n	b9d0 <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    bb36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    bb38:	0018      	movs	r0, r3
    bb3a:	46bd      	mov	sp, r7
    bb3c:	b00a      	add	sp, #40	; 0x28
    bb3e:	bd80      	pop	{r7, pc}
    bb40:	0000cb0d 	.word	0x0000cb0d
    bb44:	0000b2b9 	.word	0x0000b2b9
    bb48:	0000bc5d 	.word	0x0000bc5d
    bb4c:	0000ccc9 	.word	0x0000ccc9
    bb50:	0000c7b9 	.word	0x0000c7b9
    bb54:	0000b299 	.word	0x0000b299
    bb58:	0000b2dd 	.word	0x0000b2dd
    bb5c:	0000c879 	.word	0x0000c879
    bb60:	0000c399 	.word	0x0000c399
    bb64:	0000c8ad 	.word	0x0000c8ad
    bb68:	0000bd9d 	.word	0x0000bd9d
    bb6c:	0000cb45 	.word	0x0000cb45
    bb70:	0000c721 	.word	0x0000c721
    bb74:	0000bcad 	.word	0x0000bcad
    bb78:	0000c3b1 	.word	0x0000c3b1

0000bb7c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    bb7c:	b580      	push	{r7, lr}
    bb7e:	b086      	sub	sp, #24
    bb80:	af00      	add	r7, sp, #0
    bb82:	60f8      	str	r0, [r7, #12]
    bb84:	60b9      	str	r1, [r7, #8]
    bb86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    bb88:	2300      	movs	r3, #0
    bb8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    bb8c:	68fb      	ldr	r3, [r7, #12]
    bb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    bb90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    bb92:	68fb      	ldr	r3, [r7, #12]
    bb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    bb96:	2b00      	cmp	r3, #0
    bb98:	d10e      	bne.n	bbb8 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    bb9a:	68fb      	ldr	r3, [r7, #12]
    bb9c:	681b      	ldr	r3, [r3, #0]
    bb9e:	2b00      	cmp	r3, #0
    bba0:	d14e      	bne.n	bc40 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    bba2:	68fb      	ldr	r3, [r7, #12]
    bba4:	685b      	ldr	r3, [r3, #4]
    bba6:	0018      	movs	r0, r3
    bba8:	4b2a      	ldr	r3, [pc, #168]	; (bc54 <prvCopyDataToQueue+0xd8>)
    bbaa:	4798      	blx	r3
    bbac:	0003      	movs	r3, r0
    bbae:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    bbb0:	68fb      	ldr	r3, [r7, #12]
    bbb2:	2200      	movs	r2, #0
    bbb4:	605a      	str	r2, [r3, #4]
    bbb6:	e043      	b.n	bc40 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    bbb8:	687b      	ldr	r3, [r7, #4]
    bbba:	2b00      	cmp	r3, #0
    bbbc:	d119      	bne.n	bbf2 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    bbbe:	68fb      	ldr	r3, [r7, #12]
    bbc0:	6898      	ldr	r0, [r3, #8]
    bbc2:	68fb      	ldr	r3, [r7, #12]
    bbc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    bbc6:	68bb      	ldr	r3, [r7, #8]
    bbc8:	0019      	movs	r1, r3
    bbca:	4b23      	ldr	r3, [pc, #140]	; (bc58 <prvCopyDataToQueue+0xdc>)
    bbcc:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    bbce:	68fb      	ldr	r3, [r7, #12]
    bbd0:	689a      	ldr	r2, [r3, #8]
    bbd2:	68fb      	ldr	r3, [r7, #12]
    bbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    bbd6:	18d2      	adds	r2, r2, r3
    bbd8:	68fb      	ldr	r3, [r7, #12]
    bbda:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    bbdc:	68fb      	ldr	r3, [r7, #12]
    bbde:	689a      	ldr	r2, [r3, #8]
    bbe0:	68fb      	ldr	r3, [r7, #12]
    bbe2:	685b      	ldr	r3, [r3, #4]
    bbe4:	429a      	cmp	r2, r3
    bbe6:	d32b      	bcc.n	bc40 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    bbe8:	68fb      	ldr	r3, [r7, #12]
    bbea:	681a      	ldr	r2, [r3, #0]
    bbec:	68fb      	ldr	r3, [r7, #12]
    bbee:	609a      	str	r2, [r3, #8]
    bbf0:	e026      	b.n	bc40 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    bbf2:	68fb      	ldr	r3, [r7, #12]
    bbf4:	68d8      	ldr	r0, [r3, #12]
    bbf6:	68fb      	ldr	r3, [r7, #12]
    bbf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    bbfa:	68bb      	ldr	r3, [r7, #8]
    bbfc:	0019      	movs	r1, r3
    bbfe:	4b16      	ldr	r3, [pc, #88]	; (bc58 <prvCopyDataToQueue+0xdc>)
    bc00:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    bc02:	68fb      	ldr	r3, [r7, #12]
    bc04:	68da      	ldr	r2, [r3, #12]
    bc06:	68fb      	ldr	r3, [r7, #12]
    bc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    bc0a:	425b      	negs	r3, r3
    bc0c:	18d2      	adds	r2, r2, r3
    bc0e:	68fb      	ldr	r3, [r7, #12]
    bc10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    bc12:	68fb      	ldr	r3, [r7, #12]
    bc14:	68da      	ldr	r2, [r3, #12]
    bc16:	68fb      	ldr	r3, [r7, #12]
    bc18:	681b      	ldr	r3, [r3, #0]
    bc1a:	429a      	cmp	r2, r3
    bc1c:	d207      	bcs.n	bc2e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    bc1e:	68fb      	ldr	r3, [r7, #12]
    bc20:	685a      	ldr	r2, [r3, #4]
    bc22:	68fb      	ldr	r3, [r7, #12]
    bc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    bc26:	425b      	negs	r3, r3
    bc28:	18d2      	adds	r2, r2, r3
    bc2a:	68fb      	ldr	r3, [r7, #12]
    bc2c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    bc2e:	687b      	ldr	r3, [r7, #4]
    bc30:	2b02      	cmp	r3, #2
    bc32:	d105      	bne.n	bc40 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    bc34:	693b      	ldr	r3, [r7, #16]
    bc36:	2b00      	cmp	r3, #0
    bc38:	d002      	beq.n	bc40 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    bc3a:	693b      	ldr	r3, [r7, #16]
    bc3c:	3b01      	subs	r3, #1
    bc3e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    bc40:	693b      	ldr	r3, [r7, #16]
    bc42:	1c5a      	adds	r2, r3, #1
    bc44:	68fb      	ldr	r3, [r7, #12]
    bc46:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    bc48:	697b      	ldr	r3, [r7, #20]
}
    bc4a:	0018      	movs	r0, r3
    bc4c:	46bd      	mov	sp, r7
    bc4e:	b006      	add	sp, #24
    bc50:	bd80      	pop	{r7, pc}
    bc52:	46c0      	nop			; (mov r8, r8)
    bc54:	0000cc09 	.word	0x0000cc09
    bc58:	0000fb09 	.word	0x0000fb09

0000bc5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    bc5c:	b580      	push	{r7, lr}
    bc5e:	b082      	sub	sp, #8
    bc60:	af00      	add	r7, sp, #0
    bc62:	6078      	str	r0, [r7, #4]
    bc64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    bc66:	687b      	ldr	r3, [r7, #4]
    bc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    bc6a:	2b00      	cmp	r3, #0
    bc6c:	d018      	beq.n	bca0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    bc6e:	687b      	ldr	r3, [r7, #4]
    bc70:	68da      	ldr	r2, [r3, #12]
    bc72:	687b      	ldr	r3, [r7, #4]
    bc74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    bc76:	18d2      	adds	r2, r2, r3
    bc78:	687b      	ldr	r3, [r7, #4]
    bc7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    bc7c:	687b      	ldr	r3, [r7, #4]
    bc7e:	68da      	ldr	r2, [r3, #12]
    bc80:	687b      	ldr	r3, [r7, #4]
    bc82:	685b      	ldr	r3, [r3, #4]
    bc84:	429a      	cmp	r2, r3
    bc86:	d303      	bcc.n	bc90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    bc88:	687b      	ldr	r3, [r7, #4]
    bc8a:	681a      	ldr	r2, [r3, #0]
    bc8c:	687b      	ldr	r3, [r7, #4]
    bc8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    bc90:	687b      	ldr	r3, [r7, #4]
    bc92:	68d9      	ldr	r1, [r3, #12]
    bc94:	687b      	ldr	r3, [r7, #4]
    bc96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    bc98:	683b      	ldr	r3, [r7, #0]
    bc9a:	0018      	movs	r0, r3
    bc9c:	4b02      	ldr	r3, [pc, #8]	; (bca8 <prvCopyDataFromQueue+0x4c>)
    bc9e:	4798      	blx	r3
	}
}
    bca0:	46c0      	nop			; (mov r8, r8)
    bca2:	46bd      	mov	sp, r7
    bca4:	b002      	add	sp, #8
    bca6:	bd80      	pop	{r7, pc}
    bca8:	0000fb09 	.word	0x0000fb09

0000bcac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    bcac:	b580      	push	{r7, lr}
    bcae:	b084      	sub	sp, #16
    bcb0:	af00      	add	r7, sp, #0
    bcb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    bcb4:	4b34      	ldr	r3, [pc, #208]	; (bd88 <prvUnlockQueue+0xdc>)
    bcb6:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    bcb8:	230f      	movs	r3, #15
    bcba:	18fb      	adds	r3, r7, r3
    bcbc:	687a      	ldr	r2, [r7, #4]
    bcbe:	2145      	movs	r1, #69	; 0x45
    bcc0:	5c52      	ldrb	r2, [r2, r1]
    bcc2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    bcc4:	e022      	b.n	bd0c <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    bcc6:	687b      	ldr	r3, [r7, #4]
    bcc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    bcca:	2b00      	cmp	r3, #0
    bccc:	d009      	beq.n	bce2 <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    bcce:	687b      	ldr	r3, [r7, #4]
    bcd0:	2100      	movs	r1, #0
    bcd2:	0018      	movs	r0, r3
    bcd4:	4b2d      	ldr	r3, [pc, #180]	; (bd8c <prvUnlockQueue+0xe0>)
    bcd6:	4798      	blx	r3
    bcd8:	1e03      	subs	r3, r0, #0
    bcda:	d00f      	beq.n	bcfc <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    bcdc:	4b2c      	ldr	r3, [pc, #176]	; (bd90 <prvUnlockQueue+0xe4>)
    bcde:	4798      	blx	r3
    bce0:	e00c      	b.n	bcfc <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    bce2:	687b      	ldr	r3, [r7, #4]
    bce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bce6:	2b00      	cmp	r3, #0
    bce8:	d017      	beq.n	bd1a <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    bcea:	687b      	ldr	r3, [r7, #4]
    bcec:	3324      	adds	r3, #36	; 0x24
    bcee:	0018      	movs	r0, r3
    bcf0:	4b28      	ldr	r3, [pc, #160]	; (bd94 <prvUnlockQueue+0xe8>)
    bcf2:	4798      	blx	r3
    bcf4:	1e03      	subs	r3, r0, #0
    bcf6:	d001      	beq.n	bcfc <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    bcf8:	4b25      	ldr	r3, [pc, #148]	; (bd90 <prvUnlockQueue+0xe4>)
    bcfa:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    bcfc:	230f      	movs	r3, #15
    bcfe:	18fb      	adds	r3, r7, r3
    bd00:	781b      	ldrb	r3, [r3, #0]
    bd02:	3b01      	subs	r3, #1
    bd04:	b2da      	uxtb	r2, r3
    bd06:	230f      	movs	r3, #15
    bd08:	18fb      	adds	r3, r7, r3
    bd0a:	701a      	strb	r2, [r3, #0]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    bd0c:	230f      	movs	r3, #15
    bd0e:	18fb      	adds	r3, r7, r3
    bd10:	781b      	ldrb	r3, [r3, #0]
    bd12:	b25b      	sxtb	r3, r3
    bd14:	2b00      	cmp	r3, #0
    bd16:	dcd6      	bgt.n	bcc6 <prvUnlockQueue+0x1a>
    bd18:	e000      	b.n	bd1c <prvUnlockQueue+0x70>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    bd1a:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    bd1c:	687b      	ldr	r3, [r7, #4]
    bd1e:	2245      	movs	r2, #69	; 0x45
    bd20:	21ff      	movs	r1, #255	; 0xff
    bd22:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    bd24:	4b1c      	ldr	r3, [pc, #112]	; (bd98 <prvUnlockQueue+0xec>)
    bd26:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    bd28:	4b17      	ldr	r3, [pc, #92]	; (bd88 <prvUnlockQueue+0xdc>)
    bd2a:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    bd2c:	230e      	movs	r3, #14
    bd2e:	18fb      	adds	r3, r7, r3
    bd30:	687a      	ldr	r2, [r7, #4]
    bd32:	2144      	movs	r1, #68	; 0x44
    bd34:	5c52      	ldrb	r2, [r2, r1]
    bd36:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    bd38:	e014      	b.n	bd64 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    bd3a:	687b      	ldr	r3, [r7, #4]
    bd3c:	691b      	ldr	r3, [r3, #16]
    bd3e:	2b00      	cmp	r3, #0
    bd40:	d017      	beq.n	bd72 <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    bd42:	687b      	ldr	r3, [r7, #4]
    bd44:	3310      	adds	r3, #16
    bd46:	0018      	movs	r0, r3
    bd48:	4b12      	ldr	r3, [pc, #72]	; (bd94 <prvUnlockQueue+0xe8>)
    bd4a:	4798      	blx	r3
    bd4c:	1e03      	subs	r3, r0, #0
    bd4e:	d001      	beq.n	bd54 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    bd50:	4b0f      	ldr	r3, [pc, #60]	; (bd90 <prvUnlockQueue+0xe4>)
    bd52:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    bd54:	230e      	movs	r3, #14
    bd56:	18fb      	adds	r3, r7, r3
    bd58:	781b      	ldrb	r3, [r3, #0]
    bd5a:	3b01      	subs	r3, #1
    bd5c:	b2da      	uxtb	r2, r3
    bd5e:	230e      	movs	r3, #14
    bd60:	18fb      	adds	r3, r7, r3
    bd62:	701a      	strb	r2, [r3, #0]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    bd64:	230e      	movs	r3, #14
    bd66:	18fb      	adds	r3, r7, r3
    bd68:	781b      	ldrb	r3, [r3, #0]
    bd6a:	b25b      	sxtb	r3, r3
    bd6c:	2b00      	cmp	r3, #0
    bd6e:	dce4      	bgt.n	bd3a <prvUnlockQueue+0x8e>
    bd70:	e000      	b.n	bd74 <prvUnlockQueue+0xc8>

				--cRxLock;
			}
			else
			{
				break;
    bd72:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    bd74:	687b      	ldr	r3, [r7, #4]
    bd76:	2244      	movs	r2, #68	; 0x44
    bd78:	21ff      	movs	r1, #255	; 0xff
    bd7a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    bd7c:	4b06      	ldr	r3, [pc, #24]	; (bd98 <prvUnlockQueue+0xec>)
    bd7e:	4798      	blx	r3
}
    bd80:	46c0      	nop			; (mov r8, r8)
    bd82:	46bd      	mov	sp, r7
    bd84:	b004      	add	sp, #16
    bd86:	bd80      	pop	{r7, pc}
    bd88:	0000b2b9 	.word	0x0000b2b9
    bd8c:	0000bed1 	.word	0x0000bed1
    bd90:	0000c955 	.word	0x0000c955
    bd94:	0000c7b9 	.word	0x0000c7b9
    bd98:	0000b2dd 	.word	0x0000b2dd

0000bd9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    bd9c:	b580      	push	{r7, lr}
    bd9e:	b084      	sub	sp, #16
    bda0:	af00      	add	r7, sp, #0
    bda2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    bda4:	4b08      	ldr	r3, [pc, #32]	; (bdc8 <prvIsQueueEmpty+0x2c>)
    bda6:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    bda8:	687b      	ldr	r3, [r7, #4]
    bdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    bdac:	2b00      	cmp	r3, #0
    bdae:	d102      	bne.n	bdb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    bdb0:	2301      	movs	r3, #1
    bdb2:	60fb      	str	r3, [r7, #12]
    bdb4:	e001      	b.n	bdba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    bdb6:	2300      	movs	r3, #0
    bdb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    bdba:	4b04      	ldr	r3, [pc, #16]	; (bdcc <prvIsQueueEmpty+0x30>)
    bdbc:	4798      	blx	r3

	return xReturn;
    bdbe:	68fb      	ldr	r3, [r7, #12]
}
    bdc0:	0018      	movs	r0, r3
    bdc2:	46bd      	mov	sp, r7
    bdc4:	b004      	add	sp, #16
    bdc6:	bd80      	pop	{r7, pc}
    bdc8:	0000b2b9 	.word	0x0000b2b9
    bdcc:	0000b2dd 	.word	0x0000b2dd

0000bdd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    bdd0:	b580      	push	{r7, lr}
    bdd2:	b084      	sub	sp, #16
    bdd4:	af00      	add	r7, sp, #0
    bdd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    bdd8:	4b09      	ldr	r3, [pc, #36]	; (be00 <prvIsQueueFull+0x30>)
    bdda:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    bddc:	687b      	ldr	r3, [r7, #4]
    bdde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    bde0:	687b      	ldr	r3, [r7, #4]
    bde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    bde4:	429a      	cmp	r2, r3
    bde6:	d102      	bne.n	bdee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    bde8:	2301      	movs	r3, #1
    bdea:	60fb      	str	r3, [r7, #12]
    bdec:	e001      	b.n	bdf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    bdee:	2300      	movs	r3, #0
    bdf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    bdf2:	4b04      	ldr	r3, [pc, #16]	; (be04 <prvIsQueueFull+0x34>)
    bdf4:	4798      	blx	r3

	return xReturn;
    bdf6:	68fb      	ldr	r3, [r7, #12]
}
    bdf8:	0018      	movs	r0, r3
    bdfa:	46bd      	mov	sp, r7
    bdfc:	b004      	add	sp, #16
    bdfe:	bd80      	pop	{r7, pc}
    be00:	0000b2b9 	.word	0x0000b2b9
    be04:	0000b2dd 	.word	0x0000b2dd

0000be08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    be08:	b580      	push	{r7, lr}
    be0a:	b084      	sub	sp, #16
    be0c:	af00      	add	r7, sp, #0
    be0e:	6078      	str	r0, [r7, #4]
    be10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    be12:	2300      	movs	r3, #0
    be14:	60fb      	str	r3, [r7, #12]
    be16:	e015      	b.n	be44 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
    be18:	4b0e      	ldr	r3, [pc, #56]	; (be54 <vQueueAddToRegistry+0x4c>)
    be1a:	68fa      	ldr	r2, [r7, #12]
    be1c:	00d2      	lsls	r2, r2, #3
    be1e:	58d3      	ldr	r3, [r2, r3]
    be20:	2b00      	cmp	r3, #0
    be22:	d10c      	bne.n	be3e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
    be24:	4b0b      	ldr	r3, [pc, #44]	; (be54 <vQueueAddToRegistry+0x4c>)
    be26:	68fa      	ldr	r2, [r7, #12]
    be28:	00d2      	lsls	r2, r2, #3
    be2a:	6839      	ldr	r1, [r7, #0]
    be2c:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
    be2e:	4a09      	ldr	r2, [pc, #36]	; (be54 <vQueueAddToRegistry+0x4c>)
    be30:	68fb      	ldr	r3, [r7, #12]
    be32:	00db      	lsls	r3, r3, #3
    be34:	18d3      	adds	r3, r2, r3
    be36:	3304      	adds	r3, #4
    be38:	687a      	ldr	r2, [r7, #4]
    be3a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
    be3c:	e005      	b.n	be4a <vQueueAddToRegistry+0x42>
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
    be3e:	68fb      	ldr	r3, [r7, #12]
    be40:	3301      	adds	r3, #1
    be42:	60fb      	str	r3, [r7, #12]
    be44:	68fb      	ldr	r3, [r7, #12]
    be46:	2b04      	cmp	r3, #4
    be48:	d9e6      	bls.n	be18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    be4a:	46c0      	nop			; (mov r8, r8)
    be4c:	46bd      	mov	sp, r7
    be4e:	b004      	add	sp, #16
    be50:	bd80      	pop	{r7, pc}
    be52:	46c0      	nop			; (mov r8, r8)
    be54:	2000479c 	.word	0x2000479c

0000be58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    be58:	b580      	push	{r7, lr}
    be5a:	b086      	sub	sp, #24
    be5c:	af00      	add	r7, sp, #0
    be5e:	60f8      	str	r0, [r7, #12]
    be60:	60b9      	str	r1, [r7, #8]
    be62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    be64:	68fb      	ldr	r3, [r7, #12]
    be66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    be68:	4b15      	ldr	r3, [pc, #84]	; (bec0 <vQueueWaitForMessageRestricted+0x68>)
    be6a:	4798      	blx	r3
    be6c:	697b      	ldr	r3, [r7, #20]
    be6e:	2244      	movs	r2, #68	; 0x44
    be70:	5c9b      	ldrb	r3, [r3, r2]
    be72:	b25b      	sxtb	r3, r3
    be74:	3301      	adds	r3, #1
    be76:	d103      	bne.n	be80 <vQueueWaitForMessageRestricted+0x28>
    be78:	697b      	ldr	r3, [r7, #20]
    be7a:	2244      	movs	r2, #68	; 0x44
    be7c:	2100      	movs	r1, #0
    be7e:	5499      	strb	r1, [r3, r2]
    be80:	697b      	ldr	r3, [r7, #20]
    be82:	2245      	movs	r2, #69	; 0x45
    be84:	5c9b      	ldrb	r3, [r3, r2]
    be86:	b25b      	sxtb	r3, r3
    be88:	3301      	adds	r3, #1
    be8a:	d103      	bne.n	be94 <vQueueWaitForMessageRestricted+0x3c>
    be8c:	697b      	ldr	r3, [r7, #20]
    be8e:	2245      	movs	r2, #69	; 0x45
    be90:	2100      	movs	r1, #0
    be92:	5499      	strb	r1, [r3, r2]
    be94:	4b0b      	ldr	r3, [pc, #44]	; (bec4 <vQueueWaitForMessageRestricted+0x6c>)
    be96:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    be98:	697b      	ldr	r3, [r7, #20]
    be9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    be9c:	2b00      	cmp	r3, #0
    be9e:	d106      	bne.n	beae <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    bea0:	697b      	ldr	r3, [r7, #20]
    bea2:	3324      	adds	r3, #36	; 0x24
    bea4:	687a      	ldr	r2, [r7, #4]
    bea6:	68b9      	ldr	r1, [r7, #8]
    bea8:	0018      	movs	r0, r3
    beaa:	4b07      	ldr	r3, [pc, #28]	; (bec8 <vQueueWaitForMessageRestricted+0x70>)
    beac:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    beae:	697b      	ldr	r3, [r7, #20]
    beb0:	0018      	movs	r0, r3
    beb2:	4b06      	ldr	r3, [pc, #24]	; (becc <vQueueWaitForMessageRestricted+0x74>)
    beb4:	4798      	blx	r3
	}
    beb6:	46c0      	nop			; (mov r8, r8)
    beb8:	46bd      	mov	sp, r7
    beba:	b006      	add	sp, #24
    bebc:	bd80      	pop	{r7, pc}
    bebe:	46c0      	nop			; (mov r8, r8)
    bec0:	0000b2b9 	.word	0x0000b2b9
    bec4:	0000b2dd 	.word	0x0000b2dd
    bec8:	0000c765 	.word	0x0000c765
    becc:	0000bcad 	.word	0x0000bcad

0000bed0 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    bed0:	b580      	push	{r7, lr}
    bed2:	b086      	sub	sp, #24
    bed4:	af00      	add	r7, sp, #0
    bed6:	6078      	str	r0, [r7, #4]
    bed8:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    beda:	687b      	ldr	r3, [r7, #4]
    bedc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    bede:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    bee0:	2300      	movs	r3, #0
    bee2:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    bee4:	693b      	ldr	r3, [r7, #16]
    bee6:	2b00      	cmp	r3, #0
    bee8:	d101      	bne.n	beee <prvNotifyQueueSetContainer+0x1e>
    beea:	b672      	cpsid	i
    beec:	e7fe      	b.n	beec <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    beee:	693b      	ldr	r3, [r7, #16]
    bef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    bef2:	693b      	ldr	r3, [r7, #16]
    bef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    bef6:	429a      	cmp	r2, r3
    bef8:	d301      	bcc.n	befe <prvNotifyQueueSetContainer+0x2e>
    befa:	b672      	cpsid	i
    befc:	e7fe      	b.n	befc <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    befe:	693b      	ldr	r3, [r7, #16]
    bf00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    bf02:	693b      	ldr	r3, [r7, #16]
    bf04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    bf06:	429a      	cmp	r2, r3
    bf08:	d22a      	bcs.n	bf60 <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    bf0a:	230f      	movs	r3, #15
    bf0c:	18fb      	adds	r3, r7, r3
    bf0e:	693a      	ldr	r2, [r7, #16]
    bf10:	2145      	movs	r1, #69	; 0x45
    bf12:	5c52      	ldrb	r2, [r2, r1]
    bf14:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    bf16:	683a      	ldr	r2, [r7, #0]
    bf18:	1d39      	adds	r1, r7, #4
    bf1a:	693b      	ldr	r3, [r7, #16]
    bf1c:	0018      	movs	r0, r3
    bf1e:	4b13      	ldr	r3, [pc, #76]	; (bf6c <prvNotifyQueueSetContainer+0x9c>)
    bf20:	4798      	blx	r3
    bf22:	0003      	movs	r3, r0
    bf24:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    bf26:	230f      	movs	r3, #15
    bf28:	18fb      	adds	r3, r7, r3
    bf2a:	781b      	ldrb	r3, [r3, #0]
    bf2c:	b25b      	sxtb	r3, r3
    bf2e:	3301      	adds	r3, #1
    bf30:	d10d      	bne.n	bf4e <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    bf32:	693b      	ldr	r3, [r7, #16]
    bf34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    bf36:	2b00      	cmp	r3, #0
    bf38:	d012      	beq.n	bf60 <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    bf3a:	693b      	ldr	r3, [r7, #16]
    bf3c:	3324      	adds	r3, #36	; 0x24
    bf3e:	0018      	movs	r0, r3
    bf40:	4b0b      	ldr	r3, [pc, #44]	; (bf70 <prvNotifyQueueSetContainer+0xa0>)
    bf42:	4798      	blx	r3
    bf44:	1e03      	subs	r3, r0, #0
    bf46:	d00b      	beq.n	bf60 <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    bf48:	2301      	movs	r3, #1
    bf4a:	617b      	str	r3, [r7, #20]
    bf4c:	e008      	b.n	bf60 <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    bf4e:	230f      	movs	r3, #15
    bf50:	18fb      	adds	r3, r7, r3
    bf52:	781b      	ldrb	r3, [r3, #0]
    bf54:	3301      	adds	r3, #1
    bf56:	b2db      	uxtb	r3, r3
    bf58:	b259      	sxtb	r1, r3
    bf5a:	693b      	ldr	r3, [r7, #16]
    bf5c:	2245      	movs	r2, #69	; 0x45
    bf5e:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    bf60:	697b      	ldr	r3, [r7, #20]
	}
    bf62:	0018      	movs	r0, r3
    bf64:	46bd      	mov	sp, r7
    bf66:	b006      	add	sp, #24
    bf68:	bd80      	pop	{r7, pc}
    bf6a:	46c0      	nop			; (mov r8, r8)
    bf6c:	0000bb7d 	.word	0x0000bb7d
    bf70:	0000c7b9 	.word	0x0000c7b9

0000bf74 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    bf74:	b590      	push	{r4, r7, lr}
    bf76:	b08d      	sub	sp, #52	; 0x34
    bf78:	af04      	add	r7, sp, #16
    bf7a:	60f8      	str	r0, [r7, #12]
    bf7c:	60b9      	str	r1, [r7, #8]
    bf7e:	603b      	str	r3, [r7, #0]
    bf80:	1dbb      	adds	r3, r7, #6
    bf82:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    bf84:	1dbb      	adds	r3, r7, #6
    bf86:	881b      	ldrh	r3, [r3, #0]
    bf88:	009b      	lsls	r3, r3, #2
    bf8a:	0018      	movs	r0, r3
    bf8c:	4b1d      	ldr	r3, [pc, #116]	; (c004 <xTaskCreate+0x90>)
    bf8e:	4798      	blx	r3
    bf90:	0003      	movs	r3, r0
    bf92:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    bf94:	697b      	ldr	r3, [r7, #20]
    bf96:	2b00      	cmp	r3, #0
    bf98:	d010      	beq.n	bfbc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    bf9a:	2050      	movs	r0, #80	; 0x50
    bf9c:	4b19      	ldr	r3, [pc, #100]	; (c004 <xTaskCreate+0x90>)
    bf9e:	4798      	blx	r3
    bfa0:	0003      	movs	r3, r0
    bfa2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    bfa4:	69fb      	ldr	r3, [r7, #28]
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	d003      	beq.n	bfb2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    bfaa:	69fb      	ldr	r3, [r7, #28]
    bfac:	697a      	ldr	r2, [r7, #20]
    bfae:	631a      	str	r2, [r3, #48]	; 0x30
    bfb0:	e006      	b.n	bfc0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    bfb2:	697b      	ldr	r3, [r7, #20]
    bfb4:	0018      	movs	r0, r3
    bfb6:	4b14      	ldr	r3, [pc, #80]	; (c008 <xTaskCreate+0x94>)
    bfb8:	4798      	blx	r3
    bfba:	e001      	b.n	bfc0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    bfbc:	2300      	movs	r3, #0
    bfbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    bfc0:	69fb      	ldr	r3, [r7, #28]
    bfc2:	2b00      	cmp	r3, #0
    bfc4:	d016      	beq.n	bff4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    bfc6:	1dbb      	adds	r3, r7, #6
    bfc8:	881a      	ldrh	r2, [r3, #0]
    bfca:	683c      	ldr	r4, [r7, #0]
    bfcc:	68b9      	ldr	r1, [r7, #8]
    bfce:	68f8      	ldr	r0, [r7, #12]
    bfd0:	2300      	movs	r3, #0
    bfd2:	9303      	str	r3, [sp, #12]
    bfd4:	69fb      	ldr	r3, [r7, #28]
    bfd6:	9302      	str	r3, [sp, #8]
    bfd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    bfda:	9301      	str	r3, [sp, #4]
    bfdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    bfde:	9300      	str	r3, [sp, #0]
    bfe0:	0023      	movs	r3, r4
    bfe2:	4c0a      	ldr	r4, [pc, #40]	; (c00c <xTaskCreate+0x98>)
    bfe4:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    bfe6:	69fb      	ldr	r3, [r7, #28]
    bfe8:	0018      	movs	r0, r3
    bfea:	4b09      	ldr	r3, [pc, #36]	; (c010 <xTaskCreate+0x9c>)
    bfec:	4798      	blx	r3
			xReturn = pdPASS;
    bfee:	2301      	movs	r3, #1
    bff0:	61bb      	str	r3, [r7, #24]
    bff2:	e002      	b.n	bffa <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    bff4:	2301      	movs	r3, #1
    bff6:	425b      	negs	r3, r3
    bff8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    bffa:	69bb      	ldr	r3, [r7, #24]
	}
    bffc:	0018      	movs	r0, r3
    bffe:	46bd      	mov	sp, r7
    c000:	b009      	add	sp, #36	; 0x24
    c002:	bd90      	pop	{r4, r7, pc}
    c004:	0000b3cd 	.word	0x0000b3cd
    c008:	0000b46d 	.word	0x0000b46d
    c00c:	0000c015 	.word	0x0000c015
    c010:	0000c111 	.word	0x0000c111

0000c014 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    c014:	b580      	push	{r7, lr}
    c016:	b086      	sub	sp, #24
    c018:	af00      	add	r7, sp, #0
    c01a:	60f8      	str	r0, [r7, #12]
    c01c:	60b9      	str	r1, [r7, #8]
    c01e:	607a      	str	r2, [r7, #4]
    c020:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    c026:	687b      	ldr	r3, [r7, #4]
    c028:	4936      	ldr	r1, [pc, #216]	; (c104 <prvInitialiseNewTask+0xf0>)
    c02a:	468c      	mov	ip, r1
    c02c:	4463      	add	r3, ip
    c02e:	009b      	lsls	r3, r3, #2
    c030:	18d3      	adds	r3, r2, r3
    c032:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    c034:	693b      	ldr	r3, [r7, #16]
    c036:	2207      	movs	r2, #7
    c038:	4393      	bics	r3, r2
    c03a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    c03c:	693b      	ldr	r3, [r7, #16]
    c03e:	2207      	movs	r2, #7
    c040:	4013      	ands	r3, r2
    c042:	d001      	beq.n	c048 <prvInitialiseNewTask+0x34>
    c044:	b672      	cpsid	i
    c046:	e7fe      	b.n	c046 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    c048:	2300      	movs	r3, #0
    c04a:	617b      	str	r3, [r7, #20]
    c04c:	e013      	b.n	c076 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    c04e:	68ba      	ldr	r2, [r7, #8]
    c050:	697b      	ldr	r3, [r7, #20]
    c052:	18d3      	adds	r3, r2, r3
    c054:	7818      	ldrb	r0, [r3, #0]
    c056:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c058:	2134      	movs	r1, #52	; 0x34
    c05a:	697b      	ldr	r3, [r7, #20]
    c05c:	18d3      	adds	r3, r2, r3
    c05e:	185b      	adds	r3, r3, r1
    c060:	1c02      	adds	r2, r0, #0
    c062:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    c064:	68ba      	ldr	r2, [r7, #8]
    c066:	697b      	ldr	r3, [r7, #20]
    c068:	18d3      	adds	r3, r2, r3
    c06a:	781b      	ldrb	r3, [r3, #0]
    c06c:	2b00      	cmp	r3, #0
    c06e:	d006      	beq.n	c07e <prvInitialiseNewTask+0x6a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    c070:	697b      	ldr	r3, [r7, #20]
    c072:	3301      	adds	r3, #1
    c074:	617b      	str	r3, [r7, #20]
    c076:	697b      	ldr	r3, [r7, #20]
    c078:	2b0b      	cmp	r3, #11
    c07a:	d9e8      	bls.n	c04e <prvInitialiseNewTask+0x3a>
    c07c:	e000      	b.n	c080 <prvInitialiseNewTask+0x6c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    c07e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c082:	223f      	movs	r2, #63	; 0x3f
    c084:	2100      	movs	r1, #0
    c086:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    c088:	6a3b      	ldr	r3, [r7, #32]
    c08a:	2b04      	cmp	r3, #4
    c08c:	d901      	bls.n	c092 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    c08e:	2304      	movs	r3, #4
    c090:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    c092:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c094:	6a3a      	ldr	r2, [r7, #32]
    c096:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c09a:	6a3a      	ldr	r2, [r7, #32]
    c09c:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0a0:	2200      	movs	r2, #0
    c0a2:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    c0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0a6:	3304      	adds	r3, #4
    c0a8:	0018      	movs	r0, r3
    c0aa:	4b17      	ldr	r3, [pc, #92]	; (c108 <prvInitialiseNewTask+0xf4>)
    c0ac:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0b0:	3318      	adds	r3, #24
    c0b2:	0018      	movs	r0, r3
    c0b4:	4b14      	ldr	r3, [pc, #80]	; (c108 <prvInitialiseNewTask+0xf4>)
    c0b6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c0bc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c0be:	6a3b      	ldr	r3, [r7, #32]
    c0c0:	2205      	movs	r2, #5
    c0c2:	1ad2      	subs	r2, r2, r3
    c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0c6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    c0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c0cc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    c0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0d0:	2200      	movs	r2, #0
    c0d2:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    c0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0d6:	224c      	movs	r2, #76	; 0x4c
    c0d8:	2100      	movs	r1, #0
    c0da:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    c0dc:	683a      	ldr	r2, [r7, #0]
    c0de:	68f9      	ldr	r1, [r7, #12]
    c0e0:	693b      	ldr	r3, [r7, #16]
    c0e2:	0018      	movs	r0, r3
    c0e4:	4b09      	ldr	r3, [pc, #36]	; (c10c <prvInitialiseNewTask+0xf8>)
    c0e6:	4798      	blx	r3
    c0e8:	0002      	movs	r2, r0
    c0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c0ec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    c0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0f0:	2b00      	cmp	r3, #0
    c0f2:	d002      	beq.n	c0fa <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c0f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    c0fa:	46c0      	nop			; (mov r8, r8)
    c0fc:	46bd      	mov	sp, r7
    c0fe:	b006      	add	sp, #24
    c100:	bd80      	pop	{r7, pc}
    c102:	46c0      	nop			; (mov r8, r8)
    c104:	3fffffff 	.word	0x3fffffff
    c108:	0000b081 	.word	0x0000b081
    c10c:	0000b199 	.word	0x0000b199

0000c110 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    c110:	b580      	push	{r7, lr}
    c112:	b082      	sub	sp, #8
    c114:	af00      	add	r7, sp, #0
    c116:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    c118:	4b29      	ldr	r3, [pc, #164]	; (c1c0 <prvAddNewTaskToReadyList+0xb0>)
    c11a:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    c11c:	4b29      	ldr	r3, [pc, #164]	; (c1c4 <prvAddNewTaskToReadyList+0xb4>)
    c11e:	681b      	ldr	r3, [r3, #0]
    c120:	1c5a      	adds	r2, r3, #1
    c122:	4b28      	ldr	r3, [pc, #160]	; (c1c4 <prvAddNewTaskToReadyList+0xb4>)
    c124:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    c126:	4b28      	ldr	r3, [pc, #160]	; (c1c8 <prvAddNewTaskToReadyList+0xb8>)
    c128:	681b      	ldr	r3, [r3, #0]
    c12a:	2b00      	cmp	r3, #0
    c12c:	d109      	bne.n	c142 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    c12e:	4b26      	ldr	r3, [pc, #152]	; (c1c8 <prvAddNewTaskToReadyList+0xb8>)
    c130:	687a      	ldr	r2, [r7, #4]
    c132:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    c134:	4b23      	ldr	r3, [pc, #140]	; (c1c4 <prvAddNewTaskToReadyList+0xb4>)
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	2b01      	cmp	r3, #1
    c13a:	d110      	bne.n	c15e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    c13c:	4b23      	ldr	r3, [pc, #140]	; (c1cc <prvAddNewTaskToReadyList+0xbc>)
    c13e:	4798      	blx	r3
    c140:	e00d      	b.n	c15e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    c142:	4b23      	ldr	r3, [pc, #140]	; (c1d0 <prvAddNewTaskToReadyList+0xc0>)
    c144:	681b      	ldr	r3, [r3, #0]
    c146:	2b00      	cmp	r3, #0
    c148:	d109      	bne.n	c15e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    c14a:	4b1f      	ldr	r3, [pc, #124]	; (c1c8 <prvAddNewTaskToReadyList+0xb8>)
    c14c:	681b      	ldr	r3, [r3, #0]
    c14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c150:	687b      	ldr	r3, [r7, #4]
    c152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c154:	429a      	cmp	r2, r3
    c156:	d802      	bhi.n	c15e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    c158:	4b1b      	ldr	r3, [pc, #108]	; (c1c8 <prvAddNewTaskToReadyList+0xb8>)
    c15a:	687a      	ldr	r2, [r7, #4]
    c15c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    c15e:	4b1d      	ldr	r3, [pc, #116]	; (c1d4 <prvAddNewTaskToReadyList+0xc4>)
    c160:	681b      	ldr	r3, [r3, #0]
    c162:	1c5a      	adds	r2, r3, #1
    c164:	4b1b      	ldr	r3, [pc, #108]	; (c1d4 <prvAddNewTaskToReadyList+0xc4>)
    c166:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    c168:	687b      	ldr	r3, [r7, #4]
    c16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c16c:	4b1a      	ldr	r3, [pc, #104]	; (c1d8 <prvAddNewTaskToReadyList+0xc8>)
    c16e:	681b      	ldr	r3, [r3, #0]
    c170:	429a      	cmp	r2, r3
    c172:	d903      	bls.n	c17c <prvAddNewTaskToReadyList+0x6c>
    c174:	687b      	ldr	r3, [r7, #4]
    c176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c178:	4b17      	ldr	r3, [pc, #92]	; (c1d8 <prvAddNewTaskToReadyList+0xc8>)
    c17a:	601a      	str	r2, [r3, #0]
    c17c:	687b      	ldr	r3, [r7, #4]
    c17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c180:	0013      	movs	r3, r2
    c182:	009b      	lsls	r3, r3, #2
    c184:	189b      	adds	r3, r3, r2
    c186:	009b      	lsls	r3, r3, #2
    c188:	4a14      	ldr	r2, [pc, #80]	; (c1dc <prvAddNewTaskToReadyList+0xcc>)
    c18a:	189a      	adds	r2, r3, r2
    c18c:	687b      	ldr	r3, [r7, #4]
    c18e:	3304      	adds	r3, #4
    c190:	0019      	movs	r1, r3
    c192:	0010      	movs	r0, r2
    c194:	4b12      	ldr	r3, [pc, #72]	; (c1e0 <prvAddNewTaskToReadyList+0xd0>)
    c196:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    c198:	4b12      	ldr	r3, [pc, #72]	; (c1e4 <prvAddNewTaskToReadyList+0xd4>)
    c19a:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    c19c:	4b0c      	ldr	r3, [pc, #48]	; (c1d0 <prvAddNewTaskToReadyList+0xc0>)
    c19e:	681b      	ldr	r3, [r3, #0]
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	d008      	beq.n	c1b6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    c1a4:	4b08      	ldr	r3, [pc, #32]	; (c1c8 <prvAddNewTaskToReadyList+0xb8>)
    c1a6:	681b      	ldr	r3, [r3, #0]
    c1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c1aa:	687b      	ldr	r3, [r7, #4]
    c1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c1ae:	429a      	cmp	r2, r3
    c1b0:	d201      	bcs.n	c1b6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    c1b2:	4b0d      	ldr	r3, [pc, #52]	; (c1e8 <prvAddNewTaskToReadyList+0xd8>)
    c1b4:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    c1b6:	46c0      	nop			; (mov r8, r8)
    c1b8:	46bd      	mov	sp, r7
    c1ba:	b002      	add	sp, #8
    c1bc:	bd80      	pop	{r7, pc}
    c1be:	46c0      	nop			; (mov r8, r8)
    c1c0:	0000b2b9 	.word	0x0000b2b9
    c1c4:	20003e10 	.word	0x20003e10
    c1c8:	20003d38 	.word	0x20003d38
    c1cc:	0000c985 	.word	0x0000c985
    c1d0:	20003e1c 	.word	0x20003e1c
    c1d4:	20003e2c 	.word	0x20003e2c
    c1d8:	20003e18 	.word	0x20003e18
    c1dc:	20003d3c 	.word	0x20003d3c
    c1e0:	0000b099 	.word	0x0000b099
    c1e4:	0000b2dd 	.word	0x0000b2dd
    c1e8:	0000b299 	.word	0x0000b299

0000c1ec <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    c1ec:	b580      	push	{r7, lr}
    c1ee:	b086      	sub	sp, #24
    c1f0:	af00      	add	r7, sp, #0
    c1f2:	6078      	str	r0, [r7, #4]
    c1f4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    c1f6:	2300      	movs	r3, #0
    c1f8:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    c1fa:	687b      	ldr	r3, [r7, #4]
    c1fc:	2b00      	cmp	r3, #0
    c1fe:	d101      	bne.n	c204 <vTaskDelayUntil+0x18>
    c200:	b672      	cpsid	i
    c202:	e7fe      	b.n	c202 <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    c204:	683b      	ldr	r3, [r7, #0]
    c206:	2b00      	cmp	r3, #0
    c208:	d101      	bne.n	c20e <vTaskDelayUntil+0x22>
    c20a:	b672      	cpsid	i
    c20c:	e7fe      	b.n	c20c <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    c20e:	4b23      	ldr	r3, [pc, #140]	; (c29c <vTaskDelayUntil+0xb0>)
    c210:	681b      	ldr	r3, [r3, #0]
    c212:	2b00      	cmp	r3, #0
    c214:	d001      	beq.n	c21a <vTaskDelayUntil+0x2e>
    c216:	b672      	cpsid	i
    c218:	e7fe      	b.n	c218 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    c21a:	4b21      	ldr	r3, [pc, #132]	; (c2a0 <vTaskDelayUntil+0xb4>)
    c21c:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    c21e:	4b21      	ldr	r3, [pc, #132]	; (c2a4 <vTaskDelayUntil+0xb8>)
    c220:	681b      	ldr	r3, [r3, #0]
    c222:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    c224:	687b      	ldr	r3, [r7, #4]
    c226:	681a      	ldr	r2, [r3, #0]
    c228:	683b      	ldr	r3, [r7, #0]
    c22a:	18d3      	adds	r3, r2, r3
    c22c:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    c22e:	687b      	ldr	r3, [r7, #4]
    c230:	681a      	ldr	r2, [r3, #0]
    c232:	693b      	ldr	r3, [r7, #16]
    c234:	429a      	cmp	r2, r3
    c236:	d90b      	bls.n	c250 <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    c238:	687b      	ldr	r3, [r7, #4]
    c23a:	681a      	ldr	r2, [r3, #0]
    c23c:	68fb      	ldr	r3, [r7, #12]
    c23e:	429a      	cmp	r2, r3
    c240:	d911      	bls.n	c266 <vTaskDelayUntil+0x7a>
    c242:	68fa      	ldr	r2, [r7, #12]
    c244:	693b      	ldr	r3, [r7, #16]
    c246:	429a      	cmp	r2, r3
    c248:	d90d      	bls.n	c266 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    c24a:	2301      	movs	r3, #1
    c24c:	617b      	str	r3, [r7, #20]
    c24e:	e00a      	b.n	c266 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    c250:	687b      	ldr	r3, [r7, #4]
    c252:	681a      	ldr	r2, [r3, #0]
    c254:	68fb      	ldr	r3, [r7, #12]
    c256:	429a      	cmp	r2, r3
    c258:	d803      	bhi.n	c262 <vTaskDelayUntil+0x76>
    c25a:	68fa      	ldr	r2, [r7, #12]
    c25c:	693b      	ldr	r3, [r7, #16]
    c25e:	429a      	cmp	r2, r3
    c260:	d901      	bls.n	c266 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    c262:	2301      	movs	r3, #1
    c264:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    c266:	687b      	ldr	r3, [r7, #4]
    c268:	68fa      	ldr	r2, [r7, #12]
    c26a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    c26c:	697b      	ldr	r3, [r7, #20]
    c26e:	2b00      	cmp	r3, #0
    c270:	d006      	beq.n	c280 <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    c272:	68fa      	ldr	r2, [r7, #12]
    c274:	693b      	ldr	r3, [r7, #16]
    c276:	1ad3      	subs	r3, r2, r3
    c278:	2100      	movs	r1, #0
    c27a:	0018      	movs	r0, r3
    c27c:	4b0a      	ldr	r3, [pc, #40]	; (c2a8 <vTaskDelayUntil+0xbc>)
    c27e:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    c280:	4b0a      	ldr	r3, [pc, #40]	; (c2ac <vTaskDelayUntil+0xc0>)
    c282:	4798      	blx	r3
    c284:	0003      	movs	r3, r0
    c286:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    c288:	68bb      	ldr	r3, [r7, #8]
    c28a:	2b00      	cmp	r3, #0
    c28c:	d101      	bne.n	c292 <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    c28e:	4b08      	ldr	r3, [pc, #32]	; (c2b0 <vTaskDelayUntil+0xc4>)
    c290:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    c292:	46c0      	nop			; (mov r8, r8)
    c294:	46bd      	mov	sp, r7
    c296:	b006      	add	sp, #24
    c298:	bd80      	pop	{r7, pc}
    c29a:	46c0      	nop			; (mov r8, r8)
    c29c:	20003e38 	.word	0x20003e38
    c2a0:	0000c399 	.word	0x0000c399
    c2a4:	20003e14 	.word	0x20003e14
    c2a8:	0000cced 	.word	0x0000cced
    c2ac:	0000c3b1 	.word	0x0000c3b1
    c2b0:	0000b299 	.word	0x0000b299

0000c2b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    c2b4:	b580      	push	{r7, lr}
    c2b6:	b084      	sub	sp, #16
    c2b8:	af00      	add	r7, sp, #0
    c2ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
    c2bc:	2300      	movs	r3, #0
    c2be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    c2c0:	687b      	ldr	r3, [r7, #4]
    c2c2:	2b00      	cmp	r3, #0
    c2c4:	d010      	beq.n	c2e8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
    c2c6:	4b0d      	ldr	r3, [pc, #52]	; (c2fc <vTaskDelay+0x48>)
    c2c8:	681b      	ldr	r3, [r3, #0]
    c2ca:	2b00      	cmp	r3, #0
    c2cc:	d001      	beq.n	c2d2 <vTaskDelay+0x1e>
    c2ce:	b672      	cpsid	i
    c2d0:	e7fe      	b.n	c2d0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
    c2d2:	4b0b      	ldr	r3, [pc, #44]	; (c300 <vTaskDelay+0x4c>)
    c2d4:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    c2d6:	687b      	ldr	r3, [r7, #4]
    c2d8:	2100      	movs	r1, #0
    c2da:	0018      	movs	r0, r3
    c2dc:	4b09      	ldr	r3, [pc, #36]	; (c304 <vTaskDelay+0x50>)
    c2de:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
    c2e0:	4b09      	ldr	r3, [pc, #36]	; (c308 <vTaskDelay+0x54>)
    c2e2:	4798      	blx	r3
    c2e4:	0003      	movs	r3, r0
    c2e6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    c2e8:	68fb      	ldr	r3, [r7, #12]
    c2ea:	2b00      	cmp	r3, #0
    c2ec:	d101      	bne.n	c2f2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
    c2ee:	4b07      	ldr	r3, [pc, #28]	; (c30c <vTaskDelay+0x58>)
    c2f0:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    c2f2:	46c0      	nop			; (mov r8, r8)
    c2f4:	46bd      	mov	sp, r7
    c2f6:	b004      	add	sp, #16
    c2f8:	bd80      	pop	{r7, pc}
    c2fa:	46c0      	nop			; (mov r8, r8)
    c2fc:	20003e38 	.word	0x20003e38
    c300:	0000c399 	.word	0x0000c399
    c304:	0000cced 	.word	0x0000cced
    c308:	0000c3b1 	.word	0x0000c3b1
    c30c:	0000b299 	.word	0x0000b299

0000c310 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    c310:	b590      	push	{r4, r7, lr}
    c312:	b085      	sub	sp, #20
    c314:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    c316:	2380      	movs	r3, #128	; 0x80
    c318:	009a      	lsls	r2, r3, #2
    c31a:	4916      	ldr	r1, [pc, #88]	; (c374 <vTaskStartScheduler+0x64>)
    c31c:	4816      	ldr	r0, [pc, #88]	; (c378 <vTaskStartScheduler+0x68>)
    c31e:	4b17      	ldr	r3, [pc, #92]	; (c37c <vTaskStartScheduler+0x6c>)
    c320:	9301      	str	r3, [sp, #4]
    c322:	2300      	movs	r3, #0
    c324:	9300      	str	r3, [sp, #0]
    c326:	2300      	movs	r3, #0
    c328:	4c15      	ldr	r4, [pc, #84]	; (c380 <vTaskStartScheduler+0x70>)
    c32a:	47a0      	blx	r4
    c32c:	0003      	movs	r3, r0
    c32e:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    c330:	687b      	ldr	r3, [r7, #4]
    c332:	2b01      	cmp	r3, #1
    c334:	d103      	bne.n	c33e <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
    c336:	4b13      	ldr	r3, [pc, #76]	; (c384 <vTaskStartScheduler+0x74>)
    c338:	4798      	blx	r3
    c33a:	0003      	movs	r3, r0
    c33c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    c33e:	687b      	ldr	r3, [r7, #4]
    c340:	2b01      	cmp	r3, #1
    c342:	d10d      	bne.n	c360 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    c344:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    c346:	4b10      	ldr	r3, [pc, #64]	; (c388 <vTaskStartScheduler+0x78>)
    c348:	2201      	movs	r2, #1
    c34a:	4252      	negs	r2, r2
    c34c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    c34e:	4b0f      	ldr	r3, [pc, #60]	; (c38c <vTaskStartScheduler+0x7c>)
    c350:	2201      	movs	r2, #1
    c352:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    c354:	4b0e      	ldr	r3, [pc, #56]	; (c390 <vTaskStartScheduler+0x80>)
    c356:	2200      	movs	r2, #0
    c358:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    c35a:	4b0e      	ldr	r3, [pc, #56]	; (c394 <vTaskStartScheduler+0x84>)
    c35c:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    c35e:	e004      	b.n	c36a <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    c360:	687b      	ldr	r3, [r7, #4]
    c362:	3301      	adds	r3, #1
    c364:	d101      	bne.n	c36a <vTaskStartScheduler+0x5a>
    c366:	b672      	cpsid	i
    c368:	e7fe      	b.n	c368 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    c36a:	46c0      	nop			; (mov r8, r8)
    c36c:	46bd      	mov	sp, r7
    c36e:	b003      	add	sp, #12
    c370:	bd90      	pop	{r4, r7, pc}
    c372:	46c0      	nop			; (mov r8, r8)
    c374:	00012358 	.word	0x00012358
    c378:	0000c969 	.word	0x0000c969
    c37c:	20003e34 	.word	0x20003e34
    c380:	0000bf75 	.word	0x0000bf75
    c384:	0000cda1 	.word	0x0000cda1
    c388:	20003e30 	.word	0x20003e30
    c38c:	20003e1c 	.word	0x20003e1c
    c390:	20003e14 	.word	0x20003e14
    c394:	0000b249 	.word	0x0000b249

0000c398 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    c398:	b580      	push	{r7, lr}
    c39a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    c39c:	4b03      	ldr	r3, [pc, #12]	; (c3ac <vTaskSuspendAll+0x14>)
    c39e:	681b      	ldr	r3, [r3, #0]
    c3a0:	1c5a      	adds	r2, r3, #1
    c3a2:	4b02      	ldr	r3, [pc, #8]	; (c3ac <vTaskSuspendAll+0x14>)
    c3a4:	601a      	str	r2, [r3, #0]
}
    c3a6:	46c0      	nop			; (mov r8, r8)
    c3a8:	46bd      	mov	sp, r7
    c3aa:	bd80      	pop	{r7, pc}
    c3ac:	20003e38 	.word	0x20003e38

0000c3b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    c3b0:	b580      	push	{r7, lr}
    c3b2:	b084      	sub	sp, #16
    c3b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    c3b6:	2300      	movs	r3, #0
    c3b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    c3ba:	2300      	movs	r3, #0
    c3bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    c3be:	4b3a      	ldr	r3, [pc, #232]	; (c4a8 <xTaskResumeAll+0xf8>)
    c3c0:	681b      	ldr	r3, [r3, #0]
    c3c2:	2b00      	cmp	r3, #0
    c3c4:	d101      	bne.n	c3ca <xTaskResumeAll+0x1a>
    c3c6:	b672      	cpsid	i
    c3c8:	e7fe      	b.n	c3c8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    c3ca:	4b38      	ldr	r3, [pc, #224]	; (c4ac <xTaskResumeAll+0xfc>)
    c3cc:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    c3ce:	4b36      	ldr	r3, [pc, #216]	; (c4a8 <xTaskResumeAll+0xf8>)
    c3d0:	681b      	ldr	r3, [r3, #0]
    c3d2:	1e5a      	subs	r2, r3, #1
    c3d4:	4b34      	ldr	r3, [pc, #208]	; (c4a8 <xTaskResumeAll+0xf8>)
    c3d6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c3d8:	4b33      	ldr	r3, [pc, #204]	; (c4a8 <xTaskResumeAll+0xf8>)
    c3da:	681b      	ldr	r3, [r3, #0]
    c3dc:	2b00      	cmp	r3, #0
    c3de:	d15b      	bne.n	c498 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    c3e0:	4b33      	ldr	r3, [pc, #204]	; (c4b0 <xTaskResumeAll+0x100>)
    c3e2:	681b      	ldr	r3, [r3, #0]
    c3e4:	2b00      	cmp	r3, #0
    c3e6:	d057      	beq.n	c498 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    c3e8:	e02f      	b.n	c44a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    c3ea:	4b32      	ldr	r3, [pc, #200]	; (c4b4 <xTaskResumeAll+0x104>)
    c3ec:	68db      	ldr	r3, [r3, #12]
    c3ee:	68db      	ldr	r3, [r3, #12]
    c3f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    c3f2:	68fb      	ldr	r3, [r7, #12]
    c3f4:	3318      	adds	r3, #24
    c3f6:	0018      	movs	r0, r3
    c3f8:	4b2f      	ldr	r3, [pc, #188]	; (c4b8 <xTaskResumeAll+0x108>)
    c3fa:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c3fc:	68fb      	ldr	r3, [r7, #12]
    c3fe:	3304      	adds	r3, #4
    c400:	0018      	movs	r0, r3
    c402:	4b2d      	ldr	r3, [pc, #180]	; (c4b8 <xTaskResumeAll+0x108>)
    c404:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    c406:	68fb      	ldr	r3, [r7, #12]
    c408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c40a:	4b2c      	ldr	r3, [pc, #176]	; (c4bc <xTaskResumeAll+0x10c>)
    c40c:	681b      	ldr	r3, [r3, #0]
    c40e:	429a      	cmp	r2, r3
    c410:	d903      	bls.n	c41a <xTaskResumeAll+0x6a>
    c412:	68fb      	ldr	r3, [r7, #12]
    c414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c416:	4b29      	ldr	r3, [pc, #164]	; (c4bc <xTaskResumeAll+0x10c>)
    c418:	601a      	str	r2, [r3, #0]
    c41a:	68fb      	ldr	r3, [r7, #12]
    c41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c41e:	0013      	movs	r3, r2
    c420:	009b      	lsls	r3, r3, #2
    c422:	189b      	adds	r3, r3, r2
    c424:	009b      	lsls	r3, r3, #2
    c426:	4a26      	ldr	r2, [pc, #152]	; (c4c0 <xTaskResumeAll+0x110>)
    c428:	189a      	adds	r2, r3, r2
    c42a:	68fb      	ldr	r3, [r7, #12]
    c42c:	3304      	adds	r3, #4
    c42e:	0019      	movs	r1, r3
    c430:	0010      	movs	r0, r2
    c432:	4b24      	ldr	r3, [pc, #144]	; (c4c4 <xTaskResumeAll+0x114>)
    c434:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    c436:	68fb      	ldr	r3, [r7, #12]
    c438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c43a:	4b23      	ldr	r3, [pc, #140]	; (c4c8 <xTaskResumeAll+0x118>)
    c43c:	681b      	ldr	r3, [r3, #0]
    c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c440:	429a      	cmp	r2, r3
    c442:	d302      	bcc.n	c44a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    c444:	4b21      	ldr	r3, [pc, #132]	; (c4cc <xTaskResumeAll+0x11c>)
    c446:	2201      	movs	r2, #1
    c448:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    c44a:	4b1a      	ldr	r3, [pc, #104]	; (c4b4 <xTaskResumeAll+0x104>)
    c44c:	681b      	ldr	r3, [r3, #0]
    c44e:	2b00      	cmp	r3, #0
    c450:	d1cb      	bne.n	c3ea <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    c452:	68fb      	ldr	r3, [r7, #12]
    c454:	2b00      	cmp	r3, #0
    c456:	d001      	beq.n	c45c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    c458:	4b1d      	ldr	r3, [pc, #116]	; (c4d0 <xTaskResumeAll+0x120>)
    c45a:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    c45c:	4b1d      	ldr	r3, [pc, #116]	; (c4d4 <xTaskResumeAll+0x124>)
    c45e:	681b      	ldr	r3, [r3, #0]
    c460:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    c462:	687b      	ldr	r3, [r7, #4]
    c464:	2b00      	cmp	r3, #0
    c466:	d00f      	beq.n	c488 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    c468:	4b1b      	ldr	r3, [pc, #108]	; (c4d8 <xTaskResumeAll+0x128>)
    c46a:	4798      	blx	r3
    c46c:	1e03      	subs	r3, r0, #0
    c46e:	d002      	beq.n	c476 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    c470:	4b16      	ldr	r3, [pc, #88]	; (c4cc <xTaskResumeAll+0x11c>)
    c472:	2201      	movs	r2, #1
    c474:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    c476:	687b      	ldr	r3, [r7, #4]
    c478:	3b01      	subs	r3, #1
    c47a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    c47c:	687b      	ldr	r3, [r7, #4]
    c47e:	2b00      	cmp	r3, #0
    c480:	d1f2      	bne.n	c468 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    c482:	4b14      	ldr	r3, [pc, #80]	; (c4d4 <xTaskResumeAll+0x124>)
    c484:	2200      	movs	r2, #0
    c486:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    c488:	4b10      	ldr	r3, [pc, #64]	; (c4cc <xTaskResumeAll+0x11c>)
    c48a:	681b      	ldr	r3, [r3, #0]
    c48c:	2b00      	cmp	r3, #0
    c48e:	d003      	beq.n	c498 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    c490:	2301      	movs	r3, #1
    c492:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    c494:	4b11      	ldr	r3, [pc, #68]	; (c4dc <xTaskResumeAll+0x12c>)
    c496:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    c498:	4b11      	ldr	r3, [pc, #68]	; (c4e0 <xTaskResumeAll+0x130>)
    c49a:	4798      	blx	r3

	return xAlreadyYielded;
    c49c:	68bb      	ldr	r3, [r7, #8]
}
    c49e:	0018      	movs	r0, r3
    c4a0:	46bd      	mov	sp, r7
    c4a2:	b004      	add	sp, #16
    c4a4:	bd80      	pop	{r7, pc}
    c4a6:	46c0      	nop			; (mov r8, r8)
    c4a8:	20003e38 	.word	0x20003e38
    c4ac:	0000b2b9 	.word	0x0000b2b9
    c4b0:	20003e10 	.word	0x20003e10
    c4b4:	20003dd0 	.word	0x20003dd0
    c4b8:	0000b149 	.word	0x0000b149
    c4bc:	20003e18 	.word	0x20003e18
    c4c0:	20003d3c 	.word	0x20003d3c
    c4c4:	0000b099 	.word	0x0000b099
    c4c8:	20003d38 	.word	0x20003d38
    c4cc:	20003e24 	.word	0x20003e24
    c4d0:	0000cac5 	.word	0x0000cac5
    c4d4:	20003e20 	.word	0x20003e20
    c4d8:	0000c501 	.word	0x0000c501
    c4dc:	0000b299 	.word	0x0000b299
    c4e0:	0000b2dd 	.word	0x0000b2dd

0000c4e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    c4e4:	b580      	push	{r7, lr}
    c4e6:	b082      	sub	sp, #8
    c4e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    c4ea:	4b04      	ldr	r3, [pc, #16]	; (c4fc <xTaskGetTickCount+0x18>)
    c4ec:	681b      	ldr	r3, [r3, #0]
    c4ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    c4f0:	687b      	ldr	r3, [r7, #4]
}
    c4f2:	0018      	movs	r0, r3
    c4f4:	46bd      	mov	sp, r7
    c4f6:	b002      	add	sp, #8
    c4f8:	bd80      	pop	{r7, pc}
    c4fa:	46c0      	nop			; (mov r8, r8)
    c4fc:	20003e14 	.word	0x20003e14

0000c500 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    c500:	b580      	push	{r7, lr}
    c502:	b086      	sub	sp, #24
    c504:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    c506:	2300      	movs	r3, #0
    c508:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c50a:	4b45      	ldr	r3, [pc, #276]	; (c620 <xTaskIncrementTick+0x120>)
    c50c:	681b      	ldr	r3, [r3, #0]
    c50e:	2b00      	cmp	r3, #0
    c510:	d000      	beq.n	c514 <xTaskIncrementTick+0x14>
    c512:	e075      	b.n	c600 <xTaskIncrementTick+0x100>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    c514:	4b43      	ldr	r3, [pc, #268]	; (c624 <xTaskIncrementTick+0x124>)
    c516:	681b      	ldr	r3, [r3, #0]
    c518:	3301      	adds	r3, #1
    c51a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    c51c:	4b41      	ldr	r3, [pc, #260]	; (c624 <xTaskIncrementTick+0x124>)
    c51e:	693a      	ldr	r2, [r7, #16]
    c520:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    c522:	693b      	ldr	r3, [r7, #16]
    c524:	2b00      	cmp	r3, #0
    c526:	d117      	bne.n	c558 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    c528:	4b3f      	ldr	r3, [pc, #252]	; (c628 <xTaskIncrementTick+0x128>)
    c52a:	681b      	ldr	r3, [r3, #0]
    c52c:	681b      	ldr	r3, [r3, #0]
    c52e:	2b00      	cmp	r3, #0
    c530:	d001      	beq.n	c536 <xTaskIncrementTick+0x36>
    c532:	b672      	cpsid	i
    c534:	e7fe      	b.n	c534 <xTaskIncrementTick+0x34>
    c536:	4b3c      	ldr	r3, [pc, #240]	; (c628 <xTaskIncrementTick+0x128>)
    c538:	681b      	ldr	r3, [r3, #0]
    c53a:	60fb      	str	r3, [r7, #12]
    c53c:	4b3b      	ldr	r3, [pc, #236]	; (c62c <xTaskIncrementTick+0x12c>)
    c53e:	681a      	ldr	r2, [r3, #0]
    c540:	4b39      	ldr	r3, [pc, #228]	; (c628 <xTaskIncrementTick+0x128>)
    c542:	601a      	str	r2, [r3, #0]
    c544:	4b39      	ldr	r3, [pc, #228]	; (c62c <xTaskIncrementTick+0x12c>)
    c546:	68fa      	ldr	r2, [r7, #12]
    c548:	601a      	str	r2, [r3, #0]
    c54a:	4b39      	ldr	r3, [pc, #228]	; (c630 <xTaskIncrementTick+0x130>)
    c54c:	681b      	ldr	r3, [r3, #0]
    c54e:	1c5a      	adds	r2, r3, #1
    c550:	4b37      	ldr	r3, [pc, #220]	; (c630 <xTaskIncrementTick+0x130>)
    c552:	601a      	str	r2, [r3, #0]
    c554:	4b37      	ldr	r3, [pc, #220]	; (c634 <xTaskIncrementTick+0x134>)
    c556:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    c558:	4b37      	ldr	r3, [pc, #220]	; (c638 <xTaskIncrementTick+0x138>)
    c55a:	681b      	ldr	r3, [r3, #0]
    c55c:	693a      	ldr	r2, [r7, #16]
    c55e:	429a      	cmp	r2, r3
    c560:	d353      	bcc.n	c60a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    c562:	4b31      	ldr	r3, [pc, #196]	; (c628 <xTaskIncrementTick+0x128>)
    c564:	681b      	ldr	r3, [r3, #0]
    c566:	681b      	ldr	r3, [r3, #0]
    c568:	2b00      	cmp	r3, #0
    c56a:	d101      	bne.n	c570 <xTaskIncrementTick+0x70>
    c56c:	2301      	movs	r3, #1
    c56e:	e000      	b.n	c572 <xTaskIncrementTick+0x72>
    c570:	2300      	movs	r3, #0
    c572:	2b00      	cmp	r3, #0
    c574:	d004      	beq.n	c580 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    c576:	4b30      	ldr	r3, [pc, #192]	; (c638 <xTaskIncrementTick+0x138>)
    c578:	2201      	movs	r2, #1
    c57a:	4252      	negs	r2, r2
    c57c:	601a      	str	r2, [r3, #0]
					break;
    c57e:	e044      	b.n	c60a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    c580:	4b29      	ldr	r3, [pc, #164]	; (c628 <xTaskIncrementTick+0x128>)
    c582:	681b      	ldr	r3, [r3, #0]
    c584:	68db      	ldr	r3, [r3, #12]
    c586:	68db      	ldr	r3, [r3, #12]
    c588:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    c58a:	68bb      	ldr	r3, [r7, #8]
    c58c:	685b      	ldr	r3, [r3, #4]
    c58e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    c590:	693a      	ldr	r2, [r7, #16]
    c592:	687b      	ldr	r3, [r7, #4]
    c594:	429a      	cmp	r2, r3
    c596:	d203      	bcs.n	c5a0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    c598:	4b27      	ldr	r3, [pc, #156]	; (c638 <xTaskIncrementTick+0x138>)
    c59a:	687a      	ldr	r2, [r7, #4]
    c59c:	601a      	str	r2, [r3, #0]
						break;
    c59e:	e034      	b.n	c60a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    c5a0:	68bb      	ldr	r3, [r7, #8]
    c5a2:	3304      	adds	r3, #4
    c5a4:	0018      	movs	r0, r3
    c5a6:	4b25      	ldr	r3, [pc, #148]	; (c63c <xTaskIncrementTick+0x13c>)
    c5a8:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    c5aa:	68bb      	ldr	r3, [r7, #8]
    c5ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    c5ae:	2b00      	cmp	r3, #0
    c5b0:	d004      	beq.n	c5bc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    c5b2:	68bb      	ldr	r3, [r7, #8]
    c5b4:	3318      	adds	r3, #24
    c5b6:	0018      	movs	r0, r3
    c5b8:	4b20      	ldr	r3, [pc, #128]	; (c63c <xTaskIncrementTick+0x13c>)
    c5ba:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    c5bc:	68bb      	ldr	r3, [r7, #8]
    c5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c5c0:	4b1f      	ldr	r3, [pc, #124]	; (c640 <xTaskIncrementTick+0x140>)
    c5c2:	681b      	ldr	r3, [r3, #0]
    c5c4:	429a      	cmp	r2, r3
    c5c6:	d903      	bls.n	c5d0 <xTaskIncrementTick+0xd0>
    c5c8:	68bb      	ldr	r3, [r7, #8]
    c5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c5cc:	4b1c      	ldr	r3, [pc, #112]	; (c640 <xTaskIncrementTick+0x140>)
    c5ce:	601a      	str	r2, [r3, #0]
    c5d0:	68bb      	ldr	r3, [r7, #8]
    c5d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c5d4:	0013      	movs	r3, r2
    c5d6:	009b      	lsls	r3, r3, #2
    c5d8:	189b      	adds	r3, r3, r2
    c5da:	009b      	lsls	r3, r3, #2
    c5dc:	4a19      	ldr	r2, [pc, #100]	; (c644 <xTaskIncrementTick+0x144>)
    c5de:	189a      	adds	r2, r3, r2
    c5e0:	68bb      	ldr	r3, [r7, #8]
    c5e2:	3304      	adds	r3, #4
    c5e4:	0019      	movs	r1, r3
    c5e6:	0010      	movs	r0, r2
    c5e8:	4b17      	ldr	r3, [pc, #92]	; (c648 <xTaskIncrementTick+0x148>)
    c5ea:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    c5ec:	68bb      	ldr	r3, [r7, #8]
    c5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c5f0:	4b16      	ldr	r3, [pc, #88]	; (c64c <xTaskIncrementTick+0x14c>)
    c5f2:	681b      	ldr	r3, [r3, #0]
    c5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c5f6:	429a      	cmp	r2, r3
    c5f8:	d3b3      	bcc.n	c562 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    c5fa:	2301      	movs	r3, #1
    c5fc:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    c5fe:	e7b0      	b.n	c562 <xTaskIncrementTick+0x62>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    c600:	4b13      	ldr	r3, [pc, #76]	; (c650 <xTaskIncrementTick+0x150>)
    c602:	681b      	ldr	r3, [r3, #0]
    c604:	1c5a      	adds	r2, r3, #1
    c606:	4b12      	ldr	r3, [pc, #72]	; (c650 <xTaskIncrementTick+0x150>)
    c608:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    c60a:	4b12      	ldr	r3, [pc, #72]	; (c654 <xTaskIncrementTick+0x154>)
    c60c:	681b      	ldr	r3, [r3, #0]
    c60e:	2b00      	cmp	r3, #0
    c610:	d001      	beq.n	c616 <xTaskIncrementTick+0x116>
		{
			xSwitchRequired = pdTRUE;
    c612:	2301      	movs	r3, #1
    c614:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    c616:	697b      	ldr	r3, [r7, #20]
}
    c618:	0018      	movs	r0, r3
    c61a:	46bd      	mov	sp, r7
    c61c:	b006      	add	sp, #24
    c61e:	bd80      	pop	{r7, pc}
    c620:	20003e38 	.word	0x20003e38
    c624:	20003e14 	.word	0x20003e14
    c628:	20003dc8 	.word	0x20003dc8
    c62c:	20003dcc 	.word	0x20003dcc
    c630:	20003e28 	.word	0x20003e28
    c634:	0000cac5 	.word	0x0000cac5
    c638:	20003e30 	.word	0x20003e30
    c63c:	0000b149 	.word	0x0000b149
    c640:	20003e18 	.word	0x20003e18
    c644:	20003d3c 	.word	0x20003d3c
    c648:	0000b099 	.word	0x0000b099
    c64c:	20003d38 	.word	0x20003d38
    c650:	20003e20 	.word	0x20003e20
    c654:	20003e24 	.word	0x20003e24

0000c658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    c658:	b580      	push	{r7, lr}
    c65a:	b082      	sub	sp, #8
    c65c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    c65e:	4b2a      	ldr	r3, [pc, #168]	; (c708 <vTaskSwitchContext+0xb0>)
    c660:	681b      	ldr	r3, [r3, #0]
    c662:	2b00      	cmp	r3, #0
    c664:	d003      	beq.n	c66e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    c666:	4b29      	ldr	r3, [pc, #164]	; (c70c <vTaskSwitchContext+0xb4>)
    c668:	2201      	movs	r2, #1
    c66a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    c66c:	e048      	b.n	c700 <vTaskSwitchContext+0xa8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    c66e:	4b27      	ldr	r3, [pc, #156]	; (c70c <vTaskSwitchContext+0xb4>)
    c670:	2200      	movs	r2, #0
    c672:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    c674:	4b26      	ldr	r3, [pc, #152]	; (c710 <vTaskSwitchContext+0xb8>)
    c676:	681b      	ldr	r3, [r3, #0]
    c678:	681a      	ldr	r2, [r3, #0]
    c67a:	4b25      	ldr	r3, [pc, #148]	; (c710 <vTaskSwitchContext+0xb8>)
    c67c:	681b      	ldr	r3, [r3, #0]
    c67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    c680:	429a      	cmp	r2, r3
    c682:	d808      	bhi.n	c696 <vTaskSwitchContext+0x3e>
    c684:	4b22      	ldr	r3, [pc, #136]	; (c710 <vTaskSwitchContext+0xb8>)
    c686:	681a      	ldr	r2, [r3, #0]
    c688:	4b21      	ldr	r3, [pc, #132]	; (c710 <vTaskSwitchContext+0xb8>)
    c68a:	681b      	ldr	r3, [r3, #0]
    c68c:	3334      	adds	r3, #52	; 0x34
    c68e:	0019      	movs	r1, r3
    c690:	0010      	movs	r0, r2
    c692:	4b20      	ldr	r3, [pc, #128]	; (c714 <vTaskSwitchContext+0xbc>)
    c694:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    c696:	4b20      	ldr	r3, [pc, #128]	; (c718 <vTaskSwitchContext+0xc0>)
    c698:	681b      	ldr	r3, [r3, #0]
    c69a:	607b      	str	r3, [r7, #4]
    c69c:	e007      	b.n	c6ae <vTaskSwitchContext+0x56>
    c69e:	687b      	ldr	r3, [r7, #4]
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	d101      	bne.n	c6a8 <vTaskSwitchContext+0x50>
    c6a4:	b672      	cpsid	i
    c6a6:	e7fe      	b.n	c6a6 <vTaskSwitchContext+0x4e>
    c6a8:	687b      	ldr	r3, [r7, #4]
    c6aa:	3b01      	subs	r3, #1
    c6ac:	607b      	str	r3, [r7, #4]
    c6ae:	491b      	ldr	r1, [pc, #108]	; (c71c <vTaskSwitchContext+0xc4>)
    c6b0:	687a      	ldr	r2, [r7, #4]
    c6b2:	0013      	movs	r3, r2
    c6b4:	009b      	lsls	r3, r3, #2
    c6b6:	189b      	adds	r3, r3, r2
    c6b8:	009b      	lsls	r3, r3, #2
    c6ba:	585b      	ldr	r3, [r3, r1]
    c6bc:	2b00      	cmp	r3, #0
    c6be:	d0ee      	beq.n	c69e <vTaskSwitchContext+0x46>
    c6c0:	687a      	ldr	r2, [r7, #4]
    c6c2:	0013      	movs	r3, r2
    c6c4:	009b      	lsls	r3, r3, #2
    c6c6:	189b      	adds	r3, r3, r2
    c6c8:	009b      	lsls	r3, r3, #2
    c6ca:	4a14      	ldr	r2, [pc, #80]	; (c71c <vTaskSwitchContext+0xc4>)
    c6cc:	189b      	adds	r3, r3, r2
    c6ce:	603b      	str	r3, [r7, #0]
    c6d0:	683b      	ldr	r3, [r7, #0]
    c6d2:	685b      	ldr	r3, [r3, #4]
    c6d4:	685a      	ldr	r2, [r3, #4]
    c6d6:	683b      	ldr	r3, [r7, #0]
    c6d8:	605a      	str	r2, [r3, #4]
    c6da:	683b      	ldr	r3, [r7, #0]
    c6dc:	685a      	ldr	r2, [r3, #4]
    c6de:	683b      	ldr	r3, [r7, #0]
    c6e0:	3308      	adds	r3, #8
    c6e2:	429a      	cmp	r2, r3
    c6e4:	d104      	bne.n	c6f0 <vTaskSwitchContext+0x98>
    c6e6:	683b      	ldr	r3, [r7, #0]
    c6e8:	685b      	ldr	r3, [r3, #4]
    c6ea:	685a      	ldr	r2, [r3, #4]
    c6ec:	683b      	ldr	r3, [r7, #0]
    c6ee:	605a      	str	r2, [r3, #4]
    c6f0:	683b      	ldr	r3, [r7, #0]
    c6f2:	685b      	ldr	r3, [r3, #4]
    c6f4:	68da      	ldr	r2, [r3, #12]
    c6f6:	4b06      	ldr	r3, [pc, #24]	; (c710 <vTaskSwitchContext+0xb8>)
    c6f8:	601a      	str	r2, [r3, #0]
    c6fa:	4b07      	ldr	r3, [pc, #28]	; (c718 <vTaskSwitchContext+0xc0>)
    c6fc:	687a      	ldr	r2, [r7, #4]
    c6fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    c700:	46c0      	nop			; (mov r8, r8)
    c702:	46bd      	mov	sp, r7
    c704:	b002      	add	sp, #8
    c706:	bd80      	pop	{r7, pc}
    c708:	20003e38 	.word	0x20003e38
    c70c:	20003e24 	.word	0x20003e24
    c710:	20003d38 	.word	0x20003d38
    c714:	0000dfa1 	.word	0x0000dfa1
    c718:	20003e18 	.word	0x20003e18
    c71c:	20003d3c 	.word	0x20003d3c

0000c720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    c720:	b580      	push	{r7, lr}
    c722:	b082      	sub	sp, #8
    c724:	af00      	add	r7, sp, #0
    c726:	6078      	str	r0, [r7, #4]
    c728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    c72a:	687b      	ldr	r3, [r7, #4]
    c72c:	2b00      	cmp	r3, #0
    c72e:	d101      	bne.n	c734 <vTaskPlaceOnEventList+0x14>
    c730:	b672      	cpsid	i
    c732:	e7fe      	b.n	c732 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    c734:	4b08      	ldr	r3, [pc, #32]	; (c758 <vTaskPlaceOnEventList+0x38>)
    c736:	681b      	ldr	r3, [r3, #0]
    c738:	3318      	adds	r3, #24
    c73a:	001a      	movs	r2, r3
    c73c:	687b      	ldr	r3, [r7, #4]
    c73e:	0011      	movs	r1, r2
    c740:	0018      	movs	r0, r3
    c742:	4b06      	ldr	r3, [pc, #24]	; (c75c <vTaskPlaceOnEventList+0x3c>)
    c744:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    c746:	683b      	ldr	r3, [r7, #0]
    c748:	2101      	movs	r1, #1
    c74a:	0018      	movs	r0, r3
    c74c:	4b04      	ldr	r3, [pc, #16]	; (c760 <vTaskPlaceOnEventList+0x40>)
    c74e:	4798      	blx	r3
}
    c750:	46c0      	nop			; (mov r8, r8)
    c752:	46bd      	mov	sp, r7
    c754:	b002      	add	sp, #8
    c756:	bd80      	pop	{r7, pc}
    c758:	20003d38 	.word	0x20003d38
    c75c:	0000b0dd 	.word	0x0000b0dd
    c760:	0000cced 	.word	0x0000cced

0000c764 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    c764:	b580      	push	{r7, lr}
    c766:	b084      	sub	sp, #16
    c768:	af00      	add	r7, sp, #0
    c76a:	60f8      	str	r0, [r7, #12]
    c76c:	60b9      	str	r1, [r7, #8]
    c76e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    c770:	68fb      	ldr	r3, [r7, #12]
    c772:	2b00      	cmp	r3, #0
    c774:	d101      	bne.n	c77a <vTaskPlaceOnEventListRestricted+0x16>
    c776:	b672      	cpsid	i
    c778:	e7fe      	b.n	c778 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    c77a:	4b0c      	ldr	r3, [pc, #48]	; (c7ac <vTaskPlaceOnEventListRestricted+0x48>)
    c77c:	681b      	ldr	r3, [r3, #0]
    c77e:	3318      	adds	r3, #24
    c780:	001a      	movs	r2, r3
    c782:	68fb      	ldr	r3, [r7, #12]
    c784:	0011      	movs	r1, r2
    c786:	0018      	movs	r0, r3
    c788:	4b09      	ldr	r3, [pc, #36]	; (c7b0 <vTaskPlaceOnEventListRestricted+0x4c>)
    c78a:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    c78c:	687b      	ldr	r3, [r7, #4]
    c78e:	2b00      	cmp	r3, #0
    c790:	d002      	beq.n	c798 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    c792:	2301      	movs	r3, #1
    c794:	425b      	negs	r3, r3
    c796:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    c798:	687a      	ldr	r2, [r7, #4]
    c79a:	68bb      	ldr	r3, [r7, #8]
    c79c:	0011      	movs	r1, r2
    c79e:	0018      	movs	r0, r3
    c7a0:	4b04      	ldr	r3, [pc, #16]	; (c7b4 <vTaskPlaceOnEventListRestricted+0x50>)
    c7a2:	4798      	blx	r3
	}
    c7a4:	46c0      	nop			; (mov r8, r8)
    c7a6:	46bd      	mov	sp, r7
    c7a8:	b004      	add	sp, #16
    c7aa:	bd80      	pop	{r7, pc}
    c7ac:	20003d38 	.word	0x20003d38
    c7b0:	0000b099 	.word	0x0000b099
    c7b4:	0000cced 	.word	0x0000cced

0000c7b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    c7b8:	b580      	push	{r7, lr}
    c7ba:	b084      	sub	sp, #16
    c7bc:	af00      	add	r7, sp, #0
    c7be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    c7c0:	687b      	ldr	r3, [r7, #4]
    c7c2:	68db      	ldr	r3, [r3, #12]
    c7c4:	68db      	ldr	r3, [r3, #12]
    c7c6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    c7c8:	68bb      	ldr	r3, [r7, #8]
    c7ca:	2b00      	cmp	r3, #0
    c7cc:	d101      	bne.n	c7d2 <xTaskRemoveFromEventList+0x1a>
    c7ce:	b672      	cpsid	i
    c7d0:	e7fe      	b.n	c7d0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    c7d2:	68bb      	ldr	r3, [r7, #8]
    c7d4:	3318      	adds	r3, #24
    c7d6:	0018      	movs	r0, r3
    c7d8:	4b1f      	ldr	r3, [pc, #124]	; (c858 <xTaskRemoveFromEventList+0xa0>)
    c7da:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    c7dc:	4b1f      	ldr	r3, [pc, #124]	; (c85c <xTaskRemoveFromEventList+0xa4>)
    c7de:	681b      	ldr	r3, [r3, #0]
    c7e0:	2b00      	cmp	r3, #0
    c7e2:	d11d      	bne.n	c820 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    c7e4:	68bb      	ldr	r3, [r7, #8]
    c7e6:	3304      	adds	r3, #4
    c7e8:	0018      	movs	r0, r3
    c7ea:	4b1b      	ldr	r3, [pc, #108]	; (c858 <xTaskRemoveFromEventList+0xa0>)
    c7ec:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    c7ee:	68bb      	ldr	r3, [r7, #8]
    c7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c7f2:	4b1b      	ldr	r3, [pc, #108]	; (c860 <xTaskRemoveFromEventList+0xa8>)
    c7f4:	681b      	ldr	r3, [r3, #0]
    c7f6:	429a      	cmp	r2, r3
    c7f8:	d903      	bls.n	c802 <xTaskRemoveFromEventList+0x4a>
    c7fa:	68bb      	ldr	r3, [r7, #8]
    c7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c7fe:	4b18      	ldr	r3, [pc, #96]	; (c860 <xTaskRemoveFromEventList+0xa8>)
    c800:	601a      	str	r2, [r3, #0]
    c802:	68bb      	ldr	r3, [r7, #8]
    c804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c806:	0013      	movs	r3, r2
    c808:	009b      	lsls	r3, r3, #2
    c80a:	189b      	adds	r3, r3, r2
    c80c:	009b      	lsls	r3, r3, #2
    c80e:	4a15      	ldr	r2, [pc, #84]	; (c864 <xTaskRemoveFromEventList+0xac>)
    c810:	189a      	adds	r2, r3, r2
    c812:	68bb      	ldr	r3, [r7, #8]
    c814:	3304      	adds	r3, #4
    c816:	0019      	movs	r1, r3
    c818:	0010      	movs	r0, r2
    c81a:	4b13      	ldr	r3, [pc, #76]	; (c868 <xTaskRemoveFromEventList+0xb0>)
    c81c:	4798      	blx	r3
    c81e:	e007      	b.n	c830 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    c820:	68bb      	ldr	r3, [r7, #8]
    c822:	3318      	adds	r3, #24
    c824:	001a      	movs	r2, r3
    c826:	4b11      	ldr	r3, [pc, #68]	; (c86c <xTaskRemoveFromEventList+0xb4>)
    c828:	0011      	movs	r1, r2
    c82a:	0018      	movs	r0, r3
    c82c:	4b0e      	ldr	r3, [pc, #56]	; (c868 <xTaskRemoveFromEventList+0xb0>)
    c82e:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    c830:	68bb      	ldr	r3, [r7, #8]
    c832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    c834:	4b0e      	ldr	r3, [pc, #56]	; (c870 <xTaskRemoveFromEventList+0xb8>)
    c836:	681b      	ldr	r3, [r3, #0]
    c838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c83a:	429a      	cmp	r2, r3
    c83c:	d905      	bls.n	c84a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    c83e:	2301      	movs	r3, #1
    c840:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    c842:	4b0c      	ldr	r3, [pc, #48]	; (c874 <xTaskRemoveFromEventList+0xbc>)
    c844:	2201      	movs	r2, #1
    c846:	601a      	str	r2, [r3, #0]
    c848:	e001      	b.n	c84e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    c84a:	2300      	movs	r3, #0
    c84c:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    c84e:	68fb      	ldr	r3, [r7, #12]
}
    c850:	0018      	movs	r0, r3
    c852:	46bd      	mov	sp, r7
    c854:	b004      	add	sp, #16
    c856:	bd80      	pop	{r7, pc}
    c858:	0000b149 	.word	0x0000b149
    c85c:	20003e38 	.word	0x20003e38
    c860:	20003e18 	.word	0x20003e18
    c864:	20003d3c 	.word	0x20003d3c
    c868:	0000b099 	.word	0x0000b099
    c86c:	20003dd0 	.word	0x20003dd0
    c870:	20003d38 	.word	0x20003d38
    c874:	20003e24 	.word	0x20003e24

0000c878 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    c878:	b580      	push	{r7, lr}
    c87a:	b082      	sub	sp, #8
    c87c:	af00      	add	r7, sp, #0
    c87e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    c880:	687b      	ldr	r3, [r7, #4]
    c882:	2b00      	cmp	r3, #0
    c884:	d101      	bne.n	c88a <vTaskSetTimeOutState+0x12>
    c886:	b672      	cpsid	i
    c888:	e7fe      	b.n	c888 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    c88a:	4b06      	ldr	r3, [pc, #24]	; (c8a4 <vTaskSetTimeOutState+0x2c>)
    c88c:	681a      	ldr	r2, [r3, #0]
    c88e:	687b      	ldr	r3, [r7, #4]
    c890:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    c892:	4b05      	ldr	r3, [pc, #20]	; (c8a8 <vTaskSetTimeOutState+0x30>)
    c894:	681a      	ldr	r2, [r3, #0]
    c896:	687b      	ldr	r3, [r7, #4]
    c898:	605a      	str	r2, [r3, #4]
}
    c89a:	46c0      	nop			; (mov r8, r8)
    c89c:	46bd      	mov	sp, r7
    c89e:	b002      	add	sp, #8
    c8a0:	bd80      	pop	{r7, pc}
    c8a2:	46c0      	nop			; (mov r8, r8)
    c8a4:	20003e28 	.word	0x20003e28
    c8a8:	20003e14 	.word	0x20003e14

0000c8ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    c8ac:	b580      	push	{r7, lr}
    c8ae:	b084      	sub	sp, #16
    c8b0:	af00      	add	r7, sp, #0
    c8b2:	6078      	str	r0, [r7, #4]
    c8b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    c8b6:	687b      	ldr	r3, [r7, #4]
    c8b8:	2b00      	cmp	r3, #0
    c8ba:	d101      	bne.n	c8c0 <xTaskCheckForTimeOut+0x14>
    c8bc:	b672      	cpsid	i
    c8be:	e7fe      	b.n	c8be <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    c8c0:	683b      	ldr	r3, [r7, #0]
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d101      	bne.n	c8ca <xTaskCheckForTimeOut+0x1e>
    c8c6:	b672      	cpsid	i
    c8c8:	e7fe      	b.n	c8c8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    c8ca:	4b1d      	ldr	r3, [pc, #116]	; (c940 <xTaskCheckForTimeOut+0x94>)
    c8cc:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    c8ce:	4b1d      	ldr	r3, [pc, #116]	; (c944 <xTaskCheckForTimeOut+0x98>)
    c8d0:	681b      	ldr	r3, [r3, #0]
    c8d2:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    c8d4:	683b      	ldr	r3, [r7, #0]
    c8d6:	681b      	ldr	r3, [r3, #0]
    c8d8:	3301      	adds	r3, #1
    c8da:	d102      	bne.n	c8e2 <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    c8dc:	2300      	movs	r3, #0
    c8de:	60fb      	str	r3, [r7, #12]
    c8e0:	e027      	b.n	c932 <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    c8e2:	687b      	ldr	r3, [r7, #4]
    c8e4:	681a      	ldr	r2, [r3, #0]
    c8e6:	4b18      	ldr	r3, [pc, #96]	; (c948 <xTaskCheckForTimeOut+0x9c>)
    c8e8:	681b      	ldr	r3, [r3, #0]
    c8ea:	429a      	cmp	r2, r3
    c8ec:	d007      	beq.n	c8fe <xTaskCheckForTimeOut+0x52>
    c8ee:	687b      	ldr	r3, [r7, #4]
    c8f0:	685a      	ldr	r2, [r3, #4]
    c8f2:	68bb      	ldr	r3, [r7, #8]
    c8f4:	429a      	cmp	r2, r3
    c8f6:	d802      	bhi.n	c8fe <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    c8f8:	2301      	movs	r3, #1
    c8fa:	60fb      	str	r3, [r7, #12]
    c8fc:	e019      	b.n	c932 <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    c8fe:	687b      	ldr	r3, [r7, #4]
    c900:	685b      	ldr	r3, [r3, #4]
    c902:	68ba      	ldr	r2, [r7, #8]
    c904:	1ad2      	subs	r2, r2, r3
    c906:	683b      	ldr	r3, [r7, #0]
    c908:	681b      	ldr	r3, [r3, #0]
    c90a:	429a      	cmp	r2, r3
    c90c:	d20f      	bcs.n	c92e <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    c90e:	683b      	ldr	r3, [r7, #0]
    c910:	681a      	ldr	r2, [r3, #0]
    c912:	687b      	ldr	r3, [r7, #4]
    c914:	6859      	ldr	r1, [r3, #4]
    c916:	68bb      	ldr	r3, [r7, #8]
    c918:	1acb      	subs	r3, r1, r3
    c91a:	18d2      	adds	r2, r2, r3
    c91c:	683b      	ldr	r3, [r7, #0]
    c91e:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    c920:	687b      	ldr	r3, [r7, #4]
    c922:	0018      	movs	r0, r3
    c924:	4b09      	ldr	r3, [pc, #36]	; (c94c <xTaskCheckForTimeOut+0xa0>)
    c926:	4798      	blx	r3
			xReturn = pdFALSE;
    c928:	2300      	movs	r3, #0
    c92a:	60fb      	str	r3, [r7, #12]
    c92c:	e001      	b.n	c932 <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    c92e:	2301      	movs	r3, #1
    c930:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    c932:	4b07      	ldr	r3, [pc, #28]	; (c950 <xTaskCheckForTimeOut+0xa4>)
    c934:	4798      	blx	r3

	return xReturn;
    c936:	68fb      	ldr	r3, [r7, #12]
}
    c938:	0018      	movs	r0, r3
    c93a:	46bd      	mov	sp, r7
    c93c:	b004      	add	sp, #16
    c93e:	bd80      	pop	{r7, pc}
    c940:	0000b2b9 	.word	0x0000b2b9
    c944:	20003e14 	.word	0x20003e14
    c948:	20003e28 	.word	0x20003e28
    c94c:	0000c879 	.word	0x0000c879
    c950:	0000b2dd 	.word	0x0000b2dd

0000c954 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    c954:	b580      	push	{r7, lr}
    c956:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    c958:	4b02      	ldr	r3, [pc, #8]	; (c964 <vTaskMissedYield+0x10>)
    c95a:	2201      	movs	r2, #1
    c95c:	601a      	str	r2, [r3, #0]
}
    c95e:	46c0      	nop			; (mov r8, r8)
    c960:	46bd      	mov	sp, r7
    c962:	bd80      	pop	{r7, pc}
    c964:	20003e24 	.word	0x20003e24

0000c968 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    c968:	b580      	push	{r7, lr}
    c96a:	b082      	sub	sp, #8
    c96c:	af00      	add	r7, sp, #0
    c96e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    c970:	4b02      	ldr	r3, [pc, #8]	; (c97c <prvIdleTask+0x14>)
    c972:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    c974:	4b02      	ldr	r3, [pc, #8]	; (c980 <prvIdleTask+0x18>)
    c976:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    c978:	e7fa      	b.n	c970 <prvIdleTask+0x8>
    c97a:	46c0      	nop			; (mov r8, r8)
    c97c:	0000ca11 	.word	0x0000ca11
    c980:	0000df85 	.word	0x0000df85

0000c984 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    c984:	b580      	push	{r7, lr}
    c986:	b082      	sub	sp, #8
    c988:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    c98a:	2300      	movs	r3, #0
    c98c:	607b      	str	r3, [r7, #4]
    c98e:	e00c      	b.n	c9aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    c990:	687a      	ldr	r2, [r7, #4]
    c992:	0013      	movs	r3, r2
    c994:	009b      	lsls	r3, r3, #2
    c996:	189b      	adds	r3, r3, r2
    c998:	009b      	lsls	r3, r3, #2
    c99a:	4a14      	ldr	r2, [pc, #80]	; (c9ec <prvInitialiseTaskLists+0x68>)
    c99c:	189b      	adds	r3, r3, r2
    c99e:	0018      	movs	r0, r3
    c9a0:	4b13      	ldr	r3, [pc, #76]	; (c9f0 <prvInitialiseTaskLists+0x6c>)
    c9a2:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    c9a4:	687b      	ldr	r3, [r7, #4]
    c9a6:	3301      	adds	r3, #1
    c9a8:	607b      	str	r3, [r7, #4]
    c9aa:	687b      	ldr	r3, [r7, #4]
    c9ac:	2b04      	cmp	r3, #4
    c9ae:	d9ef      	bls.n	c990 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    c9b0:	4b10      	ldr	r3, [pc, #64]	; (c9f4 <prvInitialiseTaskLists+0x70>)
    c9b2:	0018      	movs	r0, r3
    c9b4:	4b0e      	ldr	r3, [pc, #56]	; (c9f0 <prvInitialiseTaskLists+0x6c>)
    c9b6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    c9b8:	4b0f      	ldr	r3, [pc, #60]	; (c9f8 <prvInitialiseTaskLists+0x74>)
    c9ba:	0018      	movs	r0, r3
    c9bc:	4b0c      	ldr	r3, [pc, #48]	; (c9f0 <prvInitialiseTaskLists+0x6c>)
    c9be:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    c9c0:	4b0e      	ldr	r3, [pc, #56]	; (c9fc <prvInitialiseTaskLists+0x78>)
    c9c2:	0018      	movs	r0, r3
    c9c4:	4b0a      	ldr	r3, [pc, #40]	; (c9f0 <prvInitialiseTaskLists+0x6c>)
    c9c6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    c9c8:	4b0d      	ldr	r3, [pc, #52]	; (ca00 <prvInitialiseTaskLists+0x7c>)
    c9ca:	0018      	movs	r0, r3
    c9cc:	4b08      	ldr	r3, [pc, #32]	; (c9f0 <prvInitialiseTaskLists+0x6c>)
    c9ce:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    c9d0:	4b0c      	ldr	r3, [pc, #48]	; (ca04 <prvInitialiseTaskLists+0x80>)
    c9d2:	0018      	movs	r0, r3
    c9d4:	4b06      	ldr	r3, [pc, #24]	; (c9f0 <prvInitialiseTaskLists+0x6c>)
    c9d6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    c9d8:	4b0b      	ldr	r3, [pc, #44]	; (ca08 <prvInitialiseTaskLists+0x84>)
    c9da:	4a06      	ldr	r2, [pc, #24]	; (c9f4 <prvInitialiseTaskLists+0x70>)
    c9dc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    c9de:	4b0b      	ldr	r3, [pc, #44]	; (ca0c <prvInitialiseTaskLists+0x88>)
    c9e0:	4a05      	ldr	r2, [pc, #20]	; (c9f8 <prvInitialiseTaskLists+0x74>)
    c9e2:	601a      	str	r2, [r3, #0]
}
    c9e4:	46c0      	nop			; (mov r8, r8)
    c9e6:	46bd      	mov	sp, r7
    c9e8:	b002      	add	sp, #8
    c9ea:	bd80      	pop	{r7, pc}
    c9ec:	20003d3c 	.word	0x20003d3c
    c9f0:	0000b045 	.word	0x0000b045
    c9f4:	20003da0 	.word	0x20003da0
    c9f8:	20003db4 	.word	0x20003db4
    c9fc:	20003dd0 	.word	0x20003dd0
    ca00:	20003de4 	.word	0x20003de4
    ca04:	20003dfc 	.word	0x20003dfc
    ca08:	20003dc8 	.word	0x20003dc8
    ca0c:	20003dcc 	.word	0x20003dcc

0000ca10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    ca10:	b580      	push	{r7, lr}
    ca12:	b082      	sub	sp, #8
    ca14:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    ca16:	e027      	b.n	ca68 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    ca18:	4b17      	ldr	r3, [pc, #92]	; (ca78 <prvCheckTasksWaitingTermination+0x68>)
    ca1a:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    ca1c:	4b17      	ldr	r3, [pc, #92]	; (ca7c <prvCheckTasksWaitingTermination+0x6c>)
    ca1e:	681b      	ldr	r3, [r3, #0]
    ca20:	425a      	negs	r2, r3
    ca22:	4153      	adcs	r3, r2
    ca24:	b2db      	uxtb	r3, r3
    ca26:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    ca28:	4b15      	ldr	r3, [pc, #84]	; (ca80 <prvCheckTasksWaitingTermination+0x70>)
    ca2a:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    ca2c:	687b      	ldr	r3, [r7, #4]
    ca2e:	2b00      	cmp	r3, #0
    ca30:	d11a      	bne.n	ca68 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    ca32:	4b14      	ldr	r3, [pc, #80]	; (ca84 <prvCheckTasksWaitingTermination+0x74>)
    ca34:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    ca36:	4b11      	ldr	r3, [pc, #68]	; (ca7c <prvCheckTasksWaitingTermination+0x6c>)
    ca38:	68db      	ldr	r3, [r3, #12]
    ca3a:	68db      	ldr	r3, [r3, #12]
    ca3c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    ca3e:	683b      	ldr	r3, [r7, #0]
    ca40:	3304      	adds	r3, #4
    ca42:	0018      	movs	r0, r3
    ca44:	4b10      	ldr	r3, [pc, #64]	; (ca88 <prvCheckTasksWaitingTermination+0x78>)
    ca46:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    ca48:	4b10      	ldr	r3, [pc, #64]	; (ca8c <prvCheckTasksWaitingTermination+0x7c>)
    ca4a:	681b      	ldr	r3, [r3, #0]
    ca4c:	1e5a      	subs	r2, r3, #1
    ca4e:	4b0f      	ldr	r3, [pc, #60]	; (ca8c <prvCheckTasksWaitingTermination+0x7c>)
    ca50:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
    ca52:	4b0f      	ldr	r3, [pc, #60]	; (ca90 <prvCheckTasksWaitingTermination+0x80>)
    ca54:	681b      	ldr	r3, [r3, #0]
    ca56:	1e5a      	subs	r2, r3, #1
    ca58:	4b0d      	ldr	r3, [pc, #52]	; (ca90 <prvCheckTasksWaitingTermination+0x80>)
    ca5a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    ca5c:	4b0d      	ldr	r3, [pc, #52]	; (ca94 <prvCheckTasksWaitingTermination+0x84>)
    ca5e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    ca60:	683b      	ldr	r3, [r7, #0]
    ca62:	0018      	movs	r0, r3
    ca64:	4b0c      	ldr	r3, [pc, #48]	; (ca98 <prvCheckTasksWaitingTermination+0x88>)
    ca66:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    ca68:	4b09      	ldr	r3, [pc, #36]	; (ca90 <prvCheckTasksWaitingTermination+0x80>)
    ca6a:	681b      	ldr	r3, [r3, #0]
    ca6c:	2b00      	cmp	r3, #0
    ca6e:	d1d3      	bne.n	ca18 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    ca70:	46c0      	nop			; (mov r8, r8)
    ca72:	46bd      	mov	sp, r7
    ca74:	b002      	add	sp, #8
    ca76:	bd80      	pop	{r7, pc}
    ca78:	0000c399 	.word	0x0000c399
    ca7c:	20003de4 	.word	0x20003de4
    ca80:	0000c3b1 	.word	0x0000c3b1
    ca84:	0000b2b9 	.word	0x0000b2b9
    ca88:	0000b149 	.word	0x0000b149
    ca8c:	20003e10 	.word	0x20003e10
    ca90:	20003df8 	.word	0x20003df8
    ca94:	0000b2dd 	.word	0x0000b2dd
    ca98:	0000ca9d 	.word	0x0000ca9d

0000ca9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    ca9c:	b580      	push	{r7, lr}
    ca9e:	b082      	sub	sp, #8
    caa0:	af00      	add	r7, sp, #0
    caa2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    caa4:	687b      	ldr	r3, [r7, #4]
    caa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    caa8:	0018      	movs	r0, r3
    caaa:	4b05      	ldr	r3, [pc, #20]	; (cac0 <prvDeleteTCB+0x24>)
    caac:	4798      	blx	r3
			vPortFree( pxTCB );
    caae:	687b      	ldr	r3, [r7, #4]
    cab0:	0018      	movs	r0, r3
    cab2:	4b03      	ldr	r3, [pc, #12]	; (cac0 <prvDeleteTCB+0x24>)
    cab4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    cab6:	46c0      	nop			; (mov r8, r8)
    cab8:	46bd      	mov	sp, r7
    caba:	b002      	add	sp, #8
    cabc:	bd80      	pop	{r7, pc}
    cabe:	46c0      	nop			; (mov r8, r8)
    cac0:	0000b46d 	.word	0x0000b46d

0000cac4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    cac4:	b580      	push	{r7, lr}
    cac6:	b082      	sub	sp, #8
    cac8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    caca:	4b0e      	ldr	r3, [pc, #56]	; (cb04 <prvResetNextTaskUnblockTime+0x40>)
    cacc:	681b      	ldr	r3, [r3, #0]
    cace:	681b      	ldr	r3, [r3, #0]
    cad0:	2b00      	cmp	r3, #0
    cad2:	d101      	bne.n	cad8 <prvResetNextTaskUnblockTime+0x14>
    cad4:	2301      	movs	r3, #1
    cad6:	e000      	b.n	cada <prvResetNextTaskUnblockTime+0x16>
    cad8:	2300      	movs	r3, #0
    cada:	2b00      	cmp	r3, #0
    cadc:	d004      	beq.n	cae8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    cade:	4b0a      	ldr	r3, [pc, #40]	; (cb08 <prvResetNextTaskUnblockTime+0x44>)
    cae0:	2201      	movs	r2, #1
    cae2:	4252      	negs	r2, r2
    cae4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    cae6:	e008      	b.n	cafa <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    cae8:	4b06      	ldr	r3, [pc, #24]	; (cb04 <prvResetNextTaskUnblockTime+0x40>)
    caea:	681b      	ldr	r3, [r3, #0]
    caec:	68db      	ldr	r3, [r3, #12]
    caee:	68db      	ldr	r3, [r3, #12]
    caf0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    caf2:	687b      	ldr	r3, [r7, #4]
    caf4:	685a      	ldr	r2, [r3, #4]
    caf6:	4b04      	ldr	r3, [pc, #16]	; (cb08 <prvResetNextTaskUnblockTime+0x44>)
    caf8:	601a      	str	r2, [r3, #0]
	}
}
    cafa:	46c0      	nop			; (mov r8, r8)
    cafc:	46bd      	mov	sp, r7
    cafe:	b002      	add	sp, #8
    cb00:	bd80      	pop	{r7, pc}
    cb02:	46c0      	nop			; (mov r8, r8)
    cb04:	20003dc8 	.word	0x20003dc8
    cb08:	20003e30 	.word	0x20003e30

0000cb0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    cb0c:	b580      	push	{r7, lr}
    cb0e:	b082      	sub	sp, #8
    cb10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    cb12:	4b0a      	ldr	r3, [pc, #40]	; (cb3c <xTaskGetSchedulerState+0x30>)
    cb14:	681b      	ldr	r3, [r3, #0]
    cb16:	2b00      	cmp	r3, #0
    cb18:	d102      	bne.n	cb20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    cb1a:	2301      	movs	r3, #1
    cb1c:	607b      	str	r3, [r7, #4]
    cb1e:	e008      	b.n	cb32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    cb20:	4b07      	ldr	r3, [pc, #28]	; (cb40 <xTaskGetSchedulerState+0x34>)
    cb22:	681b      	ldr	r3, [r3, #0]
    cb24:	2b00      	cmp	r3, #0
    cb26:	d102      	bne.n	cb2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    cb28:	2302      	movs	r3, #2
    cb2a:	607b      	str	r3, [r7, #4]
    cb2c:	e001      	b.n	cb32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    cb2e:	2300      	movs	r3, #0
    cb30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    cb32:	687b      	ldr	r3, [r7, #4]
	}
    cb34:	0018      	movs	r0, r3
    cb36:	46bd      	mov	sp, r7
    cb38:	b002      	add	sp, #8
    cb3a:	bd80      	pop	{r7, pc}
    cb3c:	20003e1c 	.word	0x20003e1c
    cb40:	20003e38 	.word	0x20003e38

0000cb44 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    cb44:	b580      	push	{r7, lr}
    cb46:	b084      	sub	sp, #16
    cb48:	af00      	add	r7, sp, #0
    cb4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    cb4c:	687b      	ldr	r3, [r7, #4]
    cb4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    cb50:	687b      	ldr	r3, [r7, #4]
    cb52:	2b00      	cmp	r3, #0
    cb54:	d04a      	beq.n	cbec <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    cb56:	68fb      	ldr	r3, [r7, #12]
    cb58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cb5a:	4b26      	ldr	r3, [pc, #152]	; (cbf4 <vTaskPriorityInherit+0xb0>)
    cb5c:	681b      	ldr	r3, [r3, #0]
    cb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cb60:	429a      	cmp	r2, r3
    cb62:	d243      	bcs.n	cbec <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    cb64:	68fb      	ldr	r3, [r7, #12]
    cb66:	699b      	ldr	r3, [r3, #24]
    cb68:	2b00      	cmp	r3, #0
    cb6a:	db06      	blt.n	cb7a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    cb6c:	4b21      	ldr	r3, [pc, #132]	; (cbf4 <vTaskPriorityInherit+0xb0>)
    cb6e:	681b      	ldr	r3, [r3, #0]
    cb70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cb72:	2205      	movs	r2, #5
    cb74:	1ad2      	subs	r2, r2, r3
    cb76:	68fb      	ldr	r3, [r7, #12]
    cb78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    cb7a:	68fb      	ldr	r3, [r7, #12]
    cb7c:	6959      	ldr	r1, [r3, #20]
    cb7e:	68fb      	ldr	r3, [r7, #12]
    cb80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cb82:	0013      	movs	r3, r2
    cb84:	009b      	lsls	r3, r3, #2
    cb86:	189b      	adds	r3, r3, r2
    cb88:	009b      	lsls	r3, r3, #2
    cb8a:	4a1b      	ldr	r2, [pc, #108]	; (cbf8 <vTaskPriorityInherit+0xb4>)
    cb8c:	189b      	adds	r3, r3, r2
    cb8e:	4299      	cmp	r1, r3
    cb90:	d101      	bne.n	cb96 <vTaskPriorityInherit+0x52>
    cb92:	2301      	movs	r3, #1
    cb94:	e000      	b.n	cb98 <vTaskPriorityInherit+0x54>
    cb96:	2300      	movs	r3, #0
    cb98:	2b00      	cmp	r3, #0
    cb9a:	d022      	beq.n	cbe2 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    cb9c:	68fb      	ldr	r3, [r7, #12]
    cb9e:	3304      	adds	r3, #4
    cba0:	0018      	movs	r0, r3
    cba2:	4b16      	ldr	r3, [pc, #88]	; (cbfc <vTaskPriorityInherit+0xb8>)
    cba4:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    cba6:	4b13      	ldr	r3, [pc, #76]	; (cbf4 <vTaskPriorityInherit+0xb0>)
    cba8:	681b      	ldr	r3, [r3, #0]
    cbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cbac:	68fb      	ldr	r3, [r7, #12]
    cbae:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    cbb0:	68fb      	ldr	r3, [r7, #12]
    cbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cbb4:	4b12      	ldr	r3, [pc, #72]	; (cc00 <vTaskPriorityInherit+0xbc>)
    cbb6:	681b      	ldr	r3, [r3, #0]
    cbb8:	429a      	cmp	r2, r3
    cbba:	d903      	bls.n	cbc4 <vTaskPriorityInherit+0x80>
    cbbc:	68fb      	ldr	r3, [r7, #12]
    cbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cbc0:	4b0f      	ldr	r3, [pc, #60]	; (cc00 <vTaskPriorityInherit+0xbc>)
    cbc2:	601a      	str	r2, [r3, #0]
    cbc4:	68fb      	ldr	r3, [r7, #12]
    cbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cbc8:	0013      	movs	r3, r2
    cbca:	009b      	lsls	r3, r3, #2
    cbcc:	189b      	adds	r3, r3, r2
    cbce:	009b      	lsls	r3, r3, #2
    cbd0:	4a09      	ldr	r2, [pc, #36]	; (cbf8 <vTaskPriorityInherit+0xb4>)
    cbd2:	189a      	adds	r2, r3, r2
    cbd4:	68fb      	ldr	r3, [r7, #12]
    cbd6:	3304      	adds	r3, #4
    cbd8:	0019      	movs	r1, r3
    cbda:	0010      	movs	r0, r2
    cbdc:	4b09      	ldr	r3, [pc, #36]	; (cc04 <vTaskPriorityInherit+0xc0>)
    cbde:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    cbe0:	e004      	b.n	cbec <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    cbe2:	4b04      	ldr	r3, [pc, #16]	; (cbf4 <vTaskPriorityInherit+0xb0>)
    cbe4:	681b      	ldr	r3, [r3, #0]
    cbe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cbe8:	68fb      	ldr	r3, [r7, #12]
    cbea:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    cbec:	46c0      	nop			; (mov r8, r8)
    cbee:	46bd      	mov	sp, r7
    cbf0:	b004      	add	sp, #16
    cbf2:	bd80      	pop	{r7, pc}
    cbf4:	20003d38 	.word	0x20003d38
    cbf8:	20003d3c 	.word	0x20003d3c
    cbfc:	0000b149 	.word	0x0000b149
    cc00:	20003e18 	.word	0x20003e18
    cc04:	0000b099 	.word	0x0000b099

0000cc08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    cc08:	b580      	push	{r7, lr}
    cc0a:	b084      	sub	sp, #16
    cc0c:	af00      	add	r7, sp, #0
    cc0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    cc10:	687b      	ldr	r3, [r7, #4]
    cc12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    cc14:	2300      	movs	r3, #0
    cc16:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    cc18:	687b      	ldr	r3, [r7, #4]
    cc1a:	2b00      	cmp	r3, #0
    cc1c:	d044      	beq.n	cca8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    cc1e:	4b25      	ldr	r3, [pc, #148]	; (ccb4 <xTaskPriorityDisinherit+0xac>)
    cc20:	681b      	ldr	r3, [r3, #0]
    cc22:	68ba      	ldr	r2, [r7, #8]
    cc24:	429a      	cmp	r2, r3
    cc26:	d001      	beq.n	cc2c <xTaskPriorityDisinherit+0x24>
    cc28:	b672      	cpsid	i
    cc2a:	e7fe      	b.n	cc2a <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
    cc2c:	68bb      	ldr	r3, [r7, #8]
    cc2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cc30:	2b00      	cmp	r3, #0
    cc32:	d101      	bne.n	cc38 <xTaskPriorityDisinherit+0x30>
    cc34:	b672      	cpsid	i
    cc36:	e7fe      	b.n	cc36 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    cc38:	68bb      	ldr	r3, [r7, #8]
    cc3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cc3c:	1e5a      	subs	r2, r3, #1
    cc3e:	68bb      	ldr	r3, [r7, #8]
    cc40:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    cc42:	68bb      	ldr	r3, [r7, #8]
    cc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cc46:	68bb      	ldr	r3, [r7, #8]
    cc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    cc4a:	429a      	cmp	r2, r3
    cc4c:	d02c      	beq.n	cca8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    cc4e:	68bb      	ldr	r3, [r7, #8]
    cc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cc52:	2b00      	cmp	r3, #0
    cc54:	d128      	bne.n	cca8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    cc56:	68bb      	ldr	r3, [r7, #8]
    cc58:	3304      	adds	r3, #4
    cc5a:	0018      	movs	r0, r3
    cc5c:	4b16      	ldr	r3, [pc, #88]	; (ccb8 <xTaskPriorityDisinherit+0xb0>)
    cc5e:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    cc60:	68bb      	ldr	r3, [r7, #8]
    cc62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    cc64:	68bb      	ldr	r3, [r7, #8]
    cc66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    cc68:	68bb      	ldr	r3, [r7, #8]
    cc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    cc6c:	2205      	movs	r2, #5
    cc6e:	1ad2      	subs	r2, r2, r3
    cc70:	68bb      	ldr	r3, [r7, #8]
    cc72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    cc74:	68bb      	ldr	r3, [r7, #8]
    cc76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cc78:	4b10      	ldr	r3, [pc, #64]	; (ccbc <xTaskPriorityDisinherit+0xb4>)
    cc7a:	681b      	ldr	r3, [r3, #0]
    cc7c:	429a      	cmp	r2, r3
    cc7e:	d903      	bls.n	cc88 <xTaskPriorityDisinherit+0x80>
    cc80:	68bb      	ldr	r3, [r7, #8]
    cc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cc84:	4b0d      	ldr	r3, [pc, #52]	; (ccbc <xTaskPriorityDisinherit+0xb4>)
    cc86:	601a      	str	r2, [r3, #0]
    cc88:	68bb      	ldr	r3, [r7, #8]
    cc8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    cc8c:	0013      	movs	r3, r2
    cc8e:	009b      	lsls	r3, r3, #2
    cc90:	189b      	adds	r3, r3, r2
    cc92:	009b      	lsls	r3, r3, #2
    cc94:	4a0a      	ldr	r2, [pc, #40]	; (ccc0 <xTaskPriorityDisinherit+0xb8>)
    cc96:	189a      	adds	r2, r3, r2
    cc98:	68bb      	ldr	r3, [r7, #8]
    cc9a:	3304      	adds	r3, #4
    cc9c:	0019      	movs	r1, r3
    cc9e:	0010      	movs	r0, r2
    cca0:	4b08      	ldr	r3, [pc, #32]	; (ccc4 <xTaskPriorityDisinherit+0xbc>)
    cca2:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    cca4:	2301      	movs	r3, #1
    cca6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    cca8:	68fb      	ldr	r3, [r7, #12]
	}
    ccaa:	0018      	movs	r0, r3
    ccac:	46bd      	mov	sp, r7
    ccae:	b004      	add	sp, #16
    ccb0:	bd80      	pop	{r7, pc}
    ccb2:	46c0      	nop			; (mov r8, r8)
    ccb4:	20003d38 	.word	0x20003d38
    ccb8:	0000b149 	.word	0x0000b149
    ccbc:	20003e18 	.word	0x20003e18
    ccc0:	20003d3c 	.word	0x20003d3c
    ccc4:	0000b099 	.word	0x0000b099

0000ccc8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    ccc8:	b580      	push	{r7, lr}
    ccca:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    cccc:	4b06      	ldr	r3, [pc, #24]	; (cce8 <pvTaskIncrementMutexHeldCount+0x20>)
    ccce:	681b      	ldr	r3, [r3, #0]
    ccd0:	2b00      	cmp	r3, #0
    ccd2:	d004      	beq.n	ccde <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    ccd4:	4b04      	ldr	r3, [pc, #16]	; (cce8 <pvTaskIncrementMutexHeldCount+0x20>)
    ccd6:	681b      	ldr	r3, [r3, #0]
    ccd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    ccda:	3201      	adds	r2, #1
    ccdc:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    ccde:	4b02      	ldr	r3, [pc, #8]	; (cce8 <pvTaskIncrementMutexHeldCount+0x20>)
    cce0:	681b      	ldr	r3, [r3, #0]
	}
    cce2:	0018      	movs	r0, r3
    cce4:	46bd      	mov	sp, r7
    cce6:	bd80      	pop	{r7, pc}
    cce8:	20003d38 	.word	0x20003d38

0000ccec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    ccec:	b580      	push	{r7, lr}
    ccee:	b084      	sub	sp, #16
    ccf0:	af00      	add	r7, sp, #0
    ccf2:	6078      	str	r0, [r7, #4]
    ccf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    ccf6:	4b21      	ldr	r3, [pc, #132]	; (cd7c <prvAddCurrentTaskToDelayedList+0x90>)
    ccf8:	681b      	ldr	r3, [r3, #0]
    ccfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    ccfc:	4b20      	ldr	r3, [pc, #128]	; (cd80 <prvAddCurrentTaskToDelayedList+0x94>)
    ccfe:	681b      	ldr	r3, [r3, #0]
    cd00:	3304      	adds	r3, #4
    cd02:	0018      	movs	r0, r3
    cd04:	4b1f      	ldr	r3, [pc, #124]	; (cd84 <prvAddCurrentTaskToDelayedList+0x98>)
    cd06:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    cd08:	687b      	ldr	r3, [r7, #4]
    cd0a:	3301      	adds	r3, #1
    cd0c:	d10b      	bne.n	cd26 <prvAddCurrentTaskToDelayedList+0x3a>
    cd0e:	683b      	ldr	r3, [r7, #0]
    cd10:	2b00      	cmp	r3, #0
    cd12:	d008      	beq.n	cd26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    cd14:	4b1a      	ldr	r3, [pc, #104]	; (cd80 <prvAddCurrentTaskToDelayedList+0x94>)
    cd16:	681b      	ldr	r3, [r3, #0]
    cd18:	1d1a      	adds	r2, r3, #4
    cd1a:	4b1b      	ldr	r3, [pc, #108]	; (cd88 <prvAddCurrentTaskToDelayedList+0x9c>)
    cd1c:	0011      	movs	r1, r2
    cd1e:	0018      	movs	r0, r3
    cd20:	4b1a      	ldr	r3, [pc, #104]	; (cd8c <prvAddCurrentTaskToDelayedList+0xa0>)
    cd22:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    cd24:	e026      	b.n	cd74 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    cd26:	68fa      	ldr	r2, [r7, #12]
    cd28:	687b      	ldr	r3, [r7, #4]
    cd2a:	18d3      	adds	r3, r2, r3
    cd2c:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    cd2e:	4b14      	ldr	r3, [pc, #80]	; (cd80 <prvAddCurrentTaskToDelayedList+0x94>)
    cd30:	681b      	ldr	r3, [r3, #0]
    cd32:	68ba      	ldr	r2, [r7, #8]
    cd34:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    cd36:	68ba      	ldr	r2, [r7, #8]
    cd38:	68fb      	ldr	r3, [r7, #12]
    cd3a:	429a      	cmp	r2, r3
    cd3c:	d209      	bcs.n	cd52 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    cd3e:	4b14      	ldr	r3, [pc, #80]	; (cd90 <prvAddCurrentTaskToDelayedList+0xa4>)
    cd40:	681a      	ldr	r2, [r3, #0]
    cd42:	4b0f      	ldr	r3, [pc, #60]	; (cd80 <prvAddCurrentTaskToDelayedList+0x94>)
    cd44:	681b      	ldr	r3, [r3, #0]
    cd46:	3304      	adds	r3, #4
    cd48:	0019      	movs	r1, r3
    cd4a:	0010      	movs	r0, r2
    cd4c:	4b11      	ldr	r3, [pc, #68]	; (cd94 <prvAddCurrentTaskToDelayedList+0xa8>)
    cd4e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    cd50:	e010      	b.n	cd74 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    cd52:	4b11      	ldr	r3, [pc, #68]	; (cd98 <prvAddCurrentTaskToDelayedList+0xac>)
    cd54:	681a      	ldr	r2, [r3, #0]
    cd56:	4b0a      	ldr	r3, [pc, #40]	; (cd80 <prvAddCurrentTaskToDelayedList+0x94>)
    cd58:	681b      	ldr	r3, [r3, #0]
    cd5a:	3304      	adds	r3, #4
    cd5c:	0019      	movs	r1, r3
    cd5e:	0010      	movs	r0, r2
    cd60:	4b0c      	ldr	r3, [pc, #48]	; (cd94 <prvAddCurrentTaskToDelayedList+0xa8>)
    cd62:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    cd64:	4b0d      	ldr	r3, [pc, #52]	; (cd9c <prvAddCurrentTaskToDelayedList+0xb0>)
    cd66:	681b      	ldr	r3, [r3, #0]
    cd68:	68ba      	ldr	r2, [r7, #8]
    cd6a:	429a      	cmp	r2, r3
    cd6c:	d202      	bcs.n	cd74 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    cd6e:	4b0b      	ldr	r3, [pc, #44]	; (cd9c <prvAddCurrentTaskToDelayedList+0xb0>)
    cd70:	68ba      	ldr	r2, [r7, #8]
    cd72:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    cd74:	46c0      	nop			; (mov r8, r8)
    cd76:	46bd      	mov	sp, r7
    cd78:	b004      	add	sp, #16
    cd7a:	bd80      	pop	{r7, pc}
    cd7c:	20003e14 	.word	0x20003e14
    cd80:	20003d38 	.word	0x20003d38
    cd84:	0000b149 	.word	0x0000b149
    cd88:	20003dfc 	.word	0x20003dfc
    cd8c:	0000b099 	.word	0x0000b099
    cd90:	20003dcc 	.word	0x20003dcc
    cd94:	0000b0dd 	.word	0x0000b0dd
    cd98:	20003dc8 	.word	0x20003dc8
    cd9c:	20003e30 	.word	0x20003e30

0000cda0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    cda0:	b590      	push	{r4, r7, lr}
    cda2:	b085      	sub	sp, #20
    cda4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    cda6:	2300      	movs	r3, #0
    cda8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    cdaa:	4b0e      	ldr	r3, [pc, #56]	; (cde4 <xTimerCreateTimerTask+0x44>)
    cdac:	4798      	blx	r3

	if( xTimerQueue != NULL )
    cdae:	4b0e      	ldr	r3, [pc, #56]	; (cde8 <xTimerCreateTimerTask+0x48>)
    cdb0:	681b      	ldr	r3, [r3, #0]
    cdb2:	2b00      	cmp	r3, #0
    cdb4:	d00b      	beq.n	cdce <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    cdb6:	490d      	ldr	r1, [pc, #52]	; (cdec <xTimerCreateTimerTask+0x4c>)
    cdb8:	480d      	ldr	r0, [pc, #52]	; (cdf0 <xTimerCreateTimerTask+0x50>)
    cdba:	4b0e      	ldr	r3, [pc, #56]	; (cdf4 <xTimerCreateTimerTask+0x54>)
    cdbc:	9301      	str	r3, [sp, #4]
    cdbe:	2302      	movs	r3, #2
    cdc0:	9300      	str	r3, [sp, #0]
    cdc2:	2300      	movs	r3, #0
    cdc4:	2250      	movs	r2, #80	; 0x50
    cdc6:	4c0c      	ldr	r4, [pc, #48]	; (cdf8 <xTimerCreateTimerTask+0x58>)
    cdc8:	47a0      	blx	r4
    cdca:	0003      	movs	r3, r0
    cdcc:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    cdce:	687b      	ldr	r3, [r7, #4]
    cdd0:	2b00      	cmp	r3, #0
    cdd2:	d101      	bne.n	cdd8 <xTimerCreateTimerTask+0x38>
    cdd4:	b672      	cpsid	i
    cdd6:	e7fe      	b.n	cdd6 <xTimerCreateTimerTask+0x36>
	return xReturn;
    cdd8:	687b      	ldr	r3, [r7, #4]
}
    cdda:	0018      	movs	r0, r3
    cddc:	46bd      	mov	sp, r7
    cdde:	b003      	add	sp, #12
    cde0:	bd90      	pop	{r4, r7, pc}
    cde2:	46c0      	nop			; (mov r8, r8)
    cde4:	0000d2e1 	.word	0x0000d2e1
    cde8:	20003e6c 	.word	0x20003e6c
    cdec:	00012360 	.word	0x00012360
    cdf0:	0000cf21 	.word	0x0000cf21
    cdf4:	20003e70 	.word	0x20003e70
    cdf8:	0000bf75 	.word	0x0000bf75

0000cdfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    cdfc:	b590      	push	{r4, r7, lr}
    cdfe:	b089      	sub	sp, #36	; 0x24
    ce00:	af00      	add	r7, sp, #0
    ce02:	60f8      	str	r0, [r7, #12]
    ce04:	60b9      	str	r1, [r7, #8]
    ce06:	607a      	str	r2, [r7, #4]
    ce08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    ce0a:	2300      	movs	r3, #0
    ce0c:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    ce0e:	68fb      	ldr	r3, [r7, #12]
    ce10:	2b00      	cmp	r3, #0
    ce12:	d101      	bne.n	ce18 <xTimerGenericCommand+0x1c>
    ce14:	b672      	cpsid	i
    ce16:	e7fe      	b.n	ce16 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    ce18:	4b1e      	ldr	r3, [pc, #120]	; (ce94 <xTimerGenericCommand+0x98>)
    ce1a:	681b      	ldr	r3, [r3, #0]
    ce1c:	2b00      	cmp	r3, #0
    ce1e:	d033      	beq.n	ce88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    ce20:	2310      	movs	r3, #16
    ce22:	18fb      	adds	r3, r7, r3
    ce24:	68ba      	ldr	r2, [r7, #8]
    ce26:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    ce28:	2310      	movs	r3, #16
    ce2a:	18fb      	adds	r3, r7, r3
    ce2c:	687a      	ldr	r2, [r7, #4]
    ce2e:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    ce30:	2310      	movs	r3, #16
    ce32:	18fb      	adds	r3, r7, r3
    ce34:	68fa      	ldr	r2, [r7, #12]
    ce36:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    ce38:	68bb      	ldr	r3, [r7, #8]
    ce3a:	2b05      	cmp	r3, #5
    ce3c:	dc1a      	bgt.n	ce74 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    ce3e:	4b16      	ldr	r3, [pc, #88]	; (ce98 <xTimerGenericCommand+0x9c>)
    ce40:	4798      	blx	r3
    ce42:	1e03      	subs	r3, r0, #0
    ce44:	2b02      	cmp	r3, #2
    ce46:	d10a      	bne.n	ce5e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    ce48:	4b12      	ldr	r3, [pc, #72]	; (ce94 <xTimerGenericCommand+0x98>)
    ce4a:	6818      	ldr	r0, [r3, #0]
    ce4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ce4e:	2310      	movs	r3, #16
    ce50:	18f9      	adds	r1, r7, r3
    ce52:	2300      	movs	r3, #0
    ce54:	4c11      	ldr	r4, [pc, #68]	; (ce9c <xTimerGenericCommand+0xa0>)
    ce56:	47a0      	blx	r4
    ce58:	0003      	movs	r3, r0
    ce5a:	61fb      	str	r3, [r7, #28]
    ce5c:	e014      	b.n	ce88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    ce5e:	4b0d      	ldr	r3, [pc, #52]	; (ce94 <xTimerGenericCommand+0x98>)
    ce60:	6818      	ldr	r0, [r3, #0]
    ce62:	2310      	movs	r3, #16
    ce64:	18f9      	adds	r1, r7, r3
    ce66:	2300      	movs	r3, #0
    ce68:	2200      	movs	r2, #0
    ce6a:	4c0c      	ldr	r4, [pc, #48]	; (ce9c <xTimerGenericCommand+0xa0>)
    ce6c:	47a0      	blx	r4
    ce6e:	0003      	movs	r3, r0
    ce70:	61fb      	str	r3, [r7, #28]
    ce72:	e009      	b.n	ce88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    ce74:	4b07      	ldr	r3, [pc, #28]	; (ce94 <xTimerGenericCommand+0x98>)
    ce76:	6818      	ldr	r0, [r3, #0]
    ce78:	683a      	ldr	r2, [r7, #0]
    ce7a:	2310      	movs	r3, #16
    ce7c:	18f9      	adds	r1, r7, r3
    ce7e:	2300      	movs	r3, #0
    ce80:	4c07      	ldr	r4, [pc, #28]	; (cea0 <xTimerGenericCommand+0xa4>)
    ce82:	47a0      	blx	r4
    ce84:	0003      	movs	r3, r0
    ce86:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    ce88:	69fb      	ldr	r3, [r7, #28]
}
    ce8a:	0018      	movs	r0, r3
    ce8c:	46bd      	mov	sp, r7
    ce8e:	b009      	add	sp, #36	; 0x24
    ce90:	bd90      	pop	{r4, r7, pc}
    ce92:	46c0      	nop			; (mov r8, r8)
    ce94:	20003e6c 	.word	0x20003e6c
    ce98:	0000cb0d 	.word	0x0000cb0d
    ce9c:	0000b679 	.word	0x0000b679
    cea0:	0000b859 	.word	0x0000b859

0000cea4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    cea4:	b590      	push	{r4, r7, lr}
    cea6:	b087      	sub	sp, #28
    cea8:	af02      	add	r7, sp, #8
    ceaa:	6078      	str	r0, [r7, #4]
    ceac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    ceae:	4b18      	ldr	r3, [pc, #96]	; (cf10 <prvProcessExpiredTimer+0x6c>)
    ceb0:	681b      	ldr	r3, [r3, #0]
    ceb2:	68db      	ldr	r3, [r3, #12]
    ceb4:	68db      	ldr	r3, [r3, #12]
    ceb6:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    ceb8:	68fb      	ldr	r3, [r7, #12]
    ceba:	3304      	adds	r3, #4
    cebc:	0018      	movs	r0, r3
    cebe:	4b15      	ldr	r3, [pc, #84]	; (cf14 <prvProcessExpiredTimer+0x70>)
    cec0:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    cec2:	68fb      	ldr	r3, [r7, #12]
    cec4:	69db      	ldr	r3, [r3, #28]
    cec6:	2b01      	cmp	r3, #1
    cec8:	d119      	bne.n	cefe <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    ceca:	68fb      	ldr	r3, [r7, #12]
    cecc:	699a      	ldr	r2, [r3, #24]
    cece:	687b      	ldr	r3, [r7, #4]
    ced0:	18d1      	adds	r1, r2, r3
    ced2:	687b      	ldr	r3, [r7, #4]
    ced4:	683a      	ldr	r2, [r7, #0]
    ced6:	68f8      	ldr	r0, [r7, #12]
    ced8:	4c0f      	ldr	r4, [pc, #60]	; (cf18 <prvProcessExpiredTimer+0x74>)
    ceda:	47a0      	blx	r4
    cedc:	1e03      	subs	r3, r0, #0
    cede:	d00e      	beq.n	cefe <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    cee0:	687a      	ldr	r2, [r7, #4]
    cee2:	68f8      	ldr	r0, [r7, #12]
    cee4:	2300      	movs	r3, #0
    cee6:	9300      	str	r3, [sp, #0]
    cee8:	2300      	movs	r3, #0
    ceea:	2100      	movs	r1, #0
    ceec:	4c0b      	ldr	r4, [pc, #44]	; (cf1c <prvProcessExpiredTimer+0x78>)
    ceee:	47a0      	blx	r4
    cef0:	0003      	movs	r3, r0
    cef2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    cef4:	68bb      	ldr	r3, [r7, #8]
    cef6:	2b00      	cmp	r3, #0
    cef8:	d101      	bne.n	cefe <prvProcessExpiredTimer+0x5a>
    cefa:	b672      	cpsid	i
    cefc:	e7fe      	b.n	cefc <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    cefe:	68fb      	ldr	r3, [r7, #12]
    cf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    cf02:	68fa      	ldr	r2, [r7, #12]
    cf04:	0010      	movs	r0, r2
    cf06:	4798      	blx	r3
}
    cf08:	46c0      	nop			; (mov r8, r8)
    cf0a:	46bd      	mov	sp, r7
    cf0c:	b005      	add	sp, #20
    cf0e:	bd90      	pop	{r4, r7, pc}
    cf10:	20003e64 	.word	0x20003e64
    cf14:	0000b149 	.word	0x0000b149
    cf18:	0000d081 	.word	0x0000d081
    cf1c:	0000cdfd 	.word	0x0000cdfd

0000cf20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    cf20:	b580      	push	{r7, lr}
    cf22:	b084      	sub	sp, #16
    cf24:	af00      	add	r7, sp, #0
    cf26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    cf28:	2308      	movs	r3, #8
    cf2a:	18fb      	adds	r3, r7, r3
    cf2c:	0018      	movs	r0, r3
    cf2e:	4b06      	ldr	r3, [pc, #24]	; (cf48 <prvTimerTask+0x28>)
    cf30:	4798      	blx	r3
    cf32:	0003      	movs	r3, r0
    cf34:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    cf36:	68ba      	ldr	r2, [r7, #8]
    cf38:	68fb      	ldr	r3, [r7, #12]
    cf3a:	0011      	movs	r1, r2
    cf3c:	0018      	movs	r0, r3
    cf3e:	4b03      	ldr	r3, [pc, #12]	; (cf4c <prvTimerTask+0x2c>)
    cf40:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    cf42:	4b03      	ldr	r3, [pc, #12]	; (cf50 <prvTimerTask+0x30>)
    cf44:	4798      	blx	r3
	}
    cf46:	e7ef      	b.n	cf28 <prvTimerTask+0x8>
    cf48:	0000cff9 	.word	0x0000cff9
    cf4c:	0000cf55 	.word	0x0000cf55
    cf50:	0000d109 	.word	0x0000d109

0000cf54 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    cf54:	b580      	push	{r7, lr}
    cf56:	b084      	sub	sp, #16
    cf58:	af00      	add	r7, sp, #0
    cf5a:	6078      	str	r0, [r7, #4]
    cf5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    cf5e:	4b1e      	ldr	r3, [pc, #120]	; (cfd8 <prvProcessTimerOrBlockTask+0x84>)
    cf60:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    cf62:	2308      	movs	r3, #8
    cf64:	18fb      	adds	r3, r7, r3
    cf66:	0018      	movs	r0, r3
    cf68:	4b1c      	ldr	r3, [pc, #112]	; (cfdc <prvProcessTimerOrBlockTask+0x88>)
    cf6a:	4798      	blx	r3
    cf6c:	0003      	movs	r3, r0
    cf6e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    cf70:	68bb      	ldr	r3, [r7, #8]
    cf72:	2b00      	cmp	r3, #0
    cf74:	d129      	bne.n	cfca <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    cf76:	683b      	ldr	r3, [r7, #0]
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d10c      	bne.n	cf96 <prvProcessTimerOrBlockTask+0x42>
    cf7c:	687a      	ldr	r2, [r7, #4]
    cf7e:	68fb      	ldr	r3, [r7, #12]
    cf80:	429a      	cmp	r2, r3
    cf82:	d808      	bhi.n	cf96 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    cf84:	4b16      	ldr	r3, [pc, #88]	; (cfe0 <prvProcessTimerOrBlockTask+0x8c>)
    cf86:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    cf88:	68fa      	ldr	r2, [r7, #12]
    cf8a:	687b      	ldr	r3, [r7, #4]
    cf8c:	0011      	movs	r1, r2
    cf8e:	0018      	movs	r0, r3
    cf90:	4b14      	ldr	r3, [pc, #80]	; (cfe4 <prvProcessTimerOrBlockTask+0x90>)
    cf92:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    cf94:	e01b      	b.n	cfce <prvProcessTimerOrBlockTask+0x7a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
    cf96:	683b      	ldr	r3, [r7, #0]
    cf98:	2b00      	cmp	r3, #0
    cf9a:	d006      	beq.n	cfaa <prvProcessTimerOrBlockTask+0x56>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    cf9c:	4b12      	ldr	r3, [pc, #72]	; (cfe8 <prvProcessTimerOrBlockTask+0x94>)
    cf9e:	681b      	ldr	r3, [r3, #0]
    cfa0:	681b      	ldr	r3, [r3, #0]
    cfa2:	425a      	negs	r2, r3
    cfa4:	4153      	adcs	r3, r2
    cfa6:	b2db      	uxtb	r3, r3
    cfa8:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    cfaa:	4b10      	ldr	r3, [pc, #64]	; (cfec <prvProcessTimerOrBlockTask+0x98>)
    cfac:	6818      	ldr	r0, [r3, #0]
    cfae:	687a      	ldr	r2, [r7, #4]
    cfb0:	68fb      	ldr	r3, [r7, #12]
    cfb2:	1ad3      	subs	r3, r2, r3
    cfb4:	683a      	ldr	r2, [r7, #0]
    cfb6:	0019      	movs	r1, r3
    cfb8:	4b0d      	ldr	r3, [pc, #52]	; (cff0 <prvProcessTimerOrBlockTask+0x9c>)
    cfba:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    cfbc:	4b08      	ldr	r3, [pc, #32]	; (cfe0 <prvProcessTimerOrBlockTask+0x8c>)
    cfbe:	4798      	blx	r3
    cfc0:	1e03      	subs	r3, r0, #0
    cfc2:	d104      	bne.n	cfce <prvProcessTimerOrBlockTask+0x7a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    cfc4:	4b0b      	ldr	r3, [pc, #44]	; (cff4 <prvProcessTimerOrBlockTask+0xa0>)
    cfc6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    cfc8:	e001      	b.n	cfce <prvProcessTimerOrBlockTask+0x7a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    cfca:	4b05      	ldr	r3, [pc, #20]	; (cfe0 <prvProcessTimerOrBlockTask+0x8c>)
    cfcc:	4798      	blx	r3
		}
	}
}
    cfce:	46c0      	nop			; (mov r8, r8)
    cfd0:	46bd      	mov	sp, r7
    cfd2:	b004      	add	sp, #16
    cfd4:	bd80      	pop	{r7, pc}
    cfd6:	46c0      	nop			; (mov r8, r8)
    cfd8:	0000c399 	.word	0x0000c399
    cfdc:	0000d039 	.word	0x0000d039
    cfe0:	0000c3b1 	.word	0x0000c3b1
    cfe4:	0000cea5 	.word	0x0000cea5
    cfe8:	20003e68 	.word	0x20003e68
    cfec:	20003e6c 	.word	0x20003e6c
    cff0:	0000be59 	.word	0x0000be59
    cff4:	0000b299 	.word	0x0000b299

0000cff8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    cff8:	b580      	push	{r7, lr}
    cffa:	b084      	sub	sp, #16
    cffc:	af00      	add	r7, sp, #0
    cffe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    d000:	4b0c      	ldr	r3, [pc, #48]	; (d034 <prvGetNextExpireTime+0x3c>)
    d002:	681b      	ldr	r3, [r3, #0]
    d004:	681b      	ldr	r3, [r3, #0]
    d006:	425a      	negs	r2, r3
    d008:	4153      	adcs	r3, r2
    d00a:	b2db      	uxtb	r3, r3
    d00c:	001a      	movs	r2, r3
    d00e:	687b      	ldr	r3, [r7, #4]
    d010:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    d012:	687b      	ldr	r3, [r7, #4]
    d014:	681b      	ldr	r3, [r3, #0]
    d016:	2b00      	cmp	r3, #0
    d018:	d105      	bne.n	d026 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    d01a:	4b06      	ldr	r3, [pc, #24]	; (d034 <prvGetNextExpireTime+0x3c>)
    d01c:	681b      	ldr	r3, [r3, #0]
    d01e:	68db      	ldr	r3, [r3, #12]
    d020:	681b      	ldr	r3, [r3, #0]
    d022:	60fb      	str	r3, [r7, #12]
    d024:	e001      	b.n	d02a <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    d026:	2300      	movs	r3, #0
    d028:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    d02a:	68fb      	ldr	r3, [r7, #12]
}
    d02c:	0018      	movs	r0, r3
    d02e:	46bd      	mov	sp, r7
    d030:	b004      	add	sp, #16
    d032:	bd80      	pop	{r7, pc}
    d034:	20003e64 	.word	0x20003e64

0000d038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    d038:	b580      	push	{r7, lr}
    d03a:	b084      	sub	sp, #16
    d03c:	af00      	add	r7, sp, #0
    d03e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    d040:	4b0c      	ldr	r3, [pc, #48]	; (d074 <prvSampleTimeNow+0x3c>)
    d042:	4798      	blx	r3
    d044:	0003      	movs	r3, r0
    d046:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    d048:	4b0b      	ldr	r3, [pc, #44]	; (d078 <prvSampleTimeNow+0x40>)
    d04a:	681b      	ldr	r3, [r3, #0]
    d04c:	68fa      	ldr	r2, [r7, #12]
    d04e:	429a      	cmp	r2, r3
    d050:	d205      	bcs.n	d05e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    d052:	4b0a      	ldr	r3, [pc, #40]	; (d07c <prvSampleTimeNow+0x44>)
    d054:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    d056:	687b      	ldr	r3, [r7, #4]
    d058:	2201      	movs	r2, #1
    d05a:	601a      	str	r2, [r3, #0]
    d05c:	e002      	b.n	d064 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    d05e:	687b      	ldr	r3, [r7, #4]
    d060:	2200      	movs	r2, #0
    d062:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    d064:	4b04      	ldr	r3, [pc, #16]	; (d078 <prvSampleTimeNow+0x40>)
    d066:	68fa      	ldr	r2, [r7, #12]
    d068:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    d06a:	68fb      	ldr	r3, [r7, #12]
}
    d06c:	0018      	movs	r0, r3
    d06e:	46bd      	mov	sp, r7
    d070:	b004      	add	sp, #16
    d072:	bd80      	pop	{r7, pc}
    d074:	0000c4e5 	.word	0x0000c4e5
    d078:	20003e74 	.word	0x20003e74
    d07c:	0000d221 	.word	0x0000d221

0000d080 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    d080:	b580      	push	{r7, lr}
    d082:	b086      	sub	sp, #24
    d084:	af00      	add	r7, sp, #0
    d086:	60f8      	str	r0, [r7, #12]
    d088:	60b9      	str	r1, [r7, #8]
    d08a:	607a      	str	r2, [r7, #4]
    d08c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    d08e:	2300      	movs	r3, #0
    d090:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    d092:	68fb      	ldr	r3, [r7, #12]
    d094:	68ba      	ldr	r2, [r7, #8]
    d096:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    d098:	68fb      	ldr	r3, [r7, #12]
    d09a:	68fa      	ldr	r2, [r7, #12]
    d09c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    d09e:	68ba      	ldr	r2, [r7, #8]
    d0a0:	687b      	ldr	r3, [r7, #4]
    d0a2:	429a      	cmp	r2, r3
    d0a4:	d812      	bhi.n	d0cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    d0a6:	687a      	ldr	r2, [r7, #4]
    d0a8:	683b      	ldr	r3, [r7, #0]
    d0aa:	1ad2      	subs	r2, r2, r3
    d0ac:	68fb      	ldr	r3, [r7, #12]
    d0ae:	699b      	ldr	r3, [r3, #24]
    d0b0:	429a      	cmp	r2, r3
    d0b2:	d302      	bcc.n	d0ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    d0b4:	2301      	movs	r3, #1
    d0b6:	617b      	str	r3, [r7, #20]
    d0b8:	e01b      	b.n	d0f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    d0ba:	4b10      	ldr	r3, [pc, #64]	; (d0fc <prvInsertTimerInActiveList+0x7c>)
    d0bc:	681a      	ldr	r2, [r3, #0]
    d0be:	68fb      	ldr	r3, [r7, #12]
    d0c0:	3304      	adds	r3, #4
    d0c2:	0019      	movs	r1, r3
    d0c4:	0010      	movs	r0, r2
    d0c6:	4b0e      	ldr	r3, [pc, #56]	; (d100 <prvInsertTimerInActiveList+0x80>)
    d0c8:	4798      	blx	r3
    d0ca:	e012      	b.n	d0f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    d0cc:	687a      	ldr	r2, [r7, #4]
    d0ce:	683b      	ldr	r3, [r7, #0]
    d0d0:	429a      	cmp	r2, r3
    d0d2:	d206      	bcs.n	d0e2 <prvInsertTimerInActiveList+0x62>
    d0d4:	68ba      	ldr	r2, [r7, #8]
    d0d6:	683b      	ldr	r3, [r7, #0]
    d0d8:	429a      	cmp	r2, r3
    d0da:	d302      	bcc.n	d0e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    d0dc:	2301      	movs	r3, #1
    d0de:	617b      	str	r3, [r7, #20]
    d0e0:	e007      	b.n	d0f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    d0e2:	4b08      	ldr	r3, [pc, #32]	; (d104 <prvInsertTimerInActiveList+0x84>)
    d0e4:	681a      	ldr	r2, [r3, #0]
    d0e6:	68fb      	ldr	r3, [r7, #12]
    d0e8:	3304      	adds	r3, #4
    d0ea:	0019      	movs	r1, r3
    d0ec:	0010      	movs	r0, r2
    d0ee:	4b04      	ldr	r3, [pc, #16]	; (d100 <prvInsertTimerInActiveList+0x80>)
    d0f0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    d0f2:	697b      	ldr	r3, [r7, #20]
}
    d0f4:	0018      	movs	r0, r3
    d0f6:	46bd      	mov	sp, r7
    d0f8:	b006      	add	sp, #24
    d0fa:	bd80      	pop	{r7, pc}
    d0fc:	20003e68 	.word	0x20003e68
    d100:	0000b0dd 	.word	0x0000b0dd
    d104:	20003e64 	.word	0x20003e64

0000d108 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    d108:	b590      	push	{r4, r7, lr}
    d10a:	b08b      	sub	sp, #44	; 0x2c
    d10c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    d10e:	e068      	b.n	d1e2 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    d110:	2308      	movs	r3, #8
    d112:	18fb      	adds	r3, r7, r3
    d114:	681b      	ldr	r3, [r3, #0]
    d116:	2b00      	cmp	r3, #0
    d118:	db63      	blt.n	d1e2 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    d11a:	2308      	movs	r3, #8
    d11c:	18fb      	adds	r3, r7, r3
    d11e:	689b      	ldr	r3, [r3, #8]
    d120:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    d122:	69fb      	ldr	r3, [r7, #28]
    d124:	695b      	ldr	r3, [r3, #20]
    d126:	2b00      	cmp	r3, #0
    d128:	d004      	beq.n	d134 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    d12a:	69fb      	ldr	r3, [r7, #28]
    d12c:	3304      	adds	r3, #4
    d12e:	0018      	movs	r0, r3
    d130:	4b33      	ldr	r3, [pc, #204]	; (d200 <prvProcessReceivedCommands+0xf8>)
    d132:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    d134:	1d3b      	adds	r3, r7, #4
    d136:	0018      	movs	r0, r3
    d138:	4b32      	ldr	r3, [pc, #200]	; (d204 <prvProcessReceivedCommands+0xfc>)
    d13a:	4798      	blx	r3
    d13c:	0003      	movs	r3, r0
    d13e:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    d140:	2308      	movs	r3, #8
    d142:	18fb      	adds	r3, r7, r3
    d144:	681b      	ldr	r3, [r3, #0]
    d146:	2b09      	cmp	r3, #9
    d148:	d84a      	bhi.n	d1e0 <prvProcessReceivedCommands+0xd8>
    d14a:	009a      	lsls	r2, r3, #2
    d14c:	4b2e      	ldr	r3, [pc, #184]	; (d208 <prvProcessReceivedCommands+0x100>)
    d14e:	18d3      	adds	r3, r2, r3
    d150:	681b      	ldr	r3, [r3, #0]
    d152:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    d154:	2308      	movs	r3, #8
    d156:	18fb      	adds	r3, r7, r3
    d158:	685a      	ldr	r2, [r3, #4]
    d15a:	69fb      	ldr	r3, [r7, #28]
    d15c:	699b      	ldr	r3, [r3, #24]
    d15e:	18d1      	adds	r1, r2, r3
    d160:	2308      	movs	r3, #8
    d162:	18fb      	adds	r3, r7, r3
    d164:	685b      	ldr	r3, [r3, #4]
    d166:	69ba      	ldr	r2, [r7, #24]
    d168:	69f8      	ldr	r0, [r7, #28]
    d16a:	4c28      	ldr	r4, [pc, #160]	; (d20c <prvProcessReceivedCommands+0x104>)
    d16c:	47a0      	blx	r4
    d16e:	1e03      	subs	r3, r0, #0
    d170:	d037      	beq.n	d1e2 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    d172:	69fb      	ldr	r3, [r7, #28]
    d174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d176:	69fa      	ldr	r2, [r7, #28]
    d178:	0010      	movs	r0, r2
    d17a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    d17c:	69fb      	ldr	r3, [r7, #28]
    d17e:	69db      	ldr	r3, [r3, #28]
    d180:	2b01      	cmp	r3, #1
    d182:	d12e      	bne.n	d1e2 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    d184:	2308      	movs	r3, #8
    d186:	18fb      	adds	r3, r7, r3
    d188:	685a      	ldr	r2, [r3, #4]
    d18a:	69fb      	ldr	r3, [r7, #28]
    d18c:	699b      	ldr	r3, [r3, #24]
    d18e:	18d2      	adds	r2, r2, r3
    d190:	69f8      	ldr	r0, [r7, #28]
    d192:	2300      	movs	r3, #0
    d194:	9300      	str	r3, [sp, #0]
    d196:	2300      	movs	r3, #0
    d198:	2100      	movs	r1, #0
    d19a:	4c1d      	ldr	r4, [pc, #116]	; (d210 <prvProcessReceivedCommands+0x108>)
    d19c:	47a0      	blx	r4
    d19e:	0003      	movs	r3, r0
    d1a0:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    d1a2:	697b      	ldr	r3, [r7, #20]
    d1a4:	2b00      	cmp	r3, #0
    d1a6:	d11c      	bne.n	d1e2 <prvProcessReceivedCommands+0xda>
    d1a8:	b672      	cpsid	i
    d1aa:	e7fe      	b.n	d1aa <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    d1ac:	2308      	movs	r3, #8
    d1ae:	18fb      	adds	r3, r7, r3
    d1b0:	685a      	ldr	r2, [r3, #4]
    d1b2:	69fb      	ldr	r3, [r7, #28]
    d1b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    d1b6:	69fb      	ldr	r3, [r7, #28]
    d1b8:	699b      	ldr	r3, [r3, #24]
    d1ba:	2b00      	cmp	r3, #0
    d1bc:	d101      	bne.n	d1c2 <prvProcessReceivedCommands+0xba>
    d1be:	b672      	cpsid	i
    d1c0:	e7fe      	b.n	d1c0 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    d1c2:	69fb      	ldr	r3, [r7, #28]
    d1c4:	699a      	ldr	r2, [r3, #24]
    d1c6:	69bb      	ldr	r3, [r7, #24]
    d1c8:	18d1      	adds	r1, r2, r3
    d1ca:	69bb      	ldr	r3, [r7, #24]
    d1cc:	69ba      	ldr	r2, [r7, #24]
    d1ce:	69f8      	ldr	r0, [r7, #28]
    d1d0:	4c0e      	ldr	r4, [pc, #56]	; (d20c <prvProcessReceivedCommands+0x104>)
    d1d2:	47a0      	blx	r4
					break;
    d1d4:	e005      	b.n	d1e2 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    d1d6:	69fb      	ldr	r3, [r7, #28]
    d1d8:	0018      	movs	r0, r3
    d1da:	4b0e      	ldr	r3, [pc, #56]	; (d214 <prvProcessReceivedCommands+0x10c>)
    d1dc:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    d1de:	e000      	b.n	d1e2 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    d1e0:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    d1e2:	4b0d      	ldr	r3, [pc, #52]	; (d218 <prvProcessReceivedCommands+0x110>)
    d1e4:	6818      	ldr	r0, [r3, #0]
    d1e6:	2308      	movs	r3, #8
    d1e8:	18f9      	adds	r1, r7, r3
    d1ea:	2300      	movs	r3, #0
    d1ec:	2200      	movs	r2, #0
    d1ee:	4c0b      	ldr	r4, [pc, #44]	; (d21c <prvProcessReceivedCommands+0x114>)
    d1f0:	47a0      	blx	r4
    d1f2:	1e03      	subs	r3, r0, #0
    d1f4:	d18c      	bne.n	d110 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    d1f6:	46c0      	nop			; (mov r8, r8)
    d1f8:	46bd      	mov	sp, r7
    d1fa:	b009      	add	sp, #36	; 0x24
    d1fc:	bd90      	pop	{r4, r7, pc}
    d1fe:	46c0      	nop			; (mov r8, r8)
    d200:	0000b149 	.word	0x0000b149
    d204:	0000d039 	.word	0x0000d039
    d208:	00012370 	.word	0x00012370
    d20c:	0000d081 	.word	0x0000d081
    d210:	0000cdfd 	.word	0x0000cdfd
    d214:	0000b46d 	.word	0x0000b46d
    d218:	20003e6c 	.word	0x20003e6c
    d21c:	0000b979 	.word	0x0000b979

0000d220 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    d220:	b590      	push	{r4, r7, lr}
    d222:	b089      	sub	sp, #36	; 0x24
    d224:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    d226:	e03e      	b.n	d2a6 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    d228:	4b28      	ldr	r3, [pc, #160]	; (d2cc <prvSwitchTimerLists+0xac>)
    d22a:	681b      	ldr	r3, [r3, #0]
    d22c:	68db      	ldr	r3, [r3, #12]
    d22e:	681b      	ldr	r3, [r3, #0]
    d230:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    d232:	4b26      	ldr	r3, [pc, #152]	; (d2cc <prvSwitchTimerLists+0xac>)
    d234:	681b      	ldr	r3, [r3, #0]
    d236:	68db      	ldr	r3, [r3, #12]
    d238:	68db      	ldr	r3, [r3, #12]
    d23a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    d23c:	693b      	ldr	r3, [r7, #16]
    d23e:	3304      	adds	r3, #4
    d240:	0018      	movs	r0, r3
    d242:	4b23      	ldr	r3, [pc, #140]	; (d2d0 <prvSwitchTimerLists+0xb0>)
    d244:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    d246:	693b      	ldr	r3, [r7, #16]
    d248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    d24a:	693a      	ldr	r2, [r7, #16]
    d24c:	0010      	movs	r0, r2
    d24e:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    d250:	693b      	ldr	r3, [r7, #16]
    d252:	69db      	ldr	r3, [r3, #28]
    d254:	2b01      	cmp	r3, #1
    d256:	d126      	bne.n	d2a6 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    d258:	693b      	ldr	r3, [r7, #16]
    d25a:	699a      	ldr	r2, [r3, #24]
    d25c:	697b      	ldr	r3, [r7, #20]
    d25e:	18d3      	adds	r3, r2, r3
    d260:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    d262:	68fa      	ldr	r2, [r7, #12]
    d264:	697b      	ldr	r3, [r7, #20]
    d266:	429a      	cmp	r2, r3
    d268:	d90e      	bls.n	d288 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    d26a:	693b      	ldr	r3, [r7, #16]
    d26c:	68fa      	ldr	r2, [r7, #12]
    d26e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    d270:	693b      	ldr	r3, [r7, #16]
    d272:	693a      	ldr	r2, [r7, #16]
    d274:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    d276:	4b15      	ldr	r3, [pc, #84]	; (d2cc <prvSwitchTimerLists+0xac>)
    d278:	681a      	ldr	r2, [r3, #0]
    d27a:	693b      	ldr	r3, [r7, #16]
    d27c:	3304      	adds	r3, #4
    d27e:	0019      	movs	r1, r3
    d280:	0010      	movs	r0, r2
    d282:	4b14      	ldr	r3, [pc, #80]	; (d2d4 <prvSwitchTimerLists+0xb4>)
    d284:	4798      	blx	r3
    d286:	e00e      	b.n	d2a6 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    d288:	697a      	ldr	r2, [r7, #20]
    d28a:	6938      	ldr	r0, [r7, #16]
    d28c:	2300      	movs	r3, #0
    d28e:	9300      	str	r3, [sp, #0]
    d290:	2300      	movs	r3, #0
    d292:	2100      	movs	r1, #0
    d294:	4c10      	ldr	r4, [pc, #64]	; (d2d8 <prvSwitchTimerLists+0xb8>)
    d296:	47a0      	blx	r4
    d298:	0003      	movs	r3, r0
    d29a:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    d29c:	68bb      	ldr	r3, [r7, #8]
    d29e:	2b00      	cmp	r3, #0
    d2a0:	d101      	bne.n	d2a6 <prvSwitchTimerLists+0x86>
    d2a2:	b672      	cpsid	i
    d2a4:	e7fe      	b.n	d2a4 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    d2a6:	4b09      	ldr	r3, [pc, #36]	; (d2cc <prvSwitchTimerLists+0xac>)
    d2a8:	681b      	ldr	r3, [r3, #0]
    d2aa:	681b      	ldr	r3, [r3, #0]
    d2ac:	2b00      	cmp	r3, #0
    d2ae:	d1bb      	bne.n	d228 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    d2b0:	4b06      	ldr	r3, [pc, #24]	; (d2cc <prvSwitchTimerLists+0xac>)
    d2b2:	681b      	ldr	r3, [r3, #0]
    d2b4:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    d2b6:	4b09      	ldr	r3, [pc, #36]	; (d2dc <prvSwitchTimerLists+0xbc>)
    d2b8:	681a      	ldr	r2, [r3, #0]
    d2ba:	4b04      	ldr	r3, [pc, #16]	; (d2cc <prvSwitchTimerLists+0xac>)
    d2bc:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    d2be:	4b07      	ldr	r3, [pc, #28]	; (d2dc <prvSwitchTimerLists+0xbc>)
    d2c0:	687a      	ldr	r2, [r7, #4]
    d2c2:	601a      	str	r2, [r3, #0]
}
    d2c4:	46c0      	nop			; (mov r8, r8)
    d2c6:	46bd      	mov	sp, r7
    d2c8:	b007      	add	sp, #28
    d2ca:	bd90      	pop	{r4, r7, pc}
    d2cc:	20003e64 	.word	0x20003e64
    d2d0:	0000b149 	.word	0x0000b149
    d2d4:	0000b0dd 	.word	0x0000b0dd
    d2d8:	0000cdfd 	.word	0x0000cdfd
    d2dc:	20003e68 	.word	0x20003e68

0000d2e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    d2e0:	b580      	push	{r7, lr}
    d2e2:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    d2e4:	4b15      	ldr	r3, [pc, #84]	; (d33c <prvCheckForValidListAndQueue+0x5c>)
    d2e6:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    d2e8:	4b15      	ldr	r3, [pc, #84]	; (d340 <prvCheckForValidListAndQueue+0x60>)
    d2ea:	681b      	ldr	r3, [r3, #0]
    d2ec:	2b00      	cmp	r3, #0
    d2ee:	d120      	bne.n	d332 <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
    d2f0:	4b14      	ldr	r3, [pc, #80]	; (d344 <prvCheckForValidListAndQueue+0x64>)
    d2f2:	0018      	movs	r0, r3
    d2f4:	4b14      	ldr	r3, [pc, #80]	; (d348 <prvCheckForValidListAndQueue+0x68>)
    d2f6:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    d2f8:	4b14      	ldr	r3, [pc, #80]	; (d34c <prvCheckForValidListAndQueue+0x6c>)
    d2fa:	0018      	movs	r0, r3
    d2fc:	4b12      	ldr	r3, [pc, #72]	; (d348 <prvCheckForValidListAndQueue+0x68>)
    d2fe:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    d300:	4b13      	ldr	r3, [pc, #76]	; (d350 <prvCheckForValidListAndQueue+0x70>)
    d302:	4a10      	ldr	r2, [pc, #64]	; (d344 <prvCheckForValidListAndQueue+0x64>)
    d304:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    d306:	4b13      	ldr	r3, [pc, #76]	; (d354 <prvCheckForValidListAndQueue+0x74>)
    d308:	4a10      	ldr	r2, [pc, #64]	; (d34c <prvCheckForValidListAndQueue+0x6c>)
    d30a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    d30c:	2200      	movs	r2, #0
    d30e:	210c      	movs	r1, #12
    d310:	2002      	movs	r0, #2
    d312:	4b11      	ldr	r3, [pc, #68]	; (d358 <prvCheckForValidListAndQueue+0x78>)
    d314:	4798      	blx	r3
    d316:	0002      	movs	r2, r0
    d318:	4b09      	ldr	r3, [pc, #36]	; (d340 <prvCheckForValidListAndQueue+0x60>)
    d31a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
    d31c:	4b08      	ldr	r3, [pc, #32]	; (d340 <prvCheckForValidListAndQueue+0x60>)
    d31e:	681b      	ldr	r3, [r3, #0]
    d320:	2b00      	cmp	r3, #0
    d322:	d006      	beq.n	d332 <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
    d324:	4b06      	ldr	r3, [pc, #24]	; (d340 <prvCheckForValidListAndQueue+0x60>)
    d326:	681b      	ldr	r3, [r3, #0]
    d328:	4a0c      	ldr	r2, [pc, #48]	; (d35c <prvCheckForValidListAndQueue+0x7c>)
    d32a:	0011      	movs	r1, r2
    d32c:	0018      	movs	r0, r3
    d32e:	4b0c      	ldr	r3, [pc, #48]	; (d360 <prvCheckForValidListAndQueue+0x80>)
    d330:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    d332:	4b0c      	ldr	r3, [pc, #48]	; (d364 <prvCheckForValidListAndQueue+0x84>)
    d334:	4798      	blx	r3
}
    d336:	46c0      	nop			; (mov r8, r8)
    d338:	46bd      	mov	sp, r7
    d33a:	bd80      	pop	{r7, pc}
    d33c:	0000b2b9 	.word	0x0000b2b9
    d340:	20003e6c 	.word	0x20003e6c
    d344:	20003e3c 	.word	0x20003e3c
    d348:	0000b045 	.word	0x0000b045
    d34c:	20003e50 	.word	0x20003e50
    d350:	20003e64 	.word	0x20003e64
    d354:	20003e68 	.word	0x20003e68
    d358:	0000b545 	.word	0x0000b545
    d35c:	00012368 	.word	0x00012368
    d360:	0000be09 	.word	0x0000be09
    d364:	0000b2dd 	.word	0x0000b2dd

0000d368 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    d368:	b580      	push	{r7, lr}
    d36a:	b084      	sub	sp, #16
    d36c:	af00      	add	r7, sp, #0
    d36e:	0002      	movs	r2, r0
    d370:	1dfb      	adds	r3, r7, #7
    d372:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    d374:	230f      	movs	r3, #15
    d376:	18fb      	adds	r3, r7, r3
    d378:	1dfa      	adds	r2, r7, #7
    d37a:	7812      	ldrb	r2, [r2, #0]
    d37c:	09d2      	lsrs	r2, r2, #7
    d37e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    d380:	230e      	movs	r3, #14
    d382:	18fb      	adds	r3, r7, r3
    d384:	1dfa      	adds	r2, r7, #7
    d386:	7812      	ldrb	r2, [r2, #0]
    d388:	0952      	lsrs	r2, r2, #5
    d38a:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    d38c:	4b0d      	ldr	r3, [pc, #52]	; (d3c4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    d38e:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    d390:	230f      	movs	r3, #15
    d392:	18fb      	adds	r3, r7, r3
    d394:	781b      	ldrb	r3, [r3, #0]
    d396:	2b00      	cmp	r3, #0
    d398:	d10f      	bne.n	d3ba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    d39a:	230f      	movs	r3, #15
    d39c:	18fb      	adds	r3, r7, r3
    d39e:	781b      	ldrb	r3, [r3, #0]
    d3a0:	009b      	lsls	r3, r3, #2
    d3a2:	2210      	movs	r2, #16
    d3a4:	4694      	mov	ip, r2
    d3a6:	44bc      	add	ip, r7
    d3a8:	4463      	add	r3, ip
    d3aa:	3b08      	subs	r3, #8
    d3ac:	681a      	ldr	r2, [r3, #0]
    d3ae:	230e      	movs	r3, #14
    d3b0:	18fb      	adds	r3, r7, r3
    d3b2:	781b      	ldrb	r3, [r3, #0]
    d3b4:	01db      	lsls	r3, r3, #7
    d3b6:	18d3      	adds	r3, r2, r3
    d3b8:	e000      	b.n	d3bc <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    d3ba:	2300      	movs	r3, #0
	}
}
    d3bc:	0018      	movs	r0, r3
    d3be:	46bd      	mov	sp, r7
    d3c0:	b004      	add	sp, #16
    d3c2:	bd80      	pop	{r7, pc}
    d3c4:	41004400 	.word	0x41004400

0000d3c8 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    d3c8:	b580      	push	{r7, lr}
    d3ca:	b082      	sub	sp, #8
    d3cc:	af00      	add	r7, sp, #0
    d3ce:	0002      	movs	r2, r0
    d3d0:	1dfb      	adds	r3, r7, #7
    d3d2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    d3d4:	4b06      	ldr	r3, [pc, #24]	; (d3f0 <system_interrupt_enable+0x28>)
    d3d6:	1dfa      	adds	r2, r7, #7
    d3d8:	7812      	ldrb	r2, [r2, #0]
    d3da:	0011      	movs	r1, r2
    d3dc:	221f      	movs	r2, #31
    d3de:	400a      	ands	r2, r1
    d3e0:	2101      	movs	r1, #1
    d3e2:	4091      	lsls	r1, r2
    d3e4:	000a      	movs	r2, r1
    d3e6:	601a      	str	r2, [r3, #0]
}
    d3e8:	46c0      	nop			; (mov r8, r8)
    d3ea:	46bd      	mov	sp, r7
    d3ec:	b002      	add	sp, #8
    d3ee:	bd80      	pop	{r7, pc}
    d3f0:	e000e100 	.word	0xe000e100

0000d3f4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    d3f4:	b580      	push	{r7, lr}
    d3f6:	b082      	sub	sp, #8
    d3f8:	af00      	add	r7, sp, #0
    d3fa:	0002      	movs	r2, r0
    d3fc:	1dfb      	adds	r3, r7, #7
    d3fe:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d400:	1dfb      	adds	r3, r7, #7
    d402:	781b      	ldrb	r3, [r3, #0]
    d404:	0018      	movs	r0, r3
    d406:	4b03      	ldr	r3, [pc, #12]	; (d414 <port_get_group_from_gpio_pin+0x20>)
    d408:	4798      	blx	r3
    d40a:	0003      	movs	r3, r0
}
    d40c:	0018      	movs	r0, r3
    d40e:	46bd      	mov	sp, r7
    d410:	b002      	add	sp, #8
    d412:	bd80      	pop	{r7, pc}
    d414:	0000d369 	.word	0x0000d369

0000d418 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    d418:	b580      	push	{r7, lr}
    d41a:	b084      	sub	sp, #16
    d41c:	af00      	add	r7, sp, #0
    d41e:	0002      	movs	r2, r0
    d420:	1dfb      	adds	r3, r7, #7
    d422:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d424:	1dfb      	adds	r3, r7, #7
    d426:	781b      	ldrb	r3, [r3, #0]
    d428:	0018      	movs	r0, r3
    d42a:	4b0b      	ldr	r3, [pc, #44]	; (d458 <port_pin_get_output_level+0x40>)
    d42c:	4798      	blx	r3
    d42e:	0003      	movs	r3, r0
    d430:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d432:	1dfb      	adds	r3, r7, #7
    d434:	781b      	ldrb	r3, [r3, #0]
    d436:	221f      	movs	r2, #31
    d438:	4013      	ands	r3, r2
    d43a:	2201      	movs	r2, #1
    d43c:	409a      	lsls	r2, r3
    d43e:	0013      	movs	r3, r2
    d440:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    d442:	68fb      	ldr	r3, [r7, #12]
    d444:	691b      	ldr	r3, [r3, #16]
    d446:	68ba      	ldr	r2, [r7, #8]
    d448:	4013      	ands	r3, r2
    d44a:	1e5a      	subs	r2, r3, #1
    d44c:	4193      	sbcs	r3, r2
    d44e:	b2db      	uxtb	r3, r3
}
    d450:	0018      	movs	r0, r3
    d452:	46bd      	mov	sp, r7
    d454:	b004      	add	sp, #16
    d456:	bd80      	pop	{r7, pc}
    d458:	0000d3f5 	.word	0x0000d3f5

0000d45c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    d45c:	b580      	push	{r7, lr}
    d45e:	b084      	sub	sp, #16
    d460:	af00      	add	r7, sp, #0
    d462:	0002      	movs	r2, r0
    d464:	1dfb      	adds	r3, r7, #7
    d466:	701a      	strb	r2, [r3, #0]
    d468:	1dbb      	adds	r3, r7, #6
    d46a:	1c0a      	adds	r2, r1, #0
    d46c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    d46e:	1dfb      	adds	r3, r7, #7
    d470:	781b      	ldrb	r3, [r3, #0]
    d472:	0018      	movs	r0, r3
    d474:	4b0d      	ldr	r3, [pc, #52]	; (d4ac <port_pin_set_output_level+0x50>)
    d476:	4798      	blx	r3
    d478:	0003      	movs	r3, r0
    d47a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    d47c:	1dfb      	adds	r3, r7, #7
    d47e:	781b      	ldrb	r3, [r3, #0]
    d480:	221f      	movs	r2, #31
    d482:	4013      	ands	r3, r2
    d484:	2201      	movs	r2, #1
    d486:	409a      	lsls	r2, r3
    d488:	0013      	movs	r3, r2
    d48a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    d48c:	1dbb      	adds	r3, r7, #6
    d48e:	781b      	ldrb	r3, [r3, #0]
    d490:	2b00      	cmp	r3, #0
    d492:	d003      	beq.n	d49c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    d494:	68fb      	ldr	r3, [r7, #12]
    d496:	68ba      	ldr	r2, [r7, #8]
    d498:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    d49a:	e002      	b.n	d4a2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    d49c:	68fb      	ldr	r3, [r7, #12]
    d49e:	68ba      	ldr	r2, [r7, #8]
    d4a0:	615a      	str	r2, [r3, #20]
	}
}
    d4a2:	46c0      	nop			; (mov r8, r8)
    d4a4:	46bd      	mov	sp, r7
    d4a6:	b004      	add	sp, #16
    d4a8:	bd80      	pop	{r7, pc}
    d4aa:	46c0      	nop			; (mov r8, r8)
    d4ac:	0000d3f5 	.word	0x0000d3f5

0000d4b0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
    d4b0:	b580      	push	{r7, lr}
    d4b2:	b084      	sub	sp, #16
    d4b4:	af00      	add	r7, sp, #0
    d4b6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    d4b8:	687b      	ldr	r3, [r7, #4]
    d4ba:	681b      	ldr	r3, [r3, #0]
    d4bc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    d4be:	68fb      	ldr	r3, [r7, #12]
    d4c0:	69db      	ldr	r3, [r3, #28]
    d4c2:	1e5a      	subs	r2, r3, #1
    d4c4:	4193      	sbcs	r3, r2
    d4c6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
    d4c8:	0018      	movs	r0, r3
    d4ca:	46bd      	mov	sp, r7
    d4cc:	b004      	add	sp, #16
    d4ce:	bd80      	pop	{r7, pc}

0000d4d0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
    d4d0:	b580      	push	{r7, lr}
    d4d2:	b082      	sub	sp, #8
    d4d4:	af00      	add	r7, sp, #0
    d4d6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    d4d8:	46c0      	nop			; (mov r8, r8)
    d4da:	687b      	ldr	r3, [r7, #4]
    d4dc:	0018      	movs	r0, r3
    d4de:	4b04      	ldr	r3, [pc, #16]	; (d4f0 <_usart_wait_for_sync+0x20>)
    d4e0:	4798      	blx	r3
    d4e2:	1e03      	subs	r3, r0, #0
    d4e4:	d1f9      	bne.n	d4da <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
    d4e6:	46c0      	nop			; (mov r8, r8)
    d4e8:	46bd      	mov	sp, r7
    d4ea:	b002      	add	sp, #8
    d4ec:	bd80      	pop	{r7, pc}
    d4ee:	46c0      	nop			; (mov r8, r8)
    d4f0:	0000d4b1 	.word	0x0000d4b1

0000d4f4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
    d4f4:	b580      	push	{r7, lr}
    d4f6:	b082      	sub	sp, #8
    d4f8:	af00      	add	r7, sp, #0
    d4fa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    d4fc:	687b      	ldr	r3, [r7, #4]
    d4fe:	2280      	movs	r2, #128	; 0x80
    d500:	05d2      	lsls	r2, r2, #23
    d502:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    d504:	687b      	ldr	r3, [r7, #4]
    d506:	2200      	movs	r2, #0
    d508:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
    d50a:	687b      	ldr	r3, [r7, #4]
    d50c:	22ff      	movs	r2, #255	; 0xff
    d50e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
    d510:	687b      	ldr	r3, [r7, #4]
    d512:	2200      	movs	r2, #0
    d514:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    d516:	687b      	ldr	r3, [r7, #4]
    d518:	2200      	movs	r2, #0
    d51a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
    d51c:	687b      	ldr	r3, [r7, #4]
    d51e:	2296      	movs	r2, #150	; 0x96
    d520:	0192      	lsls	r2, r2, #6
    d522:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
    d524:	687b      	ldr	r3, [r7, #4]
    d526:	2224      	movs	r2, #36	; 0x24
    d528:	2101      	movs	r1, #1
    d52a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
    d52c:	687b      	ldr	r3, [r7, #4]
    d52e:	2225      	movs	r2, #37	; 0x25
    d530:	2101      	movs	r1, #1
    d532:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
    d534:	687b      	ldr	r3, [r7, #4]
    d536:	2226      	movs	r2, #38	; 0x26
    d538:	2100      	movs	r1, #0
    d53a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
    d53c:	687b      	ldr	r3, [r7, #4]
    d53e:	2227      	movs	r2, #39	; 0x27
    d540:	2100      	movs	r1, #0
    d542:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
    d544:	687b      	ldr	r3, [r7, #4]
    d546:	2200      	movs	r2, #0
    d548:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
    d54a:	687b      	ldr	r3, [r7, #4]
    d54c:	2288      	movs	r2, #136	; 0x88
    d54e:	0352      	lsls	r2, r2, #13
    d550:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
    d552:	687b      	ldr	r3, [r7, #4]
    d554:	222c      	movs	r2, #44	; 0x2c
    d556:	2100      	movs	r1, #0
    d558:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
    d55a:	687b      	ldr	r3, [r7, #4]
    d55c:	222d      	movs	r2, #45	; 0x2d
    d55e:	2100      	movs	r1, #0
    d560:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    d562:	687b      	ldr	r3, [r7, #4]
    d564:	2200      	movs	r2, #0
    d566:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
    d568:	687b      	ldr	r3, [r7, #4]
    d56a:	2200      	movs	r2, #0
    d56c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
    d56e:	687b      	ldr	r3, [r7, #4]
    d570:	2200      	movs	r2, #0
    d572:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
    d574:	687b      	ldr	r3, [r7, #4]
    d576:	2200      	movs	r2, #0
    d578:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    d57a:	687b      	ldr	r3, [r7, #4]
    d57c:	2200      	movs	r2, #0
    d57e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    d580:	687b      	ldr	r3, [r7, #4]
    d582:	2200      	movs	r2, #0
    d584:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    d586:	687b      	ldr	r3, [r7, #4]
    d588:	2200      	movs	r2, #0
    d58a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    d58c:	687b      	ldr	r3, [r7, #4]
    d58e:	2200      	movs	r2, #0
    d590:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    d592:	687b      	ldr	r3, [r7, #4]
    d594:	2200      	movs	r2, #0
    d596:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    d598:	687b      	ldr	r3, [r7, #4]
    d59a:	2200      	movs	r2, #0
    d59c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
    d59e:	687b      	ldr	r3, [r7, #4]
    d5a0:	2213      	movs	r2, #19
    d5a2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    d5a4:	687b      	ldr	r3, [r7, #4]
    d5a6:	2200      	movs	r2, #0
    d5a8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
    d5aa:	46c0      	nop			; (mov r8, r8)
    d5ac:	46bd      	mov	sp, r7
    d5ae:	b002      	add	sp, #8
    d5b0:	bd80      	pop	{r7, pc}
    d5b2:	46c0      	nop			; (mov r8, r8)

0000d5b4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
    d5b4:	b580      	push	{r7, lr}
    d5b6:	b084      	sub	sp, #16
    d5b8:	af00      	add	r7, sp, #0
    d5ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    d5bc:	687b      	ldr	r3, [r7, #4]
    d5be:	681b      	ldr	r3, [r3, #0]
    d5c0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    d5c2:	687b      	ldr	r3, [r7, #4]
    d5c4:	681b      	ldr	r3, [r3, #0]
    d5c6:	0018      	movs	r0, r3
    d5c8:	4b09      	ldr	r3, [pc, #36]	; (d5f0 <usart_enable+0x3c>)
    d5ca:	4798      	blx	r3
    d5cc:	0003      	movs	r3, r0
    d5ce:	0018      	movs	r0, r3
    d5d0:	4b08      	ldr	r3, [pc, #32]	; (d5f4 <usart_enable+0x40>)
    d5d2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    d5d4:	687b      	ldr	r3, [r7, #4]
    d5d6:	0018      	movs	r0, r3
    d5d8:	4b07      	ldr	r3, [pc, #28]	; (d5f8 <usart_enable+0x44>)
    d5da:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    d5dc:	68fb      	ldr	r3, [r7, #12]
    d5de:	681b      	ldr	r3, [r3, #0]
    d5e0:	2202      	movs	r2, #2
    d5e2:	431a      	orrs	r2, r3
    d5e4:	68fb      	ldr	r3, [r7, #12]
    d5e6:	601a      	str	r2, [r3, #0]
}
    d5e8:	46c0      	nop			; (mov r8, r8)
    d5ea:	46bd      	mov	sp, r7
    d5ec:	b004      	add	sp, #16
    d5ee:	bd80      	pop	{r7, pc}
    d5f0:	00008479 	.word	0x00008479
    d5f4:	0000d3c9 	.word	0x0000d3c9
    d5f8:	0000d4d1 	.word	0x0000d4d1

0000d5fc <usart_serial_init>:
 */
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    d5fc:	b580      	push	{r7, lr}
    d5fe:	b084      	sub	sp, #16
    d600:	af00      	add	r7, sp, #0
    d602:	60f8      	str	r0, [r7, #12]
    d604:	60b9      	str	r1, [r7, #8]
    d606:	607a      	str	r2, [r7, #4]
	if (usart_init(module, hw, config) == STATUS_OK) {
    d608:	687a      	ldr	r2, [r7, #4]
    d60a:	68b9      	ldr	r1, [r7, #8]
    d60c:	68fb      	ldr	r3, [r7, #12]
    d60e:	0018      	movs	r0, r3
    d610:	4b05      	ldr	r3, [pc, #20]	; (d628 <usart_serial_init+0x2c>)
    d612:	4798      	blx	r3
    d614:	1e03      	subs	r3, r0, #0
    d616:	d101      	bne.n	d61c <usart_serial_init+0x20>
		return true;
    d618:	2301      	movs	r3, #1
    d61a:	e000      	b.n	d61e <usart_serial_init+0x22>
	}
	else {
		return false;
    d61c:	2300      	movs	r3, #0
	}
}
    d61e:	0018      	movs	r0, r3
    d620:	46bd      	mov	sp, r7
    d622:	b004      	add	sp, #16
    d624:	bd80      	pop	{r7, pc}
    d626:	46c0      	nop			; (mov r8, r8)
    d628:	00009575 	.word	0x00009575

0000d62c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    d62c:	b580      	push	{r7, lr}
    d62e:	b082      	sub	sp, #8
    d630:	af00      	add	r7, sp, #0
    d632:	6078      	str	r0, [r7, #4]
    d634:	000a      	movs	r2, r1
    d636:	1cfb      	adds	r3, r7, #3
    d638:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
    d63a:	46c0      	nop			; (mov r8, r8)
    d63c:	1cfb      	adds	r3, r7, #3
    d63e:	781b      	ldrb	r3, [r3, #0]
    d640:	b29a      	uxth	r2, r3
    d642:	687b      	ldr	r3, [r7, #4]
    d644:	0011      	movs	r1, r2
    d646:	0018      	movs	r0, r3
    d648:	4b04      	ldr	r3, [pc, #16]	; (d65c <usart_serial_putchar+0x30>)
    d64a:	4798      	blx	r3
    d64c:	1e03      	subs	r3, r0, #0
    d64e:	d1f5      	bne.n	d63c <usart_serial_putchar+0x10>

	return STATUS_OK;
    d650:	2300      	movs	r3, #0
}
    d652:	0018      	movs	r0, r3
    d654:	46bd      	mov	sp, r7
    d656:	b002      	add	sp, #8
    d658:	bd80      	pop	{r7, pc}
    d65a:	46c0      	nop			; (mov r8, r8)
    d65c:	000097e9 	.word	0x000097e9

0000d660 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    d660:	b580      	push	{r7, lr}
    d662:	b084      	sub	sp, #16
    d664:	af00      	add	r7, sp, #0
    d666:	6078      	str	r0, [r7, #4]
    d668:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
    d66a:	230e      	movs	r3, #14
    d66c:	18fb      	adds	r3, r7, r3
    d66e:	2200      	movs	r2, #0
    d670:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
    d672:	46c0      	nop			; (mov r8, r8)
    d674:	230e      	movs	r3, #14
    d676:	18fa      	adds	r2, r7, r3
    d678:	687b      	ldr	r3, [r7, #4]
    d67a:	0011      	movs	r1, r2
    d67c:	0018      	movs	r0, r3
    d67e:	4b07      	ldr	r3, [pc, #28]	; (d69c <usart_serial_getchar+0x3c>)
    d680:	4798      	blx	r3
    d682:	1e03      	subs	r3, r0, #0
    d684:	d1f6      	bne.n	d674 <usart_serial_getchar+0x14>

	*c = temp;
    d686:	230e      	movs	r3, #14
    d688:	18fb      	adds	r3, r7, r3
    d68a:	881b      	ldrh	r3, [r3, #0]
    d68c:	b2da      	uxtb	r2, r3
    d68e:	683b      	ldr	r3, [r7, #0]
    d690:	701a      	strb	r2, [r3, #0]
}
    d692:	46c0      	nop			; (mov r8, r8)
    d694:	46bd      	mov	sp, r7
    d696:	b004      	add	sp, #16
    d698:	bd80      	pop	{r7, pc}
    d69a:	46c0      	nop			; (mov r8, r8)
    d69c:	0000984d 	.word	0x0000984d

0000d6a0 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
    d6a0:	b580      	push	{r7, lr}
    d6a2:	b084      	sub	sp, #16
    d6a4:	af00      	add	r7, sp, #0
    d6a6:	60f8      	str	r0, [r7, #12]
    d6a8:	60b9      	str	r1, [r7, #8]
    d6aa:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
    d6ac:	4b10      	ldr	r3, [pc, #64]	; (d6f0 <stdio_serial_init+0x50>)
    d6ae:	68fa      	ldr	r2, [r7, #12]
    d6b0:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    d6b2:	4b10      	ldr	r3, [pc, #64]	; (d6f4 <stdio_serial_init+0x54>)
    d6b4:	4a10      	ldr	r2, [pc, #64]	; (d6f8 <stdio_serial_init+0x58>)
    d6b6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    d6b8:	4b10      	ldr	r3, [pc, #64]	; (d6fc <stdio_serial_init+0x5c>)
    d6ba:	4a11      	ldr	r2, [pc, #68]	; (d700 <stdio_serial_init+0x60>)
    d6bc:	601a      	str	r2, [r3, #0]

	usart_serial_init(module, hw, config);
    d6be:	687a      	ldr	r2, [r7, #4]
    d6c0:	68b9      	ldr	r1, [r7, #8]
    d6c2:	68fb      	ldr	r3, [r7, #12]
    d6c4:	0018      	movs	r0, r3
    d6c6:	4b0f      	ldr	r3, [pc, #60]	; (d704 <stdio_serial_init+0x64>)
    d6c8:	4798      	blx	r3
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    d6ca:	4b0f      	ldr	r3, [pc, #60]	; (d708 <stdio_serial_init+0x68>)
    d6cc:	681b      	ldr	r3, [r3, #0]
    d6ce:	689b      	ldr	r3, [r3, #8]
    d6d0:	2100      	movs	r1, #0
    d6d2:	0018      	movs	r0, r3
    d6d4:	4b0d      	ldr	r3, [pc, #52]	; (d70c <stdio_serial_init+0x6c>)
    d6d6:	4798      	blx	r3
	setbuf(stdin, NULL);
    d6d8:	4b0b      	ldr	r3, [pc, #44]	; (d708 <stdio_serial_init+0x68>)
    d6da:	681b      	ldr	r3, [r3, #0]
    d6dc:	685b      	ldr	r3, [r3, #4]
    d6de:	2100      	movs	r1, #0
    d6e0:	0018      	movs	r0, r3
    d6e2:	4b0a      	ldr	r3, [pc, #40]	; (d70c <stdio_serial_init+0x6c>)
    d6e4:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
    d6e6:	46c0      	nop			; (mov r8, r8)
    d6e8:	46bd      	mov	sp, r7
    d6ea:	b004      	add	sp, #16
    d6ec:	bd80      	pop	{r7, pc}
    d6ee:	46c0      	nop			; (mov r8, r8)
    d6f0:	20004798 	.word	0x20004798
    d6f4:	20004794 	.word	0x20004794
    d6f8:	0000d62d 	.word	0x0000d62d
    d6fc:	20004790 	.word	0x20004790
    d700:	0000d661 	.word	0x0000d661
    d704:	0000d5fd 	.word	0x0000d5fd
    d708:	20000094 	.word	0x20000094
    d70c:	00010205 	.word	0x00010205

0000d710 <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
    d710:	b580      	push	{r7, lr}
    d712:	b084      	sub	sp, #16
    d714:	af00      	add	r7, sp, #0
    d716:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d718:	687b      	ldr	r3, [r7, #4]
    d71a:	681b      	ldr	r3, [r3, #0]
    d71c:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    d71e:	68fb      	ldr	r3, [r7, #12]
    d720:	7bdb      	ldrb	r3, [r3, #15]
    d722:	b2db      	uxtb	r3, r3
    d724:	001a      	movs	r2, r3
    d726:	2380      	movs	r3, #128	; 0x80
    d728:	4013      	ands	r3, r2
    d72a:	1e5a      	subs	r2, r3, #1
    d72c:	4193      	sbcs	r3, r2
    d72e:	b2db      	uxtb	r3, r3
#endif
}
    d730:	0018      	movs	r0, r3
    d732:	46bd      	mov	sp, r7
    d734:	b004      	add	sp, #16
    d736:	bd80      	pop	{r7, pc}

0000d738 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
    d738:	b580      	push	{r7, lr}
    d73a:	b082      	sub	sp, #8
    d73c:	af00      	add	r7, sp, #0
    d73e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
    d740:	687b      	ldr	r3, [r7, #4]
    d742:	2200      	movs	r2, #0
    d744:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    d746:	687b      	ldr	r3, [r7, #4]
    d748:	2200      	movs	r2, #0
    d74a:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    d74c:	687b      	ldr	r3, [r7, #4]
    d74e:	2200      	movs	r2, #0
    d750:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    d752:	687b      	ldr	r3, [r7, #4]
    d754:	2200      	movs	r2, #0
    d756:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    d758:	687b      	ldr	r3, [r7, #4]
    d75a:	2200      	movs	r2, #0
    d75c:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    d75e:	687b      	ldr	r3, [r7, #4]
    d760:	2200      	movs	r2, #0
    d762:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    d764:	687b      	ldr	r3, [r7, #4]
    d766:	2200      	movs	r2, #0
    d768:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    d76a:	687b      	ldr	r3, [r7, #4]
    d76c:	2200      	movs	r2, #0
    d76e:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    d770:	687b      	ldr	r3, [r7, #4]
    d772:	2200      	movs	r2, #0
    d774:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
    d776:	687b      	ldr	r3, [r7, #4]
    d778:	2200      	movs	r2, #0
    d77a:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    d77c:	687b      	ldr	r3, [r7, #4]
    d77e:	2200      	movs	r2, #0
    d780:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    d782:	687b      	ldr	r3, [r7, #4]
    d784:	2200      	movs	r2, #0
    d786:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    d788:	687b      	ldr	r3, [r7, #4]
    d78a:	2200      	movs	r2, #0
    d78c:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    d78e:	687b      	ldr	r3, [r7, #4]
    d790:	2200      	movs	r2, #0
    d792:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    d794:	687b      	ldr	r3, [r7, #4]
    d796:	2200      	movs	r2, #0
    d798:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    d79a:	687b      	ldr	r3, [r7, #4]
    d79c:	2200      	movs	r2, #0
    d79e:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    d7a0:	687b      	ldr	r3, [r7, #4]
    d7a2:	2200      	movs	r2, #0
    d7a4:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
    d7a6:	687b      	ldr	r3, [r7, #4]
    d7a8:	2200      	movs	r2, #0
    d7aa:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    d7ac:	687b      	ldr	r3, [r7, #4]
    d7ae:	2200      	movs	r2, #0
    d7b0:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    d7b2:	687b      	ldr	r3, [r7, #4]
    d7b4:	2200      	movs	r2, #0
    d7b6:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
    d7b8:	46c0      	nop			; (mov r8, r8)
    d7ba:	46bd      	mov	sp, r7
    d7bc:	b002      	add	sp, #8
    d7be:	bd80      	pop	{r7, pc}

0000d7c0 <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
    d7c0:	b580      	push	{r7, lr}
    d7c2:	b084      	sub	sp, #16
    d7c4:	af00      	add	r7, sp, #0
    d7c6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d7c8:	687b      	ldr	r3, [r7, #4]
    d7ca:	681b      	ldr	r3, [r3, #0]
    d7cc:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    d7ce:	46c0      	nop			; (mov r8, r8)
    d7d0:	687b      	ldr	r3, [r7, #4]
    d7d2:	0018      	movs	r0, r3
    d7d4:	4b07      	ldr	r3, [pc, #28]	; (d7f4 <tc_enable+0x34>)
    d7d6:	4798      	blx	r3
    d7d8:	1e03      	subs	r3, r0, #0
    d7da:	d1f9      	bne.n	d7d0 <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    d7dc:	68fb      	ldr	r3, [r7, #12]
    d7de:	881b      	ldrh	r3, [r3, #0]
    d7e0:	b29b      	uxth	r3, r3
    d7e2:	2202      	movs	r2, #2
    d7e4:	4313      	orrs	r3, r2
    d7e6:	b29a      	uxth	r2, r3
    d7e8:	68fb      	ldr	r3, [r7, #12]
    d7ea:	801a      	strh	r2, [r3, #0]
}
    d7ec:	46c0      	nop			; (mov r8, r8)
    d7ee:	46bd      	mov	sp, r7
    d7f0:	b004      	add	sp, #16
    d7f2:	bd80      	pop	{r7, pc}
    d7f4:	0000d711 	.word	0x0000d711

0000d7f8 <tc_disable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_disable(
		const struct tc_module *const module_inst)
{
    d7f8:	b580      	push	{r7, lr}
    d7fa:	b084      	sub	sp, #16
    d7fc:	af00      	add	r7, sp, #0
    d7fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    d800:	687b      	ldr	r3, [r7, #4]
    d802:	681b      	ldr	r3, [r3, #0]
    d804:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
    d806:	46c0      	nop			; (mov r8, r8)
    d808:	687b      	ldr	r3, [r7, #4]
    d80a:	0018      	movs	r0, r3
    d80c:	4b0a      	ldr	r3, [pc, #40]	; (d838 <tc_disable+0x40>)
    d80e:	4798      	blx	r3
    d810:	1e03      	subs	r3, r0, #0
    d812:	d1f9      	bne.n	d808 <tc_disable+0x10>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    d814:	68fb      	ldr	r3, [r7, #12]
    d816:	223b      	movs	r2, #59	; 0x3b
    d818:	731a      	strb	r2, [r3, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    d81a:	68fb      	ldr	r3, [r7, #12]
    d81c:	223b      	movs	r2, #59	; 0x3b
    d81e:	739a      	strb	r2, [r3, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    d820:	68fb      	ldr	r3, [r7, #12]
    d822:	881b      	ldrh	r3, [r3, #0]
    d824:	b29b      	uxth	r3, r3
    d826:	2202      	movs	r2, #2
    d828:	4393      	bics	r3, r2
    d82a:	b29a      	uxth	r2, r3
    d82c:	68fb      	ldr	r3, [r7, #12]
    d82e:	801a      	strh	r2, [r3, #0]
}
    d830:	46c0      	nop			; (mov r8, r8)
    d832:	46bd      	mov	sp, r7
    d834:	b004      	add	sp, #16
    d836:	bd80      	pop	{r7, pc}
    d838:	0000d711 	.word	0x0000d711

0000d83c <m2m_tcp_socket_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void m2m_tcp_socket_handler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    d83c:	b580      	push	{r7, lr}
    d83e:	b082      	sub	sp, #8
    d840:	af00      	add	r7, sp, #0
    d842:	603a      	str	r2, [r7, #0]
    d844:	1dfb      	adds	r3, r7, #7
    d846:	1c02      	adds	r2, r0, #0
    d848:	701a      	strb	r2, [r3, #0]
    d84a:	1dbb      	adds	r3, r7, #6
    d84c:	1c0a      	adds	r2, r1, #0
    d84e:	701a      	strb	r2, [r3, #0]
	handle_tcpip(sock, u8Msg, pvMsg);
    d850:	683a      	ldr	r2, [r7, #0]
    d852:	1dbb      	adds	r3, r7, #6
    d854:	7819      	ldrb	r1, [r3, #0]
    d856:	1dfb      	adds	r3, r7, #7
    d858:	781b      	ldrb	r3, [r3, #0]
    d85a:	b25b      	sxtb	r3, r3
    d85c:	0018      	movs	r0, r3
    d85e:	4b03      	ldr	r3, [pc, #12]	; (d86c <m2m_tcp_socket_handler+0x30>)
    d860:	4798      	blx	r3
}
    d862:	46c0      	nop			; (mov r8, r8)
    d864:	46bd      	mov	sp, r7
    d866:	b002      	add	sp, #8
    d868:	bd80      	pop	{r7, pc}
    d86a:	46c0      	nop			; (mov r8, r8)
    d86c:	0000e9fd 	.word	0x0000e9fd

0000d870 <socket_resolve_cb>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
    d870:	b5b0      	push	{r4, r5, r7, lr}
    d872:	b084      	sub	sp, #16
    d874:	af02      	add	r7, sp, #8
    d876:	6078      	str	r0, [r7, #4]
    d878:	6039      	str	r1, [r7, #0]
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d87a:	683b      	ldr	r3, [r7, #0]
    d87c:	22ff      	movs	r2, #255	; 0xff
    d87e:	4013      	ands	r3, r2
    d880:	001c      	movs	r4, r3
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
    d882:	683b      	ldr	r3, [r7, #0]
    d884:	0a1b      	lsrs	r3, r3, #8
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d886:	001a      	movs	r2, r3
    d888:	23ff      	movs	r3, #255	; 0xff
    d88a:	401a      	ands	r2, r3
    d88c:	0015      	movs	r5, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    d88e:	683b      	ldr	r3, [r7, #0]
    d890:	0c1b      	lsrs	r3, r3, #16
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d892:	001a      	movs	r2, r3
    d894:	23ff      	movs	r3, #255	; 0xff
    d896:	4013      	ands	r3, r2
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
    d898:	683a      	ldr	r2, [r7, #0]
    d89a:	0e12      	lsrs	r2, r2, #24
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_cb(uint8_t *hostName, uint32_t hostIp)
{
	printf("socket_resolve_cb: %s resolved with IP %d.%d.%d.%d\r\n",
    d89c:	6879      	ldr	r1, [r7, #4]
    d89e:	4808      	ldr	r0, [pc, #32]	; (d8c0 <socket_resolve_cb+0x50>)
    d8a0:	9201      	str	r2, [sp, #4]
    d8a2:	9300      	str	r3, [sp, #0]
    d8a4:	002b      	movs	r3, r5
    d8a6:	0022      	movs	r2, r4
    d8a8:	4c06      	ldr	r4, [pc, #24]	; (d8c4 <socket_resolve_cb+0x54>)
    d8aa:	47a0      	blx	r4
			hostName,
			(int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
			(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
	handle_dns_found((char *)hostName, hostIp);
    d8ac:	683a      	ldr	r2, [r7, #0]
    d8ae:	687b      	ldr	r3, [r7, #4]
    d8b0:	0011      	movs	r1, r2
    d8b2:	0018      	movs	r0, r3
    d8b4:	4b04      	ldr	r3, [pc, #16]	; (d8c8 <socket_resolve_cb+0x58>)
    d8b6:	4798      	blx	r3
}
    d8b8:	46c0      	nop			; (mov r8, r8)
    d8ba:	46bd      	mov	sp, r7
    d8bc:	b002      	add	sp, #8
    d8be:	bdb0      	pop	{r4, r5, r7, pc}
    d8c0:	000123a8 	.word	0x000123a8
    d8c4:	000100d1 	.word	0x000100d1
    d8c8:	0000e98d 	.word	0x0000e98d

0000d8cc <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
    d8cc:	b590      	push	{r4, r7, lr}
    d8ce:	b087      	sub	sp, #28
    d8d0:	af02      	add	r7, sp, #8
    d8d2:	0002      	movs	r2, r0
    d8d4:	6039      	str	r1, [r7, #0]
    d8d6:	1dfb      	adds	r3, r7, #7
    d8d8:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    d8da:	1dfb      	adds	r3, r7, #7
    d8dc:	781b      	ldrb	r3, [r3, #0]
    d8de:	2b2c      	cmp	r3, #44	; 0x2c
    d8e0:	d002      	beq.n	d8e8 <m2m_wifi_state+0x1c>
    d8e2:	2b32      	cmp	r3, #50	; 0x32
    d8e4:	d025      	beq.n	d932 <m2m_wifi_state+0x66>
		break;
	}

	default:
	{
		break;
    d8e6:	e042      	b.n	d96e <m2m_wifi_state+0xa2>
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    d8e8:	683b      	ldr	r3, [r7, #0]
    d8ea:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    d8ec:	68fb      	ldr	r3, [r7, #12]
    d8ee:	781b      	ldrb	r3, [r3, #0]
    d8f0:	2b01      	cmp	r3, #1
    d8f2:	d104      	bne.n	d8fe <m2m_wifi_state+0x32>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    d8f4:	4b20      	ldr	r3, [pc, #128]	; (d978 <m2m_wifi_state+0xac>)
    d8f6:	0018      	movs	r0, r3
    d8f8:	4b20      	ldr	r3, [pc, #128]	; (d97c <m2m_wifi_state+0xb0>)
    d8fa:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    d8fc:	e036      	b.n	d96c <m2m_wifi_state+0xa0>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    d8fe:	68fb      	ldr	r3, [r7, #12]
    d900:	781b      	ldrb	r3, [r3, #0]
    d902:	2b00      	cmp	r3, #0
    d904:	d132      	bne.n	d96c <m2m_wifi_state+0xa0>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    d906:	4b1e      	ldr	r3, [pc, #120]	; (d980 <m2m_wifi_state+0xb4>)
    d908:	0018      	movs	r0, r3
    d90a:	4b1c      	ldr	r3, [pc, #112]	; (d97c <m2m_wifi_state+0xb0>)
    d90c:	4798      	blx	r3
			if (WifiStateConnected == gWifiState) {
    d90e:	4b1d      	ldr	r3, [pc, #116]	; (d984 <m2m_wifi_state+0xb8>)
    d910:	781b      	ldrb	r3, [r3, #0]
    d912:	b2db      	uxtb	r3, r3
    d914:	2b03      	cmp	r3, #3
    d916:	d129      	bne.n	d96c <m2m_wifi_state+0xa0>
				gWifiState = WifiStateDisConnected;
    d918:	4b1a      	ldr	r3, [pc, #104]	; (d984 <m2m_wifi_state+0xb8>)
    d91a:	2204      	movs	r2, #4
    d91c:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    d91e:	4a1a      	ldr	r2, [pc, #104]	; (d988 <m2m_wifi_state+0xbc>)
    d920:	481a      	ldr	r0, [pc, #104]	; (d98c <m2m_wifi_state+0xc0>)
    d922:	23ff      	movs	r3, #255	; 0xff
    d924:	9300      	str	r3, [sp, #0]
    d926:	0013      	movs	r3, r2
    d928:	2202      	movs	r2, #2
    d92a:	211b      	movs	r1, #27
    d92c:	4c18      	ldr	r4, [pc, #96]	; (d990 <m2m_wifi_state+0xc4>)
    d92e:	47a0      	blx	r4
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    d930:	e01c      	b.n	d96c <m2m_wifi_state+0xa0>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    d932:	683b      	ldr	r3, [r7, #0]
    d934:	60bb      	str	r3, [r7, #8]
		gu32connectEndTime = gu32MsTicks;
    d936:	4b17      	ldr	r3, [pc, #92]	; (d994 <m2m_wifi_state+0xc8>)
    d938:	681a      	ldr	r2, [r3, #0]
    d93a:	4b17      	ldr	r3, [pc, #92]	; (d998 <m2m_wifi_state+0xcc>)
    d93c:	601a      	str	r2, [r3, #0]
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d93e:	68bb      	ldr	r3, [r7, #8]
    d940:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d942:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d944:	68bb      	ldr	r3, [r7, #8]
    d946:	3301      	adds	r3, #1
    d948:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d94a:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d94c:	68bb      	ldr	r3, [r7, #8]
    d94e:	3302      	adds	r3, #2
    d950:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d952:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    d954:	68bb      	ldr	r3, [r7, #8]
    d956:	3303      	adds	r3, #3
    d958:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    d95a:	4810      	ldr	r0, [pc, #64]	; (d99c <m2m_wifi_state+0xd0>)
    d95c:	9300      	str	r3, [sp, #0]
    d95e:	0023      	movs	r3, r4
    d960:	4c0f      	ldr	r4, [pc, #60]	; (d9a0 <m2m_wifi_state+0xd4>)
    d962:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gWifiState = WifiStateConnected;
    d964:	4b07      	ldr	r3, [pc, #28]	; (d984 <m2m_wifi_state+0xb8>)
    d966:	2203      	movs	r2, #3
    d968:	701a      	strb	r2, [r3, #0]

		break;
    d96a:	e000      	b.n	d96e <m2m_wifi_state+0xa2>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    d96c:	46c0      	nop			; (mov r8, r8)
	default:
	{
		break;
	}
	}
}
    d96e:	46c0      	nop			; (mov r8, r8)
    d970:	46bd      	mov	sp, r7
    d972:	b005      	add	sp, #20
    d974:	bd90      	pop	{r4, r7, pc}
    d976:	46c0      	nop			; (mov r8, r8)
    d978:	000123e0 	.word	0x000123e0
    d97c:	000101f1 	.word	0x000101f1
    d980:	0001241c 	.word	0x0001241c
    d984:	20003e78 	.word	0x20003e78
    d988:	0001245c 	.word	0x0001245c
    d98c:	00012468 	.word	0x00012468
    d990:	00003bc9 	.word	0x00003bc9
    d994:	20003e7c 	.word	0x20003e7c
    d998:	20003e8c 	.word	0x20003e8c
    d99c:	00012484 	.word	0x00012484
    d9a0:	000100d1 	.word	0x000100d1

0000d9a4 <configure_console>:

/**
 * \brief Configure UART console.
 */
static void configure_console(void)
{
    d9a4:	b580      	push	{r7, lr}
    d9a6:	b090      	sub	sp, #64	; 0x40
    d9a8:	af00      	add	r7, sp, #0
	struct usart_config usart_conf;

	usart_get_config_defaults(&usart_conf);
    d9aa:	003b      	movs	r3, r7
    d9ac:	0018      	movs	r0, r3
    d9ae:	4b13      	ldr	r3, [pc, #76]	; (d9fc <configure_console+0x58>)
    d9b0:	4798      	blx	r3
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    d9b2:	003b      	movs	r3, r7
    d9b4:	22c4      	movs	r2, #196	; 0xc4
    d9b6:	0392      	lsls	r2, r2, #14
    d9b8:	60da      	str	r2, [r3, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    d9ba:	003b      	movs	r3, r7
    d9bc:	2201      	movs	r2, #1
    d9be:	4252      	negs	r2, r2
    d9c0:	631a      	str	r2, [r3, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    d9c2:	003b      	movs	r3, r7
    d9c4:	2201      	movs	r2, #1
    d9c6:	4252      	negs	r2, r2
    d9c8:	635a      	str	r2, [r3, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    d9ca:	003b      	movs	r3, r7
    d9cc:	4a0c      	ldr	r2, [pc, #48]	; (da00 <configure_console+0x5c>)
    d9ce:	639a      	str	r2, [r3, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    d9d0:	003b      	movs	r3, r7
    d9d2:	4a0c      	ldr	r2, [pc, #48]	; (da04 <configure_console+0x60>)
    d9d4:	63da      	str	r2, [r3, #60]	; 0x3c
	usart_conf.baudrate    = 115200;
    d9d6:	003b      	movs	r3, r7
    d9d8:	22e1      	movs	r2, #225	; 0xe1
    d9da:	0252      	lsls	r2, r2, #9
    d9dc:	621a      	str	r2, [r3, #32]

	stdio_serial_init(&cdc_uart_module, EDBG_CDC_MODULE, &usart_conf);
    d9de:	003a      	movs	r2, r7
    d9e0:	4909      	ldr	r1, [pc, #36]	; (da08 <configure_console+0x64>)
    d9e2:	4b0a      	ldr	r3, [pc, #40]	; (da0c <configure_console+0x68>)
    d9e4:	0018      	movs	r0, r3
    d9e6:	4b0a      	ldr	r3, [pc, #40]	; (da10 <configure_console+0x6c>)
    d9e8:	4798      	blx	r3
	usart_enable(&cdc_uart_module);
    d9ea:	4b08      	ldr	r3, [pc, #32]	; (da0c <configure_console+0x68>)
    d9ec:	0018      	movs	r0, r3
    d9ee:	4b09      	ldr	r3, [pc, #36]	; (da14 <configure_console+0x70>)
    d9f0:	4798      	blx	r3
}
    d9f2:	46c0      	nop			; (mov r8, r8)
    d9f4:	46bd      	mov	sp, r7
    d9f6:	b010      	add	sp, #64	; 0x40
    d9f8:	bd80      	pop	{r7, pc}
    d9fa:	46c0      	nop			; (mov r8, r8)
    d9fc:	0000d4f5 	.word	0x0000d4f5
    da00:	00180002 	.word	0x00180002
    da04:	00190002 	.word	0x00190002
    da08:	42001400 	.word	0x42001400
    da0c:	20003e94 	.word	0x20003e94
    da10:	0000d6a1 	.word	0x0000d6a1
    da14:	0000d5b5 	.word	0x0000d5b5

0000da18 <set_dev_name_to_mac>:

static void set_dev_name_to_mac(uint8 *name, uint8 *mac_addr)
{
    da18:	b590      	push	{r4, r7, lr}
    da1a:	b085      	sub	sp, #20
    da1c:	af00      	add	r7, sp, #0
    da1e:	6078      	str	r0, [r7, #4]
    da20:	6039      	str	r1, [r7, #0]
	/* Name must be in the format WINC1500_00:00 */
	uint16 len;

	len = m2m_strlen(name);
    da22:	230e      	movs	r3, #14
    da24:	18fc      	adds	r4, r7, r3
    da26:	687b      	ldr	r3, [r7, #4]
    da28:	0018      	movs	r0, r3
    da2a:	4b47      	ldr	r3, [pc, #284]	; (db48 <set_dev_name_to_mac+0x130>)
    da2c:	4798      	blx	r3
    da2e:	0003      	movs	r3, r0
    da30:	8023      	strh	r3, [r4, #0]
	if (len >= 5) {
    da32:	230e      	movs	r3, #14
    da34:	18fb      	adds	r3, r7, r3
    da36:	881b      	ldrh	r3, [r3, #0]
    da38:	2b04      	cmp	r3, #4
    da3a:	d800      	bhi.n	da3e <set_dev_name_to_mac+0x26>
    da3c:	e07f      	b.n	db3e <set_dev_name_to_mac+0x126>
		name[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
    da3e:	230e      	movs	r3, #14
    da40:	18fb      	adds	r3, r7, r3
    da42:	881b      	ldrh	r3, [r3, #0]
    da44:	3b01      	subs	r3, #1
    da46:	687a      	ldr	r2, [r7, #4]
    da48:	18d2      	adds	r2, r2, r3
    da4a:	683b      	ldr	r3, [r7, #0]
    da4c:	3305      	adds	r3, #5
    da4e:	781b      	ldrb	r3, [r3, #0]
    da50:	0019      	movs	r1, r3
    da52:	230f      	movs	r3, #15
    da54:	400b      	ands	r3, r1
    da56:	2b09      	cmp	r3, #9
    da58:	dd08      	ble.n	da6c <set_dev_name_to_mac+0x54>
    da5a:	683b      	ldr	r3, [r7, #0]
    da5c:	3305      	adds	r3, #5
    da5e:	781b      	ldrb	r3, [r3, #0]
    da60:	210f      	movs	r1, #15
    da62:	400b      	ands	r3, r1
    da64:	b2db      	uxtb	r3, r3
    da66:	3337      	adds	r3, #55	; 0x37
    da68:	b2db      	uxtb	r3, r3
    da6a:	e007      	b.n	da7c <set_dev_name_to_mac+0x64>
    da6c:	683b      	ldr	r3, [r7, #0]
    da6e:	3305      	adds	r3, #5
    da70:	781b      	ldrb	r3, [r3, #0]
    da72:	210f      	movs	r1, #15
    da74:	400b      	ands	r3, r1
    da76:	b2db      	uxtb	r3, r3
    da78:	3330      	adds	r3, #48	; 0x30
    da7a:	b2db      	uxtb	r3, r3
    da7c:	7013      	strb	r3, [r2, #0]
		name[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
    da7e:	230e      	movs	r3, #14
    da80:	18fb      	adds	r3, r7, r3
    da82:	881b      	ldrh	r3, [r3, #0]
    da84:	3b02      	subs	r3, #2
    da86:	687a      	ldr	r2, [r7, #4]
    da88:	18d2      	adds	r2, r2, r3
    da8a:	683b      	ldr	r3, [r7, #0]
    da8c:	3305      	adds	r3, #5
    da8e:	781b      	ldrb	r3, [r3, #0]
    da90:	091b      	lsrs	r3, r3, #4
    da92:	b2db      	uxtb	r3, r3
    da94:	0019      	movs	r1, r3
    da96:	230f      	movs	r3, #15
    da98:	400b      	ands	r3, r1
    da9a:	2b09      	cmp	r3, #9
    da9c:	dd07      	ble.n	daae <set_dev_name_to_mac+0x96>
    da9e:	683b      	ldr	r3, [r7, #0]
    daa0:	3305      	adds	r3, #5
    daa2:	781b      	ldrb	r3, [r3, #0]
    daa4:	091b      	lsrs	r3, r3, #4
    daa6:	b2db      	uxtb	r3, r3
    daa8:	3337      	adds	r3, #55	; 0x37
    daaa:	b2db      	uxtb	r3, r3
    daac:	e006      	b.n	dabc <set_dev_name_to_mac+0xa4>
    daae:	683b      	ldr	r3, [r7, #0]
    dab0:	3305      	adds	r3, #5
    dab2:	781b      	ldrb	r3, [r3, #0]
    dab4:	091b      	lsrs	r3, r3, #4
    dab6:	b2db      	uxtb	r3, r3
    dab8:	3330      	adds	r3, #48	; 0x30
    daba:	b2db      	uxtb	r3, r3
    dabc:	7013      	strb	r3, [r2, #0]
		name[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
    dabe:	230e      	movs	r3, #14
    dac0:	18fb      	adds	r3, r7, r3
    dac2:	881b      	ldrh	r3, [r3, #0]
    dac4:	3b04      	subs	r3, #4
    dac6:	687a      	ldr	r2, [r7, #4]
    dac8:	18d2      	adds	r2, r2, r3
    daca:	683b      	ldr	r3, [r7, #0]
    dacc:	3304      	adds	r3, #4
    dace:	781b      	ldrb	r3, [r3, #0]
    dad0:	0019      	movs	r1, r3
    dad2:	230f      	movs	r3, #15
    dad4:	400b      	ands	r3, r1
    dad6:	2b09      	cmp	r3, #9
    dad8:	dd08      	ble.n	daec <set_dev_name_to_mac+0xd4>
    dada:	683b      	ldr	r3, [r7, #0]
    dadc:	3304      	adds	r3, #4
    dade:	781b      	ldrb	r3, [r3, #0]
    dae0:	210f      	movs	r1, #15
    dae2:	400b      	ands	r3, r1
    dae4:	b2db      	uxtb	r3, r3
    dae6:	3337      	adds	r3, #55	; 0x37
    dae8:	b2db      	uxtb	r3, r3
    daea:	e007      	b.n	dafc <set_dev_name_to_mac+0xe4>
    daec:	683b      	ldr	r3, [r7, #0]
    daee:	3304      	adds	r3, #4
    daf0:	781b      	ldrb	r3, [r3, #0]
    daf2:	210f      	movs	r1, #15
    daf4:	400b      	ands	r3, r1
    daf6:	b2db      	uxtb	r3, r3
    daf8:	3330      	adds	r3, #48	; 0x30
    dafa:	b2db      	uxtb	r3, r3
    dafc:	7013      	strb	r3, [r2, #0]
		name[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
    dafe:	230e      	movs	r3, #14
    db00:	18fb      	adds	r3, r7, r3
    db02:	881b      	ldrh	r3, [r3, #0]
    db04:	3b05      	subs	r3, #5
    db06:	687a      	ldr	r2, [r7, #4]
    db08:	18d2      	adds	r2, r2, r3
    db0a:	683b      	ldr	r3, [r7, #0]
    db0c:	3304      	adds	r3, #4
    db0e:	781b      	ldrb	r3, [r3, #0]
    db10:	091b      	lsrs	r3, r3, #4
    db12:	b2db      	uxtb	r3, r3
    db14:	0019      	movs	r1, r3
    db16:	230f      	movs	r3, #15
    db18:	400b      	ands	r3, r1
    db1a:	2b09      	cmp	r3, #9
    db1c:	dd07      	ble.n	db2e <set_dev_name_to_mac+0x116>
    db1e:	683b      	ldr	r3, [r7, #0]
    db20:	3304      	adds	r3, #4
    db22:	781b      	ldrb	r3, [r3, #0]
    db24:	091b      	lsrs	r3, r3, #4
    db26:	b2db      	uxtb	r3, r3
    db28:	3337      	adds	r3, #55	; 0x37
    db2a:	b2db      	uxtb	r3, r3
    db2c:	e006      	b.n	db3c <set_dev_name_to_mac+0x124>
    db2e:	683b      	ldr	r3, [r7, #0]
    db30:	3304      	adds	r3, #4
    db32:	781b      	ldrb	r3, [r3, #0]
    db34:	091b      	lsrs	r3, r3, #4
    db36:	b2db      	uxtb	r3, r3
    db38:	3330      	adds	r3, #48	; 0x30
    db3a:	b2db      	uxtb	r3, r3
    db3c:	7013      	strb	r3, [r2, #0]
	}
}
    db3e:	46c0      	nop			; (mov r8, r8)
    db40:	46bd      	mov	sp, r7
    db42:	b005      	add	sp, #20
    db44:	bd90      	pop	{r4, r7, pc}
    db46:	46c0      	nop			; (mov r8, r8)
    db48:	00002829 	.word	0x00002829

0000db4c <task_3s>:

static void task_3s(void *args)
{
    db4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    db4e:	b0cd      	sub	sp, #308	; 0x134
    db50:	af04      	add	r7, sp, #16
    db52:	6078      	str	r0, [r7, #4]
    double temperature = 0;
    db54:	2300      	movs	r3, #0
    db56:	2400      	movs	r4, #0
    db58:	228c      	movs	r2, #140	; 0x8c
    db5a:	0052      	lsls	r2, r2, #1
    db5c:	18ba      	adds	r2, r7, r2
    db5e:	6013      	str	r3, [r2, #0]
    db60:	6054      	str	r4, [r2, #4]
    uint16_t light = 0;
    db62:	238b      	movs	r3, #139	; 0x8b
    db64:	005b      	lsls	r3, r3, #1
    db66:	18fb      	adds	r3, r7, r3
    db68:	2200      	movs	r2, #0
    db6a:	801a      	strh	r2, [r3, #0]
    char buf[256] = {0};
    db6c:	4b49      	ldr	r3, [pc, #292]	; (dc94 <task_3s+0x148>)
    db6e:	2290      	movs	r2, #144	; 0x90
    db70:	0052      	lsls	r2, r2, #1
    db72:	4694      	mov	ip, r2
    db74:	44bc      	add	ip, r7
    db76:	4463      	add	r3, ip
    db78:	0018      	movs	r0, r3
    db7a:	2380      	movs	r3, #128	; 0x80
    db7c:	005b      	lsls	r3, r3, #1
    db7e:	001a      	movs	r2, r3
    db80:	2100      	movs	r1, #0
    db82:	4b45      	ldr	r3, [pc, #276]	; (dc98 <task_3s+0x14c>)
    db84:	4798      	blx	r3
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(3000);
    db86:	4b45      	ldr	r3, [pc, #276]	; (dc9c <task_3s+0x150>)
    db88:	2288      	movs	r2, #136	; 0x88
    db8a:	0052      	lsls	r2, r2, #1
    db8c:	18ba      	adds	r2, r7, r2
    db8e:	6013      	str	r3, [r2, #0]

    lastTimer = xTaskGetTickCount();
    db90:	4b43      	ldr	r3, [pc, #268]	; (dca0 <task_3s+0x154>)
    db92:	4798      	blx	r3
    db94:	0003      	movs	r3, r0
    db96:	60fb      	str	r3, [r7, #12]
    for ( ;; )
    {
        vTaskDelayUntil(&lastTimer, delay_time);        
    db98:	2388      	movs	r3, #136	; 0x88
    db9a:	005b      	lsls	r3, r3, #1
    db9c:	18fb      	adds	r3, r7, r3
    db9e:	681a      	ldr	r2, [r3, #0]
    dba0:	230c      	movs	r3, #12
    dba2:	18fb      	adds	r3, r7, r3
    dba4:	0011      	movs	r1, r2
    dba6:	0018      	movs	r0, r3
    dba8:	4b3e      	ldr	r3, [pc, #248]	; (dca4 <task_3s+0x158>)
    dbaa:	4798      	blx	r3

        if (gWifiState == WifiStateConnected) {
    dbac:	4b3e      	ldr	r3, [pc, #248]	; (dca8 <task_3s+0x15c>)
    dbae:	781b      	ldrb	r3, [r3, #0]
    dbb0:	b2db      	uxtb	r3, r3
    dbb2:	2b03      	cmp	r3, #3
    dbb4:	d1f0      	bne.n	db98 <task_3s+0x4c>
            gu32publishDelay = gu32MsTicks;
    dbb6:	4b3d      	ldr	r3, [pc, #244]	; (dcac <task_3s+0x160>)
    dbb8:	681a      	ldr	r2, [r3, #0]
    dbba:	4b3d      	ldr	r3, [pc, #244]	; (dcb0 <task_3s+0x164>)
    dbbc:	601a      	str	r2, [r3, #0]
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
    dbbe:	2300      	movs	r3, #0
    dbc0:	2400      	movs	r4, #0
    dbc2:	228c      	movs	r2, #140	; 0x8c
    dbc4:	0052      	lsls	r2, r2, #1
    dbc6:	18ba      	adds	r2, r7, r2
    dbc8:	6013      	str	r3, [r2, #0]
    dbca:	6054      	str	r4, [r2, #4]
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    dbcc:	4b39      	ldr	r3, [pc, #228]	; (dcb4 <task_3s+0x168>)
    dbce:	228c      	movs	r2, #140	; 0x8c
    dbd0:	0052      	lsls	r2, r2, #1
    dbd2:	18ba      	adds	r2, r7, r2
    dbd4:	6810      	ldr	r0, [r2, #0]
    dbd6:	6851      	ldr	r1, [r2, #4]
    dbd8:	4798      	blx	r3
    dbda:	0006      	movs	r6, r0
                PubNubChannel,
                (int)temperature, (int)((int)(temperature * 100) % 100),
    dbdc:	4c36      	ldr	r4, [pc, #216]	; (dcb8 <task_3s+0x16c>)
    dbde:	2200      	movs	r2, #0
    dbe0:	4b36      	ldr	r3, [pc, #216]	; (dcbc <task_3s+0x170>)
    dbe2:	218c      	movs	r1, #140	; 0x8c
    dbe4:	0049      	lsls	r1, r1, #1
    dbe6:	1879      	adds	r1, r7, r1
    dbe8:	6808      	ldr	r0, [r1, #0]
    dbea:	6849      	ldr	r1, [r1, #4]
    dbec:	47a0      	blx	r4
    dbee:	0003      	movs	r3, r0
    dbf0:	000c      	movs	r4, r1
    dbf2:	0019      	movs	r1, r3
    dbf4:	0022      	movs	r2, r4
    dbf6:	4b2f      	ldr	r3, [pc, #188]	; (dcb4 <task_3s+0x168>)
    dbf8:	0008      	movs	r0, r1
    dbfa:	0011      	movs	r1, r2
    dbfc:	4798      	blx	r3
    dbfe:	0002      	movs	r2, r0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    dc00:	4b2f      	ldr	r3, [pc, #188]	; (dcc0 <task_3s+0x174>)
    dc02:	2164      	movs	r1, #100	; 0x64
    dc04:	0010      	movs	r0, r2
    dc06:	4798      	blx	r3
    dc08:	000b      	movs	r3, r1
    dc0a:	001c      	movs	r4, r3
                PubNubChannel,
                (int)temperature, (int)((int)(temperature * 100) % 100),
                (((4096 - light) * 100) / 4096),
    dc0c:	238b      	movs	r3, #139	; 0x8b
    dc0e:	005b      	lsls	r3, r3, #1
    dc10:	18fb      	adds	r3, r7, r3
    dc12:	881b      	ldrh	r3, [r3, #0]
    dc14:	2280      	movs	r2, #128	; 0x80
    dc16:	0152      	lsls	r2, r2, #5
    dc18:	1ad3      	subs	r3, r2, r3
    dc1a:	2264      	movs	r2, #100	; 0x64
    dc1c:	4353      	muls	r3, r2
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    dc1e:	2b00      	cmp	r3, #0
    dc20:	da02      	bge.n	dc28 <task_3s+0xdc>
    dc22:	4a28      	ldr	r2, [pc, #160]	; (dcc4 <task_3s+0x178>)
    dc24:	4694      	mov	ip, r2
    dc26:	4463      	add	r3, ip
    dc28:	131b      	asrs	r3, r3, #12
    dc2a:	001d      	movs	r5, r3
                PubNubChannel,
                (int)temperature, (int)((int)(temperature * 100) % 100),
                (((4096 - light) * 100) / 4096),
                port_pin_get_output_level(LED0_PIN) ? "0" : "1");
    dc2c:	2017      	movs	r0, #23
    dc2e:	4b26      	ldr	r3, [pc, #152]	; (dcc8 <task_3s+0x17c>)
    dc30:	4798      	blx	r3
    dc32:	1e03      	subs	r3, r0, #0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            //adc_start_conversion(&adc_instance);            
            temperature = 0;
            //adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    dc34:	d001      	beq.n	dc3a <task_3s+0xee>
    dc36:	4b25      	ldr	r3, [pc, #148]	; (dccc <task_3s+0x180>)
    dc38:	e000      	b.n	dc3c <task_3s+0xf0>
    dc3a:	4b25      	ldr	r3, [pc, #148]	; (dcd0 <task_3s+0x184>)
    dc3c:	4a25      	ldr	r2, [pc, #148]	; (dcd4 <task_3s+0x188>)
    dc3e:	4926      	ldr	r1, [pc, #152]	; (dcd8 <task_3s+0x18c>)
    dc40:	2010      	movs	r0, #16
    dc42:	1838      	adds	r0, r7, r0
    dc44:	9302      	str	r3, [sp, #8]
    dc46:	9501      	str	r5, [sp, #4]
    dc48:	9400      	str	r4, [sp, #0]
    dc4a:	0033      	movs	r3, r6
    dc4c:	4c23      	ldr	r4, [pc, #140]	; (dcdc <task_3s+0x190>)
    dc4e:	47a0      	blx	r4
                PubNubChannel,
                (int)temperature, (int)((int)(temperature * 100) % 100),
                (((4096 - light) * 100) / 4096),
                port_pin_get_output_level(LED0_PIN) ? "0" : "1");
            printf("main: publish event: {%s}\r\n", buf);
    dc50:	2310      	movs	r3, #16
    dc52:	18fa      	adds	r2, r7, r3
    dc54:	4b22      	ldr	r3, [pc, #136]	; (dce0 <task_3s+0x194>)
    dc56:	0011      	movs	r1, r2
    dc58:	0018      	movs	r0, r3
    dc5a:	4b22      	ldr	r3, [pc, #136]	; (dce4 <task_3s+0x198>)
    dc5c:	4798      	blx	r3
            close(pPubNubCfg->tcp_socket);
    dc5e:	4b22      	ldr	r3, [pc, #136]	; (dce8 <task_3s+0x19c>)
    dc60:	681b      	ldr	r3, [r3, #0]
    dc62:	2253      	movs	r2, #83	; 0x53
    dc64:	569b      	ldrsb	r3, [r3, r2]
    dc66:	0018      	movs	r0, r3
    dc68:	4b20      	ldr	r3, [pc, #128]	; (dcec <task_3s+0x1a0>)
    dc6a:	4798      	blx	r3
            pPubNubCfg->state = PS_IDLE;
    dc6c:	4b1e      	ldr	r3, [pc, #120]	; (dce8 <task_3s+0x19c>)
    dc6e:	681b      	ldr	r3, [r3, #0]
    dc70:	2252      	movs	r2, #82	; 0x52
    dc72:	2100      	movs	r1, #0
    dc74:	5499      	strb	r1, [r3, r2]
            pPubNubCfg->last_result = PNR_IO_ERROR;
    dc76:	4b1c      	ldr	r3, [pc, #112]	; (dce8 <task_3s+0x19c>)
    dc78:	681b      	ldr	r3, [r3, #0]
    dc7a:	2250      	movs	r2, #80	; 0x50
    dc7c:	2102      	movs	r1, #2
    dc7e:	5499      	strb	r1, [r3, r2]
            pubnub_publish(pPubNubCfg, PubNubChannel, buf);            
    dc80:	4b19      	ldr	r3, [pc, #100]	; (dce8 <task_3s+0x19c>)
    dc82:	681b      	ldr	r3, [r3, #0]
    dc84:	2210      	movs	r2, #16
    dc86:	18ba      	adds	r2, r7, r2
    dc88:	4912      	ldr	r1, [pc, #72]	; (dcd4 <task_3s+0x188>)
    dc8a:	0018      	movs	r0, r3
    dc8c:	4b18      	ldr	r3, [pc, #96]	; (dcf0 <task_3s+0x1a4>)
    dc8e:	4798      	blx	r3
        }        
    }
    dc90:	e782      	b.n	db98 <task_3s+0x4c>
    dc92:	46c0      	nop			; (mov r8, r8)
    dc94:	fffffef0 	.word	0xfffffef0
    dc98:	0000fb1b 	.word	0x0000fb1b
    dc9c:	00000bb8 	.word	0x00000bb8
    dca0:	0000c4e5 	.word	0x0000c4e5
    dca4:	0000c1ed 	.word	0x0000c1ed
    dca8:	20003e78 	.word	0x20003e78
    dcac:	20003e7c 	.word	0x20003e7c
    dcb0:	20003e80 	.word	0x20003e80
    dcb4:	0000f991 	.word	0x0000f991
    dcb8:	0000f49d 	.word	0x0000f49d
    dcbc:	40590000 	.word	0x40590000
    dcc0:	0000f279 	.word	0x0000f279
    dcc4:	00000fff 	.word	0x00000fff
    dcc8:	0000d419 	.word	0x0000d419
    dccc:	000124c0 	.word	0x000124c0
    dcd0:	000124c4 	.word	0x000124c4
    dcd4:	20000024 	.word	0x20000024
    dcd8:	000124c8 	.word	0x000124c8
    dcdc:	000103dd 	.word	0x000103dd
    dce0:	0001250c 	.word	0x0001250c
    dce4:	000100d1 	.word	0x000100d1
    dce8:	20003e90 	.word	0x20003e90
    dcec:	00006f9d 	.word	0x00006f9d
    dcf0:	0000eb79 	.word	0x0000eb79

0000dcf4 <task_1s>:
}

static void task_1s(void *args)
{
    dcf4:	b580      	push	{r7, lr}
    dcf6:	b086      	sub	sp, #24
    dcf8:	af00      	add	r7, sp, #0
    dcfa:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    dcfc:	4b47      	ldr	r3, [pc, #284]	; (de1c <task_1s+0x128>)
    dcfe:	4798      	blx	r3
    dd00:	0003      	movs	r3, r0
    dd02:	60fb      	str	r3, [r7, #12]
    TickType_t delay_time = pdMS_TO_TICKS(500);
    dd04:	23fa      	movs	r3, #250	; 0xfa
    dd06:	005b      	lsls	r3, r3, #1
    dd08:	617b      	str	r3, [r7, #20]

    while (1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    dd0a:	697a      	ldr	r2, [r7, #20]
    dd0c:	230c      	movs	r3, #12
    dd0e:	18fb      	adds	r3, r7, r3
    dd10:	0011      	movs	r1, r2
    dd12:	0018      	movs	r0, r3
    dd14:	4b42      	ldr	r3, [pc, #264]	; (de20 <task_1s+0x12c>)
    dd16:	4798      	blx	r3

        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
    dd18:	4b42      	ldr	r3, [pc, #264]	; (de24 <task_1s+0x130>)
    dd1a:	781b      	ldrb	r3, [r3, #0]
    dd1c:	b2db      	uxtb	r3, r3
    dd1e:	2b03      	cmp	r3, #3
    dd20:	d000      	beq.n	dd24 <task_1s+0x30>
    dd22:	e078      	b.n	de16 <task_1s+0x122>
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
    dd24:	4b40      	ldr	r3, [pc, #256]	; (de28 <task_1s+0x134>)
    dd26:	681b      	ldr	r3, [r3, #0]
    dd28:	2252      	movs	r2, #82	; 0x52
    dd2a:	5c9b      	ldrb	r3, [r3, r2]
    dd2c:	2b00      	cmp	r3, #0
    dd2e:	d000      	beq.n	dd32 <task_1s+0x3e>
    dd30:	e071      	b.n	de16 <task_1s+0x122>
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    dd32:	4b3d      	ldr	r3, [pc, #244]	; (de28 <task_1s+0x134>)
    dd34:	681b      	ldr	r3, [r3, #0]
    dd36:	2251      	movs	r2, #81	; 0x51
    dd38:	5c9b      	ldrb	r3, [r3, r2]
    dd3a:	2b00      	cmp	r3, #0
    dd3c:	d00b      	beq.n	dd56 <task_1s+0x62>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    dd3e:	4b3a      	ldr	r3, [pc, #232]	; (de28 <task_1s+0x134>)
    dd40:	681b      	ldr	r3, [r3, #0]
    dd42:	2251      	movs	r2, #81	; 0x51
    dd44:	5c9b      	ldrb	r3, [r3, r2]
        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    dd46:	2b02      	cmp	r3, #2
    dd48:	d110      	bne.n	dd6c <task_1s+0x78>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    dd4a:	4b37      	ldr	r3, [pc, #220]	; (de28 <task_1s+0x134>)
    dd4c:	681b      	ldr	r3, [r3, #0]
    dd4e:	2250      	movs	r2, #80	; 0x50
    dd50:	5c9b      	ldrb	r3, [r3, r2]
    dd52:	2b00      	cmp	r3, #0
    dd54:	d10a      	bne.n	dd6c <task_1s+0x78>
                    printf("main: subscribe event, PNR_OK\r\n");
    dd56:	4b35      	ldr	r3, [pc, #212]	; (de2c <task_1s+0x138>)
    dd58:	0018      	movs	r0, r3
    dd5a:	4b35      	ldr	r3, [pc, #212]	; (de30 <task_1s+0x13c>)
    dd5c:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    dd5e:	4b32      	ldr	r3, [pc, #200]	; (de28 <task_1s+0x134>)
    dd60:	681b      	ldr	r3, [r3, #0]
    dd62:	4a34      	ldr	r2, [pc, #208]	; (de34 <task_1s+0x140>)
    dd64:	0011      	movs	r1, r2
    dd66:	0018      	movs	r0, r3
    dd68:	4b33      	ldr	r3, [pc, #204]	; (de38 <task_1s+0x144>)
    dd6a:	4798      	blx	r3
                }

                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
    dd6c:	4b2e      	ldr	r3, [pc, #184]	; (de28 <task_1s+0x134>)
    dd6e:	681b      	ldr	r3, [r3, #0]
    dd70:	0018      	movs	r0, r3
    dd72:	4b32      	ldr	r3, [pc, #200]	; (de3c <task_1s+0x148>)
    dd74:	4798      	blx	r3
    dd76:	0003      	movs	r3, r0
    dd78:	613b      	str	r3, [r7, #16]
                    if (NULL == msg) {
    dd7a:	693b      	ldr	r3, [r7, #16]
    dd7c:	2b00      	cmp	r3, #0
    dd7e:	d031      	beq.n	dde4 <task_1s+0xf0>
                        /* No more message to process. */
                        break;
                    }

                    if (0 == (strncmp(&msg[2], "led", strlen("led")))) {
    dd80:	693b      	ldr	r3, [r7, #16]
    dd82:	3302      	adds	r3, #2
    dd84:	492e      	ldr	r1, [pc, #184]	; (de40 <task_1s+0x14c>)
    dd86:	2203      	movs	r2, #3
    dd88:	0018      	movs	r0, r3
    dd8a:	4b2e      	ldr	r3, [pc, #184]	; (de44 <task_1s+0x150>)
    dd8c:	4798      	blx	r3
    dd8e:	1e03      	subs	r3, r0, #0
    dd90:	d121      	bne.n	ddd6 <task_1s+0xe2>
                        /* LED control message. */
                        printf("main: received LED control message: %s\r\n", msg);
    dd92:	693a      	ldr	r2, [r7, #16]
    dd94:	4b2c      	ldr	r3, [pc, #176]	; (de48 <task_1s+0x154>)
    dd96:	0011      	movs	r1, r2
    dd98:	0018      	movs	r0, r3
    dd9a:	4b2c      	ldr	r3, [pc, #176]	; (de4c <task_1s+0x158>)
    dd9c:	4798      	blx	r3
                        if (0 == (strncmp(&msg[8], "on", strlen("on")))) {
    dd9e:	693b      	ldr	r3, [r7, #16]
    dda0:	3308      	adds	r3, #8
    dda2:	492b      	ldr	r1, [pc, #172]	; (de50 <task_1s+0x15c>)
    dda4:	2202      	movs	r2, #2
    dda6:	0018      	movs	r0, r3
    dda8:	4b26      	ldr	r3, [pc, #152]	; (de44 <task_1s+0x150>)
    ddaa:	4798      	blx	r3
    ddac:	1e03      	subs	r3, r0, #0
    ddae:	d104      	bne.n	ddba <task_1s+0xc6>
                            port_pin_set_output_level(LED0_PIN, LED0_ACTIVE);
    ddb0:	2100      	movs	r1, #0
    ddb2:	2017      	movs	r0, #23
    ddb4:	4b27      	ldr	r3, [pc, #156]	; (de54 <task_1s+0x160>)
    ddb6:	4798      	blx	r3
    ddb8:	e7d8      	b.n	dd6c <task_1s+0x78>
                            } else if (0 == (strncmp(&msg[8], "off", strlen("off")))) {
    ddba:	693b      	ldr	r3, [r7, #16]
    ddbc:	3308      	adds	r3, #8
    ddbe:	4926      	ldr	r1, [pc, #152]	; (de58 <task_1s+0x164>)
    ddc0:	2203      	movs	r2, #3
    ddc2:	0018      	movs	r0, r3
    ddc4:	4b1f      	ldr	r3, [pc, #124]	; (de44 <task_1s+0x150>)
    ddc6:	4798      	blx	r3
    ddc8:	1e03      	subs	r3, r0, #0
    ddca:	d1cf      	bne.n	dd6c <task_1s+0x78>
                            port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
    ddcc:	2101      	movs	r1, #1
    ddce:	2017      	movs	r0, #23
    ddd0:	4b20      	ldr	r3, [pc, #128]	; (de54 <task_1s+0x160>)
    ddd2:	4798      	blx	r3
    ddd4:	e7ca      	b.n	dd6c <task_1s+0x78>
                        }
                        } else {
                        /* Any other type of JSON message. */
                        printf("main: received message: %s\r\n", msg);
    ddd6:	693a      	ldr	r2, [r7, #16]
    ddd8:	4b20      	ldr	r3, [pc, #128]	; (de5c <task_1s+0x168>)
    ddda:	0011      	movs	r1, r2
    dddc:	0018      	movs	r0, r3
    ddde:	4b1b      	ldr	r3, [pc, #108]	; (de4c <task_1s+0x158>)
    dde0:	4798      	blx	r3
                    }
                }
    dde2:	e7c3      	b.n	dd6c <task_1s+0x78>
                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
                    if (NULL == msg) {
                        /* No more message to process. */
                        break;
    dde4:	46c0      	nop			; (mov r8, r8)
                        printf("main: received message: %s\r\n", msg);
                    }
                }

                /* Subscribe to receive pending messages. */
                if (gu32MsTicks - gu32subscribeDelay > MAIN_PUBNUB_SUBSCRIBE_INTERVAL) {
    dde6:	4b1e      	ldr	r3, [pc, #120]	; (de60 <task_1s+0x16c>)
    dde8:	681a      	ldr	r2, [r3, #0]
    ddea:	4b1e      	ldr	r3, [pc, #120]	; (de64 <task_1s+0x170>)
    ddec:	681b      	ldr	r3, [r3, #0]
    ddee:	1ad2      	subs	r2, r2, r3
    ddf0:	23fa      	movs	r3, #250	; 0xfa
    ddf2:	009b      	lsls	r3, r3, #2
    ddf4:	429a      	cmp	r2, r3
    ddf6:	d90e      	bls.n	de16 <task_1s+0x122>
                    gu32subscribeDelay = gu32MsTicks;
    ddf8:	4b19      	ldr	r3, [pc, #100]	; (de60 <task_1s+0x16c>)
    ddfa:	681a      	ldr	r2, [r3, #0]
    ddfc:	4b19      	ldr	r3, [pc, #100]	; (de64 <task_1s+0x170>)
    ddfe:	601a      	str	r2, [r3, #0]
                    printf("main: subscribe event, interval.\r\n");
    de00:	4b19      	ldr	r3, [pc, #100]	; (de68 <task_1s+0x174>)
    de02:	0018      	movs	r0, r3
    de04:	4b0a      	ldr	r3, [pc, #40]	; (de30 <task_1s+0x13c>)
    de06:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    de08:	4b07      	ldr	r3, [pc, #28]	; (de28 <task_1s+0x134>)
    de0a:	681b      	ldr	r3, [r3, #0]
    de0c:	4a09      	ldr	r2, [pc, #36]	; (de34 <task_1s+0x140>)
    de0e:	0011      	movs	r1, r2
    de10:	0018      	movs	r0, r3
    de12:	4b09      	ldr	r3, [pc, #36]	; (de38 <task_1s+0x144>)
    de14:	4798      	blx	r3
                }
            }
        }    
        
       //display_led_test_1Hz();
       display_update_1Hz();
    de16:	4b15      	ldr	r3, [pc, #84]	; (de6c <task_1s+0x178>)
    de18:	4798      	blx	r3
    }
    de1a:	e776      	b.n	dd0a <task_1s+0x16>
    de1c:	0000c4e5 	.word	0x0000c4e5
    de20:	0000c1ed 	.word	0x0000c1ed
    de24:	20003e78 	.word	0x20003e78
    de28:	20003e90 	.word	0x20003e90
    de2c:	00012528 	.word	0x00012528
    de30:	000101f1 	.word	0x000101f1
    de34:	20000024 	.word	0x20000024
    de38:	0000ed71 	.word	0x0000ed71
    de3c:	0000eeed 	.word	0x0000eeed
    de40:	00012548 	.word	0x00012548
    de44:	00010453 	.word	0x00010453
    de48:	0001254c 	.word	0x0001254c
    de4c:	000100d1 	.word	0x000100d1
    de50:	00012578 	.word	0x00012578
    de54:	0000d45d 	.word	0x0000d45d
    de58:	0001257c 	.word	0x0001257c
    de5c:	00012580 	.word	0x00012580
    de60:	20003e7c 	.word	0x20003e7c
    de64:	20003e84 	.word	0x20003e84
    de68:	000125a0 	.word	0x000125a0
    de6c:	00000df9 	.word	0x00000df9

0000de70 <task_33Hz>:

}

#include "tm1640.h"
static void task_33Hz(void *args)
{
    de70:	b580      	push	{r7, lr}
    de72:	b084      	sub	sp, #16
    de74:	af00      	add	r7, sp, #0
    de76:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    // Turn on the display
    tm1640_display_on(1);
    de78:	2001      	movs	r0, #1
    de7a:	4b09      	ldr	r3, [pc, #36]	; (dea0 <task_33Hz+0x30>)
    de7c:	4798      	blx	r3

    lastTimer = xTaskGetTickCount();
    de7e:	4b09      	ldr	r3, [pc, #36]	; (dea4 <task_33Hz+0x34>)
    de80:	4798      	blx	r3
    de82:	0003      	movs	r3, r0
    de84:	60bb      	str	r3, [r7, #8]
    TickType_t delay_time = pdMS_TO_TICKS(MAIN_33HZ_TASK_INTERVAL);        
    de86:	231e      	movs	r3, #30
    de88:	60fb      	str	r3, [r7, #12]

    while(1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    de8a:	68fa      	ldr	r2, [r7, #12]
    de8c:	2308      	movs	r3, #8
    de8e:	18fb      	adds	r3, r7, r3
    de90:	0011      	movs	r1, r2
    de92:	0018      	movs	r0, r3
    de94:	4b04      	ldr	r3, [pc, #16]	; (dea8 <task_33Hz+0x38>)
    de96:	4798      	blx	r3

        display_update_33Hz();
    de98:	4b04      	ldr	r3, [pc, #16]	; (deac <task_33Hz+0x3c>)
    de9a:	4798      	blx	r3

    }
    de9c:	e7f5      	b.n	de8a <task_33Hz+0x1a>
    de9e:	46c0      	nop			; (mov r8, r8)
    dea0:	000015e5 	.word	0x000015e5
    dea4:	0000c4e5 	.word	0x0000c4e5
    dea8:	0000c1ed 	.word	0x0000c1ed
    deac:	00000efd 	.word	0x00000efd

0000deb0 <task_Buzzer>:
}

static void task_Buzzer(void *args)
{
    deb0:	b590      	push	{r4, r7, lr}
    deb2:	b099      	sub	sp, #100	; 0x64
    deb4:	af00      	add	r7, sp, #0
    deb6:	6078      	str	r0, [r7, #4]
    struct tc_module buzz_module;
    struct tc_config buzz_config;

    TickType_t lastTimer;

    tc_get_config_defaults(&buzz_config);
    deb8:	230c      	movs	r3, #12
    deba:	18fb      	adds	r3, r7, r3
    debc:	0018      	movs	r0, r3
    debe:	4b26      	ldr	r3, [pc, #152]	; (df58 <task_Buzzer+0xa8>)
    dec0:	4798      	blx	r3
    buzz_config.clock_source = GCLK_GENERATOR_5; // ~500kHz
    dec2:	230c      	movs	r3, #12
    dec4:	18fb      	adds	r3, r7, r3
    dec6:	2205      	movs	r2, #5
    dec8:	701a      	strb	r2, [r3, #0]
    buzz_config.run_in_standby = true;
    deca:	230c      	movs	r3, #12
    decc:	18fb      	adds	r3, r7, r3
    dece:	2201      	movs	r2, #1
    ded0:	705a      	strb	r2, [r3, #1]
    buzz_config.counter_size = TC_COUNTER_SIZE_8BIT;
    ded2:	230c      	movs	r3, #12
    ded4:	18fb      	adds	r3, r7, r3
    ded6:	2204      	movs	r2, #4
    ded8:	709a      	strb	r2, [r3, #2]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = true;
    deda:	230c      	movs	r3, #12
    dedc:	18fb      	adds	r3, r7, r3
    dede:	2201      	movs	r2, #1
    dee0:	771a      	strb	r2, [r3, #28]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = (PINMUX_PB11E_TC5_WO1) >> 16;
    dee2:	230c      	movs	r3, #12
    dee4:	18fb      	adds	r3, r7, r3
    dee6:	222b      	movs	r2, #43	; 0x2b
    dee8:	621a      	str	r2, [r3, #32]
    buzz_config.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = PINMUX_PB11E_TC5_WO1;
    deea:	230c      	movs	r3, #12
    deec:	18fb      	adds	r3, r7, r3
    deee:	4a1b      	ldr	r2, [pc, #108]	; (df5c <task_Buzzer+0xac>)
    def0:	625a      	str	r2, [r3, #36]	; 0x24
    buzz_config.counter_8_bit.period = (500000 / BUZZER_FREQUENCY) / 2;
    def2:	230c      	movs	r3, #12
    def4:	18fb      	adds	r3, r7, r3
    def6:	2229      	movs	r2, #41	; 0x29
    def8:	2153      	movs	r1, #83	; 0x53
    defa:	5499      	strb	r1, [r3, r2]
    buzz_config.counter_8_bit.value = 0;
    defc:	230c      	movs	r3, #12
    defe:	18fb      	adds	r3, r7, r3
    df00:	2228      	movs	r2, #40	; 0x28
    df02:	2100      	movs	r1, #0
    df04:	5499      	strb	r1, [r3, r2]

    tc_init(&buzz_module, TC5, &buzz_config);    
    df06:	230c      	movs	r3, #12
    df08:	18fa      	adds	r2, r7, r3
    df0a:	4915      	ldr	r1, [pc, #84]	; (df60 <task_Buzzer+0xb0>)
    df0c:	2340      	movs	r3, #64	; 0x40
    df0e:	18fb      	adds	r3, r7, r3
    df10:	0018      	movs	r0, r3
    df12:	4b14      	ldr	r3, [pc, #80]	; (df64 <task_Buzzer+0xb4>)
    df14:	4798      	blx	r3

    while(1) {
        xSemaphoreTake(buzzer_sem, portMAX_DELAY);
    df16:	4b14      	ldr	r3, [pc, #80]	; (df68 <task_Buzzer+0xb8>)
    df18:	6818      	ldr	r0, [r3, #0]
    df1a:	2301      	movs	r3, #1
    df1c:	425a      	negs	r2, r3
    df1e:	2300      	movs	r3, #0
    df20:	2100      	movs	r1, #0
    df22:	4c12      	ldr	r4, [pc, #72]	; (df6c <task_Buzzer+0xbc>)
    df24:	47a0      	blx	r4

        // When another task gives up the semaphore, the buzzer will run 
        // for the set delay time.
        tc_set_count_value(&buzz_module, 0);
    df26:	2340      	movs	r3, #64	; 0x40
    df28:	18fb      	adds	r3, r7, r3
    df2a:	2100      	movs	r1, #0
    df2c:	0018      	movs	r0, r3
    df2e:	4b10      	ldr	r3, [pc, #64]	; (df70 <task_Buzzer+0xc0>)
    df30:	4798      	blx	r3
        tc_enable(&buzz_module);
    df32:	2340      	movs	r3, #64	; 0x40
    df34:	18fb      	adds	r3, r7, r3
    df36:	0018      	movs	r0, r3
    df38:	4b0e      	ldr	r3, [pc, #56]	; (df74 <task_Buzzer+0xc4>)
    df3a:	4798      	blx	r3
        lastTimer = xTaskGetTickCount();
    df3c:	4b0e      	ldr	r3, [pc, #56]	; (df78 <task_Buzzer+0xc8>)
    df3e:	4798      	blx	r3
    df40:	0003      	movs	r3, r0
    df42:	65fb      	str	r3, [r7, #92]	; 0x5c
        vTaskDelay(pdMS_TO_TICKS(BUZZER_ON_TIME));
    df44:	20fa      	movs	r0, #250	; 0xfa
    df46:	4b0d      	ldr	r3, [pc, #52]	; (df7c <task_Buzzer+0xcc>)
    df48:	4798      	blx	r3
        tc_disable(&buzz_module);
    df4a:	2340      	movs	r3, #64	; 0x40
    df4c:	18fb      	adds	r3, r7, r3
    df4e:	0018      	movs	r0, r3
    df50:	4b0b      	ldr	r3, [pc, #44]	; (df80 <task_Buzzer+0xd0>)
    df52:	4798      	blx	r3
    }
    df54:	e7df      	b.n	df16 <task_Buzzer+0x66>
    df56:	46c0      	nop			; (mov r8, r8)
    df58:	0000d739 	.word	0x0000d739
    df5c:	002b0004 	.word	0x002b0004
    df60:	42003400 	.word	0x42003400
    df64:	00000321 	.word	0x00000321
    df68:	20004618 	.word	0x20004618
    df6c:	0000b979 	.word	0x0000b979
    df70:	0000077d 	.word	0x0000077d
    df74:	0000d7c1 	.word	0x0000d7c1
    df78:	0000c4e5 	.word	0x0000c4e5
    df7c:	0000c2b5 	.word	0x0000c2b5
    df80:	0000d7f9 	.word	0x0000d7f9

0000df84 <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);
void vApplicationIdleHook(void)
{      
    df84:	b580      	push	{r7, lr}
    df86:	af00      	add	r7, sp, #0
   m2m_wifi_handle_events(NULL);   
    df88:	2000      	movs	r0, #0
    df8a:	4b03      	ldr	r3, [pc, #12]	; (df98 <vApplicationIdleHook+0x14>)
    df8c:	4798      	blx	r3
   display_idle();
    df8e:	4b03      	ldr	r3, [pc, #12]	; (df9c <vApplicationIdleHook+0x18>)
    df90:	4798      	blx	r3
}
    df92:	46c0      	nop			; (mov r8, r8)
    df94:	46bd      	mov	sp, r7
    df96:	bd80      	pop	{r7, pc}
    df98:	00003bad 	.word	0x00003bad
    df9c:	00000d99 	.word	0x00000d99

0000dfa0 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    dfa0:	b580      	push	{r7, lr}
    dfa2:	b082      	sub	sp, #8
    dfa4:	af00      	add	r7, sp, #0
    dfa6:	6078      	str	r0, [r7, #4]
    dfa8:	6039      	str	r1, [r7, #0]
    printf("Stack overflow!: %s\n\r", pcTaskName);
    dfaa:	683a      	ldr	r2, [r7, #0]
    dfac:	4b02      	ldr	r3, [pc, #8]	; (dfb8 <vApplicationStackOverflowHook+0x18>)
    dfae:	0011      	movs	r1, r2
    dfb0:	0018      	movs	r0, r3
    dfb2:	4b02      	ldr	r3, [pc, #8]	; (dfbc <vApplicationStackOverflowHook+0x1c>)
    dfb4:	4798      	blx	r3
    while (1) {}
    dfb6:	e7fe      	b.n	dfb6 <vApplicationStackOverflowHook+0x16>
    dfb8:	000125c4 	.word	0x000125c4
    dfbc:	000100d1 	.word	0x000100d1

0000dfc0 <vApplicationMallocFailedHook>:
}

void vApplicationMallocFailedHook(void);
void vApplicationMallocFailedHook(void)
{
    dfc0:	b580      	push	{r7, lr}
    dfc2:	af00      	add	r7, sp, #0
    printf("Malloc failed!\n\r");
    dfc4:	4b02      	ldr	r3, [pc, #8]	; (dfd0 <vApplicationMallocFailedHook+0x10>)
    dfc6:	0018      	movs	r0, r3
    dfc8:	4b02      	ldr	r3, [pc, #8]	; (dfd4 <vApplicationMallocFailedHook+0x14>)
    dfca:	4798      	blx	r3
    while(1) {}
    dfcc:	e7fe      	b.n	dfcc <vApplicationMallocFailedHook+0xc>
    dfce:	46c0      	nop			; (mov r8, r8)
    dfd0:	000125dc 	.word	0x000125dc
    dfd4:	000100d1 	.word	0x000100d1

0000dfd8 <main>:
 * Publish and subscribe event to pubnub.
 *
 * \return program return value.
 */
int main(void)
{
    dfd8:	b590      	push	{r4, r7, lr}
    dfda:	b08d      	sub	sp, #52	; 0x34
    dfdc:	af02      	add	r7, sp, #8
	int8_t s8InitStatus;
	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;	

	/* Initialize the board. */
	system_init();
    dfde:	4b5b      	ldr	r3, [pc, #364]	; (e14c <main+0x174>)
    dfe0:	4798      	blx	r3

	/* Initialize the UART console. */
	configure_console();
    dfe2:	4b5b      	ldr	r3, [pc, #364]	; (e150 <main+0x178>)
    dfe4:	4798      	blx	r3

	/* Output example information. */
	//printf(STRING_HEADER);

	/* Initialize the delay driver. */
	delay_init();	
    dfe6:	4b5b      	ldr	r3, [pc, #364]	; (e154 <main+0x17c>)
    dfe8:	4798      	blx	r3

    /* Initialize the display */
    display_init();
    dfea:	4b5b      	ldr	r3, [pc, #364]	; (e158 <main+0x180>)
    dfec:	4798      	blx	r3

	/* Initialize the Button/LED. */
	//configure_button_led();

	/* Initialize the Wi-Fi BSP. */
	nm_bsp_init();
    dfee:	4b5b      	ldr	r3, [pc, #364]	; (e15c <main+0x184>)
    dff0:	4798      	blx	r3

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&wifiInitParam, 0, sizeof(tstrWifiInitParam));
    dff2:	230c      	movs	r3, #12
    dff4:	18fb      	adds	r3, r7, r3
    dff6:	2218      	movs	r2, #24
    dff8:	2100      	movs	r1, #0
    dffa:	0018      	movs	r0, r3
    dffc:	4b58      	ldr	r3, [pc, #352]	; (e160 <main+0x188>)
    dffe:	4798      	blx	r3
	wifiInitParam.pfAppWifiCb = m2m_wifi_state;
    e000:	230c      	movs	r3, #12
    e002:	18fb      	adds	r3, r7, r3
    e004:	4a57      	ldr	r2, [pc, #348]	; (e164 <main+0x18c>)
    e006:	601a      	str	r2, [r3, #0]

    gu32connectStartTime = gu32MsTicks;
    e008:	4b57      	ldr	r3, [pc, #348]	; (e168 <main+0x190>)
    e00a:	681a      	ldr	r2, [r3, #0]
    e00c:	4b57      	ldr	r3, [pc, #348]	; (e16c <main+0x194>)
    e00e:	601a      	str	r2, [r3, #0]
	/* Initialize WINC1500 Wi-Fi driver with data and status callbacks. */
	s8InitStatus = m2m_wifi_init(&wifiInitParam);
    e010:	2327      	movs	r3, #39	; 0x27
    e012:	18fc      	adds	r4, r7, r3
    e014:	230c      	movs	r3, #12
    e016:	18fb      	adds	r3, r7, r3
    e018:	0018      	movs	r0, r3
    e01a:	4b55      	ldr	r3, [pc, #340]	; (e170 <main+0x198>)
    e01c:	4798      	blx	r3
    e01e:	0003      	movs	r3, r0
    e020:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != s8InitStatus) {
    e022:	2327      	movs	r3, #39	; 0x27
    e024:	18fb      	adds	r3, r7, r3
    e026:	781b      	ldrb	r3, [r3, #0]
    e028:	b25b      	sxtb	r3, r3
    e02a:	2b00      	cmp	r3, #0
    e02c:	d004      	beq.n	e038 <main+0x60>
		printf("main: m2m_wifi_init call error!\r\n");
    e02e:	4b51      	ldr	r3, [pc, #324]	; (e174 <main+0x19c>)
    e030:	0018      	movs	r0, r3
    e032:	4b51      	ldr	r3, [pc, #324]	; (e178 <main+0x1a0>)
    e034:	4798      	blx	r3
		while (1) {
		}
    e036:	e7fe      	b.n	e036 <main+0x5e>
	}

	/* Initialize Socket API. */
	socketInit();
    e038:	4b50      	ldr	r3, [pc, #320]	; (e17c <main+0x1a4>)
    e03a:	4798      	blx	r3
	registerSocketCallback(m2m_tcp_socket_handler, socket_resolve_cb);
    e03c:	4a50      	ldr	r2, [pc, #320]	; (e180 <main+0x1a8>)
    e03e:	4b51      	ldr	r3, [pc, #324]	; (e184 <main+0x1ac>)
    e040:	0011      	movs	r1, r2
    e042:	0018      	movs	r0, r3
    e044:	4b50      	ldr	r3, [pc, #320]	; (e188 <main+0x1b0>)
    e046:	4798      	blx	r3

	/* Read MAC address to customize device name and AP name if enabled. */
	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
    e048:	1cfa      	adds	r2, r7, #3
    e04a:	1d3b      	adds	r3, r7, #4
    e04c:	0011      	movs	r1, r2
    e04e:	0018      	movs	r0, r3
    e050:	4b4e      	ldr	r3, [pc, #312]	; (e18c <main+0x1b4>)
    e052:	4798      	blx	r3
	if (!u8IsMacAddrValid) {
    e054:	1cfb      	adds	r3, r7, #3
    e056:	781b      	ldrb	r3, [r3, #0]
    e058:	2b00      	cmp	r3, #0
    e05a:	d108      	bne.n	e06e <main+0x96>
		printf("main: MAC address fuse bit has not been configured!\r\n");
    e05c:	4b4c      	ldr	r3, [pc, #304]	; (e190 <main+0x1b8>)
    e05e:	0018      	movs	r0, r3
    e060:	4b45      	ldr	r3, [pc, #276]	; (e178 <main+0x1a0>)
    e062:	4798      	blx	r3
		printf("main: Use m2m_wifi_set_mac_address() API to set MAC address via software.\r\n");
    e064:	4b4b      	ldr	r3, [pc, #300]	; (e194 <main+0x1bc>)
    e066:	0018      	movs	r0, r3
    e068:	4b43      	ldr	r3, [pc, #268]	; (e178 <main+0x1a0>)
    e06a:	4798      	blx	r3
		while (1) {
		}
    e06c:	e7fe      	b.n	e06c <main+0x94>
	}
	m2m_wifi_get_mac_address(mac_addr);
    e06e:	1d3b      	adds	r3, r7, #4
    e070:	0018      	movs	r0, r3
    e072:	4b49      	ldr	r3, [pc, #292]	; (e198 <main+0x1c0>)
    e074:	4798      	blx	r3
	set_dev_name_to_mac((uint8 *)PubNubChannel, mac_addr);
    e076:	1d3a      	adds	r2, r7, #4
    e078:	4b48      	ldr	r3, [pc, #288]	; (e19c <main+0x1c4>)
    e07a:	0011      	movs	r1, r2
    e07c:	0018      	movs	r0, r3
    e07e:	4b48      	ldr	r3, [pc, #288]	; (e1a0 <main+0x1c8>)
    e080:	4798      	blx	r3
	printf("\r\n");
    e082:	4b48      	ldr	r3, [pc, #288]	; (e1a4 <main+0x1cc>)
    e084:	0018      	movs	r0, r3
    e086:	4b3c      	ldr	r3, [pc, #240]	; (e178 <main+0x1a0>)
    e088:	4798      	blx	r3

	/* Initialize PubNub API. */
	printf("main: PubNub configured with following settings:\r\n");
    e08a:	4b47      	ldr	r3, [pc, #284]	; (e1a8 <main+0x1d0>)
    e08c:	0018      	movs	r0, r3
    e08e:	4b3a      	ldr	r3, [pc, #232]	; (e178 <main+0x1a0>)
    e090:	4798      	blx	r3
	printf("main:  - Publish key: \"%s\", Subscribe key: \"%s\", Channel: \"%s\".\r\n\r\n",
    e092:	4b42      	ldr	r3, [pc, #264]	; (e19c <main+0x1c4>)
    e094:	4a45      	ldr	r2, [pc, #276]	; (e1ac <main+0x1d4>)
    e096:	4946      	ldr	r1, [pc, #280]	; (e1b0 <main+0x1d8>)
    e098:	4846      	ldr	r0, [pc, #280]	; (e1b4 <main+0x1dc>)
    e09a:	4c47      	ldr	r4, [pc, #284]	; (e1b8 <main+0x1e0>)
    e09c:	47a0      	blx	r4
	PubNubPublishKey, PubNubSubscribeKey, PubNubChannel);
	pPubNubCfg = pubnub_get_ctx(0);
    e09e:	2000      	movs	r0, #0
    e0a0:	4b46      	ldr	r3, [pc, #280]	; (e1bc <main+0x1e4>)
    e0a2:	4798      	blx	r3
    e0a4:	0002      	movs	r2, r0
    e0a6:	4b46      	ldr	r3, [pc, #280]	; (e1c0 <main+0x1e8>)
    e0a8:	601a      	str	r2, [r3, #0]
	pubnub_init(pPubNubCfg, PubNubPublishKey, PubNubSubscribeKey);
    e0aa:	4b45      	ldr	r3, [pc, #276]	; (e1c0 <main+0x1e8>)
    e0ac:	681b      	ldr	r3, [r3, #0]
    e0ae:	4a3f      	ldr	r2, [pc, #252]	; (e1ac <main+0x1d4>)
    e0b0:	493f      	ldr	r1, [pc, #252]	; (e1b0 <main+0x1d8>)
    e0b2:	0018      	movs	r0, r3
    e0b4:	4b43      	ldr	r3, [pc, #268]	; (e1c4 <main+0x1ec>)
    e0b6:	4798      	blx	r3

	/* Connect to AP using Wi-Fi settings from main.h. */
	printf("main: Wi-Fi connecting to AP using hardcoded credentials...\r\n");
    e0b8:	4b43      	ldr	r3, [pc, #268]	; (e1c8 <main+0x1f0>)
    e0ba:	0018      	movs	r0, r3
    e0bc:	4b2e      	ldr	r3, [pc, #184]	; (e178 <main+0x1a0>)
    e0be:	4798      	blx	r3
	m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    e0c0:	4a42      	ldr	r2, [pc, #264]	; (e1cc <main+0x1f4>)
    e0c2:	4843      	ldr	r0, [pc, #268]	; (e1d0 <main+0x1f8>)
    e0c4:	23ff      	movs	r3, #255	; 0xff
    e0c6:	9300      	str	r3, [sp, #0]
    e0c8:	0013      	movs	r3, r2
    e0ca:	2202      	movs	r2, #2
    e0cc:	211b      	movs	r1, #27
    e0ce:	4c41      	ldr	r4, [pc, #260]	; (e1d4 <main+0x1fc>)
    e0d0:	47a0      	blx	r4
			MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);    

    xTaskCreate(task_3s, "task_3s", configMINIMAL_STACK_SIZE, 0, TASK_3S_PRIORITY, NULL);
    e0d2:	2380      	movs	r3, #128	; 0x80
    e0d4:	009a      	lsls	r2, r3, #2
    e0d6:	4940      	ldr	r1, [pc, #256]	; (e1d8 <main+0x200>)
    e0d8:	4840      	ldr	r0, [pc, #256]	; (e1dc <main+0x204>)
    e0da:	2300      	movs	r3, #0
    e0dc:	9301      	str	r3, [sp, #4]
    e0de:	2301      	movs	r3, #1
    e0e0:	9300      	str	r3, [sp, #0]
    e0e2:	2300      	movs	r3, #0
    e0e4:	4c3e      	ldr	r4, [pc, #248]	; (e1e0 <main+0x208>)
    e0e6:	47a0      	blx	r4
    xTaskCreate(task_1s, "task_1s", configMINIMAL_STACK_SIZE, 0, TASK_1S_PRIORITY, NULL);    
    e0e8:	2380      	movs	r3, #128	; 0x80
    e0ea:	009a      	lsls	r2, r3, #2
    e0ec:	493d      	ldr	r1, [pc, #244]	; (e1e4 <main+0x20c>)
    e0ee:	483e      	ldr	r0, [pc, #248]	; (e1e8 <main+0x210>)
    e0f0:	2300      	movs	r3, #0
    e0f2:	9301      	str	r3, [sp, #4]
    e0f4:	2301      	movs	r3, #1
    e0f6:	9300      	str	r3, [sp, #0]
    e0f8:	2300      	movs	r3, #0
    e0fa:	4c39      	ldr	r4, [pc, #228]	; (e1e0 <main+0x208>)
    e0fc:	47a0      	blx	r4
    xTaskCreate(task_33Hz, "task_33Hz", configMINIMAL_STACK_SIZE, 0, TASK_50HZ_PRIORITY, NULL); 
    e0fe:	2380      	movs	r3, #128	; 0x80
    e100:	009a      	lsls	r2, r3, #2
    e102:	493a      	ldr	r1, [pc, #232]	; (e1ec <main+0x214>)
    e104:	483a      	ldr	r0, [pc, #232]	; (e1f0 <main+0x218>)
    e106:	2300      	movs	r3, #0
    e108:	9301      	str	r3, [sp, #4]
    e10a:	2301      	movs	r3, #1
    e10c:	9300      	str	r3, [sp, #0]
    e10e:	2300      	movs	r3, #0
    e110:	4c33      	ldr	r4, [pc, #204]	; (e1e0 <main+0x208>)
    e112:	47a0      	blx	r4
    xTaskCreate(task_Buzzer, "task_Buzzer", 100, 0, tskIDLE_PRIORITY, NULL);
    e114:	4937      	ldr	r1, [pc, #220]	; (e1f4 <main+0x21c>)
    e116:	4838      	ldr	r0, [pc, #224]	; (e1f8 <main+0x220>)
    e118:	2300      	movs	r3, #0
    e11a:	9301      	str	r3, [sp, #4]
    e11c:	2300      	movs	r3, #0
    e11e:	9300      	str	r3, [sp, #0]
    e120:	2300      	movs	r3, #0
    e122:	2264      	movs	r2, #100	; 0x64
    e124:	4c2e      	ldr	r4, [pc, #184]	; (e1e0 <main+0x208>)
    e126:	47a0      	blx	r4
    display_mutex = xSemaphoreCreateMutex();
    e128:	2001      	movs	r0, #1
    e12a:	4b34      	ldr	r3, [pc, #208]	; (e1fc <main+0x224>)
    e12c:	4798      	blx	r3
    e12e:	0002      	movs	r2, r0
    e130:	4b33      	ldr	r3, [pc, #204]	; (e200 <main+0x228>)
    e132:	601a      	str	r2, [r3, #0]
    buzzer_sem = xSemaphoreCreateBinary();
    e134:	2203      	movs	r2, #3
    e136:	2100      	movs	r1, #0
    e138:	2001      	movs	r0, #1
    e13a:	4b32      	ldr	r3, [pc, #200]	; (e204 <main+0x22c>)
    e13c:	4798      	blx	r3
    e13e:	0002      	movs	r2, r0
    e140:	4b31      	ldr	r3, [pc, #196]	; (e208 <main+0x230>)
    e142:	601a      	str	r2, [r3, #0]

    vTaskStartScheduler();
    e144:	4b31      	ldr	r3, [pc, #196]	; (e20c <main+0x234>)
    e146:	4798      	blx	r3

    while(1) {}
    e148:	e7fe      	b.n	e148 <main+0x170>
    e14a:	46c0      	nop			; (mov r8, r8)
    e14c:	0000acb9 	.word	0x0000acb9
    e150:	0000d9a5 	.word	0x0000d9a5
    e154:	00000115 	.word	0x00000115
    e158:	00000d39 	.word	0x00000d39
    e15c:	00001e71 	.word	0x00001e71
    e160:	0000fb1b 	.word	0x0000fb1b
    e164:	0000d8cd 	.word	0x0000d8cd
    e168:	20003e7c 	.word	0x20003e7c
    e16c:	20003e88 	.word	0x20003e88
    e170:	00003a21 	.word	0x00003a21
    e174:	000125f0 	.word	0x000125f0
    e178:	000101f1 	.word	0x000101f1
    e17c:	000069d5 	.word	0x000069d5
    e180:	0000d871 	.word	0x0000d871
    e184:	0000d83d 	.word	0x0000d83d
    e188:	00006a25 	.word	0x00006a25
    e18c:	00004085 	.word	0x00004085
    e190:	00012614 	.word	0x00012614
    e194:	0001264c 	.word	0x0001264c
    e198:	000040f9 	.word	0x000040f9
    e19c:	20000024 	.word	0x20000024
    e1a0:	0000da19 	.word	0x0000da19
    e1a4:	00012698 	.word	0x00012698
    e1a8:	0001269c 	.word	0x0001269c
    e1ac:	000123a0 	.word	0x000123a0
    e1b0:	00012398 	.word	0x00012398
    e1b4:	000126d0 	.word	0x000126d0
    e1b8:	000100d1 	.word	0x000100d1
    e1bc:	0000eaa5 	.word	0x0000eaa5
    e1c0:	20003e90 	.word	0x20003e90
    e1c4:	0000eaf5 	.word	0x0000eaf5
    e1c8:	00012714 	.word	0x00012714
    e1cc:	0001245c 	.word	0x0001245c
    e1d0:	00012468 	.word	0x00012468
    e1d4:	00003bc9 	.word	0x00003bc9
    e1d8:	00012754 	.word	0x00012754
    e1dc:	0000db4d 	.word	0x0000db4d
    e1e0:	0000bf75 	.word	0x0000bf75
    e1e4:	0001275c 	.word	0x0001275c
    e1e8:	0000dcf5 	.word	0x0000dcf5
    e1ec:	00012764 	.word	0x00012764
    e1f0:	0000de71 	.word	0x0000de71
    e1f4:	00012770 	.word	0x00012770
    e1f8:	0000deb1 	.word	0x0000deb1
    e1fc:	0000b639 	.word	0x0000b639
    e200:	200045fc 	.word	0x200045fc
    e204:	0000b545 	.word	0x0000b545
    e208:	20004618 	.word	0x20004618
    e20c:	0000c311 	.word	0x0000c311

0000e210 <HardFault_Handler>:

	return 0;
}

void HardFault_Handler(void)
{
    e210:	b580      	push	{r7, lr}
    e212:	af00      	add	r7, sp, #0
    __asm volatile
    e214:	f3ef 8009 	mrs	r0, PSP
    e218:	6981      	ldr	r1, [r0, #24]
    (
        "mrs r0,psp         \n"
        "ldr r1,[r0,#24]    \n"    // r1 will contain the address where the hard fault occurred
    );    
}
    e21a:	46c0      	nop			; (mov r8, r8)
    e21c:	46bd      	mov	sp, r7
    e21e:	bd80      	pop	{r7, pc}

0000e220 <handle_transaction>:

static struct pubnub m_aCtx[PUBNUB_CTX_MAX];
struct sockaddr_in pubnub_origin_addr;

static void handle_transaction(pubnub_t *pb)
{
    e220:	b590      	push	{r4, r7, lr}
    e222:	b0dd      	sub	sp, #372	; 0x174
    e224:	af00      	add	r7, sp, #0
    e226:	6078      	str	r0, [r7, #4]
	if (pb->state == PS_WAIT_SEND) {
    e228:	687b      	ldr	r3, [r7, #4]
    e22a:	2252      	movs	r2, #82	; 0x52
    e22c:	5c9b      	ldrb	r3, [r3, r2]
    e22e:	2b03      	cmp	r3, #3
    e230:	d126      	bne.n	e280 <handle_transaction+0x60>
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
    e232:	4b1e      	ldr	r3, [pc, #120]	; (e2ac <handle_transaction+0x8c>)
    e234:	22b8      	movs	r2, #184	; 0xb8
    e236:	0052      	lsls	r2, r2, #1
    e238:	4694      	mov	ip, r2
    e23a:	44bc      	add	ip, r7
    e23c:	4463      	add	r3, ip
    e23e:	0018      	movs	r0, r3
    e240:	2366      	movs	r3, #102	; 0x66
    e242:	33ff      	adds	r3, #255	; 0xff
    e244:	001a      	movs	r2, r3
    e246:	2100      	movs	r1, #0
    e248:	4b19      	ldr	r3, [pc, #100]	; (e2b0 <handle_transaction+0x90>)
    e24a:	4798      	blx	r3
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
    e24c:	687b      	ldr	r3, [r7, #4]
    e24e:	3354      	adds	r3, #84	; 0x54
    e250:	001a      	movs	r2, r3
    e252:	4b18      	ldr	r3, [pc, #96]	; (e2b4 <handle_transaction+0x94>)
    e254:	4918      	ldr	r1, [pc, #96]	; (e2b8 <handle_transaction+0x98>)
    e256:	2008      	movs	r0, #8
    e258:	1838      	adds	r0, r7, r0
    e25a:	4c18      	ldr	r4, [pc, #96]	; (e2bc <handle_transaction+0x9c>)
    e25c:	47a0      	blx	r4
		send(pb->tcp_socket, buf, strlen(buf), 0);
    e25e:	687b      	ldr	r3, [r7, #4]
    e260:	2253      	movs	r2, #83	; 0x53
    e262:	569c      	ldrsb	r4, [r3, r2]
    e264:	2308      	movs	r3, #8
    e266:	18fb      	adds	r3, r7, r3
    e268:	0018      	movs	r0, r3
    e26a:	4b15      	ldr	r3, [pc, #84]	; (e2c0 <handle_transaction+0xa0>)
    e26c:	4798      	blx	r3
    e26e:	0003      	movs	r3, r0
    e270:	b29a      	uxth	r2, r3
    e272:	2308      	movs	r3, #8
    e274:	18f9      	adds	r1, r7, r3
    e276:	2300      	movs	r3, #0
    e278:	0020      	movs	r0, r4
    e27a:	4c12      	ldr	r4, [pc, #72]	; (e2c4 <handle_transaction+0xa4>)
    e27c:	47a0      	blx	r4
	} else if (pb->state == PS_WAIT_RECV) {
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
	} else if (pb->state == PS_RECV) {
	}
}
    e27e:	e010      	b.n	e2a2 <handle_transaction+0x82>
	if (pb->state == PS_WAIT_SEND) {
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
		send(pb->tcp_socket, buf, strlen(buf), 0);
		PUBNUB_PRINTF(("handle_transaction: buf = %s", buf));
	} else if (pb->state == PS_WAIT_RECV) {
    e280:	687b      	ldr	r3, [r7, #4]
    e282:	2252      	movs	r2, #82	; 0x52
    e284:	5c9b      	ldrb	r3, [r3, r2]
    e286:	2b04      	cmp	r3, #4
    e288:	d10b      	bne.n	e2a2 <handle_transaction+0x82>
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    e28a:	687b      	ldr	r3, [r7, #4]
    e28c:	2253      	movs	r2, #83	; 0x53
    e28e:	5698      	ldrsb	r0, [r3, r2]
    e290:	687b      	ldr	r3, [r7, #4]
    e292:	3354      	adds	r3, #84	; 0x54
    e294:	0019      	movs	r1, r3
    e296:	4c0c      	ldr	r4, [pc, #48]	; (e2c8 <handle_transaction+0xa8>)
    e298:	2380      	movs	r3, #128	; 0x80
    e29a:	005a      	lsls	r2, r3, #1
    e29c:	0023      	movs	r3, r4
    e29e:	4c0b      	ldr	r4, [pc, #44]	; (e2cc <handle_transaction+0xac>)
    e2a0:	47a0      	blx	r4
	} else if (pb->state == PS_RECV) {
	}
}
    e2a2:	46c0      	nop			; (mov r8, r8)
    e2a4:	46bd      	mov	sp, r7
    e2a6:	b05d      	add	sp, #372	; 0x174
    e2a8:	bd90      	pop	{r4, r7, pc}
    e2aa:	46c0      	nop			; (mov r8, r8)
    e2ac:	fffffe98 	.word	0xfffffe98
    e2b0:	0000fb1b 	.word	0x0000fb1b
    e2b4:	0001277c 	.word	0x0001277c
    e2b8:	00012790 	.word	0x00012790
    e2bc:	000103dd 	.word	0x000103dd
    e2c0:	00010445 	.word	0x00010445
    e2c4:	00006cb9 	.word	0x00006cb9
    e2c8:	00007530 	.word	0x00007530
    e2cc:	00006e1d 	.word	0x00006e1d

0000e2d0 <valid_ctx_prt>:

static bool valid_ctx_prt(pubnub_t const *pb)
{
    e2d0:	b580      	push	{r7, lr}
    e2d2:	b082      	sub	sp, #8
    e2d4:	af00      	add	r7, sp, #0
    e2d6:	6078      	str	r0, [r7, #4]
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    e2d8:	687a      	ldr	r2, [r7, #4]
    e2da:	4b09      	ldr	r3, [pc, #36]	; (e300 <valid_ctx_prt+0x30>)
    e2dc:	429a      	cmp	r2, r3
    e2de:	d305      	bcc.n	e2ec <valid_ctx_prt+0x1c>
    e2e0:	4b08      	ldr	r3, [pc, #32]	; (e304 <valid_ctx_prt+0x34>)
    e2e2:	687a      	ldr	r2, [r7, #4]
    e2e4:	429a      	cmp	r2, r3
    e2e6:	d201      	bcs.n	e2ec <valid_ctx_prt+0x1c>
    e2e8:	2301      	movs	r3, #1
    e2ea:	e000      	b.n	e2ee <valid_ctx_prt+0x1e>
    e2ec:	2300      	movs	r3, #0
    e2ee:	1c1a      	adds	r2, r3, #0
    e2f0:	2301      	movs	r3, #1
    e2f2:	4013      	ands	r3, r2
    e2f4:	b2db      	uxtb	r3, r3
}
    e2f6:	0018      	movs	r0, r3
    e2f8:	46bd      	mov	sp, r7
    e2fa:	b002      	add	sp, #8
    e2fc:	bd80      	pop	{r7, pc}
    e2fe:	46c0      	nop			; (mov r8, r8)
    e300:	20003ec8 	.word	0x20003ec8
    e304:	200045a8 	.word	0x200045a8

0000e308 <pubnub_find_ctx>:

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
    e308:	b580      	push	{r7, lr}
    e30a:	b084      	sub	sp, #16
    e30c:	af00      	add	r7, sp, #0
    e30e:	0002      	movs	r2, r0
    e310:	1dfb      	adds	r3, r7, #7
    e312:	701a      	strb	r2, [r3, #0]
    e314:	1dbb      	adds	r3, r7, #6
    e316:	1c0a      	adds	r2, r1, #0
    e318:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e31a:	4b11      	ldr	r3, [pc, #68]	; (e360 <pubnub_find_ctx+0x58>)
    e31c:	60fb      	str	r3, [r7, #12]
    e31e:	e016      	b.n	e34e <pubnub_find_ctx+0x46>
		if (pb->state == state && pb->tcp_socket == sock) {
    e320:	68fb      	ldr	r3, [r7, #12]
    e322:	2252      	movs	r2, #82	; 0x52
    e324:	5c9b      	ldrb	r3, [r3, r2]
    e326:	1dba      	adds	r2, r7, #6
    e328:	7812      	ldrb	r2, [r2, #0]
    e32a:	429a      	cmp	r2, r3
    e32c:	d109      	bne.n	e342 <pubnub_find_ctx+0x3a>
    e32e:	68fb      	ldr	r3, [r7, #12]
    e330:	2253      	movs	r2, #83	; 0x53
    e332:	569b      	ldrsb	r3, [r3, r2]
    e334:	1dfa      	adds	r2, r7, #7
    e336:	7812      	ldrb	r2, [r2, #0]
    e338:	b252      	sxtb	r2, r2
    e33a:	429a      	cmp	r2, r3
    e33c:	d101      	bne.n	e342 <pubnub_find_ctx+0x3a>
			return pb;
    e33e:	68fb      	ldr	r3, [r7, #12]
    e340:	e00a      	b.n	e358 <pubnub_find_ctx+0x50>

static pubnub_t *pubnub_find_ctx(SOCKET sock, enum pubnub_state state)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e342:	68fb      	ldr	r3, [r7, #12]
    e344:	22dc      	movs	r2, #220	; 0xdc
    e346:	0092      	lsls	r2, r2, #2
    e348:	4694      	mov	ip, r2
    e34a:	4463      	add	r3, ip
    e34c:	60fb      	str	r3, [r7, #12]
    e34e:	4b05      	ldr	r3, [pc, #20]	; (e364 <pubnub_find_ctx+0x5c>)
    e350:	68fa      	ldr	r2, [r7, #12]
    e352:	429a      	cmp	r2, r3
    e354:	d1e4      	bne.n	e320 <pubnub_find_ctx+0x18>
		if (pb->state == state && pb->tcp_socket == sock) {
			return pb;
		}
	}

	return NULL;
    e356:	2300      	movs	r3, #0
}
    e358:	0018      	movs	r0, r3
    e35a:	46bd      	mov	sp, r7
    e35c:	b004      	add	sp, #16
    e35e:	bd80      	pop	{r7, pc}
    e360:	20003ec8 	.word	0x20003ec8
    e364:	200045a8 	.word	0x200045a8

0000e368 <handle_start_connect>:

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    e368:	b590      	push	{r4, r7, lr}
    e36a:	b083      	sub	sp, #12
    e36c:	af00      	add	r7, sp, #0
    e36e:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    e370:	687b      	ldr	r3, [r7, #4]
    e372:	0018      	movs	r0, r3
    e374:	4b2f      	ldr	r3, [pc, #188]	; (e434 <handle_start_connect+0xcc>)
    e376:	4798      	blx	r3
    e378:	1e03      	subs	r3, r0, #0
    e37a:	d105      	bne.n	e388 <handle_start_connect+0x20>
    e37c:	4b2e      	ldr	r3, [pc, #184]	; (e438 <handle_start_connect+0xd0>)
    e37e:	4a2f      	ldr	r2, [pc, #188]	; (e43c <handle_start_connect+0xd4>)
    e380:	482f      	ldr	r0, [pc, #188]	; (e440 <handle_start_connect+0xd8>)
    e382:	2154      	movs	r1, #84	; 0x54
    e384:	4c2f      	ldr	r4, [pc, #188]	; (e444 <handle_start_connect+0xdc>)
    e386:	47a0      	blx	r4
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    e388:	687b      	ldr	r3, [r7, #4]
    e38a:	2252      	movs	r2, #82	; 0x52
    e38c:	5c9b      	ldrb	r3, [r3, r2]
    e38e:	2b00      	cmp	r3, #0
    e390:	d00f      	beq.n	e3b2 <handle_start_connect+0x4a>
    e392:	687b      	ldr	r3, [r7, #4]
    e394:	2252      	movs	r2, #82	; 0x52
    e396:	5c9b      	ldrb	r3, [r3, r2]
    e398:	2b01      	cmp	r3, #1
    e39a:	d00a      	beq.n	e3b2 <handle_start_connect+0x4a>
    e39c:	687b      	ldr	r3, [r7, #4]
    e39e:	2252      	movs	r2, #82	; 0x52
    e3a0:	5c9b      	ldrb	r3, [r3, r2]
    e3a2:	2b02      	cmp	r3, #2
    e3a4:	d005      	beq.n	e3b2 <handle_start_connect+0x4a>
    e3a6:	4b28      	ldr	r3, [pc, #160]	; (e448 <handle_start_connect+0xe0>)
    e3a8:	4a24      	ldr	r2, [pc, #144]	; (e43c <handle_start_connect+0xd4>)
    e3aa:	4825      	ldr	r0, [pc, #148]	; (e440 <handle_start_connect+0xd8>)
    e3ac:	2155      	movs	r1, #85	; 0x55
    e3ae:	4c25      	ldr	r4, [pc, #148]	; (e444 <handle_start_connect+0xdc>)
    e3b0:	47a0      	blx	r4

	if (pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    e3b2:	687b      	ldr	r3, [r7, #4]
    e3b4:	2252      	movs	r2, #82	; 0x52
    e3b6:	5c9b      	ldrb	r3, [r3, r2]
    e3b8:	2b00      	cmp	r3, #0
    e3ba:	d12c      	bne.n	e416 <handle_start_connect+0xae>
    e3bc:	687b      	ldr	r3, [r7, #4]
    e3be:	2253      	movs	r2, #83	; 0x53
    e3c0:	569b      	ldrsb	r3, [r3, r2]
    e3c2:	2b00      	cmp	r3, #0
    e3c4:	dc27      	bgt.n	e416 <handle_start_connect+0xae>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    e3c6:	2200      	movs	r2, #0
    e3c8:	2101      	movs	r1, #1
    e3ca:	2002      	movs	r0, #2
    e3cc:	4b1f      	ldr	r3, [pc, #124]	; (e44c <handle_start_connect+0xe4>)
    e3ce:	4798      	blx	r3
    e3d0:	0003      	movs	r3, r0
    e3d2:	0019      	movs	r1, r3
    e3d4:	687b      	ldr	r3, [r7, #4]
    e3d6:	2253      	movs	r2, #83	; 0x53
    e3d8:	5499      	strb	r1, [r3, r2]
    e3da:	687b      	ldr	r3, [r7, #4]
    e3dc:	2253      	movs	r2, #83	; 0x53
    e3de:	569b      	ldrsb	r3, [r3, r2]
    e3e0:	2b00      	cmp	r3, #0
    e3e2:	da04      	bge.n	e3ee <handle_start_connect+0x86>
			CONF_WINC_PRINTF("failed to create TCP client socket error!\r\n");
    e3e4:	4b1a      	ldr	r3, [pc, #104]	; (e450 <handle_start_connect+0xe8>)
    e3e6:	0018      	movs	r0, r3
    e3e8:	4b1a      	ldr	r3, [pc, #104]	; (e454 <handle_start_connect+0xec>)
    e3ea:	4798      	blx	r3
			return;
    e3ec:	e01f      	b.n	e42e <handle_start_connect+0xc6>
		}

		if (pubnub_origin_addr.sin_addr.s_addr <= 0) {
    e3ee:	4b1a      	ldr	r3, [pc, #104]	; (e458 <handle_start_connect+0xf0>)
    e3f0:	685b      	ldr	r3, [r3, #4]
    e3f2:	2b00      	cmp	r3, #0
    e3f4:	d10f      	bne.n	e416 <handle_start_connect+0xae>
			pubnub_origin_addr.sin_family = AF_INET;
    e3f6:	4b18      	ldr	r3, [pc, #96]	; (e458 <handle_start_connect+0xf0>)
    e3f8:	2202      	movs	r2, #2
    e3fa:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    e3fc:	4b16      	ldr	r3, [pc, #88]	; (e458 <handle_start_connect+0xf0>)
    e3fe:	22a0      	movs	r2, #160	; 0xa0
    e400:	01d2      	lsls	r2, r2, #7
    e402:	805a      	strh	r2, [r3, #2]

			pb->state = PS_WAIT_DNS;
    e404:	687b      	ldr	r3, [r7, #4]
    e406:	2252      	movs	r2, #82	; 0x52
    e408:	2101      	movs	r1, #1
    e40a:	5499      	strb	r1, [r3, r2]
			gethostbyname((uint8 *)PUBNUB_ORIGIN);
    e40c:	4b13      	ldr	r3, [pc, #76]	; (e45c <handle_start_connect+0xf4>)
    e40e:	0018      	movs	r0, r3
    e410:	4b13      	ldr	r3, [pc, #76]	; (e460 <handle_start_connect+0xf8>)
    e412:	4798      	blx	r3
			return;
    e414:	e00b      	b.n	e42e <handle_start_connect+0xc6>
		}
	}

	connect(pb->tcp_socket, (struct sockaddr *)&pubnub_origin_addr, sizeof(struct sockaddr_in));
    e416:	687b      	ldr	r3, [r7, #4]
    e418:	2253      	movs	r2, #83	; 0x53
    e41a:	569b      	ldrsb	r3, [r3, r2]
    e41c:	490e      	ldr	r1, [pc, #56]	; (e458 <handle_start_connect+0xf0>)
    e41e:	2210      	movs	r2, #16
    e420:	0018      	movs	r0, r3
    e422:	4b10      	ldr	r3, [pc, #64]	; (e464 <handle_start_connect+0xfc>)
    e424:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    e426:	687b      	ldr	r3, [r7, #4]
    e428:	2252      	movs	r2, #82	; 0x52
    e42a:	2102      	movs	r1, #2
    e42c:	5499      	strb	r1, [r3, r2]
}
    e42e:	46bd      	mov	sp, r7
    e430:	b003      	add	sp, #12
    e432:	bd90      	pop	{r4, r7, pc}
    e434:	0000e2d1 	.word	0x0000e2d1
    e438:	000127e4 	.word	0x000127e4
    e43c:	00012988 	.word	0x00012988
    e440:	000127f8 	.word	0x000127f8
    e444:	0000fa51 	.word	0x0000fa51
    e448:	00012808 	.word	0x00012808
    e44c:	00006a4d 	.word	0x00006a4d
    e450:	00012860 	.word	0x00012860
    e454:	000101f1 	.word	0x000101f1
    e458:	200047c4 	.word	0x200047c4
    e45c:	0001277c 	.word	0x0001277c
    e460:	000070ad 	.word	0x000070ad
    e464:	00006ba5 	.word	0x00006ba5

0000e468 <find_string_start>:

/* Find the beginning of a JSON string that comes after comma and ends
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
    e468:	b580      	push	{r7, lr}
    e46a:	b084      	sub	sp, #16
    e46c:	af00      	add	r7, sp, #0
    e46e:	6078      	str	r0, [r7, #4]
    e470:	6039      	str	r1, [r7, #0]
	int i;
	for (i = len - 1; i > 0; i--) {
    e472:	683b      	ldr	r3, [r7, #0]
    e474:	3b01      	subs	r3, #1
    e476:	60fb      	str	r3, [r7, #12]
    e478:	e014      	b.n	e4a4 <find_string_start+0x3c>
		if (buf[i] == '"') {
    e47a:	68fb      	ldr	r3, [r7, #12]
    e47c:	687a      	ldr	r2, [r7, #4]
    e47e:	18d3      	adds	r3, r2, r3
    e480:	781b      	ldrb	r3, [r3, #0]
    e482:	2b22      	cmp	r3, #34	; 0x22
    e484:	d10b      	bne.n	e49e <find_string_start+0x36>
			return (buf[i - 1] == ',') ? i : -1;
    e486:	68fb      	ldr	r3, [r7, #12]
    e488:	3b01      	subs	r3, #1
    e48a:	687a      	ldr	r2, [r7, #4]
    e48c:	18d3      	adds	r3, r2, r3
    e48e:	781b      	ldrb	r3, [r3, #0]
    e490:	2b2c      	cmp	r3, #44	; 0x2c
    e492:	d101      	bne.n	e498 <find_string_start+0x30>
    e494:	68fb      	ldr	r3, [r7, #12]
    e496:	e00a      	b.n	e4ae <find_string_start+0x46>
    e498:	2301      	movs	r3, #1
    e49a:	425b      	negs	r3, r3
    e49c:	e007      	b.n	e4ae <find_string_start+0x46>
 * at @c &buf[len].
 * @return position (index) of the found start or -1 on error. */
static int find_string_start(char const *buf, int len)
{
	int i;
	for (i = len - 1; i > 0; i--) {
    e49e:	68fb      	ldr	r3, [r7, #12]
    e4a0:	3b01      	subs	r3, #1
    e4a2:	60fb      	str	r3, [r7, #12]
    e4a4:	68fb      	ldr	r3, [r7, #12]
    e4a6:	2b00      	cmp	r3, #0
    e4a8:	dce7      	bgt.n	e47a <find_string_start+0x12>
		if (buf[i] == '"') {
			return (buf[i - 1] == ',') ? i : -1;
		}
	}
	return -1;
    e4aa:	2301      	movs	r3, #1
    e4ac:	425b      	negs	r3, r3
}
    e4ae:	0018      	movs	r0, r3
    e4b0:	46bd      	mov	sp, r7
    e4b2:	b004      	add	sp, #16
    e4b4:	bd80      	pop	{r7, pc}
    e4b6:	46c0      	nop			; (mov r8, r8)

0000e4b8 <split_array>:

/** Split @p buf string containing a JSON array (with arbitrary
 * contents) to multiple NUL-terminated C strings, in-place.
 */
static bool split_array(char *buf)
{
    e4b8:	b580      	push	{r7, lr}
    e4ba:	b084      	sub	sp, #16
    e4bc:	af00      	add	r7, sp, #0
    e4be:	6078      	str	r0, [r7, #4]
	bool escaped = false;
    e4c0:	230f      	movs	r3, #15
    e4c2:	18fb      	adds	r3, r7, r3
    e4c4:	2200      	movs	r2, #0
    e4c6:	701a      	strb	r2, [r3, #0]
	bool in_string = false;
    e4c8:	230e      	movs	r3, #14
    e4ca:	18fb      	adds	r3, r7, r3
    e4cc:	2200      	movs	r2, #0
    e4ce:	701a      	strb	r2, [r3, #0]
	int bracket_level = 0;
    e4d0:	2300      	movs	r3, #0
    e4d2:	60bb      	str	r3, [r7, #8]

	for (; *buf != '\0'; ++buf) {
    e4d4:	e04e      	b.n	e574 <split_array+0xbc>
		if (escaped) {
    e4d6:	230f      	movs	r3, #15
    e4d8:	18fb      	adds	r3, r7, r3
    e4da:	781b      	ldrb	r3, [r3, #0]
    e4dc:	2b00      	cmp	r3, #0
    e4de:	d004      	beq.n	e4ea <split_array+0x32>
			escaped = false;
    e4e0:	230f      	movs	r3, #15
    e4e2:	18fb      	adds	r3, r7, r3
    e4e4:	2200      	movs	r2, #0
    e4e6:	701a      	strb	r2, [r3, #0]
    e4e8:	e041      	b.n	e56e <split_array+0xb6>
		} else if ('"' == *buf) {
    e4ea:	687b      	ldr	r3, [r7, #4]
    e4ec:	781b      	ldrb	r3, [r3, #0]
    e4ee:	2b22      	cmp	r3, #34	; 0x22
    e4f0:	d111      	bne.n	e516 <split_array+0x5e>
			in_string = !in_string;
    e4f2:	230e      	movs	r3, #14
    e4f4:	18fb      	adds	r3, r7, r3
    e4f6:	781b      	ldrb	r3, [r3, #0]
    e4f8:	1e5a      	subs	r2, r3, #1
    e4fa:	4193      	sbcs	r3, r2
    e4fc:	b2db      	uxtb	r3, r3
    e4fe:	2201      	movs	r2, #1
    e500:	4053      	eors	r3, r2
    e502:	b2db      	uxtb	r3, r3
    e504:	001a      	movs	r2, r3
    e506:	230e      	movs	r3, #14
    e508:	18fb      	adds	r3, r7, r3
    e50a:	701a      	strb	r2, [r3, #0]
    e50c:	781a      	ldrb	r2, [r3, #0]
    e50e:	2101      	movs	r1, #1
    e510:	400a      	ands	r2, r1
    e512:	701a      	strb	r2, [r3, #0]
    e514:	e02b      	b.n	e56e <split_array+0xb6>
		} else if (in_string) {
    e516:	230e      	movs	r3, #14
    e518:	18fb      	adds	r3, r7, r3
    e51a:	781b      	ldrb	r3, [r3, #0]
    e51c:	2b00      	cmp	r3, #0
    e51e:	d008      	beq.n	e532 <split_array+0x7a>
			escaped = ('\\' == *buf);
    e520:	687b      	ldr	r3, [r7, #4]
    e522:	781a      	ldrb	r2, [r3, #0]
    e524:	230f      	movs	r3, #15
    e526:	18fb      	adds	r3, r7, r3
    e528:	3a5c      	subs	r2, #92	; 0x5c
    e52a:	4251      	negs	r1, r2
    e52c:	414a      	adcs	r2, r1
    e52e:	701a      	strb	r2, [r3, #0]
    e530:	e01d      	b.n	e56e <split_array+0xb6>
		} else {
			switch (*buf) {
    e532:	687b      	ldr	r3, [r7, #4]
    e534:	781b      	ldrb	r3, [r3, #0]
    e536:	2b5d      	cmp	r3, #93	; 0x5d
    e538:	d00e      	beq.n	e558 <split_array+0xa0>
    e53a:	dc04      	bgt.n	e546 <split_array+0x8e>
    e53c:	2b2c      	cmp	r3, #44	; 0x2c
    e53e:	d00f      	beq.n	e560 <split_array+0xa8>
    e540:	2b5b      	cmp	r3, #91	; 0x5b
    e542:	d005      	beq.n	e550 <split_array+0x98>
				}

				break;

			default:
				break;
    e544:	e013      	b.n	e56e <split_array+0xb6>
		} else if ('"' == *buf) {
			in_string = !in_string;
		} else if (in_string) {
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
    e546:	2b7b      	cmp	r3, #123	; 0x7b
    e548:	d002      	beq.n	e550 <split_array+0x98>
    e54a:	2b7d      	cmp	r3, #125	; 0x7d
    e54c:	d004      	beq.n	e558 <split_array+0xa0>
				}

				break;

			default:
				break;
    e54e:	e00e      	b.n	e56e <split_array+0xb6>
			escaped = ('\\' == *buf);
		} else {
			switch (*buf) {
			case '[':
			case '{':
				bracket_level++; break;
    e550:	68bb      	ldr	r3, [r7, #8]
    e552:	3301      	adds	r3, #1
    e554:	60bb      	str	r3, [r7, #8]
    e556:	e00a      	b.n	e56e <split_array+0xb6>

			case ']':
			case '}':
				bracket_level--; break;
    e558:	68bb      	ldr	r3, [r7, #8]
    e55a:	3b01      	subs	r3, #1
    e55c:	60bb      	str	r3, [r7, #8]
    e55e:	e006      	b.n	e56e <split_array+0xb6>

			/* if at root, split! */
			case ',':
				if (bracket_level == 0) {
    e560:	68bb      	ldr	r3, [r7, #8]
    e562:	2b00      	cmp	r3, #0
    e564:	d102      	bne.n	e56c <split_array+0xb4>
					*buf = '\0';
    e566:	687b      	ldr	r3, [r7, #4]
    e568:	2200      	movs	r2, #0
    e56a:	701a      	strb	r2, [r3, #0]
				}

				break;
    e56c:	46c0      	nop			; (mov r8, r8)
{
	bool escaped = false;
	bool in_string = false;
	int bracket_level = 0;

	for (; *buf != '\0'; ++buf) {
    e56e:	687b      	ldr	r3, [r7, #4]
    e570:	3301      	adds	r3, #1
    e572:	607b      	str	r3, [r7, #4]
    e574:	687b      	ldr	r3, [r7, #4]
    e576:	781b      	ldrb	r3, [r3, #0]
    e578:	2b00      	cmp	r3, #0
    e57a:	d1ac      	bne.n	e4d6 <split_array+0x1e>
				break;
			}
		}
	}

	return !(escaped || in_string || (bracket_level > 0));
    e57c:	230f      	movs	r3, #15
    e57e:	18fb      	adds	r3, r7, r3
    e580:	781b      	ldrb	r3, [r3, #0]
    e582:	2201      	movs	r2, #1
    e584:	4053      	eors	r3, r2
    e586:	b2db      	uxtb	r3, r3
    e588:	2b00      	cmp	r3, #0
    e58a:	d00c      	beq.n	e5a6 <split_array+0xee>
    e58c:	230e      	movs	r3, #14
    e58e:	18fb      	adds	r3, r7, r3
    e590:	781b      	ldrb	r3, [r3, #0]
    e592:	2201      	movs	r2, #1
    e594:	4053      	eors	r3, r2
    e596:	b2db      	uxtb	r3, r3
    e598:	2b00      	cmp	r3, #0
    e59a:	d004      	beq.n	e5a6 <split_array+0xee>
    e59c:	68bb      	ldr	r3, [r7, #8]
    e59e:	2b00      	cmp	r3, #0
    e5a0:	dc01      	bgt.n	e5a6 <split_array+0xee>
    e5a2:	2301      	movs	r3, #1
    e5a4:	e000      	b.n	e5a8 <split_array+0xf0>
    e5a6:	2300      	movs	r3, #0
    e5a8:	1c1a      	adds	r2, r3, #0
    e5aa:	2301      	movs	r3, #1
    e5ac:	4013      	ands	r3, r2
    e5ae:	b2db      	uxtb	r3, r3
}
    e5b0:	0018      	movs	r0, r3
    e5b2:	46bd      	mov	sp, r7
    e5b4:	b004      	add	sp, #16
    e5b6:	bd80      	pop	{r7, pc}

0000e5b8 <parse_subscribe_response>:

static int parse_subscribe_response(pubnub_t *p)
{
    e5b8:	b580      	push	{r7, lr}
    e5ba:	b086      	sub	sp, #24
    e5bc:	af00      	add	r7, sp, #0
    e5be:	6078      	str	r0, [r7, #4]
	char *reply = p->http_reply;
    e5c0:	687b      	ldr	r3, [r7, #4]
    e5c2:	3366      	adds	r3, #102	; 0x66
    e5c4:	33ff      	adds	r3, #255	; 0xff
    e5c6:	60bb      	str	r3, [r7, #8]
	unsigned int replylen = strlen(reply);
    e5c8:	68bb      	ldr	r3, [r7, #8]
    e5ca:	0018      	movs	r0, r3
    e5cc:	4b62      	ldr	r3, [pc, #392]	; (e758 <parse_subscribe_response+0x1a0>)
    e5ce:	4798      	blx	r3
    e5d0:	0003      	movs	r3, r0
    e5d2:	617b      	str	r3, [r7, #20]
	if (reply[replylen - 1] != ']' && replylen > 2) {
    e5d4:	697b      	ldr	r3, [r7, #20]
    e5d6:	3b01      	subs	r3, #1
    e5d8:	68ba      	ldr	r2, [r7, #8]
    e5da:	18d3      	adds	r3, r2, r3
    e5dc:	781b      	ldrb	r3, [r3, #0]
    e5de:	2b5d      	cmp	r3, #93	; 0x5d
    e5e0:	d005      	beq.n	e5ee <parse_subscribe_response+0x36>
    e5e2:	697b      	ldr	r3, [r7, #20]
    e5e4:	2b02      	cmp	r3, #2
    e5e6:	d902      	bls.n	e5ee <parse_subscribe_response+0x36>
		replylen -= 2; /* XXX: this seems required by Manxiang */
    e5e8:	697b      	ldr	r3, [r7, #20]
    e5ea:	3b02      	subs	r3, #2
    e5ec:	617b      	str	r3, [r7, #20]
	}

	if ((reply[0] != '[') || (reply[replylen - 1] != ']') || (reply[replylen - 2] != '"')) {
    e5ee:	68bb      	ldr	r3, [r7, #8]
    e5f0:	781b      	ldrb	r3, [r3, #0]
    e5f2:	2b5b      	cmp	r3, #91	; 0x5b
    e5f4:	d10d      	bne.n	e612 <parse_subscribe_response+0x5a>
    e5f6:	697b      	ldr	r3, [r7, #20]
    e5f8:	3b01      	subs	r3, #1
    e5fa:	68ba      	ldr	r2, [r7, #8]
    e5fc:	18d3      	adds	r3, r2, r3
    e5fe:	781b      	ldrb	r3, [r3, #0]
    e600:	2b5d      	cmp	r3, #93	; 0x5d
    e602:	d106      	bne.n	e612 <parse_subscribe_response+0x5a>
    e604:	697b      	ldr	r3, [r7, #20]
    e606:	3b02      	subs	r3, #2
    e608:	68ba      	ldr	r2, [r7, #8]
    e60a:	18d3      	adds	r3, r2, r3
    e60c:	781b      	ldrb	r3, [r3, #0]
    e60e:	2b22      	cmp	r3, #34	; 0x22
    e610:	d002      	beq.n	e618 <parse_subscribe_response+0x60>
		return -1;
    e612:	2301      	movs	r3, #1
    e614:	425b      	negs	r3, r3
    e616:	e09a      	b.n	e74e <parse_subscribe_response+0x196>
	}

	/* Extract the last argument. */
	int i = find_string_start(reply, replylen - 2);
    e618:	697b      	ldr	r3, [r7, #20]
    e61a:	3b02      	subs	r3, #2
    e61c:	001a      	movs	r2, r3
    e61e:	68bb      	ldr	r3, [r7, #8]
    e620:	0011      	movs	r1, r2
    e622:	0018      	movs	r0, r3
    e624:	4b4d      	ldr	r3, [pc, #308]	; (e75c <parse_subscribe_response+0x1a4>)
    e626:	4798      	blx	r3
    e628:	0003      	movs	r3, r0
    e62a:	613b      	str	r3, [r7, #16]
	if (i < 0) {
    e62c:	693b      	ldr	r3, [r7, #16]
    e62e:	2b00      	cmp	r3, #0
    e630:	da02      	bge.n	e638 <parse_subscribe_response+0x80>
		return -1;
    e632:	2301      	movs	r3, #1
    e634:	425b      	negs	r3, r3
    e636:	e08a      	b.n	e74e <parse_subscribe_response+0x196>
	}

	reply[replylen - 2] = 0;
    e638:	697b      	ldr	r3, [r7, #20]
    e63a:	3b02      	subs	r3, #2
    e63c:	68ba      	ldr	r2, [r7, #8]
    e63e:	18d3      	adds	r3, r2, r3
    e640:	2200      	movs	r2, #0
    e642:	701a      	strb	r2, [r3, #0]

	/* Now, the last argument may either be a timetoken or a channel list. */
	if (reply[i - 2] == '"') {
    e644:	693b      	ldr	r3, [r7, #16]
    e646:	3b02      	subs	r3, #2
    e648:	68ba      	ldr	r2, [r7, #8]
    e64a:	18d3      	adds	r3, r2, r3
    e64c:	781b      	ldrb	r3, [r3, #0]
    e64e:	2b22      	cmp	r3, #34	; 0x22
    e650:	d13f      	bne.n	e6d2 <parse_subscribe_response+0x11a>
		int k;

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
    e652:	693b      	ldr	r3, [r7, #16]
    e654:	b29b      	uxth	r3, r3
    e656:	3301      	adds	r3, #1
    e658:	b299      	uxth	r1, r3
    e65a:	687b      	ldr	r3, [r7, #4]
    e65c:	4a40      	ldr	r2, [pc, #256]	; (e760 <parse_subscribe_response+0x1a8>)
    e65e:	5299      	strh	r1, [r3, r2]
		p->chan_end = replylen - 1;
    e660:	697b      	ldr	r3, [r7, #20]
    e662:	b29b      	uxth	r3, r3
    e664:	3b01      	subs	r3, #1
    e666:	b299      	uxth	r1, r3
    e668:	687a      	ldr	r2, [r7, #4]
    e66a:	23db      	movs	r3, #219	; 0xdb
    e66c:	009b      	lsls	r3, r3, #2
    e66e:	52d1      	strh	r1, [r2, r3]
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    e670:	687a      	ldr	r2, [r7, #4]
    e672:	23db      	movs	r3, #219	; 0xdb
    e674:	009b      	lsls	r3, r3, #2
    e676:	5ad3      	ldrh	r3, [r2, r3]
    e678:	3b01      	subs	r3, #1
    e67a:	60fb      	str	r3, [r7, #12]
    e67c:	e00d      	b.n	e69a <parse_subscribe_response+0xe2>
			if (reply[k] == ',') {
    e67e:	68fb      	ldr	r3, [r7, #12]
    e680:	68ba      	ldr	r2, [r7, #8]
    e682:	18d3      	adds	r3, r2, r3
    e684:	781b      	ldrb	r3, [r3, #0]
    e686:	2b2c      	cmp	r3, #44	; 0x2c
    e688:	d104      	bne.n	e694 <parse_subscribe_response+0xdc>
				reply[k] = 0;
    e68a:	68fb      	ldr	r3, [r7, #12]
    e68c:	68ba      	ldr	r2, [r7, #8]
    e68e:	18d3      	adds	r3, r2, r3
    e690:	2200      	movs	r2, #0
    e692:	701a      	strb	r2, [r3, #0]

		/* It is a channel list, there is another string argument in front
         * of us. Process the channel list ... */
		p->chan_ofs = i + 1;
		p->chan_end = replylen - 1;
		for (k = p->chan_end - 1; k > p->chan_ofs; --k) {
    e694:	68fb      	ldr	r3, [r7, #12]
    e696:	3b01      	subs	r3, #1
    e698:	60fb      	str	r3, [r7, #12]
    e69a:	687b      	ldr	r3, [r7, #4]
    e69c:	4a30      	ldr	r2, [pc, #192]	; (e760 <parse_subscribe_response+0x1a8>)
    e69e:	5a9b      	ldrh	r3, [r3, r2]
    e6a0:	1e1a      	subs	r2, r3, #0
    e6a2:	68fb      	ldr	r3, [r7, #12]
    e6a4:	429a      	cmp	r2, r3
    e6a6:	dbea      	blt.n	e67e <parse_subscribe_response+0xc6>
				reply[k] = 0;
			}
		}

		/* ... and look for timetoken again. */
		reply[i - 2] = 0;
    e6a8:	693b      	ldr	r3, [r7, #16]
    e6aa:	3b02      	subs	r3, #2
    e6ac:	68ba      	ldr	r2, [r7, #8]
    e6ae:	18d3      	adds	r3, r2, r3
    e6b0:	2200      	movs	r2, #0
    e6b2:	701a      	strb	r2, [r3, #0]
		i = find_string_start(reply, i - 2);
    e6b4:	693b      	ldr	r3, [r7, #16]
    e6b6:	1e9a      	subs	r2, r3, #2
    e6b8:	68bb      	ldr	r3, [r7, #8]
    e6ba:	0011      	movs	r1, r2
    e6bc:	0018      	movs	r0, r3
    e6be:	4b27      	ldr	r3, [pc, #156]	; (e75c <parse_subscribe_response+0x1a4>)
    e6c0:	4798      	blx	r3
    e6c2:	0003      	movs	r3, r0
    e6c4:	613b      	str	r3, [r7, #16]
		if (i < 0) {
    e6c6:	693b      	ldr	r3, [r7, #16]
    e6c8:	2b00      	cmp	r3, #0
    e6ca:	da0b      	bge.n	e6e4 <parse_subscribe_response+0x12c>
			return -1;
    e6cc:	2301      	movs	r3, #1
    e6ce:	425b      	negs	r3, r3
    e6d0:	e03d      	b.n	e74e <parse_subscribe_response+0x196>
		}
	} else {
		p->chan_ofs = 0;
    e6d2:	687b      	ldr	r3, [r7, #4]
    e6d4:	4a22      	ldr	r2, [pc, #136]	; (e760 <parse_subscribe_response+0x1a8>)
    e6d6:	2100      	movs	r1, #0
    e6d8:	5299      	strh	r1, [r3, r2]
		p->chan_end = 0;
    e6da:	687a      	ldr	r2, [r7, #4]
    e6dc:	23db      	movs	r3, #219	; 0xdb
    e6de:	009b      	lsls	r3, r3, #2
    e6e0:	2100      	movs	r1, #0
    e6e2:	52d1      	strh	r1, [r2, r3]
	 * [[1,2,3],"5678"]
	 * [[1,2,3],"5678","a,b,c"]
	 *          ^-- here */

	/* Setup timetoken. */
	if (replylen >= sizeof(p->timetoken) + 2 + (i + 1)) {
    e6e4:	693b      	ldr	r3, [r7, #16]
    e6e6:	3343      	adds	r3, #67	; 0x43
    e6e8:	1e1a      	subs	r2, r3, #0
    e6ea:	697b      	ldr	r3, [r7, #20]
    e6ec:	429a      	cmp	r2, r3
    e6ee:	d802      	bhi.n	e6f6 <parse_subscribe_response+0x13e>
		return -1;
    e6f0:	2301      	movs	r3, #1
    e6f2:	425b      	negs	r3, r3
    e6f4:	e02b      	b.n	e74e <parse_subscribe_response+0x196>
	}

	strcpy(p->timetoken, reply + i + 1);
    e6f6:	687b      	ldr	r3, [r7, #4]
    e6f8:	3310      	adds	r3, #16
    e6fa:	0018      	movs	r0, r3
    e6fc:	693b      	ldr	r3, [r7, #16]
    e6fe:	3301      	adds	r3, #1
    e700:	68ba      	ldr	r2, [r7, #8]
    e702:	18d3      	adds	r3, r2, r3
    e704:	0019      	movs	r1, r3
    e706:	4b17      	ldr	r3, [pc, #92]	; (e764 <parse_subscribe_response+0x1ac>)
    e708:	4798      	blx	r3
	reply[i - 2] = 0; /* terminate the [] message array (before the ]!) */
    e70a:	693b      	ldr	r3, [r7, #16]
    e70c:	3b02      	subs	r3, #2
    e70e:	68ba      	ldr	r2, [r7, #8]
    e710:	18d3      	adds	r3, r2, r3
    e712:	2200      	movs	r2, #0
    e714:	701a      	strb	r2, [r3, #0]

	/* Set up the message list - offset, length and NUL-characters splitting the messages. */
	p->msg_ofs = 2;
    e716:	687b      	ldr	r3, [r7, #4]
    e718:	4a13      	ldr	r2, [pc, #76]	; (e768 <parse_subscribe_response+0x1b0>)
    e71a:	2102      	movs	r1, #2
    e71c:	5299      	strh	r1, [r3, r2]
	p->msg_end = i - 2;
    e71e:	693b      	ldr	r3, [r7, #16]
    e720:	b29b      	uxth	r3, r3
    e722:	3b02      	subs	r3, #2
    e724:	b299      	uxth	r1, r3
    e726:	687a      	ldr	r2, [r7, #4]
    e728:	23da      	movs	r3, #218	; 0xda
    e72a:	009b      	lsls	r3, r3, #2
    e72c:	52d1      	strh	r1, [r2, r3]

	return split_array(reply + p->msg_ofs) ? 0 : -1;
    e72e:	687b      	ldr	r3, [r7, #4]
    e730:	4a0d      	ldr	r2, [pc, #52]	; (e768 <parse_subscribe_response+0x1b0>)
    e732:	5a9b      	ldrh	r3, [r3, r2]
    e734:	001a      	movs	r2, r3
    e736:	68bb      	ldr	r3, [r7, #8]
    e738:	189b      	adds	r3, r3, r2
    e73a:	0018      	movs	r0, r3
    e73c:	4b0b      	ldr	r3, [pc, #44]	; (e76c <parse_subscribe_response+0x1b4>)
    e73e:	4798      	blx	r3
    e740:	1e03      	subs	r3, r0, #0
    e742:	d001      	beq.n	e748 <parse_subscribe_response+0x190>
    e744:	2300      	movs	r3, #0
    e746:	e001      	b.n	e74c <parse_subscribe_response+0x194>
    e748:	2301      	movs	r3, #1
    e74a:	425b      	negs	r3, r3
    e74c:	46c0      	nop			; (mov r8, r8)
}
    e74e:	0018      	movs	r0, r3
    e750:	46bd      	mov	sp, r7
    e752:	b006      	add	sp, #24
    e754:	bd80      	pop	{r7, pc}
    e756:	46c0      	nop			; (mov r8, r8)
    e758:	00010445 	.word	0x00010445
    e75c:	0000e469 	.word	0x0000e469
    e760:	0000036a 	.word	0x0000036a
    e764:	00010435 	.word	0x00010435
    e768:	00000366 	.word	0x00000366
    e76c:	0000e4b9 	.word	0x0000e4b9

0000e770 <handle_tcpip_connect>:

static void handle_tcpip_connect(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e770:	b580      	push	{r7, lr}
    e772:	b084      	sub	sp, #16
    e774:	af00      	add	r7, sp, #0
    e776:	603a      	str	r2, [r7, #0]
    e778:	1dfb      	adds	r3, r7, #7
    e77a:	1c02      	adds	r2, r0, #0
    e77c:	701a      	strb	r2, [r3, #0]
    e77e:	1dbb      	adds	r3, r7, #6
    e780:	1c0a      	adds	r2, r1, #0
    e782:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_CONNECT);
    e784:	1dfb      	adds	r3, r7, #7
    e786:	781b      	ldrb	r3, [r3, #0]
    e788:	b25b      	sxtb	r3, r3
    e78a:	2102      	movs	r1, #2
    e78c:	0018      	movs	r0, r3
    e78e:	4b16      	ldr	r3, [pc, #88]	; (e7e8 <handle_tcpip_connect+0x78>)
    e790:	4798      	blx	r3
    e792:	0003      	movs	r3, r0
    e794:	60fb      	str	r3, [r7, #12]

	if (pb != NULL) {
    e796:	68fb      	ldr	r3, [r7, #12]
    e798:	2b00      	cmp	r3, #0
    e79a:	d020      	beq.n	e7de <handle_tcpip_connect+0x6e>
		tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg *)pvMsg;
    e79c:	683b      	ldr	r3, [r7, #0]
    e79e:	60bb      	str	r3, [r7, #8]
		if (pstrConnect && pstrConnect->s8Error >= 0) {
    e7a0:	68bb      	ldr	r3, [r7, #8]
    e7a2:	2b00      	cmp	r3, #0
    e7a4:	d00d      	beq.n	e7c2 <handle_tcpip_connect+0x52>
    e7a6:	68bb      	ldr	r3, [r7, #8]
    e7a8:	785b      	ldrb	r3, [r3, #1]
    e7aa:	b25b      	sxtb	r3, r3
    e7ac:	2b00      	cmp	r3, #0
    e7ae:	db08      	blt.n	e7c2 <handle_tcpip_connect+0x52>
			PUBNUB_PRINTF("handle_tcpip_connect : connect success!\r\n");
			pb->state = PS_WAIT_SEND;
    e7b0:	68fb      	ldr	r3, [r7, #12]
    e7b2:	2252      	movs	r2, #82	; 0x52
    e7b4:	2103      	movs	r1, #3
    e7b6:	5499      	strb	r1, [r3, r2]

			handle_transaction(pb);
    e7b8:	68fb      	ldr	r3, [r7, #12]
    e7ba:	0018      	movs	r0, r3
    e7bc:	4b0b      	ldr	r3, [pc, #44]	; (e7ec <handle_tcpip_connect+0x7c>)
    e7be:	4798      	blx	r3

			pb->state = PS_IDLE;
			pb->last_result = PNR_IO_ERROR;
		}
	}
}
    e7c0:	e00d      	b.n	e7de <handle_tcpip_connect+0x6e>
			pb->state = PS_WAIT_SEND;

			handle_transaction(pb);
		} else {
			PUBNUB_PRINTF("handle_tcpip_connect : connect error!\r\n");
			close(pb->tcp_socket);
    e7c2:	68fb      	ldr	r3, [r7, #12]
    e7c4:	2253      	movs	r2, #83	; 0x53
    e7c6:	569b      	ldrsb	r3, [r3, r2]
    e7c8:	0018      	movs	r0, r3
    e7ca:	4b09      	ldr	r3, [pc, #36]	; (e7f0 <handle_tcpip_connect+0x80>)
    e7cc:	4798      	blx	r3

			pb->state = PS_IDLE;
    e7ce:	68fb      	ldr	r3, [r7, #12]
    e7d0:	2252      	movs	r2, #82	; 0x52
    e7d2:	2100      	movs	r1, #0
    e7d4:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
    e7d6:	68fb      	ldr	r3, [r7, #12]
    e7d8:	2250      	movs	r2, #80	; 0x50
    e7da:	2102      	movs	r1, #2
    e7dc:	5499      	strb	r1, [r3, r2]
		}
	}
}
    e7de:	46c0      	nop			; (mov r8, r8)
    e7e0:	46bd      	mov	sp, r7
    e7e2:	b004      	add	sp, #16
    e7e4:	bd80      	pop	{r7, pc}
    e7e6:	46c0      	nop			; (mov r8, r8)
    e7e8:	0000e309 	.word	0x0000e309
    e7ec:	0000e221 	.word	0x0000e221
    e7f0:	00006f9d 	.word	0x00006f9d

0000e7f4 <handle_tcpip_recv>:

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e7f4:	b580      	push	{r7, lr}
    e7f6:	b086      	sub	sp, #24
    e7f8:	af00      	add	r7, sp, #0
    e7fa:	603a      	str	r2, [r7, #0]
    e7fc:	1dfb      	adds	r3, r7, #7
    e7fe:	1c02      	adds	r2, r0, #0
    e800:	701a      	strb	r2, [r3, #0]
    e802:	1dbb      	adds	r3, r7, #6
    e804:	1c0a      	adds	r2, r1, #0
    e806:	701a      	strb	r2, [r3, #0]
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e808:	4b57      	ldr	r3, [pc, #348]	; (e968 <handle_tcpip_recv+0x174>)
    e80a:	617b      	str	r3, [r7, #20]
    e80c:	e012      	b.n	e834 <handle_tcpip_recv+0x40>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
    e80e:	697b      	ldr	r3, [r7, #20]
    e810:	2252      	movs	r2, #82	; 0x52
    e812:	5c9b      	ldrb	r3, [r3, r2]
    e814:	2b04      	cmp	r3, #4
    e816:	d107      	bne.n	e828 <handle_tcpip_recv+0x34>
    e818:	697b      	ldr	r3, [r7, #20]
    e81a:	2253      	movs	r2, #83	; 0x53
    e81c:	569b      	ldrsb	r3, [r3, r2]
    e81e:	1dfa      	adds	r2, r7, #7
    e820:	7812      	ldrb	r2, [r2, #0]
    e822:	b252      	sxtb	r2, r2
    e824:	429a      	cmp	r2, r3
    e826:	d00a      	beq.n	e83e <handle_tcpip_recv+0x4a>

static void handle_tcpip_recv(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	pubnub_t *pb;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e828:	697b      	ldr	r3, [r7, #20]
    e82a:	22dc      	movs	r2, #220	; 0xdc
    e82c:	0092      	lsls	r2, r2, #2
    e82e:	4694      	mov	ip, r2
    e830:	4463      	add	r3, ip
    e832:	617b      	str	r3, [r7, #20]
    e834:	4b4d      	ldr	r3, [pc, #308]	; (e96c <handle_tcpip_recv+0x178>)
    e836:	697a      	ldr	r2, [r7, #20]
    e838:	429a      	cmp	r2, r3
    e83a:	d1e8      	bne.n	e80e <handle_tcpip_recv+0x1a>
    e83c:	e000      	b.n	e840 <handle_tcpip_recv+0x4c>
		if (pb->state == PS_WAIT_RECV && pb->tcp_socket == sock) {
			break;
    e83e:	46c0      	nop			; (mov r8, r8)
		}
	}

	if (pb != NULL) {
    e840:	697b      	ldr	r3, [r7, #20]
    e842:	2b00      	cmp	r3, #0
    e844:	d100      	bne.n	e848 <handle_tcpip_recv+0x54>
    e846:	e08b      	b.n	e960 <handle_tcpip_recv+0x16c>
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    e848:	683b      	ldr	r3, [r7, #0]
    e84a:	613b      	str	r3, [r7, #16]

		if (pstrRecv->s16BufferSize <= 0) {
    e84c:	693b      	ldr	r3, [r7, #16]
    e84e:	2204      	movs	r2, #4
    e850:	5e9b      	ldrsh	r3, [r3, r2]
    e852:	2b00      	cmp	r3, #0
    e854:	dc0e      	bgt.n	e874 <handle_tcpip_recv+0x80>
			close(pb->tcp_socket);
    e856:	697b      	ldr	r3, [r7, #20]
    e858:	2253      	movs	r2, #83	; 0x53
    e85a:	569b      	ldrsb	r3, [r3, r2]
    e85c:	0018      	movs	r0, r3
    e85e:	4b44      	ldr	r3, [pc, #272]	; (e970 <handle_tcpip_recv+0x17c>)
    e860:	4798      	blx	r3

			pb->state = PS_IDLE;
    e862:	697b      	ldr	r3, [r7, #20]
    e864:	2252      	movs	r2, #82	; 0x52
    e866:	2100      	movs	r1, #0
    e868:	5499      	strb	r1, [r3, r2]
			pb->last_result = PNR_IO_ERROR;
    e86a:	697b      	ldr	r3, [r7, #20]
    e86c:	2250      	movs	r2, #80	; 0x50
    e86e:	2102      	movs	r1, #2
    e870:	5499      	strb	r1, [r3, r2]
			return;
    e872:	e075      	b.n	e960 <handle_tcpip_recv+0x16c>
		}

		if (pb->trans == PBTT_PUBLISH) {
    e874:	697b      	ldr	r3, [r7, #20]
    e876:	2251      	movs	r2, #81	; 0x51
    e878:	5c9b      	ldrb	r3, [r3, r2]
    e87a:	2b02      	cmp	r3, #2
    e87c:	d10c      	bne.n	e898 <handle_tcpip_recv+0xa4>
			PUBNUB_PRINTF(("handle_tcpip_recv: PBTT_PUBLISH msg: %s\n", pstrRecv->pu8Buffer));

			if (pstrRecv->u16RemainingSize == 0) {
    e87e:	693b      	ldr	r3, [r7, #16]
    e880:	88db      	ldrh	r3, [r3, #6]
    e882:	2b00      	cmp	r3, #0
    e884:	d16b      	bne.n	e95e <handle_tcpip_recv+0x16a>
				pb->last_result = PNR_OK;
    e886:	697b      	ldr	r3, [r7, #20]
    e888:	2250      	movs	r2, #80	; 0x50
    e88a:	2100      	movs	r1, #0
    e88c:	5499      	strb	r1, [r3, r2]
				pb->state = PS_IDLE;
    e88e:	697b      	ldr	r3, [r7, #20]
    e890:	2252      	movs	r2, #82	; 0x52
    e892:	2100      	movs	r1, #0
    e894:	5499      	strb	r1, [r3, r2]
			}

			return;
    e896:	e062      	b.n	e95e <handle_tcpip_recv+0x16a>
		}

		if (pstrRecv->u16RemainingSize > 0) {
    e898:	693b      	ldr	r3, [r7, #16]
    e89a:	88db      	ldrh	r3, [r3, #6]
    e89c:	2b00      	cmp	r3, #0
    e89e:	d037      	beq.n	e910 <handle_tcpip_recv+0x11c>
			pb->state = PS_WAIT_RECV;
    e8a0:	697b      	ldr	r3, [r7, #20]
    e8a2:	2252      	movs	r2, #82	; 0x52
    e8a4:	2104      	movs	r1, #4
    e8a6:	5499      	strb	r1, [r3, r2]

			uint8_t *length = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"Content-Length: ") + 16;
    e8a8:	693b      	ldr	r3, [r7, #16]
    e8aa:	681b      	ldr	r3, [r3, #0]
    e8ac:	4a31      	ldr	r2, [pc, #196]	; (e974 <handle_tcpip_recv+0x180>)
    e8ae:	0011      	movs	r1, r2
    e8b0:	0018      	movs	r0, r3
    e8b2:	4b31      	ldr	r3, [pc, #196]	; (e978 <handle_tcpip_recv+0x184>)
    e8b4:	4798      	blx	r3
    e8b6:	0003      	movs	r3, r0
    e8b8:	3310      	adds	r3, #16
    e8ba:	60fb      	str	r3, [r7, #12]
			pb->http_content_len = atoi((const char *)length);
    e8bc:	68fb      	ldr	r3, [r7, #12]
    e8be:	0018      	movs	r0, r3
    e8c0:	4b2e      	ldr	r3, [pc, #184]	; (e97c <handle_tcpip_recv+0x188>)
    e8c2:	4798      	blx	r3
    e8c4:	0003      	movs	r3, r0
    e8c6:	0019      	movs	r1, r3
    e8c8:	697a      	ldr	r2, [r7, #20]
    e8ca:	23ae      	movs	r3, #174	; 0xae
    e8cc:	005b      	lsls	r3, r3, #1
    e8ce:	50d1      	str	r1, [r2, r3]
			pb->http_content_remaining_len = pstrRecv->u16RemainingSize;
    e8d0:	693b      	ldr	r3, [r7, #16]
    e8d2:	88db      	ldrh	r3, [r3, #6]
    e8d4:	0019      	movs	r1, r3
    e8d6:	697a      	ldr	r2, [r7, #20]
    e8d8:	23b0      	movs	r3, #176	; 0xb0
    e8da:	005b      	lsls	r3, r3, #1
    e8dc:	50d1      	str	r1, [r2, r3]
			PUBNUB_PRINTF(("Content-Length = %d\r\n", (int)pb->http_content_len));

			uint8_t *content = m2m_strstr(pstrRecv->pu8Buffer, (uint8 *)"[");
    e8de:	693b      	ldr	r3, [r7, #16]
    e8e0:	681b      	ldr	r3, [r3, #0]
    e8e2:	4a27      	ldr	r2, [pc, #156]	; (e980 <handle_tcpip_recv+0x18c>)
    e8e4:	0011      	movs	r1, r2
    e8e6:	0018      	movs	r0, r3
    e8e8:	4b23      	ldr	r3, [pc, #140]	; (e978 <handle_tcpip_recv+0x184>)
    e8ea:	4798      	blx	r3
    e8ec:	0003      	movs	r3, r0
    e8ee:	60bb      	str	r3, [r7, #8]
			memcpy(pb->http_reply, content, pb->http_content_len - pstrRecv->u16RemainingSize);
    e8f0:	697b      	ldr	r3, [r7, #20]
    e8f2:	3366      	adds	r3, #102	; 0x66
    e8f4:	33ff      	adds	r3, #255	; 0xff
    e8f6:	0018      	movs	r0, r3
    e8f8:	697a      	ldr	r2, [r7, #20]
    e8fa:	23ae      	movs	r3, #174	; 0xae
    e8fc:	005b      	lsls	r3, r3, #1
    e8fe:	58d3      	ldr	r3, [r2, r3]
    e900:	693a      	ldr	r2, [r7, #16]
    e902:	88d2      	ldrh	r2, [r2, #6]
    e904:	1a9a      	subs	r2, r3, r2
    e906:	68bb      	ldr	r3, [r7, #8]
    e908:	0019      	movs	r1, r3
    e90a:	4b1e      	ldr	r3, [pc, #120]	; (e984 <handle_tcpip_recv+0x190>)
    e90c:	4798      	blx	r3
    e90e:	e027      	b.n	e960 <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));
		} else if (pstrRecv->u16RemainingSize == 0) {
    e910:	693b      	ldr	r3, [r7, #16]
    e912:	88db      	ldrh	r3, [r3, #6]
    e914:	2b00      	cmp	r3, #0
    e916:	d123      	bne.n	e960 <handle_tcpip_recv+0x16c>
			PUBNUB_PRINTF(("http_content_remaining_len = %d\r\n", (int)pb->http_content_remaining_len));

			memcpy(pb->http_reply + (pb->http_content_len - pb->http_content_remaining_len), pstrRecv->pu8Buffer, pstrRecv->s16BufferSize);
    e918:	697b      	ldr	r3, [r7, #20]
    e91a:	3366      	adds	r3, #102	; 0x66
    e91c:	33ff      	adds	r3, #255	; 0xff
    e91e:	001a      	movs	r2, r3
    e920:	6979      	ldr	r1, [r7, #20]
    e922:	23ae      	movs	r3, #174	; 0xae
    e924:	005b      	lsls	r3, r3, #1
    e926:	58c9      	ldr	r1, [r1, r3]
    e928:	6978      	ldr	r0, [r7, #20]
    e92a:	23b0      	movs	r3, #176	; 0xb0
    e92c:	005b      	lsls	r3, r3, #1
    e92e:	58c3      	ldr	r3, [r0, r3]
    e930:	1acb      	subs	r3, r1, r3
    e932:	18d0      	adds	r0, r2, r3
    e934:	693b      	ldr	r3, [r7, #16]
    e936:	6819      	ldr	r1, [r3, #0]
    e938:	693b      	ldr	r3, [r7, #16]
    e93a:	2204      	movs	r2, #4
    e93c:	5e9b      	ldrsh	r3, [r3, r2]
    e93e:	001a      	movs	r2, r3
    e940:	4b10      	ldr	r3, [pc, #64]	; (e984 <handle_tcpip_recv+0x190>)
    e942:	4798      	blx	r3
			PUBNUB_PRINTF(("http_reply = %s\r\n", pb->http_reply));

			parse_subscribe_response(pb);
    e944:	697b      	ldr	r3, [r7, #20]
    e946:	0018      	movs	r0, r3
    e948:	4b0f      	ldr	r3, [pc, #60]	; (e988 <handle_tcpip_recv+0x194>)
    e94a:	4798      	blx	r3

			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
    e94c:	697b      	ldr	r3, [r7, #20]
    e94e:	2250      	movs	r2, #80	; 0x50
    e950:	2100      	movs	r1, #0
    e952:	5499      	strb	r1, [r3, r2]
			pb->state = PS_IDLE;
    e954:	697b      	ldr	r3, [r7, #20]
    e956:	2252      	movs	r2, #82	; 0x52
    e958:	2100      	movs	r1, #0
    e95a:	5499      	strb	r1, [r3, r2]
    e95c:	e000      	b.n	e960 <handle_tcpip_recv+0x16c>
			if (pstrRecv->u16RemainingSize == 0) {
				pb->last_result = PNR_OK;
				pb->state = PS_IDLE;
			}

			return;
    e95e:	46c0      	nop			; (mov r8, r8)
			PUBNUB_PRINTF(("timetoken = %s\r\n", pb->timetoken));
			pb->last_result = PNR_OK;
			pb->state = PS_IDLE;
		}
	}
}
    e960:	46bd      	mov	sp, r7
    e962:	b006      	add	sp, #24
    e964:	bd80      	pop	{r7, pc}
    e966:	46c0      	nop			; (mov r8, r8)
    e968:	20003ec8 	.word	0x20003ec8
    e96c:	200045a8 	.word	0x200045a8
    e970:	00006f9d 	.word	0x00006f9d
    e974:	0001288c 	.word	0x0001288c
    e978:	000028c9 	.word	0x000028c9
    e97c:	0000fa91 	.word	0x0000fa91
    e980:	000128a0 	.word	0x000128a0
    e984:	0000fb09 	.word	0x0000fb09
    e988:	0000e5b9 	.word	0x0000e5b9

0000e98c <handle_dns_found>:

void handle_dns_found(char const *name, uint32_t hostip)
{
    e98c:	b580      	push	{r7, lr}
    e98e:	b084      	sub	sp, #16
    e990:	af00      	add	r7, sp, #0
    e992:	6078      	str	r0, [r7, #4]
    e994:	6039      	str	r1, [r7, #0]
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
    e996:	4a13      	ldr	r2, [pc, #76]	; (e9e4 <handle_dns_found+0x58>)
    e998:	687b      	ldr	r3, [r7, #4]
    e99a:	0011      	movs	r1, r2
    e99c:	0018      	movs	r0, r3
    e99e:	4b12      	ldr	r3, [pc, #72]	; (e9e8 <handle_dns_found+0x5c>)
    e9a0:	4798      	blx	r3
    e9a2:	1e03      	subs	r3, r0, #0
    e9a4:	d119      	bne.n	e9da <handle_dns_found+0x4e>
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;
    e9a6:	4b11      	ldr	r3, [pc, #68]	; (e9ec <handle_dns_found+0x60>)
    e9a8:	683a      	ldr	r2, [r7, #0]
    e9aa:	605a      	str	r2, [r3, #4]

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e9ac:	4b10      	ldr	r3, [pc, #64]	; (e9f0 <handle_dns_found+0x64>)
    e9ae:	60fb      	str	r3, [r7, #12]
    e9b0:	e00e      	b.n	e9d0 <handle_dns_found+0x44>
		if (pb->state == PS_WAIT_DNS) {
    e9b2:	68fb      	ldr	r3, [r7, #12]
    e9b4:	2252      	movs	r2, #82	; 0x52
    e9b6:	5c9b      	ldrb	r3, [r3, r2]
    e9b8:	2b01      	cmp	r3, #1
    e9ba:	d103      	bne.n	e9c4 <handle_dns_found+0x38>
			handle_start_connect(pb);
    e9bc:	68fb      	ldr	r3, [r7, #12]
    e9be:	0018      	movs	r0, r3
    e9c0:	4b0c      	ldr	r3, [pc, #48]	; (e9f4 <handle_dns_found+0x68>)
    e9c2:	4798      	blx	r3
		return;
	}

	pubnub_origin_addr.sin_addr.s_addr = hostip;

	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
    e9c4:	68fb      	ldr	r3, [r7, #12]
    e9c6:	22dc      	movs	r2, #220	; 0xdc
    e9c8:	0092      	lsls	r2, r2, #2
    e9ca:	4694      	mov	ip, r2
    e9cc:	4463      	add	r3, ip
    e9ce:	60fb      	str	r3, [r7, #12]
    e9d0:	4b09      	ldr	r3, [pc, #36]	; (e9f8 <handle_dns_found+0x6c>)
    e9d2:	68fa      	ldr	r2, [r7, #12]
    e9d4:	429a      	cmp	r2, r3
    e9d6:	d1ec      	bne.n	e9b2 <handle_dns_found+0x26>
    e9d8:	e000      	b.n	e9dc <handle_dns_found+0x50>
void handle_dns_found(char const *name, uint32_t hostip)
{
	pubnub_t *pb;

	if (0 != strcmp(name, PUBNUB_ORIGIN)) {
		return;
    e9da:	46c0      	nop			; (mov r8, r8)
	for (pb = m_aCtx; pb != m_aCtx + PUBNUB_CTX_MAX; ++pb) {
		if (pb->state == PS_WAIT_DNS) {
			handle_start_connect(pb);
		}
	}
}
    e9dc:	46bd      	mov	sp, r7
    e9de:	b004      	add	sp, #16
    e9e0:	bd80      	pop	{r7, pc}
    e9e2:	46c0      	nop			; (mov r8, r8)
    e9e4:	0001277c 	.word	0x0001277c
    e9e8:	00010421 	.word	0x00010421
    e9ec:	200047c4 	.word	0x200047c4
    e9f0:	20003ec8 	.word	0x20003ec8
    e9f4:	0000e369 	.word	0x0000e369
    e9f8:	200045a8 	.word	0x200045a8

0000e9fc <handle_tcpip>:

void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
    e9fc:	b580      	push	{r7, lr}
    e9fe:	b086      	sub	sp, #24
    ea00:	af00      	add	r7, sp, #0
    ea02:	603a      	str	r2, [r7, #0]
    ea04:	1dfb      	adds	r3, r7, #7
    ea06:	1c02      	adds	r2, r0, #0
    ea08:	701a      	strb	r2, [r3, #0]
    ea0a:	1dbb      	adds	r3, r7, #6
    ea0c:	1c0a      	adds	r2, r1, #0
    ea0e:	701a      	strb	r2, [r3, #0]
	switch (u8Msg) {
    ea10:	1dbb      	adds	r3, r7, #6
    ea12:	781b      	ldrb	r3, [r3, #0]
    ea14:	2b06      	cmp	r3, #6
    ea16:	d023      	beq.n	ea60 <handle_tcpip+0x64>
    ea18:	2b07      	cmp	r3, #7
    ea1a:	d00c      	beq.n	ea36 <handle_tcpip+0x3a>
    ea1c:	2b05      	cmp	r3, #5
    ea1e:	d000      	beq.n	ea22 <handle_tcpip+0x26>
		handle_tcpip_recv(sock, u8Msg, pvMsg);
	}
	break;

	default:
		break;
    ea20:	e034      	b.n	ea8c <handle_tcpip+0x90>
void handle_tcpip(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
	switch (u8Msg) {
	case SOCKET_MSG_CONNECT:
	{
		handle_tcpip_connect(sock, u8Msg, pvMsg);
    ea22:	683a      	ldr	r2, [r7, #0]
    ea24:	1dbb      	adds	r3, r7, #6
    ea26:	7819      	ldrb	r1, [r3, #0]
    ea28:	1dfb      	adds	r3, r7, #7
    ea2a:	781b      	ldrb	r3, [r3, #0]
    ea2c:	b25b      	sxtb	r3, r3
    ea2e:	0018      	movs	r0, r3
    ea30:	4b18      	ldr	r3, [pc, #96]	; (ea94 <handle_tcpip+0x98>)
    ea32:	4798      	blx	r3
	}
	break;
    ea34:	e02a      	b.n	ea8c <handle_tcpip+0x90>

	case SOCKET_MSG_SEND:
	{
		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_SEND);
    ea36:	1dfb      	adds	r3, r7, #7
    ea38:	781b      	ldrb	r3, [r3, #0]
    ea3a:	b25b      	sxtb	r3, r3
    ea3c:	2103      	movs	r1, #3
    ea3e:	0018      	movs	r0, r3
    ea40:	4b15      	ldr	r3, [pc, #84]	; (ea98 <handle_tcpip+0x9c>)
    ea42:	4798      	blx	r3
    ea44:	0003      	movs	r3, r0
    ea46:	617b      	str	r3, [r7, #20]

		if (pb != NULL) {
    ea48:	697b      	ldr	r3, [r7, #20]
    ea4a:	2b00      	cmp	r3, #0
    ea4c:	d01d      	beq.n	ea8a <handle_tcpip+0x8e>
			pb->state = PS_WAIT_RECV;
    ea4e:	697b      	ldr	r3, [r7, #20]
    ea50:	2252      	movs	r2, #82	; 0x52
    ea52:	2104      	movs	r1, #4
    ea54:	5499      	strb	r1, [r3, r2]
			handle_transaction(pb);
    ea56:	697b      	ldr	r3, [r7, #20]
    ea58:	0018      	movs	r0, r3
    ea5a:	4b10      	ldr	r3, [pc, #64]	; (ea9c <handle_tcpip+0xa0>)
    ea5c:	4798      	blx	r3
		}
	}
	break;
    ea5e:	e014      	b.n	ea8a <handle_tcpip+0x8e>

	case SOCKET_MSG_RECV:
	{
		tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg *)pvMsg;
    ea60:	683b      	ldr	r3, [r7, #0]
    ea62:	613b      	str	r3, [r7, #16]
			PUBNUB_PRINTF(("handle_tcpip: msg: %s\r\n", pstrRecv->pu8Buffer));
		} else {
			PUBNUB_PRINTF(("handle_tcpip: recv error!\r\n"));
		}

		pubnub_t *pb = pubnub_find_ctx(sock, PS_WAIT_RECV);
    ea64:	1dfb      	adds	r3, r7, #7
    ea66:	781b      	ldrb	r3, [r3, #0]
    ea68:	b25b      	sxtb	r3, r3
    ea6a:	2104      	movs	r1, #4
    ea6c:	0018      	movs	r0, r3
    ea6e:	4b0a      	ldr	r3, [pc, #40]	; (ea98 <handle_tcpip+0x9c>)
    ea70:	4798      	blx	r3
    ea72:	0003      	movs	r3, r0
    ea74:	60fb      	str	r3, [r7, #12]

		if (pb != NULL) {
		}

		handle_tcpip_recv(sock, u8Msg, pvMsg);
    ea76:	683a      	ldr	r2, [r7, #0]
    ea78:	1dbb      	adds	r3, r7, #6
    ea7a:	7819      	ldrb	r1, [r3, #0]
    ea7c:	1dfb      	adds	r3, r7, #7
    ea7e:	781b      	ldrb	r3, [r3, #0]
    ea80:	b25b      	sxtb	r3, r3
    ea82:	0018      	movs	r0, r3
    ea84:	4b06      	ldr	r3, [pc, #24]	; (eaa0 <handle_tcpip+0xa4>)
    ea86:	4798      	blx	r3
	}
	break;
    ea88:	e000      	b.n	ea8c <handle_tcpip+0x90>
		if (pb != NULL) {
			pb->state = PS_WAIT_RECV;
			handle_transaction(pb);
		}
	}
	break;
    ea8a:	46c0      	nop			; (mov r8, r8)
	break;

	default:
		break;
	}
}
    ea8c:	46c0      	nop			; (mov r8, r8)
    ea8e:	46bd      	mov	sp, r7
    ea90:	b006      	add	sp, #24
    ea92:	bd80      	pop	{r7, pc}
    ea94:	0000e771 	.word	0x0000e771
    ea98:	0000e309 	.word	0x0000e309
    ea9c:	0000e221 	.word	0x0000e221
    eaa0:	0000e7f5 	.word	0x0000e7f5

0000eaa4 <pubnub_get_ctx>:

pubnub_t *pubnub_get_ctx(uint8_t index)
{
    eaa4:	b590      	push	{r4, r7, lr}
    eaa6:	b083      	sub	sp, #12
    eaa8:	af00      	add	r7, sp, #0
    eaaa:	0002      	movs	r2, r0
    eaac:	1dfb      	adds	r3, r7, #7
    eaae:	701a      	strb	r2, [r3, #0]
	assert(index < PUBNUB_CTX_MAX);
    eab0:	1dfb      	adds	r3, r7, #7
    eab2:	781b      	ldrb	r3, [r3, #0]
    eab4:	2b01      	cmp	r3, #1
    eab6:	d908      	bls.n	eaca <pubnub_get_ctx+0x26>
    eab8:	4c09      	ldr	r4, [pc, #36]	; (eae0 <pubnub_get_ctx+0x3c>)
    eaba:	4a0a      	ldr	r2, [pc, #40]	; (eae4 <pubnub_get_ctx+0x40>)
    eabc:	2376      	movs	r3, #118	; 0x76
    eabe:	33ff      	adds	r3, #255	; 0xff
    eac0:	0019      	movs	r1, r3
    eac2:	4809      	ldr	r0, [pc, #36]	; (eae8 <pubnub_get_ctx+0x44>)
    eac4:	0023      	movs	r3, r4
    eac6:	4c09      	ldr	r4, [pc, #36]	; (eaec <pubnub_get_ctx+0x48>)
    eac8:	47a0      	blx	r4
	return m_aCtx + index;
    eaca:	1dfb      	adds	r3, r7, #7
    eacc:	781b      	ldrb	r3, [r3, #0]
    eace:	22dc      	movs	r2, #220	; 0xdc
    ead0:	0092      	lsls	r2, r2, #2
    ead2:	435a      	muls	r2, r3
    ead4:	4b06      	ldr	r3, [pc, #24]	; (eaf0 <pubnub_get_ctx+0x4c>)
    ead6:	18d3      	adds	r3, r2, r3
}
    ead8:	0018      	movs	r0, r3
    eada:	46bd      	mov	sp, r7
    eadc:	b003      	add	sp, #12
    eade:	bd90      	pop	{r4, r7, pc}
    eae0:	000128a4 	.word	0x000128a4
    eae4:	000129a0 	.word	0x000129a0
    eae8:	000127f8 	.word	0x000127f8
    eaec:	0000fa51 	.word	0x0000fa51
    eaf0:	20003ec8 	.word	0x20003ec8

0000eaf4 <pubnub_init>:

void pubnub_init(pubnub_t *pb, const char *publish_key, const char *subscribe_key)
{
    eaf4:	b590      	push	{r4, r7, lr}
    eaf6:	b085      	sub	sp, #20
    eaf8:	af00      	add	r7, sp, #0
    eafa:	60f8      	str	r0, [r7, #12]
    eafc:	60b9      	str	r1, [r7, #8]
    eafe:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    eb00:	68fb      	ldr	r3, [r7, #12]
    eb02:	0018      	movs	r0, r3
    eb04:	4b17      	ldr	r3, [pc, #92]	; (eb64 <pubnub_init+0x70>)
    eb06:	4798      	blx	r3
    eb08:	1e03      	subs	r3, r0, #0
    eb0a:	d108      	bne.n	eb1e <pubnub_init+0x2a>
    eb0c:	4c16      	ldr	r4, [pc, #88]	; (eb68 <pubnub_init+0x74>)
    eb0e:	4a17      	ldr	r2, [pc, #92]	; (eb6c <pubnub_init+0x78>)
    eb10:	237c      	movs	r3, #124	; 0x7c
    eb12:	33ff      	adds	r3, #255	; 0xff
    eb14:	0019      	movs	r1, r3
    eb16:	4816      	ldr	r0, [pc, #88]	; (eb70 <pubnub_init+0x7c>)
    eb18:	0023      	movs	r3, r4
    eb1a:	4c16      	ldr	r4, [pc, #88]	; (eb74 <pubnub_init+0x80>)
    eb1c:	47a0      	blx	r4

	pb->publish_key = publish_key;
    eb1e:	68fb      	ldr	r3, [r7, #12]
    eb20:	68ba      	ldr	r2, [r7, #8]
    eb22:	601a      	str	r2, [r3, #0]
	pb->subscribe_key = subscribe_key;
    eb24:	68fb      	ldr	r3, [r7, #12]
    eb26:	687a      	ldr	r2, [r7, #4]
    eb28:	605a      	str	r2, [r3, #4]
	pb->timetoken[0] = '0';
    eb2a:	68fb      	ldr	r3, [r7, #12]
    eb2c:	2230      	movs	r2, #48	; 0x30
    eb2e:	741a      	strb	r2, [r3, #16]
	pb->timetoken[1] = '\0';
    eb30:	68fb      	ldr	r3, [r7, #12]
    eb32:	2200      	movs	r2, #0
    eb34:	745a      	strb	r2, [r3, #17]
	pb->uuid = pb->auth = NULL;
    eb36:	68fb      	ldr	r3, [r7, #12]
    eb38:	2200      	movs	r2, #0
    eb3a:	60da      	str	r2, [r3, #12]
    eb3c:	68fb      	ldr	r3, [r7, #12]
    eb3e:	68da      	ldr	r2, [r3, #12]
    eb40:	68fb      	ldr	r3, [r7, #12]
    eb42:	609a      	str	r2, [r3, #8]
	pb->tcp_socket = -1;
    eb44:	68fb      	ldr	r3, [r7, #12]
    eb46:	2253      	movs	r2, #83	; 0x53
    eb48:	21ff      	movs	r1, #255	; 0xff
    eb4a:	5499      	strb	r1, [r3, r2]
	pb->state = PS_IDLE;
    eb4c:	68fb      	ldr	r3, [r7, #12]
    eb4e:	2252      	movs	r2, #82	; 0x52
    eb50:	2100      	movs	r1, #0
    eb52:	5499      	strb	r1, [r3, r2]
	pb->last_result = PNR_IO_ERROR;
    eb54:	68fb      	ldr	r3, [r7, #12]
    eb56:	2250      	movs	r2, #80	; 0x50
    eb58:	2102      	movs	r1, #2
    eb5a:	5499      	strb	r1, [r3, r2]
}
    eb5c:	46c0      	nop			; (mov r8, r8)
    eb5e:	46bd      	mov	sp, r7
    eb60:	b005      	add	sp, #20
    eb62:	bd90      	pop	{r4, r7, pc}
    eb64:	0000e2d1 	.word	0x0000e2d1
    eb68:	000127e4 	.word	0x000127e4
    eb6c:	000129b0 	.word	0x000129b0
    eb70:	000127f8 	.word	0x000127f8
    eb74:	0000fa51 	.word	0x0000fa51

0000eb78 <pubnub_publish>:

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
    eb78:	b5b0      	push	{r4, r5, r7, lr}
    eb7a:	b08a      	sub	sp, #40	; 0x28
    eb7c:	af02      	add	r7, sp, #8
    eb7e:	60f8      	str	r0, [r7, #12]
    eb80:	60b9      	str	r1, [r7, #8]
    eb82:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    eb84:	68fb      	ldr	r3, [r7, #12]
    eb86:	0018      	movs	r0, r3
    eb88:	4b6c      	ldr	r3, [pc, #432]	; (ed3c <pubnub_publish+0x1c4>)
    eb8a:	4798      	blx	r3
    eb8c:	1e03      	subs	r3, r0, #0
    eb8e:	d108      	bne.n	eba2 <pubnub_publish+0x2a>
    eb90:	4c6b      	ldr	r4, [pc, #428]	; (ed40 <pubnub_publish+0x1c8>)
    eb92:	4a6c      	ldr	r2, [pc, #432]	; (ed44 <pubnub_publish+0x1cc>)
    eb94:	238a      	movs	r3, #138	; 0x8a
    eb96:	33ff      	adds	r3, #255	; 0xff
    eb98:	0019      	movs	r1, r3
    eb9a:	486b      	ldr	r0, [pc, #428]	; (ed48 <pubnub_publish+0x1d0>)
    eb9c:	0023      	movs	r3, r4
    eb9e:	4c6b      	ldr	r4, [pc, #428]	; (ed4c <pubnub_publish+0x1d4>)
    eba0:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    eba2:	68fb      	ldr	r3, [r7, #12]
    eba4:	2252      	movs	r2, #82	; 0x52
    eba6:	5c9b      	ldrb	r3, [r3, r2]
    eba8:	2b00      	cmp	r3, #0
    ebaa:	d001      	beq.n	ebb0 <pubnub_publish+0x38>
		return false;
    ebac:	2300      	movs	r3, #0
    ebae:	e0c0      	b.n	ed32 <pubnub_publish+0x1ba>
	}

	pb->trans = PBTT_PUBLISH;
    ebb0:	68fb      	ldr	r3, [r7, #12]
    ebb2:	2251      	movs	r2, #81	; 0x51
    ebb4:	2102      	movs	r1, #2
    ebb6:	5499      	strb	r1, [r3, r2]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
    ebb8:	68fb      	ldr	r3, [r7, #12]
    ebba:	3354      	adds	r3, #84	; 0x54
    ebbc:	0018      	movs	r0, r3
    ebbe:	68fb      	ldr	r3, [r7, #12]
    ebc0:	681d      	ldr	r5, [r3, #0]
    ebc2:	68fb      	ldr	r3, [r7, #12]
    ebc4:	685b      	ldr	r3, [r3, #4]
    ebc6:	4c62      	ldr	r4, [pc, #392]	; (ed50 <pubnub_publish+0x1d8>)
    ebc8:	2280      	movs	r2, #128	; 0x80
    ebca:	0051      	lsls	r1, r2, #1
    ebcc:	68ba      	ldr	r2, [r7, #8]
    ebce:	9201      	str	r2, [sp, #4]
    ebd0:	9300      	str	r3, [sp, #0]
    ebd2:	002b      	movs	r3, r5
    ebd4:	0022      	movs	r2, r4
    ebd6:	4c5f      	ldr	r4, [pc, #380]	; (ed54 <pubnub_publish+0x1dc>)
    ebd8:	47a0      	blx	r4
    ebda:	0003      	movs	r3, r0
    ebdc:	0019      	movs	r1, r3
    ebde:	68fa      	ldr	r2, [r7, #12]
    ebe0:	23ac      	movs	r3, #172	; 0xac
    ebe2:	005b      	lsls	r3, r3, #1
    ebe4:	50d1      	str	r1, [r2, r3]

	const char *pmessage = message;
    ebe6:	687b      	ldr	r3, [r7, #4]
    ebe8:	61fb      	str	r3, [r7, #28]

	while (pmessage[0]) {
    ebea:	e08a      	b.n	ed02 <pubnub_publish+0x18a>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    ebec:	4a5a      	ldr	r2, [pc, #360]	; (ed58 <pubnub_publish+0x1e0>)
    ebee:	69fb      	ldr	r3, [r7, #28]
    ebf0:	0011      	movs	r1, r2
    ebf2:	0018      	movs	r0, r3
    ebf4:	4b59      	ldr	r3, [pc, #356]	; (ed5c <pubnub_publish+0x1e4>)
    ebf6:	4798      	blx	r3
    ebf8:	0003      	movs	r3, r0
    ebfa:	61bb      	str	r3, [r7, #24]
		if (okspan > 0) {
    ebfc:	69bb      	ldr	r3, [r7, #24]
    ebfe:	2b00      	cmp	r3, #0
    ec00:	d034      	beq.n	ec6c <pubnub_publish+0xf4>
			if (okspan > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    ec02:	68fa      	ldr	r2, [r7, #12]
    ec04:	23ac      	movs	r3, #172	; 0xac
    ec06:	005b      	lsls	r3, r3, #1
    ec08:	58d3      	ldr	r3, [r2, r3]
    ec0a:	22ff      	movs	r2, #255	; 0xff
    ec0c:	1ad2      	subs	r2, r2, r3
    ec0e:	69bb      	ldr	r3, [r7, #24]
    ec10:	429a      	cmp	r2, r3
    ec12:	d206      	bcs.n	ec22 <pubnub_publish+0xaa>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    ec14:	68fa      	ldr	r2, [r7, #12]
    ec16:	23ac      	movs	r3, #172	; 0xac
    ec18:	005b      	lsls	r3, r3, #1
    ec1a:	2100      	movs	r1, #0
    ec1c:	50d1      	str	r1, [r2, r3]
				return false;
    ec1e:	2300      	movs	r3, #0
    ec20:	e087      	b.n	ed32 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    ec22:	68fb      	ldr	r3, [r7, #12]
    ec24:	3354      	adds	r3, #84	; 0x54
    ec26:	001a      	movs	r2, r3
    ec28:	68f9      	ldr	r1, [r7, #12]
    ec2a:	23ac      	movs	r3, #172	; 0xac
    ec2c:	005b      	lsls	r3, r3, #1
    ec2e:	58cb      	ldr	r3, [r1, r3]
    ec30:	18d3      	adds	r3, r2, r3
    ec32:	69ba      	ldr	r2, [r7, #24]
    ec34:	69f9      	ldr	r1, [r7, #28]
    ec36:	0018      	movs	r0, r3
    ec38:	4b49      	ldr	r3, [pc, #292]	; (ed60 <pubnub_publish+0x1e8>)
    ec3a:	4798      	blx	r3
			pb->http_buf_len += okspan;
    ec3c:	68fa      	ldr	r2, [r7, #12]
    ec3e:	23ac      	movs	r3, #172	; 0xac
    ec40:	005b      	lsls	r3, r3, #1
    ec42:	58d2      	ldr	r2, [r2, r3]
    ec44:	69bb      	ldr	r3, [r7, #24]
    ec46:	18d1      	adds	r1, r2, r3
    ec48:	68fa      	ldr	r2, [r7, #12]
    ec4a:	23ac      	movs	r3, #172	; 0xac
    ec4c:	005b      	lsls	r3, r3, #1
    ec4e:	50d1      	str	r1, [r2, r3]
			pb->http_buf.url[pb->http_buf_len] = 0;
    ec50:	68fa      	ldr	r2, [r7, #12]
    ec52:	23ac      	movs	r3, #172	; 0xac
    ec54:	005b      	lsls	r3, r3, #1
    ec56:	58d3      	ldr	r3, [r2, r3]
    ec58:	68fa      	ldr	r2, [r7, #12]
    ec5a:	2154      	movs	r1, #84	; 0x54
    ec5c:	18d3      	adds	r3, r2, r3
    ec5e:	185b      	adds	r3, r3, r1
    ec60:	2200      	movs	r2, #0
    ec62:	701a      	strb	r2, [r3, #0]
			pmessage += okspan;
    ec64:	69fa      	ldr	r2, [r7, #28]
    ec66:	69bb      	ldr	r3, [r7, #24]
    ec68:	18d3      	adds	r3, r2, r3
    ec6a:	61fb      	str	r3, [r7, #28]
		}

		if (pmessage[0]) {
    ec6c:	69fb      	ldr	r3, [r7, #28]
    ec6e:	781b      	ldrb	r3, [r3, #0]
    ec70:	2b00      	cmp	r3, #0
    ec72:	d046      	beq.n	ed02 <pubnub_publish+0x18a>
			/* %-encode a non-ok character. */
			char enc[4] = {'%', };
    ec74:	2314      	movs	r3, #20
    ec76:	18fb      	adds	r3, r7, r3
    ec78:	2200      	movs	r2, #0
    ec7a:	601a      	str	r2, [r3, #0]
    ec7c:	2314      	movs	r3, #20
    ec7e:	18fb      	adds	r3, r7, r3
    ec80:	2225      	movs	r2, #37	; 0x25
    ec82:	701a      	strb	r2, [r3, #0]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
    ec84:	69fb      	ldr	r3, [r7, #28]
    ec86:	781b      	ldrb	r3, [r3, #0]
    ec88:	091b      	lsrs	r3, r3, #4
    ec8a:	b2db      	uxtb	r3, r3
    ec8c:	001a      	movs	r2, r3
    ec8e:	4b35      	ldr	r3, [pc, #212]	; (ed64 <pubnub_publish+0x1ec>)
    ec90:	5c9a      	ldrb	r2, [r3, r2]
    ec92:	2314      	movs	r3, #20
    ec94:	18fb      	adds	r3, r7, r3
    ec96:	705a      	strb	r2, [r3, #1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
    ec98:	69fb      	ldr	r3, [r7, #28]
    ec9a:	781b      	ldrb	r3, [r3, #0]
    ec9c:	001a      	movs	r2, r3
    ec9e:	230f      	movs	r3, #15
    eca0:	4013      	ands	r3, r2
    eca2:	4a30      	ldr	r2, [pc, #192]	; (ed64 <pubnub_publish+0x1ec>)
    eca4:	5cd2      	ldrb	r2, [r2, r3]
    eca6:	2314      	movs	r3, #20
    eca8:	18fb      	adds	r3, r7, r3
    ecaa:	709a      	strb	r2, [r3, #2]
			if (3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    ecac:	68fa      	ldr	r2, [r7, #12]
    ecae:	23ac      	movs	r3, #172	; 0xac
    ecb0:	005b      	lsls	r3, r3, #1
    ecb2:	58d3      	ldr	r3, [r2, r3]
    ecb4:	22ff      	movs	r2, #255	; 0xff
    ecb6:	1ad3      	subs	r3, r2, r3
    ecb8:	2b02      	cmp	r3, #2
    ecba:	d806      	bhi.n	ecca <pubnub_publish+0x152>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    ecbc:	68fa      	ldr	r2, [r7, #12]
    ecbe:	23ac      	movs	r3, #172	; 0xac
    ecc0:	005b      	lsls	r3, r3, #1
    ecc2:	2100      	movs	r1, #0
    ecc4:	50d1      	str	r1, [r2, r3]
				return false;
    ecc6:	2300      	movs	r3, #0
    ecc8:	e033      	b.n	ed32 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
    ecca:	68fb      	ldr	r3, [r7, #12]
    eccc:	3354      	adds	r3, #84	; 0x54
    ecce:	001a      	movs	r2, r3
    ecd0:	68f9      	ldr	r1, [r7, #12]
    ecd2:	23ac      	movs	r3, #172	; 0xac
    ecd4:	005b      	lsls	r3, r3, #1
    ecd6:	58cb      	ldr	r3, [r1, r3]
    ecd8:	18d2      	adds	r2, r2, r3
    ecda:	2314      	movs	r3, #20
    ecdc:	18fb      	adds	r3, r7, r3
    ecde:	0010      	movs	r0, r2
    ece0:	0019      	movs	r1, r3
    ece2:	2304      	movs	r3, #4
    ece4:	001a      	movs	r2, r3
    ece6:	4b1e      	ldr	r3, [pc, #120]	; (ed60 <pubnub_publish+0x1e8>)
    ece8:	4798      	blx	r3
			pb->http_buf_len += 3;
    ecea:	68fa      	ldr	r2, [r7, #12]
    ecec:	23ac      	movs	r3, #172	; 0xac
    ecee:	005b      	lsls	r3, r3, #1
    ecf0:	58d3      	ldr	r3, [r2, r3]
    ecf2:	1cd9      	adds	r1, r3, #3
    ecf4:	68fa      	ldr	r2, [r7, #12]
    ecf6:	23ac      	movs	r3, #172	; 0xac
    ecf8:	005b      	lsls	r3, r3, #1
    ecfa:	50d1      	str	r1, [r2, r3]
			++pmessage;
    ecfc:	69fb      	ldr	r3, [r7, #28]
    ecfe:	3301      	adds	r3, #1
    ed00:	61fb      	str	r3, [r7, #28]
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);

	const char *pmessage = message;

	while (pmessage[0]) {
    ed02:	69fb      	ldr	r3, [r7, #28]
    ed04:	781b      	ldrb	r3, [r3, #0]
    ed06:	2b00      	cmp	r3, #0
    ed08:	d000      	beq.n	ed0c <pubnub_publish+0x194>
    ed0a:	e76f      	b.n	ebec <pubnub_publish+0x74>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}

	if (pb->last_result == PNR_OK) {
    ed0c:	68fb      	ldr	r3, [r7, #12]
    ed0e:	2250      	movs	r2, #80	; 0x50
    ed10:	5c9b      	ldrb	r3, [r3, r2]
    ed12:	2b00      	cmp	r3, #0
    ed14:	d108      	bne.n	ed28 <pubnub_publish+0x1b0>
		pb->state = PS_WAIT_SEND;
    ed16:	68fb      	ldr	r3, [r7, #12]
    ed18:	2252      	movs	r2, #82	; 0x52
    ed1a:	2103      	movs	r1, #3
    ed1c:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    ed1e:	68fb      	ldr	r3, [r7, #12]
    ed20:	0018      	movs	r0, r3
    ed22:	4b11      	ldr	r3, [pc, #68]	; (ed68 <pubnub_publish+0x1f0>)
    ed24:	4798      	blx	r3
    ed26:	e003      	b.n	ed30 <pubnub_publish+0x1b8>
	} else {
		handle_start_connect(pb);
    ed28:	68fb      	ldr	r3, [r7, #12]
    ed2a:	0018      	movs	r0, r3
    ed2c:	4b0f      	ldr	r3, [pc, #60]	; (ed6c <pubnub_publish+0x1f4>)
    ed2e:	4798      	blx	r3
	}

	return true;
    ed30:	2301      	movs	r3, #1
}
    ed32:	0018      	movs	r0, r3
    ed34:	46bd      	mov	sp, r7
    ed36:	b008      	add	sp, #32
    ed38:	bdb0      	pop	{r4, r5, r7, pc}
    ed3a:	46c0      	nop			; (mov r8, r8)
    ed3c:	0000e2d1 	.word	0x0000e2d1
    ed40:	000127e4 	.word	0x000127e4
    ed44:	000129bc 	.word	0x000129bc
    ed48:	000127f8 	.word	0x000127f8
    ed4c:	0000fa51 	.word	0x0000fa51
    ed50:	000128bc 	.word	0x000128bc
    ed54:	00010379 	.word	0x00010379
    ed58:	000128d4 	.word	0x000128d4
    ed5c:	00010477 	.word	0x00010477
    ed60:	0000fb09 	.word	0x0000fb09
    ed64:	00012920 	.word	0x00012920
    ed68:	0000e221 	.word	0x0000e221
    ed6c:	0000e369 	.word	0x0000e369

0000ed70 <pubnub_subscribe>:

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
    ed70:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed72:	4657      	mov	r7, sl
    ed74:	464e      	mov	r6, r9
    ed76:	4645      	mov	r5, r8
    ed78:	b4e0      	push	{r5, r6, r7}
    ed7a:	b08c      	sub	sp, #48	; 0x30
    ed7c:	af0a      	add	r7, sp, #40	; 0x28
    ed7e:	6078      	str	r0, [r7, #4]
    ed80:	6039      	str	r1, [r7, #0]
	assert(valid_ctx_prt(pb));
    ed82:	687b      	ldr	r3, [r7, #4]
    ed84:	0018      	movs	r0, r3
    ed86:	4b4a      	ldr	r3, [pc, #296]	; (eeb0 <pubnub_subscribe+0x140>)
    ed88:	4798      	blx	r3
    ed8a:	1e03      	subs	r3, r0, #0
    ed8c:	d108      	bne.n	eda0 <pubnub_subscribe+0x30>
    ed8e:	4c49      	ldr	r4, [pc, #292]	; (eeb4 <pubnub_subscribe+0x144>)
    ed90:	4a49      	ldr	r2, [pc, #292]	; (eeb8 <pubnub_subscribe+0x148>)
    ed92:	23c2      	movs	r3, #194	; 0xc2
    ed94:	33ff      	adds	r3, #255	; 0xff
    ed96:	0019      	movs	r1, r3
    ed98:	4848      	ldr	r0, [pc, #288]	; (eebc <pubnub_subscribe+0x14c>)
    ed9a:	0023      	movs	r3, r4
    ed9c:	4c48      	ldr	r4, [pc, #288]	; (eec0 <pubnub_subscribe+0x150>)
    ed9e:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    eda0:	687b      	ldr	r3, [r7, #4]
    eda2:	2252      	movs	r2, #82	; 0x52
    eda4:	5c9b      	ldrb	r3, [r3, r2]
    eda6:	2b00      	cmp	r3, #0
    eda8:	d001      	beq.n	edae <pubnub_subscribe+0x3e>
		return false;
    edaa:	2300      	movs	r3, #0
    edac:	e078      	b.n	eea0 <pubnub_subscribe+0x130>
	}

	pb->trans = PBTT_SUBSCRIBE;
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	2251      	movs	r2, #81	; 0x51
    edb2:	2101      	movs	r1, #1
    edb4:	5499      	strb	r1, [r3, r2]

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);
    edb6:	687b      	ldr	r3, [r7, #4]
    edb8:	3366      	adds	r3, #102	; 0x66
    edba:	33ff      	adds	r3, #255	; 0xff
    edbc:	0018      	movs	r0, r3
    edbe:	2380      	movs	r3, #128	; 0x80
    edc0:	009b      	lsls	r3, r3, #2
    edc2:	001a      	movs	r2, r3
    edc4:	2100      	movs	r1, #0
    edc6:	4b3f      	ldr	r3, [pc, #252]	; (eec4 <pubnub_subscribe+0x154>)
    edc8:	4798      	blx	r3

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    edca:	687b      	ldr	r3, [r7, #4]
    edcc:	2254      	movs	r2, #84	; 0x54
    edce:	4694      	mov	ip, r2
    edd0:	449c      	add	ip, r3
    edd2:	687b      	ldr	r3, [r7, #4]
    edd4:	685b      	ldr	r3, [r3, #4]
    edd6:	469a      	mov	sl, r3
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
    edd8:	687b      	ldr	r3, [r7, #4]
    edda:	3310      	adds	r3, #16
    eddc:	001d      	movs	r5, r3
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    edde:	687b      	ldr	r3, [r7, #4]
    ede0:	689b      	ldr	r3, [r3, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ede2:	2b00      	cmp	r3, #0
    ede4:	d001      	beq.n	edea <pubnub_subscribe+0x7a>
    ede6:	4b38      	ldr	r3, [pc, #224]	; (eec8 <pubnub_subscribe+0x158>)
    ede8:	e000      	b.n	edec <pubnub_subscribe+0x7c>
    edea:	4b38      	ldr	r3, [pc, #224]	; (eecc <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    edec:	687a      	ldr	r2, [r7, #4]
    edee:	6892      	ldr	r2, [r2, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    edf0:	2a00      	cmp	r2, #0
    edf2:	d002      	beq.n	edfa <pubnub_subscribe+0x8a>
    edf4:	687a      	ldr	r2, [r7, #4]
    edf6:	6892      	ldr	r2, [r2, #8]
    edf8:	e000      	b.n	edfc <pubnub_subscribe+0x8c>
    edfa:	4a34      	ldr	r2, [pc, #208]	; (eecc <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    edfc:	6879      	ldr	r1, [r7, #4]
    edfe:	6889      	ldr	r1, [r1, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ee00:	2900      	cmp	r1, #0
    ee02:	d005      	beq.n	ee10 <pubnub_subscribe+0xa0>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    ee04:	6879      	ldr	r1, [r7, #4]
    ee06:	68c9      	ldr	r1, [r1, #12]
    ee08:	2900      	cmp	r1, #0
    ee0a:	d001      	beq.n	ee10 <pubnub_subscribe+0xa0>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ee0c:	4930      	ldr	r1, [pc, #192]	; (eed0 <pubnub_subscribe+0x160>)
    ee0e:	e000      	b.n	ee12 <pubnub_subscribe+0xa2>
    ee10:	492e      	ldr	r1, [pc, #184]	; (eecc <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ee12:	6878      	ldr	r0, [r7, #4]
    ee14:	6880      	ldr	r0, [r0, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ee16:	2800      	cmp	r0, #0
    ee18:	d005      	beq.n	ee26 <pubnub_subscribe+0xb6>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ee1a:	6878      	ldr	r0, [r7, #4]
    ee1c:	68c0      	ldr	r0, [r0, #12]
    ee1e:	2800      	cmp	r0, #0
    ee20:	d001      	beq.n	ee26 <pubnub_subscribe+0xb6>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ee22:	482c      	ldr	r0, [pc, #176]	; (eed4 <pubnub_subscribe+0x164>)
    ee24:	e000      	b.n	ee28 <pubnub_subscribe+0xb8>
    ee26:	4829      	ldr	r0, [pc, #164]	; (eecc <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ee28:	687c      	ldr	r4, [r7, #4]
    ee2a:	68a4      	ldr	r4, [r4, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ee2c:	2c00      	cmp	r4, #0
    ee2e:	d006      	beq.n	ee3e <pubnub_subscribe+0xce>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    ee30:	687c      	ldr	r4, [r7, #4]
    ee32:	68e4      	ldr	r4, [r4, #12]
    ee34:	2c00      	cmp	r4, #0
    ee36:	d002      	beq.n	ee3e <pubnub_subscribe+0xce>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    ee38:	687c      	ldr	r4, [r7, #4]
    ee3a:	68e4      	ldr	r4, [r4, #12]
    ee3c:	e000      	b.n	ee40 <pubnub_subscribe+0xd0>
    ee3e:	4c23      	ldr	r4, [pc, #140]	; (eecc <pubnub_subscribe+0x15c>)
    ee40:	4e25      	ldr	r6, [pc, #148]	; (eed8 <pubnub_subscribe+0x168>)
    ee42:	46b1      	mov	r9, r6
    ee44:	2680      	movs	r6, #128	; 0x80
    ee46:	0076      	lsls	r6, r6, #1
    ee48:	46b0      	mov	r8, r6
    ee4a:	4e24      	ldr	r6, [pc, #144]	; (eedc <pubnub_subscribe+0x16c>)
    ee4c:	9608      	str	r6, [sp, #32]
    ee4e:	4e1f      	ldr	r6, [pc, #124]	; (eecc <pubnub_subscribe+0x15c>)
    ee50:	9607      	str	r6, [sp, #28]
    ee52:	9406      	str	r4, [sp, #24]
    ee54:	9005      	str	r0, [sp, #20]
    ee56:	9104      	str	r1, [sp, #16]
    ee58:	9203      	str	r2, [sp, #12]
    ee5a:	9302      	str	r3, [sp, #8]
    ee5c:	9501      	str	r5, [sp, #4]
    ee5e:	683b      	ldr	r3, [r7, #0]
    ee60:	9300      	str	r3, [sp, #0]
    ee62:	4653      	mov	r3, sl
    ee64:	464a      	mov	r2, r9
    ee66:	4641      	mov	r1, r8
    ee68:	4660      	mov	r0, ip
    ee6a:	4c1d      	ldr	r4, [pc, #116]	; (eee0 <pubnub_subscribe+0x170>)
    ee6c:	47a0      	blx	r4
    ee6e:	0003      	movs	r3, r0
    ee70:	0019      	movs	r1, r3
    ee72:	687a      	ldr	r2, [r7, #4]
    ee74:	23ac      	movs	r3, #172	; 0xac
    ee76:	005b      	lsls	r3, r3, #1
    ee78:	50d1      	str	r1, [r2, r3]
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
			"", "0.1");

	if (pb->last_result == PNR_OK) {
    ee7a:	687b      	ldr	r3, [r7, #4]
    ee7c:	2250      	movs	r2, #80	; 0x50
    ee7e:	5c9b      	ldrb	r3, [r3, r2]
    ee80:	2b00      	cmp	r3, #0
    ee82:	d108      	bne.n	ee96 <pubnub_subscribe+0x126>
		pb->state = PS_WAIT_SEND;
    ee84:	687b      	ldr	r3, [r7, #4]
    ee86:	2252      	movs	r2, #82	; 0x52
    ee88:	2103      	movs	r1, #3
    ee8a:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    ee8c:	687b      	ldr	r3, [r7, #4]
    ee8e:	0018      	movs	r0, r3
    ee90:	4b14      	ldr	r3, [pc, #80]	; (eee4 <pubnub_subscribe+0x174>)
    ee92:	4798      	blx	r3
    ee94:	e003      	b.n	ee9e <pubnub_subscribe+0x12e>
	} else {
		handle_start_connect(pb);
    ee96:	687b      	ldr	r3, [r7, #4]
    ee98:	0018      	movs	r0, r3
    ee9a:	4b13      	ldr	r3, [pc, #76]	; (eee8 <pubnub_subscribe+0x178>)
    ee9c:	4798      	blx	r3
	}

	return true;
    ee9e:	2301      	movs	r3, #1
}
    eea0:	0018      	movs	r0, r3
    eea2:	46bd      	mov	sp, r7
    eea4:	b002      	add	sp, #8
    eea6:	bc1c      	pop	{r2, r3, r4}
    eea8:	4690      	mov	r8, r2
    eeaa:	4699      	mov	r9, r3
    eeac:	46a2      	mov	sl, r4
    eeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eeb0:	0000e2d1 	.word	0x0000e2d1
    eeb4:	000127e4 	.word	0x000127e4
    eeb8:	000129cc 	.word	0x000129cc
    eebc:	000127f8 	.word	0x000127f8
    eec0:	0000fa51 	.word	0x0000fa51
    eec4:	0000fb1b 	.word	0x0000fb1b
    eec8:	00012934 	.word	0x00012934
    eecc:	0001293c 	.word	0x0001293c
    eed0:	00012940 	.word	0x00012940
    eed4:	00012944 	.word	0x00012944
    eed8:	0001294c 	.word	0x0001294c
    eedc:	00012984 	.word	0x00012984
    eee0:	00010379 	.word	0x00010379
    eee4:	0000e221 	.word	0x0000e221
    eee8:	0000e369 	.word	0x0000e369

0000eeec <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
    eeec:	b590      	push	{r4, r7, lr}
    eeee:	b085      	sub	sp, #20
    eef0:	af00      	add	r7, sp, #0
    eef2:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    eef4:	687b      	ldr	r3, [r7, #4]
    eef6:	0018      	movs	r0, r3
    eef8:	4b20      	ldr	r3, [pc, #128]	; (ef7c <pubnub_get+0x90>)
    eefa:	4798      	blx	r3
    eefc:	1e03      	subs	r3, r0, #0
    eefe:	d108      	bne.n	ef12 <pubnub_get+0x26>
    ef00:	4c1f      	ldr	r4, [pc, #124]	; (ef80 <pubnub_get+0x94>)
    ef02:	4a20      	ldr	r2, [pc, #128]	; (ef84 <pubnub_get+0x98>)
    ef04:	23e0      	movs	r3, #224	; 0xe0
    ef06:	33ff      	adds	r3, #255	; 0xff
    ef08:	0019      	movs	r1, r3
    ef0a:	481f      	ldr	r0, [pc, #124]	; (ef88 <pubnub_get+0x9c>)
    ef0c:	0023      	movs	r3, r4
    ef0e:	4c1f      	ldr	r4, [pc, #124]	; (ef8c <pubnub_get+0xa0>)
    ef10:	47a0      	blx	r4

	if (pb->msg_ofs < pb->msg_end) {
    ef12:	687b      	ldr	r3, [r7, #4]
    ef14:	4a1e      	ldr	r2, [pc, #120]	; (ef90 <pubnub_get+0xa4>)
    ef16:	5a9a      	ldrh	r2, [r3, r2]
    ef18:	6879      	ldr	r1, [r7, #4]
    ef1a:	23da      	movs	r3, #218	; 0xda
    ef1c:	009b      	lsls	r3, r3, #2
    ef1e:	5acb      	ldrh	r3, [r1, r3]
    ef20:	429a      	cmp	r2, r3
    ef22:	d225      	bcs.n	ef70 <pubnub_get+0x84>
		char const *rslt = pb->http_reply + pb->msg_ofs;
    ef24:	687b      	ldr	r3, [r7, #4]
    ef26:	3366      	adds	r3, #102	; 0x66
    ef28:	33ff      	adds	r3, #255	; 0xff
    ef2a:	687a      	ldr	r2, [r7, #4]
    ef2c:	4918      	ldr	r1, [pc, #96]	; (ef90 <pubnub_get+0xa4>)
    ef2e:	5a52      	ldrh	r2, [r2, r1]
    ef30:	189b      	adds	r3, r3, r2
    ef32:	60fb      	str	r3, [r7, #12]
		pb->msg_ofs += strlen(rslt);
    ef34:	687b      	ldr	r3, [r7, #4]
    ef36:	4a16      	ldr	r2, [pc, #88]	; (ef90 <pubnub_get+0xa4>)
    ef38:	5a9c      	ldrh	r4, [r3, r2]
    ef3a:	68fb      	ldr	r3, [r7, #12]
    ef3c:	0018      	movs	r0, r3
    ef3e:	4b15      	ldr	r3, [pc, #84]	; (ef94 <pubnub_get+0xa8>)
    ef40:	4798      	blx	r3
    ef42:	0003      	movs	r3, r0
    ef44:	b29b      	uxth	r3, r3
    ef46:	18e3      	adds	r3, r4, r3
    ef48:	b299      	uxth	r1, r3
    ef4a:	687b      	ldr	r3, [r7, #4]
    ef4c:	4a10      	ldr	r2, [pc, #64]	; (ef90 <pubnub_get+0xa4>)
    ef4e:	5299      	strh	r1, [r3, r2]

		if (pb->msg_ofs++ <= pb->msg_end) {
    ef50:	687b      	ldr	r3, [r7, #4]
    ef52:	4a0f      	ldr	r2, [pc, #60]	; (ef90 <pubnub_get+0xa4>)
    ef54:	5a9b      	ldrh	r3, [r3, r2]
    ef56:	1c5a      	adds	r2, r3, #1
    ef58:	b290      	uxth	r0, r2
    ef5a:	687a      	ldr	r2, [r7, #4]
    ef5c:	490c      	ldr	r1, [pc, #48]	; (ef90 <pubnub_get+0xa4>)
    ef5e:	5250      	strh	r0, [r2, r1]
    ef60:	6879      	ldr	r1, [r7, #4]
    ef62:	22da      	movs	r2, #218	; 0xda
    ef64:	0092      	lsls	r2, r2, #2
    ef66:	5a8a      	ldrh	r2, [r1, r2]
    ef68:	4293      	cmp	r3, r2
    ef6a:	d801      	bhi.n	ef70 <pubnub_get+0x84>
			return rslt;
    ef6c:	68fb      	ldr	r3, [r7, #12]
    ef6e:	e000      	b.n	ef72 <pubnub_get+0x86>
		}
	}

	return NULL;
    ef70:	2300      	movs	r3, #0
}
    ef72:	0018      	movs	r0, r3
    ef74:	46bd      	mov	sp, r7
    ef76:	b005      	add	sp, #20
    ef78:	bd90      	pop	{r4, r7, pc}
    ef7a:	46c0      	nop			; (mov r8, r8)
    ef7c:	0000e2d1 	.word	0x0000e2d1
    ef80:	000127e4 	.word	0x000127e4
    ef84:	000129e0 	.word	0x000129e0
    ef88:	000127f8 	.word	0x000127f8
    ef8c:	0000fa51 	.word	0x0000fa51
    ef90:	00000366 	.word	0x00000366
    ef94:	00010445 	.word	0x00010445

0000ef98 <__aeabi_uidiv>:
    ef98:	2200      	movs	r2, #0
    ef9a:	0843      	lsrs	r3, r0, #1
    ef9c:	428b      	cmp	r3, r1
    ef9e:	d374      	bcc.n	f08a <__aeabi_uidiv+0xf2>
    efa0:	0903      	lsrs	r3, r0, #4
    efa2:	428b      	cmp	r3, r1
    efa4:	d35f      	bcc.n	f066 <__aeabi_uidiv+0xce>
    efa6:	0a03      	lsrs	r3, r0, #8
    efa8:	428b      	cmp	r3, r1
    efaa:	d344      	bcc.n	f036 <__aeabi_uidiv+0x9e>
    efac:	0b03      	lsrs	r3, r0, #12
    efae:	428b      	cmp	r3, r1
    efb0:	d328      	bcc.n	f004 <__aeabi_uidiv+0x6c>
    efb2:	0c03      	lsrs	r3, r0, #16
    efb4:	428b      	cmp	r3, r1
    efb6:	d30d      	bcc.n	efd4 <__aeabi_uidiv+0x3c>
    efb8:	22ff      	movs	r2, #255	; 0xff
    efba:	0209      	lsls	r1, r1, #8
    efbc:	ba12      	rev	r2, r2
    efbe:	0c03      	lsrs	r3, r0, #16
    efc0:	428b      	cmp	r3, r1
    efc2:	d302      	bcc.n	efca <__aeabi_uidiv+0x32>
    efc4:	1212      	asrs	r2, r2, #8
    efc6:	0209      	lsls	r1, r1, #8
    efc8:	d065      	beq.n	f096 <__aeabi_uidiv+0xfe>
    efca:	0b03      	lsrs	r3, r0, #12
    efcc:	428b      	cmp	r3, r1
    efce:	d319      	bcc.n	f004 <__aeabi_uidiv+0x6c>
    efd0:	e000      	b.n	efd4 <__aeabi_uidiv+0x3c>
    efd2:	0a09      	lsrs	r1, r1, #8
    efd4:	0bc3      	lsrs	r3, r0, #15
    efd6:	428b      	cmp	r3, r1
    efd8:	d301      	bcc.n	efde <__aeabi_uidiv+0x46>
    efda:	03cb      	lsls	r3, r1, #15
    efdc:	1ac0      	subs	r0, r0, r3
    efde:	4152      	adcs	r2, r2
    efe0:	0b83      	lsrs	r3, r0, #14
    efe2:	428b      	cmp	r3, r1
    efe4:	d301      	bcc.n	efea <__aeabi_uidiv+0x52>
    efe6:	038b      	lsls	r3, r1, #14
    efe8:	1ac0      	subs	r0, r0, r3
    efea:	4152      	adcs	r2, r2
    efec:	0b43      	lsrs	r3, r0, #13
    efee:	428b      	cmp	r3, r1
    eff0:	d301      	bcc.n	eff6 <__aeabi_uidiv+0x5e>
    eff2:	034b      	lsls	r3, r1, #13
    eff4:	1ac0      	subs	r0, r0, r3
    eff6:	4152      	adcs	r2, r2
    eff8:	0b03      	lsrs	r3, r0, #12
    effa:	428b      	cmp	r3, r1
    effc:	d301      	bcc.n	f002 <__aeabi_uidiv+0x6a>
    effe:	030b      	lsls	r3, r1, #12
    f000:	1ac0      	subs	r0, r0, r3
    f002:	4152      	adcs	r2, r2
    f004:	0ac3      	lsrs	r3, r0, #11
    f006:	428b      	cmp	r3, r1
    f008:	d301      	bcc.n	f00e <__aeabi_uidiv+0x76>
    f00a:	02cb      	lsls	r3, r1, #11
    f00c:	1ac0      	subs	r0, r0, r3
    f00e:	4152      	adcs	r2, r2
    f010:	0a83      	lsrs	r3, r0, #10
    f012:	428b      	cmp	r3, r1
    f014:	d301      	bcc.n	f01a <__aeabi_uidiv+0x82>
    f016:	028b      	lsls	r3, r1, #10
    f018:	1ac0      	subs	r0, r0, r3
    f01a:	4152      	adcs	r2, r2
    f01c:	0a43      	lsrs	r3, r0, #9
    f01e:	428b      	cmp	r3, r1
    f020:	d301      	bcc.n	f026 <__aeabi_uidiv+0x8e>
    f022:	024b      	lsls	r3, r1, #9
    f024:	1ac0      	subs	r0, r0, r3
    f026:	4152      	adcs	r2, r2
    f028:	0a03      	lsrs	r3, r0, #8
    f02a:	428b      	cmp	r3, r1
    f02c:	d301      	bcc.n	f032 <__aeabi_uidiv+0x9a>
    f02e:	020b      	lsls	r3, r1, #8
    f030:	1ac0      	subs	r0, r0, r3
    f032:	4152      	adcs	r2, r2
    f034:	d2cd      	bcs.n	efd2 <__aeabi_uidiv+0x3a>
    f036:	09c3      	lsrs	r3, r0, #7
    f038:	428b      	cmp	r3, r1
    f03a:	d301      	bcc.n	f040 <__aeabi_uidiv+0xa8>
    f03c:	01cb      	lsls	r3, r1, #7
    f03e:	1ac0      	subs	r0, r0, r3
    f040:	4152      	adcs	r2, r2
    f042:	0983      	lsrs	r3, r0, #6
    f044:	428b      	cmp	r3, r1
    f046:	d301      	bcc.n	f04c <__aeabi_uidiv+0xb4>
    f048:	018b      	lsls	r3, r1, #6
    f04a:	1ac0      	subs	r0, r0, r3
    f04c:	4152      	adcs	r2, r2
    f04e:	0943      	lsrs	r3, r0, #5
    f050:	428b      	cmp	r3, r1
    f052:	d301      	bcc.n	f058 <__aeabi_uidiv+0xc0>
    f054:	014b      	lsls	r3, r1, #5
    f056:	1ac0      	subs	r0, r0, r3
    f058:	4152      	adcs	r2, r2
    f05a:	0903      	lsrs	r3, r0, #4
    f05c:	428b      	cmp	r3, r1
    f05e:	d301      	bcc.n	f064 <__aeabi_uidiv+0xcc>
    f060:	010b      	lsls	r3, r1, #4
    f062:	1ac0      	subs	r0, r0, r3
    f064:	4152      	adcs	r2, r2
    f066:	08c3      	lsrs	r3, r0, #3
    f068:	428b      	cmp	r3, r1
    f06a:	d301      	bcc.n	f070 <__aeabi_uidiv+0xd8>
    f06c:	00cb      	lsls	r3, r1, #3
    f06e:	1ac0      	subs	r0, r0, r3
    f070:	4152      	adcs	r2, r2
    f072:	0883      	lsrs	r3, r0, #2
    f074:	428b      	cmp	r3, r1
    f076:	d301      	bcc.n	f07c <__aeabi_uidiv+0xe4>
    f078:	008b      	lsls	r3, r1, #2
    f07a:	1ac0      	subs	r0, r0, r3
    f07c:	4152      	adcs	r2, r2
    f07e:	0843      	lsrs	r3, r0, #1
    f080:	428b      	cmp	r3, r1
    f082:	d301      	bcc.n	f088 <__aeabi_uidiv+0xf0>
    f084:	004b      	lsls	r3, r1, #1
    f086:	1ac0      	subs	r0, r0, r3
    f088:	4152      	adcs	r2, r2
    f08a:	1a41      	subs	r1, r0, r1
    f08c:	d200      	bcs.n	f090 <__aeabi_uidiv+0xf8>
    f08e:	4601      	mov	r1, r0
    f090:	4152      	adcs	r2, r2
    f092:	4610      	mov	r0, r2
    f094:	4770      	bx	lr
    f096:	e7ff      	b.n	f098 <__aeabi_uidiv+0x100>
    f098:	b501      	push	{r0, lr}
    f09a:	2000      	movs	r0, #0
    f09c:	f000 f8f0 	bl	f280 <__aeabi_idiv0>
    f0a0:	bd02      	pop	{r1, pc}
    f0a2:	46c0      	nop			; (mov r8, r8)

0000f0a4 <__aeabi_uidivmod>:
    f0a4:	2900      	cmp	r1, #0
    f0a6:	d0f7      	beq.n	f098 <__aeabi_uidiv+0x100>
    f0a8:	e776      	b.n	ef98 <__aeabi_uidiv>
    f0aa:	4770      	bx	lr

0000f0ac <__aeabi_idiv>:
    f0ac:	4603      	mov	r3, r0
    f0ae:	430b      	orrs	r3, r1
    f0b0:	d47f      	bmi.n	f1b2 <__aeabi_idiv+0x106>
    f0b2:	2200      	movs	r2, #0
    f0b4:	0843      	lsrs	r3, r0, #1
    f0b6:	428b      	cmp	r3, r1
    f0b8:	d374      	bcc.n	f1a4 <__aeabi_idiv+0xf8>
    f0ba:	0903      	lsrs	r3, r0, #4
    f0bc:	428b      	cmp	r3, r1
    f0be:	d35f      	bcc.n	f180 <__aeabi_idiv+0xd4>
    f0c0:	0a03      	lsrs	r3, r0, #8
    f0c2:	428b      	cmp	r3, r1
    f0c4:	d344      	bcc.n	f150 <__aeabi_idiv+0xa4>
    f0c6:	0b03      	lsrs	r3, r0, #12
    f0c8:	428b      	cmp	r3, r1
    f0ca:	d328      	bcc.n	f11e <__aeabi_idiv+0x72>
    f0cc:	0c03      	lsrs	r3, r0, #16
    f0ce:	428b      	cmp	r3, r1
    f0d0:	d30d      	bcc.n	f0ee <__aeabi_idiv+0x42>
    f0d2:	22ff      	movs	r2, #255	; 0xff
    f0d4:	0209      	lsls	r1, r1, #8
    f0d6:	ba12      	rev	r2, r2
    f0d8:	0c03      	lsrs	r3, r0, #16
    f0da:	428b      	cmp	r3, r1
    f0dc:	d302      	bcc.n	f0e4 <__aeabi_idiv+0x38>
    f0de:	1212      	asrs	r2, r2, #8
    f0e0:	0209      	lsls	r1, r1, #8
    f0e2:	d065      	beq.n	f1b0 <__aeabi_idiv+0x104>
    f0e4:	0b03      	lsrs	r3, r0, #12
    f0e6:	428b      	cmp	r3, r1
    f0e8:	d319      	bcc.n	f11e <__aeabi_idiv+0x72>
    f0ea:	e000      	b.n	f0ee <__aeabi_idiv+0x42>
    f0ec:	0a09      	lsrs	r1, r1, #8
    f0ee:	0bc3      	lsrs	r3, r0, #15
    f0f0:	428b      	cmp	r3, r1
    f0f2:	d301      	bcc.n	f0f8 <__aeabi_idiv+0x4c>
    f0f4:	03cb      	lsls	r3, r1, #15
    f0f6:	1ac0      	subs	r0, r0, r3
    f0f8:	4152      	adcs	r2, r2
    f0fa:	0b83      	lsrs	r3, r0, #14
    f0fc:	428b      	cmp	r3, r1
    f0fe:	d301      	bcc.n	f104 <__aeabi_idiv+0x58>
    f100:	038b      	lsls	r3, r1, #14
    f102:	1ac0      	subs	r0, r0, r3
    f104:	4152      	adcs	r2, r2
    f106:	0b43      	lsrs	r3, r0, #13
    f108:	428b      	cmp	r3, r1
    f10a:	d301      	bcc.n	f110 <__aeabi_idiv+0x64>
    f10c:	034b      	lsls	r3, r1, #13
    f10e:	1ac0      	subs	r0, r0, r3
    f110:	4152      	adcs	r2, r2
    f112:	0b03      	lsrs	r3, r0, #12
    f114:	428b      	cmp	r3, r1
    f116:	d301      	bcc.n	f11c <__aeabi_idiv+0x70>
    f118:	030b      	lsls	r3, r1, #12
    f11a:	1ac0      	subs	r0, r0, r3
    f11c:	4152      	adcs	r2, r2
    f11e:	0ac3      	lsrs	r3, r0, #11
    f120:	428b      	cmp	r3, r1
    f122:	d301      	bcc.n	f128 <__aeabi_idiv+0x7c>
    f124:	02cb      	lsls	r3, r1, #11
    f126:	1ac0      	subs	r0, r0, r3
    f128:	4152      	adcs	r2, r2
    f12a:	0a83      	lsrs	r3, r0, #10
    f12c:	428b      	cmp	r3, r1
    f12e:	d301      	bcc.n	f134 <__aeabi_idiv+0x88>
    f130:	028b      	lsls	r3, r1, #10
    f132:	1ac0      	subs	r0, r0, r3
    f134:	4152      	adcs	r2, r2
    f136:	0a43      	lsrs	r3, r0, #9
    f138:	428b      	cmp	r3, r1
    f13a:	d301      	bcc.n	f140 <__aeabi_idiv+0x94>
    f13c:	024b      	lsls	r3, r1, #9
    f13e:	1ac0      	subs	r0, r0, r3
    f140:	4152      	adcs	r2, r2
    f142:	0a03      	lsrs	r3, r0, #8
    f144:	428b      	cmp	r3, r1
    f146:	d301      	bcc.n	f14c <__aeabi_idiv+0xa0>
    f148:	020b      	lsls	r3, r1, #8
    f14a:	1ac0      	subs	r0, r0, r3
    f14c:	4152      	adcs	r2, r2
    f14e:	d2cd      	bcs.n	f0ec <__aeabi_idiv+0x40>
    f150:	09c3      	lsrs	r3, r0, #7
    f152:	428b      	cmp	r3, r1
    f154:	d301      	bcc.n	f15a <__aeabi_idiv+0xae>
    f156:	01cb      	lsls	r3, r1, #7
    f158:	1ac0      	subs	r0, r0, r3
    f15a:	4152      	adcs	r2, r2
    f15c:	0983      	lsrs	r3, r0, #6
    f15e:	428b      	cmp	r3, r1
    f160:	d301      	bcc.n	f166 <__aeabi_idiv+0xba>
    f162:	018b      	lsls	r3, r1, #6
    f164:	1ac0      	subs	r0, r0, r3
    f166:	4152      	adcs	r2, r2
    f168:	0943      	lsrs	r3, r0, #5
    f16a:	428b      	cmp	r3, r1
    f16c:	d301      	bcc.n	f172 <__aeabi_idiv+0xc6>
    f16e:	014b      	lsls	r3, r1, #5
    f170:	1ac0      	subs	r0, r0, r3
    f172:	4152      	adcs	r2, r2
    f174:	0903      	lsrs	r3, r0, #4
    f176:	428b      	cmp	r3, r1
    f178:	d301      	bcc.n	f17e <__aeabi_idiv+0xd2>
    f17a:	010b      	lsls	r3, r1, #4
    f17c:	1ac0      	subs	r0, r0, r3
    f17e:	4152      	adcs	r2, r2
    f180:	08c3      	lsrs	r3, r0, #3
    f182:	428b      	cmp	r3, r1
    f184:	d301      	bcc.n	f18a <__aeabi_idiv+0xde>
    f186:	00cb      	lsls	r3, r1, #3
    f188:	1ac0      	subs	r0, r0, r3
    f18a:	4152      	adcs	r2, r2
    f18c:	0883      	lsrs	r3, r0, #2
    f18e:	428b      	cmp	r3, r1
    f190:	d301      	bcc.n	f196 <__aeabi_idiv+0xea>
    f192:	008b      	lsls	r3, r1, #2
    f194:	1ac0      	subs	r0, r0, r3
    f196:	4152      	adcs	r2, r2
    f198:	0843      	lsrs	r3, r0, #1
    f19a:	428b      	cmp	r3, r1
    f19c:	d301      	bcc.n	f1a2 <__aeabi_idiv+0xf6>
    f19e:	004b      	lsls	r3, r1, #1
    f1a0:	1ac0      	subs	r0, r0, r3
    f1a2:	4152      	adcs	r2, r2
    f1a4:	1a41      	subs	r1, r0, r1
    f1a6:	d200      	bcs.n	f1aa <__aeabi_idiv+0xfe>
    f1a8:	4601      	mov	r1, r0
    f1aa:	4152      	adcs	r2, r2
    f1ac:	4610      	mov	r0, r2
    f1ae:	4770      	bx	lr
    f1b0:	e05d      	b.n	f26e <__aeabi_idiv+0x1c2>
    f1b2:	0fca      	lsrs	r2, r1, #31
    f1b4:	d000      	beq.n	f1b8 <__aeabi_idiv+0x10c>
    f1b6:	4249      	negs	r1, r1
    f1b8:	1003      	asrs	r3, r0, #32
    f1ba:	d300      	bcc.n	f1be <__aeabi_idiv+0x112>
    f1bc:	4240      	negs	r0, r0
    f1be:	4053      	eors	r3, r2
    f1c0:	2200      	movs	r2, #0
    f1c2:	469c      	mov	ip, r3
    f1c4:	0903      	lsrs	r3, r0, #4
    f1c6:	428b      	cmp	r3, r1
    f1c8:	d32d      	bcc.n	f226 <__aeabi_idiv+0x17a>
    f1ca:	0a03      	lsrs	r3, r0, #8
    f1cc:	428b      	cmp	r3, r1
    f1ce:	d312      	bcc.n	f1f6 <__aeabi_idiv+0x14a>
    f1d0:	22fc      	movs	r2, #252	; 0xfc
    f1d2:	0189      	lsls	r1, r1, #6
    f1d4:	ba12      	rev	r2, r2
    f1d6:	0a03      	lsrs	r3, r0, #8
    f1d8:	428b      	cmp	r3, r1
    f1da:	d30c      	bcc.n	f1f6 <__aeabi_idiv+0x14a>
    f1dc:	0189      	lsls	r1, r1, #6
    f1de:	1192      	asrs	r2, r2, #6
    f1e0:	428b      	cmp	r3, r1
    f1e2:	d308      	bcc.n	f1f6 <__aeabi_idiv+0x14a>
    f1e4:	0189      	lsls	r1, r1, #6
    f1e6:	1192      	asrs	r2, r2, #6
    f1e8:	428b      	cmp	r3, r1
    f1ea:	d304      	bcc.n	f1f6 <__aeabi_idiv+0x14a>
    f1ec:	0189      	lsls	r1, r1, #6
    f1ee:	d03a      	beq.n	f266 <__aeabi_idiv+0x1ba>
    f1f0:	1192      	asrs	r2, r2, #6
    f1f2:	e000      	b.n	f1f6 <__aeabi_idiv+0x14a>
    f1f4:	0989      	lsrs	r1, r1, #6
    f1f6:	09c3      	lsrs	r3, r0, #7
    f1f8:	428b      	cmp	r3, r1
    f1fa:	d301      	bcc.n	f200 <__aeabi_idiv+0x154>
    f1fc:	01cb      	lsls	r3, r1, #7
    f1fe:	1ac0      	subs	r0, r0, r3
    f200:	4152      	adcs	r2, r2
    f202:	0983      	lsrs	r3, r0, #6
    f204:	428b      	cmp	r3, r1
    f206:	d301      	bcc.n	f20c <__aeabi_idiv+0x160>
    f208:	018b      	lsls	r3, r1, #6
    f20a:	1ac0      	subs	r0, r0, r3
    f20c:	4152      	adcs	r2, r2
    f20e:	0943      	lsrs	r3, r0, #5
    f210:	428b      	cmp	r3, r1
    f212:	d301      	bcc.n	f218 <__aeabi_idiv+0x16c>
    f214:	014b      	lsls	r3, r1, #5
    f216:	1ac0      	subs	r0, r0, r3
    f218:	4152      	adcs	r2, r2
    f21a:	0903      	lsrs	r3, r0, #4
    f21c:	428b      	cmp	r3, r1
    f21e:	d301      	bcc.n	f224 <__aeabi_idiv+0x178>
    f220:	010b      	lsls	r3, r1, #4
    f222:	1ac0      	subs	r0, r0, r3
    f224:	4152      	adcs	r2, r2
    f226:	08c3      	lsrs	r3, r0, #3
    f228:	428b      	cmp	r3, r1
    f22a:	d301      	bcc.n	f230 <__aeabi_idiv+0x184>
    f22c:	00cb      	lsls	r3, r1, #3
    f22e:	1ac0      	subs	r0, r0, r3
    f230:	4152      	adcs	r2, r2
    f232:	0883      	lsrs	r3, r0, #2
    f234:	428b      	cmp	r3, r1
    f236:	d301      	bcc.n	f23c <__aeabi_idiv+0x190>
    f238:	008b      	lsls	r3, r1, #2
    f23a:	1ac0      	subs	r0, r0, r3
    f23c:	4152      	adcs	r2, r2
    f23e:	d2d9      	bcs.n	f1f4 <__aeabi_idiv+0x148>
    f240:	0843      	lsrs	r3, r0, #1
    f242:	428b      	cmp	r3, r1
    f244:	d301      	bcc.n	f24a <__aeabi_idiv+0x19e>
    f246:	004b      	lsls	r3, r1, #1
    f248:	1ac0      	subs	r0, r0, r3
    f24a:	4152      	adcs	r2, r2
    f24c:	1a41      	subs	r1, r0, r1
    f24e:	d200      	bcs.n	f252 <__aeabi_idiv+0x1a6>
    f250:	4601      	mov	r1, r0
    f252:	4663      	mov	r3, ip
    f254:	4152      	adcs	r2, r2
    f256:	105b      	asrs	r3, r3, #1
    f258:	4610      	mov	r0, r2
    f25a:	d301      	bcc.n	f260 <__aeabi_idiv+0x1b4>
    f25c:	4240      	negs	r0, r0
    f25e:	2b00      	cmp	r3, #0
    f260:	d500      	bpl.n	f264 <__aeabi_idiv+0x1b8>
    f262:	4249      	negs	r1, r1
    f264:	4770      	bx	lr
    f266:	4663      	mov	r3, ip
    f268:	105b      	asrs	r3, r3, #1
    f26a:	d300      	bcc.n	f26e <__aeabi_idiv+0x1c2>
    f26c:	4240      	negs	r0, r0
    f26e:	b501      	push	{r0, lr}
    f270:	2000      	movs	r0, #0
    f272:	f000 f805 	bl	f280 <__aeabi_idiv0>
    f276:	bd02      	pop	{r1, pc}

0000f278 <__aeabi_idivmod>:
    f278:	2900      	cmp	r1, #0
    f27a:	d0f8      	beq.n	f26e <__aeabi_idiv+0x1c2>
    f27c:	e716      	b.n	f0ac <__aeabi_idiv>
    f27e:	4770      	bx	lr

0000f280 <__aeabi_idiv0>:
    f280:	4770      	bx	lr
    f282:	46c0      	nop			; (mov r8, r8)

0000f284 <__aeabi_uldivmod>:
    f284:	2b00      	cmp	r3, #0
    f286:	d111      	bne.n	f2ac <__aeabi_uldivmod+0x28>
    f288:	2a00      	cmp	r2, #0
    f28a:	d10f      	bne.n	f2ac <__aeabi_uldivmod+0x28>
    f28c:	2900      	cmp	r1, #0
    f28e:	d100      	bne.n	f292 <__aeabi_uldivmod+0xe>
    f290:	2800      	cmp	r0, #0
    f292:	d002      	beq.n	f29a <__aeabi_uldivmod+0x16>
    f294:	2100      	movs	r1, #0
    f296:	43c9      	mvns	r1, r1
    f298:	1c08      	adds	r0, r1, #0
    f29a:	b407      	push	{r0, r1, r2}
    f29c:	4802      	ldr	r0, [pc, #8]	; (f2a8 <__aeabi_uldivmod+0x24>)
    f29e:	a102      	add	r1, pc, #8	; (adr r1, f2a8 <__aeabi_uldivmod+0x24>)
    f2a0:	1840      	adds	r0, r0, r1
    f2a2:	9002      	str	r0, [sp, #8]
    f2a4:	bd03      	pop	{r0, r1, pc}
    f2a6:	46c0      	nop			; (mov r8, r8)
    f2a8:	ffffffd9 	.word	0xffffffd9
    f2ac:	b403      	push	{r0, r1}
    f2ae:	4668      	mov	r0, sp
    f2b0:	b501      	push	{r0, lr}
    f2b2:	9802      	ldr	r0, [sp, #8]
    f2b4:	f000 f832 	bl	f31c <__udivmoddi4>
    f2b8:	9b01      	ldr	r3, [sp, #4]
    f2ba:	469e      	mov	lr, r3
    f2bc:	b002      	add	sp, #8
    f2be:	bc0c      	pop	{r2, r3}
    f2c0:	4770      	bx	lr
    f2c2:	46c0      	nop			; (mov r8, r8)

0000f2c4 <__aeabi_lmul>:
    f2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2c6:	464f      	mov	r7, r9
    f2c8:	4646      	mov	r6, r8
    f2ca:	b4c0      	push	{r6, r7}
    f2cc:	0416      	lsls	r6, r2, #16
    f2ce:	0c36      	lsrs	r6, r6, #16
    f2d0:	4699      	mov	r9, r3
    f2d2:	0033      	movs	r3, r6
    f2d4:	0405      	lsls	r5, r0, #16
    f2d6:	0c2c      	lsrs	r4, r5, #16
    f2d8:	0c07      	lsrs	r7, r0, #16
    f2da:	0c15      	lsrs	r5, r2, #16
    f2dc:	4363      	muls	r3, r4
    f2de:	437e      	muls	r6, r7
    f2e0:	436f      	muls	r7, r5
    f2e2:	4365      	muls	r5, r4
    f2e4:	0c1c      	lsrs	r4, r3, #16
    f2e6:	19ad      	adds	r5, r5, r6
    f2e8:	1964      	adds	r4, r4, r5
    f2ea:	469c      	mov	ip, r3
    f2ec:	42a6      	cmp	r6, r4
    f2ee:	d903      	bls.n	f2f8 <__aeabi_lmul+0x34>
    f2f0:	2380      	movs	r3, #128	; 0x80
    f2f2:	025b      	lsls	r3, r3, #9
    f2f4:	4698      	mov	r8, r3
    f2f6:	4447      	add	r7, r8
    f2f8:	4663      	mov	r3, ip
    f2fa:	0c25      	lsrs	r5, r4, #16
    f2fc:	19ef      	adds	r7, r5, r7
    f2fe:	041d      	lsls	r5, r3, #16
    f300:	464b      	mov	r3, r9
    f302:	434a      	muls	r2, r1
    f304:	4343      	muls	r3, r0
    f306:	0c2d      	lsrs	r5, r5, #16
    f308:	0424      	lsls	r4, r4, #16
    f30a:	1964      	adds	r4, r4, r5
    f30c:	1899      	adds	r1, r3, r2
    f30e:	19c9      	adds	r1, r1, r7
    f310:	0020      	movs	r0, r4
    f312:	bc0c      	pop	{r2, r3}
    f314:	4690      	mov	r8, r2
    f316:	4699      	mov	r9, r3
    f318:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f31a:	46c0      	nop			; (mov r8, r8)

0000f31c <__udivmoddi4>:
    f31c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f31e:	464d      	mov	r5, r9
    f320:	4656      	mov	r6, sl
    f322:	4644      	mov	r4, r8
    f324:	465f      	mov	r7, fp
    f326:	b4f0      	push	{r4, r5, r6, r7}
    f328:	4692      	mov	sl, r2
    f32a:	b083      	sub	sp, #12
    f32c:	0004      	movs	r4, r0
    f32e:	000d      	movs	r5, r1
    f330:	4699      	mov	r9, r3
    f332:	428b      	cmp	r3, r1
    f334:	d82f      	bhi.n	f396 <__udivmoddi4+0x7a>
    f336:	d02c      	beq.n	f392 <__udivmoddi4+0x76>
    f338:	4649      	mov	r1, r9
    f33a:	4650      	mov	r0, sl
    f33c:	f000 fb7c 	bl	fa38 <__clzdi2>
    f340:	0029      	movs	r1, r5
    f342:	0006      	movs	r6, r0
    f344:	0020      	movs	r0, r4
    f346:	f000 fb77 	bl	fa38 <__clzdi2>
    f34a:	1a33      	subs	r3, r6, r0
    f34c:	4698      	mov	r8, r3
    f34e:	3b20      	subs	r3, #32
    f350:	469b      	mov	fp, r3
    f352:	d500      	bpl.n	f356 <__udivmoddi4+0x3a>
    f354:	e074      	b.n	f440 <__udivmoddi4+0x124>
    f356:	4653      	mov	r3, sl
    f358:	465a      	mov	r2, fp
    f35a:	4093      	lsls	r3, r2
    f35c:	001f      	movs	r7, r3
    f35e:	4653      	mov	r3, sl
    f360:	4642      	mov	r2, r8
    f362:	4093      	lsls	r3, r2
    f364:	001e      	movs	r6, r3
    f366:	42af      	cmp	r7, r5
    f368:	d829      	bhi.n	f3be <__udivmoddi4+0xa2>
    f36a:	d026      	beq.n	f3ba <__udivmoddi4+0x9e>
    f36c:	465b      	mov	r3, fp
    f36e:	1ba4      	subs	r4, r4, r6
    f370:	41bd      	sbcs	r5, r7
    f372:	2b00      	cmp	r3, #0
    f374:	da00      	bge.n	f378 <__udivmoddi4+0x5c>
    f376:	e079      	b.n	f46c <__udivmoddi4+0x150>
    f378:	2200      	movs	r2, #0
    f37a:	2300      	movs	r3, #0
    f37c:	9200      	str	r2, [sp, #0]
    f37e:	9301      	str	r3, [sp, #4]
    f380:	2301      	movs	r3, #1
    f382:	465a      	mov	r2, fp
    f384:	4093      	lsls	r3, r2
    f386:	9301      	str	r3, [sp, #4]
    f388:	2301      	movs	r3, #1
    f38a:	4642      	mov	r2, r8
    f38c:	4093      	lsls	r3, r2
    f38e:	9300      	str	r3, [sp, #0]
    f390:	e019      	b.n	f3c6 <__udivmoddi4+0xaa>
    f392:	4282      	cmp	r2, r0
    f394:	d9d0      	bls.n	f338 <__udivmoddi4+0x1c>
    f396:	2200      	movs	r2, #0
    f398:	2300      	movs	r3, #0
    f39a:	9200      	str	r2, [sp, #0]
    f39c:	9301      	str	r3, [sp, #4]
    f39e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f3a0:	2b00      	cmp	r3, #0
    f3a2:	d001      	beq.n	f3a8 <__udivmoddi4+0x8c>
    f3a4:	601c      	str	r4, [r3, #0]
    f3a6:	605d      	str	r5, [r3, #4]
    f3a8:	9800      	ldr	r0, [sp, #0]
    f3aa:	9901      	ldr	r1, [sp, #4]
    f3ac:	b003      	add	sp, #12
    f3ae:	bc3c      	pop	{r2, r3, r4, r5}
    f3b0:	4690      	mov	r8, r2
    f3b2:	4699      	mov	r9, r3
    f3b4:	46a2      	mov	sl, r4
    f3b6:	46ab      	mov	fp, r5
    f3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3ba:	42a3      	cmp	r3, r4
    f3bc:	d9d6      	bls.n	f36c <__udivmoddi4+0x50>
    f3be:	2200      	movs	r2, #0
    f3c0:	2300      	movs	r3, #0
    f3c2:	9200      	str	r2, [sp, #0]
    f3c4:	9301      	str	r3, [sp, #4]
    f3c6:	4643      	mov	r3, r8
    f3c8:	2b00      	cmp	r3, #0
    f3ca:	d0e8      	beq.n	f39e <__udivmoddi4+0x82>
    f3cc:	07fb      	lsls	r3, r7, #31
    f3ce:	0872      	lsrs	r2, r6, #1
    f3d0:	431a      	orrs	r2, r3
    f3d2:	4646      	mov	r6, r8
    f3d4:	087b      	lsrs	r3, r7, #1
    f3d6:	e00e      	b.n	f3f6 <__udivmoddi4+0xda>
    f3d8:	42ab      	cmp	r3, r5
    f3da:	d101      	bne.n	f3e0 <__udivmoddi4+0xc4>
    f3dc:	42a2      	cmp	r2, r4
    f3de:	d80c      	bhi.n	f3fa <__udivmoddi4+0xde>
    f3e0:	1aa4      	subs	r4, r4, r2
    f3e2:	419d      	sbcs	r5, r3
    f3e4:	2001      	movs	r0, #1
    f3e6:	1924      	adds	r4, r4, r4
    f3e8:	416d      	adcs	r5, r5
    f3ea:	2100      	movs	r1, #0
    f3ec:	3e01      	subs	r6, #1
    f3ee:	1824      	adds	r4, r4, r0
    f3f0:	414d      	adcs	r5, r1
    f3f2:	2e00      	cmp	r6, #0
    f3f4:	d006      	beq.n	f404 <__udivmoddi4+0xe8>
    f3f6:	42ab      	cmp	r3, r5
    f3f8:	d9ee      	bls.n	f3d8 <__udivmoddi4+0xbc>
    f3fa:	3e01      	subs	r6, #1
    f3fc:	1924      	adds	r4, r4, r4
    f3fe:	416d      	adcs	r5, r5
    f400:	2e00      	cmp	r6, #0
    f402:	d1f8      	bne.n	f3f6 <__udivmoddi4+0xda>
    f404:	465b      	mov	r3, fp
    f406:	9800      	ldr	r0, [sp, #0]
    f408:	9901      	ldr	r1, [sp, #4]
    f40a:	1900      	adds	r0, r0, r4
    f40c:	4169      	adcs	r1, r5
    f40e:	2b00      	cmp	r3, #0
    f410:	db22      	blt.n	f458 <__udivmoddi4+0x13c>
    f412:	002b      	movs	r3, r5
    f414:	465a      	mov	r2, fp
    f416:	40d3      	lsrs	r3, r2
    f418:	002a      	movs	r2, r5
    f41a:	4644      	mov	r4, r8
    f41c:	40e2      	lsrs	r2, r4
    f41e:	001c      	movs	r4, r3
    f420:	465b      	mov	r3, fp
    f422:	0015      	movs	r5, r2
    f424:	2b00      	cmp	r3, #0
    f426:	db2c      	blt.n	f482 <__udivmoddi4+0x166>
    f428:	0026      	movs	r6, r4
    f42a:	409e      	lsls	r6, r3
    f42c:	0033      	movs	r3, r6
    f42e:	0026      	movs	r6, r4
    f430:	4647      	mov	r7, r8
    f432:	40be      	lsls	r6, r7
    f434:	0032      	movs	r2, r6
    f436:	1a80      	subs	r0, r0, r2
    f438:	4199      	sbcs	r1, r3
    f43a:	9000      	str	r0, [sp, #0]
    f43c:	9101      	str	r1, [sp, #4]
    f43e:	e7ae      	b.n	f39e <__udivmoddi4+0x82>
    f440:	4642      	mov	r2, r8
    f442:	2320      	movs	r3, #32
    f444:	1a9b      	subs	r3, r3, r2
    f446:	4652      	mov	r2, sl
    f448:	40da      	lsrs	r2, r3
    f44a:	4641      	mov	r1, r8
    f44c:	0013      	movs	r3, r2
    f44e:	464a      	mov	r2, r9
    f450:	408a      	lsls	r2, r1
    f452:	0017      	movs	r7, r2
    f454:	431f      	orrs	r7, r3
    f456:	e782      	b.n	f35e <__udivmoddi4+0x42>
    f458:	4642      	mov	r2, r8
    f45a:	2320      	movs	r3, #32
    f45c:	1a9b      	subs	r3, r3, r2
    f45e:	002a      	movs	r2, r5
    f460:	4646      	mov	r6, r8
    f462:	409a      	lsls	r2, r3
    f464:	0023      	movs	r3, r4
    f466:	40f3      	lsrs	r3, r6
    f468:	4313      	orrs	r3, r2
    f46a:	e7d5      	b.n	f418 <__udivmoddi4+0xfc>
    f46c:	4642      	mov	r2, r8
    f46e:	2320      	movs	r3, #32
    f470:	2100      	movs	r1, #0
    f472:	1a9b      	subs	r3, r3, r2
    f474:	2200      	movs	r2, #0
    f476:	9100      	str	r1, [sp, #0]
    f478:	9201      	str	r2, [sp, #4]
    f47a:	2201      	movs	r2, #1
    f47c:	40da      	lsrs	r2, r3
    f47e:	9201      	str	r2, [sp, #4]
    f480:	e782      	b.n	f388 <__udivmoddi4+0x6c>
    f482:	4642      	mov	r2, r8
    f484:	2320      	movs	r3, #32
    f486:	0026      	movs	r6, r4
    f488:	1a9b      	subs	r3, r3, r2
    f48a:	40de      	lsrs	r6, r3
    f48c:	002f      	movs	r7, r5
    f48e:	46b4      	mov	ip, r6
    f490:	4097      	lsls	r7, r2
    f492:	4666      	mov	r6, ip
    f494:	003b      	movs	r3, r7
    f496:	4333      	orrs	r3, r6
    f498:	e7c9      	b.n	f42e <__udivmoddi4+0x112>
    f49a:	46c0      	nop			; (mov r8, r8)

0000f49c <__aeabi_dmul>:
    f49c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f49e:	465f      	mov	r7, fp
    f4a0:	4656      	mov	r6, sl
    f4a2:	464d      	mov	r5, r9
    f4a4:	4644      	mov	r4, r8
    f4a6:	b4f0      	push	{r4, r5, r6, r7}
    f4a8:	030d      	lsls	r5, r1, #12
    f4aa:	4699      	mov	r9, r3
    f4ac:	004e      	lsls	r6, r1, #1
    f4ae:	0b2b      	lsrs	r3, r5, #12
    f4b0:	b087      	sub	sp, #28
    f4b2:	0007      	movs	r7, r0
    f4b4:	4692      	mov	sl, r2
    f4b6:	4680      	mov	r8, r0
    f4b8:	469b      	mov	fp, r3
    f4ba:	0d76      	lsrs	r6, r6, #21
    f4bc:	0fcc      	lsrs	r4, r1, #31
    f4be:	2e00      	cmp	r6, #0
    f4c0:	d069      	beq.n	f596 <__aeabi_dmul+0xfa>
    f4c2:	4b6d      	ldr	r3, [pc, #436]	; (f678 <__aeabi_dmul+0x1dc>)
    f4c4:	429e      	cmp	r6, r3
    f4c6:	d035      	beq.n	f534 <__aeabi_dmul+0x98>
    f4c8:	465b      	mov	r3, fp
    f4ca:	2280      	movs	r2, #128	; 0x80
    f4cc:	00dd      	lsls	r5, r3, #3
    f4ce:	0412      	lsls	r2, r2, #16
    f4d0:	0f43      	lsrs	r3, r0, #29
    f4d2:	4313      	orrs	r3, r2
    f4d4:	432b      	orrs	r3, r5
    f4d6:	469b      	mov	fp, r3
    f4d8:	00c3      	lsls	r3, r0, #3
    f4da:	4698      	mov	r8, r3
    f4dc:	4b67      	ldr	r3, [pc, #412]	; (f67c <__aeabi_dmul+0x1e0>)
    f4de:	2700      	movs	r7, #0
    f4e0:	469c      	mov	ip, r3
    f4e2:	2300      	movs	r3, #0
    f4e4:	4466      	add	r6, ip
    f4e6:	9301      	str	r3, [sp, #4]
    f4e8:	464a      	mov	r2, r9
    f4ea:	0315      	lsls	r5, r2, #12
    f4ec:	0050      	lsls	r0, r2, #1
    f4ee:	0fd2      	lsrs	r2, r2, #31
    f4f0:	4653      	mov	r3, sl
    f4f2:	0b2d      	lsrs	r5, r5, #12
    f4f4:	0d40      	lsrs	r0, r0, #21
    f4f6:	4691      	mov	r9, r2
    f4f8:	d100      	bne.n	f4fc <__aeabi_dmul+0x60>
    f4fa:	e076      	b.n	f5ea <__aeabi_dmul+0x14e>
    f4fc:	4a5e      	ldr	r2, [pc, #376]	; (f678 <__aeabi_dmul+0x1dc>)
    f4fe:	4290      	cmp	r0, r2
    f500:	d06c      	beq.n	f5dc <__aeabi_dmul+0x140>
    f502:	2280      	movs	r2, #128	; 0x80
    f504:	0f5b      	lsrs	r3, r3, #29
    f506:	0412      	lsls	r2, r2, #16
    f508:	4313      	orrs	r3, r2
    f50a:	4a5c      	ldr	r2, [pc, #368]	; (f67c <__aeabi_dmul+0x1e0>)
    f50c:	00ed      	lsls	r5, r5, #3
    f50e:	4694      	mov	ip, r2
    f510:	431d      	orrs	r5, r3
    f512:	4653      	mov	r3, sl
    f514:	2200      	movs	r2, #0
    f516:	00db      	lsls	r3, r3, #3
    f518:	4460      	add	r0, ip
    f51a:	4649      	mov	r1, r9
    f51c:	1836      	adds	r6, r6, r0
    f51e:	1c70      	adds	r0, r6, #1
    f520:	4061      	eors	r1, r4
    f522:	9002      	str	r0, [sp, #8]
    f524:	4317      	orrs	r7, r2
    f526:	2f0f      	cmp	r7, #15
    f528:	d900      	bls.n	f52c <__aeabi_dmul+0x90>
    f52a:	e0af      	b.n	f68c <__aeabi_dmul+0x1f0>
    f52c:	4854      	ldr	r0, [pc, #336]	; (f680 <__aeabi_dmul+0x1e4>)
    f52e:	00bf      	lsls	r7, r7, #2
    f530:	59c7      	ldr	r7, [r0, r7]
    f532:	46bf      	mov	pc, r7
    f534:	465b      	mov	r3, fp
    f536:	431f      	orrs	r7, r3
    f538:	d000      	beq.n	f53c <__aeabi_dmul+0xa0>
    f53a:	e088      	b.n	f64e <__aeabi_dmul+0x1b2>
    f53c:	2300      	movs	r3, #0
    f53e:	469b      	mov	fp, r3
    f540:	4698      	mov	r8, r3
    f542:	3302      	adds	r3, #2
    f544:	2708      	movs	r7, #8
    f546:	9301      	str	r3, [sp, #4]
    f548:	e7ce      	b.n	f4e8 <__aeabi_dmul+0x4c>
    f54a:	4649      	mov	r1, r9
    f54c:	2a02      	cmp	r2, #2
    f54e:	d06a      	beq.n	f626 <__aeabi_dmul+0x18a>
    f550:	2a03      	cmp	r2, #3
    f552:	d100      	bne.n	f556 <__aeabi_dmul+0xba>
    f554:	e209      	b.n	f96a <__aeabi_dmul+0x4ce>
    f556:	2a01      	cmp	r2, #1
    f558:	d000      	beq.n	f55c <__aeabi_dmul+0xc0>
    f55a:	e1bb      	b.n	f8d4 <__aeabi_dmul+0x438>
    f55c:	4011      	ands	r1, r2
    f55e:	2200      	movs	r2, #0
    f560:	2300      	movs	r3, #0
    f562:	2500      	movs	r5, #0
    f564:	4690      	mov	r8, r2
    f566:	b2cc      	uxtb	r4, r1
    f568:	2100      	movs	r1, #0
    f56a:	032d      	lsls	r5, r5, #12
    f56c:	0d0a      	lsrs	r2, r1, #20
    f56e:	0512      	lsls	r2, r2, #20
    f570:	0b2d      	lsrs	r5, r5, #12
    f572:	4315      	orrs	r5, r2
    f574:	4a43      	ldr	r2, [pc, #268]	; (f684 <__aeabi_dmul+0x1e8>)
    f576:	051b      	lsls	r3, r3, #20
    f578:	4015      	ands	r5, r2
    f57a:	431d      	orrs	r5, r3
    f57c:	006d      	lsls	r5, r5, #1
    f57e:	07e4      	lsls	r4, r4, #31
    f580:	086d      	lsrs	r5, r5, #1
    f582:	4325      	orrs	r5, r4
    f584:	4640      	mov	r0, r8
    f586:	0029      	movs	r1, r5
    f588:	b007      	add	sp, #28
    f58a:	bc3c      	pop	{r2, r3, r4, r5}
    f58c:	4690      	mov	r8, r2
    f58e:	4699      	mov	r9, r3
    f590:	46a2      	mov	sl, r4
    f592:	46ab      	mov	fp, r5
    f594:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f596:	4303      	orrs	r3, r0
    f598:	d052      	beq.n	f640 <__aeabi_dmul+0x1a4>
    f59a:	465b      	mov	r3, fp
    f59c:	2b00      	cmp	r3, #0
    f59e:	d100      	bne.n	f5a2 <__aeabi_dmul+0x106>
    f5a0:	e18a      	b.n	f8b8 <__aeabi_dmul+0x41c>
    f5a2:	4658      	mov	r0, fp
    f5a4:	f000 fa2a 	bl	f9fc <__clzsi2>
    f5a8:	0003      	movs	r3, r0
    f5aa:	3b0b      	subs	r3, #11
    f5ac:	2b1c      	cmp	r3, #28
    f5ae:	dd00      	ble.n	f5b2 <__aeabi_dmul+0x116>
    f5b0:	e17b      	b.n	f8aa <__aeabi_dmul+0x40e>
    f5b2:	221d      	movs	r2, #29
    f5b4:	1ad3      	subs	r3, r2, r3
    f5b6:	003a      	movs	r2, r7
    f5b8:	0001      	movs	r1, r0
    f5ba:	465d      	mov	r5, fp
    f5bc:	40da      	lsrs	r2, r3
    f5be:	3908      	subs	r1, #8
    f5c0:	408d      	lsls	r5, r1
    f5c2:	0013      	movs	r3, r2
    f5c4:	408f      	lsls	r7, r1
    f5c6:	432b      	orrs	r3, r5
    f5c8:	469b      	mov	fp, r3
    f5ca:	46b8      	mov	r8, r7
    f5cc:	4b2e      	ldr	r3, [pc, #184]	; (f688 <__aeabi_dmul+0x1ec>)
    f5ce:	2700      	movs	r7, #0
    f5d0:	469c      	mov	ip, r3
    f5d2:	2300      	movs	r3, #0
    f5d4:	4460      	add	r0, ip
    f5d6:	4246      	negs	r6, r0
    f5d8:	9301      	str	r3, [sp, #4]
    f5da:	e785      	b.n	f4e8 <__aeabi_dmul+0x4c>
    f5dc:	4652      	mov	r2, sl
    f5de:	432a      	orrs	r2, r5
    f5e0:	d12c      	bne.n	f63c <__aeabi_dmul+0x1a0>
    f5e2:	2500      	movs	r5, #0
    f5e4:	2300      	movs	r3, #0
    f5e6:	2202      	movs	r2, #2
    f5e8:	e797      	b.n	f51a <__aeabi_dmul+0x7e>
    f5ea:	4652      	mov	r2, sl
    f5ec:	432a      	orrs	r2, r5
    f5ee:	d021      	beq.n	f634 <__aeabi_dmul+0x198>
    f5f0:	2d00      	cmp	r5, #0
    f5f2:	d100      	bne.n	f5f6 <__aeabi_dmul+0x15a>
    f5f4:	e154      	b.n	f8a0 <__aeabi_dmul+0x404>
    f5f6:	0028      	movs	r0, r5
    f5f8:	f000 fa00 	bl	f9fc <__clzsi2>
    f5fc:	0003      	movs	r3, r0
    f5fe:	3b0b      	subs	r3, #11
    f600:	2b1c      	cmp	r3, #28
    f602:	dd00      	ble.n	f606 <__aeabi_dmul+0x16a>
    f604:	e146      	b.n	f894 <__aeabi_dmul+0x3f8>
    f606:	211d      	movs	r1, #29
    f608:	1acb      	subs	r3, r1, r3
    f60a:	4651      	mov	r1, sl
    f60c:	0002      	movs	r2, r0
    f60e:	40d9      	lsrs	r1, r3
    f610:	4653      	mov	r3, sl
    f612:	3a08      	subs	r2, #8
    f614:	4095      	lsls	r5, r2
    f616:	4093      	lsls	r3, r2
    f618:	430d      	orrs	r5, r1
    f61a:	4a1b      	ldr	r2, [pc, #108]	; (f688 <__aeabi_dmul+0x1ec>)
    f61c:	4694      	mov	ip, r2
    f61e:	4460      	add	r0, ip
    f620:	4240      	negs	r0, r0
    f622:	2200      	movs	r2, #0
    f624:	e779      	b.n	f51a <__aeabi_dmul+0x7e>
    f626:	2401      	movs	r4, #1
    f628:	2200      	movs	r2, #0
    f62a:	400c      	ands	r4, r1
    f62c:	4b12      	ldr	r3, [pc, #72]	; (f678 <__aeabi_dmul+0x1dc>)
    f62e:	2500      	movs	r5, #0
    f630:	4690      	mov	r8, r2
    f632:	e799      	b.n	f568 <__aeabi_dmul+0xcc>
    f634:	2500      	movs	r5, #0
    f636:	2300      	movs	r3, #0
    f638:	2201      	movs	r2, #1
    f63a:	e76e      	b.n	f51a <__aeabi_dmul+0x7e>
    f63c:	2203      	movs	r2, #3
    f63e:	e76c      	b.n	f51a <__aeabi_dmul+0x7e>
    f640:	2300      	movs	r3, #0
    f642:	469b      	mov	fp, r3
    f644:	4698      	mov	r8, r3
    f646:	3301      	adds	r3, #1
    f648:	2704      	movs	r7, #4
    f64a:	9301      	str	r3, [sp, #4]
    f64c:	e74c      	b.n	f4e8 <__aeabi_dmul+0x4c>
    f64e:	2303      	movs	r3, #3
    f650:	270c      	movs	r7, #12
    f652:	9301      	str	r3, [sp, #4]
    f654:	e748      	b.n	f4e8 <__aeabi_dmul+0x4c>
    f656:	2300      	movs	r3, #0
    f658:	2580      	movs	r5, #128	; 0x80
    f65a:	4698      	mov	r8, r3
    f65c:	2400      	movs	r4, #0
    f65e:	032d      	lsls	r5, r5, #12
    f660:	4b05      	ldr	r3, [pc, #20]	; (f678 <__aeabi_dmul+0x1dc>)
    f662:	e781      	b.n	f568 <__aeabi_dmul+0xcc>
    f664:	465d      	mov	r5, fp
    f666:	4643      	mov	r3, r8
    f668:	9a01      	ldr	r2, [sp, #4]
    f66a:	e76f      	b.n	f54c <__aeabi_dmul+0xb0>
    f66c:	465d      	mov	r5, fp
    f66e:	4643      	mov	r3, r8
    f670:	0021      	movs	r1, r4
    f672:	9a01      	ldr	r2, [sp, #4]
    f674:	e76a      	b.n	f54c <__aeabi_dmul+0xb0>
    f676:	46c0      	nop			; (mov r8, r8)
    f678:	000007ff 	.word	0x000007ff
    f67c:	fffffc01 	.word	0xfffffc01
    f680:	000129ec 	.word	0x000129ec
    f684:	800fffff 	.word	0x800fffff
    f688:	000003f3 	.word	0x000003f3
    f68c:	4642      	mov	r2, r8
    f68e:	0c12      	lsrs	r2, r2, #16
    f690:	4691      	mov	r9, r2
    f692:	0c1a      	lsrs	r2, r3, #16
    f694:	4694      	mov	ip, r2
    f696:	4642      	mov	r2, r8
    f698:	0417      	lsls	r7, r2, #16
    f69a:	464a      	mov	r2, r9
    f69c:	041b      	lsls	r3, r3, #16
    f69e:	0c1b      	lsrs	r3, r3, #16
    f6a0:	435a      	muls	r2, r3
    f6a2:	4660      	mov	r0, ip
    f6a4:	4690      	mov	r8, r2
    f6a6:	464a      	mov	r2, r9
    f6a8:	4342      	muls	r2, r0
    f6aa:	0010      	movs	r0, r2
    f6ac:	9203      	str	r2, [sp, #12]
    f6ae:	4662      	mov	r2, ip
    f6b0:	001c      	movs	r4, r3
    f6b2:	0c3f      	lsrs	r7, r7, #16
    f6b4:	437a      	muls	r2, r7
    f6b6:	437c      	muls	r4, r7
    f6b8:	4442      	add	r2, r8
    f6ba:	9201      	str	r2, [sp, #4]
    f6bc:	0c22      	lsrs	r2, r4, #16
    f6be:	4692      	mov	sl, r2
    f6c0:	9a01      	ldr	r2, [sp, #4]
    f6c2:	4452      	add	r2, sl
    f6c4:	4590      	cmp	r8, r2
    f6c6:	d906      	bls.n	f6d6 <__aeabi_dmul+0x23a>
    f6c8:	4682      	mov	sl, r0
    f6ca:	2080      	movs	r0, #128	; 0x80
    f6cc:	0240      	lsls	r0, r0, #9
    f6ce:	4680      	mov	r8, r0
    f6d0:	44c2      	add	sl, r8
    f6d2:	4650      	mov	r0, sl
    f6d4:	9003      	str	r0, [sp, #12]
    f6d6:	0c10      	lsrs	r0, r2, #16
    f6d8:	9004      	str	r0, [sp, #16]
    f6da:	4648      	mov	r0, r9
    f6dc:	0424      	lsls	r4, r4, #16
    f6de:	0c24      	lsrs	r4, r4, #16
    f6e0:	0412      	lsls	r2, r2, #16
    f6e2:	1912      	adds	r2, r2, r4
    f6e4:	9205      	str	r2, [sp, #20]
    f6e6:	0c2a      	lsrs	r2, r5, #16
    f6e8:	042d      	lsls	r5, r5, #16
    f6ea:	0c2d      	lsrs	r5, r5, #16
    f6ec:	4368      	muls	r0, r5
    f6ee:	002c      	movs	r4, r5
    f6f0:	4682      	mov	sl, r0
    f6f2:	4648      	mov	r0, r9
    f6f4:	437c      	muls	r4, r7
    f6f6:	4350      	muls	r0, r2
    f6f8:	4681      	mov	r9, r0
    f6fa:	0c20      	lsrs	r0, r4, #16
    f6fc:	4680      	mov	r8, r0
    f6fe:	4357      	muls	r7, r2
    f700:	4457      	add	r7, sl
    f702:	4447      	add	r7, r8
    f704:	45ba      	cmp	sl, r7
    f706:	d903      	bls.n	f710 <__aeabi_dmul+0x274>
    f708:	2080      	movs	r0, #128	; 0x80
    f70a:	0240      	lsls	r0, r0, #9
    f70c:	4680      	mov	r8, r0
    f70e:	44c1      	add	r9, r8
    f710:	0c38      	lsrs	r0, r7, #16
    f712:	043f      	lsls	r7, r7, #16
    f714:	46b8      	mov	r8, r7
    f716:	4448      	add	r0, r9
    f718:	0424      	lsls	r4, r4, #16
    f71a:	0c24      	lsrs	r4, r4, #16
    f71c:	9001      	str	r0, [sp, #4]
    f71e:	9804      	ldr	r0, [sp, #16]
    f720:	44a0      	add	r8, r4
    f722:	4440      	add	r0, r8
    f724:	9004      	str	r0, [sp, #16]
    f726:	4658      	mov	r0, fp
    f728:	0c00      	lsrs	r0, r0, #16
    f72a:	4681      	mov	r9, r0
    f72c:	4658      	mov	r0, fp
    f72e:	0404      	lsls	r4, r0, #16
    f730:	0c20      	lsrs	r0, r4, #16
    f732:	4682      	mov	sl, r0
    f734:	0007      	movs	r7, r0
    f736:	4648      	mov	r0, r9
    f738:	435f      	muls	r7, r3
    f73a:	464c      	mov	r4, r9
    f73c:	4343      	muls	r3, r0
    f73e:	4660      	mov	r0, ip
    f740:	4360      	muls	r0, r4
    f742:	4664      	mov	r4, ip
    f744:	4683      	mov	fp, r0
    f746:	4650      	mov	r0, sl
    f748:	4344      	muls	r4, r0
    f74a:	0c38      	lsrs	r0, r7, #16
    f74c:	4684      	mov	ip, r0
    f74e:	18e4      	adds	r4, r4, r3
    f750:	4464      	add	r4, ip
    f752:	42a3      	cmp	r3, r4
    f754:	d903      	bls.n	f75e <__aeabi_dmul+0x2c2>
    f756:	2380      	movs	r3, #128	; 0x80
    f758:	025b      	lsls	r3, r3, #9
    f75a:	469c      	mov	ip, r3
    f75c:	44e3      	add	fp, ip
    f75e:	4648      	mov	r0, r9
    f760:	043f      	lsls	r7, r7, #16
    f762:	0c23      	lsrs	r3, r4, #16
    f764:	0c3f      	lsrs	r7, r7, #16
    f766:	0424      	lsls	r4, r4, #16
    f768:	19e4      	adds	r4, r4, r7
    f76a:	4657      	mov	r7, sl
    f76c:	4368      	muls	r0, r5
    f76e:	436f      	muls	r7, r5
    f770:	4684      	mov	ip, r0
    f772:	464d      	mov	r5, r9
    f774:	4650      	mov	r0, sl
    f776:	4355      	muls	r5, r2
    f778:	4342      	muls	r2, r0
    f77a:	0c38      	lsrs	r0, r7, #16
    f77c:	4681      	mov	r9, r0
    f77e:	4462      	add	r2, ip
    f780:	444a      	add	r2, r9
    f782:	445b      	add	r3, fp
    f784:	4594      	cmp	ip, r2
    f786:	d903      	bls.n	f790 <__aeabi_dmul+0x2f4>
    f788:	2080      	movs	r0, #128	; 0x80
    f78a:	0240      	lsls	r0, r0, #9
    f78c:	4684      	mov	ip, r0
    f78e:	4465      	add	r5, ip
    f790:	9803      	ldr	r0, [sp, #12]
    f792:	043f      	lsls	r7, r7, #16
    f794:	4683      	mov	fp, r0
    f796:	9804      	ldr	r0, [sp, #16]
    f798:	0c3f      	lsrs	r7, r7, #16
    f79a:	4684      	mov	ip, r0
    f79c:	44e3      	add	fp, ip
    f79e:	45c3      	cmp	fp, r8
    f7a0:	4180      	sbcs	r0, r0
    f7a2:	4240      	negs	r0, r0
    f7a4:	4682      	mov	sl, r0
    f7a6:	0410      	lsls	r0, r2, #16
    f7a8:	4684      	mov	ip, r0
    f7aa:	9801      	ldr	r0, [sp, #4]
    f7ac:	4467      	add	r7, ip
    f7ae:	4684      	mov	ip, r0
    f7b0:	4467      	add	r7, ip
    f7b2:	44a3      	add	fp, r4
    f7b4:	46bc      	mov	ip, r7
    f7b6:	45a3      	cmp	fp, r4
    f7b8:	41a4      	sbcs	r4, r4
    f7ba:	4699      	mov	r9, r3
    f7bc:	44d4      	add	ip, sl
    f7be:	4264      	negs	r4, r4
    f7c0:	4287      	cmp	r7, r0
    f7c2:	41bf      	sbcs	r7, r7
    f7c4:	45d4      	cmp	ip, sl
    f7c6:	4180      	sbcs	r0, r0
    f7c8:	44e1      	add	r9, ip
    f7ca:	46a0      	mov	r8, r4
    f7cc:	4599      	cmp	r9, r3
    f7ce:	419b      	sbcs	r3, r3
    f7d0:	427f      	negs	r7, r7
    f7d2:	4240      	negs	r0, r0
    f7d4:	44c8      	add	r8, r9
    f7d6:	4307      	orrs	r7, r0
    f7d8:	0c12      	lsrs	r2, r2, #16
    f7da:	18ba      	adds	r2, r7, r2
    f7dc:	45a0      	cmp	r8, r4
    f7de:	41a4      	sbcs	r4, r4
    f7e0:	425f      	negs	r7, r3
    f7e2:	003b      	movs	r3, r7
    f7e4:	4264      	negs	r4, r4
    f7e6:	4323      	orrs	r3, r4
    f7e8:	18d7      	adds	r7, r2, r3
    f7ea:	4643      	mov	r3, r8
    f7ec:	197d      	adds	r5, r7, r5
    f7ee:	0ddb      	lsrs	r3, r3, #23
    f7f0:	026d      	lsls	r5, r5, #9
    f7f2:	431d      	orrs	r5, r3
    f7f4:	465b      	mov	r3, fp
    f7f6:	025a      	lsls	r2, r3, #9
    f7f8:	9b05      	ldr	r3, [sp, #20]
    f7fa:	431a      	orrs	r2, r3
    f7fc:	1e53      	subs	r3, r2, #1
    f7fe:	419a      	sbcs	r2, r3
    f800:	465b      	mov	r3, fp
    f802:	0ddb      	lsrs	r3, r3, #23
    f804:	431a      	orrs	r2, r3
    f806:	4643      	mov	r3, r8
    f808:	025b      	lsls	r3, r3, #9
    f80a:	4313      	orrs	r3, r2
    f80c:	01ea      	lsls	r2, r5, #7
    f80e:	d507      	bpl.n	f820 <__aeabi_dmul+0x384>
    f810:	2201      	movs	r2, #1
    f812:	085c      	lsrs	r4, r3, #1
    f814:	4013      	ands	r3, r2
    f816:	4323      	orrs	r3, r4
    f818:	07ea      	lsls	r2, r5, #31
    f81a:	9e02      	ldr	r6, [sp, #8]
    f81c:	4313      	orrs	r3, r2
    f81e:	086d      	lsrs	r5, r5, #1
    f820:	4a57      	ldr	r2, [pc, #348]	; (f980 <__aeabi_dmul+0x4e4>)
    f822:	18b2      	adds	r2, r6, r2
    f824:	2a00      	cmp	r2, #0
    f826:	dd4b      	ble.n	f8c0 <__aeabi_dmul+0x424>
    f828:	0758      	lsls	r0, r3, #29
    f82a:	d009      	beq.n	f840 <__aeabi_dmul+0x3a4>
    f82c:	200f      	movs	r0, #15
    f82e:	4018      	ands	r0, r3
    f830:	2804      	cmp	r0, #4
    f832:	d005      	beq.n	f840 <__aeabi_dmul+0x3a4>
    f834:	1d18      	adds	r0, r3, #4
    f836:	4298      	cmp	r0, r3
    f838:	419b      	sbcs	r3, r3
    f83a:	425b      	negs	r3, r3
    f83c:	18ed      	adds	r5, r5, r3
    f83e:	0003      	movs	r3, r0
    f840:	01e8      	lsls	r0, r5, #7
    f842:	d504      	bpl.n	f84e <__aeabi_dmul+0x3b2>
    f844:	4a4f      	ldr	r2, [pc, #316]	; (f984 <__aeabi_dmul+0x4e8>)
    f846:	4015      	ands	r5, r2
    f848:	2280      	movs	r2, #128	; 0x80
    f84a:	00d2      	lsls	r2, r2, #3
    f84c:	18b2      	adds	r2, r6, r2
    f84e:	484e      	ldr	r0, [pc, #312]	; (f988 <__aeabi_dmul+0x4ec>)
    f850:	4282      	cmp	r2, r0
    f852:	dd00      	ble.n	f856 <__aeabi_dmul+0x3ba>
    f854:	e6e7      	b.n	f626 <__aeabi_dmul+0x18a>
    f856:	2401      	movs	r4, #1
    f858:	08db      	lsrs	r3, r3, #3
    f85a:	0768      	lsls	r0, r5, #29
    f85c:	4318      	orrs	r0, r3
    f85e:	026d      	lsls	r5, r5, #9
    f860:	0553      	lsls	r3, r2, #21
    f862:	4680      	mov	r8, r0
    f864:	0b2d      	lsrs	r5, r5, #12
    f866:	0d5b      	lsrs	r3, r3, #21
    f868:	400c      	ands	r4, r1
    f86a:	e67d      	b.n	f568 <__aeabi_dmul+0xcc>
    f86c:	2280      	movs	r2, #128	; 0x80
    f86e:	4659      	mov	r1, fp
    f870:	0312      	lsls	r2, r2, #12
    f872:	4211      	tst	r1, r2
    f874:	d008      	beq.n	f888 <__aeabi_dmul+0x3ec>
    f876:	4215      	tst	r5, r2
    f878:	d106      	bne.n	f888 <__aeabi_dmul+0x3ec>
    f87a:	4315      	orrs	r5, r2
    f87c:	032d      	lsls	r5, r5, #12
    f87e:	4698      	mov	r8, r3
    f880:	0b2d      	lsrs	r5, r5, #12
    f882:	464c      	mov	r4, r9
    f884:	4b41      	ldr	r3, [pc, #260]	; (f98c <__aeabi_dmul+0x4f0>)
    f886:	e66f      	b.n	f568 <__aeabi_dmul+0xcc>
    f888:	465d      	mov	r5, fp
    f88a:	4315      	orrs	r5, r2
    f88c:	032d      	lsls	r5, r5, #12
    f88e:	0b2d      	lsrs	r5, r5, #12
    f890:	4b3e      	ldr	r3, [pc, #248]	; (f98c <__aeabi_dmul+0x4f0>)
    f892:	e669      	b.n	f568 <__aeabi_dmul+0xcc>
    f894:	0003      	movs	r3, r0
    f896:	4655      	mov	r5, sl
    f898:	3b28      	subs	r3, #40	; 0x28
    f89a:	409d      	lsls	r5, r3
    f89c:	2300      	movs	r3, #0
    f89e:	e6bc      	b.n	f61a <__aeabi_dmul+0x17e>
    f8a0:	4650      	mov	r0, sl
    f8a2:	f000 f8ab 	bl	f9fc <__clzsi2>
    f8a6:	3020      	adds	r0, #32
    f8a8:	e6a8      	b.n	f5fc <__aeabi_dmul+0x160>
    f8aa:	0003      	movs	r3, r0
    f8ac:	3b28      	subs	r3, #40	; 0x28
    f8ae:	409f      	lsls	r7, r3
    f8b0:	2300      	movs	r3, #0
    f8b2:	46bb      	mov	fp, r7
    f8b4:	4698      	mov	r8, r3
    f8b6:	e689      	b.n	f5cc <__aeabi_dmul+0x130>
    f8b8:	f000 f8a0 	bl	f9fc <__clzsi2>
    f8bc:	3020      	adds	r0, #32
    f8be:	e673      	b.n	f5a8 <__aeabi_dmul+0x10c>
    f8c0:	2401      	movs	r4, #1
    f8c2:	1aa6      	subs	r6, r4, r2
    f8c4:	2e38      	cmp	r6, #56	; 0x38
    f8c6:	dd07      	ble.n	f8d8 <__aeabi_dmul+0x43c>
    f8c8:	2200      	movs	r2, #0
    f8ca:	400c      	ands	r4, r1
    f8cc:	2300      	movs	r3, #0
    f8ce:	2500      	movs	r5, #0
    f8d0:	4690      	mov	r8, r2
    f8d2:	e649      	b.n	f568 <__aeabi_dmul+0xcc>
    f8d4:	9e02      	ldr	r6, [sp, #8]
    f8d6:	e7a3      	b.n	f820 <__aeabi_dmul+0x384>
    f8d8:	2e1f      	cmp	r6, #31
    f8da:	dc20      	bgt.n	f91e <__aeabi_dmul+0x482>
    f8dc:	2220      	movs	r2, #32
    f8de:	002c      	movs	r4, r5
    f8e0:	0018      	movs	r0, r3
    f8e2:	1b92      	subs	r2, r2, r6
    f8e4:	40f0      	lsrs	r0, r6
    f8e6:	4094      	lsls	r4, r2
    f8e8:	4093      	lsls	r3, r2
    f8ea:	4304      	orrs	r4, r0
    f8ec:	1e58      	subs	r0, r3, #1
    f8ee:	4183      	sbcs	r3, r0
    f8f0:	431c      	orrs	r4, r3
    f8f2:	40f5      	lsrs	r5, r6
    f8f4:	0763      	lsls	r3, r4, #29
    f8f6:	d009      	beq.n	f90c <__aeabi_dmul+0x470>
    f8f8:	230f      	movs	r3, #15
    f8fa:	4023      	ands	r3, r4
    f8fc:	2b04      	cmp	r3, #4
    f8fe:	d005      	beq.n	f90c <__aeabi_dmul+0x470>
    f900:	0023      	movs	r3, r4
    f902:	1d1c      	adds	r4, r3, #4
    f904:	429c      	cmp	r4, r3
    f906:	4192      	sbcs	r2, r2
    f908:	4252      	negs	r2, r2
    f90a:	18ad      	adds	r5, r5, r2
    f90c:	022b      	lsls	r3, r5, #8
    f90e:	d51f      	bpl.n	f950 <__aeabi_dmul+0x4b4>
    f910:	2401      	movs	r4, #1
    f912:	2200      	movs	r2, #0
    f914:	400c      	ands	r4, r1
    f916:	2301      	movs	r3, #1
    f918:	2500      	movs	r5, #0
    f91a:	4690      	mov	r8, r2
    f91c:	e624      	b.n	f568 <__aeabi_dmul+0xcc>
    f91e:	201f      	movs	r0, #31
    f920:	002c      	movs	r4, r5
    f922:	4240      	negs	r0, r0
    f924:	1a82      	subs	r2, r0, r2
    f926:	40d4      	lsrs	r4, r2
    f928:	2e20      	cmp	r6, #32
    f92a:	d01c      	beq.n	f966 <__aeabi_dmul+0x4ca>
    f92c:	2240      	movs	r2, #64	; 0x40
    f92e:	1b96      	subs	r6, r2, r6
    f930:	40b5      	lsls	r5, r6
    f932:	432b      	orrs	r3, r5
    f934:	1e58      	subs	r0, r3, #1
    f936:	4183      	sbcs	r3, r0
    f938:	2007      	movs	r0, #7
    f93a:	4323      	orrs	r3, r4
    f93c:	4018      	ands	r0, r3
    f93e:	2500      	movs	r5, #0
    f940:	2800      	cmp	r0, #0
    f942:	d009      	beq.n	f958 <__aeabi_dmul+0x4bc>
    f944:	220f      	movs	r2, #15
    f946:	2500      	movs	r5, #0
    f948:	401a      	ands	r2, r3
    f94a:	001c      	movs	r4, r3
    f94c:	2a04      	cmp	r2, #4
    f94e:	d1d8      	bne.n	f902 <__aeabi_dmul+0x466>
    f950:	0023      	movs	r3, r4
    f952:	0768      	lsls	r0, r5, #29
    f954:	026d      	lsls	r5, r5, #9
    f956:	0b2d      	lsrs	r5, r5, #12
    f958:	2401      	movs	r4, #1
    f95a:	08db      	lsrs	r3, r3, #3
    f95c:	4303      	orrs	r3, r0
    f95e:	4698      	mov	r8, r3
    f960:	400c      	ands	r4, r1
    f962:	2300      	movs	r3, #0
    f964:	e600      	b.n	f568 <__aeabi_dmul+0xcc>
    f966:	2500      	movs	r5, #0
    f968:	e7e3      	b.n	f932 <__aeabi_dmul+0x496>
    f96a:	2280      	movs	r2, #128	; 0x80
    f96c:	2401      	movs	r4, #1
    f96e:	0312      	lsls	r2, r2, #12
    f970:	4315      	orrs	r5, r2
    f972:	032d      	lsls	r5, r5, #12
    f974:	4698      	mov	r8, r3
    f976:	0b2d      	lsrs	r5, r5, #12
    f978:	400c      	ands	r4, r1
    f97a:	4b04      	ldr	r3, [pc, #16]	; (f98c <__aeabi_dmul+0x4f0>)
    f97c:	e5f4      	b.n	f568 <__aeabi_dmul+0xcc>
    f97e:	46c0      	nop			; (mov r8, r8)
    f980:	000003ff 	.word	0x000003ff
    f984:	feffffff 	.word	0xfeffffff
    f988:	000007fe 	.word	0x000007fe
    f98c:	000007ff 	.word	0x000007ff

0000f990 <__aeabi_d2iz>:
    f990:	030b      	lsls	r3, r1, #12
    f992:	b530      	push	{r4, r5, lr}
    f994:	4d13      	ldr	r5, [pc, #76]	; (f9e4 <__aeabi_d2iz+0x54>)
    f996:	0b1a      	lsrs	r2, r3, #12
    f998:	004b      	lsls	r3, r1, #1
    f99a:	0d5b      	lsrs	r3, r3, #21
    f99c:	0fc9      	lsrs	r1, r1, #31
    f99e:	2400      	movs	r4, #0
    f9a0:	42ab      	cmp	r3, r5
    f9a2:	dd11      	ble.n	f9c8 <__aeabi_d2iz+0x38>
    f9a4:	4c10      	ldr	r4, [pc, #64]	; (f9e8 <__aeabi_d2iz+0x58>)
    f9a6:	42a3      	cmp	r3, r4
    f9a8:	dc10      	bgt.n	f9cc <__aeabi_d2iz+0x3c>
    f9aa:	2480      	movs	r4, #128	; 0x80
    f9ac:	0364      	lsls	r4, r4, #13
    f9ae:	4322      	orrs	r2, r4
    f9b0:	4c0e      	ldr	r4, [pc, #56]	; (f9ec <__aeabi_d2iz+0x5c>)
    f9b2:	1ae4      	subs	r4, r4, r3
    f9b4:	2c1f      	cmp	r4, #31
    f9b6:	dd0c      	ble.n	f9d2 <__aeabi_d2iz+0x42>
    f9b8:	480d      	ldr	r0, [pc, #52]	; (f9f0 <__aeabi_d2iz+0x60>)
    f9ba:	1ac3      	subs	r3, r0, r3
    f9bc:	40da      	lsrs	r2, r3
    f9be:	0013      	movs	r3, r2
    f9c0:	425c      	negs	r4, r3
    f9c2:	2900      	cmp	r1, #0
    f9c4:	d100      	bne.n	f9c8 <__aeabi_d2iz+0x38>
    f9c6:	001c      	movs	r4, r3
    f9c8:	0020      	movs	r0, r4
    f9ca:	bd30      	pop	{r4, r5, pc}
    f9cc:	4b09      	ldr	r3, [pc, #36]	; (f9f4 <__aeabi_d2iz+0x64>)
    f9ce:	18cc      	adds	r4, r1, r3
    f9d0:	e7fa      	b.n	f9c8 <__aeabi_d2iz+0x38>
    f9d2:	40e0      	lsrs	r0, r4
    f9d4:	4c08      	ldr	r4, [pc, #32]	; (f9f8 <__aeabi_d2iz+0x68>)
    f9d6:	46a4      	mov	ip, r4
    f9d8:	4463      	add	r3, ip
    f9da:	409a      	lsls	r2, r3
    f9dc:	0013      	movs	r3, r2
    f9de:	4303      	orrs	r3, r0
    f9e0:	e7ee      	b.n	f9c0 <__aeabi_d2iz+0x30>
    f9e2:	46c0      	nop			; (mov r8, r8)
    f9e4:	000003fe 	.word	0x000003fe
    f9e8:	0000041d 	.word	0x0000041d
    f9ec:	00000433 	.word	0x00000433
    f9f0:	00000413 	.word	0x00000413
    f9f4:	7fffffff 	.word	0x7fffffff
    f9f8:	fffffbed 	.word	0xfffffbed

0000f9fc <__clzsi2>:
    f9fc:	211c      	movs	r1, #28
    f9fe:	2301      	movs	r3, #1
    fa00:	041b      	lsls	r3, r3, #16
    fa02:	4298      	cmp	r0, r3
    fa04:	d301      	bcc.n	fa0a <__clzsi2+0xe>
    fa06:	0c00      	lsrs	r0, r0, #16
    fa08:	3910      	subs	r1, #16
    fa0a:	0a1b      	lsrs	r3, r3, #8
    fa0c:	4298      	cmp	r0, r3
    fa0e:	d301      	bcc.n	fa14 <__clzsi2+0x18>
    fa10:	0a00      	lsrs	r0, r0, #8
    fa12:	3908      	subs	r1, #8
    fa14:	091b      	lsrs	r3, r3, #4
    fa16:	4298      	cmp	r0, r3
    fa18:	d301      	bcc.n	fa1e <__clzsi2+0x22>
    fa1a:	0900      	lsrs	r0, r0, #4
    fa1c:	3904      	subs	r1, #4
    fa1e:	a202      	add	r2, pc, #8	; (adr r2, fa28 <__clzsi2+0x2c>)
    fa20:	5c10      	ldrb	r0, [r2, r0]
    fa22:	1840      	adds	r0, r0, r1
    fa24:	4770      	bx	lr
    fa26:	46c0      	nop			; (mov r8, r8)
    fa28:	02020304 	.word	0x02020304
    fa2c:	01010101 	.word	0x01010101
	...

0000fa38 <__clzdi2>:
    fa38:	b510      	push	{r4, lr}
    fa3a:	2900      	cmp	r1, #0
    fa3c:	d103      	bne.n	fa46 <__clzdi2+0xe>
    fa3e:	f7ff ffdd 	bl	f9fc <__clzsi2>
    fa42:	3020      	adds	r0, #32
    fa44:	e002      	b.n	fa4c <__clzdi2+0x14>
    fa46:	1c08      	adds	r0, r1, #0
    fa48:	f7ff ffd8 	bl	f9fc <__clzsi2>
    fa4c:	bd10      	pop	{r4, pc}
    fa4e:	46c0      	nop			; (mov r8, r8)

0000fa50 <__assert_func>:
    fa50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fa52:	001d      	movs	r5, r3
    fa54:	4b0a      	ldr	r3, [pc, #40]	; (fa80 <__assert_func+0x30>)
    fa56:	0006      	movs	r6, r0
    fa58:	681b      	ldr	r3, [r3, #0]
    fa5a:	68d8      	ldr	r0, [r3, #12]
    fa5c:	2a00      	cmp	r2, #0
    fa5e:	d102      	bne.n	fa66 <__assert_func+0x16>
    fa60:	4c08      	ldr	r4, [pc, #32]	; (fa84 <__assert_func+0x34>)
    fa62:	0023      	movs	r3, r4
    fa64:	e001      	b.n	fa6a <__assert_func+0x1a>
    fa66:	0013      	movs	r3, r2
    fa68:	4c07      	ldr	r4, [pc, #28]	; (fa88 <__assert_func+0x38>)
    fa6a:	9302      	str	r3, [sp, #8]
    fa6c:	9100      	str	r1, [sp, #0]
    fa6e:	0033      	movs	r3, r6
    fa70:	002a      	movs	r2, r5
    fa72:	4906      	ldr	r1, [pc, #24]	; (fa8c <__assert_func+0x3c>)
    fa74:	9401      	str	r4, [sp, #4]
    fa76:	f000 f811 	bl	fa9c <fiprintf>
    fa7a:	f000 fe79 	bl	10770 <abort>
    fa7e:	46c0      	nop			; (mov r8, r8)
    fa80:	20000094 	.word	0x20000094
    fa84:	00012a67 	.word	0x00012a67
    fa88:	00012a2c 	.word	0x00012a2c
    fa8c:	00012a39 	.word	0x00012a39

0000fa90 <atoi>:
    fa90:	b510      	push	{r4, lr}
    fa92:	220a      	movs	r2, #10
    fa94:	2100      	movs	r1, #0
    fa96:	f000 fd91 	bl	105bc <strtol>
    fa9a:	bd10      	pop	{r4, pc}

0000fa9c <fiprintf>:
    fa9c:	b40e      	push	{r1, r2, r3}
    fa9e:	b503      	push	{r0, r1, lr}
    faa0:	0001      	movs	r1, r0
    faa2:	ab03      	add	r3, sp, #12
    faa4:	4804      	ldr	r0, [pc, #16]	; (fab8 <fiprintf+0x1c>)
    faa6:	cb04      	ldmia	r3!, {r2}
    faa8:	6800      	ldr	r0, [r0, #0]
    faaa:	9301      	str	r3, [sp, #4]
    faac:	f000 f864 	bl	fb78 <_vfiprintf_r>
    fab0:	b002      	add	sp, #8
    fab2:	bc08      	pop	{r3}
    fab4:	b003      	add	sp, #12
    fab6:	4718      	bx	r3
    fab8:	20000094 	.word	0x20000094

0000fabc <__libc_init_array>:
    fabc:	4b0e      	ldr	r3, [pc, #56]	; (faf8 <__libc_init_array+0x3c>)
    fabe:	b570      	push	{r4, r5, r6, lr}
    fac0:	2500      	movs	r5, #0
    fac2:	001e      	movs	r6, r3
    fac4:	4c0d      	ldr	r4, [pc, #52]	; (fafc <__libc_init_array+0x40>)
    fac6:	1ae4      	subs	r4, r4, r3
    fac8:	10a4      	asrs	r4, r4, #2
    faca:	42a5      	cmp	r5, r4
    facc:	d004      	beq.n	fad8 <__libc_init_array+0x1c>
    face:	00ab      	lsls	r3, r5, #2
    fad0:	58f3      	ldr	r3, [r6, r3]
    fad2:	4798      	blx	r3
    fad4:	3501      	adds	r5, #1
    fad6:	e7f8      	b.n	faca <__libc_init_array+0xe>
    fad8:	f003 f894 	bl	12c04 <_init>
    fadc:	4b08      	ldr	r3, [pc, #32]	; (fb00 <__libc_init_array+0x44>)
    fade:	2500      	movs	r5, #0
    fae0:	001e      	movs	r6, r3
    fae2:	4c08      	ldr	r4, [pc, #32]	; (fb04 <__libc_init_array+0x48>)
    fae4:	1ae4      	subs	r4, r4, r3
    fae6:	10a4      	asrs	r4, r4, #2
    fae8:	42a5      	cmp	r5, r4
    faea:	d004      	beq.n	faf6 <__libc_init_array+0x3a>
    faec:	00ab      	lsls	r3, r5, #2
    faee:	58f3      	ldr	r3, [r6, r3]
    faf0:	4798      	blx	r3
    faf2:	3501      	adds	r5, #1
    faf4:	e7f8      	b.n	fae8 <__libc_init_array+0x2c>
    faf6:	bd70      	pop	{r4, r5, r6, pc}
    faf8:	00012c10 	.word	0x00012c10
    fafc:	00012c10 	.word	0x00012c10
    fb00:	00012c10 	.word	0x00012c10
    fb04:	00012c14 	.word	0x00012c14

0000fb08 <memcpy>:
    fb08:	2300      	movs	r3, #0
    fb0a:	b510      	push	{r4, lr}
    fb0c:	429a      	cmp	r2, r3
    fb0e:	d003      	beq.n	fb18 <memcpy+0x10>
    fb10:	5ccc      	ldrb	r4, [r1, r3]
    fb12:	54c4      	strb	r4, [r0, r3]
    fb14:	3301      	adds	r3, #1
    fb16:	e7f9      	b.n	fb0c <memcpy+0x4>
    fb18:	bd10      	pop	{r4, pc}

0000fb1a <memset>:
    fb1a:	0003      	movs	r3, r0
    fb1c:	1882      	adds	r2, r0, r2
    fb1e:	4293      	cmp	r3, r2
    fb20:	d002      	beq.n	fb28 <memset+0xe>
    fb22:	7019      	strb	r1, [r3, #0]
    fb24:	3301      	adds	r3, #1
    fb26:	e7fa      	b.n	fb1e <memset+0x4>
    fb28:	4770      	bx	lr

0000fb2a <__sfputc_r>:
    fb2a:	6893      	ldr	r3, [r2, #8]
    fb2c:	b510      	push	{r4, lr}
    fb2e:	3b01      	subs	r3, #1
    fb30:	6093      	str	r3, [r2, #8]
    fb32:	2b00      	cmp	r3, #0
    fb34:	da05      	bge.n	fb42 <__sfputc_r+0x18>
    fb36:	6994      	ldr	r4, [r2, #24]
    fb38:	42a3      	cmp	r3, r4
    fb3a:	db08      	blt.n	fb4e <__sfputc_r+0x24>
    fb3c:	b2cb      	uxtb	r3, r1
    fb3e:	2b0a      	cmp	r3, #10
    fb40:	d005      	beq.n	fb4e <__sfputc_r+0x24>
    fb42:	6813      	ldr	r3, [r2, #0]
    fb44:	1c58      	adds	r0, r3, #1
    fb46:	6010      	str	r0, [r2, #0]
    fb48:	7019      	strb	r1, [r3, #0]
    fb4a:	b2c8      	uxtb	r0, r1
    fb4c:	e001      	b.n	fb52 <__sfputc_r+0x28>
    fb4e:	f000 fd41 	bl	105d4 <__swbuf_r>
    fb52:	bd10      	pop	{r4, pc}

0000fb54 <__sfputs_r>:
    fb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb56:	0006      	movs	r6, r0
    fb58:	000f      	movs	r7, r1
    fb5a:	0014      	movs	r4, r2
    fb5c:	18d5      	adds	r5, r2, r3
    fb5e:	42ac      	cmp	r4, r5
    fb60:	d008      	beq.n	fb74 <__sfputs_r+0x20>
    fb62:	7821      	ldrb	r1, [r4, #0]
    fb64:	003a      	movs	r2, r7
    fb66:	0030      	movs	r0, r6
    fb68:	f7ff ffdf 	bl	fb2a <__sfputc_r>
    fb6c:	3401      	adds	r4, #1
    fb6e:	1c43      	adds	r3, r0, #1
    fb70:	d1f5      	bne.n	fb5e <__sfputs_r+0xa>
    fb72:	e000      	b.n	fb76 <__sfputs_r+0x22>
    fb74:	2000      	movs	r0, #0
    fb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fb78 <_vfiprintf_r>:
    fb78:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb7a:	b09f      	sub	sp, #124	; 0x7c
    fb7c:	0006      	movs	r6, r0
    fb7e:	000f      	movs	r7, r1
    fb80:	9202      	str	r2, [sp, #8]
    fb82:	9305      	str	r3, [sp, #20]
    fb84:	2800      	cmp	r0, #0
    fb86:	d004      	beq.n	fb92 <_vfiprintf_r+0x1a>
    fb88:	6983      	ldr	r3, [r0, #24]
    fb8a:	2b00      	cmp	r3, #0
    fb8c:	d101      	bne.n	fb92 <_vfiprintf_r+0x1a>
    fb8e:	f000 feeb 	bl	10968 <__sinit>
    fb92:	4b7f      	ldr	r3, [pc, #508]	; (fd90 <_vfiprintf_r+0x218>)
    fb94:	429f      	cmp	r7, r3
    fb96:	d101      	bne.n	fb9c <_vfiprintf_r+0x24>
    fb98:	6877      	ldr	r7, [r6, #4]
    fb9a:	e008      	b.n	fbae <_vfiprintf_r+0x36>
    fb9c:	4b7d      	ldr	r3, [pc, #500]	; (fd94 <_vfiprintf_r+0x21c>)
    fb9e:	429f      	cmp	r7, r3
    fba0:	d101      	bne.n	fba6 <_vfiprintf_r+0x2e>
    fba2:	68b7      	ldr	r7, [r6, #8]
    fba4:	e003      	b.n	fbae <_vfiprintf_r+0x36>
    fba6:	4b7c      	ldr	r3, [pc, #496]	; (fd98 <_vfiprintf_r+0x220>)
    fba8:	429f      	cmp	r7, r3
    fbaa:	d100      	bne.n	fbae <_vfiprintf_r+0x36>
    fbac:	68f7      	ldr	r7, [r6, #12]
    fbae:	89bb      	ldrh	r3, [r7, #12]
    fbb0:	071b      	lsls	r3, r3, #28
    fbb2:	d50a      	bpl.n	fbca <_vfiprintf_r+0x52>
    fbb4:	693b      	ldr	r3, [r7, #16]
    fbb6:	2b00      	cmp	r3, #0
    fbb8:	d007      	beq.n	fbca <_vfiprintf_r+0x52>
    fbba:	2300      	movs	r3, #0
    fbbc:	ad06      	add	r5, sp, #24
    fbbe:	616b      	str	r3, [r5, #20]
    fbc0:	3320      	adds	r3, #32
    fbc2:	766b      	strb	r3, [r5, #25]
    fbc4:	3310      	adds	r3, #16
    fbc6:	76ab      	strb	r3, [r5, #26]
    fbc8:	e03d      	b.n	fc46 <_vfiprintf_r+0xce>
    fbca:	0039      	movs	r1, r7
    fbcc:	0030      	movs	r0, r6
    fbce:	f000 fd59 	bl	10684 <__swsetup_r>
    fbd2:	2800      	cmp	r0, #0
    fbd4:	d0f1      	beq.n	fbba <_vfiprintf_r+0x42>
    fbd6:	2001      	movs	r0, #1
    fbd8:	4240      	negs	r0, r0
    fbda:	e0d6      	b.n	fd8a <_vfiprintf_r+0x212>
    fbdc:	9a05      	ldr	r2, [sp, #20]
    fbde:	1d11      	adds	r1, r2, #4
    fbe0:	6812      	ldr	r2, [r2, #0]
    fbe2:	9105      	str	r1, [sp, #20]
    fbe4:	2a00      	cmp	r2, #0
    fbe6:	da00      	bge.n	fbea <_vfiprintf_r+0x72>
    fbe8:	e07f      	b.n	fcea <_vfiprintf_r+0x172>
    fbea:	9209      	str	r2, [sp, #36]	; 0x24
    fbec:	3401      	adds	r4, #1
    fbee:	7823      	ldrb	r3, [r4, #0]
    fbf0:	2b2e      	cmp	r3, #46	; 0x2e
    fbf2:	d100      	bne.n	fbf6 <_vfiprintf_r+0x7e>
    fbf4:	e08d      	b.n	fd12 <_vfiprintf_r+0x19a>
    fbf6:	7821      	ldrb	r1, [r4, #0]
    fbf8:	2203      	movs	r2, #3
    fbfa:	4868      	ldr	r0, [pc, #416]	; (fd9c <_vfiprintf_r+0x224>)
    fbfc:	f000 ffb6 	bl	10b6c <memchr>
    fc00:	2800      	cmp	r0, #0
    fc02:	d007      	beq.n	fc14 <_vfiprintf_r+0x9c>
    fc04:	4b65      	ldr	r3, [pc, #404]	; (fd9c <_vfiprintf_r+0x224>)
    fc06:	682a      	ldr	r2, [r5, #0]
    fc08:	1ac0      	subs	r0, r0, r3
    fc0a:	2340      	movs	r3, #64	; 0x40
    fc0c:	4083      	lsls	r3, r0
    fc0e:	4313      	orrs	r3, r2
    fc10:	602b      	str	r3, [r5, #0]
    fc12:	3401      	adds	r4, #1
    fc14:	7821      	ldrb	r1, [r4, #0]
    fc16:	1c63      	adds	r3, r4, #1
    fc18:	2206      	movs	r2, #6
    fc1a:	4861      	ldr	r0, [pc, #388]	; (fda0 <_vfiprintf_r+0x228>)
    fc1c:	9302      	str	r3, [sp, #8]
    fc1e:	7629      	strb	r1, [r5, #24]
    fc20:	f000 ffa4 	bl	10b6c <memchr>
    fc24:	2800      	cmp	r0, #0
    fc26:	d100      	bne.n	fc2a <_vfiprintf_r+0xb2>
    fc28:	e09d      	b.n	fd66 <_vfiprintf_r+0x1ee>
    fc2a:	4b5e      	ldr	r3, [pc, #376]	; (fda4 <_vfiprintf_r+0x22c>)
    fc2c:	2b00      	cmp	r3, #0
    fc2e:	d000      	beq.n	fc32 <_vfiprintf_r+0xba>
    fc30:	e090      	b.n	fd54 <_vfiprintf_r+0x1dc>
    fc32:	2207      	movs	r2, #7
    fc34:	9b05      	ldr	r3, [sp, #20]
    fc36:	3307      	adds	r3, #7
    fc38:	4393      	bics	r3, r2
    fc3a:	3308      	adds	r3, #8
    fc3c:	9305      	str	r3, [sp, #20]
    fc3e:	696b      	ldr	r3, [r5, #20]
    fc40:	9a03      	ldr	r2, [sp, #12]
    fc42:	189b      	adds	r3, r3, r2
    fc44:	616b      	str	r3, [r5, #20]
    fc46:	9c02      	ldr	r4, [sp, #8]
    fc48:	7823      	ldrb	r3, [r4, #0]
    fc4a:	2b00      	cmp	r3, #0
    fc4c:	d104      	bne.n	fc58 <_vfiprintf_r+0xe0>
    fc4e:	9b02      	ldr	r3, [sp, #8]
    fc50:	1ae3      	subs	r3, r4, r3
    fc52:	9304      	str	r3, [sp, #16]
    fc54:	d012      	beq.n	fc7c <_vfiprintf_r+0x104>
    fc56:	e003      	b.n	fc60 <_vfiprintf_r+0xe8>
    fc58:	2b25      	cmp	r3, #37	; 0x25
    fc5a:	d0f8      	beq.n	fc4e <_vfiprintf_r+0xd6>
    fc5c:	3401      	adds	r4, #1
    fc5e:	e7f3      	b.n	fc48 <_vfiprintf_r+0xd0>
    fc60:	9b04      	ldr	r3, [sp, #16]
    fc62:	9a02      	ldr	r2, [sp, #8]
    fc64:	0039      	movs	r1, r7
    fc66:	0030      	movs	r0, r6
    fc68:	f7ff ff74 	bl	fb54 <__sfputs_r>
    fc6c:	1c43      	adds	r3, r0, #1
    fc6e:	d100      	bne.n	fc72 <_vfiprintf_r+0xfa>
    fc70:	e086      	b.n	fd80 <_vfiprintf_r+0x208>
    fc72:	696a      	ldr	r2, [r5, #20]
    fc74:	9b04      	ldr	r3, [sp, #16]
    fc76:	4694      	mov	ip, r2
    fc78:	4463      	add	r3, ip
    fc7a:	616b      	str	r3, [r5, #20]
    fc7c:	7823      	ldrb	r3, [r4, #0]
    fc7e:	2b00      	cmp	r3, #0
    fc80:	d07e      	beq.n	fd80 <_vfiprintf_r+0x208>
    fc82:	2201      	movs	r2, #1
    fc84:	2300      	movs	r3, #0
    fc86:	4252      	negs	r2, r2
    fc88:	606a      	str	r2, [r5, #4]
    fc8a:	a902      	add	r1, sp, #8
    fc8c:	3254      	adds	r2, #84	; 0x54
    fc8e:	1852      	adds	r2, r2, r1
    fc90:	3401      	adds	r4, #1
    fc92:	602b      	str	r3, [r5, #0]
    fc94:	60eb      	str	r3, [r5, #12]
    fc96:	60ab      	str	r3, [r5, #8]
    fc98:	7013      	strb	r3, [r2, #0]
    fc9a:	65ab      	str	r3, [r5, #88]	; 0x58
    fc9c:	7821      	ldrb	r1, [r4, #0]
    fc9e:	2205      	movs	r2, #5
    fca0:	4841      	ldr	r0, [pc, #260]	; (fda8 <_vfiprintf_r+0x230>)
    fca2:	f000 ff63 	bl	10b6c <memchr>
    fca6:	2800      	cmp	r0, #0
    fca8:	d008      	beq.n	fcbc <_vfiprintf_r+0x144>
    fcaa:	4b3f      	ldr	r3, [pc, #252]	; (fda8 <_vfiprintf_r+0x230>)
    fcac:	682a      	ldr	r2, [r5, #0]
    fcae:	1ac0      	subs	r0, r0, r3
    fcb0:	2301      	movs	r3, #1
    fcb2:	4083      	lsls	r3, r0
    fcb4:	4313      	orrs	r3, r2
    fcb6:	602b      	str	r3, [r5, #0]
    fcb8:	3401      	adds	r4, #1
    fcba:	e7ef      	b.n	fc9c <_vfiprintf_r+0x124>
    fcbc:	682b      	ldr	r3, [r5, #0]
    fcbe:	06da      	lsls	r2, r3, #27
    fcc0:	d504      	bpl.n	fccc <_vfiprintf_r+0x154>
    fcc2:	2253      	movs	r2, #83	; 0x53
    fcc4:	2120      	movs	r1, #32
    fcc6:	a802      	add	r0, sp, #8
    fcc8:	1812      	adds	r2, r2, r0
    fcca:	7011      	strb	r1, [r2, #0]
    fccc:	071a      	lsls	r2, r3, #28
    fcce:	d504      	bpl.n	fcda <_vfiprintf_r+0x162>
    fcd0:	2253      	movs	r2, #83	; 0x53
    fcd2:	212b      	movs	r1, #43	; 0x2b
    fcd4:	a802      	add	r0, sp, #8
    fcd6:	1812      	adds	r2, r2, r0
    fcd8:	7011      	strb	r1, [r2, #0]
    fcda:	7822      	ldrb	r2, [r4, #0]
    fcdc:	2a2a      	cmp	r2, #42	; 0x2a
    fcde:	d100      	bne.n	fce2 <_vfiprintf_r+0x16a>
    fce0:	e77c      	b.n	fbdc <_vfiprintf_r+0x64>
    fce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fce4:	2000      	movs	r0, #0
    fce6:	210a      	movs	r1, #10
    fce8:	e005      	b.n	fcf6 <_vfiprintf_r+0x17e>
    fcea:	4252      	negs	r2, r2
    fcec:	60ea      	str	r2, [r5, #12]
    fcee:	2202      	movs	r2, #2
    fcf0:	4313      	orrs	r3, r2
    fcf2:	602b      	str	r3, [r5, #0]
    fcf4:	e77a      	b.n	fbec <_vfiprintf_r+0x74>
    fcf6:	7822      	ldrb	r2, [r4, #0]
    fcf8:	3a30      	subs	r2, #48	; 0x30
    fcfa:	2a09      	cmp	r2, #9
    fcfc:	d804      	bhi.n	fd08 <_vfiprintf_r+0x190>
    fcfe:	434b      	muls	r3, r1
    fd00:	3401      	adds	r4, #1
    fd02:	189b      	adds	r3, r3, r2
    fd04:	2001      	movs	r0, #1
    fd06:	e7f6      	b.n	fcf6 <_vfiprintf_r+0x17e>
    fd08:	2800      	cmp	r0, #0
    fd0a:	d100      	bne.n	fd0e <_vfiprintf_r+0x196>
    fd0c:	e76f      	b.n	fbee <_vfiprintf_r+0x76>
    fd0e:	9309      	str	r3, [sp, #36]	; 0x24
    fd10:	e76d      	b.n	fbee <_vfiprintf_r+0x76>
    fd12:	7863      	ldrb	r3, [r4, #1]
    fd14:	2b2a      	cmp	r3, #42	; 0x2a
    fd16:	d10a      	bne.n	fd2e <_vfiprintf_r+0x1b6>
    fd18:	9b05      	ldr	r3, [sp, #20]
    fd1a:	3402      	adds	r4, #2
    fd1c:	1d1a      	adds	r2, r3, #4
    fd1e:	681b      	ldr	r3, [r3, #0]
    fd20:	9205      	str	r2, [sp, #20]
    fd22:	2b00      	cmp	r3, #0
    fd24:	da01      	bge.n	fd2a <_vfiprintf_r+0x1b2>
    fd26:	2301      	movs	r3, #1
    fd28:	425b      	negs	r3, r3
    fd2a:	9307      	str	r3, [sp, #28]
    fd2c:	e763      	b.n	fbf6 <_vfiprintf_r+0x7e>
    fd2e:	2300      	movs	r3, #0
    fd30:	200a      	movs	r0, #10
    fd32:	001a      	movs	r2, r3
    fd34:	3401      	adds	r4, #1
    fd36:	606b      	str	r3, [r5, #4]
    fd38:	7821      	ldrb	r1, [r4, #0]
    fd3a:	3930      	subs	r1, #48	; 0x30
    fd3c:	2909      	cmp	r1, #9
    fd3e:	d804      	bhi.n	fd4a <_vfiprintf_r+0x1d2>
    fd40:	4342      	muls	r2, r0
    fd42:	3401      	adds	r4, #1
    fd44:	1852      	adds	r2, r2, r1
    fd46:	2301      	movs	r3, #1
    fd48:	e7f6      	b.n	fd38 <_vfiprintf_r+0x1c0>
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	d100      	bne.n	fd50 <_vfiprintf_r+0x1d8>
    fd4e:	e752      	b.n	fbf6 <_vfiprintf_r+0x7e>
    fd50:	9207      	str	r2, [sp, #28]
    fd52:	e750      	b.n	fbf6 <_vfiprintf_r+0x7e>
    fd54:	ab05      	add	r3, sp, #20
    fd56:	9300      	str	r3, [sp, #0]
    fd58:	003a      	movs	r2, r7
    fd5a:	4b14      	ldr	r3, [pc, #80]	; (fdac <_vfiprintf_r+0x234>)
    fd5c:	0029      	movs	r1, r5
    fd5e:	0030      	movs	r0, r6
    fd60:	e000      	b.n	fd64 <_vfiprintf_r+0x1ec>
    fd62:	bf00      	nop
    fd64:	e007      	b.n	fd76 <_vfiprintf_r+0x1fe>
    fd66:	ab05      	add	r3, sp, #20
    fd68:	9300      	str	r3, [sp, #0]
    fd6a:	003a      	movs	r2, r7
    fd6c:	4b0f      	ldr	r3, [pc, #60]	; (fdac <_vfiprintf_r+0x234>)
    fd6e:	0029      	movs	r1, r5
    fd70:	0030      	movs	r0, r6
    fd72:	f000 f88b 	bl	fe8c <_printf_i>
    fd76:	9003      	str	r0, [sp, #12]
    fd78:	9b03      	ldr	r3, [sp, #12]
    fd7a:	3301      	adds	r3, #1
    fd7c:	d000      	beq.n	fd80 <_vfiprintf_r+0x208>
    fd7e:	e75e      	b.n	fc3e <_vfiprintf_r+0xc6>
    fd80:	89bb      	ldrh	r3, [r7, #12]
    fd82:	065b      	lsls	r3, r3, #25
    fd84:	d500      	bpl.n	fd88 <_vfiprintf_r+0x210>
    fd86:	e726      	b.n	fbd6 <_vfiprintf_r+0x5e>
    fd88:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fd8a:	b01f      	add	sp, #124	; 0x7c
    fd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd8e:	46c0      	nop			; (mov r8, r8)
    fd90:	00012ba4 	.word	0x00012ba4
    fd94:	00012bc4 	.word	0x00012bc4
    fd98:	00012be4 	.word	0x00012be4
    fd9c:	00012a76 	.word	0x00012a76
    fda0:	00012a7a 	.word	0x00012a7a
    fda4:	00000000 	.word	0x00000000
    fda8:	00012a70 	.word	0x00012a70
    fdac:	0000fb55 	.word	0x0000fb55

0000fdb0 <_printf_common>:
    fdb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fdb2:	0017      	movs	r7, r2
    fdb4:	9301      	str	r3, [sp, #4]
    fdb6:	688a      	ldr	r2, [r1, #8]
    fdb8:	690b      	ldr	r3, [r1, #16]
    fdba:	9000      	str	r0, [sp, #0]
    fdbc:	000c      	movs	r4, r1
    fdbe:	4293      	cmp	r3, r2
    fdc0:	da00      	bge.n	fdc4 <_printf_common+0x14>
    fdc2:	0013      	movs	r3, r2
    fdc4:	0022      	movs	r2, r4
    fdc6:	603b      	str	r3, [r7, #0]
    fdc8:	3243      	adds	r2, #67	; 0x43
    fdca:	7812      	ldrb	r2, [r2, #0]
    fdcc:	2a00      	cmp	r2, #0
    fdce:	d001      	beq.n	fdd4 <_printf_common+0x24>
    fdd0:	3301      	adds	r3, #1
    fdd2:	603b      	str	r3, [r7, #0]
    fdd4:	6823      	ldr	r3, [r4, #0]
    fdd6:	069b      	lsls	r3, r3, #26
    fdd8:	d502      	bpl.n	fde0 <_printf_common+0x30>
    fdda:	683b      	ldr	r3, [r7, #0]
    fddc:	3302      	adds	r3, #2
    fdde:	603b      	str	r3, [r7, #0]
    fde0:	2506      	movs	r5, #6
    fde2:	6823      	ldr	r3, [r4, #0]
    fde4:	401d      	ands	r5, r3
    fde6:	d01e      	beq.n	fe26 <_printf_common+0x76>
    fde8:	0023      	movs	r3, r4
    fdea:	3343      	adds	r3, #67	; 0x43
    fdec:	781b      	ldrb	r3, [r3, #0]
    fdee:	1e5a      	subs	r2, r3, #1
    fdf0:	4193      	sbcs	r3, r2
    fdf2:	6822      	ldr	r2, [r4, #0]
    fdf4:	0692      	lsls	r2, r2, #26
    fdf6:	d51c      	bpl.n	fe32 <_printf_common+0x82>
    fdf8:	2030      	movs	r0, #48	; 0x30
    fdfa:	18e1      	adds	r1, r4, r3
    fdfc:	3143      	adds	r1, #67	; 0x43
    fdfe:	7008      	strb	r0, [r1, #0]
    fe00:	0021      	movs	r1, r4
    fe02:	1c5a      	adds	r2, r3, #1
    fe04:	3145      	adds	r1, #69	; 0x45
    fe06:	7809      	ldrb	r1, [r1, #0]
    fe08:	18a2      	adds	r2, r4, r2
    fe0a:	3243      	adds	r2, #67	; 0x43
    fe0c:	3302      	adds	r3, #2
    fe0e:	7011      	strb	r1, [r2, #0]
    fe10:	e00f      	b.n	fe32 <_printf_common+0x82>
    fe12:	0022      	movs	r2, r4
    fe14:	2301      	movs	r3, #1
    fe16:	3219      	adds	r2, #25
    fe18:	9901      	ldr	r1, [sp, #4]
    fe1a:	9800      	ldr	r0, [sp, #0]
    fe1c:	9e08      	ldr	r6, [sp, #32]
    fe1e:	47b0      	blx	r6
    fe20:	1c43      	adds	r3, r0, #1
    fe22:	d00e      	beq.n	fe42 <_printf_common+0x92>
    fe24:	3501      	adds	r5, #1
    fe26:	68e3      	ldr	r3, [r4, #12]
    fe28:	683a      	ldr	r2, [r7, #0]
    fe2a:	1a9b      	subs	r3, r3, r2
    fe2c:	429d      	cmp	r5, r3
    fe2e:	dbf0      	blt.n	fe12 <_printf_common+0x62>
    fe30:	e7da      	b.n	fde8 <_printf_common+0x38>
    fe32:	0022      	movs	r2, r4
    fe34:	9901      	ldr	r1, [sp, #4]
    fe36:	3243      	adds	r2, #67	; 0x43
    fe38:	9800      	ldr	r0, [sp, #0]
    fe3a:	9d08      	ldr	r5, [sp, #32]
    fe3c:	47a8      	blx	r5
    fe3e:	1c43      	adds	r3, r0, #1
    fe40:	d102      	bne.n	fe48 <_printf_common+0x98>
    fe42:	2001      	movs	r0, #1
    fe44:	4240      	negs	r0, r0
    fe46:	e020      	b.n	fe8a <_printf_common+0xda>
    fe48:	2306      	movs	r3, #6
    fe4a:	6820      	ldr	r0, [r4, #0]
    fe4c:	68e1      	ldr	r1, [r4, #12]
    fe4e:	683a      	ldr	r2, [r7, #0]
    fe50:	4003      	ands	r3, r0
    fe52:	2500      	movs	r5, #0
    fe54:	2b04      	cmp	r3, #4
    fe56:	d103      	bne.n	fe60 <_printf_common+0xb0>
    fe58:	1a8d      	subs	r5, r1, r2
    fe5a:	43eb      	mvns	r3, r5
    fe5c:	17db      	asrs	r3, r3, #31
    fe5e:	401d      	ands	r5, r3
    fe60:	68a3      	ldr	r3, [r4, #8]
    fe62:	6922      	ldr	r2, [r4, #16]
    fe64:	4293      	cmp	r3, r2
    fe66:	dd01      	ble.n	fe6c <_printf_common+0xbc>
    fe68:	1a9b      	subs	r3, r3, r2
    fe6a:	18ed      	adds	r5, r5, r3
    fe6c:	2700      	movs	r7, #0
    fe6e:	42bd      	cmp	r5, r7
    fe70:	d00a      	beq.n	fe88 <_printf_common+0xd8>
    fe72:	0022      	movs	r2, r4
    fe74:	2301      	movs	r3, #1
    fe76:	321a      	adds	r2, #26
    fe78:	9901      	ldr	r1, [sp, #4]
    fe7a:	9800      	ldr	r0, [sp, #0]
    fe7c:	9e08      	ldr	r6, [sp, #32]
    fe7e:	47b0      	blx	r6
    fe80:	1c43      	adds	r3, r0, #1
    fe82:	d0de      	beq.n	fe42 <_printf_common+0x92>
    fe84:	3701      	adds	r7, #1
    fe86:	e7f2      	b.n	fe6e <_printf_common+0xbe>
    fe88:	2000      	movs	r0, #0
    fe8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fe8c <_printf_i>:
    fe8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe8e:	b08b      	sub	sp, #44	; 0x2c
    fe90:	9206      	str	r2, [sp, #24]
    fe92:	000a      	movs	r2, r1
    fe94:	3243      	adds	r2, #67	; 0x43
    fe96:	9307      	str	r3, [sp, #28]
    fe98:	9005      	str	r0, [sp, #20]
    fe9a:	9204      	str	r2, [sp, #16]
    fe9c:	7e0a      	ldrb	r2, [r1, #24]
    fe9e:	000c      	movs	r4, r1
    fea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fea2:	2a6e      	cmp	r2, #110	; 0x6e
    fea4:	d100      	bne.n	fea8 <_printf_i+0x1c>
    fea6:	e0ab      	b.n	10000 <_printf_i+0x174>
    fea8:	d811      	bhi.n	fece <_printf_i+0x42>
    feaa:	2a63      	cmp	r2, #99	; 0x63
    feac:	d022      	beq.n	fef4 <_printf_i+0x68>
    feae:	d809      	bhi.n	fec4 <_printf_i+0x38>
    feb0:	2a00      	cmp	r2, #0
    feb2:	d100      	bne.n	feb6 <_printf_i+0x2a>
    feb4:	e0b5      	b.n	10022 <_printf_i+0x196>
    feb6:	2a58      	cmp	r2, #88	; 0x58
    feb8:	d000      	beq.n	febc <_printf_i+0x30>
    feba:	e0c5      	b.n	10048 <_printf_i+0x1bc>
    febc:	3145      	adds	r1, #69	; 0x45
    febe:	700a      	strb	r2, [r1, #0]
    fec0:	4a81      	ldr	r2, [pc, #516]	; (100c8 <_printf_i+0x23c>)
    fec2:	e04f      	b.n	ff64 <_printf_i+0xd8>
    fec4:	2a64      	cmp	r2, #100	; 0x64
    fec6:	d01d      	beq.n	ff04 <_printf_i+0x78>
    fec8:	2a69      	cmp	r2, #105	; 0x69
    feca:	d01b      	beq.n	ff04 <_printf_i+0x78>
    fecc:	e0bc      	b.n	10048 <_printf_i+0x1bc>
    fece:	2a73      	cmp	r2, #115	; 0x73
    fed0:	d100      	bne.n	fed4 <_printf_i+0x48>
    fed2:	e0aa      	b.n	1002a <_printf_i+0x19e>
    fed4:	d809      	bhi.n	feea <_printf_i+0x5e>
    fed6:	2a6f      	cmp	r2, #111	; 0x6f
    fed8:	d029      	beq.n	ff2e <_printf_i+0xa2>
    feda:	2a70      	cmp	r2, #112	; 0x70
    fedc:	d000      	beq.n	fee0 <_printf_i+0x54>
    fede:	e0b3      	b.n	10048 <_printf_i+0x1bc>
    fee0:	2220      	movs	r2, #32
    fee2:	6809      	ldr	r1, [r1, #0]
    fee4:	430a      	orrs	r2, r1
    fee6:	6022      	str	r2, [r4, #0]
    fee8:	e037      	b.n	ff5a <_printf_i+0xce>
    feea:	2a75      	cmp	r2, #117	; 0x75
    feec:	d01f      	beq.n	ff2e <_printf_i+0xa2>
    feee:	2a78      	cmp	r2, #120	; 0x78
    fef0:	d033      	beq.n	ff5a <_printf_i+0xce>
    fef2:	e0a9      	b.n	10048 <_printf_i+0x1bc>
    fef4:	000e      	movs	r6, r1
    fef6:	681a      	ldr	r2, [r3, #0]
    fef8:	3642      	adds	r6, #66	; 0x42
    fefa:	1d11      	adds	r1, r2, #4
    fefc:	6019      	str	r1, [r3, #0]
    fefe:	6813      	ldr	r3, [r2, #0]
    ff00:	7033      	strb	r3, [r6, #0]
    ff02:	e0a4      	b.n	1004e <_printf_i+0x1c2>
    ff04:	6821      	ldr	r1, [r4, #0]
    ff06:	681a      	ldr	r2, [r3, #0]
    ff08:	0608      	lsls	r0, r1, #24
    ff0a:	d406      	bmi.n	ff1a <_printf_i+0x8e>
    ff0c:	0649      	lsls	r1, r1, #25
    ff0e:	d504      	bpl.n	ff1a <_printf_i+0x8e>
    ff10:	1d11      	adds	r1, r2, #4
    ff12:	6019      	str	r1, [r3, #0]
    ff14:	2300      	movs	r3, #0
    ff16:	5ed5      	ldrsh	r5, [r2, r3]
    ff18:	e002      	b.n	ff20 <_printf_i+0x94>
    ff1a:	1d11      	adds	r1, r2, #4
    ff1c:	6019      	str	r1, [r3, #0]
    ff1e:	6815      	ldr	r5, [r2, #0]
    ff20:	2d00      	cmp	r5, #0
    ff22:	da3b      	bge.n	ff9c <_printf_i+0x110>
    ff24:	232d      	movs	r3, #45	; 0x2d
    ff26:	9a04      	ldr	r2, [sp, #16]
    ff28:	426d      	negs	r5, r5
    ff2a:	7013      	strb	r3, [r2, #0]
    ff2c:	e036      	b.n	ff9c <_printf_i+0x110>
    ff2e:	6821      	ldr	r1, [r4, #0]
    ff30:	681a      	ldr	r2, [r3, #0]
    ff32:	0608      	lsls	r0, r1, #24
    ff34:	d406      	bmi.n	ff44 <_printf_i+0xb8>
    ff36:	0649      	lsls	r1, r1, #25
    ff38:	d504      	bpl.n	ff44 <_printf_i+0xb8>
    ff3a:	6815      	ldr	r5, [r2, #0]
    ff3c:	1d11      	adds	r1, r2, #4
    ff3e:	6019      	str	r1, [r3, #0]
    ff40:	b2ad      	uxth	r5, r5
    ff42:	e002      	b.n	ff4a <_printf_i+0xbe>
    ff44:	1d11      	adds	r1, r2, #4
    ff46:	6019      	str	r1, [r3, #0]
    ff48:	6815      	ldr	r5, [r2, #0]
    ff4a:	4b5f      	ldr	r3, [pc, #380]	; (100c8 <_printf_i+0x23c>)
    ff4c:	7e22      	ldrb	r2, [r4, #24]
    ff4e:	9303      	str	r3, [sp, #12]
    ff50:	2708      	movs	r7, #8
    ff52:	2a6f      	cmp	r2, #111	; 0x6f
    ff54:	d01d      	beq.n	ff92 <_printf_i+0x106>
    ff56:	270a      	movs	r7, #10
    ff58:	e01b      	b.n	ff92 <_printf_i+0x106>
    ff5a:	0022      	movs	r2, r4
    ff5c:	2178      	movs	r1, #120	; 0x78
    ff5e:	3245      	adds	r2, #69	; 0x45
    ff60:	7011      	strb	r1, [r2, #0]
    ff62:	4a5a      	ldr	r2, [pc, #360]	; (100cc <_printf_i+0x240>)
    ff64:	6819      	ldr	r1, [r3, #0]
    ff66:	9203      	str	r2, [sp, #12]
    ff68:	1d08      	adds	r0, r1, #4
    ff6a:	6822      	ldr	r2, [r4, #0]
    ff6c:	6018      	str	r0, [r3, #0]
    ff6e:	680d      	ldr	r5, [r1, #0]
    ff70:	0610      	lsls	r0, r2, #24
    ff72:	d402      	bmi.n	ff7a <_printf_i+0xee>
    ff74:	0650      	lsls	r0, r2, #25
    ff76:	d500      	bpl.n	ff7a <_printf_i+0xee>
    ff78:	b2ad      	uxth	r5, r5
    ff7a:	07d3      	lsls	r3, r2, #31
    ff7c:	d502      	bpl.n	ff84 <_printf_i+0xf8>
    ff7e:	2320      	movs	r3, #32
    ff80:	431a      	orrs	r2, r3
    ff82:	6022      	str	r2, [r4, #0]
    ff84:	2710      	movs	r7, #16
    ff86:	2d00      	cmp	r5, #0
    ff88:	d103      	bne.n	ff92 <_printf_i+0x106>
    ff8a:	2320      	movs	r3, #32
    ff8c:	6822      	ldr	r2, [r4, #0]
    ff8e:	439a      	bics	r2, r3
    ff90:	6022      	str	r2, [r4, #0]
    ff92:	0023      	movs	r3, r4
    ff94:	2200      	movs	r2, #0
    ff96:	3343      	adds	r3, #67	; 0x43
    ff98:	701a      	strb	r2, [r3, #0]
    ff9a:	e002      	b.n	ffa2 <_printf_i+0x116>
    ff9c:	270a      	movs	r7, #10
    ff9e:	4b4a      	ldr	r3, [pc, #296]	; (100c8 <_printf_i+0x23c>)
    ffa0:	9303      	str	r3, [sp, #12]
    ffa2:	6863      	ldr	r3, [r4, #4]
    ffa4:	60a3      	str	r3, [r4, #8]
    ffa6:	2b00      	cmp	r3, #0
    ffa8:	db09      	blt.n	ffbe <_printf_i+0x132>
    ffaa:	2204      	movs	r2, #4
    ffac:	6821      	ldr	r1, [r4, #0]
    ffae:	4391      	bics	r1, r2
    ffb0:	6021      	str	r1, [r4, #0]
    ffb2:	2d00      	cmp	r5, #0
    ffb4:	d105      	bne.n	ffc2 <_printf_i+0x136>
    ffb6:	9e04      	ldr	r6, [sp, #16]
    ffb8:	2b00      	cmp	r3, #0
    ffba:	d011      	beq.n	ffe0 <_printf_i+0x154>
    ffbc:	e07b      	b.n	100b6 <_printf_i+0x22a>
    ffbe:	2d00      	cmp	r5, #0
    ffc0:	d079      	beq.n	100b6 <_printf_i+0x22a>
    ffc2:	9e04      	ldr	r6, [sp, #16]
    ffc4:	0028      	movs	r0, r5
    ffc6:	0039      	movs	r1, r7
    ffc8:	f7ff f86c 	bl	f0a4 <__aeabi_uidivmod>
    ffcc:	9b03      	ldr	r3, [sp, #12]
    ffce:	3e01      	subs	r6, #1
    ffd0:	5c5b      	ldrb	r3, [r3, r1]
    ffd2:	0028      	movs	r0, r5
    ffd4:	7033      	strb	r3, [r6, #0]
    ffd6:	0039      	movs	r1, r7
    ffd8:	f7fe ffde 	bl	ef98 <__aeabi_uidiv>
    ffdc:	1e05      	subs	r5, r0, #0
    ffde:	d1f1      	bne.n	ffc4 <_printf_i+0x138>
    ffe0:	2f08      	cmp	r7, #8
    ffe2:	d109      	bne.n	fff8 <_printf_i+0x16c>
    ffe4:	6823      	ldr	r3, [r4, #0]
    ffe6:	07db      	lsls	r3, r3, #31
    ffe8:	d506      	bpl.n	fff8 <_printf_i+0x16c>
    ffea:	6863      	ldr	r3, [r4, #4]
    ffec:	6922      	ldr	r2, [r4, #16]
    ffee:	4293      	cmp	r3, r2
    fff0:	dc02      	bgt.n	fff8 <_printf_i+0x16c>
    fff2:	2330      	movs	r3, #48	; 0x30
    fff4:	3e01      	subs	r6, #1
    fff6:	7033      	strb	r3, [r6, #0]
    fff8:	9b04      	ldr	r3, [sp, #16]
    fffa:	1b9b      	subs	r3, r3, r6
    fffc:	6123      	str	r3, [r4, #16]
    fffe:	e02b      	b.n	10058 <_printf_i+0x1cc>
   10000:	6809      	ldr	r1, [r1, #0]
   10002:	681a      	ldr	r2, [r3, #0]
   10004:	0608      	lsls	r0, r1, #24
   10006:	d407      	bmi.n	10018 <_printf_i+0x18c>
   10008:	0649      	lsls	r1, r1, #25
   1000a:	d505      	bpl.n	10018 <_printf_i+0x18c>
   1000c:	1d11      	adds	r1, r2, #4
   1000e:	6019      	str	r1, [r3, #0]
   10010:	6813      	ldr	r3, [r2, #0]
   10012:	8aa2      	ldrh	r2, [r4, #20]
   10014:	801a      	strh	r2, [r3, #0]
   10016:	e004      	b.n	10022 <_printf_i+0x196>
   10018:	1d11      	adds	r1, r2, #4
   1001a:	6019      	str	r1, [r3, #0]
   1001c:	6813      	ldr	r3, [r2, #0]
   1001e:	6962      	ldr	r2, [r4, #20]
   10020:	601a      	str	r2, [r3, #0]
   10022:	2300      	movs	r3, #0
   10024:	9e04      	ldr	r6, [sp, #16]
   10026:	6123      	str	r3, [r4, #16]
   10028:	e016      	b.n	10058 <_printf_i+0x1cc>
   1002a:	681a      	ldr	r2, [r3, #0]
   1002c:	1d11      	adds	r1, r2, #4
   1002e:	6019      	str	r1, [r3, #0]
   10030:	6816      	ldr	r6, [r2, #0]
   10032:	2100      	movs	r1, #0
   10034:	6862      	ldr	r2, [r4, #4]
   10036:	0030      	movs	r0, r6
   10038:	f000 fd98 	bl	10b6c <memchr>
   1003c:	2800      	cmp	r0, #0
   1003e:	d001      	beq.n	10044 <_printf_i+0x1b8>
   10040:	1b80      	subs	r0, r0, r6
   10042:	6060      	str	r0, [r4, #4]
   10044:	6863      	ldr	r3, [r4, #4]
   10046:	e003      	b.n	10050 <_printf_i+0x1c4>
   10048:	0026      	movs	r6, r4
   1004a:	3642      	adds	r6, #66	; 0x42
   1004c:	7032      	strb	r2, [r6, #0]
   1004e:	2301      	movs	r3, #1
   10050:	6123      	str	r3, [r4, #16]
   10052:	2300      	movs	r3, #0
   10054:	9a04      	ldr	r2, [sp, #16]
   10056:	7013      	strb	r3, [r2, #0]
   10058:	9b07      	ldr	r3, [sp, #28]
   1005a:	aa09      	add	r2, sp, #36	; 0x24
   1005c:	9300      	str	r3, [sp, #0]
   1005e:	0021      	movs	r1, r4
   10060:	9b06      	ldr	r3, [sp, #24]
   10062:	9805      	ldr	r0, [sp, #20]
   10064:	f7ff fea4 	bl	fdb0 <_printf_common>
   10068:	1c43      	adds	r3, r0, #1
   1006a:	d102      	bne.n	10072 <_printf_i+0x1e6>
   1006c:	2001      	movs	r0, #1
   1006e:	4240      	negs	r0, r0
   10070:	e027      	b.n	100c2 <_printf_i+0x236>
   10072:	6923      	ldr	r3, [r4, #16]
   10074:	0032      	movs	r2, r6
   10076:	9906      	ldr	r1, [sp, #24]
   10078:	9805      	ldr	r0, [sp, #20]
   1007a:	9d07      	ldr	r5, [sp, #28]
   1007c:	47a8      	blx	r5
   1007e:	1c43      	adds	r3, r0, #1
   10080:	d0f4      	beq.n	1006c <_printf_i+0x1e0>
   10082:	6823      	ldr	r3, [r4, #0]
   10084:	2500      	movs	r5, #0
   10086:	079b      	lsls	r3, r3, #30
   10088:	d40f      	bmi.n	100aa <_printf_i+0x21e>
   1008a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1008c:	68e0      	ldr	r0, [r4, #12]
   1008e:	4298      	cmp	r0, r3
   10090:	da17      	bge.n	100c2 <_printf_i+0x236>
   10092:	0018      	movs	r0, r3
   10094:	e015      	b.n	100c2 <_printf_i+0x236>
   10096:	0022      	movs	r2, r4
   10098:	2301      	movs	r3, #1
   1009a:	3219      	adds	r2, #25
   1009c:	9906      	ldr	r1, [sp, #24]
   1009e:	9805      	ldr	r0, [sp, #20]
   100a0:	9e07      	ldr	r6, [sp, #28]
   100a2:	47b0      	blx	r6
   100a4:	1c43      	adds	r3, r0, #1
   100a6:	d0e1      	beq.n	1006c <_printf_i+0x1e0>
   100a8:	3501      	adds	r5, #1
   100aa:	68e3      	ldr	r3, [r4, #12]
   100ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   100ae:	1a9b      	subs	r3, r3, r2
   100b0:	429d      	cmp	r5, r3
   100b2:	dbf0      	blt.n	10096 <_printf_i+0x20a>
   100b4:	e7e9      	b.n	1008a <_printf_i+0x1fe>
   100b6:	0026      	movs	r6, r4
   100b8:	9b03      	ldr	r3, [sp, #12]
   100ba:	3642      	adds	r6, #66	; 0x42
   100bc:	781b      	ldrb	r3, [r3, #0]
   100be:	7033      	strb	r3, [r6, #0]
   100c0:	e78e      	b.n	ffe0 <_printf_i+0x154>
   100c2:	b00b      	add	sp, #44	; 0x2c
   100c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100c6:	46c0      	nop			; (mov r8, r8)
   100c8:	00012a81 	.word	0x00012a81
   100cc:	00012a92 	.word	0x00012a92

000100d0 <iprintf>:
   100d0:	b40f      	push	{r0, r1, r2, r3}
   100d2:	4b0b      	ldr	r3, [pc, #44]	; (10100 <iprintf+0x30>)
   100d4:	b513      	push	{r0, r1, r4, lr}
   100d6:	681c      	ldr	r4, [r3, #0]
   100d8:	2c00      	cmp	r4, #0
   100da:	d005      	beq.n	100e8 <iprintf+0x18>
   100dc:	69a3      	ldr	r3, [r4, #24]
   100de:	2b00      	cmp	r3, #0
   100e0:	d102      	bne.n	100e8 <iprintf+0x18>
   100e2:	0020      	movs	r0, r4
   100e4:	f000 fc40 	bl	10968 <__sinit>
   100e8:	ab05      	add	r3, sp, #20
   100ea:	9a04      	ldr	r2, [sp, #16]
   100ec:	68a1      	ldr	r1, [r4, #8]
   100ee:	0020      	movs	r0, r4
   100f0:	9301      	str	r3, [sp, #4]
   100f2:	f7ff fd41 	bl	fb78 <_vfiprintf_r>
   100f6:	bc16      	pop	{r1, r2, r4}
   100f8:	bc08      	pop	{r3}
   100fa:	b004      	add	sp, #16
   100fc:	4718      	bx	r3
   100fe:	46c0      	nop			; (mov r8, r8)
   10100:	20000094 	.word	0x20000094

00010104 <putchar>:
   10104:	4b08      	ldr	r3, [pc, #32]	; (10128 <putchar+0x24>)
   10106:	b570      	push	{r4, r5, r6, lr}
   10108:	681c      	ldr	r4, [r3, #0]
   1010a:	0005      	movs	r5, r0
   1010c:	2c00      	cmp	r4, #0
   1010e:	d005      	beq.n	1011c <putchar+0x18>
   10110:	69a3      	ldr	r3, [r4, #24]
   10112:	2b00      	cmp	r3, #0
   10114:	d102      	bne.n	1011c <putchar+0x18>
   10116:	0020      	movs	r0, r4
   10118:	f000 fc26 	bl	10968 <__sinit>
   1011c:	0029      	movs	r1, r5
   1011e:	68a2      	ldr	r2, [r4, #8]
   10120:	0020      	movs	r0, r4
   10122:	f000 ff65 	bl	10ff0 <_putc_r>
   10126:	bd70      	pop	{r4, r5, r6, pc}
   10128:	20000094 	.word	0x20000094

0001012c <_puts_r>:
   1012c:	b570      	push	{r4, r5, r6, lr}
   1012e:	0005      	movs	r5, r0
   10130:	000e      	movs	r6, r1
   10132:	2800      	cmp	r0, #0
   10134:	d004      	beq.n	10140 <_puts_r+0x14>
   10136:	6983      	ldr	r3, [r0, #24]
   10138:	2b00      	cmp	r3, #0
   1013a:	d101      	bne.n	10140 <_puts_r+0x14>
   1013c:	f000 fc14 	bl	10968 <__sinit>
   10140:	69ab      	ldr	r3, [r5, #24]
   10142:	68ac      	ldr	r4, [r5, #8]
   10144:	2b00      	cmp	r3, #0
   10146:	d102      	bne.n	1014e <_puts_r+0x22>
   10148:	0028      	movs	r0, r5
   1014a:	f000 fc0d 	bl	10968 <__sinit>
   1014e:	4b25      	ldr	r3, [pc, #148]	; (101e4 <_puts_r+0xb8>)
   10150:	429c      	cmp	r4, r3
   10152:	d101      	bne.n	10158 <_puts_r+0x2c>
   10154:	686c      	ldr	r4, [r5, #4]
   10156:	e008      	b.n	1016a <_puts_r+0x3e>
   10158:	4b23      	ldr	r3, [pc, #140]	; (101e8 <_puts_r+0xbc>)
   1015a:	429c      	cmp	r4, r3
   1015c:	d101      	bne.n	10162 <_puts_r+0x36>
   1015e:	68ac      	ldr	r4, [r5, #8]
   10160:	e003      	b.n	1016a <_puts_r+0x3e>
   10162:	4b22      	ldr	r3, [pc, #136]	; (101ec <_puts_r+0xc0>)
   10164:	429c      	cmp	r4, r3
   10166:	d100      	bne.n	1016a <_puts_r+0x3e>
   10168:	68ec      	ldr	r4, [r5, #12]
   1016a:	89a3      	ldrh	r3, [r4, #12]
   1016c:	071b      	lsls	r3, r3, #28
   1016e:	d502      	bpl.n	10176 <_puts_r+0x4a>
   10170:	6923      	ldr	r3, [r4, #16]
   10172:	2b00      	cmp	r3, #0
   10174:	d111      	bne.n	1019a <_puts_r+0x6e>
   10176:	0021      	movs	r1, r4
   10178:	0028      	movs	r0, r5
   1017a:	f000 fa83 	bl	10684 <__swsetup_r>
   1017e:	2800      	cmp	r0, #0
   10180:	d00b      	beq.n	1019a <_puts_r+0x6e>
   10182:	2001      	movs	r0, #1
   10184:	4240      	negs	r0, r0
   10186:	e02b      	b.n	101e0 <_puts_r+0xb4>
   10188:	3b01      	subs	r3, #1
   1018a:	3601      	adds	r6, #1
   1018c:	60a3      	str	r3, [r4, #8]
   1018e:	2b00      	cmp	r3, #0
   10190:	db08      	blt.n	101a4 <_puts_r+0x78>
   10192:	6823      	ldr	r3, [r4, #0]
   10194:	1c5a      	adds	r2, r3, #1
   10196:	6022      	str	r2, [r4, #0]
   10198:	7019      	strb	r1, [r3, #0]
   1019a:	7831      	ldrb	r1, [r6, #0]
   1019c:	68a3      	ldr	r3, [r4, #8]
   1019e:	2900      	cmp	r1, #0
   101a0:	d1f2      	bne.n	10188 <_puts_r+0x5c>
   101a2:	e00b      	b.n	101bc <_puts_r+0x90>
   101a4:	69a2      	ldr	r2, [r4, #24]
   101a6:	4293      	cmp	r3, r2
   101a8:	db01      	blt.n	101ae <_puts_r+0x82>
   101aa:	290a      	cmp	r1, #10
   101ac:	d1f1      	bne.n	10192 <_puts_r+0x66>
   101ae:	0022      	movs	r2, r4
   101b0:	0028      	movs	r0, r5
   101b2:	f000 fa0f 	bl	105d4 <__swbuf_r>
   101b6:	1c43      	adds	r3, r0, #1
   101b8:	d1ef      	bne.n	1019a <_puts_r+0x6e>
   101ba:	e7e2      	b.n	10182 <_puts_r+0x56>
   101bc:	3b01      	subs	r3, #1
   101be:	60a3      	str	r3, [r4, #8]
   101c0:	2b00      	cmp	r3, #0
   101c2:	da08      	bge.n	101d6 <_puts_r+0xaa>
   101c4:	0022      	movs	r2, r4
   101c6:	310a      	adds	r1, #10
   101c8:	0028      	movs	r0, r5
   101ca:	f000 fa03 	bl	105d4 <__swbuf_r>
   101ce:	1c43      	adds	r3, r0, #1
   101d0:	d0d7      	beq.n	10182 <_puts_r+0x56>
   101d2:	200a      	movs	r0, #10
   101d4:	e004      	b.n	101e0 <_puts_r+0xb4>
   101d6:	200a      	movs	r0, #10
   101d8:	6823      	ldr	r3, [r4, #0]
   101da:	1c5a      	adds	r2, r3, #1
   101dc:	6022      	str	r2, [r4, #0]
   101de:	7018      	strb	r0, [r3, #0]
   101e0:	bd70      	pop	{r4, r5, r6, pc}
   101e2:	46c0      	nop			; (mov r8, r8)
   101e4:	00012ba4 	.word	0x00012ba4
   101e8:	00012bc4 	.word	0x00012bc4
   101ec:	00012be4 	.word	0x00012be4

000101f0 <puts>:
   101f0:	b510      	push	{r4, lr}
   101f2:	4b03      	ldr	r3, [pc, #12]	; (10200 <puts+0x10>)
   101f4:	0001      	movs	r1, r0
   101f6:	6818      	ldr	r0, [r3, #0]
   101f8:	f7ff ff98 	bl	1012c <_puts_r>
   101fc:	bd10      	pop	{r4, pc}
   101fe:	46c0      	nop			; (mov r8, r8)
   10200:	20000094 	.word	0x20000094

00010204 <setbuf>:
   10204:	424a      	negs	r2, r1
   10206:	414a      	adcs	r2, r1
   10208:	2380      	movs	r3, #128	; 0x80
   1020a:	b510      	push	{r4, lr}
   1020c:	0052      	lsls	r2, r2, #1
   1020e:	00db      	lsls	r3, r3, #3
   10210:	f000 f802 	bl	10218 <setvbuf>
   10214:	bd10      	pop	{r4, pc}
	...

00010218 <setvbuf>:
   10218:	b5f0      	push	{r4, r5, r6, r7, lr}
   1021a:	001d      	movs	r5, r3
   1021c:	4b51      	ldr	r3, [pc, #324]	; (10364 <setvbuf+0x14c>)
   1021e:	b085      	sub	sp, #20
   10220:	681e      	ldr	r6, [r3, #0]
   10222:	0004      	movs	r4, r0
   10224:	000f      	movs	r7, r1
   10226:	9200      	str	r2, [sp, #0]
   10228:	2e00      	cmp	r6, #0
   1022a:	d005      	beq.n	10238 <setvbuf+0x20>
   1022c:	69b3      	ldr	r3, [r6, #24]
   1022e:	2b00      	cmp	r3, #0
   10230:	d102      	bne.n	10238 <setvbuf+0x20>
   10232:	0030      	movs	r0, r6
   10234:	f000 fb98 	bl	10968 <__sinit>
   10238:	4b4b      	ldr	r3, [pc, #300]	; (10368 <setvbuf+0x150>)
   1023a:	429c      	cmp	r4, r3
   1023c:	d101      	bne.n	10242 <setvbuf+0x2a>
   1023e:	6874      	ldr	r4, [r6, #4]
   10240:	e008      	b.n	10254 <setvbuf+0x3c>
   10242:	4b4a      	ldr	r3, [pc, #296]	; (1036c <setvbuf+0x154>)
   10244:	429c      	cmp	r4, r3
   10246:	d101      	bne.n	1024c <setvbuf+0x34>
   10248:	68b4      	ldr	r4, [r6, #8]
   1024a:	e003      	b.n	10254 <setvbuf+0x3c>
   1024c:	4b48      	ldr	r3, [pc, #288]	; (10370 <setvbuf+0x158>)
   1024e:	429c      	cmp	r4, r3
   10250:	d100      	bne.n	10254 <setvbuf+0x3c>
   10252:	68f4      	ldr	r4, [r6, #12]
   10254:	9b00      	ldr	r3, [sp, #0]
   10256:	2b02      	cmp	r3, #2
   10258:	d005      	beq.n	10266 <setvbuf+0x4e>
   1025a:	2b01      	cmp	r3, #1
   1025c:	d900      	bls.n	10260 <setvbuf+0x48>
   1025e:	e07c      	b.n	1035a <setvbuf+0x142>
   10260:	2d00      	cmp	r5, #0
   10262:	da00      	bge.n	10266 <setvbuf+0x4e>
   10264:	e079      	b.n	1035a <setvbuf+0x142>
   10266:	0021      	movs	r1, r4
   10268:	0030      	movs	r0, r6
   1026a:	f000 fb0f 	bl	1088c <_fflush_r>
   1026e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10270:	2900      	cmp	r1, #0
   10272:	d008      	beq.n	10286 <setvbuf+0x6e>
   10274:	0023      	movs	r3, r4
   10276:	3344      	adds	r3, #68	; 0x44
   10278:	4299      	cmp	r1, r3
   1027a:	d002      	beq.n	10282 <setvbuf+0x6a>
   1027c:	0030      	movs	r0, r6
   1027e:	f000 fc95 	bl	10bac <_free_r>
   10282:	2300      	movs	r3, #0
   10284:	6363      	str	r3, [r4, #52]	; 0x34
   10286:	2300      	movs	r3, #0
   10288:	61a3      	str	r3, [r4, #24]
   1028a:	6063      	str	r3, [r4, #4]
   1028c:	89a3      	ldrh	r3, [r4, #12]
   1028e:	061b      	lsls	r3, r3, #24
   10290:	d503      	bpl.n	1029a <setvbuf+0x82>
   10292:	6921      	ldr	r1, [r4, #16]
   10294:	0030      	movs	r0, r6
   10296:	f000 fc89 	bl	10bac <_free_r>
   1029a:	89a2      	ldrh	r2, [r4, #12]
   1029c:	4b35      	ldr	r3, [pc, #212]	; (10374 <setvbuf+0x15c>)
   1029e:	4013      	ands	r3, r2
   102a0:	81a3      	strh	r3, [r4, #12]
   102a2:	9b00      	ldr	r3, [sp, #0]
   102a4:	2b02      	cmp	r3, #2
   102a6:	d021      	beq.n	102ec <setvbuf+0xd4>
   102a8:	ab03      	add	r3, sp, #12
   102aa:	aa02      	add	r2, sp, #8
   102ac:	0021      	movs	r1, r4
   102ae:	0030      	movs	r0, r6
   102b0:	f000 fbee 	bl	10a90 <__swhatbuf_r>
   102b4:	89a3      	ldrh	r3, [r4, #12]
   102b6:	4318      	orrs	r0, r3
   102b8:	81a0      	strh	r0, [r4, #12]
   102ba:	2d00      	cmp	r5, #0
   102bc:	d101      	bne.n	102c2 <setvbuf+0xaa>
   102be:	9d02      	ldr	r5, [sp, #8]
   102c0:	e001      	b.n	102c6 <setvbuf+0xae>
   102c2:	2f00      	cmp	r7, #0
   102c4:	d125      	bne.n	10312 <setvbuf+0xfa>
   102c6:	0028      	movs	r0, r5
   102c8:	f000 fc46 	bl	10b58 <malloc>
   102cc:	9501      	str	r5, [sp, #4]
   102ce:	1e07      	subs	r7, r0, #0
   102d0:	d11a      	bne.n	10308 <setvbuf+0xf0>
   102d2:	9b02      	ldr	r3, [sp, #8]
   102d4:	9301      	str	r3, [sp, #4]
   102d6:	42ab      	cmp	r3, r5
   102d8:	d102      	bne.n	102e0 <setvbuf+0xc8>
   102da:	2001      	movs	r0, #1
   102dc:	4240      	negs	r0, r0
   102de:	e006      	b.n	102ee <setvbuf+0xd6>
   102e0:	9801      	ldr	r0, [sp, #4]
   102e2:	f000 fc39 	bl	10b58 <malloc>
   102e6:	1e07      	subs	r7, r0, #0
   102e8:	d10e      	bne.n	10308 <setvbuf+0xf0>
   102ea:	e7f6      	b.n	102da <setvbuf+0xc2>
   102ec:	2000      	movs	r0, #0
   102ee:	2202      	movs	r2, #2
   102f0:	89a3      	ldrh	r3, [r4, #12]
   102f2:	4313      	orrs	r3, r2
   102f4:	81a3      	strh	r3, [r4, #12]
   102f6:	2300      	movs	r3, #0
   102f8:	60a3      	str	r3, [r4, #8]
   102fa:	0023      	movs	r3, r4
   102fc:	3347      	adds	r3, #71	; 0x47
   102fe:	6023      	str	r3, [r4, #0]
   10300:	6123      	str	r3, [r4, #16]
   10302:	2301      	movs	r3, #1
   10304:	6163      	str	r3, [r4, #20]
   10306:	e02a      	b.n	1035e <setvbuf+0x146>
   10308:	2280      	movs	r2, #128	; 0x80
   1030a:	89a3      	ldrh	r3, [r4, #12]
   1030c:	9d01      	ldr	r5, [sp, #4]
   1030e:	4313      	orrs	r3, r2
   10310:	81a3      	strh	r3, [r4, #12]
   10312:	69b3      	ldr	r3, [r6, #24]
   10314:	2b00      	cmp	r3, #0
   10316:	d102      	bne.n	1031e <setvbuf+0x106>
   10318:	0030      	movs	r0, r6
   1031a:	f000 fb25 	bl	10968 <__sinit>
   1031e:	9b00      	ldr	r3, [sp, #0]
   10320:	2b01      	cmp	r3, #1
   10322:	d103      	bne.n	1032c <setvbuf+0x114>
   10324:	89a3      	ldrh	r3, [r4, #12]
   10326:	9a00      	ldr	r2, [sp, #0]
   10328:	431a      	orrs	r2, r3
   1032a:	81a2      	strh	r2, [r4, #12]
   1032c:	2308      	movs	r3, #8
   1032e:	89a2      	ldrh	r2, [r4, #12]
   10330:	6027      	str	r7, [r4, #0]
   10332:	4013      	ands	r3, r2
   10334:	6127      	str	r7, [r4, #16]
   10336:	6165      	str	r5, [r4, #20]
   10338:	1e18      	subs	r0, r3, #0
   1033a:	d00c      	beq.n	10356 <setvbuf+0x13e>
   1033c:	2301      	movs	r3, #1
   1033e:	401a      	ands	r2, r3
   10340:	2300      	movs	r3, #0
   10342:	1e10      	subs	r0, r2, #0
   10344:	4298      	cmp	r0, r3
   10346:	d004      	beq.n	10352 <setvbuf+0x13a>
   10348:	426d      	negs	r5, r5
   1034a:	60a3      	str	r3, [r4, #8]
   1034c:	61a5      	str	r5, [r4, #24]
   1034e:	0018      	movs	r0, r3
   10350:	e005      	b.n	1035e <setvbuf+0x146>
   10352:	60a5      	str	r5, [r4, #8]
   10354:	e003      	b.n	1035e <setvbuf+0x146>
   10356:	60a3      	str	r3, [r4, #8]
   10358:	e001      	b.n	1035e <setvbuf+0x146>
   1035a:	2001      	movs	r0, #1
   1035c:	4240      	negs	r0, r0
   1035e:	b005      	add	sp, #20
   10360:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10362:	46c0      	nop			; (mov r8, r8)
   10364:	20000094 	.word	0x20000094
   10368:	00012ba4 	.word	0x00012ba4
   1036c:	00012bc4 	.word	0x00012bc4
   10370:	00012be4 	.word	0x00012be4
   10374:	fffff35c 	.word	0xfffff35c

00010378 <sniprintf>:
   10378:	b40c      	push	{r2, r3}
   1037a:	b530      	push	{r4, r5, lr}
   1037c:	4b16      	ldr	r3, [pc, #88]	; (103d8 <sniprintf+0x60>)
   1037e:	b09d      	sub	sp, #116	; 0x74
   10380:	1e0c      	subs	r4, r1, #0
   10382:	681d      	ldr	r5, [r3, #0]
   10384:	da04      	bge.n	10390 <sniprintf+0x18>
   10386:	238b      	movs	r3, #139	; 0x8b
   10388:	2001      	movs	r0, #1
   1038a:	602b      	str	r3, [r5, #0]
   1038c:	4240      	negs	r0, r0
   1038e:	e01d      	b.n	103cc <sniprintf+0x54>
   10390:	2382      	movs	r3, #130	; 0x82
   10392:	a902      	add	r1, sp, #8
   10394:	009b      	lsls	r3, r3, #2
   10396:	818b      	strh	r3, [r1, #12]
   10398:	2300      	movs	r3, #0
   1039a:	9002      	str	r0, [sp, #8]
   1039c:	6108      	str	r0, [r1, #16]
   1039e:	429c      	cmp	r4, r3
   103a0:	d000      	beq.n	103a4 <sniprintf+0x2c>
   103a2:	1e63      	subs	r3, r4, #1
   103a4:	608b      	str	r3, [r1, #8]
   103a6:	614b      	str	r3, [r1, #20]
   103a8:	2301      	movs	r3, #1
   103aa:	425b      	negs	r3, r3
   103ac:	81cb      	strh	r3, [r1, #14]
   103ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
   103b0:	ab21      	add	r3, sp, #132	; 0x84
   103b2:	0028      	movs	r0, r5
   103b4:	9301      	str	r3, [sp, #4]
   103b6:	f000 fd1d 	bl	10df4 <_svfiprintf_r>
   103ba:	1c43      	adds	r3, r0, #1
   103bc:	da01      	bge.n	103c2 <sniprintf+0x4a>
   103be:	238b      	movs	r3, #139	; 0x8b
   103c0:	602b      	str	r3, [r5, #0]
   103c2:	2c00      	cmp	r4, #0
   103c4:	d002      	beq.n	103cc <sniprintf+0x54>
   103c6:	2300      	movs	r3, #0
   103c8:	9a02      	ldr	r2, [sp, #8]
   103ca:	7013      	strb	r3, [r2, #0]
   103cc:	b01d      	add	sp, #116	; 0x74
   103ce:	bc30      	pop	{r4, r5}
   103d0:	bc08      	pop	{r3}
   103d2:	b002      	add	sp, #8
   103d4:	4718      	bx	r3
   103d6:	46c0      	nop			; (mov r8, r8)
   103d8:	20000094 	.word	0x20000094

000103dc <siprintf>:
   103dc:	b40e      	push	{r1, r2, r3}
   103de:	b510      	push	{r4, lr}
   103e0:	b09d      	sub	sp, #116	; 0x74
   103e2:	a902      	add	r1, sp, #8
   103e4:	9002      	str	r0, [sp, #8]
   103e6:	6108      	str	r0, [r1, #16]
   103e8:	480b      	ldr	r0, [pc, #44]	; (10418 <siprintf+0x3c>)
   103ea:	2482      	movs	r4, #130	; 0x82
   103ec:	6088      	str	r0, [r1, #8]
   103ee:	6148      	str	r0, [r1, #20]
   103f0:	2001      	movs	r0, #1
   103f2:	4240      	negs	r0, r0
   103f4:	ab1f      	add	r3, sp, #124	; 0x7c
   103f6:	81c8      	strh	r0, [r1, #14]
   103f8:	4808      	ldr	r0, [pc, #32]	; (1041c <siprintf+0x40>)
   103fa:	cb04      	ldmia	r3!, {r2}
   103fc:	00a4      	lsls	r4, r4, #2
   103fe:	6800      	ldr	r0, [r0, #0]
   10400:	9301      	str	r3, [sp, #4]
   10402:	818c      	strh	r4, [r1, #12]
   10404:	f000 fcf6 	bl	10df4 <_svfiprintf_r>
   10408:	2300      	movs	r3, #0
   1040a:	9a02      	ldr	r2, [sp, #8]
   1040c:	7013      	strb	r3, [r2, #0]
   1040e:	b01d      	add	sp, #116	; 0x74
   10410:	bc10      	pop	{r4}
   10412:	bc08      	pop	{r3}
   10414:	b003      	add	sp, #12
   10416:	4718      	bx	r3
   10418:	7fffffff 	.word	0x7fffffff
   1041c:	20000094 	.word	0x20000094

00010420 <strcmp>:
   10420:	7802      	ldrb	r2, [r0, #0]
   10422:	780b      	ldrb	r3, [r1, #0]
   10424:	2a00      	cmp	r2, #0
   10426:	d003      	beq.n	10430 <strcmp+0x10>
   10428:	3001      	adds	r0, #1
   1042a:	3101      	adds	r1, #1
   1042c:	429a      	cmp	r2, r3
   1042e:	d0f7      	beq.n	10420 <strcmp>
   10430:	1ad0      	subs	r0, r2, r3
   10432:	4770      	bx	lr

00010434 <strcpy>:
   10434:	1c03      	adds	r3, r0, #0
   10436:	780a      	ldrb	r2, [r1, #0]
   10438:	3101      	adds	r1, #1
   1043a:	701a      	strb	r2, [r3, #0]
   1043c:	3301      	adds	r3, #1
   1043e:	2a00      	cmp	r2, #0
   10440:	d1f9      	bne.n	10436 <strcpy+0x2>
   10442:	4770      	bx	lr

00010444 <strlen>:
   10444:	2300      	movs	r3, #0
   10446:	5cc2      	ldrb	r2, [r0, r3]
   10448:	3301      	adds	r3, #1
   1044a:	2a00      	cmp	r2, #0
   1044c:	d1fb      	bne.n	10446 <strlen+0x2>
   1044e:	1e58      	subs	r0, r3, #1
   10450:	4770      	bx	lr

00010452 <strncmp>:
   10452:	2300      	movs	r3, #0
   10454:	b530      	push	{r4, r5, lr}
   10456:	429a      	cmp	r2, r3
   10458:	d00b      	beq.n	10472 <strncmp+0x20>
   1045a:	3a01      	subs	r2, #1
   1045c:	5cc4      	ldrb	r4, [r0, r3]
   1045e:	5ccd      	ldrb	r5, [r1, r3]
   10460:	42ac      	cmp	r4, r5
   10462:	d105      	bne.n	10470 <strncmp+0x1e>
   10464:	429a      	cmp	r2, r3
   10466:	d002      	beq.n	1046e <strncmp+0x1c>
   10468:	3301      	adds	r3, #1
   1046a:	2c00      	cmp	r4, #0
   1046c:	d1f6      	bne.n	1045c <strncmp+0xa>
   1046e:	0025      	movs	r5, r4
   10470:	1b63      	subs	r3, r4, r5
   10472:	0018      	movs	r0, r3
   10474:	bd30      	pop	{r4, r5, pc}

00010476 <strspn>:
   10476:	0003      	movs	r3, r0
   10478:	b530      	push	{r4, r5, lr}
   1047a:	781c      	ldrb	r4, [r3, #0]
   1047c:	2c00      	cmp	r4, #0
   1047e:	d009      	beq.n	10494 <strspn+0x1e>
   10480:	000a      	movs	r2, r1
   10482:	7815      	ldrb	r5, [r2, #0]
   10484:	2d00      	cmp	r5, #0
   10486:	d005      	beq.n	10494 <strspn+0x1e>
   10488:	42ac      	cmp	r4, r5
   1048a:	d001      	beq.n	10490 <strspn+0x1a>
   1048c:	3201      	adds	r2, #1
   1048e:	e7f8      	b.n	10482 <strspn+0xc>
   10490:	3301      	adds	r3, #1
   10492:	e7f2      	b.n	1047a <strspn+0x4>
   10494:	1a18      	subs	r0, r3, r0
   10496:	bd30      	pop	{r4, r5, pc}

00010498 <_strtol_r>:
   10498:	b5f0      	push	{r4, r5, r6, r7, lr}
   1049a:	001e      	movs	r6, r3
   1049c:	4b45      	ldr	r3, [pc, #276]	; (105b4 <_strtol_r+0x11c>)
   1049e:	b087      	sub	sp, #28
   104a0:	681b      	ldr	r3, [r3, #0]
   104a2:	9201      	str	r2, [sp, #4]
   104a4:	9302      	str	r3, [sp, #8]
   104a6:	2208      	movs	r2, #8
   104a8:	000b      	movs	r3, r1
   104aa:	9005      	str	r0, [sp, #20]
   104ac:	9103      	str	r1, [sp, #12]
   104ae:	781c      	ldrb	r4, [r3, #0]
   104b0:	9902      	ldr	r1, [sp, #8]
   104b2:	1c5d      	adds	r5, r3, #1
   104b4:	1909      	adds	r1, r1, r4
   104b6:	7848      	ldrb	r0, [r1, #1]
   104b8:	4010      	ands	r0, r2
   104ba:	d001      	beq.n	104c0 <_strtol_r+0x28>
   104bc:	002b      	movs	r3, r5
   104be:	e7f6      	b.n	104ae <_strtol_r+0x16>
   104c0:	2c2d      	cmp	r4, #45	; 0x2d
   104c2:	d104      	bne.n	104ce <_strtol_r+0x36>
   104c4:	1c9d      	adds	r5, r3, #2
   104c6:	785c      	ldrb	r4, [r3, #1]
   104c8:	2301      	movs	r3, #1
   104ca:	9300      	str	r3, [sp, #0]
   104cc:	e004      	b.n	104d8 <_strtol_r+0x40>
   104ce:	9000      	str	r0, [sp, #0]
   104d0:	2c2b      	cmp	r4, #43	; 0x2b
   104d2:	d101      	bne.n	104d8 <_strtol_r+0x40>
   104d4:	785c      	ldrb	r4, [r3, #1]
   104d6:	1c9d      	adds	r5, r3, #2
   104d8:	2e00      	cmp	r6, #0
   104da:	d002      	beq.n	104e2 <_strtol_r+0x4a>
   104dc:	2e10      	cmp	r6, #16
   104de:	d10a      	bne.n	104f6 <_strtol_r+0x5e>
   104e0:	e062      	b.n	105a8 <_strtol_r+0x110>
   104e2:	2c30      	cmp	r4, #48	; 0x30
   104e4:	d15e      	bne.n	105a4 <_strtol_r+0x10c>
   104e6:	2220      	movs	r2, #32
   104e8:	782b      	ldrb	r3, [r5, #0]
   104ea:	4393      	bics	r3, r2
   104ec:	2b58      	cmp	r3, #88	; 0x58
   104ee:	d154      	bne.n	1059a <_strtol_r+0x102>
   104f0:	2610      	movs	r6, #16
   104f2:	786c      	ldrb	r4, [r5, #1]
   104f4:	3502      	adds	r5, #2
   104f6:	9f00      	ldr	r7, [sp, #0]
   104f8:	0031      	movs	r1, r6
   104fa:	1e7b      	subs	r3, r7, #1
   104fc:	419f      	sbcs	r7, r3
   104fe:	4b2e      	ldr	r3, [pc, #184]	; (105b8 <_strtol_r+0x120>)
   10500:	18ff      	adds	r7, r7, r3
   10502:	0038      	movs	r0, r7
   10504:	f7fe fdce 	bl	f0a4 <__aeabi_uidivmod>
   10508:	0038      	movs	r0, r7
   1050a:	9104      	str	r1, [sp, #16]
   1050c:	0031      	movs	r1, r6
   1050e:	f7fe fd43 	bl	ef98 <__aeabi_uidiv>
   10512:	2300      	movs	r3, #0
   10514:	2203      	movs	r2, #3
   10516:	0007      	movs	r7, r0
   10518:	4694      	mov	ip, r2
   1051a:	0018      	movs	r0, r3
   1051c:	9a02      	ldr	r2, [sp, #8]
   1051e:	1912      	adds	r2, r2, r4
   10520:	7851      	ldrb	r1, [r2, #1]
   10522:	2204      	movs	r2, #4
   10524:	4211      	tst	r1, r2
   10526:	d001      	beq.n	1052c <_strtol_r+0x94>
   10528:	3c30      	subs	r4, #48	; 0x30
   1052a:	e007      	b.n	1053c <_strtol_r+0xa4>
   1052c:	4662      	mov	r2, ip
   1052e:	4011      	ands	r1, r2
   10530:	d017      	beq.n	10562 <_strtol_r+0xca>
   10532:	2237      	movs	r2, #55	; 0x37
   10534:	2901      	cmp	r1, #1
   10536:	d000      	beq.n	1053a <_strtol_r+0xa2>
   10538:	3220      	adds	r2, #32
   1053a:	1aa4      	subs	r4, r4, r2
   1053c:	42a6      	cmp	r6, r4
   1053e:	dd10      	ble.n	10562 <_strtol_r+0xca>
   10540:	1c5a      	adds	r2, r3, #1
   10542:	d00b      	beq.n	1055c <_strtol_r+0xc4>
   10544:	42b8      	cmp	r0, r7
   10546:	d807      	bhi.n	10558 <_strtol_r+0xc0>
   10548:	d102      	bne.n	10550 <_strtol_r+0xb8>
   1054a:	9b04      	ldr	r3, [sp, #16]
   1054c:	429c      	cmp	r4, r3
   1054e:	dc03      	bgt.n	10558 <_strtol_r+0xc0>
   10550:	4370      	muls	r0, r6
   10552:	2301      	movs	r3, #1
   10554:	1820      	adds	r0, r4, r0
   10556:	e001      	b.n	1055c <_strtol_r+0xc4>
   10558:	2301      	movs	r3, #1
   1055a:	425b      	negs	r3, r3
   1055c:	782c      	ldrb	r4, [r5, #0]
   1055e:	3501      	adds	r5, #1
   10560:	e7dc      	b.n	1051c <_strtol_r+0x84>
   10562:	1c5a      	adds	r2, r3, #1
   10564:	d10b      	bne.n	1057e <_strtol_r+0xe6>
   10566:	9800      	ldr	r0, [sp, #0]
   10568:	9a05      	ldr	r2, [sp, #20]
   1056a:	1e43      	subs	r3, r0, #1
   1056c:	4198      	sbcs	r0, r3
   1056e:	4b12      	ldr	r3, [pc, #72]	; (105b8 <_strtol_r+0x120>)
   10570:	18c0      	adds	r0, r0, r3
   10572:	2322      	movs	r3, #34	; 0x22
   10574:	6013      	str	r3, [r2, #0]
   10576:	9b01      	ldr	r3, [sp, #4]
   10578:	2b00      	cmp	r3, #0
   1057a:	d10a      	bne.n	10592 <_strtol_r+0xfa>
   1057c:	e017      	b.n	105ae <_strtol_r+0x116>
   1057e:	9a00      	ldr	r2, [sp, #0]
   10580:	2a00      	cmp	r2, #0
   10582:	d000      	beq.n	10586 <_strtol_r+0xee>
   10584:	4240      	negs	r0, r0
   10586:	9a01      	ldr	r2, [sp, #4]
   10588:	2a00      	cmp	r2, #0
   1058a:	d010      	beq.n	105ae <_strtol_r+0x116>
   1058c:	9a03      	ldr	r2, [sp, #12]
   1058e:	2b00      	cmp	r3, #0
   10590:	d000      	beq.n	10594 <_strtol_r+0xfc>
   10592:	1e6a      	subs	r2, r5, #1
   10594:	9b01      	ldr	r3, [sp, #4]
   10596:	601a      	str	r2, [r3, #0]
   10598:	e009      	b.n	105ae <_strtol_r+0x116>
   1059a:	2430      	movs	r4, #48	; 0x30
   1059c:	2e00      	cmp	r6, #0
   1059e:	d1aa      	bne.n	104f6 <_strtol_r+0x5e>
   105a0:	2608      	movs	r6, #8
   105a2:	e7a8      	b.n	104f6 <_strtol_r+0x5e>
   105a4:	260a      	movs	r6, #10
   105a6:	e7a6      	b.n	104f6 <_strtol_r+0x5e>
   105a8:	2c30      	cmp	r4, #48	; 0x30
   105aa:	d09c      	beq.n	104e6 <_strtol_r+0x4e>
   105ac:	e7a3      	b.n	104f6 <_strtol_r+0x5e>
   105ae:	b007      	add	sp, #28
   105b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   105b2:	46c0      	nop			; (mov r8, r8)
   105b4:	20000098 	.word	0x20000098
   105b8:	7fffffff 	.word	0x7fffffff

000105bc <strtol>:
   105bc:	b510      	push	{r4, lr}
   105be:	0013      	movs	r3, r2
   105c0:	000a      	movs	r2, r1
   105c2:	0001      	movs	r1, r0
   105c4:	4802      	ldr	r0, [pc, #8]	; (105d0 <strtol+0x14>)
   105c6:	6800      	ldr	r0, [r0, #0]
   105c8:	f7ff ff66 	bl	10498 <_strtol_r>
   105cc:	bd10      	pop	{r4, pc}
   105ce:	46c0      	nop			; (mov r8, r8)
   105d0:	20000094 	.word	0x20000094

000105d4 <__swbuf_r>:
   105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   105d6:	0005      	movs	r5, r0
   105d8:	000f      	movs	r7, r1
   105da:	0014      	movs	r4, r2
   105dc:	2800      	cmp	r0, #0
   105de:	d004      	beq.n	105ea <__swbuf_r+0x16>
   105e0:	6983      	ldr	r3, [r0, #24]
   105e2:	2b00      	cmp	r3, #0
   105e4:	d101      	bne.n	105ea <__swbuf_r+0x16>
   105e6:	f000 f9bf 	bl	10968 <__sinit>
   105ea:	4b23      	ldr	r3, [pc, #140]	; (10678 <__swbuf_r+0xa4>)
   105ec:	429c      	cmp	r4, r3
   105ee:	d101      	bne.n	105f4 <__swbuf_r+0x20>
   105f0:	686c      	ldr	r4, [r5, #4]
   105f2:	e008      	b.n	10606 <__swbuf_r+0x32>
   105f4:	4b21      	ldr	r3, [pc, #132]	; (1067c <__swbuf_r+0xa8>)
   105f6:	429c      	cmp	r4, r3
   105f8:	d101      	bne.n	105fe <__swbuf_r+0x2a>
   105fa:	68ac      	ldr	r4, [r5, #8]
   105fc:	e003      	b.n	10606 <__swbuf_r+0x32>
   105fe:	4b20      	ldr	r3, [pc, #128]	; (10680 <__swbuf_r+0xac>)
   10600:	429c      	cmp	r4, r3
   10602:	d100      	bne.n	10606 <__swbuf_r+0x32>
   10604:	68ec      	ldr	r4, [r5, #12]
   10606:	69a3      	ldr	r3, [r4, #24]
   10608:	60a3      	str	r3, [r4, #8]
   1060a:	89a3      	ldrh	r3, [r4, #12]
   1060c:	071b      	lsls	r3, r3, #28
   1060e:	d50a      	bpl.n	10626 <__swbuf_r+0x52>
   10610:	6923      	ldr	r3, [r4, #16]
   10612:	2b00      	cmp	r3, #0
   10614:	d007      	beq.n	10626 <__swbuf_r+0x52>
   10616:	6823      	ldr	r3, [r4, #0]
   10618:	6922      	ldr	r2, [r4, #16]
   1061a:	b2fe      	uxtb	r6, r7
   1061c:	1a98      	subs	r0, r3, r2
   1061e:	6963      	ldr	r3, [r4, #20]
   10620:	4298      	cmp	r0, r3
   10622:	db0f      	blt.n	10644 <__swbuf_r+0x70>
   10624:	e008      	b.n	10638 <__swbuf_r+0x64>
   10626:	0021      	movs	r1, r4
   10628:	0028      	movs	r0, r5
   1062a:	f000 f82b 	bl	10684 <__swsetup_r>
   1062e:	2800      	cmp	r0, #0
   10630:	d0f1      	beq.n	10616 <__swbuf_r+0x42>
   10632:	2001      	movs	r0, #1
   10634:	4240      	negs	r0, r0
   10636:	e01d      	b.n	10674 <__swbuf_r+0xa0>
   10638:	0021      	movs	r1, r4
   1063a:	0028      	movs	r0, r5
   1063c:	f000 f926 	bl	1088c <_fflush_r>
   10640:	2800      	cmp	r0, #0
   10642:	d1f6      	bne.n	10632 <__swbuf_r+0x5e>
   10644:	68a3      	ldr	r3, [r4, #8]
   10646:	3001      	adds	r0, #1
   10648:	3b01      	subs	r3, #1
   1064a:	60a3      	str	r3, [r4, #8]
   1064c:	6823      	ldr	r3, [r4, #0]
   1064e:	1c5a      	adds	r2, r3, #1
   10650:	6022      	str	r2, [r4, #0]
   10652:	701f      	strb	r7, [r3, #0]
   10654:	6963      	ldr	r3, [r4, #20]
   10656:	4298      	cmp	r0, r3
   10658:	d005      	beq.n	10666 <__swbuf_r+0x92>
   1065a:	89a3      	ldrh	r3, [r4, #12]
   1065c:	0030      	movs	r0, r6
   1065e:	07db      	lsls	r3, r3, #31
   10660:	d508      	bpl.n	10674 <__swbuf_r+0xa0>
   10662:	2e0a      	cmp	r6, #10
   10664:	d106      	bne.n	10674 <__swbuf_r+0xa0>
   10666:	0021      	movs	r1, r4
   10668:	0028      	movs	r0, r5
   1066a:	f000 f90f 	bl	1088c <_fflush_r>
   1066e:	2800      	cmp	r0, #0
   10670:	d1df      	bne.n	10632 <__swbuf_r+0x5e>
   10672:	0030      	movs	r0, r6
   10674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10676:	46c0      	nop			; (mov r8, r8)
   10678:	00012ba4 	.word	0x00012ba4
   1067c:	00012bc4 	.word	0x00012bc4
   10680:	00012be4 	.word	0x00012be4

00010684 <__swsetup_r>:
   10684:	4b36      	ldr	r3, [pc, #216]	; (10760 <__swsetup_r+0xdc>)
   10686:	b570      	push	{r4, r5, r6, lr}
   10688:	681d      	ldr	r5, [r3, #0]
   1068a:	0006      	movs	r6, r0
   1068c:	000c      	movs	r4, r1
   1068e:	2d00      	cmp	r5, #0
   10690:	d005      	beq.n	1069e <__swsetup_r+0x1a>
   10692:	69ab      	ldr	r3, [r5, #24]
   10694:	2b00      	cmp	r3, #0
   10696:	d102      	bne.n	1069e <__swsetup_r+0x1a>
   10698:	0028      	movs	r0, r5
   1069a:	f000 f965 	bl	10968 <__sinit>
   1069e:	4b31      	ldr	r3, [pc, #196]	; (10764 <__swsetup_r+0xe0>)
   106a0:	429c      	cmp	r4, r3
   106a2:	d101      	bne.n	106a8 <__swsetup_r+0x24>
   106a4:	686c      	ldr	r4, [r5, #4]
   106a6:	e008      	b.n	106ba <__swsetup_r+0x36>
   106a8:	4b2f      	ldr	r3, [pc, #188]	; (10768 <__swsetup_r+0xe4>)
   106aa:	429c      	cmp	r4, r3
   106ac:	d101      	bne.n	106b2 <__swsetup_r+0x2e>
   106ae:	68ac      	ldr	r4, [r5, #8]
   106b0:	e003      	b.n	106ba <__swsetup_r+0x36>
   106b2:	4b2e      	ldr	r3, [pc, #184]	; (1076c <__swsetup_r+0xe8>)
   106b4:	429c      	cmp	r4, r3
   106b6:	d100      	bne.n	106ba <__swsetup_r+0x36>
   106b8:	68ec      	ldr	r4, [r5, #12]
   106ba:	220c      	movs	r2, #12
   106bc:	5ea3      	ldrsh	r3, [r4, r2]
   106be:	b29a      	uxth	r2, r3
   106c0:	0711      	lsls	r1, r2, #28
   106c2:	d423      	bmi.n	1070c <__swsetup_r+0x88>
   106c4:	06d1      	lsls	r1, r2, #27
   106c6:	d407      	bmi.n	106d8 <__swsetup_r+0x54>
   106c8:	2209      	movs	r2, #9
   106ca:	2001      	movs	r0, #1
   106cc:	6032      	str	r2, [r6, #0]
   106ce:	3237      	adds	r2, #55	; 0x37
   106d0:	4313      	orrs	r3, r2
   106d2:	81a3      	strh	r3, [r4, #12]
   106d4:	4240      	negs	r0, r0
   106d6:	e042      	b.n	1075e <__swsetup_r+0xda>
   106d8:	0753      	lsls	r3, r2, #29
   106da:	d513      	bpl.n	10704 <__swsetup_r+0x80>
   106dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   106de:	2900      	cmp	r1, #0
   106e0:	d008      	beq.n	106f4 <__swsetup_r+0x70>
   106e2:	0023      	movs	r3, r4
   106e4:	3344      	adds	r3, #68	; 0x44
   106e6:	4299      	cmp	r1, r3
   106e8:	d002      	beq.n	106f0 <__swsetup_r+0x6c>
   106ea:	0030      	movs	r0, r6
   106ec:	f000 fa5e 	bl	10bac <_free_r>
   106f0:	2300      	movs	r3, #0
   106f2:	6363      	str	r3, [r4, #52]	; 0x34
   106f4:	2224      	movs	r2, #36	; 0x24
   106f6:	89a3      	ldrh	r3, [r4, #12]
   106f8:	4393      	bics	r3, r2
   106fa:	81a3      	strh	r3, [r4, #12]
   106fc:	2300      	movs	r3, #0
   106fe:	6063      	str	r3, [r4, #4]
   10700:	6923      	ldr	r3, [r4, #16]
   10702:	6023      	str	r3, [r4, #0]
   10704:	2208      	movs	r2, #8
   10706:	89a3      	ldrh	r3, [r4, #12]
   10708:	4313      	orrs	r3, r2
   1070a:	81a3      	strh	r3, [r4, #12]
   1070c:	6923      	ldr	r3, [r4, #16]
   1070e:	2b00      	cmp	r3, #0
   10710:	d10b      	bne.n	1072a <__swsetup_r+0xa6>
   10712:	23a0      	movs	r3, #160	; 0xa0
   10714:	89a2      	ldrh	r2, [r4, #12]
   10716:	009b      	lsls	r3, r3, #2
   10718:	4013      	ands	r3, r2
   1071a:	2280      	movs	r2, #128	; 0x80
   1071c:	0092      	lsls	r2, r2, #2
   1071e:	4293      	cmp	r3, r2
   10720:	d003      	beq.n	1072a <__swsetup_r+0xa6>
   10722:	0021      	movs	r1, r4
   10724:	0030      	movs	r0, r6
   10726:	f000 f9d9 	bl	10adc <__smakebuf_r>
   1072a:	2301      	movs	r3, #1
   1072c:	89a2      	ldrh	r2, [r4, #12]
   1072e:	4013      	ands	r3, r2
   10730:	d005      	beq.n	1073e <__swsetup_r+0xba>
   10732:	2300      	movs	r3, #0
   10734:	60a3      	str	r3, [r4, #8]
   10736:	6963      	ldr	r3, [r4, #20]
   10738:	425b      	negs	r3, r3
   1073a:	61a3      	str	r3, [r4, #24]
   1073c:	e003      	b.n	10746 <__swsetup_r+0xc2>
   1073e:	0792      	lsls	r2, r2, #30
   10740:	d400      	bmi.n	10744 <__swsetup_r+0xc0>
   10742:	6963      	ldr	r3, [r4, #20]
   10744:	60a3      	str	r3, [r4, #8]
   10746:	2000      	movs	r0, #0
   10748:	6923      	ldr	r3, [r4, #16]
   1074a:	4283      	cmp	r3, r0
   1074c:	d107      	bne.n	1075e <__swsetup_r+0xda>
   1074e:	220c      	movs	r2, #12
   10750:	5ea3      	ldrsh	r3, [r4, r2]
   10752:	061a      	lsls	r2, r3, #24
   10754:	d503      	bpl.n	1075e <__swsetup_r+0xda>
   10756:	2240      	movs	r2, #64	; 0x40
   10758:	4313      	orrs	r3, r2
   1075a:	81a3      	strh	r3, [r4, #12]
   1075c:	3801      	subs	r0, #1
   1075e:	bd70      	pop	{r4, r5, r6, pc}
   10760:	20000094 	.word	0x20000094
   10764:	00012ba4 	.word	0x00012ba4
   10768:	00012bc4 	.word	0x00012bc4
   1076c:	00012be4 	.word	0x00012be4

00010770 <abort>:
   10770:	b510      	push	{r4, lr}
   10772:	2006      	movs	r0, #6
   10774:	f000 fcae 	bl	110d4 <raise>
   10778:	2001      	movs	r0, #1
   1077a:	f7fa fc47 	bl	b00c <_exit>
	...

00010780 <__sflush_r>:
   10780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10782:	898a      	ldrh	r2, [r1, #12]
   10784:	0005      	movs	r5, r0
   10786:	000c      	movs	r4, r1
   10788:	0713      	lsls	r3, r2, #28
   1078a:	d45a      	bmi.n	10842 <__sflush_r+0xc2>
   1078c:	684b      	ldr	r3, [r1, #4]
   1078e:	2b00      	cmp	r3, #0
   10790:	dc02      	bgt.n	10798 <__sflush_r+0x18>
   10792:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10794:	2b00      	cmp	r3, #0
   10796:	dd19      	ble.n	107cc <__sflush_r+0x4c>
   10798:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1079a:	2f00      	cmp	r7, #0
   1079c:	d016      	beq.n	107cc <__sflush_r+0x4c>
   1079e:	2300      	movs	r3, #0
   107a0:	682e      	ldr	r6, [r5, #0]
   107a2:	602b      	str	r3, [r5, #0]
   107a4:	2380      	movs	r3, #128	; 0x80
   107a6:	015b      	lsls	r3, r3, #5
   107a8:	401a      	ands	r2, r3
   107aa:	d001      	beq.n	107b0 <__sflush_r+0x30>
   107ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
   107ae:	e014      	b.n	107da <__sflush_r+0x5a>
   107b0:	2301      	movs	r3, #1
   107b2:	6a21      	ldr	r1, [r4, #32]
   107b4:	0028      	movs	r0, r5
   107b6:	47b8      	blx	r7
   107b8:	1c43      	adds	r3, r0, #1
   107ba:	d10e      	bne.n	107da <__sflush_r+0x5a>
   107bc:	682b      	ldr	r3, [r5, #0]
   107be:	2b00      	cmp	r3, #0
   107c0:	d00b      	beq.n	107da <__sflush_r+0x5a>
   107c2:	2b1d      	cmp	r3, #29
   107c4:	d001      	beq.n	107ca <__sflush_r+0x4a>
   107c6:	2b16      	cmp	r3, #22
   107c8:	d102      	bne.n	107d0 <__sflush_r+0x50>
   107ca:	602e      	str	r6, [r5, #0]
   107cc:	2000      	movs	r0, #0
   107ce:	e05a      	b.n	10886 <__sflush_r+0x106>
   107d0:	2240      	movs	r2, #64	; 0x40
   107d2:	89a3      	ldrh	r3, [r4, #12]
   107d4:	4313      	orrs	r3, r2
   107d6:	81a3      	strh	r3, [r4, #12]
   107d8:	e055      	b.n	10886 <__sflush_r+0x106>
   107da:	89a3      	ldrh	r3, [r4, #12]
   107dc:	075b      	lsls	r3, r3, #29
   107de:	d506      	bpl.n	107ee <__sflush_r+0x6e>
   107e0:	6863      	ldr	r3, [r4, #4]
   107e2:	1ac0      	subs	r0, r0, r3
   107e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   107e6:	2b00      	cmp	r3, #0
   107e8:	d001      	beq.n	107ee <__sflush_r+0x6e>
   107ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
   107ec:	1ac0      	subs	r0, r0, r3
   107ee:	2300      	movs	r3, #0
   107f0:	0002      	movs	r2, r0
   107f2:	6a21      	ldr	r1, [r4, #32]
   107f4:	0028      	movs	r0, r5
   107f6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   107f8:	47b8      	blx	r7
   107fa:	89a3      	ldrh	r3, [r4, #12]
   107fc:	1c42      	adds	r2, r0, #1
   107fe:	d106      	bne.n	1080e <__sflush_r+0x8e>
   10800:	6829      	ldr	r1, [r5, #0]
   10802:	291d      	cmp	r1, #29
   10804:	d83a      	bhi.n	1087c <__sflush_r+0xfc>
   10806:	4a20      	ldr	r2, [pc, #128]	; (10888 <__sflush_r+0x108>)
   10808:	40ca      	lsrs	r2, r1
   1080a:	07d2      	lsls	r2, r2, #31
   1080c:	d536      	bpl.n	1087c <__sflush_r+0xfc>
   1080e:	2200      	movs	r2, #0
   10810:	6062      	str	r2, [r4, #4]
   10812:	6922      	ldr	r2, [r4, #16]
   10814:	6022      	str	r2, [r4, #0]
   10816:	04db      	lsls	r3, r3, #19
   10818:	d505      	bpl.n	10826 <__sflush_r+0xa6>
   1081a:	1c43      	adds	r3, r0, #1
   1081c:	d102      	bne.n	10824 <__sflush_r+0xa4>
   1081e:	682b      	ldr	r3, [r5, #0]
   10820:	2b00      	cmp	r3, #0
   10822:	d100      	bne.n	10826 <__sflush_r+0xa6>
   10824:	6560      	str	r0, [r4, #84]	; 0x54
   10826:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10828:	602e      	str	r6, [r5, #0]
   1082a:	2900      	cmp	r1, #0
   1082c:	d0ce      	beq.n	107cc <__sflush_r+0x4c>
   1082e:	0023      	movs	r3, r4
   10830:	3344      	adds	r3, #68	; 0x44
   10832:	4299      	cmp	r1, r3
   10834:	d002      	beq.n	1083c <__sflush_r+0xbc>
   10836:	0028      	movs	r0, r5
   10838:	f000 f9b8 	bl	10bac <_free_r>
   1083c:	2000      	movs	r0, #0
   1083e:	6360      	str	r0, [r4, #52]	; 0x34
   10840:	e021      	b.n	10886 <__sflush_r+0x106>
   10842:	690f      	ldr	r7, [r1, #16]
   10844:	2f00      	cmp	r7, #0
   10846:	d0c1      	beq.n	107cc <__sflush_r+0x4c>
   10848:	680b      	ldr	r3, [r1, #0]
   1084a:	600f      	str	r7, [r1, #0]
   1084c:	1bdb      	subs	r3, r3, r7
   1084e:	9301      	str	r3, [sp, #4]
   10850:	2300      	movs	r3, #0
   10852:	0792      	lsls	r2, r2, #30
   10854:	d100      	bne.n	10858 <__sflush_r+0xd8>
   10856:	694b      	ldr	r3, [r1, #20]
   10858:	60a3      	str	r3, [r4, #8]
   1085a:	e003      	b.n	10864 <__sflush_r+0xe4>
   1085c:	9b01      	ldr	r3, [sp, #4]
   1085e:	183f      	adds	r7, r7, r0
   10860:	1a1b      	subs	r3, r3, r0
   10862:	9301      	str	r3, [sp, #4]
   10864:	9b01      	ldr	r3, [sp, #4]
   10866:	2b00      	cmp	r3, #0
   10868:	ddb0      	ble.n	107cc <__sflush_r+0x4c>
   1086a:	9b01      	ldr	r3, [sp, #4]
   1086c:	003a      	movs	r2, r7
   1086e:	6a21      	ldr	r1, [r4, #32]
   10870:	0028      	movs	r0, r5
   10872:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10874:	47b0      	blx	r6
   10876:	2800      	cmp	r0, #0
   10878:	dcf0      	bgt.n	1085c <__sflush_r+0xdc>
   1087a:	89a3      	ldrh	r3, [r4, #12]
   1087c:	2240      	movs	r2, #64	; 0x40
   1087e:	2001      	movs	r0, #1
   10880:	4313      	orrs	r3, r2
   10882:	81a3      	strh	r3, [r4, #12]
   10884:	4240      	negs	r0, r0
   10886:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10888:	20400001 	.word	0x20400001

0001088c <_fflush_r>:
   1088c:	690b      	ldr	r3, [r1, #16]
   1088e:	b570      	push	{r4, r5, r6, lr}
   10890:	0005      	movs	r5, r0
   10892:	000c      	movs	r4, r1
   10894:	2b00      	cmp	r3, #0
   10896:	d101      	bne.n	1089c <_fflush_r+0x10>
   10898:	2000      	movs	r0, #0
   1089a:	e01c      	b.n	108d6 <_fflush_r+0x4a>
   1089c:	2800      	cmp	r0, #0
   1089e:	d004      	beq.n	108aa <_fflush_r+0x1e>
   108a0:	6983      	ldr	r3, [r0, #24]
   108a2:	2b00      	cmp	r3, #0
   108a4:	d101      	bne.n	108aa <_fflush_r+0x1e>
   108a6:	f000 f85f 	bl	10968 <__sinit>
   108aa:	4b0b      	ldr	r3, [pc, #44]	; (108d8 <_fflush_r+0x4c>)
   108ac:	429c      	cmp	r4, r3
   108ae:	d101      	bne.n	108b4 <_fflush_r+0x28>
   108b0:	686c      	ldr	r4, [r5, #4]
   108b2:	e008      	b.n	108c6 <_fflush_r+0x3a>
   108b4:	4b09      	ldr	r3, [pc, #36]	; (108dc <_fflush_r+0x50>)
   108b6:	429c      	cmp	r4, r3
   108b8:	d101      	bne.n	108be <_fflush_r+0x32>
   108ba:	68ac      	ldr	r4, [r5, #8]
   108bc:	e003      	b.n	108c6 <_fflush_r+0x3a>
   108be:	4b08      	ldr	r3, [pc, #32]	; (108e0 <_fflush_r+0x54>)
   108c0:	429c      	cmp	r4, r3
   108c2:	d100      	bne.n	108c6 <_fflush_r+0x3a>
   108c4:	68ec      	ldr	r4, [r5, #12]
   108c6:	220c      	movs	r2, #12
   108c8:	5ea3      	ldrsh	r3, [r4, r2]
   108ca:	2b00      	cmp	r3, #0
   108cc:	d0e4      	beq.n	10898 <_fflush_r+0xc>
   108ce:	0021      	movs	r1, r4
   108d0:	0028      	movs	r0, r5
   108d2:	f7ff ff55 	bl	10780 <__sflush_r>
   108d6:	bd70      	pop	{r4, r5, r6, pc}
   108d8:	00012ba4 	.word	0x00012ba4
   108dc:	00012bc4 	.word	0x00012bc4
   108e0:	00012be4 	.word	0x00012be4

000108e4 <_cleanup_r>:
   108e4:	b510      	push	{r4, lr}
   108e6:	4902      	ldr	r1, [pc, #8]	; (108f0 <_cleanup_r+0xc>)
   108e8:	f000 f8b0 	bl	10a4c <_fwalk_reent>
   108ec:	bd10      	pop	{r4, pc}
   108ee:	46c0      	nop			; (mov r8, r8)
   108f0:	0001088d 	.word	0x0001088d

000108f4 <std.isra.0>:
   108f4:	2300      	movs	r3, #0
   108f6:	b510      	push	{r4, lr}
   108f8:	0004      	movs	r4, r0
   108fa:	6003      	str	r3, [r0, #0]
   108fc:	6043      	str	r3, [r0, #4]
   108fe:	6083      	str	r3, [r0, #8]
   10900:	8181      	strh	r1, [r0, #12]
   10902:	6643      	str	r3, [r0, #100]	; 0x64
   10904:	81c2      	strh	r2, [r0, #14]
   10906:	6103      	str	r3, [r0, #16]
   10908:	6143      	str	r3, [r0, #20]
   1090a:	6183      	str	r3, [r0, #24]
   1090c:	0019      	movs	r1, r3
   1090e:	2208      	movs	r2, #8
   10910:	305c      	adds	r0, #92	; 0x5c
   10912:	f7ff f902 	bl	fb1a <memset>
   10916:	4b05      	ldr	r3, [pc, #20]	; (1092c <std.isra.0+0x38>)
   10918:	6224      	str	r4, [r4, #32]
   1091a:	6263      	str	r3, [r4, #36]	; 0x24
   1091c:	4b04      	ldr	r3, [pc, #16]	; (10930 <std.isra.0+0x3c>)
   1091e:	62a3      	str	r3, [r4, #40]	; 0x28
   10920:	4b04      	ldr	r3, [pc, #16]	; (10934 <std.isra.0+0x40>)
   10922:	62e3      	str	r3, [r4, #44]	; 0x2c
   10924:	4b04      	ldr	r3, [pc, #16]	; (10938 <std.isra.0+0x44>)
   10926:	6323      	str	r3, [r4, #48]	; 0x30
   10928:	bd10      	pop	{r4, pc}
   1092a:	46c0      	nop			; (mov r8, r8)
   1092c:	00011115 	.word	0x00011115
   10930:	0001113d 	.word	0x0001113d
   10934:	00011175 	.word	0x00011175
   10938:	000111a1 	.word	0x000111a1

0001093c <__sfmoreglue>:
   1093c:	b570      	push	{r4, r5, r6, lr}
   1093e:	2568      	movs	r5, #104	; 0x68
   10940:	1e4b      	subs	r3, r1, #1
   10942:	435d      	muls	r5, r3
   10944:	000e      	movs	r6, r1
   10946:	0029      	movs	r1, r5
   10948:	3174      	adds	r1, #116	; 0x74
   1094a:	f000 f975 	bl	10c38 <_malloc_r>
   1094e:	1e04      	subs	r4, r0, #0
   10950:	d008      	beq.n	10964 <__sfmoreglue+0x28>
   10952:	2100      	movs	r1, #0
   10954:	002a      	movs	r2, r5
   10956:	6001      	str	r1, [r0, #0]
   10958:	6046      	str	r6, [r0, #4]
   1095a:	300c      	adds	r0, #12
   1095c:	60a0      	str	r0, [r4, #8]
   1095e:	3268      	adds	r2, #104	; 0x68
   10960:	f7ff f8db 	bl	fb1a <memset>
   10964:	0020      	movs	r0, r4
   10966:	bd70      	pop	{r4, r5, r6, pc}

00010968 <__sinit>:
   10968:	6983      	ldr	r3, [r0, #24]
   1096a:	b513      	push	{r0, r1, r4, lr}
   1096c:	0004      	movs	r4, r0
   1096e:	2b00      	cmp	r3, #0
   10970:	d128      	bne.n	109c4 <__sinit+0x5c>
   10972:	6483      	str	r3, [r0, #72]	; 0x48
   10974:	64c3      	str	r3, [r0, #76]	; 0x4c
   10976:	6503      	str	r3, [r0, #80]	; 0x50
   10978:	4b13      	ldr	r3, [pc, #76]	; (109c8 <__sinit+0x60>)
   1097a:	4a14      	ldr	r2, [pc, #80]	; (109cc <__sinit+0x64>)
   1097c:	681b      	ldr	r3, [r3, #0]
   1097e:	6282      	str	r2, [r0, #40]	; 0x28
   10980:	9301      	str	r3, [sp, #4]
   10982:	4298      	cmp	r0, r3
   10984:	d101      	bne.n	1098a <__sinit+0x22>
   10986:	2301      	movs	r3, #1
   10988:	6183      	str	r3, [r0, #24]
   1098a:	0020      	movs	r0, r4
   1098c:	f000 f820 	bl	109d0 <__sfp>
   10990:	6060      	str	r0, [r4, #4]
   10992:	0020      	movs	r0, r4
   10994:	f000 f81c 	bl	109d0 <__sfp>
   10998:	60a0      	str	r0, [r4, #8]
   1099a:	0020      	movs	r0, r4
   1099c:	f000 f818 	bl	109d0 <__sfp>
   109a0:	2200      	movs	r2, #0
   109a2:	60e0      	str	r0, [r4, #12]
   109a4:	2104      	movs	r1, #4
   109a6:	6860      	ldr	r0, [r4, #4]
   109a8:	f7ff ffa4 	bl	108f4 <std.isra.0>
   109ac:	2201      	movs	r2, #1
   109ae:	2109      	movs	r1, #9
   109b0:	68a0      	ldr	r0, [r4, #8]
   109b2:	f7ff ff9f 	bl	108f4 <std.isra.0>
   109b6:	2202      	movs	r2, #2
   109b8:	2112      	movs	r1, #18
   109ba:	68e0      	ldr	r0, [r4, #12]
   109bc:	f7ff ff9a 	bl	108f4 <std.isra.0>
   109c0:	2301      	movs	r3, #1
   109c2:	61a3      	str	r3, [r4, #24]
   109c4:	bd13      	pop	{r0, r1, r4, pc}
   109c6:	46c0      	nop			; (mov r8, r8)
   109c8:	00012a6c 	.word	0x00012a6c
   109cc:	000108e5 	.word	0x000108e5

000109d0 <__sfp>:
   109d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109d2:	4b1d      	ldr	r3, [pc, #116]	; (10a48 <__sfp+0x78>)
   109d4:	0006      	movs	r6, r0
   109d6:	681d      	ldr	r5, [r3, #0]
   109d8:	69ab      	ldr	r3, [r5, #24]
   109da:	2b00      	cmp	r3, #0
   109dc:	d102      	bne.n	109e4 <__sfp+0x14>
   109de:	0028      	movs	r0, r5
   109e0:	f7ff ffc2 	bl	10968 <__sinit>
   109e4:	3548      	adds	r5, #72	; 0x48
   109e6:	68ac      	ldr	r4, [r5, #8]
   109e8:	686b      	ldr	r3, [r5, #4]
   109ea:	3b01      	subs	r3, #1
   109ec:	d405      	bmi.n	109fa <__sfp+0x2a>
   109ee:	220c      	movs	r2, #12
   109f0:	5ea7      	ldrsh	r7, [r4, r2]
   109f2:	2f00      	cmp	r7, #0
   109f4:	d010      	beq.n	10a18 <__sfp+0x48>
   109f6:	3468      	adds	r4, #104	; 0x68
   109f8:	e7f7      	b.n	109ea <__sfp+0x1a>
   109fa:	682b      	ldr	r3, [r5, #0]
   109fc:	2b00      	cmp	r3, #0
   109fe:	d001      	beq.n	10a04 <__sfp+0x34>
   10a00:	682d      	ldr	r5, [r5, #0]
   10a02:	e7f0      	b.n	109e6 <__sfp+0x16>
   10a04:	2104      	movs	r1, #4
   10a06:	0030      	movs	r0, r6
   10a08:	f7ff ff98 	bl	1093c <__sfmoreglue>
   10a0c:	6028      	str	r0, [r5, #0]
   10a0e:	2800      	cmp	r0, #0
   10a10:	d1f6      	bne.n	10a00 <__sfp+0x30>
   10a12:	230c      	movs	r3, #12
   10a14:	6033      	str	r3, [r6, #0]
   10a16:	e016      	b.n	10a46 <__sfp+0x76>
   10a18:	2301      	movs	r3, #1
   10a1a:	0020      	movs	r0, r4
   10a1c:	425b      	negs	r3, r3
   10a1e:	81e3      	strh	r3, [r4, #14]
   10a20:	3302      	adds	r3, #2
   10a22:	81a3      	strh	r3, [r4, #12]
   10a24:	6667      	str	r7, [r4, #100]	; 0x64
   10a26:	6027      	str	r7, [r4, #0]
   10a28:	60a7      	str	r7, [r4, #8]
   10a2a:	6067      	str	r7, [r4, #4]
   10a2c:	6127      	str	r7, [r4, #16]
   10a2e:	6167      	str	r7, [r4, #20]
   10a30:	61a7      	str	r7, [r4, #24]
   10a32:	305c      	adds	r0, #92	; 0x5c
   10a34:	2208      	movs	r2, #8
   10a36:	0039      	movs	r1, r7
   10a38:	f7ff f86f 	bl	fb1a <memset>
   10a3c:	0020      	movs	r0, r4
   10a3e:	6367      	str	r7, [r4, #52]	; 0x34
   10a40:	63a7      	str	r7, [r4, #56]	; 0x38
   10a42:	64a7      	str	r7, [r4, #72]	; 0x48
   10a44:	64e7      	str	r7, [r4, #76]	; 0x4c
   10a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a48:	00012a6c 	.word	0x00012a6c

00010a4c <_fwalk_reent>:
   10a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10a4e:	0004      	movs	r4, r0
   10a50:	0007      	movs	r7, r0
   10a52:	2600      	movs	r6, #0
   10a54:	9101      	str	r1, [sp, #4]
   10a56:	3448      	adds	r4, #72	; 0x48
   10a58:	2c00      	cmp	r4, #0
   10a5a:	d016      	beq.n	10a8a <_fwalk_reent+0x3e>
   10a5c:	6863      	ldr	r3, [r4, #4]
   10a5e:	68a5      	ldr	r5, [r4, #8]
   10a60:	9300      	str	r3, [sp, #0]
   10a62:	9b00      	ldr	r3, [sp, #0]
   10a64:	3b01      	subs	r3, #1
   10a66:	9300      	str	r3, [sp, #0]
   10a68:	d40d      	bmi.n	10a86 <_fwalk_reent+0x3a>
   10a6a:	89ab      	ldrh	r3, [r5, #12]
   10a6c:	2b01      	cmp	r3, #1
   10a6e:	d908      	bls.n	10a82 <_fwalk_reent+0x36>
   10a70:	220e      	movs	r2, #14
   10a72:	5eab      	ldrsh	r3, [r5, r2]
   10a74:	3301      	adds	r3, #1
   10a76:	d004      	beq.n	10a82 <_fwalk_reent+0x36>
   10a78:	0029      	movs	r1, r5
   10a7a:	0038      	movs	r0, r7
   10a7c:	9b01      	ldr	r3, [sp, #4]
   10a7e:	4798      	blx	r3
   10a80:	4306      	orrs	r6, r0
   10a82:	3568      	adds	r5, #104	; 0x68
   10a84:	e7ed      	b.n	10a62 <_fwalk_reent+0x16>
   10a86:	6824      	ldr	r4, [r4, #0]
   10a88:	e7e6      	b.n	10a58 <_fwalk_reent+0xc>
   10a8a:	0030      	movs	r0, r6
   10a8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00010a90 <__swhatbuf_r>:
   10a90:	b570      	push	{r4, r5, r6, lr}
   10a92:	000e      	movs	r6, r1
   10a94:	001d      	movs	r5, r3
   10a96:	230e      	movs	r3, #14
   10a98:	5ec9      	ldrsh	r1, [r1, r3]
   10a9a:	b090      	sub	sp, #64	; 0x40
   10a9c:	0014      	movs	r4, r2
   10a9e:	2900      	cmp	r1, #0
   10aa0:	da06      	bge.n	10ab0 <__swhatbuf_r+0x20>
   10aa2:	2300      	movs	r3, #0
   10aa4:	602b      	str	r3, [r5, #0]
   10aa6:	89b3      	ldrh	r3, [r6, #12]
   10aa8:	061b      	lsls	r3, r3, #24
   10aaa:	d50f      	bpl.n	10acc <__swhatbuf_r+0x3c>
   10aac:	2340      	movs	r3, #64	; 0x40
   10aae:	e00f      	b.n	10ad0 <__swhatbuf_r+0x40>
   10ab0:	aa01      	add	r2, sp, #4
   10ab2:	f000 fba1 	bl	111f8 <_fstat_r>
   10ab6:	2800      	cmp	r0, #0
   10ab8:	dbf3      	blt.n	10aa2 <__swhatbuf_r+0x12>
   10aba:	23f0      	movs	r3, #240	; 0xf0
   10abc:	9a02      	ldr	r2, [sp, #8]
   10abe:	021b      	lsls	r3, r3, #8
   10ac0:	4013      	ands	r3, r2
   10ac2:	4a05      	ldr	r2, [pc, #20]	; (10ad8 <__swhatbuf_r+0x48>)
   10ac4:	189b      	adds	r3, r3, r2
   10ac6:	425a      	negs	r2, r3
   10ac8:	4153      	adcs	r3, r2
   10aca:	602b      	str	r3, [r5, #0]
   10acc:	2380      	movs	r3, #128	; 0x80
   10ace:	00db      	lsls	r3, r3, #3
   10ad0:	2000      	movs	r0, #0
   10ad2:	6023      	str	r3, [r4, #0]
   10ad4:	b010      	add	sp, #64	; 0x40
   10ad6:	bd70      	pop	{r4, r5, r6, pc}
   10ad8:	ffffe000 	.word	0xffffe000

00010adc <__smakebuf_r>:
   10adc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10ade:	2602      	movs	r6, #2
   10ae0:	898b      	ldrh	r3, [r1, #12]
   10ae2:	0005      	movs	r5, r0
   10ae4:	000c      	movs	r4, r1
   10ae6:	4233      	tst	r3, r6
   10ae8:	d110      	bne.n	10b0c <__smakebuf_r+0x30>
   10aea:	ab01      	add	r3, sp, #4
   10aec:	466a      	mov	r2, sp
   10aee:	f7ff ffcf 	bl	10a90 <__swhatbuf_r>
   10af2:	9900      	ldr	r1, [sp, #0]
   10af4:	0007      	movs	r7, r0
   10af6:	0028      	movs	r0, r5
   10af8:	f000 f89e 	bl	10c38 <_malloc_r>
   10afc:	2800      	cmp	r0, #0
   10afe:	d10c      	bne.n	10b1a <__smakebuf_r+0x3e>
   10b00:	220c      	movs	r2, #12
   10b02:	5ea3      	ldrsh	r3, [r4, r2]
   10b04:	059a      	lsls	r2, r3, #22
   10b06:	d423      	bmi.n	10b50 <__smakebuf_r+0x74>
   10b08:	4333      	orrs	r3, r6
   10b0a:	81a3      	strh	r3, [r4, #12]
   10b0c:	0023      	movs	r3, r4
   10b0e:	3347      	adds	r3, #71	; 0x47
   10b10:	6023      	str	r3, [r4, #0]
   10b12:	6123      	str	r3, [r4, #16]
   10b14:	2301      	movs	r3, #1
   10b16:	6163      	str	r3, [r4, #20]
   10b18:	e01a      	b.n	10b50 <__smakebuf_r+0x74>
   10b1a:	2280      	movs	r2, #128	; 0x80
   10b1c:	4b0d      	ldr	r3, [pc, #52]	; (10b54 <__smakebuf_r+0x78>)
   10b1e:	62ab      	str	r3, [r5, #40]	; 0x28
   10b20:	89a3      	ldrh	r3, [r4, #12]
   10b22:	6020      	str	r0, [r4, #0]
   10b24:	4313      	orrs	r3, r2
   10b26:	81a3      	strh	r3, [r4, #12]
   10b28:	9b00      	ldr	r3, [sp, #0]
   10b2a:	6120      	str	r0, [r4, #16]
   10b2c:	6163      	str	r3, [r4, #20]
   10b2e:	9b01      	ldr	r3, [sp, #4]
   10b30:	2b00      	cmp	r3, #0
   10b32:	d00a      	beq.n	10b4a <__smakebuf_r+0x6e>
   10b34:	230e      	movs	r3, #14
   10b36:	5ee1      	ldrsh	r1, [r4, r3]
   10b38:	0028      	movs	r0, r5
   10b3a:	f000 fb6f 	bl	1121c <_isatty_r>
   10b3e:	2800      	cmp	r0, #0
   10b40:	d003      	beq.n	10b4a <__smakebuf_r+0x6e>
   10b42:	2201      	movs	r2, #1
   10b44:	89a3      	ldrh	r3, [r4, #12]
   10b46:	4313      	orrs	r3, r2
   10b48:	81a3      	strh	r3, [r4, #12]
   10b4a:	89a3      	ldrh	r3, [r4, #12]
   10b4c:	431f      	orrs	r7, r3
   10b4e:	81a7      	strh	r7, [r4, #12]
   10b50:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10b52:	46c0      	nop			; (mov r8, r8)
   10b54:	000108e5 	.word	0x000108e5

00010b58 <malloc>:
   10b58:	b510      	push	{r4, lr}
   10b5a:	4b03      	ldr	r3, [pc, #12]	; (10b68 <malloc+0x10>)
   10b5c:	0001      	movs	r1, r0
   10b5e:	6818      	ldr	r0, [r3, #0]
   10b60:	f000 f86a 	bl	10c38 <_malloc_r>
   10b64:	bd10      	pop	{r4, pc}
   10b66:	46c0      	nop			; (mov r8, r8)
   10b68:	20000094 	.word	0x20000094

00010b6c <memchr>:
   10b6c:	b2c9      	uxtb	r1, r1
   10b6e:	1882      	adds	r2, r0, r2
   10b70:	4290      	cmp	r0, r2
   10b72:	d004      	beq.n	10b7e <memchr+0x12>
   10b74:	7803      	ldrb	r3, [r0, #0]
   10b76:	428b      	cmp	r3, r1
   10b78:	d002      	beq.n	10b80 <memchr+0x14>
   10b7a:	3001      	adds	r0, #1
   10b7c:	e7f8      	b.n	10b70 <memchr+0x4>
   10b7e:	2000      	movs	r0, #0
   10b80:	4770      	bx	lr

00010b82 <memmove>:
   10b82:	b510      	push	{r4, lr}
   10b84:	4288      	cmp	r0, r1
   10b86:	d902      	bls.n	10b8e <memmove+0xc>
   10b88:	188b      	adds	r3, r1, r2
   10b8a:	4298      	cmp	r0, r3
   10b8c:	d301      	bcc.n	10b92 <memmove+0x10>
   10b8e:	2300      	movs	r3, #0
   10b90:	e005      	b.n	10b9e <memmove+0x1c>
   10b92:	1a9b      	subs	r3, r3, r2
   10b94:	3a01      	subs	r2, #1
   10b96:	d308      	bcc.n	10baa <memmove+0x28>
   10b98:	5c99      	ldrb	r1, [r3, r2]
   10b9a:	5481      	strb	r1, [r0, r2]
   10b9c:	e7fa      	b.n	10b94 <memmove+0x12>
   10b9e:	4293      	cmp	r3, r2
   10ba0:	d003      	beq.n	10baa <memmove+0x28>
   10ba2:	5ccc      	ldrb	r4, [r1, r3]
   10ba4:	54c4      	strb	r4, [r0, r3]
   10ba6:	3301      	adds	r3, #1
   10ba8:	e7f9      	b.n	10b9e <memmove+0x1c>
   10baa:	bd10      	pop	{r4, pc}

00010bac <_free_r>:
   10bac:	b530      	push	{r4, r5, lr}
   10bae:	2900      	cmp	r1, #0
   10bb0:	d03e      	beq.n	10c30 <_free_r+0x84>
   10bb2:	3904      	subs	r1, #4
   10bb4:	680b      	ldr	r3, [r1, #0]
   10bb6:	2b00      	cmp	r3, #0
   10bb8:	da00      	bge.n	10bbc <_free_r+0x10>
   10bba:	18c9      	adds	r1, r1, r3
   10bbc:	4a1d      	ldr	r2, [pc, #116]	; (10c34 <_free_r+0x88>)
   10bbe:	6813      	ldr	r3, [r2, #0]
   10bc0:	0014      	movs	r4, r2
   10bc2:	2b00      	cmp	r3, #0
   10bc4:	d102      	bne.n	10bcc <_free_r+0x20>
   10bc6:	604b      	str	r3, [r1, #4]
   10bc8:	6011      	str	r1, [r2, #0]
   10bca:	e031      	b.n	10c30 <_free_r+0x84>
   10bcc:	428b      	cmp	r3, r1
   10bce:	d90d      	bls.n	10bec <_free_r+0x40>
   10bd0:	680a      	ldr	r2, [r1, #0]
   10bd2:	1888      	adds	r0, r1, r2
   10bd4:	4283      	cmp	r3, r0
   10bd6:	d103      	bne.n	10be0 <_free_r+0x34>
   10bd8:	6818      	ldr	r0, [r3, #0]
   10bda:	685b      	ldr	r3, [r3, #4]
   10bdc:	1882      	adds	r2, r0, r2
   10bde:	600a      	str	r2, [r1, #0]
   10be0:	604b      	str	r3, [r1, #4]
   10be2:	6021      	str	r1, [r4, #0]
   10be4:	e024      	b.n	10c30 <_free_r+0x84>
   10be6:	428a      	cmp	r2, r1
   10be8:	d803      	bhi.n	10bf2 <_free_r+0x46>
   10bea:	0013      	movs	r3, r2
   10bec:	685a      	ldr	r2, [r3, #4]
   10bee:	2a00      	cmp	r2, #0
   10bf0:	d1f9      	bne.n	10be6 <_free_r+0x3a>
   10bf2:	681d      	ldr	r5, [r3, #0]
   10bf4:	195c      	adds	r4, r3, r5
   10bf6:	428c      	cmp	r4, r1
   10bf8:	d10b      	bne.n	10c12 <_free_r+0x66>
   10bfa:	6809      	ldr	r1, [r1, #0]
   10bfc:	1869      	adds	r1, r5, r1
   10bfe:	1858      	adds	r0, r3, r1
   10c00:	6019      	str	r1, [r3, #0]
   10c02:	4282      	cmp	r2, r0
   10c04:	d114      	bne.n	10c30 <_free_r+0x84>
   10c06:	6810      	ldr	r0, [r2, #0]
   10c08:	6852      	ldr	r2, [r2, #4]
   10c0a:	1841      	adds	r1, r0, r1
   10c0c:	6019      	str	r1, [r3, #0]
   10c0e:	605a      	str	r2, [r3, #4]
   10c10:	e00e      	b.n	10c30 <_free_r+0x84>
   10c12:	428c      	cmp	r4, r1
   10c14:	d902      	bls.n	10c1c <_free_r+0x70>
   10c16:	230c      	movs	r3, #12
   10c18:	6003      	str	r3, [r0, #0]
   10c1a:	e009      	b.n	10c30 <_free_r+0x84>
   10c1c:	6808      	ldr	r0, [r1, #0]
   10c1e:	180c      	adds	r4, r1, r0
   10c20:	42a2      	cmp	r2, r4
   10c22:	d103      	bne.n	10c2c <_free_r+0x80>
   10c24:	6814      	ldr	r4, [r2, #0]
   10c26:	6852      	ldr	r2, [r2, #4]
   10c28:	1820      	adds	r0, r4, r0
   10c2a:	6008      	str	r0, [r1, #0]
   10c2c:	604a      	str	r2, [r1, #4]
   10c2e:	6059      	str	r1, [r3, #4]
   10c30:	bd30      	pop	{r4, r5, pc}
   10c32:	46c0      	nop			; (mov r8, r8)
   10c34:	200045ac 	.word	0x200045ac

00010c38 <_malloc_r>:
   10c38:	2303      	movs	r3, #3
   10c3a:	b570      	push	{r4, r5, r6, lr}
   10c3c:	1ccd      	adds	r5, r1, #3
   10c3e:	439d      	bics	r5, r3
   10c40:	3508      	adds	r5, #8
   10c42:	0006      	movs	r6, r0
   10c44:	2d0c      	cmp	r5, #12
   10c46:	d201      	bcs.n	10c4c <_malloc_r+0x14>
   10c48:	250c      	movs	r5, #12
   10c4a:	e005      	b.n	10c58 <_malloc_r+0x20>
   10c4c:	2d00      	cmp	r5, #0
   10c4e:	da03      	bge.n	10c58 <_malloc_r+0x20>
   10c50:	230c      	movs	r3, #12
   10c52:	2000      	movs	r0, #0
   10c54:	6033      	str	r3, [r6, #0]
   10c56:	e040      	b.n	10cda <_malloc_r+0xa2>
   10c58:	42a9      	cmp	r1, r5
   10c5a:	d8f9      	bhi.n	10c50 <_malloc_r+0x18>
   10c5c:	4b1f      	ldr	r3, [pc, #124]	; (10cdc <_malloc_r+0xa4>)
   10c5e:	681c      	ldr	r4, [r3, #0]
   10c60:	001a      	movs	r2, r3
   10c62:	0021      	movs	r1, r4
   10c64:	2900      	cmp	r1, #0
   10c66:	d013      	beq.n	10c90 <_malloc_r+0x58>
   10c68:	680b      	ldr	r3, [r1, #0]
   10c6a:	1b5b      	subs	r3, r3, r5
   10c6c:	d40d      	bmi.n	10c8a <_malloc_r+0x52>
   10c6e:	2b0b      	cmp	r3, #11
   10c70:	d902      	bls.n	10c78 <_malloc_r+0x40>
   10c72:	600b      	str	r3, [r1, #0]
   10c74:	18cc      	adds	r4, r1, r3
   10c76:	e01e      	b.n	10cb6 <_malloc_r+0x7e>
   10c78:	428c      	cmp	r4, r1
   10c7a:	d102      	bne.n	10c82 <_malloc_r+0x4a>
   10c7c:	6863      	ldr	r3, [r4, #4]
   10c7e:	6013      	str	r3, [r2, #0]
   10c80:	e01a      	b.n	10cb8 <_malloc_r+0x80>
   10c82:	684b      	ldr	r3, [r1, #4]
   10c84:	6063      	str	r3, [r4, #4]
   10c86:	000c      	movs	r4, r1
   10c88:	e016      	b.n	10cb8 <_malloc_r+0x80>
   10c8a:	000c      	movs	r4, r1
   10c8c:	6849      	ldr	r1, [r1, #4]
   10c8e:	e7e9      	b.n	10c64 <_malloc_r+0x2c>
   10c90:	4c13      	ldr	r4, [pc, #76]	; (10ce0 <_malloc_r+0xa8>)
   10c92:	6823      	ldr	r3, [r4, #0]
   10c94:	2b00      	cmp	r3, #0
   10c96:	d103      	bne.n	10ca0 <_malloc_r+0x68>
   10c98:	0030      	movs	r0, r6
   10c9a:	f000 f9df 	bl	1105c <_sbrk_r>
   10c9e:	6020      	str	r0, [r4, #0]
   10ca0:	0029      	movs	r1, r5
   10ca2:	0030      	movs	r0, r6
   10ca4:	f000 f9da 	bl	1105c <_sbrk_r>
   10ca8:	1c43      	adds	r3, r0, #1
   10caa:	d0d1      	beq.n	10c50 <_malloc_r+0x18>
   10cac:	2303      	movs	r3, #3
   10cae:	1cc4      	adds	r4, r0, #3
   10cb0:	439c      	bics	r4, r3
   10cb2:	42a0      	cmp	r0, r4
   10cb4:	d10a      	bne.n	10ccc <_malloc_r+0x94>
   10cb6:	6025      	str	r5, [r4, #0]
   10cb8:	0020      	movs	r0, r4
   10cba:	2207      	movs	r2, #7
   10cbc:	300b      	adds	r0, #11
   10cbe:	1d23      	adds	r3, r4, #4
   10cc0:	4390      	bics	r0, r2
   10cc2:	1ac3      	subs	r3, r0, r3
   10cc4:	d009      	beq.n	10cda <_malloc_r+0xa2>
   10cc6:	425a      	negs	r2, r3
   10cc8:	50e2      	str	r2, [r4, r3]
   10cca:	e006      	b.n	10cda <_malloc_r+0xa2>
   10ccc:	1a21      	subs	r1, r4, r0
   10cce:	0030      	movs	r0, r6
   10cd0:	f000 f9c4 	bl	1105c <_sbrk_r>
   10cd4:	1c43      	adds	r3, r0, #1
   10cd6:	d1ee      	bne.n	10cb6 <_malloc_r+0x7e>
   10cd8:	e7ba      	b.n	10c50 <_malloc_r+0x18>
   10cda:	bd70      	pop	{r4, r5, r6, pc}
   10cdc:	200045ac 	.word	0x200045ac
   10ce0:	200045a8 	.word	0x200045a8

00010ce4 <_realloc_r>:
   10ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ce6:	0006      	movs	r6, r0
   10ce8:	000c      	movs	r4, r1
   10cea:	0015      	movs	r5, r2
   10cec:	2900      	cmp	r1, #0
   10cee:	d104      	bne.n	10cfa <_realloc_r+0x16>
   10cf0:	0011      	movs	r1, r2
   10cf2:	f7ff ffa1 	bl	10c38 <_malloc_r>
   10cf6:	0004      	movs	r4, r0
   10cf8:	e018      	b.n	10d2c <_realloc_r+0x48>
   10cfa:	2a00      	cmp	r2, #0
   10cfc:	d103      	bne.n	10d06 <_realloc_r+0x22>
   10cfe:	f7ff ff55 	bl	10bac <_free_r>
   10d02:	002c      	movs	r4, r5
   10d04:	e012      	b.n	10d2c <_realloc_r+0x48>
   10d06:	f000 faaf 	bl	11268 <_malloc_usable_size_r>
   10d0a:	4285      	cmp	r5, r0
   10d0c:	d90e      	bls.n	10d2c <_realloc_r+0x48>
   10d0e:	0029      	movs	r1, r5
   10d10:	0030      	movs	r0, r6
   10d12:	f7ff ff91 	bl	10c38 <_malloc_r>
   10d16:	1e07      	subs	r7, r0, #0
   10d18:	d007      	beq.n	10d2a <_realloc_r+0x46>
   10d1a:	0021      	movs	r1, r4
   10d1c:	002a      	movs	r2, r5
   10d1e:	f7fe fef3 	bl	fb08 <memcpy>
   10d22:	0021      	movs	r1, r4
   10d24:	0030      	movs	r0, r6
   10d26:	f7ff ff41 	bl	10bac <_free_r>
   10d2a:	003c      	movs	r4, r7
   10d2c:	0020      	movs	r0, r4
   10d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010d30 <__ssputs_r>:
   10d30:	b5f0      	push	{r4, r5, r6, r7, lr}
   10d32:	688e      	ldr	r6, [r1, #8]
   10d34:	b085      	sub	sp, #20
   10d36:	0007      	movs	r7, r0
   10d38:	000c      	movs	r4, r1
   10d3a:	9203      	str	r2, [sp, #12]
   10d3c:	9301      	str	r3, [sp, #4]
   10d3e:	429e      	cmp	r6, r3
   10d40:	d843      	bhi.n	10dca <__ssputs_r+0x9a>
   10d42:	2390      	movs	r3, #144	; 0x90
   10d44:	898a      	ldrh	r2, [r1, #12]
   10d46:	00db      	lsls	r3, r3, #3
   10d48:	421a      	tst	r2, r3
   10d4a:	d03e      	beq.n	10dca <__ssputs_r+0x9a>
   10d4c:	2503      	movs	r5, #3
   10d4e:	6909      	ldr	r1, [r1, #16]
   10d50:	6823      	ldr	r3, [r4, #0]
   10d52:	9801      	ldr	r0, [sp, #4]
   10d54:	1a5b      	subs	r3, r3, r1
   10d56:	9302      	str	r3, [sp, #8]
   10d58:	6963      	ldr	r3, [r4, #20]
   10d5a:	435d      	muls	r5, r3
   10d5c:	0feb      	lsrs	r3, r5, #31
   10d5e:	195d      	adds	r5, r3, r5
   10d60:	9b02      	ldr	r3, [sp, #8]
   10d62:	106d      	asrs	r5, r5, #1
   10d64:	3301      	adds	r3, #1
   10d66:	181b      	adds	r3, r3, r0
   10d68:	42ab      	cmp	r3, r5
   10d6a:	d900      	bls.n	10d6e <__ssputs_r+0x3e>
   10d6c:	001d      	movs	r5, r3
   10d6e:	0553      	lsls	r3, r2, #21
   10d70:	d510      	bpl.n	10d94 <__ssputs_r+0x64>
   10d72:	0029      	movs	r1, r5
   10d74:	0038      	movs	r0, r7
   10d76:	f7ff ff5f 	bl	10c38 <_malloc_r>
   10d7a:	1e06      	subs	r6, r0, #0
   10d7c:	d014      	beq.n	10da8 <__ssputs_r+0x78>
   10d7e:	9a02      	ldr	r2, [sp, #8]
   10d80:	6921      	ldr	r1, [r4, #16]
   10d82:	f7fe fec1 	bl	fb08 <memcpy>
   10d86:	89a2      	ldrh	r2, [r4, #12]
   10d88:	4b19      	ldr	r3, [pc, #100]	; (10df0 <__ssputs_r+0xc0>)
   10d8a:	4013      	ands	r3, r2
   10d8c:	2280      	movs	r2, #128	; 0x80
   10d8e:	4313      	orrs	r3, r2
   10d90:	81a3      	strh	r3, [r4, #12]
   10d92:	e012      	b.n	10dba <__ssputs_r+0x8a>
   10d94:	002a      	movs	r2, r5
   10d96:	0038      	movs	r0, r7
   10d98:	f7ff ffa4 	bl	10ce4 <_realloc_r>
   10d9c:	1e06      	subs	r6, r0, #0
   10d9e:	d10c      	bne.n	10dba <__ssputs_r+0x8a>
   10da0:	6921      	ldr	r1, [r4, #16]
   10da2:	0038      	movs	r0, r7
   10da4:	f7ff ff02 	bl	10bac <_free_r>
   10da8:	230c      	movs	r3, #12
   10daa:	2240      	movs	r2, #64	; 0x40
   10dac:	2001      	movs	r0, #1
   10dae:	603b      	str	r3, [r7, #0]
   10db0:	89a3      	ldrh	r3, [r4, #12]
   10db2:	4240      	negs	r0, r0
   10db4:	4313      	orrs	r3, r2
   10db6:	81a3      	strh	r3, [r4, #12]
   10db8:	e017      	b.n	10dea <__ssputs_r+0xba>
   10dba:	9b02      	ldr	r3, [sp, #8]
   10dbc:	6126      	str	r6, [r4, #16]
   10dbe:	18f6      	adds	r6, r6, r3
   10dc0:	6026      	str	r6, [r4, #0]
   10dc2:	6165      	str	r5, [r4, #20]
   10dc4:	9e01      	ldr	r6, [sp, #4]
   10dc6:	1aed      	subs	r5, r5, r3
   10dc8:	60a5      	str	r5, [r4, #8]
   10dca:	9b01      	ldr	r3, [sp, #4]
   10dcc:	42b3      	cmp	r3, r6
   10dce:	d200      	bcs.n	10dd2 <__ssputs_r+0xa2>
   10dd0:	001e      	movs	r6, r3
   10dd2:	0032      	movs	r2, r6
   10dd4:	9903      	ldr	r1, [sp, #12]
   10dd6:	6820      	ldr	r0, [r4, #0]
   10dd8:	f7ff fed3 	bl	10b82 <memmove>
   10ddc:	2000      	movs	r0, #0
   10dde:	68a3      	ldr	r3, [r4, #8]
   10de0:	1b9b      	subs	r3, r3, r6
   10de2:	60a3      	str	r3, [r4, #8]
   10de4:	6823      	ldr	r3, [r4, #0]
   10de6:	199e      	adds	r6, r3, r6
   10de8:	6026      	str	r6, [r4, #0]
   10dea:	b005      	add	sp, #20
   10dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10dee:	46c0      	nop			; (mov r8, r8)
   10df0:	fffffb7f 	.word	0xfffffb7f

00010df4 <_svfiprintf_r>:
   10df4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10df6:	b09f      	sub	sp, #124	; 0x7c
   10df8:	9002      	str	r0, [sp, #8]
   10dfa:	9305      	str	r3, [sp, #20]
   10dfc:	898b      	ldrh	r3, [r1, #12]
   10dfe:	000f      	movs	r7, r1
   10e00:	0016      	movs	r6, r2
   10e02:	061b      	lsls	r3, r3, #24
   10e04:	d510      	bpl.n	10e28 <_svfiprintf_r+0x34>
   10e06:	690b      	ldr	r3, [r1, #16]
   10e08:	2b00      	cmp	r3, #0
   10e0a:	d10d      	bne.n	10e28 <_svfiprintf_r+0x34>
   10e0c:	2140      	movs	r1, #64	; 0x40
   10e0e:	f7ff ff13 	bl	10c38 <_malloc_r>
   10e12:	6038      	str	r0, [r7, #0]
   10e14:	6138      	str	r0, [r7, #16]
   10e16:	2800      	cmp	r0, #0
   10e18:	d104      	bne.n	10e24 <_svfiprintf_r+0x30>
   10e1a:	230c      	movs	r3, #12
   10e1c:	9a02      	ldr	r2, [sp, #8]
   10e1e:	3801      	subs	r0, #1
   10e20:	6013      	str	r3, [r2, #0]
   10e22:	e0d8      	b.n	10fd6 <_svfiprintf_r+0x1e2>
   10e24:	2340      	movs	r3, #64	; 0x40
   10e26:	617b      	str	r3, [r7, #20]
   10e28:	2300      	movs	r3, #0
   10e2a:	ad06      	add	r5, sp, #24
   10e2c:	616b      	str	r3, [r5, #20]
   10e2e:	3320      	adds	r3, #32
   10e30:	766b      	strb	r3, [r5, #25]
   10e32:	3310      	adds	r3, #16
   10e34:	76ab      	strb	r3, [r5, #26]
   10e36:	0034      	movs	r4, r6
   10e38:	7823      	ldrb	r3, [r4, #0]
   10e3a:	2b00      	cmp	r3, #0
   10e3c:	d103      	bne.n	10e46 <_svfiprintf_r+0x52>
   10e3e:	1ba3      	subs	r3, r4, r6
   10e40:	9304      	str	r3, [sp, #16]
   10e42:	d012      	beq.n	10e6a <_svfiprintf_r+0x76>
   10e44:	e003      	b.n	10e4e <_svfiprintf_r+0x5a>
   10e46:	2b25      	cmp	r3, #37	; 0x25
   10e48:	d0f9      	beq.n	10e3e <_svfiprintf_r+0x4a>
   10e4a:	3401      	adds	r4, #1
   10e4c:	e7f4      	b.n	10e38 <_svfiprintf_r+0x44>
   10e4e:	1ba3      	subs	r3, r4, r6
   10e50:	0032      	movs	r2, r6
   10e52:	0039      	movs	r1, r7
   10e54:	9802      	ldr	r0, [sp, #8]
   10e56:	f7ff ff6b 	bl	10d30 <__ssputs_r>
   10e5a:	1c43      	adds	r3, r0, #1
   10e5c:	d100      	bne.n	10e60 <_svfiprintf_r+0x6c>
   10e5e:	e0b4      	b.n	10fca <_svfiprintf_r+0x1d6>
   10e60:	696a      	ldr	r2, [r5, #20]
   10e62:	9b04      	ldr	r3, [sp, #16]
   10e64:	4694      	mov	ip, r2
   10e66:	4463      	add	r3, ip
   10e68:	616b      	str	r3, [r5, #20]
   10e6a:	7823      	ldrb	r3, [r4, #0]
   10e6c:	2b00      	cmp	r3, #0
   10e6e:	d100      	bne.n	10e72 <_svfiprintf_r+0x7e>
   10e70:	e0ab      	b.n	10fca <_svfiprintf_r+0x1d6>
   10e72:	2201      	movs	r2, #1
   10e74:	2300      	movs	r3, #0
   10e76:	4252      	negs	r2, r2
   10e78:	606a      	str	r2, [r5, #4]
   10e7a:	a902      	add	r1, sp, #8
   10e7c:	3254      	adds	r2, #84	; 0x54
   10e7e:	1852      	adds	r2, r2, r1
   10e80:	3401      	adds	r4, #1
   10e82:	602b      	str	r3, [r5, #0]
   10e84:	60eb      	str	r3, [r5, #12]
   10e86:	60ab      	str	r3, [r5, #8]
   10e88:	7013      	strb	r3, [r2, #0]
   10e8a:	65ab      	str	r3, [r5, #88]	; 0x58
   10e8c:	4e53      	ldr	r6, [pc, #332]	; (10fdc <_svfiprintf_r+0x1e8>)
   10e8e:	7821      	ldrb	r1, [r4, #0]
   10e90:	2205      	movs	r2, #5
   10e92:	0030      	movs	r0, r6
   10e94:	f7ff fe6a 	bl	10b6c <memchr>
   10e98:	2800      	cmp	r0, #0
   10e9a:	d007      	beq.n	10eac <_svfiprintf_r+0xb8>
   10e9c:	2301      	movs	r3, #1
   10e9e:	1b80      	subs	r0, r0, r6
   10ea0:	4083      	lsls	r3, r0
   10ea2:	682a      	ldr	r2, [r5, #0]
   10ea4:	3401      	adds	r4, #1
   10ea6:	4313      	orrs	r3, r2
   10ea8:	602b      	str	r3, [r5, #0]
   10eaa:	e7ef      	b.n	10e8c <_svfiprintf_r+0x98>
   10eac:	682b      	ldr	r3, [r5, #0]
   10eae:	06da      	lsls	r2, r3, #27
   10eb0:	d504      	bpl.n	10ebc <_svfiprintf_r+0xc8>
   10eb2:	2253      	movs	r2, #83	; 0x53
   10eb4:	2120      	movs	r1, #32
   10eb6:	a802      	add	r0, sp, #8
   10eb8:	1812      	adds	r2, r2, r0
   10eba:	7011      	strb	r1, [r2, #0]
   10ebc:	071a      	lsls	r2, r3, #28
   10ebe:	d504      	bpl.n	10eca <_svfiprintf_r+0xd6>
   10ec0:	2253      	movs	r2, #83	; 0x53
   10ec2:	212b      	movs	r1, #43	; 0x2b
   10ec4:	a802      	add	r0, sp, #8
   10ec6:	1812      	adds	r2, r2, r0
   10ec8:	7011      	strb	r1, [r2, #0]
   10eca:	7822      	ldrb	r2, [r4, #0]
   10ecc:	2a2a      	cmp	r2, #42	; 0x2a
   10ece:	d003      	beq.n	10ed8 <_svfiprintf_r+0xe4>
   10ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ed2:	2000      	movs	r0, #0
   10ed4:	210a      	movs	r1, #10
   10ed6:	e00e      	b.n	10ef6 <_svfiprintf_r+0x102>
   10ed8:	9a05      	ldr	r2, [sp, #20]
   10eda:	1d11      	adds	r1, r2, #4
   10edc:	6812      	ldr	r2, [r2, #0]
   10ede:	9105      	str	r1, [sp, #20]
   10ee0:	2a00      	cmp	r2, #0
   10ee2:	db01      	blt.n	10ee8 <_svfiprintf_r+0xf4>
   10ee4:	9209      	str	r2, [sp, #36]	; 0x24
   10ee6:	e004      	b.n	10ef2 <_svfiprintf_r+0xfe>
   10ee8:	4252      	negs	r2, r2
   10eea:	60ea      	str	r2, [r5, #12]
   10eec:	2202      	movs	r2, #2
   10eee:	4313      	orrs	r3, r2
   10ef0:	602b      	str	r3, [r5, #0]
   10ef2:	3401      	adds	r4, #1
   10ef4:	e00b      	b.n	10f0e <_svfiprintf_r+0x11a>
   10ef6:	7822      	ldrb	r2, [r4, #0]
   10ef8:	3a30      	subs	r2, #48	; 0x30
   10efa:	2a09      	cmp	r2, #9
   10efc:	d804      	bhi.n	10f08 <_svfiprintf_r+0x114>
   10efe:	434b      	muls	r3, r1
   10f00:	3401      	adds	r4, #1
   10f02:	189b      	adds	r3, r3, r2
   10f04:	2001      	movs	r0, #1
   10f06:	e7f6      	b.n	10ef6 <_svfiprintf_r+0x102>
   10f08:	2800      	cmp	r0, #0
   10f0a:	d000      	beq.n	10f0e <_svfiprintf_r+0x11a>
   10f0c:	9309      	str	r3, [sp, #36]	; 0x24
   10f0e:	7823      	ldrb	r3, [r4, #0]
   10f10:	2b2e      	cmp	r3, #46	; 0x2e
   10f12:	d11e      	bne.n	10f52 <_svfiprintf_r+0x15e>
   10f14:	7863      	ldrb	r3, [r4, #1]
   10f16:	2b2a      	cmp	r3, #42	; 0x2a
   10f18:	d10a      	bne.n	10f30 <_svfiprintf_r+0x13c>
   10f1a:	9b05      	ldr	r3, [sp, #20]
   10f1c:	3402      	adds	r4, #2
   10f1e:	1d1a      	adds	r2, r3, #4
   10f20:	681b      	ldr	r3, [r3, #0]
   10f22:	9205      	str	r2, [sp, #20]
   10f24:	2b00      	cmp	r3, #0
   10f26:	da01      	bge.n	10f2c <_svfiprintf_r+0x138>
   10f28:	2301      	movs	r3, #1
   10f2a:	425b      	negs	r3, r3
   10f2c:	9307      	str	r3, [sp, #28]
   10f2e:	e010      	b.n	10f52 <_svfiprintf_r+0x15e>
   10f30:	2300      	movs	r3, #0
   10f32:	200a      	movs	r0, #10
   10f34:	001a      	movs	r2, r3
   10f36:	3401      	adds	r4, #1
   10f38:	606b      	str	r3, [r5, #4]
   10f3a:	7821      	ldrb	r1, [r4, #0]
   10f3c:	3930      	subs	r1, #48	; 0x30
   10f3e:	2909      	cmp	r1, #9
   10f40:	d804      	bhi.n	10f4c <_svfiprintf_r+0x158>
   10f42:	4342      	muls	r2, r0
   10f44:	3401      	adds	r4, #1
   10f46:	1852      	adds	r2, r2, r1
   10f48:	2301      	movs	r3, #1
   10f4a:	e7f6      	b.n	10f3a <_svfiprintf_r+0x146>
   10f4c:	2b00      	cmp	r3, #0
   10f4e:	d000      	beq.n	10f52 <_svfiprintf_r+0x15e>
   10f50:	9207      	str	r2, [sp, #28]
   10f52:	4e23      	ldr	r6, [pc, #140]	; (10fe0 <_svfiprintf_r+0x1ec>)
   10f54:	7821      	ldrb	r1, [r4, #0]
   10f56:	2203      	movs	r2, #3
   10f58:	0030      	movs	r0, r6
   10f5a:	f7ff fe07 	bl	10b6c <memchr>
   10f5e:	2800      	cmp	r0, #0
   10f60:	d006      	beq.n	10f70 <_svfiprintf_r+0x17c>
   10f62:	2340      	movs	r3, #64	; 0x40
   10f64:	1b80      	subs	r0, r0, r6
   10f66:	4083      	lsls	r3, r0
   10f68:	682a      	ldr	r2, [r5, #0]
   10f6a:	3401      	adds	r4, #1
   10f6c:	4313      	orrs	r3, r2
   10f6e:	602b      	str	r3, [r5, #0]
   10f70:	7821      	ldrb	r1, [r4, #0]
   10f72:	2206      	movs	r2, #6
   10f74:	481b      	ldr	r0, [pc, #108]	; (10fe4 <_svfiprintf_r+0x1f0>)
   10f76:	1c66      	adds	r6, r4, #1
   10f78:	7629      	strb	r1, [r5, #24]
   10f7a:	f7ff fdf7 	bl	10b6c <memchr>
   10f7e:	2800      	cmp	r0, #0
   10f80:	d012      	beq.n	10fa8 <_svfiprintf_r+0x1b4>
   10f82:	4b19      	ldr	r3, [pc, #100]	; (10fe8 <_svfiprintf_r+0x1f4>)
   10f84:	2b00      	cmp	r3, #0
   10f86:	d106      	bne.n	10f96 <_svfiprintf_r+0x1a2>
   10f88:	2207      	movs	r2, #7
   10f8a:	9b05      	ldr	r3, [sp, #20]
   10f8c:	3307      	adds	r3, #7
   10f8e:	4393      	bics	r3, r2
   10f90:	3308      	adds	r3, #8
   10f92:	9305      	str	r3, [sp, #20]
   10f94:	e014      	b.n	10fc0 <_svfiprintf_r+0x1cc>
   10f96:	ab05      	add	r3, sp, #20
   10f98:	9300      	str	r3, [sp, #0]
   10f9a:	003a      	movs	r2, r7
   10f9c:	4b13      	ldr	r3, [pc, #76]	; (10fec <_svfiprintf_r+0x1f8>)
   10f9e:	0029      	movs	r1, r5
   10fa0:	9802      	ldr	r0, [sp, #8]
   10fa2:	e000      	b.n	10fa6 <_svfiprintf_r+0x1b2>
   10fa4:	bf00      	nop
   10fa6:	e007      	b.n	10fb8 <_svfiprintf_r+0x1c4>
   10fa8:	ab05      	add	r3, sp, #20
   10faa:	9300      	str	r3, [sp, #0]
   10fac:	003a      	movs	r2, r7
   10fae:	4b0f      	ldr	r3, [pc, #60]	; (10fec <_svfiprintf_r+0x1f8>)
   10fb0:	0029      	movs	r1, r5
   10fb2:	9802      	ldr	r0, [sp, #8]
   10fb4:	f7fe ff6a 	bl	fe8c <_printf_i>
   10fb8:	9003      	str	r0, [sp, #12]
   10fba:	9b03      	ldr	r3, [sp, #12]
   10fbc:	3301      	adds	r3, #1
   10fbe:	d004      	beq.n	10fca <_svfiprintf_r+0x1d6>
   10fc0:	696b      	ldr	r3, [r5, #20]
   10fc2:	9a03      	ldr	r2, [sp, #12]
   10fc4:	189b      	adds	r3, r3, r2
   10fc6:	616b      	str	r3, [r5, #20]
   10fc8:	e735      	b.n	10e36 <_svfiprintf_r+0x42>
   10fca:	89bb      	ldrh	r3, [r7, #12]
   10fcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10fce:	065b      	lsls	r3, r3, #25
   10fd0:	d501      	bpl.n	10fd6 <_svfiprintf_r+0x1e2>
   10fd2:	2001      	movs	r0, #1
   10fd4:	4240      	negs	r0, r0
   10fd6:	b01f      	add	sp, #124	; 0x7c
   10fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10fda:	46c0      	nop			; (mov r8, r8)
   10fdc:	00012a70 	.word	0x00012a70
   10fe0:	00012a76 	.word	0x00012a76
   10fe4:	00012a7a 	.word	0x00012a7a
   10fe8:	00000000 	.word	0x00000000
   10fec:	00010d31 	.word	0x00010d31

00010ff0 <_putc_r>:
   10ff0:	b570      	push	{r4, r5, r6, lr}
   10ff2:	0006      	movs	r6, r0
   10ff4:	000d      	movs	r5, r1
   10ff6:	0014      	movs	r4, r2
   10ff8:	2800      	cmp	r0, #0
   10ffa:	d004      	beq.n	11006 <_putc_r+0x16>
   10ffc:	6983      	ldr	r3, [r0, #24]
   10ffe:	2b00      	cmp	r3, #0
   11000:	d101      	bne.n	11006 <_putc_r+0x16>
   11002:	f7ff fcb1 	bl	10968 <__sinit>
   11006:	4b12      	ldr	r3, [pc, #72]	; (11050 <_putc_r+0x60>)
   11008:	429c      	cmp	r4, r3
   1100a:	d101      	bne.n	11010 <_putc_r+0x20>
   1100c:	6874      	ldr	r4, [r6, #4]
   1100e:	e008      	b.n	11022 <_putc_r+0x32>
   11010:	4b10      	ldr	r3, [pc, #64]	; (11054 <_putc_r+0x64>)
   11012:	429c      	cmp	r4, r3
   11014:	d101      	bne.n	1101a <_putc_r+0x2a>
   11016:	68b4      	ldr	r4, [r6, #8]
   11018:	e003      	b.n	11022 <_putc_r+0x32>
   1101a:	4b0f      	ldr	r3, [pc, #60]	; (11058 <_putc_r+0x68>)
   1101c:	429c      	cmp	r4, r3
   1101e:	d100      	bne.n	11022 <_putc_r+0x32>
   11020:	68f4      	ldr	r4, [r6, #12]
   11022:	68a3      	ldr	r3, [r4, #8]
   11024:	3b01      	subs	r3, #1
   11026:	60a3      	str	r3, [r4, #8]
   11028:	2b00      	cmp	r3, #0
   1102a:	da05      	bge.n	11038 <_putc_r+0x48>
   1102c:	69a2      	ldr	r2, [r4, #24]
   1102e:	4293      	cmp	r3, r2
   11030:	db08      	blt.n	11044 <_putc_r+0x54>
   11032:	b2eb      	uxtb	r3, r5
   11034:	2b0a      	cmp	r3, #10
   11036:	d005      	beq.n	11044 <_putc_r+0x54>
   11038:	6823      	ldr	r3, [r4, #0]
   1103a:	b2e8      	uxtb	r0, r5
   1103c:	1c5a      	adds	r2, r3, #1
   1103e:	6022      	str	r2, [r4, #0]
   11040:	701d      	strb	r5, [r3, #0]
   11042:	e004      	b.n	1104e <_putc_r+0x5e>
   11044:	0022      	movs	r2, r4
   11046:	0029      	movs	r1, r5
   11048:	0030      	movs	r0, r6
   1104a:	f7ff fac3 	bl	105d4 <__swbuf_r>
   1104e:	bd70      	pop	{r4, r5, r6, pc}
   11050:	00012ba4 	.word	0x00012ba4
   11054:	00012bc4 	.word	0x00012bc4
   11058:	00012be4 	.word	0x00012be4

0001105c <_sbrk_r>:
   1105c:	2300      	movs	r3, #0
   1105e:	b570      	push	{r4, r5, r6, lr}
   11060:	4c06      	ldr	r4, [pc, #24]	; (1107c <_sbrk_r+0x20>)
   11062:	0005      	movs	r5, r0
   11064:	0008      	movs	r0, r1
   11066:	6023      	str	r3, [r4, #0]
   11068:	f7f9 ff84 	bl	af74 <_sbrk>
   1106c:	1c43      	adds	r3, r0, #1
   1106e:	d103      	bne.n	11078 <_sbrk_r+0x1c>
   11070:	6823      	ldr	r3, [r4, #0]
   11072:	2b00      	cmp	r3, #0
   11074:	d000      	beq.n	11078 <_sbrk_r+0x1c>
   11076:	602b      	str	r3, [r5, #0]
   11078:	bd70      	pop	{r4, r5, r6, pc}
   1107a:	46c0      	nop			; (mov r8, r8)
   1107c:	200047d4 	.word	0x200047d4

00011080 <_raise_r>:
   11080:	b570      	push	{r4, r5, r6, lr}
   11082:	0004      	movs	r4, r0
   11084:	1e0d      	subs	r5, r1, #0
   11086:	2d1f      	cmp	r5, #31
   11088:	d904      	bls.n	11094 <_raise_r+0x14>
   1108a:	2316      	movs	r3, #22
   1108c:	6003      	str	r3, [r0, #0]
   1108e:	2001      	movs	r0, #1
   11090:	4240      	negs	r0, r0
   11092:	e01e      	b.n	110d2 <_raise_r+0x52>
   11094:	6c42      	ldr	r2, [r0, #68]	; 0x44
   11096:	2a00      	cmp	r2, #0
   11098:	d004      	beq.n	110a4 <_raise_r+0x24>
   1109a:	008b      	lsls	r3, r1, #2
   1109c:	18d2      	adds	r2, r2, r3
   1109e:	6813      	ldr	r3, [r2, #0]
   110a0:	2b00      	cmp	r3, #0
   110a2:	d108      	bne.n	110b6 <_raise_r+0x36>
   110a4:	0020      	movs	r0, r4
   110a6:	f000 f831 	bl	1110c <_getpid_r>
   110aa:	002a      	movs	r2, r5
   110ac:	0001      	movs	r1, r0
   110ae:	0020      	movs	r0, r4
   110b0:	f000 f81a 	bl	110e8 <_kill_r>
   110b4:	e00d      	b.n	110d2 <_raise_r+0x52>
   110b6:	2000      	movs	r0, #0
   110b8:	2b01      	cmp	r3, #1
   110ba:	d00a      	beq.n	110d2 <_raise_r+0x52>
   110bc:	1c59      	adds	r1, r3, #1
   110be:	d103      	bne.n	110c8 <_raise_r+0x48>
   110c0:	3317      	adds	r3, #23
   110c2:	6023      	str	r3, [r4, #0]
   110c4:	3001      	adds	r0, #1
   110c6:	e004      	b.n	110d2 <_raise_r+0x52>
   110c8:	2400      	movs	r4, #0
   110ca:	0028      	movs	r0, r5
   110cc:	6014      	str	r4, [r2, #0]
   110ce:	4798      	blx	r3
   110d0:	0020      	movs	r0, r4
   110d2:	bd70      	pop	{r4, r5, r6, pc}

000110d4 <raise>:
   110d4:	b510      	push	{r4, lr}
   110d6:	4b03      	ldr	r3, [pc, #12]	; (110e4 <raise+0x10>)
   110d8:	0001      	movs	r1, r0
   110da:	6818      	ldr	r0, [r3, #0]
   110dc:	f7ff ffd0 	bl	11080 <_raise_r>
   110e0:	bd10      	pop	{r4, pc}
   110e2:	46c0      	nop			; (mov r8, r8)
   110e4:	20000094 	.word	0x20000094

000110e8 <_kill_r>:
   110e8:	2300      	movs	r3, #0
   110ea:	b570      	push	{r4, r5, r6, lr}
   110ec:	4c06      	ldr	r4, [pc, #24]	; (11108 <_kill_r+0x20>)
   110ee:	0005      	movs	r5, r0
   110f0:	0008      	movs	r0, r1
   110f2:	0011      	movs	r1, r2
   110f4:	6023      	str	r3, [r4, #0]
   110f6:	f7f9 ff93 	bl	b020 <_kill>
   110fa:	1c43      	adds	r3, r0, #1
   110fc:	d103      	bne.n	11106 <_kill_r+0x1e>
   110fe:	6823      	ldr	r3, [r4, #0]
   11100:	2b00      	cmp	r3, #0
   11102:	d000      	beq.n	11106 <_kill_r+0x1e>
   11104:	602b      	str	r3, [r5, #0]
   11106:	bd70      	pop	{r4, r5, r6, pc}
   11108:	200047d4 	.word	0x200047d4

0001110c <_getpid_r>:
   1110c:	b510      	push	{r4, lr}
   1110e:	f7f9 ff91 	bl	b034 <_getpid>
   11112:	bd10      	pop	{r4, pc}

00011114 <__sread>:
   11114:	b570      	push	{r4, r5, r6, lr}
   11116:	000c      	movs	r4, r1
   11118:	250e      	movs	r5, #14
   1111a:	5f49      	ldrsh	r1, [r1, r5]
   1111c:	f000 f8b0 	bl	11280 <_read_r>
   11120:	2800      	cmp	r0, #0
   11122:	db03      	blt.n	1112c <__sread+0x18>
   11124:	6d63      	ldr	r3, [r4, #84]	; 0x54
   11126:	181b      	adds	r3, r3, r0
   11128:	6563      	str	r3, [r4, #84]	; 0x54
   1112a:	e003      	b.n	11134 <__sread+0x20>
   1112c:	89a2      	ldrh	r2, [r4, #12]
   1112e:	4b02      	ldr	r3, [pc, #8]	; (11138 <__sread+0x24>)
   11130:	4013      	ands	r3, r2
   11132:	81a3      	strh	r3, [r4, #12]
   11134:	bd70      	pop	{r4, r5, r6, pc}
   11136:	46c0      	nop			; (mov r8, r8)
   11138:	ffffefff 	.word	0xffffefff

0001113c <__swrite>:
   1113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1113e:	001f      	movs	r7, r3
   11140:	898b      	ldrh	r3, [r1, #12]
   11142:	0005      	movs	r5, r0
   11144:	000c      	movs	r4, r1
   11146:	0016      	movs	r6, r2
   11148:	05db      	lsls	r3, r3, #23
   1114a:	d505      	bpl.n	11158 <__swrite+0x1c>
   1114c:	230e      	movs	r3, #14
   1114e:	5ec9      	ldrsh	r1, [r1, r3]
   11150:	2200      	movs	r2, #0
   11152:	2302      	movs	r3, #2
   11154:	f000 f874 	bl	11240 <_lseek_r>
   11158:	89a2      	ldrh	r2, [r4, #12]
   1115a:	4b05      	ldr	r3, [pc, #20]	; (11170 <__swrite+0x34>)
   1115c:	0028      	movs	r0, r5
   1115e:	4013      	ands	r3, r2
   11160:	81a3      	strh	r3, [r4, #12]
   11162:	0032      	movs	r2, r6
   11164:	230e      	movs	r3, #14
   11166:	5ee1      	ldrsh	r1, [r4, r3]
   11168:	003b      	movs	r3, r7
   1116a:	f000 f81f 	bl	111ac <_write_r>
   1116e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11170:	ffffefff 	.word	0xffffefff

00011174 <__sseek>:
   11174:	b570      	push	{r4, r5, r6, lr}
   11176:	000c      	movs	r4, r1
   11178:	250e      	movs	r5, #14
   1117a:	5f49      	ldrsh	r1, [r1, r5]
   1117c:	f000 f860 	bl	11240 <_lseek_r>
   11180:	89a3      	ldrh	r3, [r4, #12]
   11182:	1c42      	adds	r2, r0, #1
   11184:	d103      	bne.n	1118e <__sseek+0x1a>
   11186:	4a05      	ldr	r2, [pc, #20]	; (1119c <__sseek+0x28>)
   11188:	4013      	ands	r3, r2
   1118a:	81a3      	strh	r3, [r4, #12]
   1118c:	e004      	b.n	11198 <__sseek+0x24>
   1118e:	2280      	movs	r2, #128	; 0x80
   11190:	0152      	lsls	r2, r2, #5
   11192:	4313      	orrs	r3, r2
   11194:	81a3      	strh	r3, [r4, #12]
   11196:	6560      	str	r0, [r4, #84]	; 0x54
   11198:	bd70      	pop	{r4, r5, r6, pc}
   1119a:	46c0      	nop			; (mov r8, r8)
   1119c:	ffffefff 	.word	0xffffefff

000111a0 <__sclose>:
   111a0:	b510      	push	{r4, lr}
   111a2:	230e      	movs	r3, #14
   111a4:	5ec9      	ldrsh	r1, [r1, r3]
   111a6:	f000 f815 	bl	111d4 <_close_r>
   111aa:	bd10      	pop	{r4, pc}

000111ac <_write_r>:
   111ac:	b570      	push	{r4, r5, r6, lr}
   111ae:	0005      	movs	r5, r0
   111b0:	0008      	movs	r0, r1
   111b2:	0011      	movs	r1, r2
   111b4:	2200      	movs	r2, #0
   111b6:	4c06      	ldr	r4, [pc, #24]	; (111d0 <_write_r+0x24>)
   111b8:	6022      	str	r2, [r4, #0]
   111ba:	001a      	movs	r2, r3
   111bc:	f7f9 fea4 	bl	af08 <_write>
   111c0:	1c43      	adds	r3, r0, #1
   111c2:	d103      	bne.n	111cc <_write_r+0x20>
   111c4:	6823      	ldr	r3, [r4, #0]
   111c6:	2b00      	cmp	r3, #0
   111c8:	d000      	beq.n	111cc <_write_r+0x20>
   111ca:	602b      	str	r3, [r5, #0]
   111cc:	bd70      	pop	{r4, r5, r6, pc}
   111ce:	46c0      	nop			; (mov r8, r8)
   111d0:	200047d4 	.word	0x200047d4

000111d4 <_close_r>:
   111d4:	2300      	movs	r3, #0
   111d6:	b570      	push	{r4, r5, r6, lr}
   111d8:	4c06      	ldr	r4, [pc, #24]	; (111f4 <_close_r+0x20>)
   111da:	0005      	movs	r5, r0
   111dc:	0008      	movs	r0, r1
   111de:	6023      	str	r3, [r4, #0]
   111e0:	f7f9 fee6 	bl	afb0 <_close>
   111e4:	1c43      	adds	r3, r0, #1
   111e6:	d103      	bne.n	111f0 <_close_r+0x1c>
   111e8:	6823      	ldr	r3, [r4, #0]
   111ea:	2b00      	cmp	r3, #0
   111ec:	d000      	beq.n	111f0 <_close_r+0x1c>
   111ee:	602b      	str	r3, [r5, #0]
   111f0:	bd70      	pop	{r4, r5, r6, pc}
   111f2:	46c0      	nop			; (mov r8, r8)
   111f4:	200047d4 	.word	0x200047d4

000111f8 <_fstat_r>:
   111f8:	2300      	movs	r3, #0
   111fa:	b570      	push	{r4, r5, r6, lr}
   111fc:	4c06      	ldr	r4, [pc, #24]	; (11218 <_fstat_r+0x20>)
   111fe:	0005      	movs	r5, r0
   11200:	0008      	movs	r0, r1
   11202:	0011      	movs	r1, r2
   11204:	6023      	str	r3, [r4, #0]
   11206:	f7f9 fedd 	bl	afc4 <_fstat>
   1120a:	1c43      	adds	r3, r0, #1
   1120c:	d103      	bne.n	11216 <_fstat_r+0x1e>
   1120e:	6823      	ldr	r3, [r4, #0]
   11210:	2b00      	cmp	r3, #0
   11212:	d000      	beq.n	11216 <_fstat_r+0x1e>
   11214:	602b      	str	r3, [r5, #0]
   11216:	bd70      	pop	{r4, r5, r6, pc}
   11218:	200047d4 	.word	0x200047d4

0001121c <_isatty_r>:
   1121c:	2300      	movs	r3, #0
   1121e:	b570      	push	{r4, r5, r6, lr}
   11220:	4c06      	ldr	r4, [pc, #24]	; (1123c <_isatty_r+0x20>)
   11222:	0005      	movs	r5, r0
   11224:	0008      	movs	r0, r1
   11226:	6023      	str	r3, [r4, #0]
   11228:	f7f9 feda 	bl	afe0 <_isatty>
   1122c:	1c43      	adds	r3, r0, #1
   1122e:	d103      	bne.n	11238 <_isatty_r+0x1c>
   11230:	6823      	ldr	r3, [r4, #0]
   11232:	2b00      	cmp	r3, #0
   11234:	d000      	beq.n	11238 <_isatty_r+0x1c>
   11236:	602b      	str	r3, [r5, #0]
   11238:	bd70      	pop	{r4, r5, r6, pc}
   1123a:	46c0      	nop			; (mov r8, r8)
   1123c:	200047d4 	.word	0x200047d4

00011240 <_lseek_r>:
   11240:	b570      	push	{r4, r5, r6, lr}
   11242:	0005      	movs	r5, r0
   11244:	0008      	movs	r0, r1
   11246:	0011      	movs	r1, r2
   11248:	2200      	movs	r2, #0
   1124a:	4c06      	ldr	r4, [pc, #24]	; (11264 <_lseek_r+0x24>)
   1124c:	6022      	str	r2, [r4, #0]
   1124e:	001a      	movs	r2, r3
   11250:	f7f9 fed0 	bl	aff4 <_lseek>
   11254:	1c43      	adds	r3, r0, #1
   11256:	d103      	bne.n	11260 <_lseek_r+0x20>
   11258:	6823      	ldr	r3, [r4, #0]
   1125a:	2b00      	cmp	r3, #0
   1125c:	d000      	beq.n	11260 <_lseek_r+0x20>
   1125e:	602b      	str	r3, [r5, #0]
   11260:	bd70      	pop	{r4, r5, r6, pc}
   11262:	46c0      	nop			; (mov r8, r8)
   11264:	200047d4 	.word	0x200047d4

00011268 <_malloc_usable_size_r>:
   11268:	1f0b      	subs	r3, r1, #4
   1126a:	681a      	ldr	r2, [r3, #0]
   1126c:	1f10      	subs	r0, r2, #4
   1126e:	2a00      	cmp	r2, #0
   11270:	da04      	bge.n	1127c <_malloc_usable_size_r+0x14>
   11272:	1889      	adds	r1, r1, r2
   11274:	3904      	subs	r1, #4
   11276:	680b      	ldr	r3, [r1, #0]
   11278:	18d0      	adds	r0, r2, r3
   1127a:	3804      	subs	r0, #4
   1127c:	4770      	bx	lr
	...

00011280 <_read_r>:
   11280:	b570      	push	{r4, r5, r6, lr}
   11282:	0005      	movs	r5, r0
   11284:	0008      	movs	r0, r1
   11286:	0011      	movs	r1, r2
   11288:	2200      	movs	r2, #0
   1128a:	4c06      	ldr	r4, [pc, #24]	; (112a4 <_read_r+0x24>)
   1128c:	6022      	str	r2, [r4, #0]
   1128e:	001a      	movs	r2, r3
   11290:	f7f9 fe10 	bl	aeb4 <_read>
   11294:	1c43      	adds	r3, r0, #1
   11296:	d103      	bne.n	112a0 <_read_r+0x20>
   11298:	6823      	ldr	r3, [r4, #0]
   1129a:	2b00      	cmp	r3, #0
   1129c:	d000      	beq.n	112a0 <_read_r+0x20>
   1129e:	602b      	str	r3, [r5, #0]
   112a0:	bd70      	pop	{r4, r5, r6, pc}
   112a2:	46c0      	nop			; (mov r8, r8)
   112a4:	200047d4 	.word	0x200047d4
   112a8:	42002c00 	.word	0x42002c00
   112ac:	42003000 	.word	0x42003000
   112b0:	42003400 	.word	0x42003400
   112b4:	001c1c1b 	.word	0x001c1c1b
   112b8:	10000800 	.word	0x10000800
   112bc:	00002000 	.word	0x00002000

000112c0 <num_to_seg>:
   112c0:	4f5b063f 077d6d66 00006f7f              ?.[Ofm}..o..

000112cc <display_handlers>:
   112cc:	00000001 000008d1 00000004 00000961     ............a...
   112dc:	00000008 000009d5 00000010 00000a39     ............9...
   112ec:	00000020 00000ab1 00000040 00000b25      .......@...%...
   112fc:	00000080 00000b9d 00000002 00000929     ............)...
	...
   11314:	6f727245 55202172 6c62616e 6f742065     Error! Unable to
   11324:	61657220 75622064 6e6f7474 61747320      read button sta
   11334:	00737574 6c696166 74206465 6e69206f     tus.failed to in
   11344:	61697469 657a696c 43545720 38303536     itialize WTC6508
   11354:	00000021 50504128 52452829 255b2952     !...(APP)(ERR)[%
   11364:	255b5d73 00005d64 61766e69 6564696c     s][%d]..invalide
   11374:	636f6920 6320746c 0000646d               ioclt cmd..

00011380 <__FUNCTION__.14905>:
   11380:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
   11390:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   113a0:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
   113b0:	6b617720 74207075 63206568 00706968      wakup the chip.
   113c0:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
   113d0:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
   113e0:	006c6961 66696828 64612029 73657264     ail.(hif) addres
   113f0:	75622073 61662073 00006c69 66696828     s bus fail..(hif
   11400:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
   11410:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
   11420:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
   11430:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
   11440:	6e692029 696c6176 72672064 2070756f     ) invalid group 
   11450:	00004449 66696828 6f682029 61207473     ID..(hif) host a
   11460:	64207070 276e6469 65732074 58522074     pp didn't set RX
   11470:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
   11480:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
   11490:	61462029 2065736c 65746e69 70757272     ) False interrup
   114a0:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
   114b0:	74206c69 6552206f 69206461 7265746e     il to Read inter
   114c0:	74707572 67657220 00000000 66696828     rupt reg....(hif
   114d0:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
   114e0:	65687420 69686320 00000070 46494828      the chip...(HIF
   114f0:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
   11500:	746e6920 75727265 25207470 72742064      interrupt %d tr
   11510:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
   11520:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
   11530:	72612064 656d7567 0000746e 20505041     d argument..APP 
   11540:	75716552 65747365 69532064 6920657a     Requested Size i
   11550:	616c2073 72656772 61687420 6874206e     s larger than th
   11560:	65722065 65766963 75622064 72656666     e recived buffer
   11570:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
   11580:	20505041 75716552 65747365 64412064     APP Requested Ad
   11590:	73657264 65622073 646e6f79 65687420     dress beyond the
   115a0:	63657220 64657669 66756220 20726566      recived buffer 
   115b0:	72646461 20737365 20646e61 676e656c     address and leng
   115c0:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....
   115d0:	000035f4 000035cc 000035c4 000035dc     .5...5...5...5..
   115e0:	000035d4 000035f4 000035e4 000035ec     .5...5...5...5..

000115f0 <__FUNCTION__.12480>:
   115f0:	5f666968 646e6573 00000000              hif_send....

000115fc <__FUNCTION__.12490>:
   115fc:	5f666968 00727369                       hif_isr.

00011604 <__FUNCTION__.12496>:
   11604:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..

00011614 <__FUNCTION__.12511>:
   11614:	5f666968 65636572 00657669              hif_receive.

00011620 <__FUNCTION__.12526>:
   11620:	5f666968 69676572 72657473 0062635f     hif_register_cb.
   11630:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
   11640:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
   11650:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
   11660:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   11670:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
   11680:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
   11690:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
   116a0:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
   116b0:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
   116c0:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
   116d0:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
   116e0:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
   116f0:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
   11700:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
   11710:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
   11720:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
   11730:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
   11740:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
   11750:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
   11760:	2065626f 75716572 73747365 72657020     obe requests per
   11770:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
   11780:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
   11790:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
   117a0:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
   117b0:	00000a75 206e694d 76697264 76207265     u...Min driver v
   117c0:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
   117d0:	72727543 69726420 20726576 3a726576     Curr driver ver:
   117e0:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
   117f0:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
   11800:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
   11810:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
   11820:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
   11830:	564e4920 44494c41 00000000 49204843      INVALID....CH I
   11840:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
   11850:	20706557 2079656b 65646e69 64252078     Wep key index %d
   11860:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
   11870:	2079656b 676e656c 25206874 00000a64     key length %d...
   11880:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
   11890:	656c2079 6874676e 00000000 65646e75     y length....unde
   118a0:	656e6966 65732064 79742063 00006570     fined sec type..
   118b0:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
   118c0:	6420746f 6e696665 00006465 7473694c     ot defined..List
   118d0:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
   118e0:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
   118f0:	31312072 00000000 45574f50 41532052     r 11....POWER SA
   11900:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
   11910:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
   11920:	66754220 20726566 65637865 64656465      Buffer exceeded
   11930:	78616d20 6d756d69 7a697320 64252065      maximum size %d
   11940:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
   11950:	00000000                                ....

00011954 <__FUNCTION__.12453>:
   11954:	5f6d326d 69666977 0062635f              m2m_wifi_cb.

00011960 <__FUNCTION__.12477>:
   11960:	5f6d326d 69666977 696e695f 00000074     m2m_wifi_init...

00011970 <__FUNCTION__.12505>:
   11970:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
   11980:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
   11990:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
   119a0:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
   119b0:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
   119c0:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
   119d0:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
   119e0:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
   119f0:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
   11a00:	61747320 3a5d7472 69616620 6572206c      start]: fail re
   11a10:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
   11a20:	0000002e 6c696166 74206465 6564206f     ....failed to de
   11a30:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
   11a40:	68772072 20656c69 74697277 20676e69     r while writing 
   11a50:	00676572 6f727245 68772072 20656c69     reg.Error while 
   11a60:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
   11a70:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   11a80:	6f742064 61657220 00000064 6c75705b     d to read...[pul
   11a90:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
   11aa0:	6f742064 69727720 00006574              d to write..

00011aac <__FUNCTION__.12290>:
   11aac:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

00011abc <__FUNCTION__.12384>:
   11abc:	70696863 6965645f 0074696e 50504128     chip_deinit.(APP
   11acc:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   11adc:	696d6e5b 61747320 3a5d7472 69616620     [nmi start]: fai
   11aec:	6e69206c 62207469 00007375 50504128     l init bus..(APP
   11afc:	4e492829 00294f46 70696843 20444920     )(INFO).Chip ID 
   11b0c:	0a786c25 00000000 6c696166 74206465     %lx.....failed t
   11b1c:	6e65206f 656c6261 746e6920 75727265     o enable interru
   11b2c:	2e737470 0000002e 696d6e5b 6f747320     pts.....[nmi sto
   11b3c:	203a5d70 70696863 6965645f 2074696e     p]: chip_deinit 
   11b4c:	6c696166 00000000 696d6e5b 6f747320     fail....[nmi sto
   11b5c:	203a5d70 20495053 73616c66 69642068     p]: SPI flash di
   11b6c:	6c626173 61662065 00006c69 696d6e5b     sable fail..[nmi
   11b7c:	6f747320 203a5d70 6c696166 696e6920      stop]: fail ini
   11b8c:	75622074 00000073                       t bus...

00011b94 <__FUNCTION__.12371>:
   11b94:	645f6d6e 695f7672 0074696e              nm_drv_init.

00011ba0 <__FUNCTION__.12378>:
   11ba0:	645f6d6e 645f7672 696e6965 00000074     nm_drv_deinit...

00011bb0 <crc7_syndrome_table>:
   11bb0:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
   11bc0:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
   11bd0:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
   11be0:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
   11bf0:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
   11c00:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
   11c10:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
   11c20:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
   11c30:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
   11c40:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
   11c50:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
   11c60:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
   11c70:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
   11c80:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
   11c90:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
   11ca0:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
   11cb0:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
   11cc0:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
   11cd0:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
   11ce0:	73756220 72726520 2e2e726f 0000002e      bus error......
   11cf0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   11d00:	6d632064 65722064 6e6f7073 72206573     d cmd response r
   11d10:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
   11d20:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11d30:	656c6961 61642064 72206174 6f707365     ailed data respo
   11d40:	2065736e 64616572 7562202c 72652073     nse read, bus er
   11d50:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
   11d60:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
   11d70:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
   11d80:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
   11d90:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   11da0:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
   11db0:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
   11dc0:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   11dd0:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
   11de0:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
   11df0:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
   11e00:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
   11e10:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
   11e20:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11e30:	656c6961 61642064 62206174 6b636f6c     ailed data block
   11e40:	69727720 202c6574 20737562 6f727265      write, bus erro
   11e50:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
   11e60:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
   11e70:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
   11e80:	20737562 6f727265 2e2e2e72 00000000     bus error.......
   11e90:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   11ea0:	6d632064 77202c64 65746972 67657220     d cmd, write reg
   11eb0:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   11ec0:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
   11ed0:	65722064 6e6f7073 202c6573 74697277     d response, writ
   11ee0:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
   11ef0:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11f00:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
   11f10:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
   11f20:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
   11f30:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
   11f40:	2c65736e 69727720 62206574 6b636f6c     nse, write block
   11f50:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
   11f60:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   11f70:	206b636f 61746164 69727720 2e2e6574     ock data write..
   11f80:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11f90:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   11fa0:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
   11fb0:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   11fc0:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
   11fd0:	64616572 67657220 30252820 2e297838     read reg (%08x).
   11fe0:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   11ff0:	656c6961 61642064 72206174 2e646165     ailed data read.
   12000:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12010:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
   12020:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
   12030:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12040:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
   12050:	202c6573 64616572 6f6c6220 28206b63     se, read block (
   12060:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
   12070:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
   12080:	206b636f 61746164 61657220 2e2e2e64     ock data read...
   12090:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   120a0:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   120b0:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
   120c0:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
   120d0:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
   120e0:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   120f0:	656c6961 6e692064 6e726574 72206c61     ailed internal r
   12100:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
   12110:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
   12120:	6e692064 6e726574 77206c61 65746972     d internal write
   12130:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
   12140:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
   12150:	206c6961 20646d63 64616572 69686320     ail cmd read chi
   12160:	64692070 002e2e2e 00005350 00005350     p id....PS..PS..
   12170:	000053e0 000052a4 000052ea 0000530c     .S...R...R...S..
   12180:	00005392 00005392 0000544c 00005278     .S...S..LT..xR..
   12190:	000054a6 000054a6 000054a6 000054a6     .T...T...T...T..
   121a0:	0000532e                                .S..

000121a4 <__FUNCTION__.11755>:
   121a4:	5f697073 00646d63                       spi_cmd.

000121ac <__FUNCTION__.11763>:
   121ac:	5f697073 5f646d63 00707372              spi_cmd_rsp.

000121b8 <__FUNCTION__.11779>:
   121b8:	5f697073 61746164 6165725f 00000064     spi_data_read...

000121c8 <__FUNCTION__.11794>:
   121c8:	5f697073 61746164 6972775f 00006574     spi_data_write..

000121d8 <__FUNCTION__.11804>:
   121d8:	5f697073 74697277 65725f65 00000067     spi_write_reg...

000121e8 <__FUNCTION__.11812>:
   121e8:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

000121f8 <__FUNCTION__.11821>:
   121f8:	5f697073 64616572 6765725f 00000000     spi_read_reg....

00012208 <__FUNCTION__.11829>:
   12208:	735f6d6e 725f6970 00646165              nm_spi_read.

00012214 <__FUNCTION__.11846>:
   12214:	735f6d6e 695f6970 0074696e 50504128     nm_spi_init.(APP
   12224:	4e492829 00294f46 52524528 75432952     )(INFO).(ERRR)Cu
   12234:	6e657272 253c2074 000a3e64 50504128     rrent <%d>..(APP
   12244:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
   12254:	20494e53 65637845 20736465 2078614d     SNI Exceeds Max 
   12264:	676e654c 00006874 6e6b6e55 206e776f     Length..Unknown 
   12274:	204c5353 6b636f53 4f207465 6f697470     SSL Socket Optio
   12284:	6425206e 0000000a 20746f4e 204c5353     n %d....Not SSL 
   12294:	6b636f53 00007465 42000800 42000c00     Socket.....B...B
   122a4:	42001000 42001400 42001800 42001c00     ...B...B...B...B
   122b4:	0c0b0a09 00000e0d 00009eea 00009f62     ............b...
   122c4:	00009f62 00009f08 00009f02 00009f0e     b...............
   122d4:	00009ef0 00009f14 00009f48 0000a22c     ........H...,...
   122e4:	0000a27c 0000a27c 0000a278 0000a21e     |...|...x.......
   122f4:	0000a23e 0000a20e 0000a250 0000a262     >.......P...b...
   12304:	0000a2ca 0000a2f8 0000a2f8 0000a2f4     ................
   12314:	0000a2c4 0000a2d0 0000a2be 0000a2d6     ................
   12324:	0000a2dc                                ....

00012328 <_tcc_intflag>:
   12328:	00000001 00000002 00000004 00000008     ................
   12338:	00001000 00002000 00004000 00008000     ..... ...@......
   12348:	00010000 00020000 00040000 00080000     ................
   12358:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
   12368:	51726d54 00000000 0000d154 0000d154     TmrQ....T...T...
   12378:	0000d154 0000d1e2 0000d1ac 0000d1d6     T...............
   12388:	0000d154 0000d154 0000d1e2 0000d1ac     T...T...........

00012398 <PubNubPublishKey>:
   12398:	6f6d6564 00000000                       demo....

000123a0 <PubNubSubscribeKey>:
   123a0:	6f6d6564 00000000 6b636f73 725f7465     demo....socket_r
   123b0:	6c6f7365 635f6576 25203a62 65722073     esolve_cb: %s re
   123c0:	766c6f73 77206465 20687469 25205049     solved with IP %
   123d0:	64252e64 2e64252e 0a0d6425 00000000     d.%d.%d.%d......
   123e0:	5f6d326d 69666977 6174735f 203a6574     m2m_wifi_state: 
   123f0:	5f4d324d 49464957 5345525f 4f435f50     M2M_WIFI_RESP_CO
   12400:	54535f4e 5f455441 4e414843 3a444547     N_STATE_CHANGED:
   12410:	4e4f4320 5443454e 000d4445 5f6d326d      CONNECTED..m2m_
   12420:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
   12430:	49464957 5345525f 4f435f50 54535f4e     WIFI_RESP_CON_ST
   12440:	5f455441 4e414843 3a444547 53494420     ATE_CHANGED: DIS
   12450:	4e4e4f43 45544345 00000d44 74616869     CONNECTED...ihat
   12460:	6d696b65 00000000 73696f4d 206e6574     ekim....Moisten 
   12470:	72756f59 72684320 75626d69 75422073     Your Chrimbus Bu
   12480:	00006873 5f6d326d 69666977 6174735f     sh..m2m_wifi_sta
   12490:	203a6574 5f4d324d 49464957 5145525f     te: M2M_WIFI_REQ
   124a0:	4348445f 4f435f50 203a464e 69205049     _DHCP_CONF: IP i
   124b0:	75252073 2e75252e 252e7525 000a0d75     s %u.%u.%u.%u...
   124c0:	00000030 00000031 6564227b 65636976     0...1...{"device
   124d0:	25223a22 202c2273 6d657422 61726570     ":"%s", "tempera
   124e0:	65727574 25223a22 64252e64 22202c22     ture":"%d.%d", "
   124f0:	6867696c 223a2274 2c226425 656c2220     light":"%d", "le
   12500:	223a2264 7d227325 00000000 6e69616d     d":"%s"}....main
   12510:	7570203a 73696c62 76652068 3a746e65     : publish event:
   12520:	73257b20 000a0d7d 6e69616d 7573203a      {%s}...main: su
   12530:	72637362 20656269 6e657665 50202c74     bscribe event, P
   12540:	4f5f524e 00000d4b 0064656c 6e69616d     NR_OK...led.main
   12550:	6572203a 76696563 4c206465 63204445     : received LED c
   12560:	72746e6f 6d206c6f 61737365 203a6567     ontrol message: 
   12570:	0a0d7325 00000000 00006e6f 0066666f     %s......on..off.
   12580:	6e69616d 6572203a 76696563 6d206465     main: received m
   12590:	61737365 203a6567 0a0d7325 00000000     essage: %s......
   125a0:	6e69616d 7573203a 72637362 20656269     main: subscribe 
   125b0:	6e657665 69202c74 7265746e 2e6c6176     event, interval.
   125c0:	0000000d 63617453 766f206b 6c667265     ....Stack overfl
   125d0:	3a21776f 0a732520 0000000d 6c6c614d     ow!: %s.....Mall
   125e0:	6620636f 656c6961 0d0a2164 00000000     oc failed!......
   125f0:	6e69616d 326d203a 69775f6d 695f6966     main: m2m_wifi_i
   12600:	2074696e 6c6c6163 72726520 0d21726f     nit call error!.
   12610:	00000000 6e69616d 414d203a 64612043     ....main: MAC ad
   12620:	73657264 75662073 62206573 68207469     dress fuse bit h
   12630:	6e207361 6220746f 206e6565 666e6f63     as not been conf
   12640:	72756769 0d216465 00000000 6e69616d     igured!.....main
   12650:	7355203a 326d2065 69775f6d 735f6966     : Use m2m_wifi_s
   12660:	6d5f7465 615f6361 65726464 29287373     et_mac_address()
   12670:	49504120 206f7420 20746573 2043414d      API to set MAC 
   12680:	72646461 20737365 20616976 74666f73     address via soft
   12690:	65726177 00000d2e 0000000d 6e69616d     ware........main
   126a0:	7550203a 62754e62 6e6f6320 75676966     : PubNub configu
   126b0:	20646572 68746977 6c6f6620 69776f6c     red with followi
   126c0:	7320676e 69747465 3a73676e 0000000d     ng settings:....
   126d0:	6e69616d 2d20203a 62755020 6873696c     main:  - Publish
   126e0:	79656b20 2522203a 202c2273 73627553      key: "%s", Subs
   126f0:	62697263 656b2065 22203a79 2c227325     cribe key: "%s",
   12700:	61684320 6c656e6e 2522203a 0d2e2273      Channel: "%s"..
   12710:	000a0d0a 6e69616d 6957203a 2069462d     ....main: Wi-Fi 
   12720:	6e6e6f63 69746365 7420676e 5041206f     connecting to AP
   12730:	69737520 6820676e 63647261 6465646f      using hardcoded
   12740:	65726320 746e6564 736c6169 0d2e2e2e      credentials....
   12750:	00000000 6b736174 0073335f 6b736174     ....task_3s.task
   12760:	0073315f 6b736174 4833335f 0000007a     _1s.task_33Hz...
   12770:	6b736174 7a75425f 0072657a 73627570     task_Buzzer.pubs
   12780:	702e6275 756e6275 6f632e62 0000006d     ub.pubnub.com...
   12790:	20544547 48207325 2f505454 0d312e31     GET %s HTTP/1.1.
   127a0:	736f480a 25203a74 550a0d73 2d726573     .Host: %s..User-
   127b0:	6e656741 50203a74 754e6275 49572d62     Agent: PubNub-WI
   127c0:	3531434e 0a0d3030 6e6e6f43 69746365     NC1500..Connecti
   127d0:	203a6e6f 7065654b 696c412d 0a0d6576     on: Keep-Alive..
   127e0:	00000a0d 696c6176 74635f64 72705f78     ....valid_ctx_pr
   127f0:	62702874 00000029 732f2e2e 502f6372     t(pb)...../src/P
   12800:	754e6275 00632e62 2d627028 6174733e     ubNub.c.(pb->sta
   12810:	3d206574 5350203d 4c44495f 7c202945     te == PS_IDLE) |
   12820:	7028207c 733e2d62 65746174 203d3d20     | (pb->state == 
   12830:	575f5350 5f544941 29534e44 207c7c20     PS_WAIT_DNS) || 
   12840:	2d627028 6174733e 3d206574 5350203d     (pb->state == PS
   12850:	4941575f 4f435f54 43454e4e 00002954     _WAIT_CONNECT)..
   12860:	6c696166 74206465 7263206f 65746165     failed to create
   12870:	50435420 696c6320 20746e65 6b636f73      TCP client sock
   12880:	65207465 726f7272 00000d21 746e6f43     et error!...Cont
   12890:	2d746e65 676e654c 203a6874 00000000     ent-Length: ....
   128a0:	0000005b 65646e69 203c2078 4e425550     [...index < PUBN
   128b0:	435f4255 4d5f5854 00005841 6275702f     UB_CTX_MAX../pub
   128c0:	6873696c 2f73252f 302f7325 2f73252f     lish/%s/%s/0/%s/
   128d0:	00002f30 64636261 68676665 6c6b6a69     0/..abcdefghijkl
   128e0:	706f6e6d 74737271 78777675 42417a79     mnopqrstuvwxyzAB
   128f0:	46454443 4a494847 4e4d4c4b 5251504f     CDEFGHIJKLMNOPQR
   12900:	56555453 5a595857 33323130 37363534     STUVWXYZ01234567
   12910:	5f2d3938 3d2c7e2e 5b403b3a 0000005d     89-_.~,=:;@[]...
   12920:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   12930:	00000000 64697575 0000003d 00000000     ....uuid=.......
   12940:	00000026 68747561 0000003d 6275732f     &...auth=.../sub
   12950:	69726373 252f6562 73252f73 252f302f     scribe/%s/%s/0/%
   12960:	73253f73 73257325 73257325 736e7026     s?%s%s%s%s%s&pns
   12970:	573d6b64 31434e49 25303035 32252573     dk=WINC1500%s%%2
   12980:	00732546 00312e30                       F%s.0.1.

00012988 <__func__.12046>:
   12988:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
   12998:	7463656e 00000000                       nect....

000129a0 <__func__.12124>:
   129a0:	6e627570 675f6275 635f7465 00007874     pubnub_get_ctx..

000129b0 <__func__.12130>:
   129b0:	6e627570 695f6275 0074696e              pubnub_init.

000129bc <__func__.12136>:
   129bc:	6e627570 705f6275 696c6275 00006873     pubnub_publish..

000129cc <__func__.12147>:
   129cc:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
   129dc:	00000000                                ....

000129e0 <__func__.12151>:
   129e0:	6e627570 675f6275 00007465 0000f68c     pubnub_get......
   129f0:	0000f54c 0000f54c 0000f54a 0000f664     L...L...J...d...
   12a00:	0000f664 0000f656 0000f54a 0000f664     d...V...J...d...
   12a10:	0000f656 0000f664 0000f54a 0000f66c     V...d...J...l...
   12a20:	0000f66c 0000f66c 0000f86c 7566202c     l...l...l..., fu
   12a30:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
   12a40:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
   12a50:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
   12a60:	73256425 000a7325 00000043              %d%s%s..C...

00012a6c <_global_impure_ptr>:
   12a6c:	20000034 2b302d23 6c680020 6665004c     4.. #-0+ .hlL.ef
   12a7c:	47464567 32313000 36353433 41393837     gEFG.0123456789A
   12a8c:	45444342 31300046 35343332 39383736     BCDEF.0123456789
   12a9c:	64636261 00006665                                abcdef.

00012aa3 <_ctype_>:
   12aa3:	20202000 20202020 28282020 20282828     .         ((((( 
   12ab3:	20202020 20202020 20202020 20202020                     
   12ac3:	10108820 10101010 10101010 10101010      ...............
   12ad3:	04040410 04040404 10040404 10101010     ................
   12ae3:	41411010 41414141 01010101 01010101     ..AAAAAA........
   12af3:	01010101 01010101 01010101 10101010     ................
   12b03:	42421010 42424242 02020202 02020202     ..BBBBBB........
   12b13:	02020202 02020202 02020202 10101010     ................
   12b23:	00000020 00000000 00000000 00000000      ...............
	...

00012ba4 <__sf_fake_stdin>:
	...

00012bc4 <__sf_fake_stdout>:
	...

00012be4 <__sf_fake_stderr>:
	...

00012c04 <_init>:
   12c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c06:	46c0      	nop			; (mov r8, r8)
   12c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12c0a:	bc08      	pop	{r3}
   12c0c:	469e      	mov	lr, r3
   12c0e:	4770      	bx	lr

00012c10 <__init_array_start>:
   12c10:	000000dd 	.word	0x000000dd

00012c14 <_fini>:
   12c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12c16:	46c0      	nop			; (mov r8, r8)
   12c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
   12c1a:	bc08      	pop	{r3}
   12c1c:	469e      	mov	lr, r3
   12c1e:	4770      	bx	lr

00012c20 <__fini_array_start>:
   12c20:	000000b5 	.word	0x000000b5

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20000000:	f3bf 8f5f 	dmb	sy
20000004:	3801      	subs	r0, #1
20000006:	2800      	cmp	r0, #0
20000008:	d1fa      	bne.n	20000000 <portable_delay_cycles>
		"SUB r0, r0, #1 \n"
#endif
		"CMP r0, #0  \n"
		"BNE loop         "
	);
}
2000000a:	4770      	bx	lr

2000000c <temp_set_point>:
2000000c:	ff50                                             P

2000000d <water_temp>:
2000000d:	01ff                                             .

2000000e <degrees_F>:
2000000e:	0001                                        ..

20000010 <egstrNmBusCapabilities>:
20000010:	0100 0000                                   ....

20000014 <clk_status_reg_adr>:
20000014:	000f 0000                                   ....

20000018 <g_interrupt_enabled>:
20000018:	0001 0000                                   ....

2000001c <phantomISR>:
2000001c:	270f 0000                                   .'..

20000020 <uxCriticalNesting>:
20000020:	aaaa aaaa                                   ....

20000024 <PubNubChannel>:
20000024:	4957 434e 3531 3030 305f 3a30 3030 0000     WINC1500_00:00..

20000034 <impure_data>:
20000034:	0000 0000 2ba4 0001 2bc4 0001 2be4 0001     .....+...+...+..
	...
20000054:	2a68 0001 0000 0000 0000 0000 0000 0000     h*..............
	...

20000094 <_impure_ptr>:
20000094:	0034 2000                                   4.. 

20000098 <__ctype_ptr__>:
20000098:	2aa3 0001                                   .*..
