
Cloud_Tub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000e490  00000000  00000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000090  20000000  0000e490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000458c  20000090  0000e520  00020090  2**2
                  ALLOC
  3 .stack        00002004  2000461c  00012aac  00020090  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
  6 .debug_info   000437a3  00000000  00000000  00020111  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d75  00000000  00000000  000638b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008529  00000000  00000000  00069629  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001790  00000000  00000000  00071b52  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000015e0  00000000  00000000  000732e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00022603  00000000  00000000  000748c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001e966  00000000  00000000  00096ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009a636  00000000  00000000  000b582b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00005d70  00000000  00000000  0014fe64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	20006620 	.word	0x20006620
       4:	00006b51 	.word	0x00006b51
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
       8:	00006c49 	.word	0x00006c49
       c:	00006c49 	.word	0x00006c49
	...
	rtc_calendar_get_time(module, &time);

	/* Check current mode. */
	if (module->clock_24h) {
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);
      2c:	00006fb1 	.word	0x00006fb1
	...
      38:	000070d1 	.word	0x000070d1
      3c:	00007119 	.word	0x00007119
      40:	00006c49 	.word	0x00006c49

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
      44:	00006c49 	.word	0x00006c49
      48:	00006c49 	.word	0x00006c49
      4c:	00003e09 	.word	0x00003e09
      50:	00003a39 	.word	0x00003a39
      54:	00006c49 	.word	0x00006c49
      58:	00006c49 	.word	0x00006c49
		if (time.hour == 0) {
      5c:	00006c49 	.word	0x00006c49
      60:	00006c49 	.word	0x00006c49
			time.hour = 12;
      64:	00004e11 	.word	0x00004e11
      68:	00004e29 	.word	0x00004e29
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      6c:	00004e41 	.word	0x00004e41
      70:	00004e59 	.word	0x00004e59
      74:	00004e71 	.word	0x00004e71
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      78:	00004e89 	.word	0x00004e89
      7c:	00006a99 	.word	0x00006a99
      80:	00006aad 	.word	0x00006aad
      84:	00006ac1 	.word	0x00006ac1
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
      88:	00006c49 	.word	0x00006c49
      8c:	00006c49 	.word	0x00006c49
      90:	00006c49 	.word	0x00006c49
	...
      9c:	000038c9 	.word	0x000038c9
      a0:	00006c49 	.word	0x00006c49
      a4:	00006c49 	.word	0x00006c49
			alarm.time.hour = alarm.time.hour % 12;
      a8:	00006c49 	.word	0x00006c49
      ac:	00006c49 	.word	0x00006c49
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
			if (alarm.time.hour == 0) {
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
				alarm.time.hour = 12;
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
			}
			module->clock_24h = false;
      d0:	20000090 	.word	0x20000090
      d4:	00000000 	.word	0x00000000
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      d8:	0000e490 	.word	0x0000e490

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
			module->clock_24h = true;
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
		if (time.hour == 0) {
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000094 	.word	0x20000094
			rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
			module->clock_24h = true;
		}

		/* Change value in configuration structure. */
		module->clock_24h = false;
     108:	0000e490 	.word	0x0000e490
     10c:	0000e490 	.word	0x0000e490
	} else {
		/* Set hour value based on pm flag. */
		if (time.pm == 1) {
     110:	00000000 	.word	0x00000000

00000114 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     120:	4b06      	ldr	r3, [pc, #24]	; (13c <NVIC_EnableIRQ+0x28>)
     122:	1dfa      	adds	r2, r7, #7
     124:	7812      	ldrb	r2, [r2, #0]
     126:	0011      	movs	r1, r2
     128:	221f      	movs	r2, #31
     12a:	400a      	ands	r2, r1
     12c:	2101      	movs	r1, #1
     12e:	4091      	lsls	r1, r2
     130:	000a      	movs	r2, r1
     132:	601a      	str	r2, [r3, #0]
}
     134:	46c0      	nop			; (mov r8, r8)
     136:	46bd      	mov	sp, r7
     138:	b002      	add	sp, #8
     13a:	bd80      	pop	{r7, pc}
     13c:	e000e100 	.word	0xe000e100

00000140 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     140:	b580      	push	{r7, lr}
     142:	b082      	sub	sp, #8
     144:	af00      	add	r7, sp, #0
     146:	0002      	movs	r2, r0
     148:	1dfb      	adds	r3, r7, #7
     14a:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     14c:	4a07      	ldr	r2, [pc, #28]	; (16c <NVIC_DisableIRQ+0x2c>)
     14e:	1dfb      	adds	r3, r7, #7
     150:	781b      	ldrb	r3, [r3, #0]
     152:	0019      	movs	r1, r3
     154:	231f      	movs	r3, #31
     156:	400b      	ands	r3, r1
     158:	2101      	movs	r1, #1
     15a:	4099      	lsls	r1, r3
     15c:	000b      	movs	r3, r1
     15e:	0019      	movs	r1, r3
     160:	2380      	movs	r3, #128	; 0x80
     162:	50d1      	str	r1, [r2, r3]
}
     164:	46c0      	nop			; (mov r8, r8)
     166:	46bd      	mov	sp, r7
     168:	b002      	add	sp, #8
     16a:	bd80      	pop	{r7, pc}
     16c:	e000e100 	.word	0xe000e100

00000170 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     170:	b580      	push	{r7, lr}
     172:	b082      	sub	sp, #8
     174:	af00      	add	r7, sp, #0
     176:	0002      	movs	r2, r0
     178:	1dfb      	adds	r3, r7, #7
     17a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <system_interrupt_enable+0x28>)
     17e:	1dfa      	adds	r2, r7, #7
     180:	7812      	ldrb	r2, [r2, #0]
     182:	0011      	movs	r1, r2
     184:	221f      	movs	r2, #31
     186:	400a      	ands	r2, r1
     188:	2101      	movs	r1, #1
     18a:	4091      	lsls	r1, r2
     18c:	000a      	movs	r2, r1
     18e:	601a      	str	r2, [r3, #0]
}
     190:	46c0      	nop			; (mov r8, r8)
     192:	46bd      	mov	sp, r7
     194:	b002      	add	sp, #8
     196:	bd80      	pop	{r7, pc}
     198:	e000e100 	.word	0xe000e100

0000019c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     19c:	b580      	push	{r7, lr}
     19e:	b084      	sub	sp, #16
     1a0:	af00      	add	r7, sp, #0
     1a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	681b      	ldr	r3, [r3, #0]
     1a8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     1aa:	68fb      	ldr	r3, [r7, #12]
     1ac:	69db      	ldr	r3, [r3, #28]
     1ae:	1e5a      	subs	r2, r3, #1
     1b0:	4193      	sbcs	r3, r2
     1b2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     1b4:	0018      	movs	r0, r3
     1b6:	46bd      	mov	sp, r7
     1b8:	b004      	add	sp, #16
     1ba:	bd80      	pop	{r7, pc}

000001bc <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     1bc:	b580      	push	{r7, lr}
     1be:	b084      	sub	sp, #16
     1c0:	af00      	add	r7, sp, #0
     1c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     1c4:	687b      	ldr	r3, [r7, #4]
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     1ca:	687b      	ldr	r3, [r7, #4]
     1cc:	681b      	ldr	r3, [r3, #0]
     1ce:	0018      	movs	r0, r3
     1d0:	4b0b      	ldr	r3, [pc, #44]	; (200 <spi_enable+0x44>)
     1d2:	4798      	blx	r3
     1d4:	0003      	movs	r3, r0
     1d6:	0018      	movs	r0, r3
     1d8:	4b0a      	ldr	r3, [pc, #40]	; (204 <spi_enable+0x48>)
     1da:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     1dc:	46c0      	nop			; (mov r8, r8)
     1de:	687b      	ldr	r3, [r7, #4]
     1e0:	0018      	movs	r0, r3
     1e2:	4b09      	ldr	r3, [pc, #36]	; (208 <spi_enable+0x4c>)
     1e4:	4798      	blx	r3
     1e6:	1e03      	subs	r3, r0, #0
     1e8:	d1f9      	bne.n	1de <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     1ea:	68fb      	ldr	r3, [r7, #12]
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	2202      	movs	r2, #2
     1f0:	431a      	orrs	r2, r3
     1f2:	68fb      	ldr	r3, [r7, #12]
     1f4:	601a      	str	r2, [r3, #0]
}
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	46bd      	mov	sp, r7
     1fa:	b004      	add	sp, #16
     1fc:	bd80      	pop	{r7, pc}
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	00004dc5 	.word	0x00004dc5
     204:	00000171 	.word	0x00000171
     208:	0000019d 	.word	0x0000019d

0000020c <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     20c:	b580      	push	{r7, lr}
     20e:	b084      	sub	sp, #16
     210:	af00      	add	r7, sp, #0
     212:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     214:	687b      	ldr	r3, [r7, #4]
     216:	681b      	ldr	r3, [r3, #0]
     218:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     21a:	68fb      	ldr	r3, [r7, #12]
     21c:	7e1b      	ldrb	r3, [r3, #24]
     21e:	b2db      	uxtb	r3, r3
     220:	001a      	movs	r2, r3
     222:	2301      	movs	r3, #1
     224:	4013      	ands	r3, r2
     226:	1e5a      	subs	r2, r3, #1
     228:	4193      	sbcs	r3, r2
     22a:	b2db      	uxtb	r3, r3
}
     22c:	0018      	movs	r0, r3
     22e:	46bd      	mov	sp, r7
     230:	b004      	add	sp, #16
     232:	bd80      	pop	{r7, pc}

00000234 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     234:	b580      	push	{r7, lr}
     236:	b084      	sub	sp, #16
     238:	af00      	add	r7, sp, #0
     23a:	6078      	str	r0, [r7, #4]
     23c:	000a      	movs	r2, r1
     23e:	1cbb      	adds	r3, r7, #2
     240:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     242:	687b      	ldr	r3, [r7, #4]
     244:	681b      	ldr	r3, [r3, #0]
     246:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     248:	687b      	ldr	r3, [r7, #4]
     24a:	0018      	movs	r0, r3
     24c:	4b0a      	ldr	r3, [pc, #40]	; (278 <spi_write+0x44>)
     24e:	4798      	blx	r3
     250:	0003      	movs	r3, r0
     252:	001a      	movs	r2, r3
     254:	2301      	movs	r3, #1
     256:	4053      	eors	r3, r2
     258:	b2db      	uxtb	r3, r3
     25a:	2b00      	cmp	r3, #0
     25c:	d001      	beq.n	262 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     25e:	2305      	movs	r3, #5
     260:	e006      	b.n	270 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     262:	1cbb      	adds	r3, r7, #2
     264:	881b      	ldrh	r3, [r3, #0]
     266:	05db      	lsls	r3, r3, #23
     268:	0dda      	lsrs	r2, r3, #23
     26a:	68fb      	ldr	r3, [r7, #12]
     26c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     26e:	2300      	movs	r3, #0
}
     270:	0018      	movs	r0, r3
     272:	46bd      	mov	sp, r7
     274:	b004      	add	sp, #16
     276:	bd80      	pop	{r7, pc}
     278:	0000020d 	.word	0x0000020d

0000027c <spi_enable_callback>:
 * \param[in] callback_type  Callback type given by an enum
 */
static inline void spi_enable_callback(
		struct spi_module *const module,
		enum spi_callback callback_type)
{
     27c:	b580      	push	{r7, lr}
     27e:	b082      	sub	sp, #8
     280:	af00      	add	r7, sp, #0
     282:	6078      	str	r0, [r7, #4]
     284:	000a      	movs	r2, r1
     286:	1cfb      	adds	r3, r7, #3
     288:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback |= (1 << callback_type);
     28a:	687b      	ldr	r3, [r7, #4]
     28c:	2237      	movs	r2, #55	; 0x37
     28e:	5c9b      	ldrb	r3, [r3, r2]
     290:	b25a      	sxtb	r2, r3
     292:	1cfb      	adds	r3, r7, #3
     294:	781b      	ldrb	r3, [r3, #0]
     296:	2101      	movs	r1, #1
     298:	4099      	lsls	r1, r3
     29a:	000b      	movs	r3, r1
     29c:	b25b      	sxtb	r3, r3
     29e:	4313      	orrs	r3, r2
     2a0:	b25b      	sxtb	r3, r3
     2a2:	b2d9      	uxtb	r1, r3
     2a4:	687b      	ldr	r3, [r7, #4]
     2a6:	2237      	movs	r2, #55	; 0x37
     2a8:	5499      	strb	r1, [r3, r2]
}
     2aa:	46c0      	nop			; (mov r8, r8)
     2ac:	46bd      	mov	sp, r7
     2ae:	b002      	add	sp, #8
     2b0:	bd80      	pop	{r7, pc}
     2b2:	46c0      	nop			; (mov r8, r8)

000002b4 <tm1640_get_state>:
} tm1640_state_t;

volatile tm1640_state_t tm1640_state;

static tm1640_state_t tm1640_get_state(void)
{    
     2b4:	b580      	push	{r7, lr}
     2b6:	b082      	sub	sp, #8
     2b8:	af00      	add	r7, sp, #0
    // State will be updated from an interrupt so disable interrupts
    // to make this interaction atomic.
    tm1640_state_t temp_state;
    NVIC_DisableIRQ(TM1640_IRQ);
     2ba:	200d      	movs	r0, #13
     2bc:	4b07      	ldr	r3, [pc, #28]	; (2dc <tm1640_get_state+0x28>)
     2be:	4798      	blx	r3
    temp_state = tm1640_state;
     2c0:	1dfb      	adds	r3, r7, #7
     2c2:	4a07      	ldr	r2, [pc, #28]	; (2e0 <tm1640_get_state+0x2c>)
     2c4:	7812      	ldrb	r2, [r2, #0]
     2c6:	701a      	strb	r2, [r3, #0]
    NVIC_EnableIRQ(TM1640_IRQ);
     2c8:	200d      	movs	r0, #13
     2ca:	4b06      	ldr	r3, [pc, #24]	; (2e4 <tm1640_get_state+0x30>)
     2cc:	4798      	blx	r3
    return temp_state;
     2ce:	1dfb      	adds	r3, r7, #7
     2d0:	781b      	ldrb	r3, [r3, #0]
}
     2d2:	0018      	movs	r0, r3
     2d4:	46bd      	mov	sp, r7
     2d6:	b002      	add	sp, #8
     2d8:	bd80      	pop	{r7, pc}
     2da:	46c0      	nop			; (mov r8, r8)
     2dc:	00000141 	.word	0x00000141
     2e0:	200043ec 	.word	0x200043ec
     2e4:	00000115 	.word	0x00000115

000002e8 <spi_cb_buffer_transmitted>:

static void spi_cb_buffer_transmitted(struct spi_module *const module) 
{
     2e8:	b580      	push	{r7, lr}
     2ea:	b082      	sub	sp, #8
     2ec:	af00      	add	r7, sp, #0
     2ee:	6078      	str	r0, [r7, #4]
    // This function will be called from an interrupt context
    switch (tm1640_state) {
     2f0:	4b15      	ldr	r3, [pc, #84]	; (348 <spi_cb_buffer_transmitted+0x60>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	b2db      	uxtb	r3, r3
     2f6:	2b01      	cmp	r3, #1
     2f8:	d002      	beq.n	300 <spi_cb_buffer_transmitted+0x18>
     2fa:	2b02      	cmp	r3, #2
     2fc:	d012      	beq.n	324 <spi_cb_buffer_transmitted+0x3c>
     2fe:	e01b      	b.n	338 <spi_cb_buffer_transmitted+0x50>
    case STATE_SET_DATA:
        tm1640_state = STATE_SET_ADDR;
     300:	4b11      	ldr	r3, [pc, #68]	; (348 <spi_cb_buffer_transmitted+0x60>)
     302:	2202      	movs	r2, #2
     304:	701a      	strb	r2, [r3, #0]
        spi_write_buffer_job(&spi_module, &tm1640_display_pkt.set_addr, TM1640_GRIDS + 1);
     306:	4911      	ldr	r1, [pc, #68]	; (34c <spi_cb_buffer_transmitted+0x64>)
     308:	4b11      	ldr	r3, [pc, #68]	; (350 <spi_cb_buffer_transmitted+0x68>)
     30a:	2211      	movs	r2, #17
     30c:	0018      	movs	r0, r3
     30e:	4b11      	ldr	r3, [pc, #68]	; (354 <spi_cb_buffer_transmitted+0x6c>)
     310:	4798      	blx	r3
        spi_write(&spi_module, (uint16_t) tm1640_display_pkt.set_data);
     312:	4b11      	ldr	r3, [pc, #68]	; (358 <spi_cb_buffer_transmitted+0x70>)
     314:	781b      	ldrb	r3, [r3, #0]
     316:	b29a      	uxth	r2, r3
     318:	4b0d      	ldr	r3, [pc, #52]	; (350 <spi_cb_buffer_transmitted+0x68>)
     31a:	0011      	movs	r1, r2
     31c:	0018      	movs	r0, r3
     31e:	4b0f      	ldr	r3, [pc, #60]	; (35c <spi_cb_buffer_transmitted+0x74>)
     320:	4798      	blx	r3
        break;
     322:	e00d      	b.n	340 <spi_cb_buffer_transmitted+0x58>

    case STATE_SET_ADDR:
        tm1640_state = STATE_CONTROL;
     324:	4b08      	ldr	r3, [pc, #32]	; (348 <spi_cb_buffer_transmitted+0x60>)
     326:	2203      	movs	r2, #3
     328:	701a      	strb	r2, [r3, #0]
        spi_write_buffer_job(&spi_module, &tm1640_display_pkt.brigtness, 1);
     32a:	490d      	ldr	r1, [pc, #52]	; (360 <spi_cb_buffer_transmitted+0x78>)
     32c:	4b08      	ldr	r3, [pc, #32]	; (350 <spi_cb_buffer_transmitted+0x68>)
     32e:	2201      	movs	r2, #1
     330:	0018      	movs	r0, r3
     332:	4b08      	ldr	r3, [pc, #32]	; (354 <spi_cb_buffer_transmitted+0x6c>)
     334:	4798      	blx	r3
        break;
     336:	e003      	b.n	340 <spi_cb_buffer_transmitted+0x58>

    case STATE_CONTROL:
    default:
        tm1640_state = STATE_IDLE;
     338:	4b03      	ldr	r3, [pc, #12]	; (348 <spi_cb_buffer_transmitted+0x60>)
     33a:	2200      	movs	r2, #0
     33c:	701a      	strb	r2, [r3, #0]
        break;
     33e:	46c0      	nop			; (mov r8, r8)
    }
}
     340:	46c0      	nop			; (mov r8, r8)
     342:	46bd      	mov	sp, r7
     344:	b002      	add	sp, #8
     346:	bd80      	pop	{r7, pc}
     348:	200043ec 	.word	0x200043ec
     34c:	200043f1 	.word	0x200043f1
     350:	20004404 	.word	0x20004404
     354:	00005685 	.word	0x00005685
     358:	200043f0 	.word	0x200043f0
     35c:	00000235 	.word	0x00000235
     360:	20004402 	.word	0x20004402

00000364 <spi_cb_error>:

static void spi_cb_error(struct spi_module *const module) 
{
     364:	b580      	push	{r7, lr}
     366:	b082      	sub	sp, #8
     368:	af00      	add	r7, sp, #0
     36a:	6078      	str	r0, [r7, #4]
    printf("Spi error!\n");
     36c:	4b02      	ldr	r3, [pc, #8]	; (378 <spi_cb_error+0x14>)
     36e:	0018      	movs	r0, r3
     370:	4b02      	ldr	r3, [pc, #8]	; (37c <spi_cb_error+0x18>)
     372:	4798      	blx	r3
    while(1) {}
     374:	e7fe      	b.n	374 <spi_cb_error+0x10>
     376:	46c0      	nop			; (mov r8, r8)
     378:	0000cfc0 	.word	0x0000cfc0
     37c:	0000c1f1 	.word	0x0000c1f1

00000380 <tm1640_init>:
}

void tm1640_init(void)
{
     380:	b580      	push	{r7, lr}
     382:	b090      	sub	sp, #64	; 0x40
     384:	af00      	add	r7, sp, #0
    struct spi_config config;
    struct system_pinmux_config do_pin;
    struct system_pinmux_config sck_pin;

    do_pin.powersave = false;
     386:	1d3b      	adds	r3, r7, #4
     388:	2200      	movs	r2, #0
     38a:	70da      	strb	r2, [r3, #3]
    do_pin.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     38c:	1d3b      	adds	r3, r7, #4
     38e:	2201      	movs	r2, #1
     390:	705a      	strb	r2, [r3, #1]
    do_pin.input_pull = SYSTEM_PINMUX_PIN_PULL_UP;
     392:	1d3b      	adds	r3, r7, #4
     394:	2201      	movs	r2, #1
     396:	709a      	strb	r2, [r3, #2]

    sck_pin.powersave = false;
     398:	003b      	movs	r3, r7
     39a:	2200      	movs	r2, #0
     39c:	70da      	strb	r2, [r3, #3]
    sck_pin.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     39e:	003b      	movs	r3, r7
     3a0:	2201      	movs	r2, #1
     3a2:	705a      	strb	r2, [r3, #1]
    sck_pin.input_pull = SYSTEM_PINMUX_PIN_PULL_UP;
     3a4:	003b      	movs	r3, r7
     3a6:	2201      	movs	r2, #1
     3a8:	709a      	strb	r2, [r3, #2]

    config.character_size = SPI_CHARACTER_SIZE_8BIT;
     3aa:	2308      	movs	r3, #8
     3ac:	18fb      	adds	r3, r7, r3
     3ae:	2200      	movs	r2, #0
     3b0:	741a      	strb	r2, [r3, #16]
    config.data_order = SPI_DATA_ORDER_LSB;
     3b2:	2308      	movs	r3, #8
     3b4:	18fb      	adds	r3, r7, r3
     3b6:	2280      	movs	r2, #128	; 0x80
     3b8:	05d2      	lsls	r2, r2, #23
     3ba:	605a      	str	r2, [r3, #4]
    config.mode = SPI_MODE_MASTER;
     3bc:	2308      	movs	r3, #8
     3be:	18fb      	adds	r3, r7, r3
     3c0:	2201      	movs	r2, #1
     3c2:	701a      	strb	r2, [r3, #0]
    config.transfer_mode = SPI_TRANSFER_MODE_3;
     3c4:	2308      	movs	r3, #8
     3c6:	18fb      	adds	r3, r7, r3
     3c8:	22c0      	movs	r2, #192	; 0xc0
     3ca:	0592      	lsls	r2, r2, #22
     3cc:	609a      	str	r2, [r3, #8]
    config.select_slave_low_detect_enable = false;
     3ce:	2308      	movs	r3, #8
     3d0:	18fb      	adds	r3, r7, r3
     3d2:	2200      	movs	r2, #0
     3d4:	74da      	strb	r2, [r3, #19]
#ifndef XPLAINED
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;    
     3d6:	2308      	movs	r3, #8
     3d8:	18fb      	adds	r3, r7, r3
     3da:	2280      	movs	r2, #128	; 0x80
     3dc:	0252      	lsls	r2, r2, #9
     3de:	60da      	str	r2, [r3, #12]
#else
    //config.mux_setting = SPI_SIGNAL_MUX_SETTING_O;
    config.mux_setting = SPI_SIGNAL_MUX_SETTING_E;
#endif
    config.receiver_enable = false;
     3e0:	2308      	movs	r3, #8
     3e2:	18fb      	adds	r3, r7, r3
     3e4:	2200      	movs	r2, #0
     3e6:	749a      	strb	r2, [r3, #18]
    config.master_slave_select_enable = false;
     3e8:	2308      	movs	r3, #8
     3ea:	18fb      	adds	r3, r7, r3
     3ec:	2200      	movs	r2, #0
     3ee:	751a      	strb	r2, [r3, #20]
    config.run_in_standby = true;
     3f0:	2308      	movs	r3, #8
     3f2:	18fb      	adds	r3, r7, r3
     3f4:	2201      	movs	r2, #1
     3f6:	745a      	strb	r2, [r3, #17]
    config.mode_specific.master.baudrate = TM1640_BAUD_RATE;
     3f8:	2308      	movs	r3, #8
     3fa:	18fb      	adds	r3, r7, r3
     3fc:	4a23      	ldr	r2, [pc, #140]	; (48c <tm1640_init+0x10c>)
     3fe:	619a      	str	r2, [r3, #24]
    config.generator_source = GCLK_GENERATOR_0;
     400:	2308      	movs	r3, #8
     402:	18fb      	adds	r3, r7, r3
     404:	2224      	movs	r2, #36	; 0x24
     406:	2100      	movs	r1, #0
     408:	5499      	strb	r1, [r3, r2]
    config.pinmux_pad0 = TM1640_PINMUX_PAD0;
     40a:	2308      	movs	r3, #8
     40c:	18fb      	adds	r3, r7, r3
     40e:	2201      	movs	r2, #1
     410:	4252      	negs	r2, r2
     412:	629a      	str	r2, [r3, #40]	; 0x28
    config.pinmux_pad1 = TM1640_PINMUX_PAD1;
     414:	2308      	movs	r3, #8
     416:	18fb      	adds	r3, r7, r3
     418:	2201      	movs	r2, #1
     41a:	4252      	negs	r2, r2
     41c:	62da      	str	r2, [r3, #44]	; 0x2c
    config.pinmux_pad2 = TM1640_PINMUX_PAD2;
     41e:	2308      	movs	r3, #8
     420:	18fb      	adds	r3, r7, r3
     422:	4a1b      	ldr	r2, [pc, #108]	; (490 <tm1640_init+0x110>)
     424:	631a      	str	r2, [r3, #48]	; 0x30
    config.pinmux_pad3 = TM1640_PINMUX_PAD3;
     426:	2308      	movs	r3, #8
     428:	18fb      	adds	r3, r7, r3
     42a:	4a1a      	ldr	r2, [pc, #104]	; (494 <tm1640_init+0x114>)
     42c:	635a      	str	r2, [r3, #52]	; 0x34

    if (spi_init(&spi_module, TM1640_SERCOM, &config)) {
     42e:	2308      	movs	r3, #8
     430:	18fa      	adds	r2, r7, r3
     432:	4919      	ldr	r1, [pc, #100]	; (498 <tm1640_init+0x118>)
     434:	4b19      	ldr	r3, [pc, #100]	; (49c <tm1640_init+0x11c>)
     436:	0018      	movs	r0, r3
     438:	4b19      	ldr	r3, [pc, #100]	; (4a0 <tm1640_init+0x120>)
     43a:	4798      	blx	r3
     43c:	1e03      	subs	r3, r0, #0
     43e:	d004      	beq.n	44a <tm1640_init+0xca>
        printf("Failed to initialize TM1640_SERCOM!\n");
     440:	4b18      	ldr	r3, [pc, #96]	; (4a4 <tm1640_init+0x124>)
     442:	0018      	movs	r0, r3
     444:	4b18      	ldr	r3, [pc, #96]	; (4a8 <tm1640_init+0x128>)
     446:	4798      	blx	r3
     448:	e01c      	b.n	484 <tm1640_init+0x104>
        return;
    }

    spi_register_callback(&spi_module, spi_cb_buffer_transmitted, SPI_CALLBACK_BUFFER_TRANSMITTED);      
     44a:	4918      	ldr	r1, [pc, #96]	; (4ac <tm1640_init+0x12c>)
     44c:	4b13      	ldr	r3, [pc, #76]	; (49c <tm1640_init+0x11c>)
     44e:	2200      	movs	r2, #0
     450:	0018      	movs	r0, r3
     452:	4b17      	ldr	r3, [pc, #92]	; (4b0 <tm1640_init+0x130>)
     454:	4798      	blx	r3
    spi_enable_callback(&spi_module, SPI_CALLBACK_BUFFER_TRANSMITTED);  
     456:	4b11      	ldr	r3, [pc, #68]	; (49c <tm1640_init+0x11c>)
     458:	2100      	movs	r1, #0
     45a:	0018      	movs	r0, r3
     45c:	4b15      	ldr	r3, [pc, #84]	; (4b4 <tm1640_init+0x134>)
     45e:	4798      	blx	r3
    spi_register_callback(&spi_module, spi_cb_error, SPI_CALLBACK_ERROR);    
     460:	4915      	ldr	r1, [pc, #84]	; (4b8 <tm1640_init+0x138>)
     462:	4b0e      	ldr	r3, [pc, #56]	; (49c <tm1640_init+0x11c>)
     464:	2203      	movs	r2, #3
     466:	0018      	movs	r0, r3
     468:	4b11      	ldr	r3, [pc, #68]	; (4b0 <tm1640_init+0x130>)
     46a:	4798      	blx	r3
    spi_enable_callback(&spi_module, SPI_CALLBACK_ERROR);
     46c:	4b0b      	ldr	r3, [pc, #44]	; (49c <tm1640_init+0x11c>)
     46e:	2103      	movs	r1, #3
     470:	0018      	movs	r0, r3
     472:	4b10      	ldr	r3, [pc, #64]	; (4b4 <tm1640_init+0x134>)
     474:	4798      	blx	r3

    NVIC_EnableIRQ(TM1640_IRQ);
     476:	200d      	movs	r0, #13
     478:	4b10      	ldr	r3, [pc, #64]	; (4bc <tm1640_init+0x13c>)
     47a:	4798      	blx	r3
    spi_enable(&spi_module);
     47c:	4b07      	ldr	r3, [pc, #28]	; (49c <tm1640_init+0x11c>)
     47e:	0018      	movs	r0, r3
     480:	4b0f      	ldr	r3, [pc, #60]	; (4c0 <tm1640_init+0x140>)
     482:	4798      	blx	r3
}
     484:	46bd      	mov	sp, r7
     486:	b010      	add	sp, #64	; 0x40
     488:	bd80      	pop	{r7, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	00030d40 	.word	0x00030d40
     490:	002a0003 	.word	0x002a0003
     494:	002b0003 	.word	0x002b0003
     498:	42001800 	.word	0x42001800
     49c:	20004404 	.word	0x20004404
     4a0:	00005365 	.word	0x00005365
     4a4:	0000cfcc 	.word	0x0000cfcc
     4a8:	0000c1f1 	.word	0x0000c1f1
     4ac:	000002e9 	.word	0x000002e9
     4b0:	0000563d 	.word	0x0000563d
     4b4:	0000027d 	.word	0x0000027d
     4b8:	00000365 	.word	0x00000365
     4bc:	00000115 	.word	0x00000115
     4c0:	000001bd 	.word	0x000001bd

000004c4 <tm1640_set_display>:

enum status_code tm1640_set_display(tm1640_display_t *disp, tm1640_brightness_t brightness)
{
     4c4:	b590      	push	{r4, r7, lr}
     4c6:	b085      	sub	sp, #20
     4c8:	af00      	add	r7, sp, #0
     4ca:	6078      	str	r0, [r7, #4]
     4cc:	000a      	movs	r2, r1
     4ce:	1cfb      	adds	r3, r7, #3
     4d0:	701a      	strb	r2, [r3, #0]
    enum status_code status;

    // Transactions have to be broken up into 3 segments because the data and clock need to go high
    // for a period of time between the data command, the address/display data, and the display control.
    // Start off with a single byte transfer and then keep the transaction moving with the callback.
    if (tm1640_get_state() == STATE_IDLE) {
     4d2:	4b1d      	ldr	r3, [pc, #116]	; (548 <tm1640_set_display+0x84>)
     4d4:	4798      	blx	r3
     4d6:	1e03      	subs	r3, r0, #0
     4d8:	d131      	bne.n	53e <tm1640_set_display+0x7a>
        tm1640_state = STATE_SET_DATA;
     4da:	4b1c      	ldr	r3, [pc, #112]	; (54c <tm1640_set_display+0x88>)
     4dc:	2201      	movs	r2, #1
     4de:	701a      	strb	r2, [r3, #0]

        memcpy(&tm1640_display_pkt.disp_data, disp->grid, TM1640_GRIDS);
     4e0:	6879      	ldr	r1, [r7, #4]
     4e2:	4b1b      	ldr	r3, [pc, #108]	; (550 <tm1640_set_display+0x8c>)
     4e4:	2202      	movs	r2, #2
     4e6:	189b      	adds	r3, r3, r2
     4e8:	2210      	movs	r2, #16
     4ea:	0018      	movs	r0, r3
     4ec:	4b19      	ldr	r3, [pc, #100]	; (554 <tm1640_set_display+0x90>)
     4ee:	4798      	blx	r3
        tm1640_display_pkt.set_addr = ADDR_CMD_ADDR0;
     4f0:	4b17      	ldr	r3, [pc, #92]	; (550 <tm1640_set_display+0x8c>)
     4f2:	22c0      	movs	r2, #192	; 0xc0
     4f4:	705a      	strb	r2, [r3, #1]
        tm1640_display_pkt.set_data = DATA_CMD_ADDR_INC;
     4f6:	4b16      	ldr	r3, [pc, #88]	; (550 <tm1640_set_display+0x8c>)
     4f8:	2240      	movs	r2, #64	; 0x40
     4fa:	701a      	strb	r2, [r3, #0]
        tm1640_display_pkt.brigtness = brightness;
     4fc:	4b14      	ldr	r3, [pc, #80]	; (550 <tm1640_set_display+0x8c>)
     4fe:	1cfa      	adds	r2, r7, #3
     500:	7812      	ldrb	r2, [r2, #0]
     502:	749a      	strb	r2, [r3, #18]

        status = spi_write_buffer_job(&spi_module, &tm1640_display_pkt.set_data, 1);
     504:	230f      	movs	r3, #15
     506:	18fc      	adds	r4, r7, r3
     508:	4911      	ldr	r1, [pc, #68]	; (550 <tm1640_set_display+0x8c>)
     50a:	4b13      	ldr	r3, [pc, #76]	; (558 <tm1640_set_display+0x94>)
     50c:	2201      	movs	r2, #1
     50e:	0018      	movs	r0, r3
     510:	4b12      	ldr	r3, [pc, #72]	; (55c <tm1640_set_display+0x98>)
     512:	4798      	blx	r3
     514:	0003      	movs	r3, r0
     516:	7023      	strb	r3, [r4, #0]

        // First byte needs to be started manually
        if (!status) 
     518:	230f      	movs	r3, #15
     51a:	18fb      	adds	r3, r7, r3
     51c:	781b      	ldrb	r3, [r3, #0]
     51e:	2b00      	cmp	r3, #0
     520:	d109      	bne.n	536 <tm1640_set_display+0x72>
            return spi_write(&spi_module, (uint16_t) tm1640_display_pkt.set_data);
     522:	4b0b      	ldr	r3, [pc, #44]	; (550 <tm1640_set_display+0x8c>)
     524:	781b      	ldrb	r3, [r3, #0]
     526:	b29a      	uxth	r2, r3
     528:	4b0b      	ldr	r3, [pc, #44]	; (558 <tm1640_set_display+0x94>)
     52a:	0011      	movs	r1, r2
     52c:	0018      	movs	r0, r3
     52e:	4b0c      	ldr	r3, [pc, #48]	; (560 <tm1640_set_display+0x9c>)
     530:	4798      	blx	r3
     532:	0003      	movs	r3, r0
     534:	e004      	b.n	540 <tm1640_set_display+0x7c>
        else
            return status;
     536:	230f      	movs	r3, #15
     538:	18fb      	adds	r3, r7, r3
     53a:	781b      	ldrb	r3, [r3, #0]
     53c:	e000      	b.n	540 <tm1640_set_display+0x7c>
    }
    else
        return STATUS_BUSY;
     53e:	2305      	movs	r3, #5
}
     540:	0018      	movs	r0, r3
     542:	46bd      	mov	sp, r7
     544:	b005      	add	sp, #20
     546:	bd90      	pop	{r4, r7, pc}
     548:	000002b5 	.word	0x000002b5
     54c:	200043ec 	.word	0x200043ec
     550:	200043f0 	.word	0x200043f0
     554:	0000bb09 	.word	0x0000bb09
     558:	20004404 	.word	0x20004404
     55c:	00005685 	.word	0x00005685
     560:	00000235 	.word	0x00000235

00000564 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
     564:	b580      	push	{r7, lr}
     566:	b082      	sub	sp, #8
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	2264      	movs	r2, #100	; 0x64
     570:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     572:	687b      	ldr	r3, [r7, #4]
     574:	4a1b      	ldr	r2, [pc, #108]	; (5e4 <i2c_master_get_config_defaults+0x80>)
     576:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     578:	687b      	ldr	r3, [r7, #4]
     57a:	2200      	movs	r2, #0
     57c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     57e:	687b      	ldr	r3, [r7, #4]
     580:	2200      	movs	r2, #0
     582:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
     584:	687b      	ldr	r3, [r7, #4]
     586:	2200      	movs	r2, #0
     588:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     58a:	687b      	ldr	r3, [r7, #4]
     58c:	2280      	movs	r2, #128	; 0x80
     58e:	0392      	lsls	r2, r2, #14
     590:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
     592:	687b      	ldr	r3, [r7, #4]
     594:	2201      	movs	r2, #1
     596:	4252      	negs	r2, r2
     598:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
     59a:	687b      	ldr	r3, [r7, #4]
     59c:	2201      	movs	r2, #1
     59e:	4252      	negs	r2, r2
     5a0:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     5a2:	687b      	ldr	r3, [r7, #4]
     5a4:	2200      	movs	r2, #0
     5a6:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	2200      	movs	r2, #0
     5ac:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
     5ae:	687b      	ldr	r3, [r7, #4]
     5b0:	2224      	movs	r2, #36	; 0x24
     5b2:	2100      	movs	r1, #0
     5b4:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     5b6:	687b      	ldr	r3, [r7, #4]
     5b8:	2200      	movs	r2, #0
     5ba:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	222c      	movs	r2, #44	; 0x2c
     5c0:	2100      	movs	r1, #0
     5c2:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	222d      	movs	r2, #45	; 0x2d
     5c8:	2100      	movs	r1, #0
     5ca:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
     5cc:	687b      	ldr	r3, [r7, #4]
     5ce:	222e      	movs	r2, #46	; 0x2e
     5d0:	2100      	movs	r1, #0
     5d2:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     5d4:	687b      	ldr	r3, [r7, #4]
     5d6:	22d7      	movs	r2, #215	; 0xd7
     5d8:	861a      	strh	r2, [r3, #48]	; 0x30
}
     5da:	46c0      	nop			; (mov r8, r8)
     5dc:	46bd      	mov	sp, r7
     5de:	b002      	add	sp, #8
     5e0:	bd80      	pop	{r7, pc}
     5e2:	46c0      	nop			; (mov r8, r8)
     5e4:	00000d48 	.word	0x00000d48

000005e8 <wtc6508_init>:
{

}*/

void wtc6508_init(void)
{
     5e8:	b580      	push	{r7, lr}
     5ea:	b08e      	sub	sp, #56	; 0x38
     5ec:	af00      	add	r7, sp, #0
    struct i2c_master_config config;
    i2c_master_get_config_defaults(&config);
     5ee:	1d3b      	adds	r3, r7, #4
     5f0:	0018      	movs	r0, r3
     5f2:	4b0e      	ldr	r3, [pc, #56]	; (62c <wtc6508_init+0x44>)
     5f4:	4798      	blx	r3

    config.pinmux_pad0 = WTC6508_PINMUX_PAD0;
     5f6:	1d3b      	adds	r3, r7, #4
     5f8:	4a0d      	ldr	r2, [pc, #52]	; (630 <wtc6508_init+0x48>)
     5fa:	61da      	str	r2, [r3, #28]
    config.pinmux_pad1 = WTC6508_PINMUX_PAD1;
     5fc:	1d3b      	adds	r3, r7, #4
     5fe:	4a0d      	ldr	r2, [pc, #52]	; (634 <wtc6508_init+0x4c>)
     600:	621a      	str	r2, [r3, #32]
    config.baud_rate = WTC6508_BAUD;
     602:	1d3b      	adds	r3, r7, #4
     604:	220a      	movs	r2, #10
     606:	601a      	str	r2, [r3, #0]
    config.generator_source = GCLK_GENERATOR_4;
     608:	1d3b      	adds	r3, r7, #4
     60a:	2204      	movs	r2, #4
     60c:	731a      	strb	r2, [r3, #12]

    if (i2c_master_init(&wtc6508_module, WTC65808_SERCOM, &config)) {
     60e:	1d3a      	adds	r2, r7, #4
     610:	4909      	ldr	r1, [pc, #36]	; (638 <wtc6508_init+0x50>)
     612:	4b0a      	ldr	r3, [pc, #40]	; (63c <wtc6508_init+0x54>)
     614:	0018      	movs	r0, r3
     616:	4b0a      	ldr	r3, [pc, #40]	; (640 <wtc6508_init+0x58>)
     618:	4798      	blx	r3
     61a:	1e03      	subs	r3, r0, #0
     61c:	d003      	beq.n	626 <wtc6508_init+0x3e>
        printf("failed to initialize WTC6508!\n");
     61e:	4b09      	ldr	r3, [pc, #36]	; (644 <wtc6508_init+0x5c>)
     620:	0018      	movs	r0, r3
     622:	4b09      	ldr	r3, [pc, #36]	; (648 <wtc6508_init+0x60>)
     624:	4798      	blx	r3
    i2c_master_register_callback(&wtc6508_module, wtc6508_error_cb, I2C_MASTER_CALLBACK_ERROR);

    i2c_master_enable_callback(&wtc6508_module, I2C_MASTER_CALLBACK_READ_COMPLETE);
    i2c_master_enable_callback(&wtc6508_module, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
    i2c_master_enable_callback(&wtc6508_module, I2C_MASTER_CALLBACK_ERROR);*/
}
     626:	46bd      	mov	sp, r7
     628:	b00e      	add	sp, #56	; 0x38
     62a:	bd80      	pop	{r7, pc}
     62c:	00000565 	.word	0x00000565
     630:	00080002 	.word	0x00080002
     634:	00090002 	.word	0x00090002
     638:	42000800 	.word	0x42000800
     63c:	20004440 	.word	0x20004440
     640:	00004315 	.word	0x00004315
     644:	0000cff0 	.word	0x0000cff0
     648:	0000c1f1 	.word	0x0000c1f1

0000064c <wtc6508_read>:

enum status_code wtc6508_read(uint8_t *status)
{
     64c:	b590      	push	{r4, r7, lr}
     64e:	b085      	sub	sp, #20
     650:	af00      	add	r7, sp, #0
     652:	6078      	str	r0, [r7, #4]
    enum status_code ret;
    
    ret = i2c_master_read_byte(&wtc6508_module, status);
     654:	230f      	movs	r3, #15
     656:	18fc      	adds	r4, r7, r3
     658:	687a      	ldr	r2, [r7, #4]
     65a:	4b09      	ldr	r3, [pc, #36]	; (680 <wtc6508_read+0x34>)
     65c:	0011      	movs	r1, r2
     65e:	0018      	movs	r0, r3
     660:	4b08      	ldr	r3, [pc, #32]	; (684 <wtc6508_read+0x38>)
     662:	4798      	blx	r3
     664:	0003      	movs	r3, r0
     666:	7023      	strb	r3, [r4, #0]
    i2c_master_send_stop(&wtc6508_module);
     668:	4b05      	ldr	r3, [pc, #20]	; (680 <wtc6508_read+0x34>)
     66a:	0018      	movs	r0, r3
     66c:	4b06      	ldr	r3, [pc, #24]	; (688 <wtc6508_read+0x3c>)
     66e:	4798      	blx	r3
    return ret;
     670:	230f      	movs	r3, #15
     672:	18fb      	adds	r3, r7, r3
     674:	781b      	ldrb	r3, [r3, #0]
}
     676:	0018      	movs	r0, r3
     678:	46bd      	mov	sp, r7
     67a:	b005      	add	sp, #20
     67c:	bd90      	pop	{r4, r7, pc}
     67e:	46c0      	nop			; (mov r8, r8)
     680:	20004440 	.word	0x20004440
     684:	000044d9 	.word	0x000044d9
     688:	000044a9 	.word	0x000044a9

0000068c <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     694:	687b      	ldr	r3, [r7, #4]
     696:	2b00      	cmp	r3, #0
     698:	d00c      	beq.n	6b4 <delay_cycles+0x28>
		SysTick->LOAD = n;
     69a:	4b08      	ldr	r3, [pc, #32]	; (6bc <delay_cycles+0x30>)
     69c:	687a      	ldr	r2, [r7, #4]
     69e:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     6a0:	4b06      	ldr	r3, [pc, #24]	; (6bc <delay_cycles+0x30>)
     6a2:	2200      	movs	r2, #0
     6a4:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     6a6:	46c0      	nop			; (mov r8, r8)
     6a8:	4b04      	ldr	r3, [pc, #16]	; (6bc <delay_cycles+0x30>)
     6aa:	681a      	ldr	r2, [r3, #0]
     6ac:	2380      	movs	r3, #128	; 0x80
     6ae:	025b      	lsls	r3, r3, #9
     6b0:	4013      	ands	r3, r2
     6b2:	d0f9      	beq.n	6a8 <delay_cycles+0x1c>
		};
	}
}
     6b4:	46c0      	nop			; (mov r8, r8)
     6b6:	46bd      	mov	sp, r7
     6b8:	b002      	add	sp, #8
     6ba:	bd80      	pop	{r7, pc}
     6bc:	e000e010 	.word	0xe000e010

000006c0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     6c0:	b580      	push	{r7, lr}
     6c2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     6c4:	2000      	movs	r0, #0
     6c6:	4b0f      	ldr	r3, [pc, #60]	; (704 <delay_init+0x44>)
     6c8:	4798      	blx	r3
     6ca:	0002      	movs	r2, r0
     6cc:	4b0e      	ldr	r3, [pc, #56]	; (708 <delay_init+0x48>)
     6ce:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     6d0:	4b0d      	ldr	r3, [pc, #52]	; (708 <delay_init+0x48>)
     6d2:	6818      	ldr	r0, [r3, #0]
     6d4:	4b0d      	ldr	r3, [pc, #52]	; (70c <delay_init+0x4c>)
     6d6:	22fa      	movs	r2, #250	; 0xfa
     6d8:	0091      	lsls	r1, r2, #2
     6da:	4798      	blx	r3
     6dc:	0003      	movs	r3, r0
     6de:	001a      	movs	r2, r3
     6e0:	4b09      	ldr	r3, [pc, #36]	; (708 <delay_init+0x48>)
     6e2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     6e4:	4b08      	ldr	r3, [pc, #32]	; (708 <delay_init+0x48>)
     6e6:	6818      	ldr	r0, [r3, #0]
     6e8:	4b08      	ldr	r3, [pc, #32]	; (70c <delay_init+0x4c>)
     6ea:	22fa      	movs	r2, #250	; 0xfa
     6ec:	0091      	lsls	r1, r2, #2
     6ee:	4798      	blx	r3
     6f0:	0003      	movs	r3, r0
     6f2:	001a      	movs	r2, r3
     6f4:	4b06      	ldr	r3, [pc, #24]	; (710 <delay_init+0x50>)
     6f6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     6f8:	4b06      	ldr	r3, [pc, #24]	; (714 <delay_init+0x54>)
     6fa:	2205      	movs	r2, #5
     6fc:	601a      	str	r2, [r3, #0]
}
     6fe:	46c0      	nop			; (mov r8, r8)
     700:	46bd      	mov	sp, r7
     702:	bd80      	pop	{r7, pc}
     704:	0000664d 	.word	0x0000664d
     708:	20000000 	.word	0x20000000
     70c:	00009e39 	.word	0x00009e39
     710:	20000004 	.word	0x20000004
     714:	e000e010 	.word	0xe000e010

00000718 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     718:	b580      	push	{r7, lr}
     71a:	b082      	sub	sp, #8
     71c:	af00      	add	r7, sp, #0
     71e:	6078      	str	r0, [r7, #4]
	while (n--) {
     720:	e004      	b.n	72c <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     722:	4b07      	ldr	r3, [pc, #28]	; (740 <delay_cycles_ms+0x28>)
     724:	681b      	ldr	r3, [r3, #0]
     726:	0018      	movs	r0, r3
     728:	4b06      	ldr	r3, [pc, #24]	; (744 <delay_cycles_ms+0x2c>)
     72a:	4798      	blx	r3
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     72c:	687b      	ldr	r3, [r7, #4]
     72e:	1e5a      	subs	r2, r3, #1
     730:	607a      	str	r2, [r7, #4]
     732:	2b00      	cmp	r3, #0
     734:	d1f5      	bne.n	722 <delay_cycles_ms+0xa>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     736:	46c0      	nop			; (mov r8, r8)
     738:	46bd      	mov	sp, r7
     73a:	b002      	add	sp, #8
     73c:	bd80      	pop	{r7, pc}
     73e:	46c0      	nop			; (mov r8, r8)
     740:	20000000 	.word	0x20000000
     744:	0000068d 	.word	0x0000068d

00000748 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
     748:	b580      	push	{r7, lr}
     74a:	b082      	sub	sp, #8
     74c:	af00      	add	r7, sp, #0
     74e:	6078      	str	r0, [r7, #4]
	while (u32TimeMsec--) {
     750:	e002      	b.n	758 <nm_bsp_sleep+0x10>
		delay_ms(1);
     752:	2001      	movs	r0, #1
     754:	4b05      	ldr	r3, [pc, #20]	; (76c <nm_bsp_sleep+0x24>)
     756:	4798      	blx	r3
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
	while (u32TimeMsec--) {
     758:	687b      	ldr	r3, [r7, #4]
     75a:	1e5a      	subs	r2, r3, #1
     75c:	607a      	str	r2, [r7, #4]
     75e:	2b00      	cmp	r3, #0
     760:	d1f7      	bne.n	752 <nm_bsp_sleep+0xa>
		delay_ms(1);
	}
}
     762:	46c0      	nop			; (mov r8, r8)
     764:	46bd      	mov	sp, r7
     766:	b002      	add	sp, #8
     768:	bd80      	pop	{r7, pc}
     76a:	46c0      	nop			; (mov r8, r8)
     76c:	00000719 	.word	0x00000719

00000770 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
     770:	b580      	push	{r7, lr}
     772:	b082      	sub	sp, #8
     774:	af00      	add	r7, sp, #0
     776:	0002      	movs	r2, r0
     778:	1dfb      	adds	r3, r7, #7
     77a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
     77c:	1dfb      	adds	r3, r7, #7
     77e:	781b      	ldrb	r3, [r3, #0]
     780:	2b00      	cmp	r3, #0
     782:	d004      	beq.n	78e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
     784:	2100      	movs	r1, #0
     786:	2009      	movs	r0, #9
     788:	4b05      	ldr	r3, [pc, #20]	; (7a0 <nm_bsp_interrupt_ctrl+0x30>)
     78a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     78c:	e003      	b.n	796 <nm_bsp_interrupt_ctrl+0x26>
{
	if (u8Enable) {
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
     78e:	2100      	movs	r1, #0
     790:	2009      	movs	r0, #9
     792:	4b04      	ldr	r3, [pc, #16]	; (7a4 <nm_bsp_interrupt_ctrl+0x34>)
     794:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
     796:	46c0      	nop			; (mov r8, r8)
     798:	46bd      	mov	sp, r7
     79a:	b002      	add	sp, #8
     79c:	bd80      	pop	{r7, pc}
     79e:	46c0      	nop			; (mov r8, r8)
     7a0:	000039a9 	.word	0x000039a9
     7a4:	000039f1 	.word	0x000039f1

000007a8 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
     7a8:	b580      	push	{r7, lr}
     7aa:	b084      	sub	sp, #16
     7ac:	af00      	add	r7, sp, #0
     7ae:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7b0:	687b      	ldr	r3, [r7, #4]
     7b2:	681b      	ldr	r3, [r3, #0]
     7b4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
     7b6:	68fb      	ldr	r3, [r7, #12]
     7b8:	7e1b      	ldrb	r3, [r3, #24]
     7ba:	b2db      	uxtb	r3, r3
     7bc:	001a      	movs	r2, r3
     7be:	2302      	movs	r3, #2
     7c0:	4013      	ands	r3, r2
     7c2:	1e5a      	subs	r2, r3, #1
     7c4:	4193      	sbcs	r3, r2
     7c6:	b2db      	uxtb	r3, r3
}
     7c8:	0018      	movs	r0, r3
     7ca:	46bd      	mov	sp, r7
     7cc:	b004      	add	sp, #16
     7ce:	bd80      	pop	{r7, pc}

000007d0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b084      	sub	sp, #16
     7d4:	af00      	add	r7, sp, #0
     7d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	681b      	ldr	r3, [r3, #0]
     7dc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     7de:	68fb      	ldr	r3, [r7, #12]
     7e0:	7e1b      	ldrb	r3, [r3, #24]
     7e2:	b2db      	uxtb	r3, r3
     7e4:	001a      	movs	r2, r3
     7e6:	2301      	movs	r3, #1
     7e8:	4013      	ands	r3, r2
     7ea:	1e5a      	subs	r2, r3, #1
     7ec:	4193      	sbcs	r3, r2
     7ee:	b2db      	uxtb	r3, r3
}
     7f0:	0018      	movs	r0, r3
     7f2:	46bd      	mov	sp, r7
     7f4:	b004      	add	sp, #16
     7f6:	bd80      	pop	{r7, pc}

000007f8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
     7f8:	b580      	push	{r7, lr}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     800:	687b      	ldr	r3, [r7, #4]
     802:	681b      	ldr	r3, [r3, #0]
     804:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     806:	68fb      	ldr	r3, [r7, #12]
     808:	7e1b      	ldrb	r3, [r3, #24]
     80a:	b2db      	uxtb	r3, r3
     80c:	001a      	movs	r2, r3
     80e:	2304      	movs	r3, #4
     810:	4013      	ands	r3, r2
     812:	1e5a      	subs	r2, r3, #1
     814:	4193      	sbcs	r3, r2
     816:	b2db      	uxtb	r3, r3
}
     818:	0018      	movs	r0, r3
     81a:	46bd      	mov	sp, r7
     81c:	b004      	add	sp, #16
     81e:	bd80      	pop	{r7, pc}

00000820 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
     820:	b580      	push	{r7, lr}
     822:	b084      	sub	sp, #16
     824:	af00      	add	r7, sp, #0
     826:	6078      	str	r0, [r7, #4]
     828:	000a      	movs	r2, r1
     82a:	1cbb      	adds	r3, r7, #2
     82c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     82e:	687b      	ldr	r3, [r7, #4]
     830:	681b      	ldr	r3, [r3, #0]
     832:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     834:	687b      	ldr	r3, [r7, #4]
     836:	0018      	movs	r0, r3
     838:	4b0a      	ldr	r3, [pc, #40]	; (864 <spi_write+0x44>)
     83a:	4798      	blx	r3
     83c:	0003      	movs	r3, r0
     83e:	001a      	movs	r2, r3
     840:	2301      	movs	r3, #1
     842:	4053      	eors	r3, r2
     844:	b2db      	uxtb	r3, r3
     846:	2b00      	cmp	r3, #0
     848:	d001      	beq.n	84e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
     84a:	2305      	movs	r3, #5
     84c:	e006      	b.n	85c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     84e:	1cbb      	adds	r3, r7, #2
     850:	881b      	ldrh	r3, [r3, #0]
     852:	05db      	lsls	r3, r3, #23
     854:	0dda      	lsrs	r2, r3, #23
     856:	68fb      	ldr	r3, [r7, #12]
     858:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
     85a:	2300      	movs	r3, #0
}
     85c:	0018      	movs	r0, r3
     85e:	46bd      	mov	sp, r7
     860:	b004      	add	sp, #16
     862:	bd80      	pop	{r7, pc}
     864:	000007d1 	.word	0x000007d1

00000868 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
     868:	b580      	push	{r7, lr}
     86a:	b084      	sub	sp, #16
     86c:	af00      	add	r7, sp, #0
     86e:	6078      	str	r0, [r7, #4]
     870:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     872:	687b      	ldr	r3, [r7, #4]
     874:	681b      	ldr	r3, [r3, #0]
     876:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     878:	687b      	ldr	r3, [r7, #4]
     87a:	0018      	movs	r0, r3
     87c:	4b1b      	ldr	r3, [pc, #108]	; (8ec <spi_read+0x84>)
     87e:	4798      	blx	r3
     880:	0003      	movs	r3, r0
     882:	001a      	movs	r2, r3
     884:	2301      	movs	r3, #1
     886:	4053      	eors	r3, r2
     888:	b2db      	uxtb	r3, r3
     88a:	2b00      	cmp	r3, #0
     88c:	d001      	beq.n	892 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
     88e:	2310      	movs	r3, #16
     890:	e027      	b.n	8e2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
     892:	230f      	movs	r3, #15
     894:	18fb      	adds	r3, r7, r3
     896:	2200      	movs	r2, #0
     898:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     89a:	68bb      	ldr	r3, [r7, #8]
     89c:	8b5b      	ldrh	r3, [r3, #26]
     89e:	b29b      	uxth	r3, r3
     8a0:	001a      	movs	r2, r3
     8a2:	2304      	movs	r3, #4
     8a4:	4013      	ands	r3, r2
     8a6:	d006      	beq.n	8b6 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
     8a8:	230f      	movs	r3, #15
     8aa:	18fb      	adds	r3, r7, r3
     8ac:	221e      	movs	r2, #30
     8ae:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     8b0:	68bb      	ldr	r3, [r7, #8]
     8b2:	2204      	movs	r2, #4
     8b4:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     8b6:	687b      	ldr	r3, [r7, #4]
     8b8:	799b      	ldrb	r3, [r3, #6]
     8ba:	2b01      	cmp	r3, #1
     8bc:	d108      	bne.n	8d0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     8be:	68bb      	ldr	r3, [r7, #8]
     8c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     8c2:	b29b      	uxth	r3, r3
     8c4:	05db      	lsls	r3, r3, #23
     8c6:	0ddb      	lsrs	r3, r3, #23
     8c8:	b29a      	uxth	r2, r3
     8ca:	683b      	ldr	r3, [r7, #0]
     8cc:	801a      	strh	r2, [r3, #0]
     8ce:	e005      	b.n	8dc <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     8d0:	68bb      	ldr	r3, [r7, #8]
     8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     8d4:	b2db      	uxtb	r3, r3
     8d6:	b29a      	uxth	r2, r3
     8d8:	683b      	ldr	r3, [r7, #0]
     8da:	801a      	strh	r2, [r3, #0]
	}

	return retval;
     8dc:	230f      	movs	r3, #15
     8de:	18fb      	adds	r3, r7, r3
     8e0:	781b      	ldrb	r3, [r3, #0]
}
     8e2:	0018      	movs	r0, r3
     8e4:	46bd      	mov	sp, r7
     8e6:	b004      	add	sp, #16
     8e8:	bd80      	pop	{r7, pc}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	000007f9 	.word	0x000007f9

000008f0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
     8f0:	b580      	push	{r7, lr}
     8f2:	b086      	sub	sp, #24
     8f4:	af00      	add	r7, sp, #0
     8f6:	60f8      	str	r0, [r7, #12]
     8f8:	60b9      	str	r1, [r7, #8]
     8fa:	1dbb      	adds	r3, r7, #6
     8fc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0;
     8fe:	2313      	movs	r3, #19
     900:	18fb      	adds	r3, r7, r3
     902:	2200      	movs	r2, #0
     904:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
     906:	2317      	movs	r3, #23
     908:	18fb      	adds	r3, r7, r3
     90a:	2200      	movs	r2, #0
     90c:	701a      	strb	r2, [r3, #0]
     90e:	2316      	movs	r3, #22
     910:	18fb      	adds	r3, r7, r3
     912:	2200      	movs	r2, #0
     914:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
     916:	2314      	movs	r3, #20
     918:	18fb      	adds	r3, r7, r3
     91a:	2200      	movs	r2, #0
     91c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
     91e:	2310      	movs	r3, #16
     920:	18fb      	adds	r3, r7, r3
     922:	2200      	movs	r2, #0
     924:	801a      	strh	r2, [r3, #0]

	if (!pu8Mosi) {
     926:	68fb      	ldr	r3, [r7, #12]
     928:	2b00      	cmp	r3, #0
     92a:	d107      	bne.n	93c <spi_rw+0x4c>
		pu8Mosi = &u8Dummy;
     92c:	2313      	movs	r3, #19
     92e:	18fb      	adds	r3, r7, r3
     930:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
     932:	2317      	movs	r3, #23
     934:	18fb      	adds	r3, r7, r3
     936:	2201      	movs	r2, #1
     938:	701a      	strb	r2, [r3, #0]
     93a:	e00d      	b.n	958 <spi_rw+0x68>
	}
	else if(!pu8Miso) {
     93c:	68bb      	ldr	r3, [r7, #8]
     93e:	2b00      	cmp	r3, #0
     940:	d107      	bne.n	952 <spi_rw+0x62>
		pu8Miso = &u8Dummy;
     942:	2313      	movs	r3, #19
     944:	18fb      	adds	r3, r7, r3
     946:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
     948:	2316      	movs	r3, #22
     94a:	18fb      	adds	r3, r7, r3
     94c:	2201      	movs	r2, #1
     94e:	701a      	strb	r2, [r3, #0]
     950:	e002      	b.n	958 <spi_rw+0x68>
	}
	else {
		return M2M_ERR_BUS_FAIL;
     952:	2306      	movs	r3, #6
     954:	425b      	negs	r3, r3
     956:	e06a      	b.n	a2e <spi_rw+0x13e>
	}

	spi_select_slave(&master, &slave_inst, true);
     958:	4937      	ldr	r1, [pc, #220]	; (a38 <spi_rw+0x148>)
     95a:	4b38      	ldr	r3, [pc, #224]	; (a3c <spi_rw+0x14c>)
     95c:	2201      	movs	r2, #1
     95e:	0018      	movs	r0, r3
     960:	4b37      	ldr	r3, [pc, #220]	; (a40 <spi_rw+0x150>)
     962:	4798      	blx	r3

	while (u16Sz) {
     964:	e04c      	b.n	a00 <spi_rw+0x110>
		txd_data = *pu8Mosi;
     966:	68fb      	ldr	r3, [r7, #12]
     968:	781a      	ldrb	r2, [r3, #0]
     96a:	2314      	movs	r3, #20
     96c:	18fb      	adds	r3, r7, r3
     96e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
     970:	46c0      	nop			; (mov r8, r8)
     972:	4b32      	ldr	r3, [pc, #200]	; (a3c <spi_rw+0x14c>)
     974:	0018      	movs	r0, r3
     976:	4b33      	ldr	r3, [pc, #204]	; (a44 <spi_rw+0x154>)
     978:	4798      	blx	r3
     97a:	0003      	movs	r3, r0
     97c:	001a      	movs	r2, r3
     97e:	2301      	movs	r3, #1
     980:	4053      	eors	r3, r2
     982:	b2db      	uxtb	r3, r3
     984:	2b00      	cmp	r3, #0
     986:	d1f4      	bne.n	972 <spi_rw+0x82>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
     988:	46c0      	nop			; (mov r8, r8)
     98a:	2314      	movs	r3, #20
     98c:	18fb      	adds	r3, r7, r3
     98e:	881a      	ldrh	r2, [r3, #0]
     990:	4b2a      	ldr	r3, [pc, #168]	; (a3c <spi_rw+0x14c>)
     992:	0011      	movs	r1, r2
     994:	0018      	movs	r0, r3
     996:	4b2c      	ldr	r3, [pc, #176]	; (a48 <spi_rw+0x158>)
     998:	4798      	blx	r3
     99a:	1e03      	subs	r3, r0, #0
     99c:	d1f5      	bne.n	98a <spi_rw+0x9a>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	4b26      	ldr	r3, [pc, #152]	; (a3c <spi_rw+0x14c>)
     9a2:	0018      	movs	r0, r3
     9a4:	4b29      	ldr	r3, [pc, #164]	; (a4c <spi_rw+0x15c>)
     9a6:	4798      	blx	r3
     9a8:	0003      	movs	r3, r0
     9aa:	001a      	movs	r2, r3
     9ac:	2301      	movs	r3, #1
     9ae:	4053      	eors	r3, r2
     9b0:	b2db      	uxtb	r3, r3
     9b2:	2b00      	cmp	r3, #0
     9b4:	d1f4      	bne.n	9a0 <spi_rw+0xb0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
     9b6:	46c0      	nop			; (mov r8, r8)
     9b8:	2310      	movs	r3, #16
     9ba:	18fa      	adds	r2, r7, r3
     9bc:	4b1f      	ldr	r3, [pc, #124]	; (a3c <spi_rw+0x14c>)
     9be:	0011      	movs	r1, r2
     9c0:	0018      	movs	r0, r3
     9c2:	4b23      	ldr	r3, [pc, #140]	; (a50 <spi_rw+0x160>)
     9c4:	4798      	blx	r3
     9c6:	1e03      	subs	r3, r0, #0
     9c8:	d1f6      	bne.n	9b8 <spi_rw+0xc8>
			;
		*pu8Miso = rxd_data;
     9ca:	2310      	movs	r3, #16
     9cc:	18fb      	adds	r3, r7, r3
     9ce:	881b      	ldrh	r3, [r3, #0]
     9d0:	b2da      	uxtb	r2, r3
     9d2:	68bb      	ldr	r3, [r7, #8]
     9d4:	701a      	strb	r2, [r3, #0]

		u16Sz--;
     9d6:	1dbb      	adds	r3, r7, #6
     9d8:	881a      	ldrh	r2, [r3, #0]
     9da:	1dbb      	adds	r3, r7, #6
     9dc:	3a01      	subs	r2, #1
     9de:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
     9e0:	2316      	movs	r3, #22
     9e2:	18fb      	adds	r3, r7, r3
     9e4:	781b      	ldrb	r3, [r3, #0]
     9e6:	2b00      	cmp	r3, #0
     9e8:	d102      	bne.n	9f0 <spi_rw+0x100>
			pu8Miso++;
     9ea:	68bb      	ldr	r3, [r7, #8]
     9ec:	3301      	adds	r3, #1
     9ee:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
     9f0:	2317      	movs	r3, #23
     9f2:	18fb      	adds	r3, r7, r3
     9f4:	781b      	ldrb	r3, [r3, #0]
     9f6:	2b00      	cmp	r3, #0
     9f8:	d102      	bne.n	a00 <spi_rw+0x110>
			pu8Mosi++;
     9fa:	68fb      	ldr	r3, [r7, #12]
     9fc:	3301      	adds	r3, #1
     9fe:	60fb      	str	r3, [r7, #12]
		return M2M_ERR_BUS_FAIL;
	}

	spi_select_slave(&master, &slave_inst, true);

	while (u16Sz) {
     a00:	1dbb      	adds	r3, r7, #6
     a02:	881b      	ldrh	r3, [r3, #0]
     a04:	2b00      	cmp	r3, #0
     a06:	d1ae      	bne.n	966 <spi_rw+0x76>
			pu8Miso++;
		if (!u8SkipMosi)
			pu8Mosi++;
	}

	while (!spi_is_write_complete(&master))
     a08:	46c0      	nop			; (mov r8, r8)
     a0a:	4b0c      	ldr	r3, [pc, #48]	; (a3c <spi_rw+0x14c>)
     a0c:	0018      	movs	r0, r3
     a0e:	4b11      	ldr	r3, [pc, #68]	; (a54 <spi_rw+0x164>)
     a10:	4798      	blx	r3
     a12:	0003      	movs	r3, r0
     a14:	001a      	movs	r2, r3
     a16:	2301      	movs	r3, #1
     a18:	4053      	eors	r3, r2
     a1a:	b2db      	uxtb	r3, r3
     a1c:	2b00      	cmp	r3, #0
     a1e:	d1f4      	bne.n	a0a <spi_rw+0x11a>
		;

	spi_select_slave(&master, &slave_inst, false);
     a20:	4905      	ldr	r1, [pc, #20]	; (a38 <spi_rw+0x148>)
     a22:	4b06      	ldr	r3, [pc, #24]	; (a3c <spi_rw+0x14c>)
     a24:	2200      	movs	r2, #0
     a26:	0018      	movs	r0, r3
     a28:	4b05      	ldr	r3, [pc, #20]	; (a40 <spi_rw+0x150>)
     a2a:	4798      	blx	r3

	return M2M_SUCCESS;
     a2c:	2300      	movs	r3, #0
}
     a2e:	0018      	movs	r0, r3
     a30:	46bd      	mov	sp, r7
     a32:	b006      	add	sp, #24
     a34:	bd80      	pop	{r7, pc}
     a36:	46c0      	nop			; (mov r8, r8)
     a38:	20004468 	.word	0x20004468
     a3c:	2000446c 	.word	0x2000446c
     a40:	000054f5 	.word	0x000054f5
     a44:	000007d1 	.word	0x000007d1
     a48:	00000821 	.word	0x00000821
     a4c:	000007f9 	.word	0x000007f9
     a50:	00000869 	.word	0x00000869
     a54:	000007a9 	.word	0x000007a9

00000a58 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
     a58:	b590      	push	{r4, r7, lr}
     a5a:	b085      	sub	sp, #20
     a5c:	af00      	add	r7, sp, #0
     a5e:	0002      	movs	r2, r0
     a60:	6039      	str	r1, [r7, #0]
     a62:	1dfb      	adds	r3, r7, #7
     a64:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
     a66:	230f      	movs	r3, #15
     a68:	18fb      	adds	r3, r7, r3
     a6a:	2200      	movs	r2, #0
     a6c:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
     a6e:	1dfb      	adds	r3, r7, #7
     a70:	781b      	ldrb	r3, [r3, #0]
     a72:	2b03      	cmp	r3, #3
     a74:	d10f      	bne.n	a96 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
     a76:	683b      	ldr	r3, [r7, #0]
     a78:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
     a7a:	68bb      	ldr	r3, [r7, #8]
     a7c:	6818      	ldr	r0, [r3, #0]
     a7e:	68bb      	ldr	r3, [r7, #8]
     a80:	6859      	ldr	r1, [r3, #4]
     a82:	68bb      	ldr	r3, [r7, #8]
     a84:	891b      	ldrh	r3, [r3, #8]
     a86:	220f      	movs	r2, #15
     a88:	18bc      	adds	r4, r7, r2
     a8a:	001a      	movs	r2, r3
     a8c:	4b0f      	ldr	r3, [pc, #60]	; (acc <nm_bus_ioctl+0x74>)
     a8e:	4798      	blx	r3
     a90:	0003      	movs	r3, r0
     a92:	7023      	strb	r3, [r4, #0]
		}
		break;
     a94:	e012      	b.n	abc <nm_bus_ioctl+0x64>
#endif
		default:
			s8Ret = -1;
     a96:	230f      	movs	r3, #15
     a98:	18fb      	adds	r3, r7, r3
     a9a:	22ff      	movs	r2, #255	; 0xff
     a9c:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
     a9e:	2386      	movs	r3, #134	; 0x86
     aa0:	005a      	lsls	r2, r3, #1
     aa2:	490b      	ldr	r1, [pc, #44]	; (ad0 <nm_bus_ioctl+0x78>)
     aa4:	4b0b      	ldr	r3, [pc, #44]	; (ad4 <nm_bus_ioctl+0x7c>)
     aa6:	0018      	movs	r0, r3
     aa8:	4b0b      	ldr	r3, [pc, #44]	; (ad8 <nm_bus_ioctl+0x80>)
     aaa:	4798      	blx	r3
     aac:	4b0b      	ldr	r3, [pc, #44]	; (adc <nm_bus_ioctl+0x84>)
     aae:	0018      	movs	r0, r3
     ab0:	4b0b      	ldr	r3, [pc, #44]	; (ae0 <nm_bus_ioctl+0x88>)
     ab2:	4798      	blx	r3
     ab4:	200d      	movs	r0, #13
     ab6:	4b0b      	ldr	r3, [pc, #44]	; (ae4 <nm_bus_ioctl+0x8c>)
     ab8:	4798      	blx	r3
			break;
     aba:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
     abc:	230f      	movs	r3, #15
     abe:	18fb      	adds	r3, r7, r3
     ac0:	781b      	ldrb	r3, [r3, #0]
     ac2:	b25b      	sxtb	r3, r3
}
     ac4:	0018      	movs	r0, r3
     ac6:	46bd      	mov	sp, r7
     ac8:	b005      	add	sp, #20
     aca:	bd90      	pop	{r4, r7, pc}
     acc:	000008f1 	.word	0x000008f1
     ad0:	0000d038 	.word	0x0000d038
     ad4:	0000d010 	.word	0x0000d010
     ad8:	0000c0d1 	.word	0x0000c0d1
     adc:	0000d024 	.word	0x0000d024
     ae0:	0000c1f1 	.word	0x0000c1f1
     ae4:	0000c105 	.word	0x0000c105

00000ae8 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
     ae8:	b580      	push	{r7, lr}
     aea:	b084      	sub	sp, #16
     aec:	af00      	add	r7, sp, #0
     aee:	60f8      	str	r0, [r7, #12]
     af0:	60b9      	str	r1, [r7, #8]
     af2:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
     af4:	687b      	ldr	r3, [r7, #4]
     af6:	2b00      	cmp	r3, #0
     af8:	d010      	beq.n	b1c <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
     afa:	68bb      	ldr	r3, [r7, #8]
     afc:	781a      	ldrb	r2, [r3, #0]
     afe:	68fb      	ldr	r3, [r7, #12]
     b00:	701a      	strb	r2, [r3, #0]
		pDst++;
     b02:	68fb      	ldr	r3, [r7, #12]
     b04:	3301      	adds	r3, #1
     b06:	60fb      	str	r3, [r7, #12]
		pSrc++;
     b08:	68bb      	ldr	r3, [r7, #8]
     b0a:	3301      	adds	r3, #1
     b0c:	60bb      	str	r3, [r7, #8]
	}while(--sz);
     b0e:	687b      	ldr	r3, [r7, #4]
     b10:	3b01      	subs	r3, #1
     b12:	607b      	str	r3, [r7, #4]
     b14:	687b      	ldr	r3, [r7, #4]
     b16:	2b00      	cmp	r3, #0
     b18:	d1ef      	bne.n	afa <m2m_memcpy+0x12>
     b1a:	e000      	b.n	b1e <m2m_memcpy+0x36>
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
	if(sz == 0) return;
     b1c:	46c0      	nop			; (mov r8, r8)
	{
		*pDst = *pSrc;
		pDst++;
		pSrc++;
	}while(--sz);
}
     b1e:	46bd      	mov	sp, r7
     b20:	b004      	add	sp, #16
     b22:	bd80      	pop	{r7, pc}

00000b24 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
     b24:	b580      	push	{r7, lr}
     b26:	b084      	sub	sp, #16
     b28:	af00      	add	r7, sp, #0
     b2a:	60f8      	str	r0, [r7, #12]
     b2c:	607a      	str	r2, [r7, #4]
     b2e:	230b      	movs	r3, #11
     b30:	18fb      	adds	r3, r7, r3
     b32:	1c0a      	adds	r2, r1, #0
     b34:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
     b36:	687b      	ldr	r3, [r7, #4]
     b38:	2b00      	cmp	r3, #0
     b3a:	d00e      	beq.n	b5a <m2m_memset+0x36>
	do
	{
		*pBuf = val;
     b3c:	68fb      	ldr	r3, [r7, #12]
     b3e:	220b      	movs	r2, #11
     b40:	18ba      	adds	r2, r7, r2
     b42:	7812      	ldrb	r2, [r2, #0]
     b44:	701a      	strb	r2, [r3, #0]
		pBuf++;
     b46:	68fb      	ldr	r3, [r7, #12]
     b48:	3301      	adds	r3, #1
     b4a:	60fb      	str	r3, [r7, #12]
	}while(--sz);
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	3b01      	subs	r3, #1
     b50:	607b      	str	r3, [r7, #4]
     b52:	687b      	ldr	r3, [r7, #4]
     b54:	2b00      	cmp	r3, #0
     b56:	d1f1      	bne.n	b3c <m2m_memset+0x18>
     b58:	e000      	b.n	b5c <m2m_memset+0x38>
	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
	if(sz == 0) return;
     b5a:	46c0      	nop			; (mov r8, r8)
	do
	{
		*pBuf = val;
		pBuf++;
	}while(--sz);
}
     b5c:	46bd      	mov	sp, r7
     b5e:	b004      	add	sp, #16
     b60:	bd80      	pop	{r7, pc}
     b62:	46c0      	nop			; (mov r8, r8)

00000b64 <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
     b64:	b580      	push	{r7, lr}
     b66:	b084      	sub	sp, #16
     b68:	af00      	add	r7, sp, #0
     b6a:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
     b6c:	230e      	movs	r3, #14
     b6e:	18fb      	adds	r3, r7, r3
     b70:	2200      	movs	r2, #0
     b72:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
     b74:	e009      	b.n	b8a <m2m_strlen+0x26>
	{
		u16StrLen ++;
     b76:	230e      	movs	r3, #14
     b78:	18fb      	adds	r3, r7, r3
     b7a:	881a      	ldrh	r2, [r3, #0]
     b7c:	230e      	movs	r3, #14
     b7e:	18fb      	adds	r3, r7, r3
     b80:	3201      	adds	r2, #1
     b82:	801a      	strh	r2, [r3, #0]
		pcStr++;
     b84:	687b      	ldr	r3, [r7, #4]
     b86:	3301      	adds	r3, #1
     b88:	607b      	str	r3, [r7, #4]
}

uint16 m2m_strlen(uint8 * pcStr)
{
	uint16	u16StrLen = 0;
	while(*pcStr)
     b8a:	687b      	ldr	r3, [r7, #4]
     b8c:	781b      	ldrb	r3, [r3, #0]
     b8e:	2b00      	cmp	r3, #0
     b90:	d1f1      	bne.n	b76 <m2m_strlen+0x12>
	{
		u16StrLen ++;
		pcStr++;
	}
	return u16StrLen;
     b92:	230e      	movs	r3, #14
     b94:	18fb      	adds	r3, r7, r3
     b96:	881b      	ldrh	r3, [r3, #0]
}
     b98:	0018      	movs	r0, r3
     b9a:	46bd      	mov	sp, r7
     b9c:	b004      	add	sp, #16
     b9e:	bd80      	pop	{r7, pc}

00000ba0 <hif_set_rx_done>:
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(0);
#endif
}
static sint8 hif_set_rx_done(void)
{
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b083      	sub	sp, #12
     ba4:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
     ba6:	1dfb      	adds	r3, r7, #7
     ba8:	2200      	movs	r2, #0
     baa:	701a      	strb	r2, [r3, #0]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
     bac:	2001      	movs	r0, #1
     bae:	4b13      	ldr	r3, [pc, #76]	; (bfc <hif_set_rx_done+0x5c>)
     bb0:	4798      	blx	r3
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
     bb2:	1dfc      	adds	r4, r7, #7
     bb4:	003b      	movs	r3, r7
     bb6:	4a12      	ldr	r2, [pc, #72]	; (c00 <hif_set_rx_done+0x60>)
     bb8:	0019      	movs	r1, r3
     bba:	0010      	movs	r0, r2
     bbc:	4b11      	ldr	r3, [pc, #68]	; (c04 <hif_set_rx_done+0x64>)
     bbe:	4798      	blx	r3
     bc0:	0003      	movs	r3, r0
     bc2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
     bc4:	1dfb      	adds	r3, r7, #7
     bc6:	781b      	ldrb	r3, [r3, #0]
     bc8:	b25b      	sxtb	r3, r3
     bca:	2b00      	cmp	r3, #0
     bcc:	d10d      	bne.n	bea <hif_set_rx_done+0x4a>
	//reg &= ~(1<<0);

	/* Set RX Done */
	reg |= (1<<1);
     bce:	683b      	ldr	r3, [r7, #0]
     bd0:	2202      	movs	r2, #2
     bd2:	4313      	orrs	r3, r2
     bd4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
     bd6:	683b      	ldr	r3, [r7, #0]
     bd8:	1dfc      	adds	r4, r7, #7
     bda:	4a09      	ldr	r2, [pc, #36]	; (c00 <hif_set_rx_done+0x60>)
     bdc:	0019      	movs	r1, r3
     bde:	0010      	movs	r0, r2
     be0:	4b09      	ldr	r3, [pc, #36]	; (c08 <hif_set_rx_done+0x68>)
     be2:	4798      	blx	r3
     be4:	0003      	movs	r3, r0
     be6:	7023      	strb	r3, [r4, #0]
     be8:	e000      	b.n	bec <hif_set_rx_done+0x4c>
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
	if(ret != M2M_SUCCESS)goto ERR1;
     bea:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
     bec:	1dfb      	adds	r3, r7, #7
     bee:	781b      	ldrb	r3, [r3, #0]
     bf0:	b25b      	sxtb	r3, r3

}
     bf2:	0018      	movs	r0, r3
     bf4:	46bd      	mov	sp, r7
     bf6:	b003      	add	sp, #12
     bf8:	bd90      	pop	{r4, r7, pc}
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	00000771 	.word	0x00000771
     c00:	00001070 	.word	0x00001070
     c04:	00001c05 	.word	0x00001c05
     c08:	00001c29 	.word	0x00001c29

00000c0c <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
     c0c:	b590      	push	{r4, r7, lr}
     c0e:	b083      	sub	sp, #12
     c10:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     c12:	1dfb      	adds	r3, r7, #7
     c14:	2200      	movs	r2, #0
     c16:	701a      	strb	r2, [r3, #0]
	if(gu8ChipSleep == 0)
     c18:	4b1c      	ldr	r3, [pc, #112]	; (c8c <hif_chip_wake+0x80>)
     c1a:	781b      	ldrb	r3, [r3, #0]
     c1c:	b2db      	uxtb	r3, r3
     c1e:	2b00      	cmp	r3, #0
     c20:	d121      	bne.n	c66 <hif_chip_wake+0x5a>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     c22:	4b1b      	ldr	r3, [pc, #108]	; (c90 <hif_chip_wake+0x84>)
     c24:	781b      	ldrb	r3, [r3, #0]
     c26:	b2db      	uxtb	r3, r3
     c28:	2b03      	cmp	r3, #3
     c2a:	d004      	beq.n	c36 <hif_chip_wake+0x2a>
     c2c:	4b18      	ldr	r3, [pc, #96]	; (c90 <hif_chip_wake+0x84>)
     c2e:	781b      	ldrb	r3, [r3, #0]
     c30:	b2db      	uxtb	r3, r3
     c32:	2b04      	cmp	r3, #4
     c34:	d117      	bne.n	c66 <hif_chip_wake+0x5a>
		{
			ret = nm_clkless_wake();
     c36:	1dfc      	adds	r4, r7, #7
     c38:	4b16      	ldr	r3, [pc, #88]	; (c94 <hif_chip_wake+0x88>)
     c3a:	4798      	blx	r3
     c3c:	0003      	movs	r3, r0
     c3e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     c40:	1dfb      	adds	r3, r7, #7
     c42:	781b      	ldrb	r3, [r3, #0]
     c44:	b25b      	sxtb	r3, r3
     c46:	2b00      	cmp	r3, #0
     c48:	d115      	bne.n	c76 <hif_chip_wake+0x6a>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
     c4a:	1dfc      	adds	r4, r7, #7
     c4c:	4a12      	ldr	r2, [pc, #72]	; (c98 <hif_chip_wake+0x8c>)
     c4e:	4b13      	ldr	r3, [pc, #76]	; (c9c <hif_chip_wake+0x90>)
     c50:	0011      	movs	r1, r2
     c52:	0018      	movs	r0, r3
     c54:	4b12      	ldr	r3, [pc, #72]	; (ca0 <hif_chip_wake+0x94>)
     c56:	4798      	blx	r3
     c58:	0003      	movs	r3, r0
     c5a:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     c5c:	1dfb      	adds	r3, r7, #7
     c5e:	781b      	ldrb	r3, [r3, #0]
     c60:	b25b      	sxtb	r3, r3
     c62:	2b00      	cmp	r3, #0
     c64:	d109      	bne.n	c7a <hif_chip_wake+0x6e>
		}
		else
		{
		}
	}
	gu8ChipSleep++;
     c66:	4b09      	ldr	r3, [pc, #36]	; (c8c <hif_chip_wake+0x80>)
     c68:	781b      	ldrb	r3, [r3, #0]
     c6a:	b2db      	uxtb	r3, r3
     c6c:	3301      	adds	r3, #1
     c6e:	b2da      	uxtb	r2, r3
     c70:	4b06      	ldr	r3, [pc, #24]	; (c8c <hif_chip_wake+0x80>)
     c72:	701a      	strb	r2, [r3, #0]
     c74:	e002      	b.n	c7c <hif_chip_wake+0x70>
	if(gu8ChipSleep == 0)
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			ret = nm_clkless_wake();
			if(ret != M2M_SUCCESS)goto ERR1;
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	e000      	b.n	c7c <hif_chip_wake+0x70>
			ret = nm_write_reg(WAKE_REG, WAKE_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
     c7a:	46c0      	nop			; (mov r8, r8)
		{
		}
	}
	gu8ChipSleep++;
ERR1:
	return ret;
     c7c:	1dfb      	adds	r3, r7, #7
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	b25b      	sxtb	r3, r3
}
     c82:	0018      	movs	r0, r3
     c84:	46bd      	mov	sp, r7
     c86:	b003      	add	sp, #12
     c88:	bd90      	pop	{r4, r7, pc}
     c8a:	46c0      	nop			; (mov r8, r8)
     c8c:	200000ad 	.word	0x200000ad
     c90:	200000ac 	.word	0x200000ac
     c94:	00001a29 	.word	0x00001a29
     c98:	00005678 	.word	0x00005678
     c9c:	00001074 	.word	0x00001074
     ca0:	00001c29 	.word	0x00001c29

00000ca4 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
     ca4:	b590      	push	{r4, r7, lr}
     ca6:	b083      	sub	sp, #12
     ca8:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
     caa:	1dfb      	adds	r3, r7, #7
     cac:	2200      	movs	r2, #0
     cae:	701a      	strb	r2, [r3, #0]

	if(gu8ChipSleep >= 1)
     cb0:	4b29      	ldr	r3, [pc, #164]	; (d58 <hif_chip_sleep+0xb4>)
     cb2:	781b      	ldrb	r3, [r3, #0]
     cb4:	b2db      	uxtb	r3, r3
     cb6:	2b00      	cmp	r3, #0
     cb8:	d006      	beq.n	cc8 <hif_chip_sleep+0x24>
	{
		gu8ChipSleep--;
     cba:	4b27      	ldr	r3, [pc, #156]	; (d58 <hif_chip_sleep+0xb4>)
     cbc:	781b      	ldrb	r3, [r3, #0]
     cbe:	b2db      	uxtb	r3, r3
     cc0:	3b01      	subs	r3, #1
     cc2:	b2da      	uxtb	r2, r3
     cc4:	4b24      	ldr	r3, [pc, #144]	; (d58 <hif_chip_sleep+0xb4>)
     cc6:	701a      	strb	r2, [r3, #0]
	}
	
	if(gu8ChipSleep == 0)
     cc8:	4b23      	ldr	r3, [pc, #140]	; (d58 <hif_chip_sleep+0xb4>)
     cca:	781b      	ldrb	r3, [r3, #0]
     ccc:	b2db      	uxtb	r3, r3
     cce:	2b00      	cmp	r3, #0
     cd0:	d13a      	bne.n	d48 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
     cd2:	4b22      	ldr	r3, [pc, #136]	; (d5c <hif_chip_sleep+0xb8>)
     cd4:	781b      	ldrb	r3, [r3, #0]
     cd6:	b2db      	uxtb	r3, r3
     cd8:	2b03      	cmp	r3, #3
     cda:	d004      	beq.n	ce6 <hif_chip_sleep+0x42>
     cdc:	4b1f      	ldr	r3, [pc, #124]	; (d5c <hif_chip_sleep+0xb8>)
     cde:	781b      	ldrb	r3, [r3, #0]
     ce0:	b2db      	uxtb	r3, r3
     ce2:	2b04      	cmp	r3, #4
     ce4:	d130      	bne.n	d48 <hif_chip_sleep+0xa4>
		{
			uint32 reg = 0;
     ce6:	2300      	movs	r3, #0
     ce8:	603b      	str	r3, [r7, #0]
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
     cea:	1dfc      	adds	r4, r7, #7
     cec:	4a1c      	ldr	r2, [pc, #112]	; (d60 <hif_chip_sleep+0xbc>)
     cee:	4b1d      	ldr	r3, [pc, #116]	; (d64 <hif_chip_sleep+0xc0>)
     cf0:	0011      	movs	r1, r2
     cf2:	0018      	movs	r0, r3
     cf4:	4b1c      	ldr	r3, [pc, #112]	; (d68 <hif_chip_sleep+0xc4>)
     cf6:	4798      	blx	r3
     cf8:	0003      	movs	r3, r0
     cfa:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     cfc:	1dfb      	adds	r3, r7, #7
     cfe:	781b      	ldrb	r3, [r3, #0]
     d00:	b25b      	sxtb	r3, r3
     d02:	2b00      	cmp	r3, #0
     d04:	d11d      	bne.n	d42 <hif_chip_sleep+0x9e>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
     d06:	1dfc      	adds	r4, r7, #7
     d08:	003b      	movs	r3, r7
     d0a:	0019      	movs	r1, r3
     d0c:	2001      	movs	r0, #1
     d0e:	4b17      	ldr	r3, [pc, #92]	; (d6c <hif_chip_sleep+0xc8>)
     d10:	4798      	blx	r3
     d12:	0003      	movs	r3, r0
     d14:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
     d16:	1dfb      	adds	r3, r7, #7
     d18:	781b      	ldrb	r3, [r3, #0]
     d1a:	b25b      	sxtb	r3, r3
     d1c:	2b00      	cmp	r3, #0
     d1e:	d112      	bne.n	d46 <hif_chip_sleep+0xa2>
			if(reg&0x2)
     d20:	683b      	ldr	r3, [r7, #0]
     d22:	2202      	movs	r2, #2
     d24:	4013      	ands	r3, r2
     d26:	d00f      	beq.n	d48 <hif_chip_sleep+0xa4>
			{
				reg &=~(1 << 1);
     d28:	683b      	ldr	r3, [r7, #0]
     d2a:	2202      	movs	r2, #2
     d2c:	4393      	bics	r3, r2
     d2e:	603b      	str	r3, [r7, #0]
				ret = nm_write_reg(0x1, reg);
     d30:	683b      	ldr	r3, [r7, #0]
     d32:	1dfc      	adds	r4, r7, #7
     d34:	0019      	movs	r1, r3
     d36:	2001      	movs	r0, #1
     d38:	4b0b      	ldr	r3, [pc, #44]	; (d68 <hif_chip_sleep+0xc4>)
     d3a:	4798      	blx	r3
     d3c:	0003      	movs	r3, r0
     d3e:	7023      	strb	r3, [r4, #0]
     d40:	e002      	b.n	d48 <hif_chip_sleep+0xa4>
	{
		if((gu8ChipMode == M2M_PS_DEEP_AUTOMATIC)||(gu8ChipMode == M2M_PS_MANUAL))
		{
			uint32 reg = 0;
			ret = nm_write_reg(WAKE_REG, SLEEP_VALUE);
			if(ret != M2M_SUCCESS)goto ERR1;
     d42:	46c0      	nop			; (mov r8, r8)
     d44:	e000      	b.n	d48 <hif_chip_sleep+0xa4>
			/* Clear bit 1 */
			ret = nm_read_reg_with_ret(0x1, &reg);
			if(ret != M2M_SUCCESS)goto ERR1;
     d46:	46c0      	nop			; (mov r8, r8)
		else
		{
		}
	}
ERR1:
	return ret;
     d48:	1dfb      	adds	r3, r7, #7
     d4a:	781b      	ldrb	r3, [r3, #0]
     d4c:	b25b      	sxtb	r3, r3
}
     d4e:	0018      	movs	r0, r3
     d50:	46bd      	mov	sp, r7
     d52:	b003      	add	sp, #12
     d54:	bd90      	pop	{r4, r7, pc}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	200000ad 	.word	0x200000ad
     d5c:	200000ac 	.word	0x200000ac
     d60:	00004321 	.word	0x00004321
     d64:	00001074 	.word	0x00001074
     d68:	00001c29 	.word	0x00001c29
     d6c:	00001c05 	.word	0x00001c05

00000d70 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
     d70:	b590      	push	{r4, r7, lr}
     d72:	b089      	sub	sp, #36	; 0x24
     d74:	af00      	add	r7, sp, #0
     d76:	0004      	movs	r4, r0
     d78:	0008      	movs	r0, r1
     d7a:	603a      	str	r2, [r7, #0]
     d7c:	0019      	movs	r1, r3
     d7e:	1dfb      	adds	r3, r7, #7
     d80:	1c22      	adds	r2, r4, #0
     d82:	701a      	strb	r2, [r3, #0]
     d84:	1dbb      	adds	r3, r7, #6
     d86:	1c02      	adds	r2, r0, #0
     d88:	701a      	strb	r2, [r3, #0]
     d8a:	1d3b      	adds	r3, r7, #4
     d8c:	1c0a      	adds	r2, r1, #0
     d8e:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
     d90:	231f      	movs	r3, #31
     d92:	18fb      	adds	r3, r7, r3
     d94:	22ff      	movs	r2, #255	; 0xff
     d96:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
     d98:	1dbb      	adds	r3, r7, #6
     d9a:	781b      	ldrb	r3, [r3, #0]
     d9c:	227f      	movs	r2, #127	; 0x7f
     d9e:	4013      	ands	r3, r2
     da0:	b2da      	uxtb	r2, r3
     da2:	2318      	movs	r3, #24
     da4:	18fb      	adds	r3, r7, r3
     da6:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
     da8:	2318      	movs	r3, #24
     daa:	18fb      	adds	r3, r7, r3
     dac:	1dfa      	adds	r2, r7, #7
     dae:	7812      	ldrb	r2, [r2, #0]
     db0:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
     db2:	2318      	movs	r3, #24
     db4:	18fb      	adds	r3, r7, r3
     db6:	2208      	movs	r2, #8
     db8:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
     dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     dbc:	2b00      	cmp	r3, #0
     dbe:	d011      	beq.n	de4 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
     dc0:	2318      	movs	r3, #24
     dc2:	18fb      	adds	r3, r7, r3
     dc4:	885b      	ldrh	r3, [r3, #2]
     dc6:	b29a      	uxth	r2, r3
     dc8:	2338      	movs	r3, #56	; 0x38
     dca:	18f9      	adds	r1, r7, r3
     dcc:	2334      	movs	r3, #52	; 0x34
     dce:	18fb      	adds	r3, r7, r3
     dd0:	8809      	ldrh	r1, [r1, #0]
     dd2:	881b      	ldrh	r3, [r3, #0]
     dd4:	18cb      	adds	r3, r1, r3
     dd6:	b29b      	uxth	r3, r3
     dd8:	18d3      	adds	r3, r2, r3
     dda:	b29a      	uxth	r2, r3
     ddc:	2318      	movs	r3, #24
     dde:	18fb      	adds	r3, r7, r3
     de0:	805a      	strh	r2, [r3, #2]
     de2:	e00a      	b.n	dfa <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
     de4:	2318      	movs	r3, #24
     de6:	18fb      	adds	r3, r7, r3
     de8:	885b      	ldrh	r3, [r3, #2]
     dea:	b29a      	uxth	r2, r3
     dec:	1d3b      	adds	r3, r7, #4
     dee:	881b      	ldrh	r3, [r3, #0]
     df0:	18d3      	adds	r3, r2, r3
     df2:	b29a      	uxth	r2, r3
     df4:	2318      	movs	r3, #24
     df6:	18fb      	adds	r3, r7, r3
     df8:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
     dfa:	231f      	movs	r3, #31
     dfc:	18fc      	adds	r4, r7, r3
     dfe:	4b9b      	ldr	r3, [pc, #620]	; (106c <hif_send+0x2fc>)
     e00:	4798      	blx	r3
     e02:	0003      	movs	r3, r0
     e04:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
     e06:	231f      	movs	r3, #31
     e08:	18fb      	adds	r3, r7, r3
     e0a:	781b      	ldrb	r3, [r3, #0]
     e0c:	b25b      	sxtb	r3, r3
     e0e:	2b00      	cmp	r3, #0
     e10:	d000      	beq.n	e14 <hif_send+0xa4>
     e12:	e103      	b.n	101c <hif_send+0x2ac>
	{
		volatile uint32 reg, dma_addr = 0;
     e14:	2300      	movs	r3, #0
     e16:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
     e18:	230e      	movs	r3, #14
     e1a:	18fb      	adds	r3, r7, r3
     e1c:	2200      	movs	r2, #0
     e1e:	801a      	strh	r2, [r3, #0]

		reg = 0UL;
     e20:	2300      	movs	r3, #0
     e22:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
     e24:	1dfb      	adds	r3, r7, #7
     e26:	781a      	ldrb	r2, [r3, #0]
     e28:	697b      	ldr	r3, [r7, #20]
     e2a:	4313      	orrs	r3, r2
     e2c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
     e2e:	1dbb      	adds	r3, r7, #6
     e30:	781b      	ldrb	r3, [r3, #0]
     e32:	021a      	lsls	r2, r3, #8
     e34:	697b      	ldr	r3, [r7, #20]
     e36:	4313      	orrs	r3, r2
     e38:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
     e3a:	2318      	movs	r3, #24
     e3c:	18fb      	adds	r3, r7, r3
     e3e:	885b      	ldrh	r3, [r3, #2]
     e40:	b29b      	uxth	r3, r3
     e42:	041a      	lsls	r2, r3, #16
     e44:	697b      	ldr	r3, [r7, #20]
     e46:	4313      	orrs	r3, r2
     e48:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
     e4a:	697b      	ldr	r3, [r7, #20]
     e4c:	221f      	movs	r2, #31
     e4e:	18bc      	adds	r4, r7, r2
     e50:	4a87      	ldr	r2, [pc, #540]	; (1070 <hif_send+0x300>)
     e52:	0019      	movs	r1, r3
     e54:	0010      	movs	r0, r2
     e56:	4b87      	ldr	r3, [pc, #540]	; (1074 <hif_send+0x304>)
     e58:	4798      	blx	r3
     e5a:	0003      	movs	r3, r0
     e5c:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     e5e:	231f      	movs	r3, #31
     e60:	18fb      	adds	r3, r7, r3
     e62:	781b      	ldrb	r3, [r3, #0]
     e64:	b25b      	sxtb	r3, r3
     e66:	2b00      	cmp	r3, #0
     e68:	d000      	beq.n	e6c <hif_send+0xfc>
     e6a:	e0ee      	b.n	104a <hif_send+0x2da>


		reg = 0;
     e6c:	2300      	movs	r3, #0
     e6e:	617b      	str	r3, [r7, #20]
		reg |= (1<<1);
     e70:	697b      	ldr	r3, [r7, #20]
     e72:	2202      	movs	r2, #2
     e74:	4313      	orrs	r3, r2
     e76:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
     e78:	697b      	ldr	r3, [r7, #20]
     e7a:	221f      	movs	r2, #31
     e7c:	18bc      	adds	r4, r7, r2
     e7e:	4a7e      	ldr	r2, [pc, #504]	; (1078 <hif_send+0x308>)
     e80:	0019      	movs	r1, r3
     e82:	0010      	movs	r0, r2
     e84:	4b7b      	ldr	r3, [pc, #492]	; (1074 <hif_send+0x304>)
     e86:	4798      	blx	r3
     e88:	0003      	movs	r3, r0
     e8a:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
     e8c:	231f      	movs	r3, #31
     e8e:	18fb      	adds	r3, r7, r3
     e90:	781b      	ldrb	r3, [r3, #0]
     e92:	b25b      	sxtb	r3, r3
     e94:	2b00      	cmp	r3, #0
     e96:	d000      	beq.n	e9a <hif_send+0x12a>
     e98:	e0d9      	b.n	104e <hif_send+0x2de>
		dma_addr = 0;
     e9a:	2300      	movs	r3, #0
     e9c:	613b      	str	r3, [r7, #16]

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     e9e:	230e      	movs	r3, #14
     ea0:	18fb      	adds	r3, r7, r3
     ea2:	2200      	movs	r2, #0
     ea4:	801a      	strh	r2, [r3, #0]
     ea6:	e031      	b.n	f0c <hif_send+0x19c>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
     ea8:	231f      	movs	r3, #31
     eaa:	18fc      	adds	r4, r7, r3
     eac:	2314      	movs	r3, #20
     eae:	18fb      	adds	r3, r7, r3
     eb0:	4a71      	ldr	r2, [pc, #452]	; (1078 <hif_send+0x308>)
     eb2:	0019      	movs	r1, r3
     eb4:	0010      	movs	r0, r2
     eb6:	4b71      	ldr	r3, [pc, #452]	; (107c <hif_send+0x30c>)
     eb8:	4798      	blx	r3
     eba:	0003      	movs	r3, r0
     ebc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
     ebe:	231f      	movs	r3, #31
     ec0:	18fb      	adds	r3, r7, r3
     ec2:	781b      	ldrb	r3, [r3, #0]
     ec4:	b25b      	sxtb	r3, r3
     ec6:	2b00      	cmp	r3, #0
     ec8:	d128      	bne.n	f1c <hif_send+0x1ac>
			if (!(reg & 0x2))
     eca:	697b      	ldr	r3, [r7, #20]
     ecc:	2202      	movs	r2, #2
     ece:	4013      	ands	r3, r2
     ed0:	d113      	bne.n	efa <hif_send+0x18a>
			{
				ret = nm_read_reg_with_ret(0x150400,(uint32 *)&dma_addr);
     ed2:	231f      	movs	r3, #31
     ed4:	18fc      	adds	r4, r7, r3
     ed6:	2310      	movs	r3, #16
     ed8:	18fb      	adds	r3, r7, r3
     eda:	4a69      	ldr	r2, [pc, #420]	; (1080 <hif_send+0x310>)
     edc:	0019      	movs	r1, r3
     ede:	0010      	movs	r0, r2
     ee0:	4b66      	ldr	r3, [pc, #408]	; (107c <hif_send+0x30c>)
     ee2:	4798      	blx	r3
     ee4:	0003      	movs	r3, r0
     ee6:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
     ee8:	231f      	movs	r3, #31
     eea:	18fb      	adds	r3, r7, r3
     eec:	781b      	ldrb	r3, [r3, #0]
     eee:	b25b      	sxtb	r3, r3
     ef0:	2b00      	cmp	r3, #0
     ef2:	d015      	beq.n	f20 <hif_send+0x1b0>
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
     ef4:	2300      	movs	r3, #0
     ef6:	613b      	str	r3, [r7, #16]
				}
				/*in case of success break */
				break;
     ef8:	e012      	b.n	f20 <hif_send+0x1b0>
		if(M2M_SUCCESS != ret) goto ERR1;
		dma_addr = 0;

		//nm_bsp_interrupt_ctrl(0);

		for(cnt = 0; cnt < 1000; cnt ++)
     efa:	230e      	movs	r3, #14
     efc:	18fb      	adds	r3, r7, r3
     efe:	881b      	ldrh	r3, [r3, #0]
     f00:	b29b      	uxth	r3, r3
     f02:	3301      	adds	r3, #1
     f04:	b29a      	uxth	r2, r3
     f06:	230e      	movs	r3, #14
     f08:	18fb      	adds	r3, r7, r3
     f0a:	801a      	strh	r2, [r3, #0]
     f0c:	230e      	movs	r3, #14
     f0e:	18fb      	adds	r3, r7, r3
     f10:	881b      	ldrh	r3, [r3, #0]
     f12:	b29b      	uxth	r3, r3
     f14:	4a5b      	ldr	r2, [pc, #364]	; (1084 <hif_send+0x314>)
     f16:	4293      	cmp	r3, r2
     f18:	d9c6      	bls.n	ea8 <hif_send+0x138>
     f1a:	e002      	b.n	f22 <hif_send+0x1b2>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
			if(ret != M2M_SUCCESS) break;
     f1c:	46c0      	nop			; (mov r8, r8)
     f1e:	e000      	b.n	f22 <hif_send+0x1b2>
				if(ret != M2M_SUCCESS) {
					/*in case of read error clear the dma address and return error*/
					dma_addr = 0;
				}
				/*in case of success break */
				break;
     f20:	46c0      	nop			; (mov r8, r8)
			}
		}
		//nm_bsp_interrupt_ctrl(1);

		if (dma_addr != 0)
     f22:	693b      	ldr	r3, [r7, #16]
     f24:	2b00      	cmp	r3, #0
     f26:	d100      	bne.n	f2a <hif_send+0x1ba>
     f28:	e073      	b.n	1012 <hif_send+0x2a2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
     f2a:	693b      	ldr	r3, [r7, #16]
     f2c:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
     f2e:	2318      	movs	r3, #24
     f30:	18fb      	adds	r3, r7, r3
     f32:	885b      	ldrh	r3, [r3, #2]
     f34:	b29a      	uxth	r2, r3
     f36:	2318      	movs	r3, #24
     f38:	18fb      	adds	r3, r7, r3
     f3a:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
     f3c:	68bb      	ldr	r3, [r7, #8]
     f3e:	221f      	movs	r2, #31
     f40:	18bc      	adds	r4, r7, r2
     f42:	2218      	movs	r2, #24
     f44:	18b9      	adds	r1, r7, r2
     f46:	2208      	movs	r2, #8
     f48:	0018      	movs	r0, r3
     f4a:	4b4f      	ldr	r3, [pc, #316]	; (1088 <hif_send+0x318>)
     f4c:	4798      	blx	r3
     f4e:	0003      	movs	r3, r0
     f50:	7023      	strb	r3, [r4, #0]
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
     f52:	231f      	movs	r3, #31
     f54:	18fb      	adds	r3, r7, r3
     f56:	781b      	ldrb	r3, [r3, #0]
     f58:	b25b      	sxtb	r3, r3
     f5a:	2b00      	cmp	r3, #0
     f5c:	d000      	beq.n	f60 <hif_send+0x1f0>
     f5e:	e078      	b.n	1052 <hif_send+0x2e2>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
     f60:	68bb      	ldr	r3, [r7, #8]
     f62:	3308      	adds	r3, #8
     f64:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
     f66:	683b      	ldr	r3, [r7, #0]
     f68:	2b00      	cmp	r3, #0
     f6a:	d015      	beq.n	f98 <hif_send+0x228>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
     f6c:	68b8      	ldr	r0, [r7, #8]
     f6e:	1d3b      	adds	r3, r7, #4
     f70:	881a      	ldrh	r2, [r3, #0]
     f72:	231f      	movs	r3, #31
     f74:	18fc      	adds	r4, r7, r3
     f76:	683b      	ldr	r3, [r7, #0]
     f78:	0019      	movs	r1, r3
     f7a:	4b43      	ldr	r3, [pc, #268]	; (1088 <hif_send+0x318>)
     f7c:	4798      	blx	r3
     f7e:	0003      	movs	r3, r0
     f80:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     f82:	231f      	movs	r3, #31
     f84:	18fb      	adds	r3, r7, r3
     f86:	781b      	ldrb	r3, [r3, #0]
     f88:	b25b      	sxtb	r3, r3
     f8a:	2b00      	cmp	r3, #0
     f8c:	d163      	bne.n	1056 <hif_send+0x2e6>
				u32CurrAddr += u16CtrlBufSize;
     f8e:	1d3b      	adds	r3, r7, #4
     f90:	881a      	ldrh	r2, [r3, #0]
     f92:	68bb      	ldr	r3, [r7, #8]
     f94:	18d3      	adds	r3, r2, r3
     f96:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
     f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     f9a:	2b00      	cmp	r3, #0
     f9c:	d021      	beq.n	fe2 <hif_send+0x272>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
     f9e:	2338      	movs	r3, #56	; 0x38
     fa0:	18fb      	adds	r3, r7, r3
     fa2:	881a      	ldrh	r2, [r3, #0]
     fa4:	1d3b      	adds	r3, r7, #4
     fa6:	881b      	ldrh	r3, [r3, #0]
     fa8:	1ad3      	subs	r3, r2, r3
     faa:	001a      	movs	r2, r3
     fac:	68bb      	ldr	r3, [r7, #8]
     fae:	18d3      	adds	r3, r2, r3
     fb0:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
     fb2:	68b8      	ldr	r0, [r7, #8]
     fb4:	2334      	movs	r3, #52	; 0x34
     fb6:	18fb      	adds	r3, r7, r3
     fb8:	881a      	ldrh	r2, [r3, #0]
     fba:	231f      	movs	r3, #31
     fbc:	18fc      	adds	r4, r7, r3
     fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     fc0:	0019      	movs	r1, r3
     fc2:	4b31      	ldr	r3, [pc, #196]	; (1088 <hif_send+0x318>)
     fc4:	4798      	blx	r3
     fc6:	0003      	movs	r3, r0
     fc8:	7023      	strb	r3, [r4, #0]
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
     fca:	231f      	movs	r3, #31
     fcc:	18fb      	adds	r3, r7, r3
     fce:	781b      	ldrb	r3, [r3, #0]
     fd0:	b25b      	sxtb	r3, r3
     fd2:	2b00      	cmp	r3, #0
     fd4:	d141      	bne.n	105a <hif_send+0x2ea>
				u32CurrAddr += u16DataSize;
     fd6:	2334      	movs	r3, #52	; 0x34
     fd8:	18fb      	adds	r3, r7, r3
     fda:	881a      	ldrh	r2, [r3, #0]
     fdc:	68bb      	ldr	r3, [r7, #8]
     fde:	18d3      	adds	r3, r2, r3
     fe0:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
     fe2:	693b      	ldr	r3, [r7, #16]
     fe4:	009b      	lsls	r3, r3, #2
     fe6:	617b      	str	r3, [r7, #20]
			reg |= (1 << 1);
     fe8:	697b      	ldr	r3, [r7, #20]
     fea:	2202      	movs	r2, #2
     fec:	4313      	orrs	r3, r2
     fee:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
     ff0:	697b      	ldr	r3, [r7, #20]
     ff2:	221f      	movs	r2, #31
     ff4:	18bc      	adds	r4, r7, r2
     ff6:	4a25      	ldr	r2, [pc, #148]	; (108c <hif_send+0x31c>)
     ff8:	0019      	movs	r1, r3
     ffa:	0010      	movs	r0, r2
     ffc:	4b1d      	ldr	r3, [pc, #116]	; (1074 <hif_send+0x304>)
     ffe:	4798      	blx	r3
    1000:	0003      	movs	r3, r0
    1002:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
    1004:	231f      	movs	r3, #31
    1006:	18fb      	adds	r3, r7, r3
    1008:	781b      	ldrb	r3, [r3, #0]
    100a:	b25b      	sxtb	r3, r3
    100c:	2b00      	cmp	r3, #0
    100e:	d015      	beq.n	103c <hif_send+0x2cc>
    1010:	e024      	b.n	105c <hif_send+0x2ec>
		}
		else
		{
			M2M_DBG("Failed to alloc rx size\r");
			ret =  M2M_ERR_MEM_ALLOC;
    1012:	231f      	movs	r3, #31
    1014:	18fb      	adds	r3, r7, r3
    1016:	22fd      	movs	r2, #253	; 0xfd
    1018:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    101a:	e01f      	b.n	105c <hif_send+0x2ec>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
    101c:	23a0      	movs	r3, #160	; 0xa0
    101e:	33ff      	adds	r3, #255	; 0xff
    1020:	001a      	movs	r2, r3
    1022:	491b      	ldr	r1, [pc, #108]	; (1090 <hif_send+0x320>)
    1024:	4b1b      	ldr	r3, [pc, #108]	; (1094 <hif_send+0x324>)
    1026:	0018      	movs	r0, r3
    1028:	4b1b      	ldr	r3, [pc, #108]	; (1098 <hif_send+0x328>)
    102a:	4798      	blx	r3
    102c:	4b1b      	ldr	r3, [pc, #108]	; (109c <hif_send+0x32c>)
    102e:	0018      	movs	r0, r3
    1030:	4b1b      	ldr	r3, [pc, #108]	; (10a0 <hif_send+0x330>)
    1032:	4798      	blx	r3
    1034:	200d      	movs	r0, #13
    1036:	4b1b      	ldr	r3, [pc, #108]	; (10a4 <hif_send+0x334>)
    1038:	4798      	blx	r3
		goto ERR1;
    103a:	e00f      	b.n	105c <hif_send+0x2ec>
	}
	ret = hif_chip_sleep();
    103c:	231f      	movs	r3, #31
    103e:	18fc      	adds	r4, r7, r3
    1040:	4b19      	ldr	r3, [pc, #100]	; (10a8 <hif_send+0x338>)
    1042:	4798      	blx	r3
    1044:	0003      	movs	r3, r0
    1046:	7023      	strb	r3, [r4, #0]
    1048:	e008      	b.n	105c <hif_send+0x2ec>
		reg = 0UL;
		reg |= (uint32)u8Gid;
		reg |= ((uint32)u8Opcode<<8);
		reg |= ((uint32)strHif.u16Length<<16);
		ret = nm_write_reg(NMI_STATE_REG,reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    104a:	46c0      	nop			; (mov r8, r8)
    104c:	e006      	b.n	105c <hif_send+0x2ec>


		reg = 0;
		reg |= (1<<1);
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
    104e:	46c0      	nop			; (mov r8, r8)
    1050:	e004      	b.n	105c <hif_send+0x2ec>
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
		#ifdef CONF_WINC_USE_I2C
			nm_bsp_sleep(1);
		#endif
			if(M2M_SUCCESS != ret) goto ERR1;
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	e002      	b.n	105c <hif_send+0x2ec>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
			#ifdef CONF_WINC_USE_I2C
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	e000      	b.n	105c <hif_send+0x2ec>
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
			#ifdef CONF_WINC_USE_I2C	
				nm_bsp_sleep(1);
			#endif
				if(M2M_SUCCESS != ret) goto ERR1;
    105a:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}
	ret = hif_chip_sleep();

ERR1:
	return ret;
    105c:	231f      	movs	r3, #31
    105e:	18fb      	adds	r3, r7, r3
    1060:	781b      	ldrb	r3, [r3, #0]
    1062:	b25b      	sxtb	r3, r3
}
    1064:	0018      	movs	r0, r3
    1066:	46bd      	mov	sp, r7
    1068:	b009      	add	sp, #36	; 0x24
    106a:	bd90      	pop	{r4, r7, pc}
    106c:	00000c0d 	.word	0x00000c0d
    1070:	0000108c 	.word	0x0000108c
    1074:	00001c29 	.word	0x00001c29
    1078:	00001078 	.word	0x00001078
    107c:	00001c05 	.word	0x00001c05
    1080:	00150400 	.word	0x00150400
    1084:	000003e7 	.word	0x000003e7
    1088:	00001d71 	.word	0x00001d71
    108c:	0000106c 	.word	0x0000106c
    1090:	0000d288 	.word	0x0000d288
    1094:	0000d048 	.word	0x0000d048
    1098:	0000c0d1 	.word	0x0000c0d1
    109c:	0000d05c 	.word	0x0000d05c
    10a0:	0000c1f1 	.word	0x0000c1f1
    10a4:	0000c105 	.word	0x0000c105
    10a8:	00000ca5 	.word	0x00000ca5

000010ac <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
    10ac:	b590      	push	{r4, r7, lr}
    10ae:	b087      	sub	sp, #28
    10b0:	af02      	add	r7, sp, #8
	sint8 ret = M2M_ERR_BUS_FAIL;
    10b2:	230f      	movs	r3, #15
    10b4:	18fb      	adds	r3, r7, r3
    10b6:	22fa      	movs	r2, #250	; 0xfa
    10b8:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = hif_chip_wake();
    10ba:	230f      	movs	r3, #15
    10bc:	18fc      	adds	r4, r7, r3
    10be:	4bda      	ldr	r3, [pc, #872]	; (1428 <hif_isr+0x37c>)
    10c0:	4798      	blx	r3
    10c2:	0003      	movs	r3, r0
    10c4:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
    10c6:	230f      	movs	r3, #15
    10c8:	18fb      	adds	r3, r7, r3
    10ca:	781b      	ldrb	r3, [r3, #0]
    10cc:	b25b      	sxtb	r3, r3
    10ce:	2b00      	cmp	r3, #0
    10d0:	d000      	beq.n	10d4 <hif_isr+0x28>
    10d2:	e192      	b.n	13fa <hif_isr+0x34e>
	{
		ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
    10d4:	230f      	movs	r3, #15
    10d6:	18fc      	adds	r4, r7, r3
    10d8:	2308      	movs	r3, #8
    10da:	18fb      	adds	r3, r7, r3
    10dc:	4ad3      	ldr	r2, [pc, #844]	; (142c <hif_isr+0x380>)
    10de:	0019      	movs	r1, r3
    10e0:	0010      	movs	r0, r2
    10e2:	4bd3      	ldr	r3, [pc, #844]	; (1430 <hif_isr+0x384>)
    10e4:	4798      	blx	r3
    10e6:	0003      	movs	r3, r0
    10e8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS == ret)
    10ea:	230f      	movs	r3, #15
    10ec:	18fb      	adds	r3, r7, r3
    10ee:	781b      	ldrb	r3, [r3, #0]
    10f0:	b25b      	sxtb	r3, r3
    10f2:	2b00      	cmp	r3, #0
    10f4:	d000      	beq.n	10f8 <hif_isr+0x4c>
    10f6:	e172      	b.n	13de <hif_isr+0x332>
		{
			if(reg & 0x1)	/* New interrupt has been received */
    10f8:	68bb      	ldr	r3, [r7, #8]
    10fa:	2201      	movs	r2, #1
    10fc:	4013      	ands	r3, r2
    10fe:	d100      	bne.n	1102 <hif_isr+0x56>
    1100:	e15c      	b.n	13bc <hif_isr+0x310>
			{
				uint16 size;

				nm_bsp_interrupt_ctrl(0);
    1102:	2000      	movs	r0, #0
    1104:	4bcb      	ldr	r3, [pc, #812]	; (1434 <hif_isr+0x388>)
    1106:	4798      	blx	r3
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
    1108:	68bb      	ldr	r3, [r7, #8]
    110a:	2201      	movs	r2, #1
    110c:	4393      	bics	r3, r2
    110e:	60bb      	str	r3, [r7, #8]
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
    1110:	68bb      	ldr	r3, [r7, #8]
    1112:	220f      	movs	r2, #15
    1114:	18bc      	adds	r4, r7, r2
    1116:	4ac5      	ldr	r2, [pc, #788]	; (142c <hif_isr+0x380>)
    1118:	0019      	movs	r1, r3
    111a:	0010      	movs	r0, r2
    111c:	4bc6      	ldr	r3, [pc, #792]	; (1438 <hif_isr+0x38c>)
    111e:	4798      	blx	r3
    1120:	0003      	movs	r3, r0
    1122:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS)goto ERR1;
    1124:	230f      	movs	r3, #15
    1126:	18fb      	adds	r3, r7, r3
    1128:	781b      	ldrb	r3, [r3, #0]
    112a:	b25b      	sxtb	r3, r3
    112c:	2b00      	cmp	r3, #0
    112e:	d000      	beq.n	1132 <hif_isr+0x86>
    1130:	e1bc      	b.n	14ac <hif_isr+0x400>
				gu8HifSizeDone = 0;
    1132:	4bc2      	ldr	r3, [pc, #776]	; (143c <hif_isr+0x390>)
    1134:	2200      	movs	r2, #0
    1136:	701a      	strb	r2, [r3, #0]
				size = (uint16)((reg >> 2) & 0xfff);
    1138:	68bb      	ldr	r3, [r7, #8]
    113a:	089b      	lsrs	r3, r3, #2
    113c:	b29a      	uxth	r2, r3
    113e:	230c      	movs	r3, #12
    1140:	18fb      	adds	r3, r7, r3
    1142:	0512      	lsls	r2, r2, #20
    1144:	0d12      	lsrs	r2, r2, #20
    1146:	801a      	strh	r2, [r3, #0]
				if (size > 0) {
    1148:	230c      	movs	r3, #12
    114a:	18fb      	adds	r3, r7, r3
    114c:	881b      	ldrh	r3, [r3, #0]
    114e:	2b00      	cmp	r3, #0
    1150:	d100      	bne.n	1154 <hif_isr+0xa8>
    1152:	e121      	b.n	1398 <hif_isr+0x2ec>
					uint32 address = 0;
    1154:	2300      	movs	r3, #0
    1156:	603b      	str	r3, [r7, #0]
					/**
					start bus transfer
					**/
					ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
    1158:	230f      	movs	r3, #15
    115a:	18fc      	adds	r4, r7, r3
    115c:	003b      	movs	r3, r7
    115e:	4ab8      	ldr	r2, [pc, #736]	; (1440 <hif_isr+0x394>)
    1160:	0019      	movs	r1, r3
    1162:	0010      	movs	r0, r2
    1164:	4bb2      	ldr	r3, [pc, #712]	; (1430 <hif_isr+0x384>)
    1166:	4798      	blx	r3
    1168:	0003      	movs	r3, r0
    116a:	7023      	strb	r3, [r4, #0]
					if(M2M_SUCCESS != ret)
    116c:	230f      	movs	r3, #15
    116e:	18fb      	adds	r3, r7, r3
    1170:	781b      	ldrb	r3, [r3, #0]
    1172:	b25b      	sxtb	r3, r3
    1174:	2b00      	cmp	r3, #0
    1176:	d011      	beq.n	119c <hif_isr+0xf0>
					{
						M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
    1178:	23e7      	movs	r3, #231	; 0xe7
    117a:	005a      	lsls	r2, r3, #1
    117c:	49b1      	ldr	r1, [pc, #708]	; (1444 <hif_isr+0x398>)
    117e:	4bb2      	ldr	r3, [pc, #712]	; (1448 <hif_isr+0x39c>)
    1180:	0018      	movs	r0, r3
    1182:	4bb2      	ldr	r3, [pc, #712]	; (144c <hif_isr+0x3a0>)
    1184:	4798      	blx	r3
    1186:	4bb2      	ldr	r3, [pc, #712]	; (1450 <hif_isr+0x3a4>)
    1188:	0018      	movs	r0, r3
    118a:	4bb2      	ldr	r3, [pc, #712]	; (1454 <hif_isr+0x3a8>)
    118c:	4798      	blx	r3
    118e:	200d      	movs	r0, #13
    1190:	4bb1      	ldr	r3, [pc, #708]	; (1458 <hif_isr+0x3ac>)
    1192:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    1194:	2001      	movs	r0, #1
    1196:	4ba7      	ldr	r3, [pc, #668]	; (1434 <hif_isr+0x388>)
    1198:	4798      	blx	r3
						goto ERR1;
    119a:	e188      	b.n	14ae <hif_isr+0x402>
					}
					ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
    119c:	683b      	ldr	r3, [r7, #0]
    119e:	220f      	movs	r2, #15
    11a0:	18bc      	adds	r4, r7, r2
    11a2:	1d39      	adds	r1, r7, #4
    11a4:	2204      	movs	r2, #4
    11a6:	0018      	movs	r0, r3
    11a8:	4bac      	ldr	r3, [pc, #688]	; (145c <hif_isr+0x3b0>)
    11aa:	4798      	blx	r3
    11ac:	0003      	movs	r3, r0
    11ae:	7023      	strb	r3, [r4, #0]
					strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
    11b0:	1d3b      	adds	r3, r7, #4
    11b2:	885b      	ldrh	r3, [r3, #2]
    11b4:	b29a      	uxth	r2, r3
    11b6:	1d3b      	adds	r3, r7, #4
    11b8:	805a      	strh	r2, [r3, #2]
					if(M2M_SUCCESS != ret)
    11ba:	230f      	movs	r3, #15
    11bc:	18fb      	adds	r3, r7, r3
    11be:	781b      	ldrb	r3, [r3, #0]
    11c0:	b25b      	sxtb	r3, r3
    11c2:	2b00      	cmp	r3, #0
    11c4:	d011      	beq.n	11ea <hif_isr+0x13e>
					{
						M2M_ERR("(hif) address bus fail\n");
    11c6:	23eb      	movs	r3, #235	; 0xeb
    11c8:	005a      	lsls	r2, r3, #1
    11ca:	499e      	ldr	r1, [pc, #632]	; (1444 <hif_isr+0x398>)
    11cc:	4b9e      	ldr	r3, [pc, #632]	; (1448 <hif_isr+0x39c>)
    11ce:	0018      	movs	r0, r3
    11d0:	4b9e      	ldr	r3, [pc, #632]	; (144c <hif_isr+0x3a0>)
    11d2:	4798      	blx	r3
    11d4:	4ba2      	ldr	r3, [pc, #648]	; (1460 <hif_isr+0x3b4>)
    11d6:	0018      	movs	r0, r3
    11d8:	4b9e      	ldr	r3, [pc, #632]	; (1454 <hif_isr+0x3a8>)
    11da:	4798      	blx	r3
    11dc:	200d      	movs	r0, #13
    11de:	4b9e      	ldr	r3, [pc, #632]	; (1458 <hif_isr+0x3ac>)
    11e0:	4798      	blx	r3
						nm_bsp_interrupt_ctrl(1);
    11e2:	2001      	movs	r0, #1
    11e4:	4b93      	ldr	r3, [pc, #588]	; (1434 <hif_isr+0x388>)
    11e6:	4798      	blx	r3
						goto ERR1;
    11e8:	e161      	b.n	14ae <hif_isr+0x402>
					}
					if(strHif.u16Length != size)
    11ea:	1d3b      	adds	r3, r7, #4
    11ec:	885b      	ldrh	r3, [r3, #2]
    11ee:	b29b      	uxth	r3, r3
    11f0:	220c      	movs	r2, #12
    11f2:	18ba      	adds	r2, r7, r2
    11f4:	8812      	ldrh	r2, [r2, #0]
    11f6:	429a      	cmp	r2, r3
    11f8:	d02e      	beq.n	1258 <hif_isr+0x1ac>
					{
						if((size - strHif.u16Length) > 4)
    11fa:	230c      	movs	r3, #12
    11fc:	18fb      	adds	r3, r7, r3
    11fe:	881b      	ldrh	r3, [r3, #0]
    1200:	1d3a      	adds	r2, r7, #4
    1202:	8852      	ldrh	r2, [r2, #2]
    1204:	b292      	uxth	r2, r2
    1206:	1a9b      	subs	r3, r3, r2
    1208:	2b04      	cmp	r3, #4
    120a:	dd25      	ble.n	1258 <hif_isr+0x1ac>
						{
							M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
    120c:	23e0      	movs	r3, #224	; 0xe0
    120e:	33ff      	adds	r3, #255	; 0xff
    1210:	001a      	movs	r2, r3
    1212:	498c      	ldr	r1, [pc, #560]	; (1444 <hif_isr+0x398>)
    1214:	4b8c      	ldr	r3, [pc, #560]	; (1448 <hif_isr+0x39c>)
    1216:	0018      	movs	r0, r3
    1218:	4b8c      	ldr	r3, [pc, #560]	; (144c <hif_isr+0x3a0>)
    121a:	4798      	blx	r3
    121c:	230c      	movs	r3, #12
    121e:	18fb      	adds	r3, r7, r3
    1220:	8819      	ldrh	r1, [r3, #0]
    1222:	1d3b      	adds	r3, r7, #4
    1224:	885b      	ldrh	r3, [r3, #2]
    1226:	b29b      	uxth	r3, r3
    1228:	001a      	movs	r2, r3
    122a:	1d3b      	adds	r3, r7, #4
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	b2db      	uxtb	r3, r3
    1230:	001c      	movs	r4, r3
    1232:	1d3b      	adds	r3, r7, #4
    1234:	785b      	ldrb	r3, [r3, #1]
    1236:	b2db      	uxtb	r3, r3
    1238:	488a      	ldr	r0, [pc, #552]	; (1464 <hif_isr+0x3b8>)
    123a:	9300      	str	r3, [sp, #0]
    123c:	0023      	movs	r3, r4
    123e:	4c83      	ldr	r4, [pc, #524]	; (144c <hif_isr+0x3a0>)
    1240:	47a0      	blx	r4
    1242:	200d      	movs	r0, #13
    1244:	4b84      	ldr	r3, [pc, #528]	; (1458 <hif_isr+0x3ac>)
    1246:	4798      	blx	r3
								size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
							nm_bsp_interrupt_ctrl(1);
    1248:	2001      	movs	r0, #1
    124a:	4b7a      	ldr	r3, [pc, #488]	; (1434 <hif_isr+0x388>)
    124c:	4798      	blx	r3
							ret = M2M_ERR_BUS_FAIL;
    124e:	230f      	movs	r3, #15
    1250:	18fb      	adds	r3, r7, r3
    1252:	22fa      	movs	r2, #250	; 0xfa
    1254:	701a      	strb	r2, [r3, #0]
							goto ERR1;
    1256:	e12a      	b.n	14ae <hif_isr+0x402>
						}
					}

					if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
    1258:	1d3b      	adds	r3, r7, #4
    125a:	781b      	ldrb	r3, [r3, #0]
    125c:	b2db      	uxtb	r3, r3
    125e:	2b01      	cmp	r3, #1
    1260:	d112      	bne.n	1288 <hif_isr+0x1dc>
					{
						if(pfWifiCb)
    1262:	4b81      	ldr	r3, [pc, #516]	; (1468 <hif_isr+0x3bc>)
    1264:	681b      	ldr	r3, [r3, #0]
    1266:	2b00      	cmp	r3, #0
    1268:	d100      	bne.n	126c <hif_isr+0x1c0>
    126a:	e07c      	b.n	1366 <hif_isr+0x2ba>
							pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    126c:	4b7e      	ldr	r3, [pc, #504]	; (1468 <hif_isr+0x3bc>)
    126e:	681b      	ldr	r3, [r3, #0]
    1270:	1d3a      	adds	r2, r7, #4
    1272:	7852      	ldrb	r2, [r2, #1]
    1274:	b2d0      	uxtb	r0, r2
    1276:	1d3a      	adds	r2, r7, #4
    1278:	8852      	ldrh	r2, [r2, #2]
    127a:	b292      	uxth	r2, r2
    127c:	3a08      	subs	r2, #8
    127e:	b291      	uxth	r1, r2
    1280:	683a      	ldr	r2, [r7, #0]
    1282:	3208      	adds	r2, #8
    1284:	4798      	blx	r3
    1286:	e06e      	b.n	1366 <hif_isr+0x2ba>

					}
					else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
    1288:	1d3b      	adds	r3, r7, #4
    128a:	781b      	ldrb	r3, [r3, #0]
    128c:	b2db      	uxtb	r3, r3
    128e:	2b02      	cmp	r3, #2
    1290:	d111      	bne.n	12b6 <hif_isr+0x20a>
					{
						if(pfIpCb)
    1292:	4b76      	ldr	r3, [pc, #472]	; (146c <hif_isr+0x3c0>)
    1294:	681b      	ldr	r3, [r3, #0]
    1296:	2b00      	cmp	r3, #0
    1298:	d065      	beq.n	1366 <hif_isr+0x2ba>
							pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    129a:	4b74      	ldr	r3, [pc, #464]	; (146c <hif_isr+0x3c0>)
    129c:	681b      	ldr	r3, [r3, #0]
    129e:	1d3a      	adds	r2, r7, #4
    12a0:	7852      	ldrb	r2, [r2, #1]
    12a2:	b2d0      	uxtb	r0, r2
    12a4:	1d3a      	adds	r2, r7, #4
    12a6:	8852      	ldrh	r2, [r2, #2]
    12a8:	b292      	uxth	r2, r2
    12aa:	3a08      	subs	r2, #8
    12ac:	b291      	uxth	r1, r2
    12ae:	683a      	ldr	r2, [r7, #0]
    12b0:	3208      	adds	r2, #8
    12b2:	4798      	blx	r3
    12b4:	e057      	b.n	1366 <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
    12b6:	1d3b      	adds	r3, r7, #4
    12b8:	781b      	ldrb	r3, [r3, #0]
    12ba:	b2db      	uxtb	r3, r3
    12bc:	2b04      	cmp	r3, #4
    12be:	d111      	bne.n	12e4 <hif_isr+0x238>
					{
						if(pfOtaCb)
    12c0:	4b6b      	ldr	r3, [pc, #428]	; (1470 <hif_isr+0x3c4>)
    12c2:	681b      	ldr	r3, [r3, #0]
    12c4:	2b00      	cmp	r3, #0
    12c6:	d04e      	beq.n	1366 <hif_isr+0x2ba>
							pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    12c8:	4b69      	ldr	r3, [pc, #420]	; (1470 <hif_isr+0x3c4>)
    12ca:	681b      	ldr	r3, [r3, #0]
    12cc:	1d3a      	adds	r2, r7, #4
    12ce:	7852      	ldrb	r2, [r2, #1]
    12d0:	b2d0      	uxtb	r0, r2
    12d2:	1d3a      	adds	r2, r7, #4
    12d4:	8852      	ldrh	r2, [r2, #2]
    12d6:	b292      	uxth	r2, r2
    12d8:	3a08      	subs	r2, #8
    12da:	b291      	uxth	r1, r2
    12dc:	683a      	ldr	r2, [r7, #0]
    12de:	3208      	adds	r2, #8
    12e0:	4798      	blx	r3
    12e2:	e040      	b.n	1366 <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
    12e4:	1d3b      	adds	r3, r7, #4
    12e6:	781b      	ldrb	r3, [r3, #0]
    12e8:	b2db      	uxtb	r3, r3
    12ea:	2b06      	cmp	r3, #6
    12ec:	d111      	bne.n	1312 <hif_isr+0x266>
					{
						if(pfCryptoCb)
    12ee:	4b61      	ldr	r3, [pc, #388]	; (1474 <hif_isr+0x3c8>)
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	2b00      	cmp	r3, #0
    12f4:	d037      	beq.n	1366 <hif_isr+0x2ba>
							pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    12f6:	4b5f      	ldr	r3, [pc, #380]	; (1474 <hif_isr+0x3c8>)
    12f8:	681b      	ldr	r3, [r3, #0]
    12fa:	1d3a      	adds	r2, r7, #4
    12fc:	7852      	ldrb	r2, [r2, #1]
    12fe:	b2d0      	uxtb	r0, r2
    1300:	1d3a      	adds	r2, r7, #4
    1302:	8852      	ldrh	r2, [r2, #2]
    1304:	b292      	uxth	r2, r2
    1306:	3a08      	subs	r2, #8
    1308:	b291      	uxth	r1, r2
    130a:	683a      	ldr	r2, [r7, #0]
    130c:	3208      	adds	r2, #8
    130e:	4798      	blx	r3
    1310:	e029      	b.n	1366 <hif_isr+0x2ba>
					}
					else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
    1312:	1d3b      	adds	r3, r7, #4
    1314:	781b      	ldrb	r3, [r3, #0]
    1316:	b2db      	uxtb	r3, r3
    1318:	2b07      	cmp	r3, #7
    131a:	d111      	bne.n	1340 <hif_isr+0x294>
					{
						if(pfSigmaCb)
    131c:	4b56      	ldr	r3, [pc, #344]	; (1478 <hif_isr+0x3cc>)
    131e:	681b      	ldr	r3, [r3, #0]
    1320:	2b00      	cmp	r3, #0
    1322:	d020      	beq.n	1366 <hif_isr+0x2ba>
							pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
    1324:	4b54      	ldr	r3, [pc, #336]	; (1478 <hif_isr+0x3cc>)
    1326:	681b      	ldr	r3, [r3, #0]
    1328:	1d3a      	adds	r2, r7, #4
    132a:	7852      	ldrb	r2, [r2, #1]
    132c:	b2d0      	uxtb	r0, r2
    132e:	1d3a      	adds	r2, r7, #4
    1330:	8852      	ldrh	r2, [r2, #2]
    1332:	b292      	uxth	r2, r2
    1334:	3a08      	subs	r2, #8
    1336:	b291      	uxth	r1, r2
    1338:	683a      	ldr	r2, [r7, #0]
    133a:	3208      	adds	r2, #8
    133c:	4798      	blx	r3
    133e:	e012      	b.n	1366 <hif_isr+0x2ba>
					}
					else
					{
						M2M_ERR("(hif) invalid group ID\n");
    1340:	4a4e      	ldr	r2, [pc, #312]	; (147c <hif_isr+0x3d0>)
    1342:	4940      	ldr	r1, [pc, #256]	; (1444 <hif_isr+0x398>)
    1344:	4b40      	ldr	r3, [pc, #256]	; (1448 <hif_isr+0x39c>)
    1346:	0018      	movs	r0, r3
    1348:	4b40      	ldr	r3, [pc, #256]	; (144c <hif_isr+0x3a0>)
    134a:	4798      	blx	r3
    134c:	4b4c      	ldr	r3, [pc, #304]	; (1480 <hif_isr+0x3d4>)
    134e:	0018      	movs	r0, r3
    1350:	4b40      	ldr	r3, [pc, #256]	; (1454 <hif_isr+0x3a8>)
    1352:	4798      	blx	r3
    1354:	200d      	movs	r0, #13
    1356:	4b40      	ldr	r3, [pc, #256]	; (1458 <hif_isr+0x3ac>)
    1358:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
    135a:	230f      	movs	r3, #15
    135c:	18fb      	adds	r3, r7, r3
    135e:	22fa      	movs	r2, #250	; 0xfa
    1360:	701a      	strb	r2, [r3, #0]
						goto ERR1;
    1362:	46c0      	nop			; (mov r8, r8)
    1364:	e0a3      	b.n	14ae <hif_isr+0x402>
					}
					#ifndef ENABLE_UNO_BOARD
					if(!gu8HifSizeDone)
    1366:	4b35      	ldr	r3, [pc, #212]	; (143c <hif_isr+0x390>)
    1368:	781b      	ldrb	r3, [r3, #0]
    136a:	b2db      	uxtb	r3, r3
    136c:	2b00      	cmp	r3, #0
    136e:	d153      	bne.n	1418 <hif_isr+0x36c>
					{
						M2M_ERR("(hif) host app didn't set RX Done\n");
    1370:	4a44      	ldr	r2, [pc, #272]	; (1484 <hif_isr+0x3d8>)
    1372:	4934      	ldr	r1, [pc, #208]	; (1444 <hif_isr+0x398>)
    1374:	4b34      	ldr	r3, [pc, #208]	; (1448 <hif_isr+0x39c>)
    1376:	0018      	movs	r0, r3
    1378:	4b34      	ldr	r3, [pc, #208]	; (144c <hif_isr+0x3a0>)
    137a:	4798      	blx	r3
    137c:	4b42      	ldr	r3, [pc, #264]	; (1488 <hif_isr+0x3dc>)
    137e:	0018      	movs	r0, r3
    1380:	4b34      	ldr	r3, [pc, #208]	; (1454 <hif_isr+0x3a8>)
    1382:	4798      	blx	r3
    1384:	200d      	movs	r0, #13
    1386:	4b34      	ldr	r3, [pc, #208]	; (1458 <hif_isr+0x3ac>)
    1388:	4798      	blx	r3
						ret = hif_set_rx_done();
    138a:	230f      	movs	r3, #15
    138c:	18fc      	adds	r4, r7, r3
    138e:	4b3f      	ldr	r3, [pc, #252]	; (148c <hif_isr+0x3e0>)
    1390:	4798      	blx	r3
    1392:	0003      	movs	r3, r0
    1394:	7023      	strb	r3, [r4, #0]
    1396:	e03f      	b.n	1418 <hif_isr+0x36c>
					}
					#endif
				}
				else
				{
					ret = M2M_ERR_RCV;
    1398:	230f      	movs	r3, #15
    139a:	18fb      	adds	r3, r7, r3
    139c:	22fe      	movs	r2, #254	; 0xfe
    139e:	701a      	strb	r2, [r3, #0]
					M2M_ERR("(hif) Wrong Size\n");
    13a0:	4a3b      	ldr	r2, [pc, #236]	; (1490 <hif_isr+0x3e4>)
    13a2:	4928      	ldr	r1, [pc, #160]	; (1444 <hif_isr+0x398>)
    13a4:	4b28      	ldr	r3, [pc, #160]	; (1448 <hif_isr+0x39c>)
    13a6:	0018      	movs	r0, r3
    13a8:	4b28      	ldr	r3, [pc, #160]	; (144c <hif_isr+0x3a0>)
    13aa:	4798      	blx	r3
    13ac:	4b39      	ldr	r3, [pc, #228]	; (1494 <hif_isr+0x3e8>)
    13ae:	0018      	movs	r0, r3
    13b0:	4b28      	ldr	r3, [pc, #160]	; (1454 <hif_isr+0x3a8>)
    13b2:	4798      	blx	r3
    13b4:	200d      	movs	r0, #13
    13b6:	4b28      	ldr	r3, [pc, #160]	; (1458 <hif_isr+0x3ac>)
    13b8:	4798      	blx	r3
					goto ERR1;
    13ba:	e078      	b.n	14ae <hif_isr+0x402>
				}
			}
			else
			{
#ifndef WIN32
				M2M_ERR("(hif) False interrupt %lx",reg);
    13bc:	2386      	movs	r3, #134	; 0x86
    13be:	009a      	lsls	r2, r3, #2
    13c0:	4920      	ldr	r1, [pc, #128]	; (1444 <hif_isr+0x398>)
    13c2:	4b21      	ldr	r3, [pc, #132]	; (1448 <hif_isr+0x39c>)
    13c4:	0018      	movs	r0, r3
    13c6:	4b21      	ldr	r3, [pc, #132]	; (144c <hif_isr+0x3a0>)
    13c8:	4798      	blx	r3
    13ca:	68ba      	ldr	r2, [r7, #8]
    13cc:	4b32      	ldr	r3, [pc, #200]	; (1498 <hif_isr+0x3ec>)
    13ce:	0011      	movs	r1, r2
    13d0:	0018      	movs	r0, r3
    13d2:	4b1e      	ldr	r3, [pc, #120]	; (144c <hif_isr+0x3a0>)
    13d4:	4798      	blx	r3
    13d6:	200d      	movs	r0, #13
    13d8:	4b1f      	ldr	r3, [pc, #124]	; (1458 <hif_isr+0x3ac>)
    13da:	4798      	blx	r3
    13dc:	e01c      	b.n	1418 <hif_isr+0x36c>
#endif
			}
		}
		else
		{
			M2M_ERR("(hif) Fail to Read interrupt reg\n");
    13de:	4a2f      	ldr	r2, [pc, #188]	; (149c <hif_isr+0x3f0>)
    13e0:	4918      	ldr	r1, [pc, #96]	; (1444 <hif_isr+0x398>)
    13e2:	4b19      	ldr	r3, [pc, #100]	; (1448 <hif_isr+0x39c>)
    13e4:	0018      	movs	r0, r3
    13e6:	4b19      	ldr	r3, [pc, #100]	; (144c <hif_isr+0x3a0>)
    13e8:	4798      	blx	r3
    13ea:	4b2d      	ldr	r3, [pc, #180]	; (14a0 <hif_isr+0x3f4>)
    13ec:	0018      	movs	r0, r3
    13ee:	4b19      	ldr	r3, [pc, #100]	; (1454 <hif_isr+0x3a8>)
    13f0:	4798      	blx	r3
    13f2:	200d      	movs	r0, #13
    13f4:	4b18      	ldr	r3, [pc, #96]	; (1458 <hif_isr+0x3ac>)
    13f6:	4798      	blx	r3
			goto ERR1;
    13f8:	e059      	b.n	14ae <hif_isr+0x402>
		}
	}
	else
	{
		M2M_ERR("(hif) FAIL to wakeup the chip\n");
    13fa:	2389      	movs	r3, #137	; 0x89
    13fc:	009a      	lsls	r2, r3, #2
    13fe:	4911      	ldr	r1, [pc, #68]	; (1444 <hif_isr+0x398>)
    1400:	4b11      	ldr	r3, [pc, #68]	; (1448 <hif_isr+0x39c>)
    1402:	0018      	movs	r0, r3
    1404:	4b11      	ldr	r3, [pc, #68]	; (144c <hif_isr+0x3a0>)
    1406:	4798      	blx	r3
    1408:	4b26      	ldr	r3, [pc, #152]	; (14a4 <hif_isr+0x3f8>)
    140a:	0018      	movs	r0, r3
    140c:	4b11      	ldr	r3, [pc, #68]	; (1454 <hif_isr+0x3a8>)
    140e:	4798      	blx	r3
    1410:	200d      	movs	r0, #13
    1412:	4b11      	ldr	r3, [pc, #68]	; (1458 <hif_isr+0x3ac>)
    1414:	4798      	blx	r3
		goto ERR1;
    1416:	e04a      	b.n	14ae <hif_isr+0x402>
	}

	ret = hif_chip_sleep();
    1418:	230f      	movs	r3, #15
    141a:	18fc      	adds	r4, r7, r3
    141c:	4b22      	ldr	r3, [pc, #136]	; (14a8 <hif_isr+0x3fc>)
    141e:	4798      	blx	r3
    1420:	0003      	movs	r3, r0
    1422:	7023      	strb	r3, [r4, #0]
    1424:	e043      	b.n	14ae <hif_isr+0x402>
    1426:	46c0      	nop			; (mov r8, r8)
    1428:	00000c0d 	.word	0x00000c0d
    142c:	00001070 	.word	0x00001070
    1430:	00001c05 	.word	0x00001c05
    1434:	00000771 	.word	0x00000771
    1438:	00001c29 	.word	0x00001c29
    143c:	200000ae 	.word	0x200000ae
    1440:	00001084 	.word	0x00001084
    1444:	0000d294 	.word	0x0000d294
    1448:	0000d048 	.word	0x0000d048
    144c:	0000c0d1 	.word	0x0000c0d1
    1450:	0000d078 	.word	0x0000d078
    1454:	0000c1f1 	.word	0x0000c1f1
    1458:	0000c105 	.word	0x0000c105
    145c:	00001c79 	.word	0x00001c79
    1460:	0000d09c 	.word	0x0000d09c
    1464:	0000d0b4 	.word	0x0000d0b4
    1468:	200000b0 	.word	0x200000b0
    146c:	200000b4 	.word	0x200000b4
    1470:	200000b8 	.word	0x200000b8
    1474:	200000c0 	.word	0x200000c0
    1478:	200000bc 	.word	0x200000bc
    147c:	00000202 	.word	0x00000202
    1480:	0000d0f4 	.word	0x0000d0f4
    1484:	00000209 	.word	0x00000209
    1488:	0000d10c 	.word	0x0000d10c
    148c:	00000ba1 	.word	0x00000ba1
    1490:	00000211 	.word	0x00000211
    1494:	0000d130 	.word	0x0000d130
    1498:	0000d144 	.word	0x0000d144
    149c:	0000021e 	.word	0x0000021e
    14a0:	0000d160 	.word	0x0000d160
    14a4:	0000d184 	.word	0x0000d184
    14a8:	00000ca5 	.word	0x00000ca5

				nm_bsp_interrupt_ctrl(0);
				/*Clearing RX interrupt*/
				reg &= ~(1<<0);
				ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
				if(ret != M2M_SUCCESS)goto ERR1;
    14ac:	46c0      	nop			; (mov r8, r8)
		goto ERR1;
	}

	ret = hif_chip_sleep();
ERR1:
	return ret;
    14ae:	230f      	movs	r3, #15
    14b0:	18fb      	adds	r3, r7, r3
    14b2:	781b      	ldrb	r3, [r3, #0]
    14b4:	b25b      	sxtb	r3, r3
}
    14b6:	0018      	movs	r0, r3
    14b8:	46bd      	mov	sp, r7
    14ba:	b005      	add	sp, #20
    14bc:	bd90      	pop	{r4, r7, pc}
    14be:	46c0      	nop			; (mov r8, r8)

000014c0 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
    14c0:	b590      	push	{r4, r7, lr}
    14c2:	b083      	sub	sp, #12
    14c4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    14c6:	1dfb      	adds	r3, r7, #7
    14c8:	2200      	movs	r2, #0
    14ca:	701a      	strb	r2, [r3, #0]

	while (gu8Interrupt) {
    14cc:	e023      	b.n	1516 <hif_handle_isr+0x56>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gu8Interrupt--;
    14ce:	4b18      	ldr	r3, [pc, #96]	; (1530 <hif_handle_isr+0x70>)
    14d0:	781b      	ldrb	r3, [r3, #0]
    14d2:	b2db      	uxtb	r3, r3
    14d4:	3b01      	subs	r3, #1
    14d6:	b2da      	uxtb	r2, r3
    14d8:	4b15      	ldr	r3, [pc, #84]	; (1530 <hif_handle_isr+0x70>)
    14da:	701a      	strb	r2, [r3, #0]
		while(1)
		{
			ret = hif_isr();
    14dc:	1dfc      	adds	r4, r7, #7
    14de:	4b15      	ldr	r3, [pc, #84]	; (1534 <hif_handle_isr+0x74>)
    14e0:	4798      	blx	r3
    14e2:	0003      	movs	r3, r0
    14e4:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
    14e6:	1dfb      	adds	r3, r7, #7
    14e8:	781b      	ldrb	r3, [r3, #0]
    14ea:	b25b      	sxtb	r3, r3
    14ec:	2b00      	cmp	r3, #0
    14ee:	d100      	bne.n	14f2 <hif_handle_isr+0x32>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
    14f0:	e011      	b.n	1516 <hif_handle_isr+0x56>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
    14f2:	4a11      	ldr	r2, [pc, #68]	; (1538 <hif_handle_isr+0x78>)
    14f4:	4911      	ldr	r1, [pc, #68]	; (153c <hif_handle_isr+0x7c>)
    14f6:	4b12      	ldr	r3, [pc, #72]	; (1540 <hif_handle_isr+0x80>)
    14f8:	0018      	movs	r0, r3
    14fa:	4b12      	ldr	r3, [pc, #72]	; (1544 <hif_handle_isr+0x84>)
    14fc:	4798      	blx	r3
    14fe:	1dfb      	adds	r3, r7, #7
    1500:	2200      	movs	r2, #0
    1502:	569a      	ldrsb	r2, [r3, r2]
    1504:	4b10      	ldr	r3, [pc, #64]	; (1548 <hif_handle_isr+0x88>)
    1506:	0011      	movs	r1, r2
    1508:	0018      	movs	r0, r3
    150a:	4b0e      	ldr	r3, [pc, #56]	; (1544 <hif_handle_isr+0x84>)
    150c:	4798      	blx	r3
    150e:	200d      	movs	r0, #13
    1510:	4b0e      	ldr	r3, [pc, #56]	; (154c <hif_handle_isr+0x8c>)
    1512:	4798      	blx	r3
			}
		}
    1514:	e7e2      	b.n	14dc <hif_handle_isr+0x1c>

sint8 hif_handle_isr(void)
{
	sint8 ret = M2M_SUCCESS;

	while (gu8Interrupt) {
    1516:	4b06      	ldr	r3, [pc, #24]	; (1530 <hif_handle_isr+0x70>)
    1518:	781b      	ldrb	r3, [r3, #0]
    151a:	b2db      	uxtb	r3, r3
    151c:	2b00      	cmp	r3, #0
    151e:	d1d6      	bne.n	14ce <hif_handle_isr+0xe>
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
			}
		}
	}

	return ret;
    1520:	1dfb      	adds	r3, r7, #7
    1522:	781b      	ldrb	r3, [r3, #0]
    1524:	b25b      	sxtb	r3, r3
}
    1526:	0018      	movs	r0, r3
    1528:	46bd      	mov	sp, r7
    152a:	b003      	add	sp, #12
    152c:	bd90      	pop	{r4, r7, pc}
    152e:	46c0      	nop			; (mov r8, r8)
    1530:	200000af 	.word	0x200000af
    1534:	000010ad 	.word	0x000010ad
    1538:	00000243 	.word	0x00000243
    153c:	0000d29c 	.word	0x0000d29c
    1540:	0000d048 	.word	0x0000d048
    1544:	0000c0d1 	.word	0x0000c0d1
    1548:	0000d1a4 	.word	0x0000d1a4
    154c:	0000c105 	.word	0x0000c105

00001550 <m2m_wifi_handle_events>:
	return M2M_SUCCESS;
}


sint8 m2m_wifi_handle_events(void * arg)
{
    1550:	b580      	push	{r7, lr}
    1552:	b082      	sub	sp, #8
    1554:	af00      	add	r7, sp, #0
    1556:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
    1558:	4b03      	ldr	r3, [pc, #12]	; (1568 <m2m_wifi_handle_events+0x18>)
    155a:	4798      	blx	r3
    155c:	0003      	movs	r3, r0
}
    155e:	0018      	movs	r0, r3
    1560:	46bd      	mov	sp, r7
    1562:	b002      	add	sp, #8
    1564:	bd80      	pop	{r7, pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	000014c1 	.word	0x000014c1

0000156c <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
    156c:	b590      	push	{r4, r7, lr}
    156e:	b087      	sub	sp, #28
    1570:	af02      	add	r7, sp, #8
    1572:	60f8      	str	r0, [r7, #12]
    1574:	0008      	movs	r0, r1
    1576:	0011      	movs	r1, r2
    1578:	607b      	str	r3, [r7, #4]
    157a:	230b      	movs	r3, #11
    157c:	18fb      	adds	r3, r7, r3
    157e:	1c02      	adds	r2, r0, #0
    1580:	701a      	strb	r2, [r3, #0]
    1582:	230a      	movs	r3, #10
    1584:	18fb      	adds	r3, r7, r3
    1586:	1c0a      	adds	r2, r1, #0
    1588:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
    158a:	687c      	ldr	r4, [r7, #4]
    158c:	230a      	movs	r3, #10
    158e:	18fb      	adds	r3, r7, r3
    1590:	781a      	ldrb	r2, [r3, #0]
    1592:	230b      	movs	r3, #11
    1594:	18fb      	adds	r3, r7, r3
    1596:	7819      	ldrb	r1, [r3, #0]
    1598:	68f8      	ldr	r0, [r7, #12]
    159a:	2300      	movs	r3, #0
    159c:	9301      	str	r3, [sp, #4]
    159e:	2320      	movs	r3, #32
    15a0:	18fb      	adds	r3, r7, r3
    15a2:	881b      	ldrh	r3, [r3, #0]
    15a4:	9300      	str	r3, [sp, #0]
    15a6:	0023      	movs	r3, r4
    15a8:	4c03      	ldr	r4, [pc, #12]	; (15b8 <m2m_wifi_connect+0x4c>)
    15aa:	47a0      	blx	r4
    15ac:	0003      	movs	r3, r0
}
    15ae:	0018      	movs	r0, r3
    15b0:	46bd      	mov	sp, r7
    15b2:	b005      	add	sp, #20
    15b4:	bd90      	pop	{r4, r7, pc}
    15b6:	46c0      	nop			; (mov r8, r8)
    15b8:	000015bd 	.word	0x000015bd

000015bc <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
    15bc:	b5b0      	push	{r4, r5, r7, lr}
    15be:	b0aa      	sub	sp, #168	; 0xa8
    15c0:	af04      	add	r7, sp, #16
    15c2:	60f8      	str	r0, [r7, #12]
    15c4:	0008      	movs	r0, r1
    15c6:	0011      	movs	r1, r2
    15c8:	607b      	str	r3, [r7, #4]
    15ca:	230b      	movs	r3, #11
    15cc:	18fb      	adds	r3, r7, r3
    15ce:	1c02      	adds	r2, r0, #0
    15d0:	701a      	strb	r2, [r3, #0]
    15d2:	230a      	movs	r3, #10
    15d4:	18fb      	adds	r3, r7, r3
    15d6:	1c0a      	adds	r2, r1, #0
    15d8:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
    15da:	2397      	movs	r3, #151	; 0x97
    15dc:	18fb      	adds	r3, r7, r3
    15de:	2200      	movs	r2, #0
    15e0:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
    15e2:	230a      	movs	r3, #10
    15e4:	18fb      	adds	r3, r7, r3
    15e6:	781b      	ldrb	r3, [r3, #0]
    15e8:	2b01      	cmp	r3, #1
    15ea:	d100      	bne.n	15ee <m2m_wifi_connect_sc+0x32>
    15ec:	e083      	b.n	16f6 <m2m_wifi_connect_sc+0x13a>
	{
		if(pvAuthInfo == NULL)
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	2b00      	cmp	r3, #0
    15f2:	d111      	bne.n	1618 <m2m_wifi_connect_sc+0x5c>
		{
			M2M_ERR("Key is not valid\n");
    15f4:	4ad8      	ldr	r2, [pc, #864]	; (1958 <m2m_wifi_connect_sc+0x39c>)
    15f6:	49d9      	ldr	r1, [pc, #868]	; (195c <m2m_wifi_connect_sc+0x3a0>)
    15f8:	4bd9      	ldr	r3, [pc, #868]	; (1960 <m2m_wifi_connect_sc+0x3a4>)
    15fa:	0018      	movs	r0, r3
    15fc:	4bd9      	ldr	r3, [pc, #868]	; (1964 <m2m_wifi_connect_sc+0x3a8>)
    15fe:	4798      	blx	r3
    1600:	4bd9      	ldr	r3, [pc, #868]	; (1968 <m2m_wifi_connect_sc+0x3ac>)
    1602:	0018      	movs	r0, r3
    1604:	4bd9      	ldr	r3, [pc, #868]	; (196c <m2m_wifi_connect_sc+0x3b0>)
    1606:	4798      	blx	r3
    1608:	200d      	movs	r0, #13
    160a:	4bd9      	ldr	r3, [pc, #868]	; (1970 <m2m_wifi_connect_sc+0x3b4>)
    160c:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    160e:	2397      	movs	r3, #151	; 0x97
    1610:	18fb      	adds	r3, r7, r3
    1612:	22f4      	movs	r2, #244	; 0xf4
    1614:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1616:	e1ef      	b.n	19f8 <m2m_wifi_connect_sc+0x43c>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
    1618:	230a      	movs	r3, #10
    161a:	18fb      	adds	r3, r7, r3
    161c:	781b      	ldrb	r3, [r3, #0]
    161e:	2b02      	cmp	r3, #2
    1620:	d169      	bne.n	16f6 <m2m_wifi_connect_sc+0x13a>
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	0018      	movs	r0, r3
    1626:	4bd3      	ldr	r3, [pc, #844]	; (1974 <m2m_wifi_connect_sc+0x3b8>)
    1628:	4798      	blx	r3
    162a:	1e03      	subs	r3, r0, #0
    162c:	2b40      	cmp	r3, #64	; 0x40
    162e:	d162      	bne.n	16f6 <m2m_wifi_connect_sc+0x13a>
		{
			uint8 i = 0;
    1630:	2396      	movs	r3, #150	; 0x96
    1632:	18fb      	adds	r3, r7, r3
    1634:	2200      	movs	r2, #0
    1636:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
    1638:	687b      	ldr	r3, [r7, #4]
    163a:	2290      	movs	r2, #144	; 0x90
    163c:	18ba      	adds	r2, r7, r2
    163e:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
    1640:	e054      	b.n	16ec <m2m_wifi_connect_sc+0x130>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
    1642:	2396      	movs	r3, #150	; 0x96
    1644:	18fb      	adds	r3, r7, r3
    1646:	781b      	ldrb	r3, [r3, #0]
    1648:	2290      	movs	r2, #144	; 0x90
    164a:	18ba      	adds	r2, r7, r2
    164c:	6812      	ldr	r2, [r2, #0]
    164e:	18d3      	adds	r3, r2, r3
    1650:	781b      	ldrb	r3, [r3, #0]
    1652:	2b2f      	cmp	r3, #47	; 0x2f
    1654:	d931      	bls.n	16ba <m2m_wifi_connect_sc+0xfe>
    1656:	2396      	movs	r3, #150	; 0x96
    1658:	18fb      	adds	r3, r7, r3
    165a:	781b      	ldrb	r3, [r3, #0]
    165c:	2290      	movs	r2, #144	; 0x90
    165e:	18ba      	adds	r2, r7, r2
    1660:	6812      	ldr	r2, [r2, #0]
    1662:	18d3      	adds	r3, r2, r3
    1664:	781b      	ldrb	r3, [r3, #0]
    1666:	2b39      	cmp	r3, #57	; 0x39
    1668:	d909      	bls.n	167e <m2m_wifi_connect_sc+0xc2>
    166a:	2396      	movs	r3, #150	; 0x96
    166c:	18fb      	adds	r3, r7, r3
    166e:	781b      	ldrb	r3, [r3, #0]
    1670:	2290      	movs	r2, #144	; 0x90
    1672:	18ba      	adds	r2, r7, r2
    1674:	6812      	ldr	r2, [r2, #0]
    1676:	18d3      	adds	r3, r2, r3
    1678:	781b      	ldrb	r3, [r3, #0]
    167a:	2b40      	cmp	r3, #64	; 0x40
    167c:	d91d      	bls.n	16ba <m2m_wifi_connect_sc+0xfe>
    167e:	2396      	movs	r3, #150	; 0x96
    1680:	18fb      	adds	r3, r7, r3
    1682:	781b      	ldrb	r3, [r3, #0]
    1684:	2290      	movs	r2, #144	; 0x90
    1686:	18ba      	adds	r2, r7, r2
    1688:	6812      	ldr	r2, [r2, #0]
    168a:	18d3      	adds	r3, r2, r3
    168c:	781b      	ldrb	r3, [r3, #0]
    168e:	2b46      	cmp	r3, #70	; 0x46
    1690:	d909      	bls.n	16a6 <m2m_wifi_connect_sc+0xea>
    1692:	2396      	movs	r3, #150	; 0x96
    1694:	18fb      	adds	r3, r7, r3
    1696:	781b      	ldrb	r3, [r3, #0]
    1698:	2290      	movs	r2, #144	; 0x90
    169a:	18ba      	adds	r2, r7, r2
    169c:	6812      	ldr	r2, [r2, #0]
    169e:	18d3      	adds	r3, r2, r3
    16a0:	781b      	ldrb	r3, [r3, #0]
    16a2:	2b60      	cmp	r3, #96	; 0x60
    16a4:	d909      	bls.n	16ba <m2m_wifi_connect_sc+0xfe>
    16a6:	2396      	movs	r3, #150	; 0x96
    16a8:	18fb      	adds	r3, r7, r3
    16aa:	781b      	ldrb	r3, [r3, #0]
    16ac:	2290      	movs	r2, #144	; 0x90
    16ae:	18ba      	adds	r2, r7, r2
    16b0:	6812      	ldr	r2, [r2, #0]
    16b2:	18d3      	adds	r3, r2, r3
    16b4:	781b      	ldrb	r3, [r3, #0]
    16b6:	2b66      	cmp	r3, #102	; 0x66
    16b8:	d911      	bls.n	16de <m2m_wifi_connect_sc+0x122>
				{
					M2M_ERR("Invalid Key\n");
    16ba:	4aaf      	ldr	r2, [pc, #700]	; (1978 <m2m_wifi_connect_sc+0x3bc>)
    16bc:	49a7      	ldr	r1, [pc, #668]	; (195c <m2m_wifi_connect_sc+0x3a0>)
    16be:	4ba8      	ldr	r3, [pc, #672]	; (1960 <m2m_wifi_connect_sc+0x3a4>)
    16c0:	0018      	movs	r0, r3
    16c2:	4ba8      	ldr	r3, [pc, #672]	; (1964 <m2m_wifi_connect_sc+0x3a8>)
    16c4:	4798      	blx	r3
    16c6:	4bad      	ldr	r3, [pc, #692]	; (197c <m2m_wifi_connect_sc+0x3c0>)
    16c8:	0018      	movs	r0, r3
    16ca:	4ba8      	ldr	r3, [pc, #672]	; (196c <m2m_wifi_connect_sc+0x3b0>)
    16cc:	4798      	blx	r3
    16ce:	200d      	movs	r0, #13
    16d0:	4ba7      	ldr	r3, [pc, #668]	; (1970 <m2m_wifi_connect_sc+0x3b4>)
    16d2:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
    16d4:	2397      	movs	r3, #151	; 0x97
    16d6:	18fb      	adds	r3, r7, r3
    16d8:	22f4      	movs	r2, #244	; 0xf4
    16da:	701a      	strb	r2, [r3, #0]
					goto ERR1;
    16dc:	e18c      	b.n	19f8 <m2m_wifi_connect_sc+0x43c>
				}
				i++;
    16de:	2396      	movs	r3, #150	; 0x96
    16e0:	18fb      	adds	r3, r7, r3
    16e2:	781a      	ldrb	r2, [r3, #0]
    16e4:	2396      	movs	r3, #150	; 0x96
    16e6:	18fb      	adds	r3, r7, r3
    16e8:	3201      	adds	r2, #1
    16ea:	701a      	strb	r2, [r3, #0]
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
		{
			uint8 i = 0;
			uint8* pu8Psk = (uint8*)pvAuthInfo;
			while(i < (M2M_MAX_PSK_LEN-1))
    16ec:	2396      	movs	r3, #150	; 0x96
    16ee:	18fb      	adds	r3, r7, r3
    16f0:	781b      	ldrb	r3, [r3, #0]
    16f2:	2b3f      	cmp	r3, #63	; 0x3f
    16f4:	d9a5      	bls.n	1642 <m2m_wifi_connect_sc+0x86>
				}
				i++;
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
    16f6:	230b      	movs	r3, #11
    16f8:	18fb      	adds	r3, r7, r3
    16fa:	781b      	ldrb	r3, [r3, #0]
    16fc:	2b00      	cmp	r3, #0
    16fe:	d004      	beq.n	170a <m2m_wifi_connect_sc+0x14e>
    1700:	230b      	movs	r3, #11
    1702:	18fb      	adds	r3, r7, r3
    1704:	781b      	ldrb	r3, [r3, #0]
    1706:	2b20      	cmp	r3, #32
    1708:	d911      	bls.n	172e <m2m_wifi_connect_sc+0x172>
	{
		M2M_ERR("SSID LEN INVALID\n");
    170a:	4a9d      	ldr	r2, [pc, #628]	; (1980 <m2m_wifi_connect_sc+0x3c4>)
    170c:	4993      	ldr	r1, [pc, #588]	; (195c <m2m_wifi_connect_sc+0x3a0>)
    170e:	4b94      	ldr	r3, [pc, #592]	; (1960 <m2m_wifi_connect_sc+0x3a4>)
    1710:	0018      	movs	r0, r3
    1712:	4b94      	ldr	r3, [pc, #592]	; (1964 <m2m_wifi_connect_sc+0x3a8>)
    1714:	4798      	blx	r3
    1716:	4b9b      	ldr	r3, [pc, #620]	; (1984 <m2m_wifi_connect_sc+0x3c8>)
    1718:	0018      	movs	r0, r3
    171a:	4b94      	ldr	r3, [pc, #592]	; (196c <m2m_wifi_connect_sc+0x3b0>)
    171c:	4798      	blx	r3
    171e:	200d      	movs	r0, #13
    1720:	4b93      	ldr	r3, [pc, #588]	; (1970 <m2m_wifi_connect_sc+0x3b4>)
    1722:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    1724:	2397      	movs	r3, #151	; 0x97
    1726:	18fb      	adds	r3, r7, r3
    1728:	22f4      	movs	r2, #244	; 0xf4
    172a:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    172c:	e164      	b.n	19f8 <m2m_wifi_connect_sc+0x43c>
	}

	if(u16Ch>M2M_WIFI_CH_14)
    172e:	23a8      	movs	r3, #168	; 0xa8
    1730:	18fb      	adds	r3, r7, r3
    1732:	881b      	ldrh	r3, [r3, #0]
    1734:	2b0d      	cmp	r3, #13
    1736:	d916      	bls.n	1766 <m2m_wifi_connect_sc+0x1aa>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
    1738:	23a8      	movs	r3, #168	; 0xa8
    173a:	18fb      	adds	r3, r7, r3
    173c:	881b      	ldrh	r3, [r3, #0]
    173e:	2bff      	cmp	r3, #255	; 0xff
    1740:	d011      	beq.n	1766 <m2m_wifi_connect_sc+0x1aa>
		{
			M2M_ERR("CH INVALID\n");
    1742:	4a91      	ldr	r2, [pc, #580]	; (1988 <m2m_wifi_connect_sc+0x3cc>)
    1744:	4985      	ldr	r1, [pc, #532]	; (195c <m2m_wifi_connect_sc+0x3a0>)
    1746:	4b86      	ldr	r3, [pc, #536]	; (1960 <m2m_wifi_connect_sc+0x3a4>)
    1748:	0018      	movs	r0, r3
    174a:	4b86      	ldr	r3, [pc, #536]	; (1964 <m2m_wifi_connect_sc+0x3a8>)
    174c:	4798      	blx	r3
    174e:	4b8f      	ldr	r3, [pc, #572]	; (198c <m2m_wifi_connect_sc+0x3d0>)
    1750:	0018      	movs	r0, r3
    1752:	4b86      	ldr	r3, [pc, #536]	; (196c <m2m_wifi_connect_sc+0x3b0>)
    1754:	4798      	blx	r3
    1756:	200d      	movs	r0, #13
    1758:	4b85      	ldr	r3, [pc, #532]	; (1970 <m2m_wifi_connect_sc+0x3b4>)
    175a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    175c:	2397      	movs	r3, #151	; 0x97
    175e:	18fb      	adds	r3, r7, r3
    1760:	22f4      	movs	r2, #244	; 0xf4
    1762:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1764:	e148      	b.n	19f8 <m2m_wifi_connect_sc+0x43c>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
    1766:	230b      	movs	r3, #11
    1768:	18fb      	adds	r3, r7, r3
    176a:	781a      	ldrb	r2, [r3, #0]
    176c:	68f9      	ldr	r1, [r7, #12]
    176e:	2314      	movs	r3, #20
    1770:	18fb      	adds	r3, r7, r3
    1772:	3346      	adds	r3, #70	; 0x46
    1774:	0018      	movs	r0, r3
    1776:	4b86      	ldr	r3, [pc, #536]	; (1990 <m2m_wifi_connect_sc+0x3d4>)
    1778:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
    177a:	230b      	movs	r3, #11
    177c:	18fb      	adds	r3, r7, r3
    177e:	781b      	ldrb	r3, [r3, #0]
    1780:	2214      	movs	r2, #20
    1782:	18ba      	adds	r2, r7, r2
    1784:	2146      	movs	r1, #70	; 0x46
    1786:	18d3      	adds	r3, r2, r3
    1788:	185b      	adds	r3, r3, r1
    178a:	2200      	movs	r2, #0
    178c:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
    178e:	2314      	movs	r3, #20
    1790:	18fb      	adds	r3, r7, r3
    1792:	22a8      	movs	r2, #168	; 0xa8
    1794:	18ba      	adds	r2, r7, r2
    1796:	2144      	movs	r1, #68	; 0x44
    1798:	8812      	ldrh	r2, [r2, #0]
    179a:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
    179c:	23ac      	movs	r3, #172	; 0xac
    179e:	18fb      	adds	r3, r7, r3
    17a0:	781b      	ldrb	r3, [r3, #0]
    17a2:	1e5a      	subs	r2, r3, #1
    17a4:	4193      	sbcs	r3, r2
    17a6:	b2db      	uxtb	r3, r3
    17a8:	0019      	movs	r1, r3
    17aa:	2314      	movs	r3, #20
    17ac:	18fb      	adds	r3, r7, r3
    17ae:	2267      	movs	r2, #103	; 0x67
    17b0:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
    17b2:	2314      	movs	r3, #20
    17b4:	18fb      	adds	r3, r7, r3
    17b6:	228c      	movs	r2, #140	; 0x8c
    17b8:	18ba      	adds	r2, r7, r2
    17ba:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
    17bc:	238c      	movs	r3, #140	; 0x8c
    17be:	18fb      	adds	r3, r7, r3
    17c0:	681b      	ldr	r3, [r3, #0]
    17c2:	220a      	movs	r2, #10
    17c4:	18ba      	adds	r2, r7, r2
    17c6:	2141      	movs	r1, #65	; 0x41
    17c8:	7812      	ldrb	r2, [r2, #0]
    17ca:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
    17cc:	230a      	movs	r3, #10
    17ce:	18fb      	adds	r3, r7, r3
    17d0:	781b      	ldrb	r3, [r3, #0]
    17d2:	2b03      	cmp	r3, #3
    17d4:	d000      	beq.n	17d8 <m2m_wifi_connect_sc+0x21c>
    17d6:	e07b      	b.n	18d0 <m2m_wifi_connect_sc+0x314>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
    17d8:	687b      	ldr	r3, [r7, #4]
    17da:	2288      	movs	r2, #136	; 0x88
    17dc:	18ba      	adds	r2, r7, r2
    17de:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
    17e0:	238c      	movs	r3, #140	; 0x8c
    17e2:	18fb      	adds	r3, r7, r3
    17e4:	681b      	ldr	r3, [r3, #0]
    17e6:	2284      	movs	r2, #132	; 0x84
    17e8:	18ba      	adds	r2, r7, r2
    17ea:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
    17ec:	2388      	movs	r3, #136	; 0x88
    17ee:	18fb      	adds	r3, r7, r3
    17f0:	681b      	ldr	r3, [r3, #0]
    17f2:	781b      	ldrb	r3, [r3, #0]
    17f4:	3b01      	subs	r3, #1
    17f6:	b2da      	uxtb	r2, r3
    17f8:	2384      	movs	r3, #132	; 0x84
    17fa:	18fb      	adds	r3, r7, r3
    17fc:	681b      	ldr	r3, [r3, #0]
    17fe:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
    1800:	2384      	movs	r3, #132	; 0x84
    1802:	18fb      	adds	r3, r7, r3
    1804:	681b      	ldr	r3, [r3, #0]
    1806:	781b      	ldrb	r3, [r3, #0]
    1808:	2b03      	cmp	r3, #3
    180a:	d917      	bls.n	183c <m2m_wifi_connect_sc+0x280>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
    180c:	4a61      	ldr	r2, [pc, #388]	; (1994 <m2m_wifi_connect_sc+0x3d8>)
    180e:	4953      	ldr	r1, [pc, #332]	; (195c <m2m_wifi_connect_sc+0x3a0>)
    1810:	4b53      	ldr	r3, [pc, #332]	; (1960 <m2m_wifi_connect_sc+0x3a4>)
    1812:	0018      	movs	r0, r3
    1814:	4b53      	ldr	r3, [pc, #332]	; (1964 <m2m_wifi_connect_sc+0x3a8>)
    1816:	4798      	blx	r3
    1818:	2384      	movs	r3, #132	; 0x84
    181a:	18fb      	adds	r3, r7, r3
    181c:	681b      	ldr	r3, [r3, #0]
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	001a      	movs	r2, r3
    1822:	4b5d      	ldr	r3, [pc, #372]	; (1998 <m2m_wifi_connect_sc+0x3dc>)
    1824:	0011      	movs	r1, r2
    1826:	0018      	movs	r0, r3
    1828:	4b4e      	ldr	r3, [pc, #312]	; (1964 <m2m_wifi_connect_sc+0x3a8>)
    182a:	4798      	blx	r3
    182c:	200d      	movs	r0, #13
    182e:	4b50      	ldr	r3, [pc, #320]	; (1970 <m2m_wifi_connect_sc+0x3b4>)
    1830:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1832:	2397      	movs	r3, #151	; 0x97
    1834:	18fb      	adds	r3, r7, r3
    1836:	22f4      	movs	r2, #244	; 0xf4
    1838:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    183a:	e0dd      	b.n	19f8 <m2m_wifi_connect_sc+0x43c>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
    183c:	2388      	movs	r3, #136	; 0x88
    183e:	18fb      	adds	r3, r7, r3
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	785b      	ldrb	r3, [r3, #1]
    1844:	3b01      	subs	r3, #1
    1846:	b2da      	uxtb	r2, r3
    1848:	2384      	movs	r3, #132	; 0x84
    184a:	18fb      	adds	r3, r7, r3
    184c:	681b      	ldr	r3, [r3, #0]
    184e:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
    1850:	2384      	movs	r3, #132	; 0x84
    1852:	18fb      	adds	r3, r7, r3
    1854:	681b      	ldr	r3, [r3, #0]
    1856:	785b      	ldrb	r3, [r3, #1]
    1858:	2b0a      	cmp	r3, #10
    185a:	d01e      	beq.n	189a <m2m_wifi_connect_sc+0x2de>
    185c:	2384      	movs	r3, #132	; 0x84
    185e:	18fb      	adds	r3, r7, r3
    1860:	681b      	ldr	r3, [r3, #0]
    1862:	785b      	ldrb	r3, [r3, #1]
    1864:	2b1a      	cmp	r3, #26
    1866:	d018      	beq.n	189a <m2m_wifi_connect_sc+0x2de>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
    1868:	2390      	movs	r3, #144	; 0x90
    186a:	009a      	lsls	r2, r3, #2
    186c:	493b      	ldr	r1, [pc, #236]	; (195c <m2m_wifi_connect_sc+0x3a0>)
    186e:	4b3c      	ldr	r3, [pc, #240]	; (1960 <m2m_wifi_connect_sc+0x3a4>)
    1870:	0018      	movs	r0, r3
    1872:	4b3c      	ldr	r3, [pc, #240]	; (1964 <m2m_wifi_connect_sc+0x3a8>)
    1874:	4798      	blx	r3
    1876:	2384      	movs	r3, #132	; 0x84
    1878:	18fb      	adds	r3, r7, r3
    187a:	681b      	ldr	r3, [r3, #0]
    187c:	785b      	ldrb	r3, [r3, #1]
    187e:	001a      	movs	r2, r3
    1880:	4b46      	ldr	r3, [pc, #280]	; (199c <m2m_wifi_connect_sc+0x3e0>)
    1882:	0011      	movs	r1, r2
    1884:	0018      	movs	r0, r3
    1886:	4b37      	ldr	r3, [pc, #220]	; (1964 <m2m_wifi_connect_sc+0x3a8>)
    1888:	4798      	blx	r3
    188a:	200d      	movs	r0, #13
    188c:	4b38      	ldr	r3, [pc, #224]	; (1970 <m2m_wifi_connect_sc+0x3b4>)
    188e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1890:	2397      	movs	r3, #151	; 0x97
    1892:	18fb      	adds	r3, r7, r3
    1894:	22f4      	movs	r2, #244	; 0xf4
    1896:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1898:	e0ae      	b.n	19f8 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
    189a:	2384      	movs	r3, #132	; 0x84
    189c:	18fb      	adds	r3, r7, r3
    189e:	681b      	ldr	r3, [r3, #0]
    18a0:	1c98      	adds	r0, r3, #2
    18a2:	2388      	movs	r3, #136	; 0x88
    18a4:	18fb      	adds	r3, r7, r3
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	1c99      	adds	r1, r3, #2
    18aa:	2388      	movs	r3, #136	; 0x88
    18ac:	18fb      	adds	r3, r7, r3
    18ae:	681b      	ldr	r3, [r3, #0]
    18b0:	785b      	ldrb	r3, [r3, #1]
    18b2:	001a      	movs	r2, r3
    18b4:	4b36      	ldr	r3, [pc, #216]	; (1990 <m2m_wifi_connect_sc+0x3d4>)
    18b6:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
    18b8:	2388      	movs	r3, #136	; 0x88
    18ba:	18fb      	adds	r3, r7, r3
    18bc:	681b      	ldr	r3, [r3, #0]
    18be:	785b      	ldrb	r3, [r3, #1]
    18c0:	001a      	movs	r2, r3
    18c2:	2384      	movs	r3, #132	; 0x84
    18c4:	18fb      	adds	r3, r7, r3
    18c6:	681b      	ldr	r3, [r3, #0]
    18c8:	189b      	adds	r3, r3, r2
    18ca:	2200      	movs	r2, #0
    18cc:	709a      	strb	r2, [r3, #2]
    18ce:	e082      	b.n	19d6 <m2m_wifi_connect_sc+0x41a>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
    18d0:	230a      	movs	r3, #10
    18d2:	18fb      	adds	r3, r7, r3
    18d4:	781b      	ldrb	r3, [r3, #0]
    18d6:	2b02      	cmp	r3, #2
    18d8:	d130      	bne.n	193c <m2m_wifi_connect_sc+0x380>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
    18da:	2382      	movs	r3, #130	; 0x82
    18dc:	18fc      	adds	r4, r7, r3
    18de:	687b      	ldr	r3, [r7, #4]
    18e0:	0018      	movs	r0, r3
    18e2:	4b24      	ldr	r3, [pc, #144]	; (1974 <m2m_wifi_connect_sc+0x3b8>)
    18e4:	4798      	blx	r3
    18e6:	0003      	movs	r3, r0
    18e8:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
    18ea:	2382      	movs	r3, #130	; 0x82
    18ec:	18fb      	adds	r3, r7, r3
    18ee:	881b      	ldrh	r3, [r3, #0]
    18f0:	2b00      	cmp	r3, #0
    18f2:	d004      	beq.n	18fe <m2m_wifi_connect_sc+0x342>
    18f4:	2382      	movs	r3, #130	; 0x82
    18f6:	18fb      	adds	r3, r7, r3
    18f8:	881b      	ldrh	r3, [r3, #0]
    18fa:	2b40      	cmp	r3, #64	; 0x40
    18fc:	d911      	bls.n	1922 <m2m_wifi_connect_sc+0x366>
		{
			M2M_ERR("Incorrect PSK key length\n");
    18fe:	4a28      	ldr	r2, [pc, #160]	; (19a0 <m2m_wifi_connect_sc+0x3e4>)
    1900:	4916      	ldr	r1, [pc, #88]	; (195c <m2m_wifi_connect_sc+0x3a0>)
    1902:	4b17      	ldr	r3, [pc, #92]	; (1960 <m2m_wifi_connect_sc+0x3a4>)
    1904:	0018      	movs	r0, r3
    1906:	4b17      	ldr	r3, [pc, #92]	; (1964 <m2m_wifi_connect_sc+0x3a8>)
    1908:	4798      	blx	r3
    190a:	4b26      	ldr	r3, [pc, #152]	; (19a4 <m2m_wifi_connect_sc+0x3e8>)
    190c:	0018      	movs	r0, r3
    190e:	4b17      	ldr	r3, [pc, #92]	; (196c <m2m_wifi_connect_sc+0x3b0>)
    1910:	4798      	blx	r3
    1912:	200d      	movs	r0, #13
    1914:	4b16      	ldr	r3, [pc, #88]	; (1970 <m2m_wifi_connect_sc+0x3b4>)
    1916:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
    1918:	2397      	movs	r3, #151	; 0x97
    191a:	18fb      	adds	r3, r7, r3
    191c:	22f4      	movs	r2, #244	; 0xf4
    191e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
    1920:	e06a      	b.n	19f8 <m2m_wifi_connect_sc+0x43c>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
    1922:	238c      	movs	r3, #140	; 0x8c
    1924:	18fb      	adds	r3, r7, r3
    1926:	6818      	ldr	r0, [r3, #0]
    1928:	2382      	movs	r3, #130	; 0x82
    192a:	18fb      	adds	r3, r7, r3
    192c:	881b      	ldrh	r3, [r3, #0]
    192e:	3301      	adds	r3, #1
    1930:	001a      	movs	r2, r3
    1932:	687b      	ldr	r3, [r7, #4]
    1934:	0019      	movs	r1, r3
    1936:	4b16      	ldr	r3, [pc, #88]	; (1990 <m2m_wifi_connect_sc+0x3d4>)
    1938:	4798      	blx	r3
    193a:	e04c      	b.n	19d6 <m2m_wifi_connect_sc+0x41a>
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
    193c:	230a      	movs	r3, #10
    193e:	18fb      	adds	r3, r7, r3
    1940:	781b      	ldrb	r3, [r3, #0]
    1942:	2b04      	cmp	r3, #4
    1944:	d130      	bne.n	19a8 <m2m_wifi_connect_sc+0x3ec>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
    1946:	238c      	movs	r3, #140	; 0x8c
    1948:	18fb      	adds	r3, r7, r3
    194a:	681b      	ldr	r3, [r3, #0]
    194c:	6879      	ldr	r1, [r7, #4]
    194e:	223e      	movs	r2, #62	; 0x3e
    1950:	0018      	movs	r0, r3
    1952:	4b0f      	ldr	r3, [pc, #60]	; (1990 <m2m_wifi_connect_sc+0x3d4>)
    1954:	4798      	blx	r3
    1956:	e03e      	b.n	19d6 <m2m_wifi_connect_sc+0x41a>
    1958:	00000203 	.word	0x00000203
    195c:	0000d5d0 	.word	0x0000d5d0
    1960:	0000d2d8 	.word	0x0000d2d8
    1964:	0000c0d1 	.word	0x0000c0d1
    1968:	0000d484 	.word	0x0000d484
    196c:	0000c1f1 	.word	0x0000c1f1
    1970:	0000c105 	.word	0x0000c105
    1974:	00000b65 	.word	0x00000b65
    1978:	0000020f 	.word	0x0000020f
    197c:	0000d498 	.word	0x0000d498
    1980:	00000219 	.word	0x00000219
    1984:	0000d4a4 	.word	0x0000d4a4
    1988:	00000222 	.word	0x00000222
    198c:	0000d4b8 	.word	0x0000d4b8
    1990:	00000ae9 	.word	0x00000ae9
    1994:	00000239 	.word	0x00000239
    1998:	0000d4c4 	.word	0x0000d4c4
    199c:	0000d4e0 	.word	0x0000d4e0
    19a0:	0000024f 	.word	0x0000024f
    19a4:	0000d4fc 	.word	0x0000d4fc
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
    19a8:	230a      	movs	r3, #10
    19aa:	18fb      	adds	r3, r7, r3
    19ac:	781b      	ldrb	r3, [r3, #0]
    19ae:	2b01      	cmp	r3, #1
    19b0:	d011      	beq.n	19d6 <m2m_wifi_connect_sc+0x41a>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
    19b2:	4a15      	ldr	r2, [pc, #84]	; (1a08 <m2m_wifi_connect_sc+0x44c>)
    19b4:	4915      	ldr	r1, [pc, #84]	; (1a0c <m2m_wifi_connect_sc+0x450>)
    19b6:	4b16      	ldr	r3, [pc, #88]	; (1a10 <m2m_wifi_connect_sc+0x454>)
    19b8:	0018      	movs	r0, r3
    19ba:	4b16      	ldr	r3, [pc, #88]	; (1a14 <m2m_wifi_connect_sc+0x458>)
    19bc:	4798      	blx	r3
    19be:	4b16      	ldr	r3, [pc, #88]	; (1a18 <m2m_wifi_connect_sc+0x45c>)
    19c0:	0018      	movs	r0, r3
    19c2:	4b16      	ldr	r3, [pc, #88]	; (1a1c <m2m_wifi_connect_sc+0x460>)
    19c4:	4798      	blx	r3
    19c6:	200d      	movs	r0, #13
    19c8:	4b15      	ldr	r3, [pc, #84]	; (1a20 <m2m_wifi_connect_sc+0x464>)
    19ca:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
    19cc:	2397      	movs	r3, #151	; 0x97
    19ce:	18fb      	adds	r3, r7, r3
    19d0:	22f4      	movs	r2, #244	; 0xf4
    19d2:	701a      	strb	r2, [r3, #0]
		goto ERR1;
    19d4:	e010      	b.n	19f8 <m2m_wifi_connect_sc+0x43c>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
    19d6:	2397      	movs	r3, #151	; 0x97
    19d8:	18fc      	adds	r4, r7, r3
    19da:	2314      	movs	r3, #20
    19dc:	18fa      	adds	r2, r7, r3
    19de:	2300      	movs	r3, #0
    19e0:	9302      	str	r3, [sp, #8]
    19e2:	2300      	movs	r3, #0
    19e4:	9301      	str	r3, [sp, #4]
    19e6:	2300      	movs	r3, #0
    19e8:	9300      	str	r3, [sp, #0]
    19ea:	236c      	movs	r3, #108	; 0x6c
    19ec:	2128      	movs	r1, #40	; 0x28
    19ee:	2001      	movs	r0, #1
    19f0:	4d0c      	ldr	r5, [pc, #48]	; (1a24 <m2m_wifi_connect_sc+0x468>)
    19f2:	47a8      	blx	r5
    19f4:	0003      	movs	r3, r0
    19f6:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
    19f8:	2397      	movs	r3, #151	; 0x97
    19fa:	18fb      	adds	r3, r7, r3
    19fc:	781b      	ldrb	r3, [r3, #0]
    19fe:	b25b      	sxtb	r3, r3
}
    1a00:	0018      	movs	r0, r3
    1a02:	46bd      	mov	sp, r7
    1a04:	b026      	add	sp, #152	; 0x98
    1a06:	bdb0      	pop	{r4, r5, r7, pc}
    1a08:	0000025f 	.word	0x0000025f
    1a0c:	0000d5d0 	.word	0x0000d5d0
    1a10:	0000d2d8 	.word	0x0000d2d8
    1a14:	0000c0d1 	.word	0x0000c0d1
    1a18:	0000d518 	.word	0x0000d518
    1a1c:	0000c1f1 	.word	0x0000c1f1
    1a20:	0000c105 	.word	0x0000c105
    1a24:	00000d71 	.word	0x00000d71

00001a28 <nm_clkless_wake>:
*	@author	Samer Sarhan
*	@date	06 June 2014
*	@version	1.0
*/
sint8 nm_clkless_wake(void)
{
    1a28:	b590      	push	{r4, r7, lr}
    1a2a:	b085      	sub	sp, #20
    1a2c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
    1a2e:	230f      	movs	r3, #15
    1a30:	18fb      	adds	r3, r7, r3
    1a32:	2200      	movs	r2, #0
    1a34:	701a      	strb	r2, [r3, #0]
	uint32 reg, clk_status_reg,trials = 0;
    1a36:	2300      	movs	r3, #0
    1a38:	60bb      	str	r3, [r7, #8]
	/* wait 1ms, spi data read */
	nm_bsp_sleep(1);
    1a3a:	2001      	movs	r0, #1
    1a3c:	4b64      	ldr	r3, [pc, #400]	; (1bd0 <nm_clkless_wake+0x1a8>)
    1a3e:	4798      	blx	r3
	ret = nm_read_reg_with_ret(0x1, &reg);
    1a40:	230f      	movs	r3, #15
    1a42:	18fc      	adds	r4, r7, r3
    1a44:	1d3b      	adds	r3, r7, #4
    1a46:	0019      	movs	r1, r3
    1a48:	2001      	movs	r0, #1
    1a4a:	4b62      	ldr	r3, [pc, #392]	; (1bd4 <nm_clkless_wake+0x1ac>)
    1a4c:	4798      	blx	r3
    1a4e:	0003      	movs	r3, r0
    1a50:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) {
    1a52:	230f      	movs	r3, #15
    1a54:	18fb      	adds	r3, r7, r3
    1a56:	781b      	ldrb	r3, [r3, #0]
    1a58:	b25b      	sxtb	r3, r3
    1a5a:	2b00      	cmp	r3, #0
    1a5c:	d00d      	beq.n	1a7a <nm_clkless_wake+0x52>
		M2M_ERR("Bus error (1). Wake up failed\n");
    1a5e:	495e      	ldr	r1, [pc, #376]	; (1bd8 <nm_clkless_wake+0x1b0>)
    1a60:	4b5e      	ldr	r3, [pc, #376]	; (1bdc <nm_clkless_wake+0x1b4>)
    1a62:	2272      	movs	r2, #114	; 0x72
    1a64:	0018      	movs	r0, r3
    1a66:	4b5e      	ldr	r3, [pc, #376]	; (1be0 <nm_clkless_wake+0x1b8>)
    1a68:	4798      	blx	r3
    1a6a:	4b5e      	ldr	r3, [pc, #376]	; (1be4 <nm_clkless_wake+0x1bc>)
    1a6c:	0018      	movs	r0, r3
    1a6e:	4b5e      	ldr	r3, [pc, #376]	; (1be8 <nm_clkless_wake+0x1c0>)
    1a70:	4798      	blx	r3
    1a72:	200d      	movs	r0, #13
    1a74:	4b5d      	ldr	r3, [pc, #372]	; (1bec <nm_clkless_wake+0x1c4>)
    1a76:	4798      	blx	r3
		goto _WAKE_EXIT;
    1a78:	e0a1      	b.n	1bbe <nm_clkless_wake+0x196>
	 * If A0, then clks_enabled bit exists in register 0xe
	 */
	do
	{
		/* Set bit 1 */
		nm_write_reg(0x1, reg | (1 << 1));
    1a7a:	687b      	ldr	r3, [r7, #4]
    1a7c:	2202      	movs	r2, #2
    1a7e:	4313      	orrs	r3, r2
    1a80:	0019      	movs	r1, r3
    1a82:	2001      	movs	r0, #1
    1a84:	4b5a      	ldr	r3, [pc, #360]	; (1bf0 <nm_clkless_wake+0x1c8>)
    1a86:	4798      	blx	r3
		/* wait 1ms, spi data read */
		nm_bsp_sleep(1);
    1a88:	2001      	movs	r0, #1
    1a8a:	4b51      	ldr	r3, [pc, #324]	; (1bd0 <nm_clkless_wake+0x1a8>)
    1a8c:	4798      	blx	r3
		// Check the clock status
		ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1a8e:	4b59      	ldr	r3, [pc, #356]	; (1bf4 <nm_clkless_wake+0x1cc>)
    1a90:	681b      	ldr	r3, [r3, #0]
    1a92:	220f      	movs	r2, #15
    1a94:	18bc      	adds	r4, r7, r2
    1a96:	003a      	movs	r2, r7
    1a98:	0011      	movs	r1, r2
    1a9a:	0018      	movs	r0, r3
    1a9c:	4b4d      	ldr	r3, [pc, #308]	; (1bd4 <nm_clkless_wake+0x1ac>)
    1a9e:	4798      	blx	r3
    1aa0:	0003      	movs	r3, r0
    1aa2:	7023      	strb	r3, [r4, #0]
		if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    1aa4:	230f      	movs	r3, #15
    1aa6:	18fb      	adds	r3, r7, r3
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	b25b      	sxtb	r3, r3
    1aac:	2b00      	cmp	r3, #0
    1aae:	d108      	bne.n	1ac2 <nm_clkless_wake+0x9a>
    1ab0:	230f      	movs	r3, #15
    1ab2:	18fb      	adds	r3, r7, r3
    1ab4:	781b      	ldrb	r3, [r3, #0]
    1ab6:	b25b      	sxtb	r3, r3
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d162      	bne.n	1b82 <nm_clkless_wake+0x15a>
    1abc:	683b      	ldr	r3, [r7, #0]
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d15f      	bne.n	1b82 <nm_clkless_wake+0x15a>
			/* Register 0xf did not exist in A0.
			 * If register 0xf fails to read or if it reads 0,
			 * then the chip is A0.
			 */
			clk_status_reg_adr = 0xe;
    1ac2:	4b4c      	ldr	r3, [pc, #304]	; (1bf4 <nm_clkless_wake+0x1cc>)
    1ac4:	220e      	movs	r2, #14
    1ac6:	601a      	str	r2, [r3, #0]
			/* wait 1ms, spi data read */
			nm_bsp_sleep(1);
    1ac8:	2001      	movs	r0, #1
    1aca:	4b41      	ldr	r3, [pc, #260]	; (1bd0 <nm_clkless_wake+0x1a8>)
    1acc:	4798      	blx	r3
			ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1ace:	4b49      	ldr	r3, [pc, #292]	; (1bf4 <nm_clkless_wake+0x1cc>)
    1ad0:	681b      	ldr	r3, [r3, #0]
    1ad2:	220f      	movs	r2, #15
    1ad4:	18bc      	adds	r4, r7, r2
    1ad6:	003a      	movs	r2, r7
    1ad8:	0011      	movs	r1, r2
    1ada:	0018      	movs	r0, r3
    1adc:	4b3d      	ldr	r3, [pc, #244]	; (1bd4 <nm_clkless_wake+0x1ac>)
    1ade:	4798      	blx	r3
    1ae0:	0003      	movs	r3, r0
    1ae2:	7023      	strb	r3, [r4, #0]
			
			/* Aelmeleh 24-08-2015*/
			/* Check for C3000 rev. D0 value */
			if( (ret != M2M_SUCCESS) || ((ret == M2M_SUCCESS) && (clk_status_reg == 0)) ) {
    1ae4:	230f      	movs	r3, #15
    1ae6:	18fb      	adds	r3, r7, r3
    1ae8:	781b      	ldrb	r3, [r3, #0]
    1aea:	b25b      	sxtb	r3, r3
    1aec:	2b00      	cmp	r3, #0
    1aee:	d108      	bne.n	1b02 <nm_clkless_wake+0xda>
    1af0:	230f      	movs	r3, #15
    1af2:	18fb      	adds	r3, r7, r3
    1af4:	781b      	ldrb	r3, [r3, #0]
    1af6:	b25b      	sxtb	r3, r3
    1af8:	2b00      	cmp	r3, #0
    1afa:	d142      	bne.n	1b82 <nm_clkless_wake+0x15a>
    1afc:	683b      	ldr	r3, [r7, #0]
    1afe:	2b00      	cmp	r3, #0
    1b00:	d13f      	bne.n	1b82 <nm_clkless_wake+0x15a>
				 
				clk_status_reg_adr = 0x13;
    1b02:	4b3c      	ldr	r3, [pc, #240]	; (1bf4 <nm_clkless_wake+0x1cc>)
    1b04:	2213      	movs	r2, #19
    1b06:	601a      	str	r2, [r3, #0]
				/* wait 1ms, spi data read */
				nm_bsp_sleep(1);
    1b08:	2001      	movs	r0, #1
    1b0a:	4b31      	ldr	r3, [pc, #196]	; (1bd0 <nm_clkless_wake+0x1a8>)
    1b0c:	4798      	blx	r3
				ret = nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1b0e:	4b39      	ldr	r3, [pc, #228]	; (1bf4 <nm_clkless_wake+0x1cc>)
    1b10:	681b      	ldr	r3, [r3, #0]
    1b12:	220f      	movs	r2, #15
    1b14:	18bc      	adds	r4, r7, r2
    1b16:	003a      	movs	r2, r7
    1b18:	0011      	movs	r1, r2
    1b1a:	0018      	movs	r0, r3
    1b1c:	4b2d      	ldr	r3, [pc, #180]	; (1bd4 <nm_clkless_wake+0x1ac>)
    1b1e:	4798      	blx	r3
    1b20:	0003      	movs	r3, r0
    1b22:	7023      	strb	r3, [r4, #0]
			
				if(ret != M2M_SUCCESS) {
    1b24:	230f      	movs	r3, #15
    1b26:	18fb      	adds	r3, r7, r3
    1b28:	781b      	ldrb	r3, [r3, #0]
    1b2a:	b25b      	sxtb	r3, r3
    1b2c:	2b00      	cmp	r3, #0
    1b2e:	d028      	beq.n	1b82 <nm_clkless_wake+0x15a>
					M2M_ERR("Bus error (2). Wake up failed\n");
    1b30:	4929      	ldr	r1, [pc, #164]	; (1bd8 <nm_clkless_wake+0x1b0>)
    1b32:	4b2a      	ldr	r3, [pc, #168]	; (1bdc <nm_clkless_wake+0x1b4>)
    1b34:	2296      	movs	r2, #150	; 0x96
    1b36:	0018      	movs	r0, r3
    1b38:	4b29      	ldr	r3, [pc, #164]	; (1be0 <nm_clkless_wake+0x1b8>)
    1b3a:	4798      	blx	r3
    1b3c:	4b2e      	ldr	r3, [pc, #184]	; (1bf8 <nm_clkless_wake+0x1d0>)
    1b3e:	0018      	movs	r0, r3
    1b40:	4b29      	ldr	r3, [pc, #164]	; (1be8 <nm_clkless_wake+0x1c0>)
    1b42:	4798      	blx	r3
    1b44:	200d      	movs	r0, #13
    1b46:	4b29      	ldr	r3, [pc, #164]	; (1bec <nm_clkless_wake+0x1c4>)
    1b48:	4798      	blx	r3
					goto _WAKE_EXIT;
    1b4a:	e038      	b.n	1bbe <nm_clkless_wake+0x196>
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
		{
			/* Wait for the chip to stabilize*/
			nm_bsp_sleep(2);
    1b4c:	2002      	movs	r0, #2
    1b4e:	4b20      	ldr	r3, [pc, #128]	; (1bd0 <nm_clkless_wake+0x1a8>)
    1b50:	4798      	blx	r3

			// Make sure chip is awake. This is an extra step that can be removed
			// later to avoid the bus access overhead
			nm_read_reg_with_ret(clk_status_reg_adr, &clk_status_reg);
    1b52:	4b28      	ldr	r3, [pc, #160]	; (1bf4 <nm_clkless_wake+0x1cc>)
    1b54:	681b      	ldr	r3, [r3, #0]
    1b56:	003a      	movs	r2, r7
    1b58:	0011      	movs	r1, r2
    1b5a:	0018      	movs	r0, r3
    1b5c:	4b1d      	ldr	r3, [pc, #116]	; (1bd4 <nm_clkless_wake+0x1ac>)
    1b5e:	4798      	blx	r3

			if((clk_status_reg & 0x4) == 0)
    1b60:	683b      	ldr	r3, [r7, #0]
    1b62:	2204      	movs	r2, #4
    1b64:	4013      	ands	r3, r2
    1b66:	d10c      	bne.n	1b82 <nm_clkless_wake+0x15a>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
    1b68:	491b      	ldr	r1, [pc, #108]	; (1bd8 <nm_clkless_wake+0x1b0>)
    1b6a:	4b1c      	ldr	r3, [pc, #112]	; (1bdc <nm_clkless_wake+0x1b4>)
    1b6c:	22aa      	movs	r2, #170	; 0xaa
    1b6e:	0018      	movs	r0, r3
    1b70:	4b1b      	ldr	r3, [pc, #108]	; (1be0 <nm_clkless_wake+0x1b8>)
    1b72:	4798      	blx	r3
    1b74:	4b21      	ldr	r3, [pc, #132]	; (1bfc <nm_clkless_wake+0x1d4>)
    1b76:	0018      	movs	r0, r3
    1b78:	4b1b      	ldr	r3, [pc, #108]	; (1be8 <nm_clkless_wake+0x1c0>)
    1b7a:	4798      	blx	r3
    1b7c:	200d      	movs	r0, #13
    1b7e:	4b1b      	ldr	r3, [pc, #108]	; (1bec <nm_clkless_wake+0x1c4>)
    1b80:	4798      	blx	r3
		}

		// in case of clocks off, wait 2ms, and check it again.
		// if still off, wait for another 2ms, for a total wait of 6ms.
		// If still off, redo the wake up sequence
		while( ((clk_status_reg & 0x4) == 0) && (((++trials) %3) == 0))
    1b82:	683b      	ldr	r3, [r7, #0]
    1b84:	2204      	movs	r2, #4
    1b86:	4013      	ands	r3, r2
    1b88:	d109      	bne.n	1b9e <nm_clkless_wake+0x176>
    1b8a:	68bb      	ldr	r3, [r7, #8]
    1b8c:	3301      	adds	r3, #1
    1b8e:	60bb      	str	r3, [r7, #8]
    1b90:	68ba      	ldr	r2, [r7, #8]
    1b92:	4b1b      	ldr	r3, [pc, #108]	; (1c00 <nm_clkless_wake+0x1d8>)
    1b94:	2103      	movs	r1, #3
    1b96:	0010      	movs	r0, r2
    1b98:	4798      	blx	r3
    1b9a:	1e0b      	subs	r3, r1, #0
    1b9c:	d0d6      	beq.n	1b4c <nm_clkless_wake+0x124>
			{
				M2M_ERR("clocks still OFF. Wake up failed\n");
			}
		}
		// in case of failure, Reset the wakeup bit to introduce a new edge on the next loop
		if((clk_status_reg & 0x4) == 0)
    1b9e:	683b      	ldr	r3, [r7, #0]
    1ba0:	2204      	movs	r2, #4
    1ba2:	4013      	ands	r3, r2
    1ba4:	d106      	bne.n	1bb4 <nm_clkless_wake+0x18c>
		{
			// Reset bit 0
			nm_write_reg(0x1, reg | (1 << 1));
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	2202      	movs	r2, #2
    1baa:	4313      	orrs	r3, r2
    1bac:	0019      	movs	r1, r3
    1bae:	2001      	movs	r0, #1
    1bb0:	4b0f      	ldr	r3, [pc, #60]	; (1bf0 <nm_clkless_wake+0x1c8>)
    1bb2:	4798      	blx	r3
		}
	} while((clk_status_reg & 0x4) == 0);
    1bb4:	683b      	ldr	r3, [r7, #0]
    1bb6:	2204      	movs	r2, #4
    1bb8:	4013      	ands	r3, r2
    1bba:	d100      	bne.n	1bbe <nm_clkless_wake+0x196>
    1bbc:	e75d      	b.n	1a7a <nm_clkless_wake+0x52>

_WAKE_EXIT:
	return ret;
    1bbe:	230f      	movs	r3, #15
    1bc0:	18fb      	adds	r3, r7, r3
    1bc2:	781b      	ldrb	r3, [r3, #0]
    1bc4:	b25b      	sxtb	r3, r3
}
    1bc6:	0018      	movs	r0, r3
    1bc8:	46bd      	mov	sp, r7
    1bca:	b005      	add	sp, #20
    1bcc:	bd90      	pop	{r4, r7, pc}
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	00000749 	.word	0x00000749
    1bd4:	00001c05 	.word	0x00001c05
    1bd8:	0000d70c 	.word	0x0000d70c
    1bdc:	0000d5e4 	.word	0x0000d5e4
    1be0:	0000c0d1 	.word	0x0000c0d1
    1be4:	0000d5f8 	.word	0x0000d5f8
    1be8:	0000c1f1 	.word	0x0000c1f1
    1bec:	0000c105 	.word	0x0000c105
    1bf0:	00001c29 	.word	0x00001c29
    1bf4:	2000000c 	.word	0x2000000c
    1bf8:	0000d618 	.word	0x0000d618
    1bfc:	0000d638 	.word	0x0000d638
    1c00:	00009f45 	.word	0x00009f45

00001c04 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    1c04:	b580      	push	{r7, lr}
    1c06:	b082      	sub	sp, #8
    1c08:	af00      	add	r7, sp, #0
    1c0a:	6078      	str	r0, [r7, #4]
    1c0c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
    1c0e:	683a      	ldr	r2, [r7, #0]
    1c10:	687b      	ldr	r3, [r7, #4]
    1c12:	0011      	movs	r1, r2
    1c14:	0018      	movs	r0, r3
    1c16:	4b03      	ldr	r3, [pc, #12]	; (1c24 <nm_read_reg_with_ret+0x20>)
    1c18:	4798      	blx	r3
    1c1a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
    1c1c:	0018      	movs	r0, r3
    1c1e:	46bd      	mov	sp, r7
    1c20:	b002      	add	sp, #8
    1c22:	bd80      	pop	{r7, pc}
    1c24:	00002ced 	.word	0x00002ced

00001c28 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
    1c28:	b580      	push	{r7, lr}
    1c2a:	b082      	sub	sp, #8
    1c2c:	af00      	add	r7, sp, #0
    1c2e:	6078      	str	r0, [r7, #4]
    1c30:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
    1c32:	683a      	ldr	r2, [r7, #0]
    1c34:	687b      	ldr	r3, [r7, #4]
    1c36:	0011      	movs	r1, r2
    1c38:	0018      	movs	r0, r3
    1c3a:	4b03      	ldr	r3, [pc, #12]	; (1c48 <nm_write_reg+0x20>)
    1c3c:	4798      	blx	r3
    1c3e:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
    1c40:	0018      	movs	r0, r3
    1c42:	46bd      	mov	sp, r7
    1c44:	b002      	add	sp, #8
    1c46:	bd80      	pop	{r7, pc}
    1c48:	00002d3d 	.word	0x00002d3d

00001c4c <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1c4c:	b580      	push	{r7, lr}
    1c4e:	b084      	sub	sp, #16
    1c50:	af00      	add	r7, sp, #0
    1c52:	60f8      	str	r0, [r7, #12]
    1c54:	60b9      	str	r1, [r7, #8]
    1c56:	1dbb      	adds	r3, r7, #6
    1c58:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
    1c5a:	1dbb      	adds	r3, r7, #6
    1c5c:	881a      	ldrh	r2, [r3, #0]
    1c5e:	68b9      	ldr	r1, [r7, #8]
    1c60:	68fb      	ldr	r3, [r7, #12]
    1c62:	0018      	movs	r0, r3
    1c64:	4b03      	ldr	r3, [pc, #12]	; (1c74 <p_nm_read_block+0x28>)
    1c66:	4798      	blx	r3
    1c68:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    1c6a:	0018      	movs	r0, r3
    1c6c:	46bd      	mov	sp, r7
    1c6e:	b004      	add	sp, #16
    1c70:	bd80      	pop	{r7, pc}
    1c72:	46c0      	nop			; (mov r8, r8)
    1c74:	00002d8d 	.word	0x00002d8d

00001c78 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	b086      	sub	sp, #24
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	60f8      	str	r0, [r7, #12]
    1c80:	60b9      	str	r1, [r7, #8]
    1c82:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1c84:	4b2d      	ldr	r3, [pc, #180]	; (1d3c <nm_read_block+0xc4>)
    1c86:	881a      	ldrh	r2, [r3, #0]
    1c88:	2310      	movs	r3, #16
    1c8a:	18fb      	adds	r3, r7, r3
    1c8c:	3a08      	subs	r2, #8
    1c8e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    1c90:	2300      	movs	r3, #0
    1c92:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    1c94:	2313      	movs	r3, #19
    1c96:	18fb      	adds	r3, r7, r3
    1c98:	2200      	movs	r2, #0
    1c9a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1c9c:	2310      	movs	r3, #16
    1c9e:	18fb      	adds	r3, r7, r3
    1ca0:	881a      	ldrh	r2, [r3, #0]
    1ca2:	687b      	ldr	r3, [r7, #4]
    1ca4:	429a      	cmp	r2, r3
    1ca6:	d313      	bcc.n	1cd0 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    1ca8:	68ba      	ldr	r2, [r7, #8]
    1caa:	697b      	ldr	r3, [r7, #20]
    1cac:	18d1      	adds	r1, r2, r3
    1cae:	687b      	ldr	r3, [r7, #4]
    1cb0:	b29a      	uxth	r2, r3
    1cb2:	68fb      	ldr	r3, [r7, #12]
    1cb4:	0018      	movs	r0, r3
    1cb6:	4b22      	ldr	r3, [pc, #136]	; (1d40 <nm_read_block+0xc8>)
    1cb8:	4798      	blx	r3
    1cba:	0003      	movs	r3, r0
    1cbc:	b2da      	uxtb	r2, r3
    1cbe:	2313      	movs	r3, #19
    1cc0:	18fb      	adds	r3, r7, r3
    1cc2:	781b      	ldrb	r3, [r3, #0]
    1cc4:	18d3      	adds	r3, r2, r3
    1cc6:	b2da      	uxtb	r2, r3
    1cc8:	2313      	movs	r3, #19
    1cca:	18fb      	adds	r3, r7, r3
    1ccc:	701a      	strb	r2, [r3, #0]
			break;
    1cce:	e02d      	b.n	1d2c <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    1cd0:	68ba      	ldr	r2, [r7, #8]
    1cd2:	697b      	ldr	r3, [r7, #20]
    1cd4:	18d1      	adds	r1, r2, r3
    1cd6:	2310      	movs	r3, #16
    1cd8:	18fb      	adds	r3, r7, r3
    1cda:	881a      	ldrh	r2, [r3, #0]
    1cdc:	68fb      	ldr	r3, [r7, #12]
    1cde:	0018      	movs	r0, r3
    1ce0:	4b17      	ldr	r3, [pc, #92]	; (1d40 <nm_read_block+0xc8>)
    1ce2:	4798      	blx	r3
    1ce4:	0003      	movs	r3, r0
    1ce6:	b2da      	uxtb	r2, r3
    1ce8:	2313      	movs	r3, #19
    1cea:	18fb      	adds	r3, r7, r3
    1cec:	781b      	ldrb	r3, [r3, #0]
    1cee:	18d3      	adds	r3, r2, r3
    1cf0:	b2da      	uxtb	r2, r3
    1cf2:	2313      	movs	r3, #19
    1cf4:	18fb      	adds	r3, r7, r3
    1cf6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    1cf8:	2313      	movs	r3, #19
    1cfa:	18fb      	adds	r3, r7, r3
    1cfc:	781b      	ldrb	r3, [r3, #0]
    1cfe:	b25b      	sxtb	r3, r3
    1d00:	2b00      	cmp	r3, #0
    1d02:	d112      	bne.n	1d2a <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    1d04:	2310      	movs	r3, #16
    1d06:	18fb      	adds	r3, r7, r3
    1d08:	881b      	ldrh	r3, [r3, #0]
    1d0a:	687a      	ldr	r2, [r7, #4]
    1d0c:	1ad3      	subs	r3, r2, r3
    1d0e:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    1d10:	2310      	movs	r3, #16
    1d12:	18fb      	adds	r3, r7, r3
    1d14:	881b      	ldrh	r3, [r3, #0]
    1d16:	697a      	ldr	r2, [r7, #20]
    1d18:	18d3      	adds	r3, r2, r3
    1d1a:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    1d1c:	2310      	movs	r3, #16
    1d1e:	18fb      	adds	r3, r7, r3
    1d20:	881b      	ldrh	r3, [r3, #0]
    1d22:	68fa      	ldr	r2, [r7, #12]
    1d24:	18d3      	adds	r3, r2, r3
    1d26:	60fb      	str	r3, [r7, #12]
		}
	}
    1d28:	e7b8      	b.n	1c9c <nm_read_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1d2a:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1d2c:	2313      	movs	r3, #19
    1d2e:	18fb      	adds	r3, r7, r3
    1d30:	781b      	ldrb	r3, [r3, #0]
    1d32:	b25b      	sxtb	r3, r3
}
    1d34:	0018      	movs	r0, r3
    1d36:	46bd      	mov	sp, r7
    1d38:	b006      	add	sp, #24
    1d3a:	bd80      	pop	{r7, pc}
    1d3c:	20000008 	.word	0x20000008
    1d40:	00001c4d 	.word	0x00001c4d

00001d44 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b084      	sub	sp, #16
    1d48:	af00      	add	r7, sp, #0
    1d4a:	60f8      	str	r0, [r7, #12]
    1d4c:	60b9      	str	r1, [r7, #8]
    1d4e:	1dbb      	adds	r3, r7, #6
    1d50:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
    1d52:	1dbb      	adds	r3, r7, #6
    1d54:	881a      	ldrh	r2, [r3, #0]
    1d56:	68b9      	ldr	r1, [r7, #8]
    1d58:	68fb      	ldr	r3, [r7, #12]
    1d5a:	0018      	movs	r0, r3
    1d5c:	4b03      	ldr	r3, [pc, #12]	; (1d6c <p_nm_write_block+0x28>)
    1d5e:	4798      	blx	r3
    1d60:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
    1d62:	0018      	movs	r0, r3
    1d64:	46bd      	mov	sp, r7
    1d66:	b004      	add	sp, #16
    1d68:	bd80      	pop	{r7, pc}
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	00002de5 	.word	0x00002de5

00001d70 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
    1d70:	b580      	push	{r7, lr}
    1d72:	b086      	sub	sp, #24
    1d74:	af00      	add	r7, sp, #0
    1d76:	60f8      	str	r0, [r7, #12]
    1d78:	60b9      	str	r1, [r7, #8]
    1d7a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
    1d7c:	4b2d      	ldr	r3, [pc, #180]	; (1e34 <nm_write_block+0xc4>)
    1d7e:	881a      	ldrh	r2, [r3, #0]
    1d80:	2310      	movs	r3, #16
    1d82:	18fb      	adds	r3, r7, r3
    1d84:	3a08      	subs	r2, #8
    1d86:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
    1d88:	2300      	movs	r3, #0
    1d8a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
    1d8c:	2313      	movs	r3, #19
    1d8e:	18fb      	adds	r3, r7, r3
    1d90:	2200      	movs	r2, #0
    1d92:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
    1d94:	2310      	movs	r3, #16
    1d96:	18fb      	adds	r3, r7, r3
    1d98:	881a      	ldrh	r2, [r3, #0]
    1d9a:	687b      	ldr	r3, [r7, #4]
    1d9c:	429a      	cmp	r2, r3
    1d9e:	d313      	bcc.n	1dc8 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
    1da0:	68ba      	ldr	r2, [r7, #8]
    1da2:	697b      	ldr	r3, [r7, #20]
    1da4:	18d1      	adds	r1, r2, r3
    1da6:	687b      	ldr	r3, [r7, #4]
    1da8:	b29a      	uxth	r2, r3
    1daa:	68fb      	ldr	r3, [r7, #12]
    1dac:	0018      	movs	r0, r3
    1dae:	4b22      	ldr	r3, [pc, #136]	; (1e38 <nm_write_block+0xc8>)
    1db0:	4798      	blx	r3
    1db2:	0003      	movs	r3, r0
    1db4:	b2da      	uxtb	r2, r3
    1db6:	2313      	movs	r3, #19
    1db8:	18fb      	adds	r3, r7, r3
    1dba:	781b      	ldrb	r3, [r3, #0]
    1dbc:	18d3      	adds	r3, r2, r3
    1dbe:	b2da      	uxtb	r2, r3
    1dc0:	2313      	movs	r3, #19
    1dc2:	18fb      	adds	r3, r7, r3
    1dc4:	701a      	strb	r2, [r3, #0]
			break;
    1dc6:	e02d      	b.n	1e24 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
    1dc8:	68ba      	ldr	r2, [r7, #8]
    1dca:	697b      	ldr	r3, [r7, #20]
    1dcc:	18d1      	adds	r1, r2, r3
    1dce:	2310      	movs	r3, #16
    1dd0:	18fb      	adds	r3, r7, r3
    1dd2:	881a      	ldrh	r2, [r3, #0]
    1dd4:	68fb      	ldr	r3, [r7, #12]
    1dd6:	0018      	movs	r0, r3
    1dd8:	4b17      	ldr	r3, [pc, #92]	; (1e38 <nm_write_block+0xc8>)
    1dda:	4798      	blx	r3
    1ddc:	0003      	movs	r3, r0
    1dde:	b2da      	uxtb	r2, r3
    1de0:	2313      	movs	r3, #19
    1de2:	18fb      	adds	r3, r7, r3
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	18d3      	adds	r3, r2, r3
    1de8:	b2da      	uxtb	r2, r3
    1dea:	2313      	movs	r3, #19
    1dec:	18fb      	adds	r3, r7, r3
    1dee:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
    1df0:	2313      	movs	r3, #19
    1df2:	18fb      	adds	r3, r7, r3
    1df4:	781b      	ldrb	r3, [r3, #0]
    1df6:	b25b      	sxtb	r3, r3
    1df8:	2b00      	cmp	r3, #0
    1dfa:	d112      	bne.n	1e22 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
    1dfc:	2310      	movs	r3, #16
    1dfe:	18fb      	adds	r3, r7, r3
    1e00:	881b      	ldrh	r3, [r3, #0]
    1e02:	687a      	ldr	r2, [r7, #4]
    1e04:	1ad3      	subs	r3, r2, r3
    1e06:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
    1e08:	2310      	movs	r3, #16
    1e0a:	18fb      	adds	r3, r7, r3
    1e0c:	881b      	ldrh	r3, [r3, #0]
    1e0e:	697a      	ldr	r2, [r7, #20]
    1e10:	18d3      	adds	r3, r2, r3
    1e12:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
    1e14:	2310      	movs	r3, #16
    1e16:	18fb      	adds	r3, r7, r3
    1e18:	881b      	ldrh	r3, [r3, #0]
    1e1a:	68fa      	ldr	r2, [r7, #12]
    1e1c:	18d3      	adds	r3, r2, r3
    1e1e:	60fb      	str	r3, [r7, #12]
		}
	}
    1e20:	e7b8      	b.n	1d94 <nm_write_block+0x24>
			break;
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
			if(M2M_SUCCESS != s8Ret) break;
    1e22:	46c0      	nop			; (mov r8, r8)
			off += u16MaxTrxSz;
			u32Addr += u16MaxTrxSz;
		}
	}

	return s8Ret;
    1e24:	2313      	movs	r3, #19
    1e26:	18fb      	adds	r3, r7, r3
    1e28:	781b      	ldrb	r3, [r3, #0]
    1e2a:	b25b      	sxtb	r3, r3
}
    1e2c:	0018      	movs	r0, r3
    1e2e:	46bd      	mov	sp, r7
    1e30:	b006      	add	sp, #24
    1e32:	bd80      	pop	{r7, pc}
    1e34:	20000008 	.word	0x20000008
    1e38:	00001d45 	.word	0x00001d45

00001e3c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
    1e3c:	b580      	push	{r7, lr}
    1e3e:	b086      	sub	sp, #24
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
    1e44:	000a      	movs	r2, r1
    1e46:	1cbb      	adds	r3, r7, #2
    1e48:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
    1e4a:	230c      	movs	r3, #12
    1e4c:	18fb      	adds	r3, r7, r3
    1e4e:	2200      	movs	r2, #0
    1e50:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
    1e52:	230c      	movs	r3, #12
    1e54:	18fb      	adds	r3, r7, r3
    1e56:	687a      	ldr	r2, [r7, #4]
    1e58:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    1e5a:	230c      	movs	r3, #12
    1e5c:	18fb      	adds	r3, r7, r3
    1e5e:	1cba      	adds	r2, r7, #2
    1e60:	8812      	ldrh	r2, [r2, #0]
    1e62:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1e64:	230c      	movs	r3, #12
    1e66:	18fb      	adds	r3, r7, r3
    1e68:	0019      	movs	r1, r3
    1e6a:	2003      	movs	r0, #3
    1e6c:	4b03      	ldr	r3, [pc, #12]	; (1e7c <nmi_spi_read+0x40>)
    1e6e:	4798      	blx	r3
    1e70:	0003      	movs	r3, r0
}
    1e72:	0018      	movs	r0, r3
    1e74:	46bd      	mov	sp, r7
    1e76:	b006      	add	sp, #24
    1e78:	bd80      	pop	{r7, pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	00000a59 	.word	0x00000a59

00001e80 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
    1e80:	b580      	push	{r7, lr}
    1e82:	b086      	sub	sp, #24
    1e84:	af00      	add	r7, sp, #0
    1e86:	6078      	str	r0, [r7, #4]
    1e88:	000a      	movs	r2, r1
    1e8a:	1cbb      	adds	r3, r7, #2
    1e8c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
    1e8e:	230c      	movs	r3, #12
    1e90:	18fb      	adds	r3, r7, r3
    1e92:	687a      	ldr	r2, [r7, #4]
    1e94:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
    1e96:	230c      	movs	r3, #12
    1e98:	18fb      	adds	r3, r7, r3
    1e9a:	2200      	movs	r2, #0
    1e9c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
    1e9e:	230c      	movs	r3, #12
    1ea0:	18fb      	adds	r3, r7, r3
    1ea2:	1cba      	adds	r2, r7, #2
    1ea4:	8812      	ldrh	r2, [r2, #0]
    1ea6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
    1ea8:	230c      	movs	r3, #12
    1eaa:	18fb      	adds	r3, r7, r3
    1eac:	0019      	movs	r1, r3
    1eae:	2003      	movs	r0, #3
    1eb0:	4b03      	ldr	r3, [pc, #12]	; (1ec0 <nmi_spi_write+0x40>)
    1eb2:	4798      	blx	r3
    1eb4:	0003      	movs	r3, r0
}
    1eb6:	0018      	movs	r0, r3
    1eb8:	46bd      	mov	sp, r7
    1eba:	b006      	add	sp, #24
    1ebc:	bd80      	pop	{r7, pc}
    1ebe:	46c0      	nop			; (mov r8, r8)
    1ec0:	00000a59 	.word	0x00000a59

00001ec4 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
    1ec4:	b580      	push	{r7, lr}
    1ec6:	b082      	sub	sp, #8
    1ec8:	af00      	add	r7, sp, #0
    1eca:	0002      	movs	r2, r0
    1ecc:	1dfb      	adds	r3, r7, #7
    1ece:	701a      	strb	r2, [r3, #0]
    1ed0:	1dbb      	adds	r3, r7, #6
    1ed2:	1c0a      	adds	r2, r1, #0
    1ed4:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
    1ed6:	1dfb      	adds	r3, r7, #7
    1ed8:	781b      	ldrb	r3, [r3, #0]
    1eda:	005a      	lsls	r2, r3, #1
    1edc:	1dbb      	adds	r3, r7, #6
    1ede:	781b      	ldrb	r3, [r3, #0]
    1ee0:	4053      	eors	r3, r2
    1ee2:	4a03      	ldr	r2, [pc, #12]	; (1ef0 <crc7_byte+0x2c>)
    1ee4:	5cd3      	ldrb	r3, [r2, r3]
}
    1ee6:	0018      	movs	r0, r3
    1ee8:	46bd      	mov	sp, r7
    1eea:	b002      	add	sp, #8
    1eec:	bd80      	pop	{r7, pc}
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	0000d71c 	.word	0x0000d71c

00001ef4 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
    1ef4:	b590      	push	{r4, r7, lr}
    1ef6:	b085      	sub	sp, #20
    1ef8:	af00      	add	r7, sp, #0
    1efa:	60b9      	str	r1, [r7, #8]
    1efc:	607a      	str	r2, [r7, #4]
    1efe:	230f      	movs	r3, #15
    1f00:	18fb      	adds	r3, r7, r3
    1f02:	1c02      	adds	r2, r0, #0
    1f04:	701a      	strb	r2, [r3, #0]
	while (len--)
    1f06:	e00e      	b.n	1f26 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
    1f08:	68bb      	ldr	r3, [r7, #8]
    1f0a:	1c5a      	adds	r2, r3, #1
    1f0c:	60ba      	str	r2, [r7, #8]
    1f0e:	781a      	ldrb	r2, [r3, #0]
    1f10:	230f      	movs	r3, #15
    1f12:	18fc      	adds	r4, r7, r3
    1f14:	230f      	movs	r3, #15
    1f16:	18fb      	adds	r3, r7, r3
    1f18:	781b      	ldrb	r3, [r3, #0]
    1f1a:	0011      	movs	r1, r2
    1f1c:	0018      	movs	r0, r3
    1f1e:	4b08      	ldr	r3, [pc, #32]	; (1f40 <crc7+0x4c>)
    1f20:	4798      	blx	r3
    1f22:	0003      	movs	r3, r0
    1f24:	7023      	strb	r3, [r4, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
}

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
	while (len--)
    1f26:	687b      	ldr	r3, [r7, #4]
    1f28:	1e5a      	subs	r2, r3, #1
    1f2a:	607a      	str	r2, [r7, #4]
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d1eb      	bne.n	1f08 <crc7+0x14>
		crc = crc7_byte(crc, *buffer++);
	return crc;
    1f30:	230f      	movs	r3, #15
    1f32:	18fb      	adds	r3, r7, r3
    1f34:	781b      	ldrb	r3, [r3, #0]
}
    1f36:	0018      	movs	r0, r3
    1f38:	46bd      	mov	sp, r7
    1f3a:	b005      	add	sp, #20
    1f3c:	bd90      	pop	{r4, r7, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	00001ec5 	.word	0x00001ec5

00001f44 <spi_cmd>:
	Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
    1f44:	b590      	push	{r4, r7, lr}
    1f46:	b089      	sub	sp, #36	; 0x24
    1f48:	af00      	add	r7, sp, #0
    1f4a:	60b9      	str	r1, [r7, #8]
    1f4c:	607a      	str	r2, [r7, #4]
    1f4e:	603b      	str	r3, [r7, #0]
    1f50:	230f      	movs	r3, #15
    1f52:	18fb      	adds	r3, r7, r3
    1f54:	1c02      	adds	r2, r0, #0
    1f56:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
    1f58:	231f      	movs	r3, #31
    1f5a:	18fb      	adds	r3, r7, r3
    1f5c:	2205      	movs	r2, #5
    1f5e:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
    1f60:	231e      	movs	r3, #30
    1f62:	18fb      	adds	r3, r7, r3
    1f64:	2201      	movs	r2, #1
    1f66:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
    1f68:	2314      	movs	r3, #20
    1f6a:	18fb      	adds	r3, r7, r3
    1f6c:	220f      	movs	r2, #15
    1f6e:	18ba      	adds	r2, r7, r2
    1f70:	7812      	ldrb	r2, [r2, #0]
    1f72:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
    1f74:	230f      	movs	r3, #15
    1f76:	18fb      	adds	r3, r7, r3
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	3bc1      	subs	r3, #193	; 0xc1
    1f7c:	2b0e      	cmp	r3, #14
    1f7e:	d900      	bls.n	1f82 <spi_cmd+0x3e>
    1f80:	e11b      	b.n	21ba <STACK_SIZE+0x1ba>
    1f82:	009a      	lsls	r2, r3, #2
    1f84:	4bb6      	ldr	r3, [pc, #728]	; (2260 <STACK_SIZE+0x260>)
    1f86:	18d3      	adds	r3, r2, r3
    1f88:	681b      	ldr	r3, [r3, #0]
    1f8a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
    1f8c:	68bb      	ldr	r3, [r7, #8]
    1f8e:	0c1b      	lsrs	r3, r3, #16
    1f90:	b2da      	uxtb	r2, r3
    1f92:	2314      	movs	r3, #20
    1f94:	18fb      	adds	r3, r7, r3
    1f96:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    1f98:	68bb      	ldr	r3, [r7, #8]
    1f9a:	0a1b      	lsrs	r3, r3, #8
    1f9c:	b2da      	uxtb	r2, r3
    1f9e:	2314      	movs	r3, #20
    1fa0:	18fb      	adds	r3, r7, r3
    1fa2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    1fa4:	68bb      	ldr	r3, [r7, #8]
    1fa6:	b2da      	uxtb	r2, r3
    1fa8:	2314      	movs	r3, #20
    1faa:	18fb      	adds	r3, r7, r3
    1fac:	70da      	strb	r2, [r3, #3]
		len = 5;
    1fae:	231f      	movs	r3, #31
    1fb0:	18fb      	adds	r3, r7, r3
    1fb2:	2205      	movs	r2, #5
    1fb4:	701a      	strb	r2, [r3, #0]
		break;
    1fb6:	e105      	b.n	21c4 <STACK_SIZE+0x1c4>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
    1fb8:	68bb      	ldr	r3, [r7, #8]
    1fba:	0a1b      	lsrs	r3, r3, #8
    1fbc:	b2da      	uxtb	r2, r3
    1fbe:	2314      	movs	r3, #20
    1fc0:	18fb      	adds	r3, r7, r3
    1fc2:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    1fc4:	2330      	movs	r3, #48	; 0x30
    1fc6:	18fb      	adds	r3, r7, r3
    1fc8:	781b      	ldrb	r3, [r3, #0]
    1fca:	2b00      	cmp	r3, #0
    1fcc:	d009      	beq.n	1fe2 <spi_cmd+0x9e>
    1fce:	2314      	movs	r3, #20
    1fd0:	18fb      	adds	r3, r7, r3
    1fd2:	785b      	ldrb	r3, [r3, #1]
    1fd4:	2280      	movs	r2, #128	; 0x80
    1fd6:	4252      	negs	r2, r2
    1fd8:	4313      	orrs	r3, r2
    1fda:	b2da      	uxtb	r2, r3
    1fdc:	2314      	movs	r3, #20
    1fde:	18fb      	adds	r3, r7, r3
    1fe0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
    1fe2:	68bb      	ldr	r3, [r7, #8]
    1fe4:	b2da      	uxtb	r2, r3
    1fe6:	2314      	movs	r3, #20
    1fe8:	18fb      	adds	r3, r7, r3
    1fea:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    1fec:	2314      	movs	r3, #20
    1fee:	18fb      	adds	r3, r7, r3
    1ff0:	2200      	movs	r2, #0
    1ff2:	70da      	strb	r2, [r3, #3]
		len = 5;
    1ff4:	231f      	movs	r3, #31
    1ff6:	18fb      	adds	r3, r7, r3
    1ff8:	2205      	movs	r2, #5
    1ffa:	701a      	strb	r2, [r3, #0]
		break;
    1ffc:	e0e2      	b.n	21c4 <STACK_SIZE+0x1c4>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
    1ffe:	2314      	movs	r3, #20
    2000:	18fb      	adds	r3, r7, r3
    2002:	2200      	movs	r2, #0
    2004:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2006:	2314      	movs	r3, #20
    2008:	18fb      	adds	r3, r7, r3
    200a:	2200      	movs	r2, #0
    200c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    200e:	2314      	movs	r3, #20
    2010:	18fb      	adds	r3, r7, r3
    2012:	2200      	movs	r2, #0
    2014:	70da      	strb	r2, [r3, #3]
		len = 5;
    2016:	231f      	movs	r3, #31
    2018:	18fb      	adds	r3, r7, r3
    201a:	2205      	movs	r2, #5
    201c:	701a      	strb	r2, [r3, #0]
		break;
    201e:	e0d1      	b.n	21c4 <STACK_SIZE+0x1c4>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
    2020:	2314      	movs	r3, #20
    2022:	18fb      	adds	r3, r7, r3
    2024:	2200      	movs	r2, #0
    2026:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
    2028:	2314      	movs	r3, #20
    202a:	18fb      	adds	r3, r7, r3
    202c:	2200      	movs	r2, #0
    202e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
    2030:	2314      	movs	r3, #20
    2032:	18fb      	adds	r3, r7, r3
    2034:	2200      	movs	r2, #0
    2036:	70da      	strb	r2, [r3, #3]
		len = 5;
    2038:	231f      	movs	r3, #31
    203a:	18fb      	adds	r3, r7, r3
    203c:	2205      	movs	r2, #5
    203e:	701a      	strb	r2, [r3, #0]
		break;
    2040:	e0c0      	b.n	21c4 <STACK_SIZE+0x1c4>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
    2042:	2314      	movs	r3, #20
    2044:	18fb      	adds	r3, r7, r3
    2046:	22ff      	movs	r2, #255	; 0xff
    2048:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
    204a:	2314      	movs	r3, #20
    204c:	18fb      	adds	r3, r7, r3
    204e:	22ff      	movs	r2, #255	; 0xff
    2050:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
    2052:	2314      	movs	r3, #20
    2054:	18fb      	adds	r3, r7, r3
    2056:	22ff      	movs	r2, #255	; 0xff
    2058:	70da      	strb	r2, [r3, #3]
		len = 5;
    205a:	231f      	movs	r3, #31
    205c:	18fb      	adds	r3, r7, r3
    205e:	2205      	movs	r2, #5
    2060:	701a      	strb	r2, [r3, #0]
		break;
    2062:	e0af      	b.n	21c4 <STACK_SIZE+0x1c4>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
    2064:	68bb      	ldr	r3, [r7, #8]
    2066:	0c1b      	lsrs	r3, r3, #16
    2068:	b2da      	uxtb	r2, r3
    206a:	2314      	movs	r3, #20
    206c:	18fb      	adds	r3, r7, r3
    206e:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    2070:	68bb      	ldr	r3, [r7, #8]
    2072:	0a1b      	lsrs	r3, r3, #8
    2074:	b2da      	uxtb	r2, r3
    2076:	2314      	movs	r3, #20
    2078:	18fb      	adds	r3, r7, r3
    207a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    207c:	68bb      	ldr	r3, [r7, #8]
    207e:	b2da      	uxtb	r2, r3
    2080:	2314      	movs	r3, #20
    2082:	18fb      	adds	r3, r7, r3
    2084:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
    2086:	683b      	ldr	r3, [r7, #0]
    2088:	0a1b      	lsrs	r3, r3, #8
    208a:	b2da      	uxtb	r2, r3
    208c:	2314      	movs	r3, #20
    208e:	18fb      	adds	r3, r7, r3
    2090:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
    2092:	683b      	ldr	r3, [r7, #0]
    2094:	b2da      	uxtb	r2, r3
    2096:	2314      	movs	r3, #20
    2098:	18fb      	adds	r3, r7, r3
    209a:	715a      	strb	r2, [r3, #5]
		len = 7;
    209c:	231f      	movs	r3, #31
    209e:	18fb      	adds	r3, r7, r3
    20a0:	2207      	movs	r2, #7
    20a2:	701a      	strb	r2, [r3, #0]
		break;
    20a4:	e08e      	b.n	21c4 <STACK_SIZE+0x1c4>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
    20a6:	68bb      	ldr	r3, [r7, #8]
    20a8:	0c1b      	lsrs	r3, r3, #16
    20aa:	b2da      	uxtb	r2, r3
    20ac:	2314      	movs	r3, #20
    20ae:	18fb      	adds	r3, r7, r3
    20b0:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    20b2:	68bb      	ldr	r3, [r7, #8]
    20b4:	0a1b      	lsrs	r3, r3, #8
    20b6:	b2da      	uxtb	r2, r3
    20b8:	2314      	movs	r3, #20
    20ba:	18fb      	adds	r3, r7, r3
    20bc:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
    20be:	68bb      	ldr	r3, [r7, #8]
    20c0:	b2da      	uxtb	r2, r3
    20c2:	2314      	movs	r3, #20
    20c4:	18fb      	adds	r3, r7, r3
    20c6:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
    20c8:	683b      	ldr	r3, [r7, #0]
    20ca:	0c1b      	lsrs	r3, r3, #16
    20cc:	b2da      	uxtb	r2, r3
    20ce:	2314      	movs	r3, #20
    20d0:	18fb      	adds	r3, r7, r3
    20d2:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
    20d4:	683b      	ldr	r3, [r7, #0]
    20d6:	0a1b      	lsrs	r3, r3, #8
    20d8:	b2da      	uxtb	r2, r3
    20da:	2314      	movs	r3, #20
    20dc:	18fb      	adds	r3, r7, r3
    20de:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
    20e0:	683b      	ldr	r3, [r7, #0]
    20e2:	b2da      	uxtb	r2, r3
    20e4:	2314      	movs	r3, #20
    20e6:	18fb      	adds	r3, r7, r3
    20e8:	719a      	strb	r2, [r3, #6]
		len = 8;
    20ea:	231f      	movs	r3, #31
    20ec:	18fb      	adds	r3, r7, r3
    20ee:	2208      	movs	r2, #8
    20f0:	701a      	strb	r2, [r3, #0]
		break;
    20f2:	e067      	b.n	21c4 <STACK_SIZE+0x1c4>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
    20f4:	68bb      	ldr	r3, [r7, #8]
    20f6:	0a1b      	lsrs	r3, r3, #8
    20f8:	b2da      	uxtb	r2, r3
    20fa:	2314      	movs	r3, #20
    20fc:	18fb      	adds	r3, r7, r3
    20fe:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
    2100:	2330      	movs	r3, #48	; 0x30
    2102:	18fb      	adds	r3, r7, r3
    2104:	781b      	ldrb	r3, [r3, #0]
    2106:	2b00      	cmp	r3, #0
    2108:	d009      	beq.n	211e <STACK_SIZE+0x11e>
    210a:	2314      	movs	r3, #20
    210c:	18fb      	adds	r3, r7, r3
    210e:	785b      	ldrb	r3, [r3, #1]
    2110:	2280      	movs	r2, #128	; 0x80
    2112:	4252      	negs	r2, r2
    2114:	4313      	orrs	r3, r2
    2116:	b2da      	uxtb	r2, r3
    2118:	2314      	movs	r3, #20
    211a:	18fb      	adds	r3, r7, r3
    211c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
    211e:	68bb      	ldr	r3, [r7, #8]
    2120:	b2da      	uxtb	r2, r3
    2122:	2314      	movs	r3, #20
    2124:	18fb      	adds	r3, r7, r3
    2126:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
    2128:	687b      	ldr	r3, [r7, #4]
    212a:	0e1b      	lsrs	r3, r3, #24
    212c:	b2da      	uxtb	r2, r3
    212e:	2314      	movs	r3, #20
    2130:	18fb      	adds	r3, r7, r3
    2132:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
    2134:	687b      	ldr	r3, [r7, #4]
    2136:	0c1b      	lsrs	r3, r3, #16
    2138:	b2da      	uxtb	r2, r3
    213a:	2314      	movs	r3, #20
    213c:	18fb      	adds	r3, r7, r3
    213e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
    2140:	687b      	ldr	r3, [r7, #4]
    2142:	0a1b      	lsrs	r3, r3, #8
    2144:	b2da      	uxtb	r2, r3
    2146:	2314      	movs	r3, #20
    2148:	18fb      	adds	r3, r7, r3
    214a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
    214c:	687b      	ldr	r3, [r7, #4]
    214e:	b2da      	uxtb	r2, r3
    2150:	2314      	movs	r3, #20
    2152:	18fb      	adds	r3, r7, r3
    2154:	719a      	strb	r2, [r3, #6]
		len = 8;
    2156:	231f      	movs	r3, #31
    2158:	18fb      	adds	r3, r7, r3
    215a:	2208      	movs	r2, #8
    215c:	701a      	strb	r2, [r3, #0]
		break;
    215e:	e031      	b.n	21c4 <STACK_SIZE+0x1c4>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
    2160:	68bb      	ldr	r3, [r7, #8]
    2162:	0c1b      	lsrs	r3, r3, #16
    2164:	b2da      	uxtb	r2, r3
    2166:	2314      	movs	r3, #20
    2168:	18fb      	adds	r3, r7, r3
    216a:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
    216c:	68bb      	ldr	r3, [r7, #8]
    216e:	0a1b      	lsrs	r3, r3, #8
    2170:	b2da      	uxtb	r2, r3
    2172:	2314      	movs	r3, #20
    2174:	18fb      	adds	r3, r7, r3
    2176:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
    2178:	68bb      	ldr	r3, [r7, #8]
    217a:	b2da      	uxtb	r2, r3
    217c:	2314      	movs	r3, #20
    217e:	18fb      	adds	r3, r7, r3
    2180:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
    2182:	687b      	ldr	r3, [r7, #4]
    2184:	0e1b      	lsrs	r3, r3, #24
    2186:	b2da      	uxtb	r2, r3
    2188:	2314      	movs	r3, #20
    218a:	18fb      	adds	r3, r7, r3
    218c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
    218e:	687b      	ldr	r3, [r7, #4]
    2190:	0c1b      	lsrs	r3, r3, #16
    2192:	b2da      	uxtb	r2, r3
    2194:	2314      	movs	r3, #20
    2196:	18fb      	adds	r3, r7, r3
    2198:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
    219a:	687b      	ldr	r3, [r7, #4]
    219c:	0a1b      	lsrs	r3, r3, #8
    219e:	b2da      	uxtb	r2, r3
    21a0:	2314      	movs	r3, #20
    21a2:	18fb      	adds	r3, r7, r3
    21a4:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
    21a6:	687b      	ldr	r3, [r7, #4]
    21a8:	b2da      	uxtb	r2, r3
    21aa:	2314      	movs	r3, #20
    21ac:	18fb      	adds	r3, r7, r3
    21ae:	71da      	strb	r2, [r3, #7]
		len = 9;
    21b0:	231f      	movs	r3, #31
    21b2:	18fb      	adds	r3, r7, r3
    21b4:	2209      	movs	r2, #9
    21b6:	701a      	strb	r2, [r3, #0]
		break;
    21b8:	e004      	b.n	21c4 <STACK_SIZE+0x1c4>
	default:
		result = N_FAIL;
    21ba:	231e      	movs	r3, #30
    21bc:	18fb      	adds	r3, r7, r3
    21be:	2200      	movs	r2, #0
    21c0:	701a      	strb	r2, [r3, #0]
		break;
    21c2:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
    21c4:	231e      	movs	r3, #30
    21c6:	18fb      	adds	r3, r7, r3
    21c8:	781b      	ldrb	r3, [r3, #0]
    21ca:	b25b      	sxtb	r3, r3
    21cc:	2b00      	cmp	r3, #0
    21ce:	d03e      	beq.n	224e <STACK_SIZE+0x24e>
		if (!gu8Crc_off)
    21d0:	4b24      	ldr	r3, [pc, #144]	; (2264 <STACK_SIZE+0x264>)
    21d2:	781b      	ldrb	r3, [r3, #0]
    21d4:	2b00      	cmp	r3, #0
    21d6:	d115      	bne.n	2204 <STACK_SIZE+0x204>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
    21d8:	231f      	movs	r3, #31
    21da:	18fb      	adds	r3, r7, r3
    21dc:	781b      	ldrb	r3, [r3, #0]
    21de:	1e5c      	subs	r4, r3, #1
    21e0:	231f      	movs	r3, #31
    21e2:	18fb      	adds	r3, r7, r3
    21e4:	781b      	ldrb	r3, [r3, #0]
    21e6:	3b01      	subs	r3, #1
    21e8:	001a      	movs	r2, r3
    21ea:	2314      	movs	r3, #20
    21ec:	18fb      	adds	r3, r7, r3
    21ee:	0019      	movs	r1, r3
    21f0:	207f      	movs	r0, #127	; 0x7f
    21f2:	4b1d      	ldr	r3, [pc, #116]	; (2268 <STACK_SIZE+0x268>)
    21f4:	4798      	blx	r3
    21f6:	0003      	movs	r3, r0
    21f8:	18db      	adds	r3, r3, r3
    21fa:	b2da      	uxtb	r2, r3
    21fc:	2314      	movs	r3, #20
    21fe:	18fb      	adds	r3, r7, r3
    2200:	551a      	strb	r2, [r3, r4]
    2202:	e006      	b.n	2212 <STACK_SIZE+0x212>
		else
			len-=1;
    2204:	231f      	movs	r3, #31
    2206:	18fb      	adds	r3, r7, r3
    2208:	221f      	movs	r2, #31
    220a:	18ba      	adds	r2, r7, r2
    220c:	7812      	ldrb	r2, [r2, #0]
    220e:	3a01      	subs	r2, #1
    2210:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
    2212:	231f      	movs	r3, #31
    2214:	18fb      	adds	r3, r7, r3
    2216:	781b      	ldrb	r3, [r3, #0]
    2218:	b29a      	uxth	r2, r3
    221a:	2314      	movs	r3, #20
    221c:	18fb      	adds	r3, r7, r3
    221e:	0011      	movs	r1, r2
    2220:	0018      	movs	r0, r3
    2222:	4b12      	ldr	r3, [pc, #72]	; (226c <STACK_SIZE+0x26c>)
    2224:	4798      	blx	r3
    2226:	1e03      	subs	r3, r0, #0
    2228:	d011      	beq.n	224e <STACK_SIZE+0x24e>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
    222a:	2384      	movs	r3, #132	; 0x84
    222c:	005a      	lsls	r2, r3, #1
    222e:	4910      	ldr	r1, [pc, #64]	; (2270 <STACK_SIZE+0x270>)
    2230:	4b10      	ldr	r3, [pc, #64]	; (2274 <STACK_SIZE+0x274>)
    2232:	0018      	movs	r0, r3
    2234:	4b10      	ldr	r3, [pc, #64]	; (2278 <STACK_SIZE+0x278>)
    2236:	4798      	blx	r3
    2238:	4b10      	ldr	r3, [pc, #64]	; (227c <STACK_SIZE+0x27c>)
    223a:	0018      	movs	r0, r3
    223c:	4b10      	ldr	r3, [pc, #64]	; (2280 <STACK_SIZE+0x280>)
    223e:	4798      	blx	r3
    2240:	200d      	movs	r0, #13
    2242:	4b10      	ldr	r3, [pc, #64]	; (2284 <STACK_SIZE+0x284>)
    2244:	4798      	blx	r3
			result = N_FAIL;
    2246:	231e      	movs	r3, #30
    2248:	18fb      	adds	r3, r7, r3
    224a:	2200      	movs	r2, #0
    224c:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
    224e:	231e      	movs	r3, #30
    2250:	18fb      	adds	r3, r7, r3
    2252:	781b      	ldrb	r3, [r3, #0]
    2254:	b25b      	sxtb	r3, r3
}
    2256:	0018      	movs	r0, r3
    2258:	46bd      	mov	sp, r7
    225a:	b009      	add	sp, #36	; 0x24
    225c:	bd90      	pop	{r4, r7, pc}
    225e:	46c0      	nop			; (mov r8, r8)
    2260:	0000dcd4 	.word	0x0000dcd4
    2264:	200000c4 	.word	0x200000c4
    2268:	00001ef5 	.word	0x00001ef5
    226c:	00001e81 	.word	0x00001e81
    2270:	0000dd10 	.word	0x0000dd10
    2274:	0000d81c 	.word	0x0000d81c
    2278:	0000c0d1 	.word	0x0000c0d1
    227c:	0000d830 	.word	0x0000d830
    2280:	0000c1f1 	.word	0x0000c1f1
    2284:	0000c105 	.word	0x0000c105

00002288 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
    2288:	b580      	push	{r7, lr}
    228a:	b084      	sub	sp, #16
    228c:	af00      	add	r7, sp, #0
    228e:	0002      	movs	r2, r0
    2290:	1dfb      	adds	r3, r7, #7
    2292:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
    2294:	230f      	movs	r3, #15
    2296:	18fb      	adds	r3, r7, r3
    2298:	2201      	movs	r2, #1
    229a:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
    229c:	1dfb      	adds	r3, r7, #7
    229e:	781b      	ldrb	r3, [r3, #0]
    22a0:	2bcf      	cmp	r3, #207	; 0xcf
    22a2:	d007      	beq.n	22b4 <spi_cmd_rsp+0x2c>
    22a4:	1dfb      	adds	r3, r7, #7
    22a6:	781b      	ldrb	r3, [r3, #0]
    22a8:	2bc5      	cmp	r3, #197	; 0xc5
    22aa:	d003      	beq.n	22b4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
    22ac:	1dfb      	adds	r3, r7, #7
    22ae:	781b      	ldrb	r3, [r3, #0]
    22b0:	2bc6      	cmp	r3, #198	; 0xc6
    22b2:	d10c      	bne.n	22ce <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    22b4:	230d      	movs	r3, #13
    22b6:	18fb      	adds	r3, r7, r3
    22b8:	2101      	movs	r1, #1
    22ba:	0018      	movs	r0, r3
    22bc:	4b3a      	ldr	r3, [pc, #232]	; (23a8 <spi_cmd_rsp+0x120>)
    22be:	4798      	blx	r3
    22c0:	1e03      	subs	r3, r0, #0
    22c2:	d004      	beq.n	22ce <spi_cmd_rsp+0x46>
			result = N_FAIL;
    22c4:	230f      	movs	r3, #15
    22c6:	18fb      	adds	r3, r7, r3
    22c8:	2200      	movs	r2, #0
    22ca:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    22cc:	e063      	b.n	2396 <spi_cmd_rsp+0x10e>
		}
	}

	/* wait for response */
	s8RetryCnt = 10;
    22ce:	230e      	movs	r3, #14
    22d0:	18fb      	adds	r3, r7, r3
    22d2:	220a      	movs	r2, #10
    22d4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    22d6:	230d      	movs	r3, #13
    22d8:	18fb      	adds	r3, r7, r3
    22da:	2101      	movs	r1, #1
    22dc:	0018      	movs	r0, r3
    22de:	4b32      	ldr	r3, [pc, #200]	; (23a8 <spi_cmd_rsp+0x120>)
    22e0:	4798      	blx	r3
    22e2:	1e03      	subs	r3, r0, #0
    22e4:	d013      	beq.n	230e <spi_cmd_rsp+0x86>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    22e6:	2328      	movs	r3, #40	; 0x28
    22e8:	33ff      	adds	r3, #255	; 0xff
    22ea:	001a      	movs	r2, r3
    22ec:	492f      	ldr	r1, [pc, #188]	; (23ac <spi_cmd_rsp+0x124>)
    22ee:	4b30      	ldr	r3, [pc, #192]	; (23b0 <spi_cmd_rsp+0x128>)
    22f0:	0018      	movs	r0, r3
    22f2:	4b30      	ldr	r3, [pc, #192]	; (23b4 <spi_cmd_rsp+0x12c>)
    22f4:	4798      	blx	r3
    22f6:	4b30      	ldr	r3, [pc, #192]	; (23b8 <spi_cmd_rsp+0x130>)
    22f8:	0018      	movs	r0, r3
    22fa:	4b30      	ldr	r3, [pc, #192]	; (23bc <spi_cmd_rsp+0x134>)
    22fc:	4798      	blx	r3
    22fe:	200d      	movs	r0, #13
    2300:	4b2f      	ldr	r3, [pc, #188]	; (23c0 <spi_cmd_rsp+0x138>)
    2302:	4798      	blx	r3
			result = N_FAIL;
    2304:	230f      	movs	r3, #15
    2306:	18fb      	adds	r3, r7, r3
    2308:	2200      	movs	r2, #0
    230a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    230c:	e043      	b.n	2396 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
    230e:	230d      	movs	r3, #13
    2310:	18fb      	adds	r3, r7, r3
    2312:	781b      	ldrb	r3, [r3, #0]
    2314:	1dfa      	adds	r2, r7, #7
    2316:	7812      	ldrb	r2, [r2, #0]
    2318:	429a      	cmp	r2, r3
    231a:	d00b      	beq.n	2334 <spi_cmd_rsp+0xac>
    231c:	230e      	movs	r3, #14
    231e:	18fb      	adds	r3, r7, r3
    2320:	781b      	ldrb	r3, [r3, #0]
    2322:	b25b      	sxtb	r3, r3
    2324:	b2da      	uxtb	r2, r3
    2326:	3a01      	subs	r2, #1
    2328:	b2d1      	uxtb	r1, r2
    232a:	220e      	movs	r2, #14
    232c:	18ba      	adds	r2, r7, r2
    232e:	7011      	strb	r1, [r2, #0]
    2330:	2b00      	cmp	r3, #0
    2332:	dcd0      	bgt.n	22d6 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = 10;
    2334:	230e      	movs	r3, #14
    2336:	18fb      	adds	r3, r7, r3
    2338:	220a      	movs	r2, #10
    233a:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    233c:	230d      	movs	r3, #13
    233e:	18fb      	adds	r3, r7, r3
    2340:	2101      	movs	r1, #1
    2342:	0018      	movs	r0, r3
    2344:	4b18      	ldr	r3, [pc, #96]	; (23a8 <spi_cmd_rsp+0x120>)
    2346:	4798      	blx	r3
    2348:	1e03      	subs	r3, r0, #0
    234a:	d013      	beq.n	2374 <spi_cmd_rsp+0xec>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
    234c:	2336      	movs	r3, #54	; 0x36
    234e:	33ff      	adds	r3, #255	; 0xff
    2350:	001a      	movs	r2, r3
    2352:	4916      	ldr	r1, [pc, #88]	; (23ac <spi_cmd_rsp+0x124>)
    2354:	4b16      	ldr	r3, [pc, #88]	; (23b0 <spi_cmd_rsp+0x128>)
    2356:	0018      	movs	r0, r3
    2358:	4b16      	ldr	r3, [pc, #88]	; (23b4 <spi_cmd_rsp+0x12c>)
    235a:	4798      	blx	r3
    235c:	4b16      	ldr	r3, [pc, #88]	; (23b8 <spi_cmd_rsp+0x130>)
    235e:	0018      	movs	r0, r3
    2360:	4b16      	ldr	r3, [pc, #88]	; (23bc <spi_cmd_rsp+0x134>)
    2362:	4798      	blx	r3
    2364:	200d      	movs	r0, #13
    2366:	4b16      	ldr	r3, [pc, #88]	; (23c0 <spi_cmd_rsp+0x138>)
    2368:	4798      	blx	r3
			result = N_FAIL;
    236a:	230f      	movs	r3, #15
    236c:	18fb      	adds	r3, r7, r3
    236e:	2200      	movs	r2, #0
    2370:	701a      	strb	r2, [r3, #0]
			goto _fail_;
    2372:	e010      	b.n	2396 <spi_cmd_rsp+0x10e>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
    2374:	230d      	movs	r3, #13
    2376:	18fb      	adds	r3, r7, r3
    2378:	781b      	ldrb	r3, [r3, #0]
    237a:	2b00      	cmp	r3, #0
    237c:	d00b      	beq.n	2396 <spi_cmd_rsp+0x10e>
    237e:	230e      	movs	r3, #14
    2380:	18fb      	adds	r3, r7, r3
    2382:	781b      	ldrb	r3, [r3, #0]
    2384:	b25b      	sxtb	r3, r3
    2386:	b2da      	uxtb	r2, r3
    2388:	3a01      	subs	r2, #1
    238a:	b2d1      	uxtb	r1, r2
    238c:	220e      	movs	r2, #14
    238e:	18ba      	adds	r2, r7, r2
    2390:	7011      	strb	r1, [r2, #0]
    2392:	2b00      	cmp	r3, #0
    2394:	dcd2      	bgt.n	233c <spi_cmd_rsp+0xb4>

_fail_:

	return result;
    2396:	230f      	movs	r3, #15
    2398:	18fb      	adds	r3, r7, r3
    239a:	781b      	ldrb	r3, [r3, #0]
    239c:	b25b      	sxtb	r3, r3
}
    239e:	0018      	movs	r0, r3
    23a0:	46bd      	mov	sp, r7
    23a2:	b004      	add	sp, #16
    23a4:	bd80      	pop	{r7, pc}
    23a6:	46c0      	nop			; (mov r8, r8)
    23a8:	00001e3d 	.word	0x00001e3d
    23ac:	0000dd18 	.word	0x0000dd18
    23b0:	0000d81c 	.word	0x0000d81c
    23b4:	0000c0d1 	.word	0x0000c0d1
    23b8:	0000d85c 	.word	0x0000d85c
    23bc:	0000c1f1 	.word	0x0000c1f1
    23c0:	0000c105 	.word	0x0000c105

000023c4 <spi_data_read>:

static sint8 spi_data_read(uint8 *b, uint16 sz,uint8 clockless)
{
    23c4:	b580      	push	{r7, lr}
    23c6:	b086      	sub	sp, #24
    23c8:	af00      	add	r7, sp, #0
    23ca:	6078      	str	r0, [r7, #4]
    23cc:	0008      	movs	r0, r1
    23ce:	0011      	movs	r1, r2
    23d0:	1cbb      	adds	r3, r7, #2
    23d2:	1c02      	adds	r2, r0, #0
    23d4:	801a      	strh	r2, [r3, #0]
    23d6:	1c7b      	adds	r3, r7, #1
    23d8:	1c0a      	adds	r2, r1, #0
    23da:	701a      	strb	r2, [r3, #0]
	sint16 retry, ix, nbytes;
	sint8 result = N_OK;
    23dc:	2311      	movs	r3, #17
    23de:	18fb      	adds	r3, r7, r3
    23e0:	2201      	movs	r2, #1
    23e2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    23e4:	2314      	movs	r3, #20
    23e6:	18fb      	adds	r3, r7, r3
    23e8:	2200      	movs	r2, #0
    23ea:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    23ec:	1cbb      	adds	r3, r7, #2
    23ee:	881a      	ldrh	r2, [r3, #0]
    23f0:	2380      	movs	r3, #128	; 0x80
    23f2:	019b      	lsls	r3, r3, #6
    23f4:	429a      	cmp	r2, r3
    23f6:	d805      	bhi.n	2404 <spi_data_read+0x40>
			nbytes = sz;
    23f8:	2312      	movs	r3, #18
    23fa:	18fb      	adds	r3, r7, r3
    23fc:	1cba      	adds	r2, r7, #2
    23fe:	8812      	ldrh	r2, [r2, #0]
    2400:	801a      	strh	r2, [r3, #0]
    2402:	e004      	b.n	240e <spi_data_read+0x4a>
		else
			nbytes = DATA_PKT_SZ;
    2404:	2312      	movs	r3, #18
    2406:	18fb      	adds	r3, r7, r3
    2408:	2280      	movs	r2, #128	; 0x80
    240a:	0192      	lsls	r2, r2, #6
    240c:	801a      	strh	r2, [r3, #0]

		/**
			Data Respnose header
		**/
		retry = 10;
    240e:	2316      	movs	r3, #22
    2410:	18fb      	adds	r3, r7, r3
    2412:	220a      	movs	r2, #10
    2414:	801a      	strh	r2, [r3, #0]
		do {
			if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
    2416:	230b      	movs	r3, #11
    2418:	18fb      	adds	r3, r7, r3
    241a:	2101      	movs	r1, #1
    241c:	0018      	movs	r0, r3
    241e:	4b5f      	ldr	r3, [pc, #380]	; (259c <spi_data_read+0x1d8>)
    2420:	4798      	blx	r3
    2422:	1e03      	subs	r3, r0, #0
    2424:	d013      	beq.n	244e <spi_data_read+0x8a>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
    2426:	2358      	movs	r3, #88	; 0x58
    2428:	33ff      	adds	r3, #255	; 0xff
    242a:	001a      	movs	r2, r3
    242c:	495c      	ldr	r1, [pc, #368]	; (25a0 <spi_data_read+0x1dc>)
    242e:	4b5d      	ldr	r3, [pc, #372]	; (25a4 <spi_data_read+0x1e0>)
    2430:	0018      	movs	r0, r3
    2432:	4b5d      	ldr	r3, [pc, #372]	; (25a8 <spi_data_read+0x1e4>)
    2434:	4798      	blx	r3
    2436:	4b5d      	ldr	r3, [pc, #372]	; (25ac <spi_data_read+0x1e8>)
    2438:	0018      	movs	r0, r3
    243a:	4b5d      	ldr	r3, [pc, #372]	; (25b0 <spi_data_read+0x1ec>)
    243c:	4798      	blx	r3
    243e:	200d      	movs	r0, #13
    2440:	4b5c      	ldr	r3, [pc, #368]	; (25b4 <spi_data_read+0x1f0>)
    2442:	4798      	blx	r3
				result = N_FAIL;
    2444:	2311      	movs	r3, #17
    2446:	18fb      	adds	r3, r7, r3
    2448:	2200      	movs	r2, #0
    244a:	701a      	strb	r2, [r3, #0]
				break;
    244c:	e017      	b.n	247e <spi_data_read+0xba>
			}
			if (((rsp >> 4) & 0xf) == 0xf)
    244e:	230b      	movs	r3, #11
    2450:	18fb      	adds	r3, r7, r3
    2452:	781b      	ldrb	r3, [r3, #0]
    2454:	091b      	lsrs	r3, r3, #4
    2456:	b2db      	uxtb	r3, r3
    2458:	001a      	movs	r2, r3
    245a:	230f      	movs	r3, #15
    245c:	4013      	ands	r3, r2
    245e:	2b0f      	cmp	r3, #15
    2460:	d00c      	beq.n	247c <spi_data_read+0xb8>
				break;
		} while (retry--);
    2462:	2316      	movs	r3, #22
    2464:	18fb      	adds	r3, r7, r3
    2466:	2200      	movs	r2, #0
    2468:	5e9b      	ldrsh	r3, [r3, r2]
    246a:	b29a      	uxth	r2, r3
    246c:	3a01      	subs	r2, #1
    246e:	b291      	uxth	r1, r2
    2470:	2216      	movs	r2, #22
    2472:	18ba      	adds	r2, r7, r2
    2474:	8011      	strh	r1, [r2, #0]
    2476:	2b00      	cmp	r3, #0
    2478:	d1cd      	bne.n	2416 <spi_data_read+0x52>
    247a:	e000      	b.n	247e <spi_data_read+0xba>
				M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
				result = N_FAIL;
				break;
			}
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
    247c:	46c0      	nop			; (mov r8, r8)
		} while (retry--);

		if (result == N_FAIL)
    247e:	2311      	movs	r3, #17
    2480:	18fb      	adds	r3, r7, r3
    2482:	781b      	ldrb	r3, [r3, #0]
    2484:	b25b      	sxtb	r3, r3
    2486:	2b00      	cmp	r3, #0
    2488:	d100      	bne.n	248c <spi_data_read+0xc8>
    248a:	e07d      	b.n	2588 <spi_data_read+0x1c4>
			break;

		if (retry <= 0) {
    248c:	2316      	movs	r3, #22
    248e:	18fb      	adds	r3, r7, r3
    2490:	2200      	movs	r2, #0
    2492:	5e9b      	ldrsh	r3, [r3, r2]
    2494:	2b00      	cmp	r3, #0
    2496:	dc18      	bgt.n	24ca <spi_data_read+0x106>
			M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
    2498:	2364      	movs	r3, #100	; 0x64
    249a:	33ff      	adds	r3, #255	; 0xff
    249c:	001a      	movs	r2, r3
    249e:	4940      	ldr	r1, [pc, #256]	; (25a0 <spi_data_read+0x1dc>)
    24a0:	4b40      	ldr	r3, [pc, #256]	; (25a4 <spi_data_read+0x1e0>)
    24a2:	0018      	movs	r0, r3
    24a4:	4b40      	ldr	r3, [pc, #256]	; (25a8 <spi_data_read+0x1e4>)
    24a6:	4798      	blx	r3
    24a8:	230b      	movs	r3, #11
    24aa:	18fb      	adds	r3, r7, r3
    24ac:	781b      	ldrb	r3, [r3, #0]
    24ae:	001a      	movs	r2, r3
    24b0:	4b41      	ldr	r3, [pc, #260]	; (25b8 <spi_data_read+0x1f4>)
    24b2:	0011      	movs	r1, r2
    24b4:	0018      	movs	r0, r3
    24b6:	4b3c      	ldr	r3, [pc, #240]	; (25a8 <spi_data_read+0x1e4>)
    24b8:	4798      	blx	r3
    24ba:	200d      	movs	r0, #13
    24bc:	4b3d      	ldr	r3, [pc, #244]	; (25b4 <spi_data_read+0x1f0>)
    24be:	4798      	blx	r3
			result = N_FAIL;
    24c0:	2311      	movs	r3, #17
    24c2:	18fb      	adds	r3, r7, r3
    24c4:	2200      	movs	r2, #0
    24c6:	701a      	strb	r2, [r3, #0]
			break;
    24c8:	e05f      	b.n	258a <spi_data_read+0x1c6>
		}

		/**
			Read bytes
		**/
		if (M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
    24ca:	2314      	movs	r3, #20
    24cc:	18fb      	adds	r3, r7, r3
    24ce:	2200      	movs	r2, #0
    24d0:	5e9b      	ldrsh	r3, [r3, r2]
    24d2:	687a      	ldr	r2, [r7, #4]
    24d4:	18d2      	adds	r2, r2, r3
    24d6:	2312      	movs	r3, #18
    24d8:	18fb      	adds	r3, r7, r3
    24da:	881b      	ldrh	r3, [r3, #0]
    24dc:	0019      	movs	r1, r3
    24de:	0010      	movs	r0, r2
    24e0:	4b2e      	ldr	r3, [pc, #184]	; (259c <spi_data_read+0x1d8>)
    24e2:	4798      	blx	r3
    24e4:	1e03      	subs	r3, r0, #0
    24e6:	d012      	beq.n	250e <spi_data_read+0x14a>
			M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
    24e8:	23b6      	movs	r3, #182	; 0xb6
    24ea:	005a      	lsls	r2, r3, #1
    24ec:	492c      	ldr	r1, [pc, #176]	; (25a0 <spi_data_read+0x1dc>)
    24ee:	4b2d      	ldr	r3, [pc, #180]	; (25a4 <spi_data_read+0x1e0>)
    24f0:	0018      	movs	r0, r3
    24f2:	4b2d      	ldr	r3, [pc, #180]	; (25a8 <spi_data_read+0x1e4>)
    24f4:	4798      	blx	r3
    24f6:	4b31      	ldr	r3, [pc, #196]	; (25bc <spi_data_read+0x1f8>)
    24f8:	0018      	movs	r0, r3
    24fa:	4b2d      	ldr	r3, [pc, #180]	; (25b0 <spi_data_read+0x1ec>)
    24fc:	4798      	blx	r3
    24fe:	200d      	movs	r0, #13
    2500:	4b2c      	ldr	r3, [pc, #176]	; (25b4 <spi_data_read+0x1f0>)
    2502:	4798      	blx	r3
			result = N_FAIL;
    2504:	2311      	movs	r3, #17
    2506:	18fb      	adds	r3, r7, r3
    2508:	2200      	movs	r2, #0
    250a:	701a      	strb	r2, [r3, #0]
			break;
    250c:	e03d      	b.n	258a <spi_data_read+0x1c6>
		}
		if(!clockless)
    250e:	1c7b      	adds	r3, r7, #1
    2510:	781b      	ldrb	r3, [r3, #0]
    2512:	2b00      	cmp	r3, #0
    2514:	d11f      	bne.n	2556 <spi_data_read+0x192>
		{
			/**
			Read Crc
			**/
			if (!gu8Crc_off) {
    2516:	4b2a      	ldr	r3, [pc, #168]	; (25c0 <spi_data_read+0x1fc>)
    2518:	781b      	ldrb	r3, [r3, #0]
    251a:	2b00      	cmp	r3, #0
    251c:	d11b      	bne.n	2556 <spi_data_read+0x192>
				if (M2M_SUCCESS != nmi_spi_read(crc, 2)) {
    251e:	230c      	movs	r3, #12
    2520:	18fb      	adds	r3, r7, r3
    2522:	2102      	movs	r1, #2
    2524:	0018      	movs	r0, r3
    2526:	4b1d      	ldr	r3, [pc, #116]	; (259c <spi_data_read+0x1d8>)
    2528:	4798      	blx	r3
    252a:	1e03      	subs	r3, r0, #0
    252c:	d013      	beq.n	2556 <spi_data_read+0x192>
					M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
    252e:	2378      	movs	r3, #120	; 0x78
    2530:	33ff      	adds	r3, #255	; 0xff
    2532:	001a      	movs	r2, r3
    2534:	491a      	ldr	r1, [pc, #104]	; (25a0 <spi_data_read+0x1dc>)
    2536:	4b1b      	ldr	r3, [pc, #108]	; (25a4 <spi_data_read+0x1e0>)
    2538:	0018      	movs	r0, r3
    253a:	4b1b      	ldr	r3, [pc, #108]	; (25a8 <spi_data_read+0x1e4>)
    253c:	4798      	blx	r3
    253e:	4b21      	ldr	r3, [pc, #132]	; (25c4 <spi_data_read+0x200>)
    2540:	0018      	movs	r0, r3
    2542:	4b1b      	ldr	r3, [pc, #108]	; (25b0 <spi_data_read+0x1ec>)
    2544:	4798      	blx	r3
    2546:	200d      	movs	r0, #13
    2548:	4b1a      	ldr	r3, [pc, #104]	; (25b4 <spi_data_read+0x1f0>)
    254a:	4798      	blx	r3
					result = N_FAIL;
    254c:	2311      	movs	r3, #17
    254e:	18fb      	adds	r3, r7, r3
    2550:	2200      	movs	r2, #0
    2552:	701a      	strb	r2, [r3, #0]
					break;
    2554:	e019      	b.n	258a <spi_data_read+0x1c6>
				}
			}
		}
		ix += nbytes;
    2556:	2314      	movs	r3, #20
    2558:	18fb      	adds	r3, r7, r3
    255a:	881a      	ldrh	r2, [r3, #0]
    255c:	2312      	movs	r3, #18
    255e:	18fb      	adds	r3, r7, r3
    2560:	881b      	ldrh	r3, [r3, #0]
    2562:	18d3      	adds	r3, r2, r3
    2564:	b29a      	uxth	r2, r3
    2566:	2314      	movs	r3, #20
    2568:	18fb      	adds	r3, r7, r3
    256a:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    256c:	2312      	movs	r3, #18
    256e:	18fb      	adds	r3, r7, r3
    2570:	881a      	ldrh	r2, [r3, #0]
    2572:	1cbb      	adds	r3, r7, #2
    2574:	1cb9      	adds	r1, r7, #2
    2576:	8809      	ldrh	r1, [r1, #0]
    2578:	1a8a      	subs	r2, r1, r2
    257a:	801a      	strh	r2, [r3, #0]

	} while (sz);
    257c:	1cbb      	adds	r3, r7, #2
    257e:	881b      	ldrh	r3, [r3, #0]
    2580:	2b00      	cmp	r3, #0
    2582:	d000      	beq.n	2586 <spi_data_read+0x1c2>
    2584:	e732      	b.n	23ec <spi_data_read+0x28>
    2586:	e000      	b.n	258a <spi_data_read+0x1c6>
			if (((rsp >> 4) & 0xf) == 0xf)
				break;
		} while (retry--);

		if (result == N_FAIL)
			break;
    2588:	46c0      	nop			; (mov r8, r8)
		ix += nbytes;
		sz -= nbytes;

	} while (sz);

	return result;
    258a:	2311      	movs	r3, #17
    258c:	18fb      	adds	r3, r7, r3
    258e:	781b      	ldrb	r3, [r3, #0]
    2590:	b25b      	sxtb	r3, r3
}
    2592:	0018      	movs	r0, r3
    2594:	46bd      	mov	sp, r7
    2596:	b006      	add	sp, #24
    2598:	bd80      	pop	{r7, pc}
    259a:	46c0      	nop			; (mov r8, r8)
    259c:	00001e3d 	.word	0x00001e3d
    25a0:	0000dd24 	.word	0x0000dd24
    25a4:	0000d81c 	.word	0x0000d81c
    25a8:	0000c0d1 	.word	0x0000c0d1
    25ac:	0000d890 	.word	0x0000d890
    25b0:	0000c1f1 	.word	0x0000c1f1
    25b4:	0000c105 	.word	0x0000c105
    25b8:	0000d8c4 	.word	0x0000d8c4
    25bc:	0000d8f4 	.word	0x0000d8f4
    25c0:	200000c4 	.word	0x200000c4
    25c4:	0000d924 	.word	0x0000d924

000025c8 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
    25c8:	b580      	push	{r7, lr}
    25ca:	b086      	sub	sp, #24
    25cc:	af00      	add	r7, sp, #0
    25ce:	6078      	str	r0, [r7, #4]
    25d0:	000a      	movs	r2, r1
    25d2:	1cbb      	adds	r3, r7, #2
    25d4:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
    25d6:	2313      	movs	r3, #19
    25d8:	18fb      	adds	r3, r7, r3
    25da:	2201      	movs	r2, #1
    25dc:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
    25de:	230c      	movs	r3, #12
    25e0:	18fb      	adds	r3, r7, r3
    25e2:	2200      	movs	r2, #0
    25e4:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
    25e6:	2316      	movs	r3, #22
    25e8:	18fb      	adds	r3, r7, r3
    25ea:	2200      	movs	r2, #0
    25ec:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
    25ee:	1cbb      	adds	r3, r7, #2
    25f0:	881a      	ldrh	r2, [r3, #0]
    25f2:	2380      	movs	r3, #128	; 0x80
    25f4:	019b      	lsls	r3, r3, #6
    25f6:	429a      	cmp	r2, r3
    25f8:	d805      	bhi.n	2606 <spi_data_write+0x3e>
			nbytes = sz;
    25fa:	2314      	movs	r3, #20
    25fc:	18fb      	adds	r3, r7, r3
    25fe:	1cba      	adds	r2, r7, #2
    2600:	8812      	ldrh	r2, [r2, #0]
    2602:	801a      	strh	r2, [r3, #0]
    2604:	e004      	b.n	2610 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
    2606:	2314      	movs	r3, #20
    2608:	18fb      	adds	r3, r7, r3
    260a:	2280      	movs	r2, #128	; 0x80
    260c:	0192      	lsls	r2, r2, #6
    260e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
    2610:	2311      	movs	r3, #17
    2612:	18fb      	adds	r3, r7, r3
    2614:	22f0      	movs	r2, #240	; 0xf0
    2616:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
    2618:	2316      	movs	r3, #22
    261a:	18fb      	adds	r3, r7, r3
    261c:	2200      	movs	r2, #0
    261e:	5e9b      	ldrsh	r3, [r3, r2]
    2620:	2b00      	cmp	r3, #0
    2622:	d10f      	bne.n	2644 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
    2624:	1cbb      	adds	r3, r7, #2
    2626:	881a      	ldrh	r2, [r3, #0]
    2628:	2380      	movs	r3, #128	; 0x80
    262a:	019b      	lsls	r3, r3, #6
    262c:	429a      	cmp	r2, r3
    262e:	d804      	bhi.n	263a <spi_data_write+0x72>
				order = 0x3;
    2630:	2312      	movs	r3, #18
    2632:	18fb      	adds	r3, r7, r3
    2634:	2203      	movs	r2, #3
    2636:	701a      	strb	r2, [r3, #0]
    2638:	e013      	b.n	2662 <spi_data_write+0x9a>
			else
				order = 0x1;
    263a:	2312      	movs	r3, #18
    263c:	18fb      	adds	r3, r7, r3
    263e:	2201      	movs	r2, #1
    2640:	701a      	strb	r2, [r3, #0]
    2642:	e00e      	b.n	2662 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
    2644:	1cbb      	adds	r3, r7, #2
    2646:	881a      	ldrh	r2, [r3, #0]
    2648:	2380      	movs	r3, #128	; 0x80
    264a:	019b      	lsls	r3, r3, #6
    264c:	429a      	cmp	r2, r3
    264e:	d804      	bhi.n	265a <spi_data_write+0x92>
				order = 0x3;
    2650:	2312      	movs	r3, #18
    2652:	18fb      	adds	r3, r7, r3
    2654:	2203      	movs	r2, #3
    2656:	701a      	strb	r2, [r3, #0]
    2658:	e003      	b.n	2662 <spi_data_write+0x9a>
			else
				order = 0x2;
    265a:	2312      	movs	r3, #18
    265c:	18fb      	adds	r3, r7, r3
    265e:	2202      	movs	r2, #2
    2660:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
    2662:	2311      	movs	r3, #17
    2664:	18fb      	adds	r3, r7, r3
    2666:	781a      	ldrb	r2, [r3, #0]
    2668:	2312      	movs	r3, #18
    266a:	18fb      	adds	r3, r7, r3
    266c:	781b      	ldrb	r3, [r3, #0]
    266e:	4313      	orrs	r3, r2
    2670:	b2da      	uxtb	r2, r3
    2672:	2311      	movs	r3, #17
    2674:	18fb      	adds	r3, r7, r3
    2676:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
    2678:	2311      	movs	r3, #17
    267a:	18fb      	adds	r3, r7, r3
    267c:	2101      	movs	r1, #1
    267e:	0018      	movs	r0, r3
    2680:	4b3c      	ldr	r3, [pc, #240]	; (2774 <spi_data_write+0x1ac>)
    2682:	4798      	blx	r3
    2684:	1e03      	subs	r3, r0, #0
    2686:	d012      	beq.n	26ae <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
    2688:	23d4      	movs	r3, #212	; 0xd4
    268a:	005a      	lsls	r2, r3, #1
    268c:	493a      	ldr	r1, [pc, #232]	; (2778 <spi_data_write+0x1b0>)
    268e:	4b3b      	ldr	r3, [pc, #236]	; (277c <spi_data_write+0x1b4>)
    2690:	0018      	movs	r0, r3
    2692:	4b3b      	ldr	r3, [pc, #236]	; (2780 <spi_data_write+0x1b8>)
    2694:	4798      	blx	r3
    2696:	4b3b      	ldr	r3, [pc, #236]	; (2784 <spi_data_write+0x1bc>)
    2698:	0018      	movs	r0, r3
    269a:	4b3b      	ldr	r3, [pc, #236]	; (2788 <spi_data_write+0x1c0>)
    269c:	4798      	blx	r3
    269e:	200d      	movs	r0, #13
    26a0:	4b3a      	ldr	r3, [pc, #232]	; (278c <spi_data_write+0x1c4>)
    26a2:	4798      	blx	r3
			result = N_FAIL;
    26a4:	2313      	movs	r3, #19
    26a6:	18fb      	adds	r3, r7, r3
    26a8:	2200      	movs	r2, #0
    26aa:	701a      	strb	r2, [r3, #0]
			break;
    26ac:	e05a      	b.n	2764 <spi_data_write+0x19c>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
    26ae:	2316      	movs	r3, #22
    26b0:	18fb      	adds	r3, r7, r3
    26b2:	2200      	movs	r2, #0
    26b4:	5e9b      	ldrsh	r3, [r3, r2]
    26b6:	687a      	ldr	r2, [r7, #4]
    26b8:	18d2      	adds	r2, r2, r3
    26ba:	2314      	movs	r3, #20
    26bc:	18fb      	adds	r3, r7, r3
    26be:	881b      	ldrh	r3, [r3, #0]
    26c0:	0019      	movs	r1, r3
    26c2:	0010      	movs	r0, r2
    26c4:	4b2b      	ldr	r3, [pc, #172]	; (2774 <spi_data_write+0x1ac>)
    26c6:	4798      	blx	r3
    26c8:	1e03      	subs	r3, r0, #0
    26ca:	d013      	beq.n	26f4 <spi_data_write+0x12c>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
    26cc:	23b2      	movs	r3, #178	; 0xb2
    26ce:	33ff      	adds	r3, #255	; 0xff
    26d0:	001a      	movs	r2, r3
    26d2:	4929      	ldr	r1, [pc, #164]	; (2778 <spi_data_write+0x1b0>)
    26d4:	4b29      	ldr	r3, [pc, #164]	; (277c <spi_data_write+0x1b4>)
    26d6:	0018      	movs	r0, r3
    26d8:	4b29      	ldr	r3, [pc, #164]	; (2780 <spi_data_write+0x1b8>)
    26da:	4798      	blx	r3
    26dc:	4b2c      	ldr	r3, [pc, #176]	; (2790 <spi_data_write+0x1c8>)
    26de:	0018      	movs	r0, r3
    26e0:	4b29      	ldr	r3, [pc, #164]	; (2788 <spi_data_write+0x1c0>)
    26e2:	4798      	blx	r3
    26e4:	200d      	movs	r0, #13
    26e6:	4b29      	ldr	r3, [pc, #164]	; (278c <spi_data_write+0x1c4>)
    26e8:	4798      	blx	r3
			result = N_FAIL;
    26ea:	2313      	movs	r3, #19
    26ec:	18fb      	adds	r3, r7, r3
    26ee:	2200      	movs	r2, #0
    26f0:	701a      	strb	r2, [r3, #0]
			break;
    26f2:	e037      	b.n	2764 <spi_data_write+0x19c>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
    26f4:	4b27      	ldr	r3, [pc, #156]	; (2794 <spi_data_write+0x1cc>)
    26f6:	781b      	ldrb	r3, [r3, #0]
    26f8:	2b00      	cmp	r3, #0
    26fa:	d11b      	bne.n	2734 <spi_data_write+0x16c>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
    26fc:	230c      	movs	r3, #12
    26fe:	18fb      	adds	r3, r7, r3
    2700:	2102      	movs	r1, #2
    2702:	0018      	movs	r0, r3
    2704:	4b1b      	ldr	r3, [pc, #108]	; (2774 <spi_data_write+0x1ac>)
    2706:	4798      	blx	r3
    2708:	1e03      	subs	r3, r0, #0
    270a:	d013      	beq.n	2734 <spi_data_write+0x16c>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
    270c:	23bc      	movs	r3, #188	; 0xbc
    270e:	33ff      	adds	r3, #255	; 0xff
    2710:	001a      	movs	r2, r3
    2712:	4919      	ldr	r1, [pc, #100]	; (2778 <spi_data_write+0x1b0>)
    2714:	4b19      	ldr	r3, [pc, #100]	; (277c <spi_data_write+0x1b4>)
    2716:	0018      	movs	r0, r3
    2718:	4b19      	ldr	r3, [pc, #100]	; (2780 <spi_data_write+0x1b8>)
    271a:	4798      	blx	r3
    271c:	4b1e      	ldr	r3, [pc, #120]	; (2798 <spi_data_write+0x1d0>)
    271e:	0018      	movs	r0, r3
    2720:	4b19      	ldr	r3, [pc, #100]	; (2788 <spi_data_write+0x1c0>)
    2722:	4798      	blx	r3
    2724:	200d      	movs	r0, #13
    2726:	4b19      	ldr	r3, [pc, #100]	; (278c <spi_data_write+0x1c4>)
    2728:	4798      	blx	r3
				result = N_FAIL;
    272a:	2313      	movs	r3, #19
    272c:	18fb      	adds	r3, r7, r3
    272e:	2200      	movs	r2, #0
    2730:	701a      	strb	r2, [r3, #0]
				break;
    2732:	e017      	b.n	2764 <spi_data_write+0x19c>
			}
		}

		ix += nbytes;
    2734:	2316      	movs	r3, #22
    2736:	18fb      	adds	r3, r7, r3
    2738:	881a      	ldrh	r2, [r3, #0]
    273a:	2314      	movs	r3, #20
    273c:	18fb      	adds	r3, r7, r3
    273e:	881b      	ldrh	r3, [r3, #0]
    2740:	18d3      	adds	r3, r2, r3
    2742:	b29a      	uxth	r2, r3
    2744:	2316      	movs	r3, #22
    2746:	18fb      	adds	r3, r7, r3
    2748:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
    274a:	1cbb      	adds	r3, r7, #2
    274c:	1cb9      	adds	r1, r7, #2
    274e:	2214      	movs	r2, #20
    2750:	18ba      	adds	r2, r7, r2
    2752:	8809      	ldrh	r1, [r1, #0]
    2754:	8812      	ldrh	r2, [r2, #0]
    2756:	1a8a      	subs	r2, r1, r2
    2758:	801a      	strh	r2, [r3, #0]
	} while (sz);
    275a:	1cbb      	adds	r3, r7, #2
    275c:	881b      	ldrh	r3, [r3, #0]
    275e:	2b00      	cmp	r3, #0
    2760:	d000      	beq.n	2764 <spi_data_write+0x19c>
    2762:	e744      	b.n	25ee <spi_data_write+0x26>


	return result;
    2764:	2313      	movs	r3, #19
    2766:	18fb      	adds	r3, r7, r3
    2768:	781b      	ldrb	r3, [r3, #0]
    276a:	b25b      	sxtb	r3, r3
}
    276c:	0018      	movs	r0, r3
    276e:	46bd      	mov	sp, r7
    2770:	b006      	add	sp, #24
    2772:	bd80      	pop	{r7, pc}
    2774:	00001e81 	.word	0x00001e81
    2778:	0000dd34 	.word	0x0000dd34
    277c:	0000d81c 	.word	0x0000d81c
    2780:	0000c0d1 	.word	0x0000c0d1
    2784:	0000d958 	.word	0x0000d958
    2788:	0000c1f1 	.word	0x0000c1f1
    278c:	0000c105 	.word	0x0000c105
    2790:	0000d990 	.word	0x0000d990
    2794:	200000c4 	.word	0x200000c4
    2798:	0000d9c4 	.word	0x0000d9c4

0000279c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
    279c:	b5b0      	push	{r4, r5, r7, lr}
    279e:	b086      	sub	sp, #24
    27a0:	af02      	add	r7, sp, #8
    27a2:	6078      	str	r0, [r7, #4]
    27a4:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    27a6:	230d      	movs	r3, #13
    27a8:	18fb      	adds	r3, r7, r3
    27aa:	2201      	movs	r2, #1
    27ac:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
    27ae:	230f      	movs	r3, #15
    27b0:	18fb      	adds	r3, r7, r3
    27b2:	22c9      	movs	r2, #201	; 0xc9
    27b4:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
    27b6:	230e      	movs	r3, #14
    27b8:	18fb      	adds	r3, r7, r3
    27ba:	2200      	movs	r2, #0
    27bc:	701a      	strb	r2, [r3, #0]
	if (addr <= 0x30)
    27be:	687b      	ldr	r3, [r7, #4]
    27c0:	2b30      	cmp	r3, #48	; 0x30
    27c2:	d808      	bhi.n	27d6 <spi_write_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
    27c4:	230f      	movs	r3, #15
    27c6:	18fb      	adds	r3, r7, r3
    27c8:	22c3      	movs	r2, #195	; 0xc3
    27ca:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    27cc:	230e      	movs	r3, #14
    27ce:	18fb      	adds	r3, r7, r3
    27d0:	2201      	movs	r2, #1
    27d2:	701a      	strb	r2, [r3, #0]
    27d4:	e007      	b.n	27e6 <spi_write_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
    27d6:	230f      	movs	r3, #15
    27d8:	18fb      	adds	r3, r7, r3
    27da:	22c9      	movs	r2, #201	; 0xc9
    27dc:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    27de:	230e      	movs	r3, #14
    27e0:	18fb      	adds	r3, r7, r3
    27e2:	2200      	movs	r2, #0
    27e4:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, u32data, 4, clockless);
    27e6:	230d      	movs	r3, #13
    27e8:	18fc      	adds	r4, r7, r3
    27ea:	683a      	ldr	r2, [r7, #0]
    27ec:	6879      	ldr	r1, [r7, #4]
    27ee:	230f      	movs	r3, #15
    27f0:	18fb      	adds	r3, r7, r3
    27f2:	7818      	ldrb	r0, [r3, #0]
    27f4:	230e      	movs	r3, #14
    27f6:	18fb      	adds	r3, r7, r3
    27f8:	781b      	ldrb	r3, [r3, #0]
    27fa:	9300      	str	r3, [sp, #0]
    27fc:	2304      	movs	r3, #4
    27fe:	4d26      	ldr	r5, [pc, #152]	; (2898 <spi_write_reg+0xfc>)
    2800:	47a8      	blx	r5
    2802:	0003      	movs	r3, r0
    2804:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2806:	230d      	movs	r3, #13
    2808:	18fb      	adds	r3, r7, r3
    280a:	781b      	ldrb	r3, [r3, #0]
    280c:	b25b      	sxtb	r3, r3
    280e:	2b01      	cmp	r3, #1
    2810:	d012      	beq.n	2838 <spi_write_reg+0x9c>
		M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
    2812:	23ec      	movs	r3, #236	; 0xec
    2814:	33ff      	adds	r3, #255	; 0xff
    2816:	001a      	movs	r2, r3
    2818:	4920      	ldr	r1, [pc, #128]	; (289c <spi_write_reg+0x100>)
    281a:	4b21      	ldr	r3, [pc, #132]	; (28a0 <spi_write_reg+0x104>)
    281c:	0018      	movs	r0, r3
    281e:	4b21      	ldr	r3, [pc, #132]	; (28a4 <spi_write_reg+0x108>)
    2820:	4798      	blx	r3
    2822:	687a      	ldr	r2, [r7, #4]
    2824:	4b20      	ldr	r3, [pc, #128]	; (28a8 <spi_write_reg+0x10c>)
    2826:	0011      	movs	r1, r2
    2828:	0018      	movs	r0, r3
    282a:	4b1e      	ldr	r3, [pc, #120]	; (28a4 <spi_write_reg+0x108>)
    282c:	4798      	blx	r3
    282e:	200d      	movs	r0, #13
    2830:	4b1e      	ldr	r3, [pc, #120]	; (28ac <spi_write_reg+0x110>)
    2832:	4798      	blx	r3
		return N_FAIL;
    2834:	2300      	movs	r3, #0
    2836:	e02b      	b.n	2890 <spi_write_reg+0xf4>
	}

	result = spi_cmd_rsp(cmd);
    2838:	230d      	movs	r3, #13
    283a:	18fc      	adds	r4, r7, r3
    283c:	230f      	movs	r3, #15
    283e:	18fb      	adds	r3, r7, r3
    2840:	781b      	ldrb	r3, [r3, #0]
    2842:	0018      	movs	r0, r3
    2844:	4b1a      	ldr	r3, [pc, #104]	; (28b0 <spi_write_reg+0x114>)
    2846:	4798      	blx	r3
    2848:	0003      	movs	r3, r0
    284a:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    284c:	230d      	movs	r3, #13
    284e:	18fb      	adds	r3, r7, r3
    2850:	781b      	ldrb	r3, [r3, #0]
    2852:	b25b      	sxtb	r3, r3
    2854:	2b01      	cmp	r3, #1
    2856:	d01a      	beq.n	288e <spi_write_reg+0xf2>
		M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
    2858:	23f2      	movs	r3, #242	; 0xf2
    285a:	33ff      	adds	r3, #255	; 0xff
    285c:	001a      	movs	r2, r3
    285e:	490f      	ldr	r1, [pc, #60]	; (289c <spi_write_reg+0x100>)
    2860:	4b0f      	ldr	r3, [pc, #60]	; (28a0 <spi_write_reg+0x104>)
    2862:	0018      	movs	r0, r3
    2864:	4b0f      	ldr	r3, [pc, #60]	; (28a4 <spi_write_reg+0x108>)
    2866:	4798      	blx	r3
    2868:	687a      	ldr	r2, [r7, #4]
    286a:	4b12      	ldr	r3, [pc, #72]	; (28b4 <spi_write_reg+0x118>)
    286c:	0011      	movs	r1, r2
    286e:	0018      	movs	r0, r3
    2870:	4b0c      	ldr	r3, [pc, #48]	; (28a4 <spi_write_reg+0x108>)
    2872:	4798      	blx	r3
    2874:	200d      	movs	r0, #13
    2876:	4b0d      	ldr	r3, [pc, #52]	; (28ac <spi_write_reg+0x110>)
    2878:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    287a:	2300      	movs	r3, #0
    287c:	9300      	str	r3, [sp, #0]
    287e:	2300      	movs	r3, #0
    2880:	2200      	movs	r2, #0
    2882:	2100      	movs	r1, #0
    2884:	20cf      	movs	r0, #207	; 0xcf
    2886:	4c04      	ldr	r4, [pc, #16]	; (2898 <spi_write_reg+0xfc>)
    2888:	47a0      	blx	r4
		return N_FAIL;
    288a:	2300      	movs	r3, #0
    288c:	e000      	b.n	2890 <spi_write_reg+0xf4>
	}

	return N_OK;
    288e:	2301      	movs	r3, #1
	}

	return result;

#endif
}
    2890:	0018      	movs	r0, r3
    2892:	46bd      	mov	sp, r7
    2894:	b004      	add	sp, #16
    2896:	bdb0      	pop	{r4, r5, r7, pc}
    2898:	00001f45 	.word	0x00001f45
    289c:	0000dd44 	.word	0x0000dd44
    28a0:	0000d81c 	.word	0x0000d81c
    28a4:	0000c0d1 	.word	0x0000c0d1
    28a8:	0000d9fc 	.word	0x0000d9fc
    28ac:	0000c105 	.word	0x0000c105
    28b0:	00002289 	.word	0x00002289
    28b4:	0000da28 	.word	0x0000da28

000028b8 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
    28b8:	b5b0      	push	{r4, r5, r7, lr}
    28ba:	b088      	sub	sp, #32
    28bc:	af02      	add	r7, sp, #8
    28be:	60f8      	str	r0, [r7, #12]
    28c0:	60b9      	str	r1, [r7, #8]
    28c2:	1dbb      	adds	r3, r7, #6
    28c4:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 cmd = CMD_DMA_EXT_WRITE;
    28c6:	2317      	movs	r3, #23
    28c8:	18fb      	adds	r3, r7, r3
    28ca:	22c7      	movs	r2, #199	; 0xc7
    28cc:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    28ce:	1dbb      	adds	r3, r7, #6
    28d0:	881a      	ldrh	r2, [r3, #0]
    28d2:	2316      	movs	r3, #22
    28d4:	18fc      	adds	r4, r7, r3
    28d6:	68f9      	ldr	r1, [r7, #12]
    28d8:	2317      	movs	r3, #23
    28da:	18fb      	adds	r3, r7, r3
    28dc:	7818      	ldrb	r0, [r3, #0]
    28de:	2300      	movs	r3, #0
    28e0:	9300      	str	r3, [sp, #0]
    28e2:	0013      	movs	r3, r2
    28e4:	2200      	movs	r2, #0
    28e6:	4d37      	ldr	r5, [pc, #220]	; (29c4 <nm_spi_write+0x10c>)
    28e8:	47a8      	blx	r5
    28ea:	0003      	movs	r3, r0
    28ec:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    28ee:	2316      	movs	r3, #22
    28f0:	18fb      	adds	r3, r7, r3
    28f2:	781b      	ldrb	r3, [r3, #0]
    28f4:	b25b      	sxtb	r3, r3
    28f6:	2b01      	cmp	r3, #1
    28f8:	d010      	beq.n	291c <nm_spi_write+0x64>
		M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
    28fa:	4a33      	ldr	r2, [pc, #204]	; (29c8 <nm_spi_write+0x110>)
    28fc:	4933      	ldr	r1, [pc, #204]	; (29cc <nm_spi_write+0x114>)
    28fe:	4b34      	ldr	r3, [pc, #208]	; (29d0 <nm_spi_write+0x118>)
    2900:	0018      	movs	r0, r3
    2902:	4b34      	ldr	r3, [pc, #208]	; (29d4 <nm_spi_write+0x11c>)
    2904:	4798      	blx	r3
    2906:	68fa      	ldr	r2, [r7, #12]
    2908:	4b33      	ldr	r3, [pc, #204]	; (29d8 <nm_spi_write+0x120>)
    290a:	0011      	movs	r1, r2
    290c:	0018      	movs	r0, r3
    290e:	4b31      	ldr	r3, [pc, #196]	; (29d4 <nm_spi_write+0x11c>)
    2910:	4798      	blx	r3
    2912:	200d      	movs	r0, #13
    2914:	4b31      	ldr	r3, [pc, #196]	; (29dc <nm_spi_write+0x124>)
    2916:	4798      	blx	r3
		return N_FAIL;
    2918:	2300      	movs	r3, #0
    291a:	e04f      	b.n	29bc <nm_spi_write+0x104>
	}

	result = spi_cmd_rsp(cmd);
    291c:	2316      	movs	r3, #22
    291e:	18fc      	adds	r4, r7, r3
    2920:	2317      	movs	r3, #23
    2922:	18fb      	adds	r3, r7, r3
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	0018      	movs	r0, r3
    2928:	4b2d      	ldr	r3, [pc, #180]	; (29e0 <nm_spi_write+0x128>)
    292a:	4798      	blx	r3
    292c:	0003      	movs	r3, r0
    292e:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2930:	2316      	movs	r3, #22
    2932:	18fb      	adds	r3, r7, r3
    2934:	781b      	ldrb	r3, [r3, #0]
    2936:	b25b      	sxtb	r3, r3
    2938:	2b01      	cmp	r3, #1
    293a:	d018      	beq.n	296e <nm_spi_write+0xb6>
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
    293c:	4a29      	ldr	r2, [pc, #164]	; (29e4 <nm_spi_write+0x12c>)
    293e:	4923      	ldr	r1, [pc, #140]	; (29cc <nm_spi_write+0x114>)
    2940:	4b23      	ldr	r3, [pc, #140]	; (29d0 <nm_spi_write+0x118>)
    2942:	0018      	movs	r0, r3
    2944:	4b23      	ldr	r3, [pc, #140]	; (29d4 <nm_spi_write+0x11c>)
    2946:	4798      	blx	r3
    2948:	68fa      	ldr	r2, [r7, #12]
    294a:	4b27      	ldr	r3, [pc, #156]	; (29e8 <nm_spi_write+0x130>)
    294c:	0011      	movs	r1, r2
    294e:	0018      	movs	r0, r3
    2950:	4b20      	ldr	r3, [pc, #128]	; (29d4 <nm_spi_write+0x11c>)
    2952:	4798      	blx	r3
    2954:	200d      	movs	r0, #13
    2956:	4b21      	ldr	r3, [pc, #132]	; (29dc <nm_spi_write+0x124>)
    2958:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    295a:	2300      	movs	r3, #0
    295c:	9300      	str	r3, [sp, #0]
    295e:	2300      	movs	r3, #0
    2960:	2200      	movs	r2, #0
    2962:	2100      	movs	r1, #0
    2964:	20cf      	movs	r0, #207	; 0xcf
    2966:	4c17      	ldr	r4, [pc, #92]	; (29c4 <nm_spi_write+0x10c>)
    2968:	47a0      	blx	r4
		return N_FAIL;
    296a:	2300      	movs	r3, #0
    296c:	e026      	b.n	29bc <nm_spi_write+0x104>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
    296e:	2316      	movs	r3, #22
    2970:	18fc      	adds	r4, r7, r3
    2972:	1dbb      	adds	r3, r7, #6
    2974:	881a      	ldrh	r2, [r3, #0]
    2976:	68bb      	ldr	r3, [r7, #8]
    2978:	0011      	movs	r1, r2
    297a:	0018      	movs	r0, r3
    297c:	4b1b      	ldr	r3, [pc, #108]	; (29ec <nm_spi_write+0x134>)
    297e:	4798      	blx	r3
    2980:	0003      	movs	r3, r0
    2982:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2984:	2316      	movs	r3, #22
    2986:	18fb      	adds	r3, r7, r3
    2988:	781b      	ldrb	r3, [r3, #0]
    298a:	b25b      	sxtb	r3, r3
    298c:	2b01      	cmp	r3, #1
    298e:	d014      	beq.n	29ba <nm_spi_write+0x102>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
    2990:	4a17      	ldr	r2, [pc, #92]	; (29f0 <nm_spi_write+0x138>)
    2992:	490e      	ldr	r1, [pc, #56]	; (29cc <nm_spi_write+0x114>)
    2994:	4b0e      	ldr	r3, [pc, #56]	; (29d0 <nm_spi_write+0x118>)
    2996:	0018      	movs	r0, r3
    2998:	4b0e      	ldr	r3, [pc, #56]	; (29d4 <nm_spi_write+0x11c>)
    299a:	4798      	blx	r3
    299c:	4b15      	ldr	r3, [pc, #84]	; (29f4 <nm_spi_write+0x13c>)
    299e:	0018      	movs	r0, r3
    29a0:	4b15      	ldr	r3, [pc, #84]	; (29f8 <nm_spi_write+0x140>)
    29a2:	4798      	blx	r3
    29a4:	200d      	movs	r0, #13
    29a6:	4b0d      	ldr	r3, [pc, #52]	; (29dc <nm_spi_write+0x124>)
    29a8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    29aa:	2300      	movs	r3, #0
    29ac:	9300      	str	r3, [sp, #0]
    29ae:	2300      	movs	r3, #0
    29b0:	2200      	movs	r2, #0
    29b2:	2100      	movs	r1, #0
    29b4:	20cf      	movs	r0, #207	; 0xcf
    29b6:	4c03      	ldr	r4, [pc, #12]	; (29c4 <nm_spi_write+0x10c>)
    29b8:	47a0      	blx	r4
	}

	return N_OK;
    29ba:	2301      	movs	r3, #1
}
    29bc:	0018      	movs	r0, r3
    29be:	46bd      	mov	sp, r7
    29c0:	b006      	add	sp, #24
    29c2:	bdb0      	pop	{r4, r5, r7, pc}
    29c4:	00001f45 	.word	0x00001f45
    29c8:	0000020f 	.word	0x0000020f
    29cc:	0000dd54 	.word	0x0000dd54
    29d0:	0000d81c 	.word	0x0000d81c
    29d4:	0000c0d1 	.word	0x0000c0d1
    29d8:	0000da60 	.word	0x0000da60
    29dc:	0000c105 	.word	0x0000c105
    29e0:	00002289 	.word	0x00002289
    29e4:	00000215 	.word	0x00000215
    29e8:	0000da90 	.word	0x0000da90
    29ec:	000025c9 	.word	0x000025c9
    29f0:	00000226 	.word	0x00000226
    29f4:	0000dac8 	.word	0x0000dac8
    29f8:	0000c1f1 	.word	0x0000c1f1

000029fc <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
    29fc:	b5b0      	push	{r4, r5, r7, lr}
    29fe:	b086      	sub	sp, #24
    2a00:	af02      	add	r7, sp, #8
    2a02:	6078      	str	r0, [r7, #4]
    2a04:	6039      	str	r1, [r7, #0]
	sint8 result = N_OK;
    2a06:	230d      	movs	r3, #13
    2a08:	18fb      	adds	r3, r7, r3
    2a0a:	2201      	movs	r2, #1
    2a0c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
    2a0e:	230f      	movs	r3, #15
    2a10:	18fb      	adds	r3, r7, r3
    2a12:	22ca      	movs	r2, #202	; 0xca
    2a14:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
    2a16:	230e      	movs	r3, #14
    2a18:	18fb      	adds	r3, r7, r3
    2a1a:	2200      	movs	r2, #0
    2a1c:	701a      	strb	r2, [r3, #0]

	if (addr <= 0xff)
    2a1e:	687b      	ldr	r3, [r7, #4]
    2a20:	2bff      	cmp	r3, #255	; 0xff
    2a22:	d808      	bhi.n	2a36 <spi_read_reg+0x3a>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
    2a24:	230f      	movs	r3, #15
    2a26:	18fb      	adds	r3, r7, r3
    2a28:	22c4      	movs	r2, #196	; 0xc4
    2a2a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
    2a2c:	230e      	movs	r3, #14
    2a2e:	18fb      	adds	r3, r7, r3
    2a30:	2201      	movs	r2, #1
    2a32:	701a      	strb	r2, [r3, #0]
    2a34:	e007      	b.n	2a46 <spi_read_reg+0x4a>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
    2a36:	230f      	movs	r3, #15
    2a38:	18fb      	adds	r3, r7, r3
    2a3a:	22ca      	movs	r2, #202	; 0xca
    2a3c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
    2a3e:	230e      	movs	r3, #14
    2a40:	18fb      	adds	r3, r7, r3
    2a42:	2200      	movs	r2, #0
    2a44:	701a      	strb	r2, [r3, #0]
	}

#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, 4, clockless);
    2a46:	230d      	movs	r3, #13
    2a48:	18fc      	adds	r4, r7, r3
    2a4a:	6879      	ldr	r1, [r7, #4]
    2a4c:	230f      	movs	r3, #15
    2a4e:	18fb      	adds	r3, r7, r3
    2a50:	7818      	ldrb	r0, [r3, #0]
    2a52:	230e      	movs	r3, #14
    2a54:	18fb      	adds	r3, r7, r3
    2a56:	781b      	ldrb	r3, [r3, #0]
    2a58:	9300      	str	r3, [sp, #0]
    2a5a:	2304      	movs	r3, #4
    2a5c:	2200      	movs	r2, #0
    2a5e:	4d44      	ldr	r5, [pc, #272]	; (2b70 <spi_read_reg+0x174>)
    2a60:	47a8      	blx	r5
    2a62:	0003      	movs	r3, r0
    2a64:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2a66:	230d      	movs	r3, #13
    2a68:	18fb      	adds	r3, r7, r3
    2a6a:	781b      	ldrb	r3, [r3, #0]
    2a6c:	b25b      	sxtb	r3, r3
    2a6e:	2b01      	cmp	r3, #1
    2a70:	d010      	beq.n	2a94 <spi_read_reg+0x98>
		M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
    2a72:	4a40      	ldr	r2, [pc, #256]	; (2b74 <spi_read_reg+0x178>)
    2a74:	4940      	ldr	r1, [pc, #256]	; (2b78 <spi_read_reg+0x17c>)
    2a76:	4b41      	ldr	r3, [pc, #260]	; (2b7c <spi_read_reg+0x180>)
    2a78:	0018      	movs	r0, r3
    2a7a:	4b41      	ldr	r3, [pc, #260]	; (2b80 <spi_read_reg+0x184>)
    2a7c:	4798      	blx	r3
    2a7e:	687a      	ldr	r2, [r7, #4]
    2a80:	4b40      	ldr	r3, [pc, #256]	; (2b84 <spi_read_reg+0x188>)
    2a82:	0011      	movs	r1, r2
    2a84:	0018      	movs	r0, r3
    2a86:	4b3e      	ldr	r3, [pc, #248]	; (2b80 <spi_read_reg+0x184>)
    2a88:	4798      	blx	r3
    2a8a:	200d      	movs	r0, #13
    2a8c:	4b3e      	ldr	r3, [pc, #248]	; (2b88 <spi_read_reg+0x18c>)
    2a8e:	4798      	blx	r3
		return N_FAIL;
    2a90:	2300      	movs	r3, #0
    2a92:	e068      	b.n	2b66 <spi_read_reg+0x16a>
	}

	result = spi_cmd_rsp(cmd);
    2a94:	230d      	movs	r3, #13
    2a96:	18fc      	adds	r4, r7, r3
    2a98:	230f      	movs	r3, #15
    2a9a:	18fb      	adds	r3, r7, r3
    2a9c:	781b      	ldrb	r3, [r3, #0]
    2a9e:	0018      	movs	r0, r3
    2aa0:	4b3a      	ldr	r3, [pc, #232]	; (2b8c <spi_read_reg+0x190>)
    2aa2:	4798      	blx	r3
    2aa4:	0003      	movs	r3, r0
    2aa6:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2aa8:	230d      	movs	r3, #13
    2aaa:	18fb      	adds	r3, r7, r3
    2aac:	781b      	ldrb	r3, [r3, #0]
    2aae:	b25b      	sxtb	r3, r3
    2ab0:	2b01      	cmp	r3, #1
    2ab2:	d018      	beq.n	2ae6 <spi_read_reg+0xea>
		M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
    2ab4:	4a36      	ldr	r2, [pc, #216]	; (2b90 <spi_read_reg+0x194>)
    2ab6:	4930      	ldr	r1, [pc, #192]	; (2b78 <spi_read_reg+0x17c>)
    2ab8:	4b30      	ldr	r3, [pc, #192]	; (2b7c <spi_read_reg+0x180>)
    2aba:	0018      	movs	r0, r3
    2abc:	4b30      	ldr	r3, [pc, #192]	; (2b80 <spi_read_reg+0x184>)
    2abe:	4798      	blx	r3
    2ac0:	687a      	ldr	r2, [r7, #4]
    2ac2:	4b34      	ldr	r3, [pc, #208]	; (2b94 <spi_read_reg+0x198>)
    2ac4:	0011      	movs	r1, r2
    2ac6:	0018      	movs	r0, r3
    2ac8:	4b2d      	ldr	r3, [pc, #180]	; (2b80 <spi_read_reg+0x184>)
    2aca:	4798      	blx	r3
    2acc:	200d      	movs	r0, #13
    2ace:	4b2e      	ldr	r3, [pc, #184]	; (2b88 <spi_read_reg+0x18c>)
    2ad0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2ad2:	2300      	movs	r3, #0
    2ad4:	9300      	str	r3, [sp, #0]
    2ad6:	2300      	movs	r3, #0
    2ad8:	2200      	movs	r2, #0
    2ada:	2100      	movs	r1, #0
    2adc:	20cf      	movs	r0, #207	; 0xcf
    2ade:	4c24      	ldr	r4, [pc, #144]	; (2b70 <spi_read_reg+0x174>)
    2ae0:	47a0      	blx	r4
		return N_FAIL;
    2ae2:	2300      	movs	r3, #0
    2ae4:	e03f      	b.n	2b66 <spi_read_reg+0x16a>
	}

	/* to avoid endianess issues */
	result = spi_data_read(&tmp[0], 4, clockless);
    2ae6:	230d      	movs	r3, #13
    2ae8:	18fc      	adds	r4, r7, r3
    2aea:	230e      	movs	r3, #14
    2aec:	18fb      	adds	r3, r7, r3
    2aee:	781a      	ldrb	r2, [r3, #0]
    2af0:	2308      	movs	r3, #8
    2af2:	18fb      	adds	r3, r7, r3
    2af4:	2104      	movs	r1, #4
    2af6:	0018      	movs	r0, r3
    2af8:	4b27      	ldr	r3, [pc, #156]	; (2b98 <spi_read_reg+0x19c>)
    2afa:	4798      	blx	r3
    2afc:	0003      	movs	r3, r0
    2afe:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2b00:	230d      	movs	r3, #13
    2b02:	18fb      	adds	r3, r7, r3
    2b04:	781b      	ldrb	r3, [r3, #0]
    2b06:	b25b      	sxtb	r3, r3
    2b08:	2b01      	cmp	r3, #1
    2b0a:	d016      	beq.n	2b3a <spi_read_reg+0x13e>
		M2M_ERR("[nmi spi]: Failed data read...\n");
    2b0c:	4a23      	ldr	r2, [pc, #140]	; (2b9c <spi_read_reg+0x1a0>)
    2b0e:	491a      	ldr	r1, [pc, #104]	; (2b78 <spi_read_reg+0x17c>)
    2b10:	4b1a      	ldr	r3, [pc, #104]	; (2b7c <spi_read_reg+0x180>)
    2b12:	0018      	movs	r0, r3
    2b14:	4b1a      	ldr	r3, [pc, #104]	; (2b80 <spi_read_reg+0x184>)
    2b16:	4798      	blx	r3
    2b18:	4b21      	ldr	r3, [pc, #132]	; (2ba0 <spi_read_reg+0x1a4>)
    2b1a:	0018      	movs	r0, r3
    2b1c:	4b21      	ldr	r3, [pc, #132]	; (2ba4 <spi_read_reg+0x1a8>)
    2b1e:	4798      	blx	r3
    2b20:	200d      	movs	r0, #13
    2b22:	4b19      	ldr	r3, [pc, #100]	; (2b88 <spi_read_reg+0x18c>)
    2b24:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2b26:	2300      	movs	r3, #0
    2b28:	9300      	str	r3, [sp, #0]
    2b2a:	2300      	movs	r3, #0
    2b2c:	2200      	movs	r2, #0
    2b2e:	2100      	movs	r1, #0
    2b30:	20cf      	movs	r0, #207	; 0xcf
    2b32:	4c0f      	ldr	r4, [pc, #60]	; (2b70 <spi_read_reg+0x174>)
    2b34:	47a0      	blx	r4
		return N_FAIL;
    2b36:	2300      	movs	r3, #0
    2b38:	e015      	b.n	2b66 <spi_read_reg+0x16a>
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2b3a:	2308      	movs	r3, #8
    2b3c:	18fb      	adds	r3, r7, r3
    2b3e:	781b      	ldrb	r3, [r3, #0]
    2b40:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
    2b42:	2308      	movs	r3, #8
    2b44:	18fb      	adds	r3, r7, r3
    2b46:	785b      	ldrb	r3, [r3, #1]
    2b48:	021b      	lsls	r3, r3, #8
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2b4a:	431a      	orrs	r2, r3
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    2b4c:	2308      	movs	r3, #8
    2b4e:	18fb      	adds	r3, r7, r3
    2b50:	789b      	ldrb	r3, [r3, #2]
    2b52:	041b      	lsls	r3, r3, #16
	}

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
    2b54:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);
    2b56:	2308      	movs	r3, #8
    2b58:	18fb      	adds	r3, r7, r3
    2b5a:	78db      	ldrb	r3, [r3, #3]
    2b5c:	061b      	lsls	r3, r3, #24

#endif

	*u32data = tmp[0] |
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
    2b5e:	431a      	orrs	r2, r3
		return N_FAIL;
	}

#endif

	*u32data = tmp[0] |
    2b60:	683b      	ldr	r3, [r7, #0]
    2b62:	601a      	str	r2, [r3, #0]
		((uint32)tmp[1] << 8) |
		((uint32)tmp[2] << 16) |
		((uint32)tmp[3] << 24);

	return N_OK;
    2b64:	2301      	movs	r3, #1
}
    2b66:	0018      	movs	r0, r3
    2b68:	46bd      	mov	sp, r7
    2b6a:	b004      	add	sp, #16
    2b6c:	bdb0      	pop	{r4, r5, r7, pc}
    2b6e:	46c0      	nop			; (mov r8, r8)
    2b70:	00001f45 	.word	0x00001f45
    2b74:	00000245 	.word	0x00000245
    2b78:	0000dd64 	.word	0x0000dd64
    2b7c:	0000d81c 	.word	0x0000d81c
    2b80:	0000c0d1 	.word	0x0000c0d1
    2b84:	0000daf0 	.word	0x0000daf0
    2b88:	0000c105 	.word	0x0000c105
    2b8c:	00002289 	.word	0x00002289
    2b90:	0000024b 	.word	0x0000024b
    2b94:	0000db1c 	.word	0x0000db1c
    2b98:	000023c5 	.word	0x000023c5
    2b9c:	00000253 	.word	0x00000253
    2ba0:	0000db50 	.word	0x0000db50
    2ba4:	0000c1f1 	.word	0x0000c1f1

00002ba8 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
    2ba8:	b5b0      	push	{r4, r5, r7, lr}
    2baa:	b088      	sub	sp, #32
    2bac:	af02      	add	r7, sp, #8
    2bae:	60f8      	str	r0, [r7, #12]
    2bb0:	60b9      	str	r1, [r7, #8]
    2bb2:	1dbb      	adds	r3, r7, #6
    2bb4:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
    2bb6:	2317      	movs	r3, #23
    2bb8:	18fb      	adds	r3, r7, r3
    2bba:	22c8      	movs	r2, #200	; 0xc8
    2bbc:	701a      	strb	r2, [r3, #0]

	/**
		Command
	**/
#if defined USE_OLD_SPI_SW
	result = spi_cmd(cmd, addr, 0, size,0);
    2bbe:	1dbb      	adds	r3, r7, #6
    2bc0:	881a      	ldrh	r2, [r3, #0]
    2bc2:	2316      	movs	r3, #22
    2bc4:	18fc      	adds	r4, r7, r3
    2bc6:	68f9      	ldr	r1, [r7, #12]
    2bc8:	2317      	movs	r3, #23
    2bca:	18fb      	adds	r3, r7, r3
    2bcc:	7818      	ldrb	r0, [r3, #0]
    2bce:	2300      	movs	r3, #0
    2bd0:	9300      	str	r3, [sp, #0]
    2bd2:	0013      	movs	r3, r2
    2bd4:	2200      	movs	r2, #0
    2bd6:	4d39      	ldr	r5, [pc, #228]	; (2cbc <nm_spi_read+0x114>)
    2bd8:	47a8      	blx	r5
    2bda:	0003      	movs	r3, r0
    2bdc:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2bde:	2316      	movs	r3, #22
    2be0:	18fb      	adds	r3, r7, r3
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	b25b      	sxtb	r3, r3
    2be6:	2b01      	cmp	r3, #1
    2be8:	d011      	beq.n	2c0e <nm_spi_read+0x66>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
    2bea:	239d      	movs	r3, #157	; 0x9d
    2bec:	009a      	lsls	r2, r3, #2
    2bee:	4934      	ldr	r1, [pc, #208]	; (2cc0 <nm_spi_read+0x118>)
    2bf0:	4b34      	ldr	r3, [pc, #208]	; (2cc4 <nm_spi_read+0x11c>)
    2bf2:	0018      	movs	r0, r3
    2bf4:	4b34      	ldr	r3, [pc, #208]	; (2cc8 <nm_spi_read+0x120>)
    2bf6:	4798      	blx	r3
    2bf8:	68fa      	ldr	r2, [r7, #12]
    2bfa:	4b34      	ldr	r3, [pc, #208]	; (2ccc <nm_spi_read+0x124>)
    2bfc:	0011      	movs	r1, r2
    2bfe:	0018      	movs	r0, r3
    2c00:	4b31      	ldr	r3, [pc, #196]	; (2cc8 <nm_spi_read+0x120>)
    2c02:	4798      	blx	r3
    2c04:	200d      	movs	r0, #13
    2c06:	4b32      	ldr	r3, [pc, #200]	; (2cd0 <nm_spi_read+0x128>)
    2c08:	4798      	blx	r3
		return N_FAIL;
    2c0a:	2300      	movs	r3, #0
    2c0c:	e052      	b.n	2cb4 <nm_spi_read+0x10c>
	}

	result = spi_cmd_rsp(cmd);
    2c0e:	2316      	movs	r3, #22
    2c10:	18fc      	adds	r4, r7, r3
    2c12:	2317      	movs	r3, #23
    2c14:	18fb      	adds	r3, r7, r3
    2c16:	781b      	ldrb	r3, [r3, #0]
    2c18:	0018      	movs	r0, r3
    2c1a:	4b2e      	ldr	r3, [pc, #184]	; (2cd4 <nm_spi_read+0x12c>)
    2c1c:	4798      	blx	r3
    2c1e:	0003      	movs	r3, r0
    2c20:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2c22:	2316      	movs	r3, #22
    2c24:	18fb      	adds	r3, r7, r3
    2c26:	781b      	ldrb	r3, [r3, #0]
    2c28:	b25b      	sxtb	r3, r3
    2c2a:	2b01      	cmp	r3, #1
    2c2c:	d018      	beq.n	2c60 <nm_spi_read+0xb8>
		M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
    2c2e:	4a2a      	ldr	r2, [pc, #168]	; (2cd8 <nm_spi_read+0x130>)
    2c30:	4923      	ldr	r1, [pc, #140]	; (2cc0 <nm_spi_read+0x118>)
    2c32:	4b24      	ldr	r3, [pc, #144]	; (2cc4 <nm_spi_read+0x11c>)
    2c34:	0018      	movs	r0, r3
    2c36:	4b24      	ldr	r3, [pc, #144]	; (2cc8 <nm_spi_read+0x120>)
    2c38:	4798      	blx	r3
    2c3a:	68fa      	ldr	r2, [r7, #12]
    2c3c:	4b27      	ldr	r3, [pc, #156]	; (2cdc <nm_spi_read+0x134>)
    2c3e:	0011      	movs	r1, r2
    2c40:	0018      	movs	r0, r3
    2c42:	4b21      	ldr	r3, [pc, #132]	; (2cc8 <nm_spi_read+0x120>)
    2c44:	4798      	blx	r3
    2c46:	200d      	movs	r0, #13
    2c48:	4b21      	ldr	r3, [pc, #132]	; (2cd0 <nm_spi_read+0x128>)
    2c4a:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2c4c:	2300      	movs	r3, #0
    2c4e:	9300      	str	r3, [sp, #0]
    2c50:	2300      	movs	r3, #0
    2c52:	2200      	movs	r2, #0
    2c54:	2100      	movs	r1, #0
    2c56:	20cf      	movs	r0, #207	; 0xcf
    2c58:	4c18      	ldr	r4, [pc, #96]	; (2cbc <nm_spi_read+0x114>)
    2c5a:	47a0      	blx	r4
		return N_FAIL;
    2c5c:	2300      	movs	r3, #0
    2c5e:	e029      	b.n	2cb4 <nm_spi_read+0x10c>
	}

	/**
		Data
	**/
	result = spi_data_read(buf, size,0);
    2c60:	2316      	movs	r3, #22
    2c62:	18fc      	adds	r4, r7, r3
    2c64:	1dbb      	adds	r3, r7, #6
    2c66:	8819      	ldrh	r1, [r3, #0]
    2c68:	68bb      	ldr	r3, [r7, #8]
    2c6a:	2200      	movs	r2, #0
    2c6c:	0018      	movs	r0, r3
    2c6e:	4b1c      	ldr	r3, [pc, #112]	; (2ce0 <nm_spi_read+0x138>)
    2c70:	4798      	blx	r3
    2c72:	0003      	movs	r3, r0
    2c74:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
    2c76:	2316      	movs	r3, #22
    2c78:	18fb      	adds	r3, r7, r3
    2c7a:	781b      	ldrb	r3, [r3, #0]
    2c7c:	b25b      	sxtb	r3, r3
    2c7e:	2b01      	cmp	r3, #1
    2c80:	d017      	beq.n	2cb2 <nm_spi_read+0x10a>
		M2M_ERR("[nmi spi]: Failed block data read...\n");
    2c82:	23a1      	movs	r3, #161	; 0xa1
    2c84:	009a      	lsls	r2, r3, #2
    2c86:	490e      	ldr	r1, [pc, #56]	; (2cc0 <nm_spi_read+0x118>)
    2c88:	4b0e      	ldr	r3, [pc, #56]	; (2cc4 <nm_spi_read+0x11c>)
    2c8a:	0018      	movs	r0, r3
    2c8c:	4b0e      	ldr	r3, [pc, #56]	; (2cc8 <nm_spi_read+0x120>)
    2c8e:	4798      	blx	r3
    2c90:	4b14      	ldr	r3, [pc, #80]	; (2ce4 <nm_spi_read+0x13c>)
    2c92:	0018      	movs	r0, r3
    2c94:	4b14      	ldr	r3, [pc, #80]	; (2ce8 <nm_spi_read+0x140>)
    2c96:	4798      	blx	r3
    2c98:	200d      	movs	r0, #13
    2c9a:	4b0d      	ldr	r3, [pc, #52]	; (2cd0 <nm_spi_read+0x128>)
    2c9c:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
    2c9e:	2300      	movs	r3, #0
    2ca0:	9300      	str	r3, [sp, #0]
    2ca2:	2300      	movs	r3, #0
    2ca4:	2200      	movs	r2, #0
    2ca6:	2100      	movs	r1, #0
    2ca8:	20cf      	movs	r0, #207	; 0xcf
    2caa:	4c04      	ldr	r4, [pc, #16]	; (2cbc <nm_spi_read+0x114>)
    2cac:	47a0      	blx	r4
		return N_FAIL;
    2cae:	2300      	movs	r3, #0
    2cb0:	e000      	b.n	2cb4 <nm_spi_read+0x10c>
			M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
			return N_FAIL;
		}
#endif

	return N_OK;
    2cb2:	2301      	movs	r3, #1
}
    2cb4:	0018      	movs	r0, r3
    2cb6:	46bd      	mov	sp, r7
    2cb8:	b006      	add	sp, #24
    2cba:	bdb0      	pop	{r4, r5, r7, pc}
    2cbc:	00001f45 	.word	0x00001f45
    2cc0:	0000dd74 	.word	0x0000dd74
    2cc4:	0000d81c 	.word	0x0000d81c
    2cc8:	0000c0d1 	.word	0x0000c0d1
    2ccc:	0000db70 	.word	0x0000db70
    2cd0:	0000c105 	.word	0x0000c105
    2cd4:	00002289 	.word	0x00002289
    2cd8:	0000027a 	.word	0x0000027a
    2cdc:	0000dba0 	.word	0x0000dba0
    2ce0:	000023c5 	.word	0x000023c5
    2ce4:	0000dbd8 	.word	0x0000dbd8
    2ce8:	0000c1f1 	.word	0x0000c1f1

00002cec <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
    2cec:	b590      	push	{r4, r7, lr}
    2cee:	b085      	sub	sp, #20
    2cf0:	af00      	add	r7, sp, #0
    2cf2:	6078      	str	r0, [r7, #4]
    2cf4:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
    2cf6:	230f      	movs	r3, #15
    2cf8:	18fc      	adds	r4, r7, r3
    2cfa:	683a      	ldr	r2, [r7, #0]
    2cfc:	687b      	ldr	r3, [r7, #4]
    2cfe:	0011      	movs	r1, r2
    2d00:	0018      	movs	r0, r3
    2d02:	4b0d      	ldr	r3, [pc, #52]	; (2d38 <nm_spi_read_reg_with_ret+0x4c>)
    2d04:	4798      	blx	r3
    2d06:	0003      	movs	r3, r0
    2d08:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2d0a:	230f      	movs	r3, #15
    2d0c:	18fb      	adds	r3, r7, r3
    2d0e:	781b      	ldrb	r3, [r3, #0]
    2d10:	b25b      	sxtb	r3, r3
    2d12:	2b01      	cmp	r3, #1
    2d14:	d104      	bne.n	2d20 <nm_spi_read_reg_with_ret+0x34>
    2d16:	230f      	movs	r3, #15
    2d18:	18fb      	adds	r3, r7, r3
    2d1a:	2200      	movs	r2, #0
    2d1c:	701a      	strb	r2, [r3, #0]
    2d1e:	e003      	b.n	2d28 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2d20:	230f      	movs	r3, #15
    2d22:	18fb      	adds	r3, r7, r3
    2d24:	22fa      	movs	r2, #250	; 0xfa
    2d26:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2d28:	230f      	movs	r3, #15
    2d2a:	18fb      	adds	r3, r7, r3
    2d2c:	781b      	ldrb	r3, [r3, #0]
    2d2e:	b25b      	sxtb	r3, r3
}
    2d30:	0018      	movs	r0, r3
    2d32:	46bd      	mov	sp, r7
    2d34:	b005      	add	sp, #20
    2d36:	bd90      	pop	{r4, r7, pc}
    2d38:	000029fd 	.word	0x000029fd

00002d3c <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
    2d3c:	b590      	push	{r4, r7, lr}
    2d3e:	b085      	sub	sp, #20
    2d40:	af00      	add	r7, sp, #0
    2d42:	6078      	str	r0, [r7, #4]
    2d44:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
    2d46:	230f      	movs	r3, #15
    2d48:	18fc      	adds	r4, r7, r3
    2d4a:	683a      	ldr	r2, [r7, #0]
    2d4c:	687b      	ldr	r3, [r7, #4]
    2d4e:	0011      	movs	r1, r2
    2d50:	0018      	movs	r0, r3
    2d52:	4b0d      	ldr	r3, [pc, #52]	; (2d88 <nm_spi_write_reg+0x4c>)
    2d54:	4798      	blx	r3
    2d56:	0003      	movs	r3, r0
    2d58:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2d5a:	230f      	movs	r3, #15
    2d5c:	18fb      	adds	r3, r7, r3
    2d5e:	781b      	ldrb	r3, [r3, #0]
    2d60:	b25b      	sxtb	r3, r3
    2d62:	2b01      	cmp	r3, #1
    2d64:	d104      	bne.n	2d70 <nm_spi_write_reg+0x34>
    2d66:	230f      	movs	r3, #15
    2d68:	18fb      	adds	r3, r7, r3
    2d6a:	2200      	movs	r2, #0
    2d6c:	701a      	strb	r2, [r3, #0]
    2d6e:	e003      	b.n	2d78 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2d70:	230f      	movs	r3, #15
    2d72:	18fb      	adds	r3, r7, r3
    2d74:	22fa      	movs	r2, #250	; 0xfa
    2d76:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2d78:	230f      	movs	r3, #15
    2d7a:	18fb      	adds	r3, r7, r3
    2d7c:	781b      	ldrb	r3, [r3, #0]
    2d7e:	b25b      	sxtb	r3, r3
}
    2d80:	0018      	movs	r0, r3
    2d82:	46bd      	mov	sp, r7
    2d84:	b005      	add	sp, #20
    2d86:	bd90      	pop	{r4, r7, pc}
    2d88:	0000279d 	.word	0x0000279d

00002d8c <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2d8c:	b590      	push	{r4, r7, lr}
    2d8e:	b087      	sub	sp, #28
    2d90:	af00      	add	r7, sp, #0
    2d92:	60f8      	str	r0, [r7, #12]
    2d94:	60b9      	str	r1, [r7, #8]
    2d96:	1dbb      	adds	r3, r7, #6
    2d98:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
    2d9a:	2317      	movs	r3, #23
    2d9c:	18fc      	adds	r4, r7, r3
    2d9e:	1dbb      	adds	r3, r7, #6
    2da0:	881a      	ldrh	r2, [r3, #0]
    2da2:	68b9      	ldr	r1, [r7, #8]
    2da4:	68fb      	ldr	r3, [r7, #12]
    2da6:	0018      	movs	r0, r3
    2da8:	4b0d      	ldr	r3, [pc, #52]	; (2de0 <nm_spi_read_block+0x54>)
    2daa:	4798      	blx	r3
    2dac:	0003      	movs	r3, r0
    2dae:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2db0:	2317      	movs	r3, #23
    2db2:	18fb      	adds	r3, r7, r3
    2db4:	781b      	ldrb	r3, [r3, #0]
    2db6:	b25b      	sxtb	r3, r3
    2db8:	2b01      	cmp	r3, #1
    2dba:	d104      	bne.n	2dc6 <nm_spi_read_block+0x3a>
    2dbc:	2317      	movs	r3, #23
    2dbe:	18fb      	adds	r3, r7, r3
    2dc0:	2200      	movs	r2, #0
    2dc2:	701a      	strb	r2, [r3, #0]
    2dc4:	e003      	b.n	2dce <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2dc6:	2317      	movs	r3, #23
    2dc8:	18fb      	adds	r3, r7, r3
    2dca:	22fa      	movs	r2, #250	; 0xfa
    2dcc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2dce:	2317      	movs	r3, #23
    2dd0:	18fb      	adds	r3, r7, r3
    2dd2:	781b      	ldrb	r3, [r3, #0]
    2dd4:	b25b      	sxtb	r3, r3
}
    2dd6:	0018      	movs	r0, r3
    2dd8:	46bd      	mov	sp, r7
    2dda:	b007      	add	sp, #28
    2ddc:	bd90      	pop	{r4, r7, pc}
    2dde:	46c0      	nop			; (mov r8, r8)
    2de0:	00002ba9 	.word	0x00002ba9

00002de4 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
    2de4:	b590      	push	{r4, r7, lr}
    2de6:	b087      	sub	sp, #28
    2de8:	af00      	add	r7, sp, #0
    2dea:	60f8      	str	r0, [r7, #12]
    2dec:	60b9      	str	r1, [r7, #8]
    2dee:	1dbb      	adds	r3, r7, #6
    2df0:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
    2df2:	2317      	movs	r3, #23
    2df4:	18fc      	adds	r4, r7, r3
    2df6:	1dbb      	adds	r3, r7, #6
    2df8:	881a      	ldrh	r2, [r3, #0]
    2dfa:	68b9      	ldr	r1, [r7, #8]
    2dfc:	68fb      	ldr	r3, [r7, #12]
    2dfe:	0018      	movs	r0, r3
    2e00:	4b0d      	ldr	r3, [pc, #52]	; (2e38 <nm_spi_write_block+0x54>)
    2e02:	4798      	blx	r3
    2e04:	0003      	movs	r3, r0
    2e06:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
    2e08:	2317      	movs	r3, #23
    2e0a:	18fb      	adds	r3, r7, r3
    2e0c:	781b      	ldrb	r3, [r3, #0]
    2e0e:	b25b      	sxtb	r3, r3
    2e10:	2b01      	cmp	r3, #1
    2e12:	d104      	bne.n	2e1e <nm_spi_write_block+0x3a>
    2e14:	2317      	movs	r3, #23
    2e16:	18fb      	adds	r3, r7, r3
    2e18:	2200      	movs	r2, #0
    2e1a:	701a      	strb	r2, [r3, #0]
    2e1c:	e003      	b.n	2e26 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
    2e1e:	2317      	movs	r3, #23
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	22fa      	movs	r2, #250	; 0xfa
    2e24:	701a      	strb	r2, [r3, #0]

	return s8Ret;
    2e26:	2317      	movs	r3, #23
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	781b      	ldrb	r3, [r3, #0]
    2e2c:	b25b      	sxtb	r3, r3
}
    2e2e:	0018      	movs	r0, r3
    2e30:	46bd      	mov	sp, r7
    2e32:	b007      	add	sp, #28
    2e34:	bd90      	pop	{r4, r7, pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	000028b9 	.word	0x000028b9

00002e3c <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
    2e3c:	b590      	push	{r4, r7, lr}
    2e3e:	b08b      	sub	sp, #44	; 0x2c
    2e40:	af04      	add	r7, sp, #16
    2e42:	0004      	movs	r4, r0
    2e44:	0008      	movs	r0, r1
    2e46:	0011      	movs	r1, r2
    2e48:	1dbb      	adds	r3, r7, #6
    2e4a:	1c22      	adds	r2, r4, #0
    2e4c:	801a      	strh	r2, [r3, #0]
    2e4e:	1d7b      	adds	r3, r7, #5
    2e50:	1c02      	adds	r2, r0, #0
    2e52:	701a      	strb	r2, [r3, #0]
    2e54:	1d3b      	adds	r3, r7, #4
    2e56:	1c0a      	adds	r2, r1, #0
    2e58:	701a      	strb	r2, [r3, #0]
	SOCKET		sock = -1;
    2e5a:	2317      	movs	r3, #23
    2e5c:	18fb      	adds	r3, r7, r3
    2e5e:	22ff      	movs	r2, #255	; 0xff
    2e60:	701a      	strb	r2, [r3, #0]
	uint8		u8Count,u8SocketCount = MAX_SOCKET;
    2e62:	2315      	movs	r3, #21
    2e64:	18fb      	adds	r3, r7, r3
    2e66:	220b      	movs	r2, #11
    2e68:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket	*pstrSock;
	
	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
    2e6a:	1dbb      	adds	r3, r7, #6
    2e6c:	881b      	ldrh	r3, [r3, #0]
    2e6e:	2b02      	cmp	r3, #2
    2e70:	d000      	beq.n	2e74 <socket+0x38>
    2e72:	e07e      	b.n	2f72 <socket+0x136>
	{
		if(u8Type == SOCK_STREAM)
    2e74:	1d7b      	adds	r3, r7, #5
    2e76:	781b      	ldrb	r3, [r3, #0]
    2e78:	2b01      	cmp	r3, #1
    2e7a:	d108      	bne.n	2e8e <socket+0x52>
		{
			u8SocketCount = TCP_SOCK_MAX;
    2e7c:	2315      	movs	r3, #21
    2e7e:	18fb      	adds	r3, r7, r3
    2e80:	2207      	movs	r2, #7
    2e82:	701a      	strb	r2, [r3, #0]
			u8Count = 0;
    2e84:	2316      	movs	r3, #22
    2e86:	18fb      	adds	r3, r7, r3
    2e88:	2200      	movs	r2, #0
    2e8a:	701a      	strb	r2, [r3, #0]
    2e8c:	e067      	b.n	2f5e <socket+0x122>
		}
		else if(u8Type == SOCK_DGRAM)
    2e8e:	1d7b      	adds	r3, r7, #5
    2e90:	781b      	ldrb	r3, [r3, #0]
    2e92:	2b02      	cmp	r3, #2
    2e94:	d108      	bne.n	2ea8 <socket+0x6c>
		{
			/*--- UDP SOCKET ---*/
			u8SocketCount = MAX_SOCKET;
    2e96:	2315      	movs	r3, #21
    2e98:	18fb      	adds	r3, r7, r3
    2e9a:	220b      	movs	r2, #11
    2e9c:	701a      	strb	r2, [r3, #0]
			u8Count = TCP_SOCK_MAX;
    2e9e:	2316      	movs	r3, #22
    2ea0:	18fb      	adds	r3, r7, r3
    2ea2:	2207      	movs	r2, #7
    2ea4:	701a      	strb	r2, [r3, #0]
    2ea6:	e05a      	b.n	2f5e <socket+0x122>
		}
		else
			return sock;
    2ea8:	2317      	movs	r3, #23
    2eaa:	18fb      	adds	r3, r7, r3
    2eac:	781b      	ldrb	r3, [r3, #0]
    2eae:	b25b      	sxtb	r3, r3
    2eb0:	e063      	b.n	2f7a <socket+0x13e>

		for(;u8Count < u8SocketCount; u8Count ++)
		{
			pstrSock = &gastrSockets[u8Count];
    2eb2:	2316      	movs	r3, #22
    2eb4:	18fb      	adds	r3, r7, r3
    2eb6:	781b      	ldrb	r3, [r3, #0]
    2eb8:	011a      	lsls	r2, r3, #4
    2eba:	4b32      	ldr	r3, [pc, #200]	; (2f84 <socket+0x148>)
    2ebc:	18d3      	adds	r3, r2, r3
    2ebe:	613b      	str	r3, [r7, #16]
			if(pstrSock->bIsUsed == 0)
    2ec0:	693b      	ldr	r3, [r7, #16]
    2ec2:	7a9b      	ldrb	r3, [r3, #10]
    2ec4:	b2db      	uxtb	r3, r3
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d142      	bne.n	2f50 <socket+0x114>
			{
				m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
    2eca:	693b      	ldr	r3, [r7, #16]
    2ecc:	2210      	movs	r2, #16
    2ece:	2100      	movs	r1, #0
    2ed0:	0018      	movs	r0, r3
    2ed2:	4b2d      	ldr	r3, [pc, #180]	; (2f88 <socket+0x14c>)
    2ed4:	4798      	blx	r3

				pstrSock->bIsUsed = 1;
    2ed6:	693b      	ldr	r3, [r7, #16]
    2ed8:	2201      	movs	r2, #1
    2eda:	729a      	strb	r2, [r3, #10]

				/* The session ID is used to distinguish different socket connections
					by comparing the assigned session ID to the one reported by the firmware*/
				++gu16SessionID;
    2edc:	4b2b      	ldr	r3, [pc, #172]	; (2f8c <socket+0x150>)
    2ede:	881b      	ldrh	r3, [r3, #0]
    2ee0:	b29b      	uxth	r3, r3
    2ee2:	3301      	adds	r3, #1
    2ee4:	b29a      	uxth	r2, r3
    2ee6:	4b29      	ldr	r3, [pc, #164]	; (2f8c <socket+0x150>)
    2ee8:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
    2eea:	4b28      	ldr	r3, [pc, #160]	; (2f8c <socket+0x150>)
    2eec:	881b      	ldrh	r3, [r3, #0]
    2eee:	b29b      	uxth	r3, r3
    2ef0:	2b00      	cmp	r3, #0
    2ef2:	d106      	bne.n	2f02 <socket+0xc6>
					++gu16SessionID;
    2ef4:	4b25      	ldr	r3, [pc, #148]	; (2f8c <socket+0x150>)
    2ef6:	881b      	ldrh	r3, [r3, #0]
    2ef8:	b29b      	uxth	r3, r3
    2efa:	3301      	adds	r3, #1
    2efc:	b29a      	uxth	r2, r3
    2efe:	4b23      	ldr	r3, [pc, #140]	; (2f8c <socket+0x150>)
    2f00:	801a      	strh	r2, [r3, #0]
				
				pstrSock->u16SessionID = gu16SessionID;
    2f02:	4b22      	ldr	r3, [pc, #136]	; (2f8c <socket+0x150>)
    2f04:	881b      	ldrh	r3, [r3, #0]
    2f06:	b29a      	uxth	r2, r3
    2f08:	693b      	ldr	r3, [r7, #16]
    2f0a:	80da      	strh	r2, [r3, #6]
				M2M_DBG("1 Socket %d session ID = %d\r\n",u8Count, gu16SessionID );
				sock = (SOCKET)u8Count;
    2f0c:	2317      	movs	r3, #23
    2f0e:	18fb      	adds	r3, r7, r3
    2f10:	2216      	movs	r2, #22
    2f12:	18ba      	adds	r2, r7, r2
    2f14:	7812      	ldrb	r2, [r2, #0]
    2f16:	701a      	strb	r2, [r3, #0]

				if(u8Flags & SOCKET_FLAGS_SSL)
    2f18:	1d3b      	adds	r3, r7, #4
    2f1a:	781b      	ldrb	r3, [r3, #0]
    2f1c:	2201      	movs	r2, #1
    2f1e:	4013      	ands	r3, r2
    2f20:	d026      	beq.n	2f70 <socket+0x134>
				{
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
    2f22:	230c      	movs	r3, #12
    2f24:	18fb      	adds	r3, r7, r3
    2f26:	2217      	movs	r2, #23
    2f28:	18ba      	adds	r2, r7, r2
    2f2a:	7812      	ldrb	r2, [r2, #0]
    2f2c:	701a      	strb	r2, [r3, #0]
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
    2f2e:	693b      	ldr	r3, [r7, #16]
    2f30:	2221      	movs	r2, #33	; 0x21
    2f32:	72da      	strb	r2, [r3, #11]
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
    2f34:	230c      	movs	r3, #12
    2f36:	18fa      	adds	r2, r7, r3
    2f38:	2300      	movs	r3, #0
    2f3a:	9302      	str	r3, [sp, #8]
    2f3c:	2300      	movs	r3, #0
    2f3e:	9301      	str	r3, [sp, #4]
    2f40:	2300      	movs	r3, #0
    2f42:	9300      	str	r3, [sp, #0]
    2f44:	2304      	movs	r3, #4
    2f46:	2150      	movs	r1, #80	; 0x50
    2f48:	2002      	movs	r0, #2
    2f4a:	4c11      	ldr	r4, [pc, #68]	; (2f90 <socket+0x154>)
    2f4c:	47a0      	blx	r4
				}
				break;
    2f4e:	e00f      	b.n	2f70 <socket+0x134>
			u8Count = TCP_SOCK_MAX;
		}
		else
			return sock;

		for(;u8Count < u8SocketCount; u8Count ++)
    2f50:	2316      	movs	r3, #22
    2f52:	18fb      	adds	r3, r7, r3
    2f54:	781a      	ldrb	r2, [r3, #0]
    2f56:	2316      	movs	r3, #22
    2f58:	18fb      	adds	r3, r7, r3
    2f5a:	3201      	adds	r2, #1
    2f5c:	701a      	strb	r2, [r3, #0]
    2f5e:	2316      	movs	r3, #22
    2f60:	18fa      	adds	r2, r7, r3
    2f62:	2315      	movs	r3, #21
    2f64:	18fb      	adds	r3, r7, r3
    2f66:	7812      	ldrb	r2, [r2, #0]
    2f68:	781b      	ldrb	r3, [r3, #0]
    2f6a:	429a      	cmp	r2, r3
    2f6c:	d3a1      	bcc.n	2eb2 <socket+0x76>
    2f6e:	e000      	b.n	2f72 <socket+0x136>
					tstrSSLSocketCreateCmd	strSSLCreate;
					strSSLCreate.sslSock = sock;
					pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
					SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
				}
				break;
    2f70:	46c0      	nop			; (mov r8, r8)
			}
		}
	}
	return sock;
    2f72:	2317      	movs	r3, #23
    2f74:	18fb      	adds	r3, r7, r3
    2f76:	781b      	ldrb	r3, [r3, #0]
    2f78:	b25b      	sxtb	r3, r3
}
    2f7a:	0018      	movs	r0, r3
    2f7c:	46bd      	mov	sp, r7
    2f7e:	b007      	add	sp, #28
    2f80:	bd90      	pop	{r4, r7, pc}
    2f82:	46c0      	nop			; (mov r8, r8)
    2f84:	200044ac 	.word	0x200044ac
    2f88:	00000b25 	.word	0x00000b25
    2f8c:	200000c6 	.word	0x200000c6
    2f90:	00000d71 	.word	0x00000d71

00002f94 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
    2f94:	b5b0      	push	{r4, r5, r7, lr}
    2f96:	b08a      	sub	sp, #40	; 0x28
    2f98:	af04      	add	r7, sp, #16
    2f9a:	6039      	str	r1, [r7, #0]
    2f9c:	0011      	movs	r1, r2
    2f9e:	1dfb      	adds	r3, r7, #7
    2fa0:	1c02      	adds	r2, r0, #0
    2fa2:	701a      	strb	r2, [r3, #0]
    2fa4:	1dbb      	adds	r3, r7, #6
    2fa6:	1c0a      	adds	r2, r1, #0
    2fa8:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    2faa:	2317      	movs	r3, #23
    2fac:	18fb      	adds	r3, r7, r3
    2fae:	22fa      	movs	r2, #250	; 0xfa
    2fb0:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
    2fb2:	1dfb      	adds	r3, r7, #7
    2fb4:	781b      	ldrb	r3, [r3, #0]
    2fb6:	2b7f      	cmp	r3, #127	; 0x7f
    2fb8:	d867      	bhi.n	308a <connect+0xf6>
    2fba:	683b      	ldr	r3, [r7, #0]
    2fbc:	2b00      	cmp	r3, #0
    2fbe:	d064      	beq.n	308a <connect+0xf6>
    2fc0:	1dfb      	adds	r3, r7, #7
    2fc2:	781b      	ldrb	r3, [r3, #0]
    2fc4:	b25b      	sxtb	r3, r3
    2fc6:	4a35      	ldr	r2, [pc, #212]	; (309c <connect+0x108>)
    2fc8:	011b      	lsls	r3, r3, #4
    2fca:	18d3      	adds	r3, r2, r3
    2fcc:	330a      	adds	r3, #10
    2fce:	781b      	ldrb	r3, [r3, #0]
    2fd0:	b2db      	uxtb	r3, r3
    2fd2:	2b01      	cmp	r3, #1
    2fd4:	d159      	bne.n	308a <connect+0xf6>
    2fd6:	1dbb      	adds	r3, r7, #6
    2fd8:	781b      	ldrb	r3, [r3, #0]
    2fda:	2b00      	cmp	r3, #0
    2fdc:	d055      	beq.n	308a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
    2fde:	2316      	movs	r3, #22
    2fe0:	18fb      	adds	r3, r7, r3
    2fe2:	2244      	movs	r2, #68	; 0x44
    2fe4:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
    2fe6:	1dfb      	adds	r3, r7, #7
    2fe8:	781b      	ldrb	r3, [r3, #0]
    2fea:	b25b      	sxtb	r3, r3
    2fec:	4a2b      	ldr	r2, [pc, #172]	; (309c <connect+0x108>)
    2fee:	011b      	lsls	r3, r3, #4
    2ff0:	18d3      	adds	r3, r2, r3
    2ff2:	330b      	adds	r3, #11
    2ff4:	781b      	ldrb	r3, [r3, #0]
    2ff6:	b2db      	uxtb	r3, r3
    2ff8:	001a      	movs	r2, r3
    2ffa:	2301      	movs	r3, #1
    2ffc:	4013      	ands	r3, r2
    2ffe:	d00f      	beq.n	3020 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
    3000:	2316      	movs	r3, #22
    3002:	18fb      	adds	r3, r7, r3
    3004:	224b      	movs	r2, #75	; 0x4b
    3006:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
    3008:	1dfb      	adds	r3, r7, #7
    300a:	781b      	ldrb	r3, [r3, #0]
    300c:	b25b      	sxtb	r3, r3
    300e:	4a23      	ldr	r2, [pc, #140]	; (309c <connect+0x108>)
    3010:	011b      	lsls	r3, r3, #4
    3012:	18d3      	adds	r3, r2, r3
    3014:	330b      	adds	r3, #11
    3016:	781b      	ldrb	r3, [r3, #0]
    3018:	b2da      	uxtb	r2, r3
    301a:	2308      	movs	r3, #8
    301c:	18fb      	adds	r3, r7, r3
    301e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
    3020:	2308      	movs	r3, #8
    3022:	18fb      	adds	r3, r7, r3
    3024:	1dfa      	adds	r2, r7, #7
    3026:	7812      	ldrb	r2, [r2, #0]
    3028:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
    302a:	6839      	ldr	r1, [r7, #0]
    302c:	2308      	movs	r3, #8
    302e:	18fb      	adds	r3, r7, r3
    3030:	2208      	movs	r2, #8
    3032:	0018      	movs	r0, r3
    3034:	4b1a      	ldr	r3, [pc, #104]	; (30a0 <connect+0x10c>)
    3036:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
    3038:	1dfb      	adds	r3, r7, #7
    303a:	781b      	ldrb	r3, [r3, #0]
    303c:	b25b      	sxtb	r3, r3
    303e:	4a17      	ldr	r2, [pc, #92]	; (309c <connect+0x108>)
    3040:	011b      	lsls	r3, r3, #4
    3042:	18d3      	adds	r3, r2, r3
    3044:	3306      	adds	r3, #6
    3046:	881b      	ldrh	r3, [r3, #0]
    3048:	b29a      	uxth	r2, r3
    304a:	2308      	movs	r3, #8
    304c:	18fb      	adds	r3, r7, r3
    304e:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
    3050:	2317      	movs	r3, #23
    3052:	18fc      	adds	r4, r7, r3
    3054:	2308      	movs	r3, #8
    3056:	18fa      	adds	r2, r7, r3
    3058:	2316      	movs	r3, #22
    305a:	18fb      	adds	r3, r7, r3
    305c:	7819      	ldrb	r1, [r3, #0]
    305e:	2300      	movs	r3, #0
    3060:	9302      	str	r3, [sp, #8]
    3062:	2300      	movs	r3, #0
    3064:	9301      	str	r3, [sp, #4]
    3066:	2300      	movs	r3, #0
    3068:	9300      	str	r3, [sp, #0]
    306a:	230c      	movs	r3, #12
    306c:	2002      	movs	r0, #2
    306e:	4d0d      	ldr	r5, [pc, #52]	; (30a4 <connect+0x110>)
    3070:	47a8      	blx	r5
    3072:	0003      	movs	r3, r0
    3074:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3076:	2317      	movs	r3, #23
    3078:	18fb      	adds	r3, r7, r3
    307a:	781b      	ldrb	r3, [r3, #0]
    307c:	b25b      	sxtb	r3, r3
    307e:	2b00      	cmp	r3, #0
    3080:	d003      	beq.n	308a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
    3082:	2317      	movs	r3, #23
    3084:	18fb      	adds	r3, r7, r3
    3086:	22f7      	movs	r2, #247	; 0xf7
    3088:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
    308a:	2317      	movs	r3, #23
    308c:	18fb      	adds	r3, r7, r3
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	b25b      	sxtb	r3, r3
}
    3092:	0018      	movs	r0, r3
    3094:	46bd      	mov	sp, r7
    3096:	b006      	add	sp, #24
    3098:	bdb0      	pop	{r4, r5, r7, pc}
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	200044ac 	.word	0x200044ac
    30a0:	00000ae9 	.word	0x00000ae9
    30a4:	00000d71 	.word	0x00000d71

000030a8 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
    30a8:	b590      	push	{r4, r7, lr}
    30aa:	b08f      	sub	sp, #60	; 0x3c
    30ac:	af04      	add	r7, sp, #16
    30ae:	0004      	movs	r4, r0
    30b0:	60b9      	str	r1, [r7, #8]
    30b2:	0010      	movs	r0, r2
    30b4:	0019      	movs	r1, r3
    30b6:	230f      	movs	r3, #15
    30b8:	18fb      	adds	r3, r7, r3
    30ba:	1c22      	adds	r2, r4, #0
    30bc:	701a      	strb	r2, [r3, #0]
    30be:	230c      	movs	r3, #12
    30c0:	18fb      	adds	r3, r7, r3
    30c2:	1c02      	adds	r2, r0, #0
    30c4:	801a      	strh	r2, [r3, #0]
    30c6:	1dbb      	adds	r3, r7, #6
    30c8:	1c0a      	adds	r2, r1, #0
    30ca:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    30cc:	2326      	movs	r3, #38	; 0x26
    30ce:	18fb      	adds	r3, r7, r3
    30d0:	2206      	movs	r2, #6
    30d2:	4252      	negs	r2, r2
    30d4:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
    30d6:	230f      	movs	r3, #15
    30d8:	18fb      	adds	r3, r7, r3
    30da:	781b      	ldrb	r3, [r3, #0]
    30dc:	2b7f      	cmp	r3, #127	; 0x7f
    30de:	d900      	bls.n	30e2 <send+0x3a>
    30e0:	e087      	b.n	31f2 <send+0x14a>
    30e2:	68bb      	ldr	r3, [r7, #8]
    30e4:	2b00      	cmp	r3, #0
    30e6:	d100      	bne.n	30ea <send+0x42>
    30e8:	e083      	b.n	31f2 <send+0x14a>
    30ea:	230c      	movs	r3, #12
    30ec:	18fb      	adds	r3, r7, r3
    30ee:	881a      	ldrh	r2, [r3, #0]
    30f0:	23af      	movs	r3, #175	; 0xaf
    30f2:	00db      	lsls	r3, r3, #3
    30f4:	429a      	cmp	r2, r3
    30f6:	d900      	bls.n	30fa <send+0x52>
    30f8:	e07b      	b.n	31f2 <send+0x14a>
    30fa:	230f      	movs	r3, #15
    30fc:	18fb      	adds	r3, r7, r3
    30fe:	781b      	ldrb	r3, [r3, #0]
    3100:	b25b      	sxtb	r3, r3
    3102:	4a40      	ldr	r2, [pc, #256]	; (3204 <send+0x15c>)
    3104:	011b      	lsls	r3, r3, #4
    3106:	18d3      	adds	r3, r2, r3
    3108:	330a      	adds	r3, #10
    310a:	781b      	ldrb	r3, [r3, #0]
    310c:	b2db      	uxtb	r3, r3
    310e:	2b01      	cmp	r3, #1
    3110:	d16f      	bne.n	31f2 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
    3112:	2323      	movs	r3, #35	; 0x23
    3114:	18fb      	adds	r3, r7, r3
    3116:	2245      	movs	r2, #69	; 0x45
    3118:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
    311a:	2324      	movs	r3, #36	; 0x24
    311c:	18fb      	adds	r3, r7, r3
    311e:	2250      	movs	r2, #80	; 0x50
    3120:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
    3122:	2310      	movs	r3, #16
    3124:	18fb      	adds	r3, r7, r3
    3126:	220f      	movs	r2, #15
    3128:	18ba      	adds	r2, r7, r2
    312a:	7812      	ldrb	r2, [r2, #0]
    312c:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
    312e:	2310      	movs	r3, #16
    3130:	18fb      	adds	r3, r7, r3
    3132:	220c      	movs	r2, #12
    3134:	18ba      	adds	r2, r7, r2
    3136:	8812      	ldrh	r2, [r2, #0]
    3138:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
    313a:	230f      	movs	r3, #15
    313c:	18fb      	adds	r3, r7, r3
    313e:	781b      	ldrb	r3, [r3, #0]
    3140:	b25b      	sxtb	r3, r3
    3142:	4a30      	ldr	r2, [pc, #192]	; (3204 <send+0x15c>)
    3144:	011b      	lsls	r3, r3, #4
    3146:	18d3      	adds	r3, r2, r3
    3148:	3306      	adds	r3, #6
    314a:	881b      	ldrh	r3, [r3, #0]
    314c:	b29a      	uxth	r2, r3
    314e:	2310      	movs	r3, #16
    3150:	18fb      	adds	r3, r7, r3
    3152:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
    3154:	230f      	movs	r3, #15
    3156:	18fb      	adds	r3, r7, r3
    3158:	781b      	ldrb	r3, [r3, #0]
    315a:	b25b      	sxtb	r3, r3
    315c:	2b06      	cmp	r3, #6
    315e:	dd03      	ble.n	3168 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
    3160:	2324      	movs	r3, #36	; 0x24
    3162:	18fb      	adds	r3, r7, r3
    3164:	2244      	movs	r2, #68	; 0x44
    3166:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    3168:	230f      	movs	r3, #15
    316a:	18fb      	adds	r3, r7, r3
    316c:	781b      	ldrb	r3, [r3, #0]
    316e:	b25b      	sxtb	r3, r3
    3170:	4a24      	ldr	r2, [pc, #144]	; (3204 <send+0x15c>)
    3172:	011b      	lsls	r3, r3, #4
    3174:	18d3      	adds	r3, r2, r3
    3176:	330b      	adds	r3, #11
    3178:	781b      	ldrb	r3, [r3, #0]
    317a:	b2db      	uxtb	r3, r3
    317c:	001a      	movs	r2, r3
    317e:	2301      	movs	r3, #1
    3180:	4013      	ands	r3, r2
    3182:	d00f      	beq.n	31a4 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
    3184:	2323      	movs	r3, #35	; 0x23
    3186:	18fb      	adds	r3, r7, r3
    3188:	224c      	movs	r2, #76	; 0x4c
    318a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
    318c:	230f      	movs	r3, #15
    318e:	18fb      	adds	r3, r7, r3
    3190:	2200      	movs	r2, #0
    3192:	569a      	ldrsb	r2, [r3, r2]
    3194:	2324      	movs	r3, #36	; 0x24
    3196:	18fb      	adds	r3, r7, r3
    3198:	491a      	ldr	r1, [pc, #104]	; (3204 <send+0x15c>)
    319a:	0112      	lsls	r2, r2, #4
    319c:	188a      	adds	r2, r1, r2
    319e:	3208      	adds	r2, #8
    31a0:	8812      	ldrh	r2, [r2, #0]
    31a2:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
    31a4:	2323      	movs	r3, #35	; 0x23
    31a6:	18fb      	adds	r3, r7, r3
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	2280      	movs	r2, #128	; 0x80
    31ac:	4252      	negs	r2, r2
    31ae:	4313      	orrs	r3, r2
    31b0:	b2d9      	uxtb	r1, r3
    31b2:	2310      	movs	r3, #16
    31b4:	18fa      	adds	r2, r7, r3
    31b6:	2324      	movs	r3, #36	; 0x24
    31b8:	18fb      	adds	r3, r7, r3
    31ba:	881b      	ldrh	r3, [r3, #0]
    31bc:	9302      	str	r3, [sp, #8]
    31be:	230c      	movs	r3, #12
    31c0:	18fb      	adds	r3, r7, r3
    31c2:	881b      	ldrh	r3, [r3, #0]
    31c4:	9301      	str	r3, [sp, #4]
    31c6:	68bb      	ldr	r3, [r7, #8]
    31c8:	9300      	str	r3, [sp, #0]
    31ca:	2310      	movs	r3, #16
    31cc:	2002      	movs	r0, #2
    31ce:	4c0e      	ldr	r4, [pc, #56]	; (3208 <send+0x160>)
    31d0:	47a0      	blx	r4
    31d2:	0003      	movs	r3, r0
    31d4:	001a      	movs	r2, r3
    31d6:	2326      	movs	r3, #38	; 0x26
    31d8:	18fb      	adds	r3, r7, r3
    31da:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
    31dc:	2326      	movs	r3, #38	; 0x26
    31de:	18fb      	adds	r3, r7, r3
    31e0:	2200      	movs	r2, #0
    31e2:	5e9b      	ldrsh	r3, [r3, r2]
    31e4:	2b00      	cmp	r3, #0
    31e6:	d004      	beq.n	31f2 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
    31e8:	2326      	movs	r3, #38	; 0x26
    31ea:	18fb      	adds	r3, r7, r3
    31ec:	220e      	movs	r2, #14
    31ee:	4252      	negs	r2, r2
    31f0:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
    31f2:	2326      	movs	r3, #38	; 0x26
    31f4:	18fb      	adds	r3, r7, r3
    31f6:	2200      	movs	r2, #0
    31f8:	5e9b      	ldrsh	r3, [r3, r2]
}
    31fa:	0018      	movs	r0, r3
    31fc:	46bd      	mov	sp, r7
    31fe:	b00b      	add	sp, #44	; 0x2c
    3200:	bd90      	pop	{r4, r7, pc}
    3202:	46c0      	nop			; (mov r8, r8)
    3204:	200044ac 	.word	0x200044ac
    3208:	00000d71 	.word	0x00000d71

0000320c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
    320c:	b590      	push	{r4, r7, lr}
    320e:	b08d      	sub	sp, #52	; 0x34
    3210:	af04      	add	r7, sp, #16
    3212:	60b9      	str	r1, [r7, #8]
    3214:	0011      	movs	r1, r2
    3216:	607b      	str	r3, [r7, #4]
    3218:	230f      	movs	r3, #15
    321a:	18fb      	adds	r3, r7, r3
    321c:	1c02      	adds	r2, r0, #0
    321e:	701a      	strb	r2, [r3, #0]
    3220:	230c      	movs	r3, #12
    3222:	18fb      	adds	r3, r7, r3
    3224:	1c0a      	adds	r2, r1, #0
    3226:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
    3228:	231e      	movs	r3, #30
    322a:	18fb      	adds	r3, r7, r3
    322c:	2206      	movs	r2, #6
    322e:	4252      	negs	r2, r2
    3230:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
    3232:	230f      	movs	r3, #15
    3234:	18fb      	adds	r3, r7, r3
    3236:	781b      	ldrb	r3, [r3, #0]
    3238:	2b7f      	cmp	r3, #127	; 0x7f
    323a:	d900      	bls.n	323e <recv+0x32>
    323c:	e099      	b.n	3372 <recv+0x166>
    323e:	68bb      	ldr	r3, [r7, #8]
    3240:	2b00      	cmp	r3, #0
    3242:	d100      	bne.n	3246 <recv+0x3a>
    3244:	e095      	b.n	3372 <recv+0x166>
    3246:	230c      	movs	r3, #12
    3248:	18fb      	adds	r3, r7, r3
    324a:	881b      	ldrh	r3, [r3, #0]
    324c:	2b00      	cmp	r3, #0
    324e:	d100      	bne.n	3252 <recv+0x46>
    3250:	e08f      	b.n	3372 <recv+0x166>
    3252:	230f      	movs	r3, #15
    3254:	18fb      	adds	r3, r7, r3
    3256:	781b      	ldrb	r3, [r3, #0]
    3258:	b25b      	sxtb	r3, r3
    325a:	4a4a      	ldr	r2, [pc, #296]	; (3384 <recv+0x178>)
    325c:	011b      	lsls	r3, r3, #4
    325e:	18d3      	adds	r3, r2, r3
    3260:	330a      	adds	r3, #10
    3262:	781b      	ldrb	r3, [r3, #0]
    3264:	b2db      	uxtb	r3, r3
    3266:	2b01      	cmp	r3, #1
    3268:	d000      	beq.n	326c <recv+0x60>
    326a:	e082      	b.n	3372 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
    326c:	231e      	movs	r3, #30
    326e:	18fb      	adds	r3, r7, r3
    3270:	2200      	movs	r2, #0
    3272:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
    3274:	230f      	movs	r3, #15
    3276:	18fb      	adds	r3, r7, r3
    3278:	2200      	movs	r2, #0
    327a:	569a      	ldrsb	r2, [r3, r2]
    327c:	4b41      	ldr	r3, [pc, #260]	; (3384 <recv+0x178>)
    327e:	0112      	lsls	r2, r2, #4
    3280:	68b9      	ldr	r1, [r7, #8]
    3282:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
    3284:	230f      	movs	r3, #15
    3286:	18fb      	adds	r3, r7, r3
    3288:	781b      	ldrb	r3, [r3, #0]
    328a:	b25b      	sxtb	r3, r3
    328c:	4a3d      	ldr	r2, [pc, #244]	; (3384 <recv+0x178>)
    328e:	011b      	lsls	r3, r3, #4
    3290:	18d3      	adds	r3, r2, r3
    3292:	3304      	adds	r3, #4
    3294:	220c      	movs	r2, #12
    3296:	18ba      	adds	r2, r7, r2
    3298:	8812      	ldrh	r2, [r2, #0]
    329a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
    329c:	230f      	movs	r3, #15
    329e:	18fb      	adds	r3, r7, r3
    32a0:	781b      	ldrb	r3, [r3, #0]
    32a2:	b25b      	sxtb	r3, r3
    32a4:	4a37      	ldr	r2, [pc, #220]	; (3384 <recv+0x178>)
    32a6:	011b      	lsls	r3, r3, #4
    32a8:	18d3      	adds	r3, r2, r3
    32aa:	330c      	adds	r3, #12
    32ac:	781b      	ldrb	r3, [r3, #0]
    32ae:	b2db      	uxtb	r3, r3
    32b0:	2b00      	cmp	r3, #0
    32b2:	d15e      	bne.n	3372 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
    32b4:	231d      	movs	r3, #29
    32b6:	18fb      	adds	r3, r7, r3
    32b8:	2246      	movs	r2, #70	; 0x46
    32ba:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
    32bc:	230f      	movs	r3, #15
    32be:	18fb      	adds	r3, r7, r3
    32c0:	781b      	ldrb	r3, [r3, #0]
    32c2:	b25b      	sxtb	r3, r3
    32c4:	4a2f      	ldr	r2, [pc, #188]	; (3384 <recv+0x178>)
    32c6:	011b      	lsls	r3, r3, #4
    32c8:	18d3      	adds	r3, r2, r3
    32ca:	330c      	adds	r3, #12
    32cc:	2201      	movs	r2, #1
    32ce:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    32d0:	230f      	movs	r3, #15
    32d2:	18fb      	adds	r3, r7, r3
    32d4:	781b      	ldrb	r3, [r3, #0]
    32d6:	b25b      	sxtb	r3, r3
    32d8:	4a2a      	ldr	r2, [pc, #168]	; (3384 <recv+0x178>)
    32da:	011b      	lsls	r3, r3, #4
    32dc:	18d3      	adds	r3, r2, r3
    32de:	330b      	adds	r3, #11
    32e0:	781b      	ldrb	r3, [r3, #0]
    32e2:	b2db      	uxtb	r3, r3
    32e4:	001a      	movs	r2, r3
    32e6:	2301      	movs	r3, #1
    32e8:	4013      	ands	r3, r2
    32ea:	d003      	beq.n	32f4 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
    32ec:	231d      	movs	r3, #29
    32ee:	18fb      	adds	r3, r7, r3
    32f0:	224d      	movs	r2, #77	; 0x4d
    32f2:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
    32f4:	687b      	ldr	r3, [r7, #4]
    32f6:	2b00      	cmp	r3, #0
    32f8:	d105      	bne.n	3306 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
    32fa:	2314      	movs	r3, #20
    32fc:	18fb      	adds	r3, r7, r3
    32fe:	2201      	movs	r2, #1
    3300:	4252      	negs	r2, r2
    3302:	601a      	str	r2, [r3, #0]
    3304:	e003      	b.n	330e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
    3306:	2314      	movs	r3, #20
    3308:	18fb      	adds	r3, r7, r3
    330a:	687a      	ldr	r2, [r7, #4]
    330c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
    330e:	2314      	movs	r3, #20
    3310:	18fb      	adds	r3, r7, r3
    3312:	220f      	movs	r2, #15
    3314:	18ba      	adds	r2, r7, r2
    3316:	7812      	ldrb	r2, [r2, #0]
    3318:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
    331a:	230f      	movs	r3, #15
    331c:	18fb      	adds	r3, r7, r3
    331e:	781b      	ldrb	r3, [r3, #0]
    3320:	b25b      	sxtb	r3, r3
    3322:	4a18      	ldr	r2, [pc, #96]	; (3384 <recv+0x178>)
    3324:	011b      	lsls	r3, r3, #4
    3326:	18d3      	adds	r3, r2, r3
    3328:	3306      	adds	r3, #6
    332a:	881b      	ldrh	r3, [r3, #0]
    332c:	b29a      	uxth	r2, r3
    332e:	2314      	movs	r3, #20
    3330:	18fb      	adds	r3, r7, r3
    3332:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
    3334:	2314      	movs	r3, #20
    3336:	18fa      	adds	r2, r7, r3
    3338:	231d      	movs	r3, #29
    333a:	18fb      	adds	r3, r7, r3
    333c:	7819      	ldrb	r1, [r3, #0]
    333e:	2300      	movs	r3, #0
    3340:	9302      	str	r3, [sp, #8]
    3342:	2300      	movs	r3, #0
    3344:	9301      	str	r3, [sp, #4]
    3346:	2300      	movs	r3, #0
    3348:	9300      	str	r3, [sp, #0]
    334a:	2308      	movs	r3, #8
    334c:	2002      	movs	r0, #2
    334e:	4c0e      	ldr	r4, [pc, #56]	; (3388 <recv+0x17c>)
    3350:	47a0      	blx	r4
    3352:	0003      	movs	r3, r0
    3354:	001a      	movs	r2, r3
    3356:	231e      	movs	r3, #30
    3358:	18fb      	adds	r3, r7, r3
    335a:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
    335c:	231e      	movs	r3, #30
    335e:	18fb      	adds	r3, r7, r3
    3360:	2200      	movs	r2, #0
    3362:	5e9b      	ldrsh	r3, [r3, r2]
    3364:	2b00      	cmp	r3, #0
    3366:	d004      	beq.n	3372 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
    3368:	231e      	movs	r3, #30
    336a:	18fb      	adds	r3, r7, r3
    336c:	220e      	movs	r2, #14
    336e:	4252      	negs	r2, r2
    3370:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
    3372:	231e      	movs	r3, #30
    3374:	18fb      	adds	r3, r7, r3
    3376:	2200      	movs	r2, #0
    3378:	5e9b      	ldrsh	r3, [r3, r2]
}
    337a:	0018      	movs	r0, r3
    337c:	46bd      	mov	sp, r7
    337e:	b009      	add	sp, #36	; 0x24
    3380:	bd90      	pop	{r4, r7, pc}
    3382:	46c0      	nop			; (mov r8, r8)
    3384:	200044ac 	.word	0x200044ac
    3388:	00000d71 	.word	0x00000d71

0000338c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
    338c:	b5b0      	push	{r4, r5, r7, lr}
    338e:	b088      	sub	sp, #32
    3390:	af04      	add	r7, sp, #16
    3392:	0002      	movs	r2, r0
    3394:	1dfb      	adds	r3, r7, #7
    3396:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
    3398:	230f      	movs	r3, #15
    339a:	18fb      	adds	r3, r7, r3
    339c:	22fa      	movs	r2, #250	; 0xfa
    339e:	701a      	strb	r2, [r3, #0]
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
    33a0:	1dfb      	adds	r3, r7, #7
    33a2:	781b      	ldrb	r3, [r3, #0]
    33a4:	2b7f      	cmp	r3, #127	; 0x7f
    33a6:	d86a      	bhi.n	347e <close+0xf2>
    33a8:	1dfb      	adds	r3, r7, #7
    33aa:	781b      	ldrb	r3, [r3, #0]
    33ac:	b25b      	sxtb	r3, r3
    33ae:	4a38      	ldr	r2, [pc, #224]	; (3490 <close+0x104>)
    33b0:	011b      	lsls	r3, r3, #4
    33b2:	18d3      	adds	r3, r2, r3
    33b4:	330a      	adds	r3, #10
    33b6:	781b      	ldrb	r3, [r3, #0]
    33b8:	b2db      	uxtb	r3, r3
    33ba:	2b01      	cmp	r3, #1
    33bc:	d15f      	bne.n	347e <close+0xf2>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
    33be:	230e      	movs	r3, #14
    33c0:	18fb      	adds	r3, r7, r3
    33c2:	2249      	movs	r2, #73	; 0x49
    33c4:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
    33c6:	2308      	movs	r3, #8
    33c8:	18fb      	adds	r3, r7, r3
    33ca:	1dfa      	adds	r2, r7, #7
    33cc:	7812      	ldrb	r2, [r2, #0]
    33ce:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
    33d0:	1dfb      	adds	r3, r7, #7
    33d2:	781b      	ldrb	r3, [r3, #0]
    33d4:	b25b      	sxtb	r3, r3
    33d6:	4a2e      	ldr	r2, [pc, #184]	; (3490 <close+0x104>)
    33d8:	011b      	lsls	r3, r3, #4
    33da:	18d3      	adds	r3, r2, r3
    33dc:	3306      	adds	r3, #6
    33de:	881b      	ldrh	r3, [r3, #0]
    33e0:	b29a      	uxth	r2, r3
    33e2:	2308      	movs	r3, #8
    33e4:	18fb      	adds	r3, r7, r3
    33e6:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
    33e8:	1dfb      	adds	r3, r7, #7
    33ea:	781b      	ldrb	r3, [r3, #0]
    33ec:	b25b      	sxtb	r3, r3
    33ee:	4a28      	ldr	r2, [pc, #160]	; (3490 <close+0x104>)
    33f0:	011b      	lsls	r3, r3, #4
    33f2:	18d3      	adds	r3, r2, r3
    33f4:	330a      	adds	r3, #10
    33f6:	2200      	movs	r2, #0
    33f8:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
    33fa:	1dfb      	adds	r3, r7, #7
    33fc:	781b      	ldrb	r3, [r3, #0]
    33fe:	b25b      	sxtb	r3, r3
    3400:	4a23      	ldr	r2, [pc, #140]	; (3490 <close+0x104>)
    3402:	011b      	lsls	r3, r3, #4
    3404:	18d3      	adds	r3, r2, r3
    3406:	3306      	adds	r3, #6
    3408:	2200      	movs	r2, #0
    340a:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
    340c:	1dfb      	adds	r3, r7, #7
    340e:	781b      	ldrb	r3, [r3, #0]
    3410:	b25b      	sxtb	r3, r3
    3412:	4a1f      	ldr	r2, [pc, #124]	; (3490 <close+0x104>)
    3414:	011b      	lsls	r3, r3, #4
    3416:	18d3      	adds	r3, r2, r3
    3418:	330b      	adds	r3, #11
    341a:	781b      	ldrb	r3, [r3, #0]
    341c:	b2db      	uxtb	r3, r3
    341e:	001a      	movs	r2, r3
    3420:	2301      	movs	r3, #1
    3422:	4013      	ands	r3, r2
    3424:	d003      	beq.n	342e <close+0xa2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
    3426:	230e      	movs	r3, #14
    3428:	18fb      	adds	r3, r7, r3
    342a:	224e      	movs	r2, #78	; 0x4e
    342c:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
    342e:	230f      	movs	r3, #15
    3430:	18fc      	adds	r4, r7, r3
    3432:	2308      	movs	r3, #8
    3434:	18fa      	adds	r2, r7, r3
    3436:	230e      	movs	r3, #14
    3438:	18fb      	adds	r3, r7, r3
    343a:	7819      	ldrb	r1, [r3, #0]
    343c:	2300      	movs	r3, #0
    343e:	9302      	str	r3, [sp, #8]
    3440:	2300      	movs	r3, #0
    3442:	9301      	str	r3, [sp, #4]
    3444:	2300      	movs	r3, #0
    3446:	9300      	str	r3, [sp, #0]
    3448:	2304      	movs	r3, #4
    344a:	2002      	movs	r0, #2
    344c:	4d11      	ldr	r5, [pc, #68]	; (3494 <close+0x108>)
    344e:	47a8      	blx	r5
    3450:	0003      	movs	r3, r0
    3452:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
    3454:	230f      	movs	r3, #15
    3456:	18fb      	adds	r3, r7, r3
    3458:	781b      	ldrb	r3, [r3, #0]
    345a:	b25b      	sxtb	r3, r3
    345c:	2b00      	cmp	r3, #0
    345e:	d003      	beq.n	3468 <close+0xdc>
		{
			s8Ret = SOCK_ERR_INVALID;
    3460:	230f      	movs	r3, #15
    3462:	18fb      	adds	r3, r7, r3
    3464:	22f7      	movs	r2, #247	; 0xf7
    3466:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
    3468:	1dfb      	adds	r3, r7, #7
    346a:	781b      	ldrb	r3, [r3, #0]
    346c:	b25b      	sxtb	r3, r3
    346e:	011a      	lsls	r2, r3, #4
    3470:	4b07      	ldr	r3, [pc, #28]	; (3490 <close+0x104>)
    3472:	18d3      	adds	r3, r2, r3
    3474:	2210      	movs	r2, #16
    3476:	2100      	movs	r1, #0
    3478:	0018      	movs	r0, r3
    347a:	4b07      	ldr	r3, [pc, #28]	; (3498 <close+0x10c>)
    347c:	4798      	blx	r3
	}
	return s8Ret;
    347e:	230f      	movs	r3, #15
    3480:	18fb      	adds	r3, r7, r3
    3482:	781b      	ldrb	r3, [r3, #0]
    3484:	b25b      	sxtb	r3, r3
}
    3486:	0018      	movs	r0, r3
    3488:	46bd      	mov	sp, r7
    348a:	b004      	add	sp, #16
    348c:	bdb0      	pop	{r4, r5, r7, pc}
    348e:	46c0      	nop			; (mov r8, r8)
    3490:	200044ac 	.word	0x200044ac
    3494:	00000d71 	.word	0x00000d71
    3498:	00000b25 	.word	0x00000b25

0000349c <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
    349c:	b5b0      	push	{r4, r5, r7, lr}
    349e:	b088      	sub	sp, #32
    34a0:	af04      	add	r7, sp, #16
    34a2:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
    34a4:	230f      	movs	r3, #15
    34a6:	18fb      	adds	r3, r7, r3
    34a8:	22fa      	movs	r2, #250	; 0xfa
    34aa:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
    34ac:	687b      	ldr	r3, [r7, #4]
    34ae:	0018      	movs	r0, r3
    34b0:	4b19      	ldr	r3, [pc, #100]	; (3518 <gethostbyname+0x7c>)
    34b2:	4798      	blx	r3
    34b4:	0003      	movs	r3, r0
    34b6:	001a      	movs	r2, r3
    34b8:	230e      	movs	r3, #14
    34ba:	18fb      	adds	r3, r7, r3
    34bc:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
    34be:	230e      	movs	r3, #14
    34c0:	18fb      	adds	r3, r7, r3
    34c2:	781b      	ldrb	r3, [r3, #0]
    34c4:	2b40      	cmp	r3, #64	; 0x40
    34c6:	d81f      	bhi.n	3508 <gethostbyname+0x6c>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
    34c8:	230e      	movs	r3, #14
    34ca:	18fb      	adds	r3, r7, r3
    34cc:	781b      	ldrb	r3, [r3, #0]
    34ce:	b29b      	uxth	r3, r3
    34d0:	3301      	adds	r3, #1
    34d2:	b299      	uxth	r1, r3
    34d4:	230f      	movs	r3, #15
    34d6:	18fc      	adds	r4, r7, r3
    34d8:	687a      	ldr	r2, [r7, #4]
    34da:	2300      	movs	r3, #0
    34dc:	9302      	str	r3, [sp, #8]
    34de:	2300      	movs	r3, #0
    34e0:	9301      	str	r3, [sp, #4]
    34e2:	2300      	movs	r3, #0
    34e4:	9300      	str	r3, [sp, #0]
    34e6:	000b      	movs	r3, r1
    34e8:	21ca      	movs	r1, #202	; 0xca
    34ea:	2002      	movs	r0, #2
    34ec:	4d0b      	ldr	r5, [pc, #44]	; (351c <gethostbyname+0x80>)
    34ee:	47a8      	blx	r5
    34f0:	0003      	movs	r3, r0
    34f2:	7023      	strb	r3, [r4, #0]
		if(s8Err != SOCK_ERR_NO_ERROR)
    34f4:	230f      	movs	r3, #15
    34f6:	18fb      	adds	r3, r7, r3
    34f8:	781b      	ldrb	r3, [r3, #0]
    34fa:	b25b      	sxtb	r3, r3
    34fc:	2b00      	cmp	r3, #0
    34fe:	d003      	beq.n	3508 <gethostbyname+0x6c>
		{
			s8Err = SOCK_ERR_INVALID;
    3500:	230f      	movs	r3, #15
    3502:	18fb      	adds	r3, r7, r3
    3504:	22f7      	movs	r2, #247	; 0xf7
    3506:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Err;
    3508:	230f      	movs	r3, #15
    350a:	18fb      	adds	r3, r7, r3
    350c:	781b      	ldrb	r3, [r3, #0]
    350e:	b25b      	sxtb	r3, r3
}
    3510:	0018      	movs	r0, r3
    3512:	46bd      	mov	sp, r7
    3514:	b004      	add	sp, #16
    3516:	bdb0      	pop	{r4, r5, r7, pc}
    3518:	00000b65 	.word	0x00000b65
    351c:	00000d71 	.word	0x00000d71

00003520 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    3520:	b580      	push	{r7, lr}
    3522:	b082      	sub	sp, #8
    3524:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    3526:	4b10      	ldr	r3, [pc, #64]	; (3568 <cpu_irq_enter_critical+0x48>)
    3528:	681b      	ldr	r3, [r3, #0]
    352a:	2b00      	cmp	r3, #0
    352c:	d112      	bne.n	3554 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    352e:	f3ef 8310 	mrs	r3, PRIMASK
    3532:	607b      	str	r3, [r7, #4]
  return(result);
    3534:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    3536:	2b00      	cmp	r3, #0
    3538:	d109      	bne.n	354e <cpu_irq_enter_critical+0x2e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    353a:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    353c:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3540:	4b0a      	ldr	r3, [pc, #40]	; (356c <cpu_irq_enter_critical+0x4c>)
    3542:	2200      	movs	r2, #0
    3544:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    3546:	4b0a      	ldr	r3, [pc, #40]	; (3570 <cpu_irq_enter_critical+0x50>)
    3548:	2201      	movs	r2, #1
    354a:	701a      	strb	r2, [r3, #0]
    354c:	e002      	b.n	3554 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    354e:	4b08      	ldr	r3, [pc, #32]	; (3570 <cpu_irq_enter_critical+0x50>)
    3550:	2200      	movs	r2, #0
    3552:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3554:	4b04      	ldr	r3, [pc, #16]	; (3568 <cpu_irq_enter_critical+0x48>)
    3556:	681b      	ldr	r3, [r3, #0]
    3558:	1c5a      	adds	r2, r3, #1
    355a:	4b03      	ldr	r3, [pc, #12]	; (3568 <cpu_irq_enter_critical+0x48>)
    355c:	601a      	str	r2, [r3, #0]
}
    355e:	46c0      	nop			; (mov r8, r8)
    3560:	46bd      	mov	sp, r7
    3562:	b002      	add	sp, #8
    3564:	bd80      	pop	{r7, pc}
    3566:	46c0      	nop			; (mov r8, r8)
    3568:	200000c8 	.word	0x200000c8
    356c:	20000010 	.word	0x20000010
    3570:	200000cc 	.word	0x200000cc

00003574 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    3574:	b580      	push	{r7, lr}
    3576:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3578:	4b0b      	ldr	r3, [pc, #44]	; (35a8 <cpu_irq_leave_critical+0x34>)
    357a:	681b      	ldr	r3, [r3, #0]
    357c:	1e5a      	subs	r2, r3, #1
    357e:	4b0a      	ldr	r3, [pc, #40]	; (35a8 <cpu_irq_leave_critical+0x34>)
    3580:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3582:	4b09      	ldr	r3, [pc, #36]	; (35a8 <cpu_irq_leave_critical+0x34>)
    3584:	681b      	ldr	r3, [r3, #0]
    3586:	2b00      	cmp	r3, #0
    3588:	d10a      	bne.n	35a0 <cpu_irq_leave_critical+0x2c>
    358a:	4b08      	ldr	r3, [pc, #32]	; (35ac <cpu_irq_leave_critical+0x38>)
    358c:	781b      	ldrb	r3, [r3, #0]
    358e:	b2db      	uxtb	r3, r3
    3590:	2b00      	cmp	r3, #0
    3592:	d005      	beq.n	35a0 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    3594:	4b06      	ldr	r3, [pc, #24]	; (35b0 <cpu_irq_leave_critical+0x3c>)
    3596:	2201      	movs	r2, #1
    3598:	701a      	strb	r2, [r3, #0]
    359a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    359e:	b662      	cpsie	i
	}
}
    35a0:	46c0      	nop			; (mov r8, r8)
    35a2:	46bd      	mov	sp, r7
    35a4:	bd80      	pop	{r7, pc}
    35a6:	46c0      	nop			; (mov r8, r8)
    35a8:	200000c8 	.word	0x200000c8
    35ac:	200000cc 	.word	0x200000cc
    35b0:	20000010 	.word	0x20000010

000035b4 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    35b4:	b580      	push	{r7, lr}
    35b6:	b084      	sub	sp, #16
    35b8:	af00      	add	r7, sp, #0
    35ba:	0002      	movs	r2, r0
    35bc:	1dfb      	adds	r3, r7, #7
    35be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    35c0:	230f      	movs	r3, #15
    35c2:	18fb      	adds	r3, r7, r3
    35c4:	1dfa      	adds	r2, r7, #7
    35c6:	7812      	ldrb	r2, [r2, #0]
    35c8:	09d2      	lsrs	r2, r2, #7
    35ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    35cc:	230e      	movs	r3, #14
    35ce:	18fb      	adds	r3, r7, r3
    35d0:	1dfa      	adds	r2, r7, #7
    35d2:	7812      	ldrb	r2, [r2, #0]
    35d4:	0952      	lsrs	r2, r2, #5
    35d6:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    35d8:	4b0d      	ldr	r3, [pc, #52]	; (3610 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    35da:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    35dc:	230f      	movs	r3, #15
    35de:	18fb      	adds	r3, r7, r3
    35e0:	781b      	ldrb	r3, [r3, #0]
    35e2:	2b00      	cmp	r3, #0
    35e4:	d10f      	bne.n	3606 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    35e6:	230f      	movs	r3, #15
    35e8:	18fb      	adds	r3, r7, r3
    35ea:	781b      	ldrb	r3, [r3, #0]
    35ec:	009b      	lsls	r3, r3, #2
    35ee:	2210      	movs	r2, #16
    35f0:	4694      	mov	ip, r2
    35f2:	44bc      	add	ip, r7
    35f4:	4463      	add	r3, ip
    35f6:	3b08      	subs	r3, #8
    35f8:	681a      	ldr	r2, [r3, #0]
    35fa:	230e      	movs	r3, #14
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	781b      	ldrb	r3, [r3, #0]
    3600:	01db      	lsls	r3, r3, #7
    3602:	18d3      	adds	r3, r2, r3
    3604:	e000      	b.n	3608 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    3606:	2300      	movs	r3, #0
	}
}
    3608:	0018      	movs	r0, r3
    360a:	46bd      	mov	sp, r7
    360c:	b004      	add	sp, #16
    360e:	bd80      	pop	{r7, pc}
    3610:	41004400 	.word	0x41004400

00003614 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    3614:	b580      	push	{r7, lr}
    3616:	b082      	sub	sp, #8
    3618:	af00      	add	r7, sp, #0
    361a:	0002      	movs	r2, r0
    361c:	1dfb      	adds	r3, r7, #7
    361e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3620:	1dfb      	adds	r3, r7, #7
    3622:	781b      	ldrb	r3, [r3, #0]
    3624:	0018      	movs	r0, r3
    3626:	4b03      	ldr	r3, [pc, #12]	; (3634 <port_get_group_from_gpio_pin+0x20>)
    3628:	4798      	blx	r3
    362a:	0003      	movs	r3, r0
}
    362c:	0018      	movs	r0, r3
    362e:	46bd      	mov	sp, r7
    3630:	b002      	add	sp, #8
    3632:	bd80      	pop	{r7, pc}
    3634:	000035b5 	.word	0x000035b5

00003638 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    3638:	b580      	push	{r7, lr}
    363a:	b082      	sub	sp, #8
    363c:	af00      	add	r7, sp, #0
    363e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	2200      	movs	r2, #0
    3644:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3646:	687b      	ldr	r3, [r7, #4]
    3648:	2201      	movs	r2, #1
    364a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    364c:	687b      	ldr	r3, [r7, #4]
    364e:	2200      	movs	r2, #0
    3650:	709a      	strb	r2, [r3, #2]
}
    3652:	46c0      	nop			; (mov r8, r8)
    3654:	46bd      	mov	sp, r7
    3656:	b002      	add	sp, #8
    3658:	bd80      	pop	{r7, pc}
    365a:	46c0      	nop			; (mov r8, r8)

0000365c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    365c:	b580      	push	{r7, lr}
    365e:	b084      	sub	sp, #16
    3660:	af00      	add	r7, sp, #0
    3662:	0002      	movs	r2, r0
    3664:	1dfb      	adds	r3, r7, #7
    3666:	701a      	strb	r2, [r3, #0]
    3668:	1dbb      	adds	r3, r7, #6
    366a:	1c0a      	adds	r2, r1, #0
    366c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    366e:	1dfb      	adds	r3, r7, #7
    3670:	781b      	ldrb	r3, [r3, #0]
    3672:	0018      	movs	r0, r3
    3674:	4b0d      	ldr	r3, [pc, #52]	; (36ac <port_pin_set_output_level+0x50>)
    3676:	4798      	blx	r3
    3678:	0003      	movs	r3, r0
    367a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    367c:	1dfb      	adds	r3, r7, #7
    367e:	781b      	ldrb	r3, [r3, #0]
    3680:	221f      	movs	r2, #31
    3682:	4013      	ands	r3, r2
    3684:	2201      	movs	r2, #1
    3686:	409a      	lsls	r2, r3
    3688:	0013      	movs	r3, r2
    368a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    368c:	1dbb      	adds	r3, r7, #6
    368e:	781b      	ldrb	r3, [r3, #0]
    3690:	2b00      	cmp	r3, #0
    3692:	d003      	beq.n	369c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3694:	68fb      	ldr	r3, [r7, #12]
    3696:	68ba      	ldr	r2, [r7, #8]
    3698:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    369a:	e002      	b.n	36a2 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    369c:	68fb      	ldr	r3, [r7, #12]
    369e:	68ba      	ldr	r2, [r7, #8]
    36a0:	615a      	str	r2, [r3, #20]
	}
}
    36a2:	46c0      	nop			; (mov r8, r8)
    36a4:	46bd      	mov	sp, r7
    36a6:	b004      	add	sp, #16
    36a8:	bd80      	pop	{r7, pc}
    36aa:	46c0      	nop			; (mov r8, r8)
    36ac:	00003615 	.word	0x00003615

000036b0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    36b0:	b580      	push	{r7, lr}
    36b2:	b082      	sub	sp, #8
    36b4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    36b6:	1d3b      	adds	r3, r7, #4
    36b8:	0018      	movs	r0, r3
    36ba:	4b0e      	ldr	r3, [pc, #56]	; (36f4 <system_board_init+0x44>)
    36bc:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    36be:	1d3b      	adds	r3, r7, #4
    36c0:	2201      	movs	r2, #1
    36c2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    36c4:	1d3b      	adds	r3, r7, #4
    36c6:	0019      	movs	r1, r3
    36c8:	2017      	movs	r0, #23
    36ca:	4b0b      	ldr	r3, [pc, #44]	; (36f8 <system_board_init+0x48>)
    36cc:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
    36ce:	2101      	movs	r1, #1
    36d0:	2017      	movs	r0, #23
    36d2:	4b0a      	ldr	r3, [pc, #40]	; (36fc <system_board_init+0x4c>)
    36d4:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    36d6:	1d3b      	adds	r3, r7, #4
    36d8:	2200      	movs	r2, #0
    36da:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    36dc:	1d3b      	adds	r3, r7, #4
    36de:	2201      	movs	r2, #1
    36e0:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    36e2:	1d3b      	adds	r3, r7, #4
    36e4:	0019      	movs	r1, r3
    36e6:	2037      	movs	r0, #55	; 0x37
    36e8:	4b03      	ldr	r3, [pc, #12]	; (36f8 <system_board_init+0x48>)
    36ea:	4798      	blx	r3
}
    36ec:	46c0      	nop			; (mov r8, r8)
    36ee:	46bd      	mov	sp, r7
    36f0:	b002      	add	sp, #8
    36f2:	bd80      	pop	{r7, pc}
    36f4:	00003639 	.word	0x00003639
    36f8:	00003cf9 	.word	0x00003cf9
    36fc:	0000365d 	.word	0x0000365d

00003700 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    3700:	b580      	push	{r7, lr}
    3702:	b084      	sub	sp, #16
    3704:	af00      	add	r7, sp, #0
    3706:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    3708:	687b      	ldr	r3, [r7, #4]
    370a:	681b      	ldr	r3, [r3, #0]
    370c:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    370e:	68fb      	ldr	r3, [r7, #12]
    3710:	7e5b      	ldrb	r3, [r3, #25]
    3712:	b2db      	uxtb	r3, r3
    3714:	b25b      	sxtb	r3, r3
    3716:	2b00      	cmp	r3, #0
    3718:	da01      	bge.n	371e <adc_is_syncing+0x1e>
		return true;
    371a:	2301      	movs	r3, #1
    371c:	e000      	b.n	3720 <adc_is_syncing+0x20>
	}

	return false;
    371e:	2300      	movs	r3, #0
}
    3720:	0018      	movs	r0, r3
    3722:	46bd      	mov	sp, r7
    3724:	b004      	add	sp, #16
    3726:	bd80      	pop	{r7, pc}

00003728 <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    3728:	b580      	push	{r7, lr}
    372a:	b084      	sub	sp, #16
    372c:	af00      	add	r7, sp, #0
    372e:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    3730:	687b      	ldr	r3, [r7, #4]
    3732:	681b      	ldr	r3, [r3, #0]
    3734:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    3736:	46c0      	nop			; (mov r8, r8)
    3738:	687b      	ldr	r3, [r7, #4]
    373a:	0018      	movs	r0, r3
    373c:	4b0b      	ldr	r3, [pc, #44]	; (376c <adc_start_conversion+0x44>)
    373e:	4798      	blx	r3
    3740:	1e03      	subs	r3, r0, #0
    3742:	d1f9      	bne.n	3738 <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    3744:	68fb      	ldr	r3, [r7, #12]
    3746:	7b1b      	ldrb	r3, [r3, #12]
    3748:	b2db      	uxtb	r3, r3
    374a:	2202      	movs	r2, #2
    374c:	4313      	orrs	r3, r2
    374e:	b2da      	uxtb	r2, r3
    3750:	68fb      	ldr	r3, [r7, #12]
    3752:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    3754:	46c0      	nop			; (mov r8, r8)
    3756:	687b      	ldr	r3, [r7, #4]
    3758:	0018      	movs	r0, r3
    375a:	4b04      	ldr	r3, [pc, #16]	; (376c <adc_start_conversion+0x44>)
    375c:	4798      	blx	r3
    375e:	1e03      	subs	r3, r0, #0
    3760:	d1f9      	bne.n	3756 <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    3762:	46c0      	nop			; (mov r8, r8)
    3764:	46bd      	mov	sp, r7
    3766:	b004      	add	sp, #16
    3768:	bd80      	pop	{r7, pc}
    376a:	46c0      	nop			; (mov r8, r8)
    376c:	00003701 	.word	0x00003701

00003770 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
    3770:	b580      	push	{r7, lr}
    3772:	b084      	sub	sp, #16
    3774:	af00      	add	r7, sp, #0
    3776:	6078      	str	r0, [r7, #4]
    3778:	000a      	movs	r2, r1
    377a:	1cfb      	adds	r3, r7, #3
    377c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    377e:	687b      	ldr	r3, [r7, #4]
    3780:	681b      	ldr	r3, [r3, #0]
    3782:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
    3784:	68fb      	ldr	r3, [r7, #12]
    3786:	1cfa      	adds	r2, r7, #3
    3788:	7812      	ldrb	r2, [r2, #0]
    378a:	759a      	strb	r2, [r3, #22]
}
    378c:	46c0      	nop			; (mov r8, r8)
    378e:	46bd      	mov	sp, r7
    3790:	b004      	add	sp, #16
    3792:	bd80      	pop	{r7, pc}

00003794 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
    3794:	b580      	push	{r7, lr}
    3796:	b084      	sub	sp, #16
    3798:	af00      	add	r7, sp, #0
    379a:	0002      	movs	r2, r0
    379c:	1dfb      	adds	r3, r7, #7
    379e:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
    37a0:	1dfb      	adds	r3, r7, #7
    37a2:	781a      	ldrb	r2, [r3, #0]
    37a4:	4b44      	ldr	r3, [pc, #272]	; (38b8 <_adc_interrupt_handler+0x124>)
    37a6:	0092      	lsls	r2, r2, #2
    37a8:	58d3      	ldr	r3, [r2, r3]
    37aa:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
    37ac:	68fb      	ldr	r3, [r7, #12]
    37ae:	681b      	ldr	r3, [r3, #0]
    37b0:	7e1b      	ldrb	r3, [r3, #24]
    37b2:	b2db      	uxtb	r3, r3
    37b4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
    37b6:	68bb      	ldr	r3, [r7, #8]
    37b8:	2201      	movs	r2, #1
    37ba:	4013      	ands	r3, r2
    37bc:	d045      	beq.n	384a <_adc_interrupt_handler+0xb6>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    37be:	68fb      	ldr	r3, [r7, #12]
    37c0:	7edb      	ldrb	r3, [r3, #27]
    37c2:	001a      	movs	r2, r3
    37c4:	2301      	movs	r3, #1
    37c6:	4013      	ands	r3, r2
    37c8:	d03f      	beq.n	384a <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
    37ca:	68fb      	ldr	r3, [r7, #12]
    37cc:	7e9b      	ldrb	r3, [r3, #26]
    37ce:	001a      	movs	r2, r3
    37d0:	2301      	movs	r3, #1
    37d2:	4013      	ands	r3, r2

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
    37d4:	d039      	beq.n	384a <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
    37d6:	68fb      	ldr	r3, [r7, #12]
    37d8:	681b      	ldr	r3, [r3, #0]
    37da:	2201      	movs	r2, #1
    37dc:	761a      	strb	r2, [r3, #24]

			while (adc_is_syncing(module)) {
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	68fb      	ldr	r3, [r7, #12]
    37e2:	0018      	movs	r0, r3
    37e4:	4b35      	ldr	r3, [pc, #212]	; (38bc <_adc_interrupt_handler+0x128>)
    37e6:	4798      	blx	r3
    37e8:	1e03      	subs	r3, r0, #0
    37ea:	d1f9      	bne.n	37e0 <_adc_interrupt_handler+0x4c>
				/* Wait for synchronization */
			}

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
    37ec:	68fb      	ldr	r3, [r7, #12]
    37ee:	695b      	ldr	r3, [r3, #20]
    37f0:	1c99      	adds	r1, r3, #2
    37f2:	68fa      	ldr	r2, [r7, #12]
    37f4:	6151      	str	r1, [r2, #20]
    37f6:	68fa      	ldr	r2, [r7, #12]
    37f8:	6812      	ldr	r2, [r2, #0]
    37fa:	8b52      	ldrh	r2, [r2, #26]
    37fc:	b292      	uxth	r2, r2
    37fe:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
    3800:	68fb      	ldr	r3, [r7, #12]
    3802:	8b1b      	ldrh	r3, [r3, #24]
    3804:	b29b      	uxth	r3, r3
    3806:	3b01      	subs	r3, #1
    3808:	b29b      	uxth	r3, r3
    380a:	68fa      	ldr	r2, [r7, #12]
    380c:	1c19      	adds	r1, r3, #0
    380e:	8311      	strh	r1, [r2, #24]
    3810:	2b00      	cmp	r3, #0
    3812:	d008      	beq.n	3826 <_adc_interrupt_handler+0x92>
				if (module->software_trigger == true) {
    3814:	68fb      	ldr	r3, [r7, #12]
    3816:	7f5b      	ldrb	r3, [r3, #29]
    3818:	2b00      	cmp	r3, #0
    381a:	d016      	beq.n	384a <_adc_interrupt_handler+0xb6>
					adc_start_conversion(module);
    381c:	68fb      	ldr	r3, [r7, #12]
    381e:	0018      	movs	r0, r3
    3820:	4b27      	ldr	r3, [pc, #156]	; (38c0 <_adc_interrupt_handler+0x12c>)
    3822:	4798      	blx	r3
    3824:	e011      	b.n	384a <_adc_interrupt_handler+0xb6>
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
    3826:	68fb      	ldr	r3, [r7, #12]
    3828:	7f1b      	ldrb	r3, [r3, #28]
    382a:	b2db      	uxtb	r3, r3
    382c:	2b05      	cmp	r3, #5
    382e:	d10c      	bne.n	384a <_adc_interrupt_handler+0xb6>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
    3830:	68fb      	ldr	r3, [r7, #12]
    3832:	2200      	movs	r2, #0
    3834:	771a      	strb	r2, [r3, #28]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
    3836:	68fb      	ldr	r3, [r7, #12]
    3838:	2101      	movs	r1, #1
    383a:	0018      	movs	r0, r3
    383c:	4b21      	ldr	r3, [pc, #132]	; (38c4 <_adc_interrupt_handler+0x130>)
    383e:	4798      	blx	r3

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
    3840:	68fb      	ldr	r3, [r7, #12]
    3842:	689b      	ldr	r3, [r3, #8]
    3844:	68fa      	ldr	r2, [r7, #12]
    3846:	0010      	movs	r0, r2
    3848:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
    384a:	68bb      	ldr	r3, [r7, #8]
    384c:	2204      	movs	r2, #4
    384e:	4013      	ands	r3, r2
    3850:	d014      	beq.n	387c <_adc_interrupt_handler+0xe8>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
    3852:	68fb      	ldr	r3, [r7, #12]
    3854:	681b      	ldr	r3, [r3, #0]
    3856:	2204      	movs	r2, #4
    3858:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    385a:	68fb      	ldr	r3, [r7, #12]
    385c:	7edb      	ldrb	r3, [r3, #27]
    385e:	001a      	movs	r2, r3
    3860:	2302      	movs	r3, #2
    3862:	4013      	ands	r3, r2
    3864:	d00a      	beq.n	387c <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
    3866:	68fb      	ldr	r3, [r7, #12]
    3868:	7e9b      	ldrb	r3, [r3, #26]
    386a:	001a      	movs	r2, r3
    386c:	2302      	movs	r3, #2
    386e:	4013      	ands	r3, r2
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
    3870:	d004      	beq.n	387c <_adc_interrupt_handler+0xe8>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
    3872:	68fb      	ldr	r3, [r7, #12]
    3874:	68db      	ldr	r3, [r3, #12]
    3876:	68fa      	ldr	r2, [r7, #12]
    3878:	0010      	movs	r0, r2
    387a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
    387c:	68bb      	ldr	r3, [r7, #8]
    387e:	2202      	movs	r2, #2
    3880:	4013      	ands	r3, r2
    3882:	d014      	beq.n	38ae <_adc_interrupt_handler+0x11a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
    3884:	68fb      	ldr	r3, [r7, #12]
    3886:	681b      	ldr	r3, [r3, #0]
    3888:	2202      	movs	r2, #2
    388a:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    388c:	68fb      	ldr	r3, [r7, #12]
    388e:	7edb      	ldrb	r3, [r3, #27]
    3890:	001a      	movs	r2, r3
    3892:	2304      	movs	r3, #4
    3894:	4013      	ands	r3, r2
    3896:	d00a      	beq.n	38ae <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
    3898:	68fb      	ldr	r3, [r7, #12]
    389a:	7e9b      	ldrb	r3, [r3, #26]
    389c:	001a      	movs	r2, r3
    389e:	2304      	movs	r3, #4
    38a0:	4013      	ands	r3, r2

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
    38a2:	d004      	beq.n	38ae <_adc_interrupt_handler+0x11a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
    38a4:	68fb      	ldr	r3, [r7, #12]
    38a6:	691b      	ldr	r3, [r3, #16]
    38a8:	68fa      	ldr	r2, [r7, #12]
    38aa:	0010      	movs	r0, r2
    38ac:	4798      	blx	r3
		}
	}
}
    38ae:	46c0      	nop			; (mov r8, r8)
    38b0:	46bd      	mov	sp, r7
    38b2:	b004      	add	sp, #16
    38b4:	bd80      	pop	{r7, pc}
    38b6:	46c0      	nop			; (mov r8, r8)
    38b8:	20004568 	.word	0x20004568
    38bc:	00003701 	.word	0x00003701
    38c0:	00003729 	.word	0x00003729
    38c4:	00003771 	.word	0x00003771

000038c8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
    38c8:	b580      	push	{r7, lr}
    38ca:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
    38cc:	2000      	movs	r0, #0
    38ce:	4b02      	ldr	r3, [pc, #8]	; (38d8 <ADC_Handler+0x10>)
    38d0:	4798      	blx	r3
}
    38d2:	46c0      	nop			; (mov r8, r8)
    38d4:	46bd      	mov	sp, r7
    38d6:	bd80      	pop	{r7, pc}
    38d8:	00003795 	.word	0x00003795

000038dc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    38dc:	b580      	push	{r7, lr}
    38de:	b084      	sub	sp, #16
    38e0:	af00      	add	r7, sp, #0
    38e2:	0002      	movs	r2, r0
    38e4:	1dfb      	adds	r3, r7, #7
    38e6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    38e8:	230f      	movs	r3, #15
    38ea:	18fb      	adds	r3, r7, r3
    38ec:	1dfa      	adds	r2, r7, #7
    38ee:	7812      	ldrb	r2, [r2, #0]
    38f0:	0952      	lsrs	r2, r2, #5
    38f2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    38f4:	230f      	movs	r3, #15
    38f6:	18fb      	adds	r3, r7, r3
    38f8:	781b      	ldrb	r3, [r3, #0]
    38fa:	2b00      	cmp	r3, #0
    38fc:	d10c      	bne.n	3918 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    38fe:	4b09      	ldr	r3, [pc, #36]	; (3924 <_extint_get_eic_from_channel+0x48>)
    3900:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    3902:	230f      	movs	r3, #15
    3904:	18fb      	adds	r3, r7, r3
    3906:	781b      	ldrb	r3, [r3, #0]
    3908:	009b      	lsls	r3, r3, #2
    390a:	2210      	movs	r2, #16
    390c:	4694      	mov	ip, r2
    390e:	44bc      	add	ip, r7
    3910:	4463      	add	r3, ip
    3912:	3b08      	subs	r3, #8
    3914:	681b      	ldr	r3, [r3, #0]
    3916:	e000      	b.n	391a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    3918:	2300      	movs	r3, #0
	}
}
    391a:	0018      	movs	r0, r3
    391c:	46bd      	mov	sp, r7
    391e:	b004      	add	sp, #16
    3920:	bd80      	pop	{r7, pc}
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	40001800 	.word	0x40001800

00003928 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    3928:	b580      	push	{r7, lr}
    392a:	b084      	sub	sp, #16
    392c:	af00      	add	r7, sp, #0
    392e:	0002      	movs	r2, r0
    3930:	1dfb      	adds	r3, r7, #7
    3932:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3934:	1dfb      	adds	r3, r7, #7
    3936:	781b      	ldrb	r3, [r3, #0]
    3938:	0018      	movs	r0, r3
    393a:	4b0b      	ldr	r3, [pc, #44]	; (3968 <extint_chan_is_detected+0x40>)
    393c:	4798      	blx	r3
    393e:	0003      	movs	r3, r0
    3940:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3942:	1dfb      	adds	r3, r7, #7
    3944:	781b      	ldrb	r3, [r3, #0]
    3946:	221f      	movs	r2, #31
    3948:	4013      	ands	r3, r2
    394a:	2201      	movs	r2, #1
    394c:	409a      	lsls	r2, r3
    394e:	0013      	movs	r3, r2
    3950:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    3952:	68fb      	ldr	r3, [r7, #12]
    3954:	691b      	ldr	r3, [r3, #16]
    3956:	68ba      	ldr	r2, [r7, #8]
    3958:	4013      	ands	r3, r2
    395a:	1e5a      	subs	r2, r3, #1
    395c:	4193      	sbcs	r3, r2
    395e:	b2db      	uxtb	r3, r3
}
    3960:	0018      	movs	r0, r3
    3962:	46bd      	mov	sp, r7
    3964:	b004      	add	sp, #16
    3966:	bd80      	pop	{r7, pc}
    3968:	000038dd 	.word	0x000038dd

0000396c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    396c:	b580      	push	{r7, lr}
    396e:	b084      	sub	sp, #16
    3970:	af00      	add	r7, sp, #0
    3972:	0002      	movs	r2, r0
    3974:	1dfb      	adds	r3, r7, #7
    3976:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    3978:	1dfb      	adds	r3, r7, #7
    397a:	781b      	ldrb	r3, [r3, #0]
    397c:	0018      	movs	r0, r3
    397e:	4b09      	ldr	r3, [pc, #36]	; (39a4 <extint_chan_clear_detected+0x38>)
    3980:	4798      	blx	r3
    3982:	0003      	movs	r3, r0
    3984:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    3986:	1dfb      	adds	r3, r7, #7
    3988:	781b      	ldrb	r3, [r3, #0]
    398a:	221f      	movs	r2, #31
    398c:	4013      	ands	r3, r2
    398e:	2201      	movs	r2, #1
    3990:	409a      	lsls	r2, r3
    3992:	0013      	movs	r3, r2
    3994:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    3996:	68fb      	ldr	r3, [r7, #12]
    3998:	68ba      	ldr	r2, [r7, #8]
    399a:	611a      	str	r2, [r3, #16]
}
    399c:	46c0      	nop			; (mov r8, r8)
    399e:	46bd      	mov	sp, r7
    39a0:	b004      	add	sp, #16
    39a2:	bd80      	pop	{r7, pc}
    39a4:	000038dd 	.word	0x000038dd

000039a8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    39a8:	b580      	push	{r7, lr}
    39aa:	b084      	sub	sp, #16
    39ac:	af00      	add	r7, sp, #0
    39ae:	0002      	movs	r2, r0
    39b0:	1dfb      	adds	r3, r7, #7
    39b2:	701a      	strb	r2, [r3, #0]
    39b4:	1dbb      	adds	r3, r7, #6
    39b6:	1c0a      	adds	r2, r1, #0
    39b8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    39ba:	1dbb      	adds	r3, r7, #6
    39bc:	781b      	ldrb	r3, [r3, #0]
    39be:	2b00      	cmp	r3, #0
    39c0:	d10e      	bne.n	39e0 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    39c2:	1dfb      	adds	r3, r7, #7
    39c4:	781b      	ldrb	r3, [r3, #0]
    39c6:	0018      	movs	r0, r3
    39c8:	4b08      	ldr	r3, [pc, #32]	; (39ec <extint_chan_enable_callback+0x44>)
    39ca:	4798      	blx	r3
    39cc:	0003      	movs	r3, r0
    39ce:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    39d0:	1dfb      	adds	r3, r7, #7
    39d2:	781b      	ldrb	r3, [r3, #0]
    39d4:	2201      	movs	r2, #1
    39d6:	409a      	lsls	r2, r3
    39d8:	68fb      	ldr	r3, [r7, #12]
    39da:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    39dc:	2300      	movs	r3, #0
    39de:	e000      	b.n	39e2 <extint_chan_enable_callback+0x3a>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    39e0:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    39e2:	0018      	movs	r0, r3
    39e4:	46bd      	mov	sp, r7
    39e6:	b004      	add	sp, #16
    39e8:	bd80      	pop	{r7, pc}
    39ea:	46c0      	nop			; (mov r8, r8)
    39ec:	000038dd 	.word	0x000038dd

000039f0 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    39f0:	b580      	push	{r7, lr}
    39f2:	b084      	sub	sp, #16
    39f4:	af00      	add	r7, sp, #0
    39f6:	0002      	movs	r2, r0
    39f8:	1dfb      	adds	r3, r7, #7
    39fa:	701a      	strb	r2, [r3, #0]
    39fc:	1dbb      	adds	r3, r7, #6
    39fe:	1c0a      	adds	r2, r1, #0
    3a00:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    3a02:	1dbb      	adds	r3, r7, #6
    3a04:	781b      	ldrb	r3, [r3, #0]
    3a06:	2b00      	cmp	r3, #0
    3a08:	d10e      	bne.n	3a28 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    3a0a:	1dfb      	adds	r3, r7, #7
    3a0c:	781b      	ldrb	r3, [r3, #0]
    3a0e:	0018      	movs	r0, r3
    3a10:	4b08      	ldr	r3, [pc, #32]	; (3a34 <extint_chan_disable_callback+0x44>)
    3a12:	4798      	blx	r3
    3a14:	0003      	movs	r3, r0
    3a16:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
    3a18:	1dfb      	adds	r3, r7, #7
    3a1a:	781b      	ldrb	r3, [r3, #0]
    3a1c:	2201      	movs	r2, #1
    3a1e:	409a      	lsls	r2, r3
    3a20:	68fb      	ldr	r3, [r7, #12]
    3a22:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    3a24:	2300      	movs	r3, #0
    3a26:	e000      	b.n	3a2a <extint_chan_disable_callback+0x3a>

		eic->INTENCLR.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    3a28:	2317      	movs	r3, #23
	}

	return STATUS_OK;
}
    3a2a:	0018      	movs	r0, r3
    3a2c:	46bd      	mov	sp, r7
    3a2e:	b004      	add	sp, #16
    3a30:	bd80      	pop	{r7, pc}
    3a32:	46c0      	nop			; (mov r8, r8)
    3a34:	000038dd 	.word	0x000038dd

00003a38 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    3a38:	b580      	push	{r7, lr}
    3a3a:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3a3c:	4b15      	ldr	r3, [pc, #84]	; (3a94 <EIC_Handler+0x5c>)
    3a3e:	2200      	movs	r2, #0
    3a40:	701a      	strb	r2, [r3, #0]
    3a42:	e020      	b.n	3a86 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
    3a44:	4b13      	ldr	r3, [pc, #76]	; (3a94 <EIC_Handler+0x5c>)
    3a46:	781b      	ldrb	r3, [r3, #0]
    3a48:	0018      	movs	r0, r3
    3a4a:	4b13      	ldr	r3, [pc, #76]	; (3a98 <EIC_Handler+0x60>)
    3a4c:	4798      	blx	r3
    3a4e:	1e03      	subs	r3, r0, #0
    3a50:	d013      	beq.n	3a7a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    3a52:	4b10      	ldr	r3, [pc, #64]	; (3a94 <EIC_Handler+0x5c>)
    3a54:	781b      	ldrb	r3, [r3, #0]
    3a56:	0018      	movs	r0, r3
    3a58:	4b10      	ldr	r3, [pc, #64]	; (3a9c <EIC_Handler+0x64>)
    3a5a:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    3a5c:	4b0d      	ldr	r3, [pc, #52]	; (3a94 <EIC_Handler+0x5c>)
    3a5e:	781b      	ldrb	r3, [r3, #0]
    3a60:	001a      	movs	r2, r3
    3a62:	4b0f      	ldr	r3, [pc, #60]	; (3aa0 <EIC_Handler+0x68>)
    3a64:	0092      	lsls	r2, r2, #2
    3a66:	58d3      	ldr	r3, [r2, r3]
    3a68:	2b00      	cmp	r3, #0
    3a6a:	d006      	beq.n	3a7a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    3a6c:	4b09      	ldr	r3, [pc, #36]	; (3a94 <EIC_Handler+0x5c>)
    3a6e:	781b      	ldrb	r3, [r3, #0]
    3a70:	001a      	movs	r2, r3
    3a72:	4b0b      	ldr	r3, [pc, #44]	; (3aa0 <EIC_Handler+0x68>)
    3a74:	0092      	lsls	r2, r2, #2
    3a76:	58d3      	ldr	r3, [r2, r3]
    3a78:	4798      	blx	r3

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    3a7a:	4b06      	ldr	r3, [pc, #24]	; (3a94 <EIC_Handler+0x5c>)
    3a7c:	781b      	ldrb	r3, [r3, #0]
    3a7e:	3301      	adds	r3, #1
    3a80:	b2da      	uxtb	r2, r3
    3a82:	4b04      	ldr	r3, [pc, #16]	; (3a94 <EIC_Handler+0x5c>)
    3a84:	701a      	strb	r2, [r3, #0]
    3a86:	4b03      	ldr	r3, [pc, #12]	; (3a94 <EIC_Handler+0x5c>)
    3a88:	781b      	ldrb	r3, [r3, #0]
    3a8a:	2b0f      	cmp	r3, #15
    3a8c:	d9da      	bls.n	3a44 <EIC_Handler+0xc>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    3a8e:	46c0      	nop			; (mov r8, r8)
    3a90:	46bd      	mov	sp, r7
    3a92:	bd80      	pop	{r7, pc}
    3a94:	2000456c 	.word	0x2000456c
    3a98:	00003929 	.word	0x00003929
    3a9c:	0000396d 	.word	0x0000396d
    3aa0:	20004570 	.word	0x20004570

00003aa4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3aa4:	b580      	push	{r7, lr}
    3aa6:	b082      	sub	sp, #8
    3aa8:	af00      	add	r7, sp, #0
    3aaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3aac:	687b      	ldr	r3, [r7, #4]
    3aae:	2200      	movs	r2, #0
    3ab0:	701a      	strb	r2, [r3, #0]
}
    3ab2:	46c0      	nop			; (mov r8, r8)
    3ab4:	46bd      	mov	sp, r7
    3ab6:	b002      	add	sp, #8
    3ab8:	bd80      	pop	{r7, pc}
    3aba:	46c0      	nop			; (mov r8, r8)

00003abc <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3abc:	b580      	push	{r7, lr}
    3abe:	b082      	sub	sp, #8
    3ac0:	af00      	add	r7, sp, #0
    3ac2:	0002      	movs	r2, r0
    3ac4:	6039      	str	r1, [r7, #0]
    3ac6:	1dfb      	adds	r3, r7, #7
    3ac8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3aca:	1dfb      	adds	r3, r7, #7
    3acc:	781b      	ldrb	r3, [r3, #0]
    3ace:	2b01      	cmp	r3, #1
    3ad0:	d00a      	beq.n	3ae8 <system_apb_clock_set_mask+0x2c>
    3ad2:	2b02      	cmp	r3, #2
    3ad4:	d00f      	beq.n	3af6 <system_apb_clock_set_mask+0x3a>
    3ad6:	2b00      	cmp	r3, #0
    3ad8:	d114      	bne.n	3b04 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3ada:	4b0e      	ldr	r3, [pc, #56]	; (3b14 <system_apb_clock_set_mask+0x58>)
    3adc:	4a0d      	ldr	r2, [pc, #52]	; (3b14 <system_apb_clock_set_mask+0x58>)
    3ade:	6991      	ldr	r1, [r2, #24]
    3ae0:	683a      	ldr	r2, [r7, #0]
    3ae2:	430a      	orrs	r2, r1
    3ae4:	619a      	str	r2, [r3, #24]
			break;
    3ae6:	e00f      	b.n	3b08 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3ae8:	4b0a      	ldr	r3, [pc, #40]	; (3b14 <system_apb_clock_set_mask+0x58>)
    3aea:	4a0a      	ldr	r2, [pc, #40]	; (3b14 <system_apb_clock_set_mask+0x58>)
    3aec:	69d1      	ldr	r1, [r2, #28]
    3aee:	683a      	ldr	r2, [r7, #0]
    3af0:	430a      	orrs	r2, r1
    3af2:	61da      	str	r2, [r3, #28]
			break;
    3af4:	e008      	b.n	3b08 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3af6:	4b07      	ldr	r3, [pc, #28]	; (3b14 <system_apb_clock_set_mask+0x58>)
    3af8:	4a06      	ldr	r2, [pc, #24]	; (3b14 <system_apb_clock_set_mask+0x58>)
    3afa:	6a11      	ldr	r1, [r2, #32]
    3afc:	683a      	ldr	r2, [r7, #0]
    3afe:	430a      	orrs	r2, r1
    3b00:	621a      	str	r2, [r3, #32]
			break;
    3b02:	e001      	b.n	3b08 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3b04:	2317      	movs	r3, #23
    3b06:	e000      	b.n	3b0a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3b08:	2300      	movs	r3, #0
}
    3b0a:	0018      	movs	r0, r3
    3b0c:	46bd      	mov	sp, r7
    3b0e:	b002      	add	sp, #8
    3b10:	bd80      	pop	{r7, pc}
    3b12:	46c0      	nop			; (mov r8, r8)
    3b14:	40000400 	.word	0x40000400

00003b18 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    3b18:	b580      	push	{r7, lr}
    3b1a:	b082      	sub	sp, #8
    3b1c:	af00      	add	r7, sp, #0
    3b1e:	0002      	movs	r2, r0
    3b20:	1dfb      	adds	r3, r7, #7
    3b22:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3b24:	4b06      	ldr	r3, [pc, #24]	; (3b40 <system_interrupt_enable+0x28>)
    3b26:	1dfa      	adds	r2, r7, #7
    3b28:	7812      	ldrb	r2, [r2, #0]
    3b2a:	0011      	movs	r1, r2
    3b2c:	221f      	movs	r2, #31
    3b2e:	400a      	ands	r2, r1
    3b30:	2101      	movs	r1, #1
    3b32:	4091      	lsls	r1, r2
    3b34:	000a      	movs	r2, r1
    3b36:	601a      	str	r2, [r3, #0]
}
    3b38:	46c0      	nop			; (mov r8, r8)
    3b3a:	46bd      	mov	sp, r7
    3b3c:	b002      	add	sp, #8
    3b3e:	bd80      	pop	{r7, pc}
    3b40:	e000e100 	.word	0xe000e100

00003b44 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    3b44:	b580      	push	{r7, lr}
    3b46:	b082      	sub	sp, #8
    3b48:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3b4a:	4b0f      	ldr	r3, [pc, #60]	; (3b88 <extint_is_syncing+0x44>)
    3b4c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3b4e:	2300      	movs	r3, #0
    3b50:	607b      	str	r3, [r7, #4]
    3b52:	e011      	b.n	3b78 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    3b54:	687b      	ldr	r3, [r7, #4]
    3b56:	009b      	lsls	r3, r3, #2
    3b58:	2208      	movs	r2, #8
    3b5a:	4694      	mov	ip, r2
    3b5c:	44bc      	add	ip, r7
    3b5e:	4463      	add	r3, ip
    3b60:	3b08      	subs	r3, #8
    3b62:	681b      	ldr	r3, [r3, #0]
    3b64:	785b      	ldrb	r3, [r3, #1]
    3b66:	b2db      	uxtb	r3, r3
    3b68:	b25b      	sxtb	r3, r3
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	da01      	bge.n	3b72 <extint_is_syncing+0x2e>
			return true;
    3b6e:	2301      	movs	r3, #1
    3b70:	e006      	b.n	3b80 <extint_is_syncing+0x3c>
 */
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3b72:	687b      	ldr	r3, [r7, #4]
    3b74:	3301      	adds	r3, #1
    3b76:	607b      	str	r3, [r7, #4]
    3b78:	687b      	ldr	r3, [r7, #4]
    3b7a:	2b00      	cmp	r3, #0
    3b7c:	d0ea      	beq.n	3b54 <extint_is_syncing+0x10>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
			return true;
		}
	}
	return false;
    3b7e:	2300      	movs	r3, #0
}
    3b80:	0018      	movs	r0, r3
    3b82:	46bd      	mov	sp, r7
    3b84:	b002      	add	sp, #8
    3b86:	bd80      	pop	{r7, pc}
    3b88:	40001800 	.word	0x40001800

00003b8c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    3b8c:	b580      	push	{r7, lr}
    3b8e:	b084      	sub	sp, #16
    3b90:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3b92:	4b2d      	ldr	r3, [pc, #180]	; (3c48 <_system_extint_init+0xbc>)
    3b94:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    3b96:	2140      	movs	r1, #64	; 0x40
    3b98:	2000      	movs	r0, #0
    3b9a:	4b2c      	ldr	r3, [pc, #176]	; (3c4c <_system_extint_init+0xc0>)
    3b9c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3b9e:	003b      	movs	r3, r7
    3ba0:	0018      	movs	r0, r3
    3ba2:	4b2b      	ldr	r3, [pc, #172]	; (3c50 <_system_extint_init+0xc4>)
    3ba4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    3ba6:	003b      	movs	r3, r7
    3ba8:	2200      	movs	r2, #0
    3baa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    3bac:	003b      	movs	r3, r7
    3bae:	0019      	movs	r1, r3
    3bb0:	2005      	movs	r0, #5
    3bb2:	4b28      	ldr	r3, [pc, #160]	; (3c54 <_system_extint_init+0xc8>)
    3bb4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    3bb6:	2005      	movs	r0, #5
    3bb8:	4b27      	ldr	r3, [pc, #156]	; (3c58 <_system_extint_init+0xcc>)
    3bba:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3bbc:	2300      	movs	r3, #0
    3bbe:	60fb      	str	r3, [r7, #12]
    3bc0:	e018      	b.n	3bf4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    3bc2:	68fb      	ldr	r3, [r7, #12]
    3bc4:	009b      	lsls	r3, r3, #2
    3bc6:	2210      	movs	r2, #16
    3bc8:	4694      	mov	ip, r2
    3bca:	44bc      	add	ip, r7
    3bcc:	4463      	add	r3, ip
    3bce:	3b0c      	subs	r3, #12
    3bd0:	681a      	ldr	r2, [r3, #0]
    3bd2:	68fb      	ldr	r3, [r7, #12]
    3bd4:	009b      	lsls	r3, r3, #2
    3bd6:	2110      	movs	r1, #16
    3bd8:	468c      	mov	ip, r1
    3bda:	44bc      	add	ip, r7
    3bdc:	4463      	add	r3, ip
    3bde:	3b0c      	subs	r3, #12
    3be0:	681b      	ldr	r3, [r3, #0]
    3be2:	781b      	ldrb	r3, [r3, #0]
    3be4:	b2db      	uxtb	r3, r3
    3be6:	2101      	movs	r1, #1
    3be8:	430b      	orrs	r3, r1
    3bea:	b2db      	uxtb	r3, r3
    3bec:	7013      	strb	r3, [r2, #0]
	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3bee:	68fb      	ldr	r3, [r7, #12]
    3bf0:	3301      	adds	r3, #1
    3bf2:	60fb      	str	r3, [r7, #12]
    3bf4:	68fb      	ldr	r3, [r7, #12]
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d0e3      	beq.n	3bc2 <_system_extint_init+0x36>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
	}

	while (extint_is_syncing()) {
    3bfa:	46c0      	nop			; (mov r8, r8)
    3bfc:	4b17      	ldr	r3, [pc, #92]	; (3c5c <_system_extint_init+0xd0>)
    3bfe:	4798      	blx	r3
    3c00:	1e03      	subs	r3, r0, #0
    3c02:	d1fb      	bne.n	3bfc <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3c04:	230b      	movs	r3, #11
    3c06:	18fb      	adds	r3, r7, r3
    3c08:	2200      	movs	r2, #0
    3c0a:	701a      	strb	r2, [r3, #0]
    3c0c:	e00d      	b.n	3c2a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
    3c0e:	230b      	movs	r3, #11
    3c10:	18fb      	adds	r3, r7, r3
    3c12:	781a      	ldrb	r2, [r3, #0]
    3c14:	4b12      	ldr	r3, [pc, #72]	; (3c60 <_system_extint_init+0xd4>)
    3c16:	0092      	lsls	r2, r2, #2
    3c18:	2100      	movs	r1, #0
    3c1a:	50d1      	str	r1, [r2, r3]
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    3c1c:	230b      	movs	r3, #11
    3c1e:	18fb      	adds	r3, r7, r3
    3c20:	781a      	ldrb	r2, [r3, #0]
    3c22:	230b      	movs	r3, #11
    3c24:	18fb      	adds	r3, r7, r3
    3c26:	3201      	adds	r2, #1
    3c28:	701a      	strb	r2, [r3, #0]
    3c2a:	230b      	movs	r3, #11
    3c2c:	18fb      	adds	r3, r7, r3
    3c2e:	781b      	ldrb	r3, [r3, #0]
    3c30:	2b0f      	cmp	r3, #15
    3c32:	d9ec      	bls.n	3c0e <_system_extint_init+0x82>
		_extint_dev.callbacks[j] = NULL;
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    3c34:	2004      	movs	r0, #4
    3c36:	4b0b      	ldr	r3, [pc, #44]	; (3c64 <_system_extint_init+0xd8>)
    3c38:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    3c3a:	4b0b      	ldr	r3, [pc, #44]	; (3c68 <_system_extint_init+0xdc>)
    3c3c:	4798      	blx	r3
}
    3c3e:	46c0      	nop			; (mov r8, r8)
    3c40:	46bd      	mov	sp, r7
    3c42:	b004      	add	sp, #16
    3c44:	bd80      	pop	{r7, pc}
    3c46:	46c0      	nop			; (mov r8, r8)
    3c48:	40001800 	.word	0x40001800
    3c4c:	00003abd 	.word	0x00003abd
    3c50:	00003aa5 	.word	0x00003aa5
    3c54:	00006725 	.word	0x00006725
    3c58:	00006769 	.word	0x00006769
    3c5c:	00003b45 	.word	0x00003b45
    3c60:	20004570 	.word	0x20004570
    3c64:	00003b19 	.word	0x00003b19
    3c68:	00003c6d 	.word	0x00003c6d

00003c6c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    3c6c:	b580      	push	{r7, lr}
    3c6e:	b082      	sub	sp, #8
    3c70:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    3c72:	4b15      	ldr	r3, [pc, #84]	; (3cc8 <_extint_enable+0x5c>)
    3c74:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3c76:	2300      	movs	r3, #0
    3c78:	607b      	str	r3, [r7, #4]
    3c7a:	e018      	b.n	3cae <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    3c7c:	687b      	ldr	r3, [r7, #4]
    3c7e:	009b      	lsls	r3, r3, #2
    3c80:	2208      	movs	r2, #8
    3c82:	4694      	mov	ip, r2
    3c84:	44bc      	add	ip, r7
    3c86:	4463      	add	r3, ip
    3c88:	3b08      	subs	r3, #8
    3c8a:	681a      	ldr	r2, [r3, #0]
    3c8c:	687b      	ldr	r3, [r7, #4]
    3c8e:	009b      	lsls	r3, r3, #2
    3c90:	2108      	movs	r1, #8
    3c92:	468c      	mov	ip, r1
    3c94:	44bc      	add	ip, r7
    3c96:	4463      	add	r3, ip
    3c98:	3b08      	subs	r3, #8
    3c9a:	681b      	ldr	r3, [r3, #0]
    3c9c:	781b      	ldrb	r3, [r3, #0]
    3c9e:	b2db      	uxtb	r3, r3
    3ca0:	2102      	movs	r1, #2
    3ca2:	430b      	orrs	r3, r1
    3ca4:	b2db      	uxtb	r3, r3
    3ca6:	7013      	strb	r3, [r2, #0]
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    3ca8:	687b      	ldr	r3, [r7, #4]
    3caa:	3301      	adds	r3, #1
    3cac:	607b      	str	r3, [r7, #4]
    3cae:	687b      	ldr	r3, [r7, #4]
    3cb0:	2b00      	cmp	r3, #0
    3cb2:	d0e3      	beq.n	3c7c <_extint_enable+0x10>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
    3cb4:	46c0      	nop			; (mov r8, r8)
    3cb6:	4b05      	ldr	r3, [pc, #20]	; (3ccc <_extint_enable+0x60>)
    3cb8:	4798      	blx	r3
    3cba:	1e03      	subs	r3, r0, #0
    3cbc:	d1fb      	bne.n	3cb6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    3cbe:	46c0      	nop			; (mov r8, r8)
    3cc0:	46bd      	mov	sp, r7
    3cc2:	b002      	add	sp, #8
    3cc4:	bd80      	pop	{r7, pc}
    3cc6:	46c0      	nop			; (mov r8, r8)
    3cc8:	40001800 	.word	0x40001800
    3ccc:	00003b45 	.word	0x00003b45

00003cd0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3cd0:	b580      	push	{r7, lr}
    3cd2:	b082      	sub	sp, #8
    3cd4:	af00      	add	r7, sp, #0
    3cd6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3cd8:	687b      	ldr	r3, [r7, #4]
    3cda:	2280      	movs	r2, #128	; 0x80
    3cdc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3cde:	687b      	ldr	r3, [r7, #4]
    3ce0:	2200      	movs	r2, #0
    3ce2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ce4:	687b      	ldr	r3, [r7, #4]
    3ce6:	2201      	movs	r2, #1
    3ce8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3cea:	687b      	ldr	r3, [r7, #4]
    3cec:	2200      	movs	r2, #0
    3cee:	70da      	strb	r2, [r3, #3]
}
    3cf0:	46c0      	nop			; (mov r8, r8)
    3cf2:	46bd      	mov	sp, r7
    3cf4:	b002      	add	sp, #8
    3cf6:	bd80      	pop	{r7, pc}

00003cf8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3cf8:	b580      	push	{r7, lr}
    3cfa:	b084      	sub	sp, #16
    3cfc:	af00      	add	r7, sp, #0
    3cfe:	0002      	movs	r2, r0
    3d00:	6039      	str	r1, [r7, #0]
    3d02:	1dfb      	adds	r3, r7, #7
    3d04:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    3d06:	230c      	movs	r3, #12
    3d08:	18fb      	adds	r3, r7, r3
    3d0a:	0018      	movs	r0, r3
    3d0c:	4b10      	ldr	r3, [pc, #64]	; (3d50 <port_pin_set_config+0x58>)
    3d0e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    3d10:	230c      	movs	r3, #12
    3d12:	18fb      	adds	r3, r7, r3
    3d14:	2280      	movs	r2, #128	; 0x80
    3d16:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    3d18:	683b      	ldr	r3, [r7, #0]
    3d1a:	781a      	ldrb	r2, [r3, #0]
    3d1c:	230c      	movs	r3, #12
    3d1e:	18fb      	adds	r3, r7, r3
    3d20:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3d22:	683b      	ldr	r3, [r7, #0]
    3d24:	785a      	ldrb	r2, [r3, #1]
    3d26:	230c      	movs	r3, #12
    3d28:	18fb      	adds	r3, r7, r3
    3d2a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3d2c:	683b      	ldr	r3, [r7, #0]
    3d2e:	789a      	ldrb	r2, [r3, #2]
    3d30:	230c      	movs	r3, #12
    3d32:	18fb      	adds	r3, r7, r3
    3d34:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3d36:	230c      	movs	r3, #12
    3d38:	18fa      	adds	r2, r7, r3
    3d3a:	1dfb      	adds	r3, r7, #7
    3d3c:	781b      	ldrb	r3, [r3, #0]
    3d3e:	0011      	movs	r1, r2
    3d40:	0018      	movs	r0, r3
    3d42:	4b04      	ldr	r3, [pc, #16]	; (3d54 <port_pin_set_config+0x5c>)
    3d44:	4798      	blx	r3
}
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	46bd      	mov	sp, r7
    3d4a:	b004      	add	sp, #16
    3d4c:	bd80      	pop	{r7, pc}
    3d4e:	46c0      	nop			; (mov r8, r8)
    3d50:	00003cd1 	.word	0x00003cd1
    3d54:	00006a11 	.word	0x00006a11

00003d58 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    3d58:	b580      	push	{r7, lr}
    3d5a:	b086      	sub	sp, #24
    3d5c:	af00      	add	r7, sp, #0
    3d5e:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
    3d60:	4b28      	ldr	r3, [pc, #160]	; (3e04 <_rtc_interrupt_handler+0xac>)
    3d62:	687a      	ldr	r2, [r7, #4]
    3d64:	0092      	lsls	r2, r2, #2
    3d66:	58d3      	ldr	r3, [r2, r3]
    3d68:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    3d6a:	697b      	ldr	r3, [r7, #20]
    3d6c:	681b      	ldr	r3, [r3, #0]
    3d6e:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    3d70:	230e      	movs	r3, #14
    3d72:	18fb      	adds	r3, r7, r3
    3d74:	697a      	ldr	r2, [r7, #20]
    3d76:	8a52      	ldrh	r2, [r2, #18]
    3d78:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    3d7a:	697b      	ldr	r3, [r7, #20]
    3d7c:	8a1b      	ldrh	r3, [r3, #16]
    3d7e:	b29a      	uxth	r2, r3
    3d80:	230e      	movs	r3, #14
    3d82:	18fb      	adds	r3, r7, r3
    3d84:	210e      	movs	r1, #14
    3d86:	1879      	adds	r1, r7, r1
    3d88:	8809      	ldrh	r1, [r1, #0]
    3d8a:	400a      	ands	r2, r1
    3d8c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    3d8e:	693b      	ldr	r3, [r7, #16]
    3d90:	7a1b      	ldrb	r3, [r3, #8]
    3d92:	b2da      	uxtb	r2, r3
    3d94:	230c      	movs	r3, #12
    3d96:	18fb      	adds	r3, r7, r3
    3d98:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    3d9a:	693b      	ldr	r3, [r7, #16]
    3d9c:	79db      	ldrb	r3, [r3, #7]
    3d9e:	b2db      	uxtb	r3, r3
    3da0:	b29a      	uxth	r2, r3
    3da2:	230c      	movs	r3, #12
    3da4:	18fb      	adds	r3, r7, r3
    3da6:	210c      	movs	r1, #12
    3da8:	1879      	adds	r1, r7, r1
    3daa:	8809      	ldrh	r1, [r1, #0]
    3dac:	400a      	ands	r2, r1
    3dae:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    3db0:	230c      	movs	r3, #12
    3db2:	18fb      	adds	r3, r7, r3
    3db4:	881b      	ldrh	r3, [r3, #0]
    3db6:	2280      	movs	r2, #128	; 0x80
    3db8:	4013      	ands	r3, r2
    3dba:	d00c      	beq.n	3dd6 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    3dbc:	230e      	movs	r3, #14
    3dbe:	18fb      	adds	r3, r7, r3
    3dc0:	881b      	ldrh	r3, [r3, #0]
    3dc2:	2202      	movs	r2, #2
    3dc4:	4013      	ands	r3, r2
    3dc6:	d002      	beq.n	3dce <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    3dc8:	697b      	ldr	r3, [r7, #20]
    3dca:	68db      	ldr	r3, [r3, #12]
    3dcc:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    3dce:	693b      	ldr	r3, [r7, #16]
    3dd0:	2280      	movs	r2, #128	; 0x80
    3dd2:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    3dd4:	e011      	b.n	3dfa <_rtc_interrupt_handler+0xa2>
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;

	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    3dd6:	230c      	movs	r3, #12
    3dd8:	18fb      	adds	r3, r7, r3
    3dda:	881b      	ldrh	r3, [r3, #0]
    3ddc:	2201      	movs	r2, #1
    3dde:	4013      	ands	r3, r2
    3de0:	d00b      	beq.n	3dfa <_rtc_interrupt_handler+0xa2>
		/* Alarm 0 interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    3de2:	230e      	movs	r3, #14
    3de4:	18fb      	adds	r3, r7, r3
    3de6:	881b      	ldrh	r3, [r3, #0]
    3de8:	2201      	movs	r2, #1
    3dea:	4013      	ands	r3, r2
    3dec:	d002      	beq.n	3df4 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    3dee:	697b      	ldr	r3, [r7, #20]
    3df0:	689b      	ldr	r3, [r3, #8]
    3df2:	4798      	blx	r3
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    3df4:	693b      	ldr	r3, [r7, #16]
    3df6:	2201      	movs	r2, #1
    3df8:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    3dfa:	46c0      	nop			; (mov r8, r8)
    3dfc:	46bd      	mov	sp, r7
    3dfe:	b006      	add	sp, #24
    3e00:	bd80      	pop	{r7, pc}
    3e02:	46c0      	nop			; (mov r8, r8)
    3e04:	200045b0 	.word	0x200045b0

00003e08 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    3e08:	b580      	push	{r7, lr}
    3e0a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    3e0c:	2000      	movs	r0, #0
    3e0e:	4b02      	ldr	r3, [pc, #8]	; (3e18 <RTC_Handler+0x10>)
    3e10:	4798      	blx	r3
}
    3e12:	46c0      	nop			; (mov r8, r8)
    3e14:	46bd      	mov	sp, r7
    3e16:	bd80      	pop	{r7, pc}
    3e18:	00003d59 	.word	0x00003d59

00003e1c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    3e1c:	b580      	push	{r7, lr}
    3e1e:	b082      	sub	sp, #8
    3e20:	af00      	add	r7, sp, #0
    3e22:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    3e24:	687b      	ldr	r3, [r7, #4]
    3e26:	2200      	movs	r2, #0
    3e28:	701a      	strb	r2, [r3, #0]
}
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	46bd      	mov	sp, r7
    3e2e:	b002      	add	sp, #8
    3e30:	bd80      	pop	{r7, pc}
    3e32:	46c0      	nop			; (mov r8, r8)

00003e34 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    3e34:	b580      	push	{r7, lr}
    3e36:	b082      	sub	sp, #8
    3e38:	af00      	add	r7, sp, #0
    3e3a:	0002      	movs	r2, r0
    3e3c:	6039      	str	r1, [r7, #0]
    3e3e:	1dfb      	adds	r3, r7, #7
    3e40:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3e42:	1dfb      	adds	r3, r7, #7
    3e44:	781b      	ldrb	r3, [r3, #0]
    3e46:	2b01      	cmp	r3, #1
    3e48:	d00a      	beq.n	3e60 <system_apb_clock_set_mask+0x2c>
    3e4a:	2b02      	cmp	r3, #2
    3e4c:	d00f      	beq.n	3e6e <system_apb_clock_set_mask+0x3a>
    3e4e:	2b00      	cmp	r3, #0
    3e50:	d114      	bne.n	3e7c <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    3e52:	4b0e      	ldr	r3, [pc, #56]	; (3e8c <system_apb_clock_set_mask+0x58>)
    3e54:	4a0d      	ldr	r2, [pc, #52]	; (3e8c <system_apb_clock_set_mask+0x58>)
    3e56:	6991      	ldr	r1, [r2, #24]
    3e58:	683a      	ldr	r2, [r7, #0]
    3e5a:	430a      	orrs	r2, r1
    3e5c:	619a      	str	r2, [r3, #24]
			break;
    3e5e:	e00f      	b.n	3e80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    3e60:	4b0a      	ldr	r3, [pc, #40]	; (3e8c <system_apb_clock_set_mask+0x58>)
    3e62:	4a0a      	ldr	r2, [pc, #40]	; (3e8c <system_apb_clock_set_mask+0x58>)
    3e64:	69d1      	ldr	r1, [r2, #28]
    3e66:	683a      	ldr	r2, [r7, #0]
    3e68:	430a      	orrs	r2, r1
    3e6a:	61da      	str	r2, [r3, #28]
			break;
    3e6c:	e008      	b.n	3e80 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    3e6e:	4b07      	ldr	r3, [pc, #28]	; (3e8c <system_apb_clock_set_mask+0x58>)
    3e70:	4a06      	ldr	r2, [pc, #24]	; (3e8c <system_apb_clock_set_mask+0x58>)
    3e72:	6a11      	ldr	r1, [r2, #32]
    3e74:	683a      	ldr	r2, [r7, #0]
    3e76:	430a      	orrs	r2, r1
    3e78:	621a      	str	r2, [r3, #32]
			break;
    3e7a:	e001      	b.n	3e80 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    3e7c:	2317      	movs	r3, #23
    3e7e:	e000      	b.n	3e82 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    3e80:	2300      	movs	r3, #0
}
    3e82:	0018      	movs	r0, r3
    3e84:	46bd      	mov	sp, r7
    3e86:	b002      	add	sp, #8
    3e88:	bd80      	pop	{r7, pc}
    3e8a:	46c0      	nop			; (mov r8, r8)
    3e8c:	40000400 	.word	0x40000400

00003e90 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    3e90:	b580      	push	{r7, lr}
    3e92:	b082      	sub	sp, #8
    3e94:	af00      	add	r7, sp, #0
    3e96:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3e98:	687b      	ldr	r3, [r7, #4]
    3e9a:	2280      	movs	r2, #128	; 0x80
    3e9c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3e9e:	687b      	ldr	r3, [r7, #4]
    3ea0:	2200      	movs	r2, #0
    3ea2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3ea4:	687b      	ldr	r3, [r7, #4]
    3ea6:	2201      	movs	r2, #1
    3ea8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3eaa:	687b      	ldr	r3, [r7, #4]
    3eac:	2200      	movs	r2, #0
    3eae:	70da      	strb	r2, [r3, #3]
}
    3eb0:	46c0      	nop			; (mov r8, r8)
    3eb2:	46bd      	mov	sp, r7
    3eb4:	b002      	add	sp, #8
    3eb6:	bd80      	pop	{r7, pc}

00003eb8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3eb8:	b580      	push	{r7, lr}
    3eba:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3ebc:	4b05      	ldr	r3, [pc, #20]	; (3ed4 <system_is_debugger_present+0x1c>)
    3ebe:	789b      	ldrb	r3, [r3, #2]
    3ec0:	b2db      	uxtb	r3, r3
    3ec2:	001a      	movs	r2, r3
    3ec4:	2302      	movs	r3, #2
    3ec6:	4013      	ands	r3, r2
    3ec8:	1e5a      	subs	r2, r3, #1
    3eca:	4193      	sbcs	r3, r2
    3ecc:	b2db      	uxtb	r3, r3
}
    3ece:	0018      	movs	r0, r3
    3ed0:	46bd      	mov	sp, r7
    3ed2:	bd80      	pop	{r7, pc}
    3ed4:	41002000 	.word	0x41002000

00003ed8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    3ed8:	b580      	push	{r7, lr}
    3eda:	b084      	sub	sp, #16
    3edc:	af00      	add	r7, sp, #0
    3ede:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    3ee0:	687b      	ldr	r3, [r7, #4]
    3ee2:	681b      	ldr	r3, [r3, #0]
    3ee4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    3ee6:	68fb      	ldr	r3, [r7, #12]
    3ee8:	69db      	ldr	r3, [r3, #28]
    3eea:	2207      	movs	r2, #7
    3eec:	4013      	ands	r3, r2
    3eee:	1e5a      	subs	r2, r3, #1
    3ef0:	4193      	sbcs	r3, r2
    3ef2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    3ef4:	0018      	movs	r0, r3
    3ef6:	46bd      	mov	sp, r7
    3ef8:	b004      	add	sp, #16
    3efa:	bd80      	pop	{r7, pc}

00003efc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    3efc:	b580      	push	{r7, lr}
    3efe:	b082      	sub	sp, #8
    3f00:	af00      	add	r7, sp, #0
    3f02:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    3f04:	46c0      	nop			; (mov r8, r8)
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	0018      	movs	r0, r3
    3f0a:	4b04      	ldr	r3, [pc, #16]	; (3f1c <_i2c_master_wait_for_sync+0x20>)
    3f0c:	4798      	blx	r3
    3f0e:	1e03      	subs	r3, r0, #0
    3f10:	d1f9      	bne.n	3f06 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    3f12:	46c0      	nop			; (mov r8, r8)
    3f14:	46bd      	mov	sp, r7
    3f16:	b002      	add	sp, #8
    3f18:	bd80      	pop	{r7, pc}
    3f1a:	46c0      	nop			; (mov r8, r8)
    3f1c:	00003ed9 	.word	0x00003ed9

00003f20 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    3f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f22:	b095      	sub	sp, #84	; 0x54
    3f24:	af00      	add	r7, sp, #0
    3f26:	60f8      	str	r0, [r7, #12]
    3f28:	60b9      	str	r1, [r7, #8]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
    3f2a:	2300      	movs	r3, #0
    3f2c:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t tmp_baud_hs = 0;
    3f2e:	2300      	movs	r3, #0
    3f30:	64bb      	str	r3, [r7, #72]	; 0x48
	int32_t tmp_baudlow_hs = 0;
    3f32:	2300      	movs	r3, #0
    3f34:	647b      	str	r3, [r7, #68]	; 0x44
	enum status_code tmp_status_code = STATUS_OK;
    3f36:	233b      	movs	r3, #59	; 0x3b
    3f38:	2208      	movs	r2, #8
    3f3a:	4694      	mov	ip, r2
    3f3c:	44bc      	add	ip, r7
    3f3e:	4463      	add	r3, ip
    3f40:	2200      	movs	r2, #0
    3f42:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    3f44:	68fb      	ldr	r3, [r7, #12]
    3f46:	681b      	ldr	r3, [r3, #0]
    3f48:	633b      	str	r3, [r7, #48]	; 0x30
	Sercom *const sercom_hw = module->hw;
    3f4a:	68fb      	ldr	r3, [r7, #12]
    3f4c:	681b      	ldr	r3, [r3, #0]
    3f4e:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    3f50:	2323      	movs	r3, #35	; 0x23
    3f52:	2208      	movs	r2, #8
    3f54:	18ba      	adds	r2, r7, r2
    3f56:	18d4      	adds	r4, r2, r3
    3f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f5a:	0018      	movs	r0, r3
    3f5c:	4bdb      	ldr	r3, [pc, #876]	; (42cc <_i2c_master_set_config+0x3ac>)
    3f5e:	4798      	blx	r3
    3f60:	0003      	movs	r3, r0
    3f62:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    3f64:	230c      	movs	r3, #12
    3f66:	2208      	movs	r2, #8
    3f68:	4694      	mov	ip, r2
    3f6a:	44bc      	add	ip, r7
    3f6c:	4463      	add	r3, ip
    3f6e:	0018      	movs	r0, r3
    3f70:	4bd7      	ldr	r3, [pc, #860]	; (42d0 <_i2c_master_set_config+0x3b0>)
    3f72:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
    3f74:	68bb      	ldr	r3, [r7, #8]
    3f76:	69db      	ldr	r3, [r3, #28]
    3f78:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t pad1 = config->pinmux_pad1;
    3f7a:	68bb      	ldr	r3, [r7, #8]
    3f7c:	6a1b      	ldr	r3, [r3, #32]
    3f7e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    3f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f82:	2b00      	cmp	r3, #0
    3f84:	d106      	bne.n	3f94 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    3f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3f88:	2100      	movs	r1, #0
    3f8a:	0018      	movs	r0, r3
    3f8c:	4bd1      	ldr	r3, [pc, #836]	; (42d4 <_i2c_master_set_config+0x3b4>)
    3f8e:	4798      	blx	r3
    3f90:	0003      	movs	r3, r0
    3f92:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    3f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3f96:	b2da      	uxtb	r2, r3
    3f98:	230c      	movs	r3, #12
    3f9a:	2108      	movs	r1, #8
    3f9c:	468c      	mov	ip, r1
    3f9e:	44bc      	add	ip, r7
    3fa0:	4463      	add	r3, ip
    3fa2:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3fa4:	230c      	movs	r3, #12
    3fa6:	2208      	movs	r2, #8
    3fa8:	4694      	mov	ip, r2
    3faa:	44bc      	add	ip, r7
    3fac:	4463      	add	r3, ip
    3fae:	2202      	movs	r2, #2
    3fb0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    3fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3fb4:	0c1b      	lsrs	r3, r3, #16
    3fb6:	b2db      	uxtb	r3, r3
    3fb8:	220c      	movs	r2, #12
    3fba:	2108      	movs	r1, #8
    3fbc:	468c      	mov	ip, r1
    3fbe:	44bc      	add	ip, r7
    3fc0:	4462      	add	r2, ip
    3fc2:	0011      	movs	r1, r2
    3fc4:	0018      	movs	r0, r3
    3fc6:	4bc4      	ldr	r3, [pc, #784]	; (42d8 <_i2c_master_set_config+0x3b8>)
    3fc8:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    3fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3fcc:	2b00      	cmp	r3, #0
    3fce:	d106      	bne.n	3fde <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    3fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3fd2:	2101      	movs	r1, #1
    3fd4:	0018      	movs	r0, r3
    3fd6:	4bbf      	ldr	r3, [pc, #764]	; (42d4 <_i2c_master_set_config+0x3b4>)
    3fd8:	4798      	blx	r3
    3fda:	0003      	movs	r3, r0
    3fdc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    3fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3fe0:	b2da      	uxtb	r2, r3
    3fe2:	230c      	movs	r3, #12
    3fe4:	2108      	movs	r1, #8
    3fe6:	468c      	mov	ip, r1
    3fe8:	44bc      	add	ip, r7
    3fea:	4463      	add	r3, ip
    3fec:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    3fee:	230c      	movs	r3, #12
    3ff0:	2208      	movs	r2, #8
    3ff2:	4694      	mov	ip, r2
    3ff4:	44bc      	add	ip, r7
    3ff6:	4463      	add	r3, ip
    3ff8:	2202      	movs	r2, #2
    3ffa:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    3ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    3ffe:	0c1b      	lsrs	r3, r3, #16
    4000:	b2db      	uxtb	r3, r3
    4002:	220c      	movs	r2, #12
    4004:	2108      	movs	r1, #8
    4006:	468c      	mov	ip, r1
    4008:	44bc      	add	ip, r7
    400a:	4462      	add	r2, ip
    400c:	0011      	movs	r1, r2
    400e:	0018      	movs	r0, r3
    4010:	4bb1      	ldr	r3, [pc, #708]	; (42d8 <_i2c_master_set_config+0x3b8>)
    4012:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    4014:	68bb      	ldr	r3, [r7, #8]
    4016:	8a9a      	ldrh	r2, [r3, #20]
    4018:	68fb      	ldr	r3, [r7, #12]
    401a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    401c:	68bb      	ldr	r3, [r7, #8]
    401e:	8ada      	ldrh	r2, [r3, #22]
    4020:	68fb      	ldr	r3, [r7, #12]
    4022:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4024:	68bb      	ldr	r3, [r7, #8]
    4026:	7e1b      	ldrb	r3, [r3, #24]
    4028:	2b00      	cmp	r3, #0
    402a:	d103      	bne.n	4034 <_i2c_master_set_config+0x114>
    402c:	4bab      	ldr	r3, [pc, #684]	; (42dc <_i2c_master_set_config+0x3bc>)
    402e:	4798      	blx	r3
    4030:	1e03      	subs	r3, r0, #0
    4032:	d002      	beq.n	403a <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    4034:	2380      	movs	r3, #128	; 0x80
    4036:	64fb      	str	r3, [r7, #76]	; 0x4c
    4038:	e001      	b.n	403e <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
    403a:	2300      	movs	r3, #0
    403c:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    403e:	68bb      	ldr	r3, [r7, #8]
    4040:	691b      	ldr	r3, [r3, #16]
    4042:	2b00      	cmp	r3, #0
    4044:	d004      	beq.n	4050 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
    4046:	68bb      	ldr	r3, [r7, #8]
    4048:	691b      	ldr	r3, [r3, #16]
    404a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    404c:	4313      	orrs	r3, r2
    404e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    4050:	68bb      	ldr	r3, [r7, #8]
    4052:	689b      	ldr	r3, [r3, #8]
    4054:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    4056:	4313      	orrs	r3, r2
    4058:	64fb      	str	r3, [r7, #76]	; 0x4c

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    405a:	68bb      	ldr	r3, [r7, #8]
    405c:	2224      	movs	r2, #36	; 0x24
    405e:	5c9b      	ldrb	r3, [r3, r2]
    4060:	2b00      	cmp	r3, #0
    4062:	d004      	beq.n	406e <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    4064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4066:	2280      	movs	r2, #128	; 0x80
    4068:	05d2      	lsls	r2, r2, #23
    406a:	4313      	orrs	r3, r2
    406c:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    406e:	68bb      	ldr	r3, [r7, #8]
    4070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4072:	2b00      	cmp	r3, #0
    4074:	d004      	beq.n	4080 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
    4076:	68bb      	ldr	r3, [r7, #8]
    4078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    407a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    407c:	4313      	orrs	r3, r2
    407e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    4080:	68bb      	ldr	r3, [r7, #8]
    4082:	222c      	movs	r2, #44	; 0x2c
    4084:	5c9b      	ldrb	r3, [r3, r2]
    4086:	2b00      	cmp	r3, #0
    4088:	d105      	bne.n	4096 <_i2c_master_set_config+0x176>
    408a:	68bb      	ldr	r3, [r7, #8]
    408c:	689a      	ldr	r2, [r3, #8]
    408e:	2380      	movs	r3, #128	; 0x80
    4090:	049b      	lsls	r3, r3, #18
    4092:	429a      	cmp	r2, r3
    4094:	d104      	bne.n	40a0 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    4096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4098:	2280      	movs	r2, #128	; 0x80
    409a:	0512      	lsls	r2, r2, #20
    409c:	4313      	orrs	r3, r2
    409e:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    40a0:	68bb      	ldr	r3, [r7, #8]
    40a2:	222d      	movs	r2, #45	; 0x2d
    40a4:	5c9b      	ldrb	r3, [r3, r2]
    40a6:	2b00      	cmp	r3, #0
    40a8:	d004      	beq.n	40b4 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    40aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    40ac:	2280      	movs	r2, #128	; 0x80
    40ae:	0412      	lsls	r2, r2, #16
    40b0:	4313      	orrs	r3, r2
    40b2:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    40b4:	68bb      	ldr	r3, [r7, #8]
    40b6:	222e      	movs	r2, #46	; 0x2e
    40b8:	5c9b      	ldrb	r3, [r3, r2]
    40ba:	2b00      	cmp	r3, #0
    40bc:	d004      	beq.n	40c8 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    40be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    40c0:	2280      	movs	r2, #128	; 0x80
    40c2:	03d2      	lsls	r2, r2, #15
    40c4:	4313      	orrs	r3, r2
    40c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    40c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40ca:	681a      	ldr	r2, [r3, #0]
    40cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    40ce:	431a      	orrs	r2, r3
    40d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40d2:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    40d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    40d6:	2280      	movs	r2, #128	; 0x80
    40d8:	0052      	lsls	r2, r2, #1
    40da:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    40dc:	2323      	movs	r3, #35	; 0x23
    40de:	2208      	movs	r2, #8
    40e0:	4694      	mov	ip, r2
    40e2:	44bc      	add	ip, r7
    40e4:	4463      	add	r3, ip
    40e6:	781b      	ldrb	r3, [r3, #0]
    40e8:	3314      	adds	r3, #20
    40ea:	b2db      	uxtb	r3, r3
    40ec:	0018      	movs	r0, r3
    40ee:	4b7c      	ldr	r3, [pc, #496]	; (42e0 <_i2c_master_set_config+0x3c0>)
    40f0:	4798      	blx	r3
    40f2:	0003      	movs	r3, r0
    40f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fscl        = 1000 * config->baud_rate;
    40f6:	68bb      	ldr	r3, [r7, #8]
    40f8:	681b      	ldr	r3, [r3, #0]
    40fa:	22fa      	movs	r2, #250	; 0xfa
    40fc:	0092      	lsls	r2, r2, #2
    40fe:	4353      	muls	r3, r2
    4100:	623b      	str	r3, [r7, #32]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    4102:	68bb      	ldr	r3, [r7, #8]
    4104:	685b      	ldr	r3, [r3, #4]
    4106:	22fa      	movs	r2, #250	; 0xfa
    4108:	0092      	lsls	r2, r2, #2
    410a:	4353      	muls	r3, r2
    410c:	61fb      	str	r3, [r7, #28]
	uint32_t trise       = config->sda_scl_rise_time_ns;
    410e:	68bb      	ldr	r3, [r7, #8]
    4110:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4112:	61bb      	str	r3, [r7, #24]
	
	tmp_baud = (int32_t)(div_ceil(
    4114:	4b73      	ldr	r3, [pc, #460]	; (42e4 <_i2c_master_set_config+0x3c4>)
    4116:	6a78      	ldr	r0, [r7, #36]	; 0x24
    4118:	4798      	blx	r3
    411a:	0005      	movs	r5, r0
    411c:	000e      	movs	r6, r1
    411e:	4b71      	ldr	r3, [pc, #452]	; (42e4 <_i2c_master_set_config+0x3c4>)
    4120:	6a38      	ldr	r0, [r7, #32]
    4122:	4798      	blx	r3
    4124:	6038      	str	r0, [r7, #0]
    4126:	6079      	str	r1, [r7, #4]
    4128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    412a:	69ba      	ldr	r2, [r7, #24]
    412c:	435a      	muls	r2, r3
    412e:	4b6d      	ldr	r3, [pc, #436]	; (42e4 <_i2c_master_set_config+0x3c4>)
    4130:	0010      	movs	r0, r2
    4132:	4798      	blx	r3
    4134:	4c6c      	ldr	r4, [pc, #432]	; (42e8 <_i2c_master_set_config+0x3c8>)
    4136:	4a6d      	ldr	r2, [pc, #436]	; (42ec <_i2c_master_set_config+0x3cc>)
    4138:	4b6d      	ldr	r3, [pc, #436]	; (42f0 <_i2c_master_set_config+0x3d0>)
    413a:	47a0      	blx	r4
    413c:	0003      	movs	r3, r0
    413e:	000c      	movs	r4, r1
    4140:	0018      	movs	r0, r3
    4142:	0021      	movs	r1, r4
    4144:	4c6b      	ldr	r4, [pc, #428]	; (42f4 <_i2c_master_set_config+0x3d4>)
    4146:	2200      	movs	r2, #0
    4148:	4b6b      	ldr	r3, [pc, #428]	; (42f8 <_i2c_master_set_config+0x3d8>)
    414a:	47a0      	blx	r4
    414c:	0003      	movs	r3, r0
    414e:	000c      	movs	r4, r1
    4150:	001a      	movs	r2, r3
    4152:	0023      	movs	r3, r4
    4154:	4c64      	ldr	r4, [pc, #400]	; (42e8 <_i2c_master_set_config+0x3c8>)
    4156:	6838      	ldr	r0, [r7, #0]
    4158:	6879      	ldr	r1, [r7, #4]
    415a:	47a0      	blx	r4
    415c:	0003      	movs	r3, r0
    415e:	000c      	movs	r4, r1
    4160:	001a      	movs	r2, r3
    4162:	0023      	movs	r3, r4
    4164:	4c65      	ldr	r4, [pc, #404]	; (42fc <_i2c_master_set_config+0x3dc>)
    4166:	0028      	movs	r0, r5
    4168:	0031      	movs	r1, r6
    416a:	47a0      	blx	r4
    416c:	0003      	movs	r3, r0
    416e:	000c      	movs	r4, r1
    4170:	001d      	movs	r5, r3
    4172:	0026      	movs	r6, r4
    4174:	6a3b      	ldr	r3, [r7, #32]
    4176:	005a      	lsls	r2, r3, #1
    4178:	4b5a      	ldr	r3, [pc, #360]	; (42e4 <_i2c_master_set_config+0x3c4>)
    417a:	0010      	movs	r0, r2
    417c:	4798      	blx	r3
    417e:	0002      	movs	r2, r0
    4180:	000b      	movs	r3, r1
    4182:	4c5c      	ldr	r4, [pc, #368]	; (42f4 <_i2c_master_set_config+0x3d4>)
    4184:	0028      	movs	r0, r5
    4186:	0031      	movs	r1, r6
    4188:	47a0      	blx	r4
    418a:	0003      	movs	r3, r0
    418c:	000c      	movs	r4, r1
    418e:	0018      	movs	r0, r3
    4190:	0021      	movs	r1, r4
    4192:	4c5a      	ldr	r4, [pc, #360]	; (42fc <_i2c_master_set_config+0x3dc>)
    4194:	2200      	movs	r2, #0
    4196:	4b5a      	ldr	r3, [pc, #360]	; (4300 <_i2c_master_set_config+0x3e0>)
    4198:	47a0      	blx	r4
    419a:	0003      	movs	r3, r0
    419c:	000c      	movs	r4, r1
    419e:	001d      	movs	r5, r3
    41a0:	0026      	movs	r6, r4
    41a2:	6a3b      	ldr	r3, [r7, #32]
    41a4:	005a      	lsls	r2, r3, #1
    41a6:	4b4f      	ldr	r3, [pc, #316]	; (42e4 <_i2c_master_set_config+0x3c4>)
    41a8:	0010      	movs	r0, r2
    41aa:	4798      	blx	r3
    41ac:	0002      	movs	r2, r0
    41ae:	000b      	movs	r3, r1
    41b0:	4c54      	ldr	r4, [pc, #336]	; (4304 <_i2c_master_set_config+0x3e4>)
    41b2:	0028      	movs	r0, r5
    41b4:	0031      	movs	r1, r6
    41b6:	47a0      	blx	r4
    41b8:	0003      	movs	r3, r0
    41ba:	000c      	movs	r4, r1
    41bc:	0019      	movs	r1, r3
    41be:	0022      	movs	r2, r4
    41c0:	4b51      	ldr	r3, [pc, #324]	; (4308 <_i2c_master_set_config+0x3e8>)
    41c2:	0008      	movs	r0, r1
    41c4:	0011      	movs	r1, r2
    41c6:	4798      	blx	r3
    41c8:	0003      	movs	r3, r0
    41ca:	637b      	str	r3, [r7, #52]	; 0x34
			fgclk - fscl * (10 + fgclk * trise * 0.000000001), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    41cc:	68bb      	ldr	r3, [r7, #8]
    41ce:	689a      	ldr	r2, [r3, #8]
    41d0:	2380      	movs	r3, #128	; 0x80
    41d2:	049b      	lsls	r3, r3, #18
    41d4:	429a      	cmp	r2, r3
    41d6:	d145      	bne.n	4264 <_i2c_master_set_config+0x344>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    41d8:	4b42      	ldr	r3, [pc, #264]	; (42e4 <_i2c_master_set_config+0x3c4>)
    41da:	6a78      	ldr	r0, [r7, #36]	; 0x24
    41dc:	4798      	blx	r3
    41de:	4c45      	ldr	r4, [pc, #276]	; (42f4 <_i2c_master_set_config+0x3d4>)
    41e0:	0002      	movs	r2, r0
    41e2:	000b      	movs	r3, r1
    41e4:	47a0      	blx	r4
    41e6:	0003      	movs	r3, r0
    41e8:	000c      	movs	r4, r1
    41ea:	001d      	movs	r5, r3
    41ec:	0026      	movs	r6, r4
    41ee:	4b3d      	ldr	r3, [pc, #244]	; (42e4 <_i2c_master_set_config+0x3c4>)
    41f0:	69f8      	ldr	r0, [r7, #28]
    41f2:	4798      	blx	r3
    41f4:	4c3c      	ldr	r4, [pc, #240]	; (42e8 <_i2c_master_set_config+0x3c8>)
    41f6:	2200      	movs	r2, #0
    41f8:	4b44      	ldr	r3, [pc, #272]	; (430c <_i2c_master_set_config+0x3ec>)
    41fa:	47a0      	blx	r4
    41fc:	0003      	movs	r3, r0
    41fe:	000c      	movs	r4, r1
    4200:	001a      	movs	r2, r3
    4202:	0023      	movs	r3, r4
    4204:	4c3f      	ldr	r4, [pc, #252]	; (4304 <_i2c_master_set_config+0x3e4>)
    4206:	0028      	movs	r0, r5
    4208:	0031      	movs	r1, r6
    420a:	47a0      	blx	r4
    420c:	0003      	movs	r3, r0
    420e:	000c      	movs	r4, r1
    4210:	0018      	movs	r0, r3
    4212:	0021      	movs	r1, r4
    4214:	4c39      	ldr	r4, [pc, #228]	; (42fc <_i2c_master_set_config+0x3dc>)
    4216:	2200      	movs	r2, #0
    4218:	4b39      	ldr	r3, [pc, #228]	; (4300 <_i2c_master_set_config+0x3e0>)
    421a:	47a0      	blx	r4
    421c:	0003      	movs	r3, r0
    421e:	000c      	movs	r4, r1
    4220:	0019      	movs	r1, r3
    4222:	0022      	movs	r2, r4
    4224:	4b38      	ldr	r3, [pc, #224]	; (4308 <_i2c_master_set_config+0x3e8>)
    4226:	0008      	movs	r0, r1
    4228:	0011      	movs	r1, r2
    422a:	4798      	blx	r3
    422c:	0003      	movs	r3, r0
    422e:	647b      	str	r3, [r7, #68]	; 0x44
		if (tmp_baudlow_hs) {
    4230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4232:	2b00      	cmp	r3, #0
    4234:	d009      	beq.n	424a <_i2c_master_set_config+0x32a>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    4236:	4b36      	ldr	r3, [pc, #216]	; (4310 <_i2c_master_set_config+0x3f0>)
    4238:	69f9      	ldr	r1, [r7, #28]
    423a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    423c:	4798      	blx	r3
    423e:	0003      	movs	r3, r0
    4240:	1e9a      	subs	r2, r3, #2
    4242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    4244:	1ad3      	subs	r3, r2, r3
    4246:	64bb      	str	r3, [r7, #72]	; 0x48
    4248:	e00c      	b.n	4264 <_i2c_master_set_config+0x344>
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    424a:	69fb      	ldr	r3, [r7, #28]
    424c:	005a      	lsls	r2, r3, #1
    424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4250:	18d3      	adds	r3, r2, r3
    4252:	1e5a      	subs	r2, r3, #1
    4254:	69fb      	ldr	r3, [r7, #28]
    4256:	0059      	lsls	r1, r3, #1
    4258:	4b2d      	ldr	r3, [pc, #180]	; (4310 <_i2c_master_set_config+0x3f0>)
    425a:	0010      	movs	r0, r2
    425c:	4798      	blx	r3
    425e:	0003      	movs	r3, r0
    4260:	3b01      	subs	r3, #1
    4262:	64bb      	str	r3, [r7, #72]	; 0x48
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    4264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4266:	2bff      	cmp	r3, #255	; 0xff
    4268:	dc08      	bgt.n	427c <_i2c_master_set_config+0x35c>
    426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    426c:	2b00      	cmp	r3, #0
    426e:	db05      	blt.n	427c <_i2c_master_set_config+0x35c>
    4270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4272:	2bff      	cmp	r3, #255	; 0xff
    4274:	dc02      	bgt.n	427c <_i2c_master_set_config+0x35c>
    4276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4278:	2b00      	cmp	r3, #0
    427a:	da06      	bge.n	428a <_i2c_master_set_config+0x36a>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
    427c:	233b      	movs	r3, #59	; 0x3b
    427e:	2208      	movs	r2, #8
    4280:	4694      	mov	ip, r2
    4282:	44bc      	add	ip, r7
    4284:	4463      	add	r3, ip
    4286:	2240      	movs	r2, #64	; 0x40
    4288:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
    428a:	233b      	movs	r3, #59	; 0x3b
    428c:	2208      	movs	r2, #8
    428e:	4694      	mov	ip, r2
    4290:	44bc      	add	ip, r7
    4292:	4463      	add	r3, ip
    4294:	781b      	ldrb	r3, [r3, #0]
    4296:	2b40      	cmp	r3, #64	; 0x40
    4298:	d00e      	beq.n	42b8 <_i2c_master_set_config+0x398>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    429a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    429c:	22ff      	movs	r2, #255	; 0xff
    429e:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    42a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    42a2:	041b      	lsls	r3, r3, #16
    42a4:	0019      	movs	r1, r3
    42a6:	23ff      	movs	r3, #255	; 0xff
    42a8:	041b      	lsls	r3, r3, #16
    42aa:	400b      	ands	r3, r1
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    42ac:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    42ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    42b0:	0612      	lsls	r2, r2, #24
    42b2:	431a      	orrs	r2, r3
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    42b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    42b6:	60da      	str	r2, [r3, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
    42b8:	233b      	movs	r3, #59	; 0x3b
    42ba:	2208      	movs	r2, #8
    42bc:	4694      	mov	ip, r2
    42be:	44bc      	add	ip, r7
    42c0:	4463      	add	r3, ip
    42c2:	781b      	ldrb	r3, [r3, #0]
}
    42c4:	0018      	movs	r0, r3
    42c6:	46bd      	mov	sp, r7
    42c8:	b015      	add	sp, #84	; 0x54
    42ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42cc:	00004cf5 	.word	0x00004cf5
    42d0:	00003e91 	.word	0x00003e91
    42d4:	00004b39 	.word	0x00004b39
    42d8:	00006a11 	.word	0x00006a11
    42dc:	00003eb9 	.word	0x00003eb9
    42e0:	00006849 	.word	0x00006849
    42e4:	0000b9b1 	.word	0x0000b9b1
    42e8:	0000ada9 	.word	0x0000ada9
    42ec:	e826d695 	.word	0xe826d695
    42f0:	3e112e0b 	.word	0x3e112e0b
    42f4:	0000a125 	.word	0x0000a125
    42f8:	40240000 	.word	0x40240000
    42fc:	0000b29d 	.word	0x0000b29d
    4300:	3ff00000 	.word	0x3ff00000
    4304:	0000a77d 	.word	0x0000a77d
    4308:	0000b945 	.word	0x0000b945
    430c:	40080000 	.word	0x40080000
    4310:	00009e39 	.word	0x00009e39

00004314 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    4314:	b590      	push	{r4, r7, lr}
    4316:	b08b      	sub	sp, #44	; 0x2c
    4318:	af00      	add	r7, sp, #0
    431a:	60f8      	str	r0, [r7, #12]
    431c:	60b9      	str	r1, [r7, #8]
    431e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    4320:	68fb      	ldr	r3, [r7, #12]
    4322:	68ba      	ldr	r2, [r7, #8]
    4324:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4326:	68fb      	ldr	r3, [r7, #12]
    4328:	681b      	ldr	r3, [r3, #0]
    432a:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    432c:	68fb      	ldr	r3, [r7, #12]
    432e:	681b      	ldr	r3, [r3, #0]
    4330:	0018      	movs	r0, r3
    4332:	4b3b      	ldr	r3, [pc, #236]	; (4420 <i2c_master_init+0x10c>)
    4334:	4798      	blx	r3
    4336:	0003      	movs	r3, r0
    4338:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    433a:	6a3b      	ldr	r3, [r7, #32]
    433c:	3302      	adds	r3, #2
    433e:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4340:	6a3b      	ldr	r3, [r7, #32]
    4342:	3314      	adds	r3, #20
    4344:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4346:	2201      	movs	r2, #1
    4348:	69fb      	ldr	r3, [r7, #28]
    434a:	409a      	lsls	r2, r3
    434c:	0013      	movs	r3, r2
    434e:	0019      	movs	r1, r3
    4350:	2002      	movs	r0, #2
    4352:	4b34      	ldr	r3, [pc, #208]	; (4424 <i2c_master_init+0x110>)
    4354:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4356:	2314      	movs	r3, #20
    4358:	18fb      	adds	r3, r7, r3
    435a:	0018      	movs	r0, r3
    435c:	4b32      	ldr	r3, [pc, #200]	; (4428 <i2c_master_init+0x114>)
    435e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	7b1a      	ldrb	r2, [r3, #12]
    4364:	2314      	movs	r3, #20
    4366:	18fb      	adds	r3, r7, r3
    4368:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    436a:	69bb      	ldr	r3, [r7, #24]
    436c:	b2db      	uxtb	r3, r3
    436e:	2214      	movs	r2, #20
    4370:	18ba      	adds	r2, r7, r2
    4372:	0011      	movs	r1, r2
    4374:	0018      	movs	r0, r3
    4376:	4b2d      	ldr	r3, [pc, #180]	; (442c <i2c_master_init+0x118>)
    4378:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    437a:	69bb      	ldr	r3, [r7, #24]
    437c:	b2db      	uxtb	r3, r3
    437e:	0018      	movs	r0, r3
    4380:	4b2b      	ldr	r3, [pc, #172]	; (4430 <i2c_master_init+0x11c>)
    4382:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4384:	687b      	ldr	r3, [r7, #4]
    4386:	7b1b      	ldrb	r3, [r3, #12]
    4388:	2100      	movs	r1, #0
    438a:	0018      	movs	r0, r3
    438c:	4b29      	ldr	r3, [pc, #164]	; (4434 <i2c_master_init+0x120>)
    438e:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    4390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4392:	681b      	ldr	r3, [r3, #0]
    4394:	2202      	movs	r2, #2
    4396:	4013      	ands	r3, r2
    4398:	d001      	beq.n	439e <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
    439a:	231c      	movs	r3, #28
    439c:	e03b      	b.n	4416 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    43a0:	681b      	ldr	r3, [r3, #0]
    43a2:	2201      	movs	r2, #1
    43a4:	4013      	ands	r3, r2
    43a6:	d001      	beq.n	43ac <i2c_master_init+0x98>
		return STATUS_BUSY;
    43a8:	2305      	movs	r3, #5
    43aa:	e034      	b.n	4416 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    43ac:	68fb      	ldr	r3, [r7, #12]
    43ae:	681b      	ldr	r3, [r3, #0]
    43b0:	2217      	movs	r2, #23
    43b2:	18bc      	adds	r4, r7, r2
    43b4:	0018      	movs	r0, r3
    43b6:	4b1a      	ldr	r3, [pc, #104]	; (4420 <i2c_master_init+0x10c>)
    43b8:	4798      	blx	r3
    43ba:	0003      	movs	r3, r0
    43bc:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    43be:	4a1e      	ldr	r2, [pc, #120]	; (4438 <i2c_master_init+0x124>)
    43c0:	2317      	movs	r3, #23
    43c2:	18fb      	adds	r3, r7, r3
    43c4:	781b      	ldrb	r3, [r3, #0]
    43c6:	0011      	movs	r1, r2
    43c8:	0018      	movs	r0, r3
    43ca:	4b1c      	ldr	r3, [pc, #112]	; (443c <i2c_master_init+0x128>)
    43cc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    43ce:	2317      	movs	r3, #23
    43d0:	18fb      	adds	r3, r7, r3
    43d2:	781a      	ldrb	r2, [r3, #0]
    43d4:	4b1a      	ldr	r3, [pc, #104]	; (4440 <i2c_master_init+0x12c>)
    43d6:	0092      	lsls	r2, r2, #2
    43d8:	68f9      	ldr	r1, [r7, #12]
    43da:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    43dc:	68fb      	ldr	r3, [r7, #12]
    43de:	2200      	movs	r2, #0
    43e0:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
    43e2:	68fb      	ldr	r3, [r7, #12]
    43e4:	2200      	movs	r2, #0
    43e6:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
    43e8:	68fb      	ldr	r3, [r7, #12]
    43ea:	2200      	movs	r2, #0
    43ec:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
    43ee:	68fb      	ldr	r3, [r7, #12]
    43f0:	2200      	movs	r2, #0
    43f2:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
    43f4:	68fb      	ldr	r3, [r7, #12]
    43f6:	2225      	movs	r2, #37	; 0x25
    43f8:	2100      	movs	r1, #0
    43fa:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
    43fc:	68fb      	ldr	r3, [r7, #12]
    43fe:	2200      	movs	r2, #0
    4400:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    4402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4404:	2214      	movs	r2, #20
    4406:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    4408:	687a      	ldr	r2, [r7, #4]
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	0011      	movs	r1, r2
    440e:	0018      	movs	r0, r3
    4410:	4b0c      	ldr	r3, [pc, #48]	; (4444 <i2c_master_init+0x130>)
    4412:	4798      	blx	r3
    4414:	0003      	movs	r3, r0
}
    4416:	0018      	movs	r0, r3
    4418:	46bd      	mov	sp, r7
    441a:	b00b      	add	sp, #44	; 0x2c
    441c:	bd90      	pop	{r4, r7, pc}
    441e:	46c0      	nop			; (mov r8, r8)
    4420:	00004cf5 	.word	0x00004cf5
    4424:	00003e35 	.word	0x00003e35
    4428:	00003e1d 	.word	0x00003e1d
    442c:	00006725 	.word	0x00006725
    4430:	00006769 	.word	0x00006769
    4434:	00004aad 	.word	0x00004aad
    4438:	000047a5 	.word	0x000047a5
    443c:	00004d59 	.word	0x00004d59
    4440:	200045b4 	.word	0x200045b4
    4444:	00003f21 	.word	0x00003f21

00004448 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    4448:	b580      	push	{r7, lr}
    444a:	b084      	sub	sp, #16
    444c:	af00      	add	r7, sp, #0
    444e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	681b      	ldr	r3, [r3, #0]
    4454:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    4456:	230e      	movs	r3, #14
    4458:	18fb      	adds	r3, r7, r3
    445a:	2200      	movs	r2, #0
    445c:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    445e:	e00f      	b.n	4480 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    4460:	230e      	movs	r3, #14
    4462:	18fb      	adds	r3, r7, r3
    4464:	220e      	movs	r2, #14
    4466:	18ba      	adds	r2, r7, r2
    4468:	8812      	ldrh	r2, [r2, #0]
    446a:	3201      	adds	r2, #1
    446c:	801a      	strh	r2, [r3, #0]
    446e:	687b      	ldr	r3, [r7, #4]
    4470:	891b      	ldrh	r3, [r3, #8]
    4472:	220e      	movs	r2, #14
    4474:	18ba      	adds	r2, r7, r2
    4476:	8812      	ldrh	r2, [r2, #0]
    4478:	429a      	cmp	r2, r3
    447a:	d301      	bcc.n	4480 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
    447c:	2312      	movs	r3, #18
    447e:	e00e      	b.n	449e <_i2c_master_wait_for_bus+0x56>

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    4480:	68bb      	ldr	r3, [r7, #8]
    4482:	7e1b      	ldrb	r3, [r3, #24]
    4484:	b2db      	uxtb	r3, r3
    4486:	001a      	movs	r2, r3
    4488:	2301      	movs	r3, #1
    448a:	4013      	ands	r3, r2
    448c:	d106      	bne.n	449c <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    448e:	68bb      	ldr	r3, [r7, #8]
    4490:	7e1b      	ldrb	r3, [r3, #24]
    4492:	b2db      	uxtb	r3, r3
    4494:	001a      	movs	r2, r3
    4496:	2302      	movs	r3, #2
    4498:	4013      	ands	r3, r2

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    449a:	d0e1      	beq.n	4460 <_i2c_master_wait_for_bus+0x18>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    449c:	2300      	movs	r3, #0
}
    449e:	0018      	movs	r0, r3
    44a0:	46bd      	mov	sp, r7
    44a2:	b004      	add	sp, #16
    44a4:	bd80      	pop	{r7, pc}
    44a6:	46c0      	nop			; (mov r8, r8)

000044a8 <i2c_master_send_stop>:
 *       function must be used.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void i2c_master_send_stop(struct i2c_master_module *const module)
{
    44a8:	b580      	push	{r7, lr}
    44aa:	b084      	sub	sp, #16
    44ac:	af00      	add	r7, sp, #0
    44ae:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    44b0:	687b      	ldr	r3, [r7, #4]
    44b2:	681b      	ldr	r3, [r3, #0]
    44b4:	60fb      	str	r3, [r7, #12]

	/* Send stop command */
	_i2c_master_wait_for_sync(module);
    44b6:	687b      	ldr	r3, [r7, #4]
    44b8:	0018      	movs	r0, r3
    44ba:	4b06      	ldr	r3, [pc, #24]	; (44d4 <i2c_master_send_stop+0x2c>)
    44bc:	4798      	blx	r3
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    44be:	68fb      	ldr	r3, [r7, #12]
    44c0:	685b      	ldr	r3, [r3, #4]
    44c2:	22c0      	movs	r2, #192	; 0xc0
    44c4:	0292      	lsls	r2, r2, #10
    44c6:	431a      	orrs	r2, r3
    44c8:	68fb      	ldr	r3, [r7, #12]
    44ca:	605a      	str	r2, [r3, #4]
}
    44cc:	46c0      	nop			; (mov r8, r8)
    44ce:	46bd      	mov	sp, r7
    44d0:	b004      	add	sp, #16
    44d2:	bd80      	pop	{r7, pc}
    44d4:	00003efd 	.word	0x00003efd

000044d8 <i2c_master_read_byte>:
 *                                      acknowledged the address
 */
enum status_code i2c_master_read_byte(
		struct i2c_master_module *const module,
		uint8_t *byte)
{
    44d8:	b590      	push	{r4, r7, lr}
    44da:	b085      	sub	sp, #20
    44dc:	af00      	add	r7, sp, #0
    44de:	6078      	str	r0, [r7, #4]
    44e0:	6039      	str	r1, [r7, #0]
  	enum status_code tmp_status;
  	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    44e2:	687b      	ldr	r3, [r7, #4]
    44e4:	681b      	ldr	r3, [r3, #0]
    44e6:	60fb      	str	r3, [r7, #12]

	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    44e8:	68fb      	ldr	r3, [r7, #12]
    44ea:	685b      	ldr	r3, [r3, #4]
    44ec:	4a0e      	ldr	r2, [pc, #56]	; (4528 <i2c_master_read_byte+0x50>)
    44ee:	401a      	ands	r2, r3
    44f0:	68fb      	ldr	r3, [r7, #12]
    44f2:	605a      	str	r2, [r3, #4]
	/* Write byte to slave. */
	_i2c_master_wait_for_sync(module);
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	0018      	movs	r0, r3
    44f8:	4b0c      	ldr	r3, [pc, #48]	; (452c <i2c_master_read_byte+0x54>)
    44fa:	4798      	blx	r3
	*byte = i2c_module->DATA.reg;
    44fc:	68fb      	ldr	r3, [r7, #12]
    44fe:	2228      	movs	r2, #40	; 0x28
    4500:	5c9b      	ldrb	r3, [r3, r2]
    4502:	b2da      	uxtb	r2, r3
    4504:	683b      	ldr	r3, [r7, #0]
    4506:	701a      	strb	r2, [r3, #0]
	/* Wait for response. */
	tmp_status = _i2c_master_wait_for_bus(module);
    4508:	230b      	movs	r3, #11
    450a:	18fc      	adds	r4, r7, r3
    450c:	687b      	ldr	r3, [r7, #4]
    450e:	0018      	movs	r0, r3
    4510:	4b07      	ldr	r3, [pc, #28]	; (4530 <i2c_master_read_byte+0x58>)
    4512:	4798      	blx	r3
    4514:	0003      	movs	r3, r0
    4516:	7023      	strb	r3, [r4, #0]

	return tmp_status;
    4518:	230b      	movs	r3, #11
    451a:	18fb      	adds	r3, r7, r3
    451c:	781b      	ldrb	r3, [r3, #0]
}
    451e:	0018      	movs	r0, r3
    4520:	46bd      	mov	sp, r7
    4522:	b005      	add	sp, #20
    4524:	bd90      	pop	{r4, r7, pc}
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	fffbffff 	.word	0xfffbffff
    452c:	00003efd 	.word	0x00003efd
    4530:	00004449 	.word	0x00004449

00004534 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
    4534:	b580      	push	{r7, lr}
    4536:	b084      	sub	sp, #16
    4538:	af00      	add	r7, sp, #0
    453a:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    453c:	687b      	ldr	r3, [r7, #4]
    453e:	681b      	ldr	r3, [r3, #0]
    4540:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    4542:	68fb      	ldr	r3, [r7, #12]
    4544:	69db      	ldr	r3, [r3, #28]
    4546:	2207      	movs	r2, #7
    4548:	4013      	ands	r3, r2
    454a:	1e5a      	subs	r2, r3, #1
    454c:	4193      	sbcs	r3, r2
    454e:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
    4550:	0018      	movs	r0, r3
    4552:	46bd      	mov	sp, r7
    4554:	b004      	add	sp, #16
    4556:	bd80      	pop	{r7, pc}

00004558 <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
    4558:	b580      	push	{r7, lr}
    455a:	b082      	sub	sp, #8
    455c:	af00      	add	r7, sp, #0
    455e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    4560:	46c0      	nop			; (mov r8, r8)
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	0018      	movs	r0, r3
    4566:	4b04      	ldr	r3, [pc, #16]	; (4578 <_i2c_master_wait_for_sync+0x20>)
    4568:	4798      	blx	r3
    456a:	1e03      	subs	r3, r0, #0
    456c:	d1f9      	bne.n	4562 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
    456e:	46c0      	nop			; (mov r8, r8)
    4570:	46bd      	mov	sp, r7
    4572:	b002      	add	sp, #8
    4574:	bd80      	pop	{r7, pc}
    4576:	46c0      	nop			; (mov r8, r8)
    4578:	00004535 	.word	0x00004535

0000457c <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    457c:	b580      	push	{r7, lr}
    457e:	b084      	sub	sp, #16
    4580:	af00      	add	r7, sp, #0
    4582:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4584:	687b      	ldr	r3, [r7, #4]
    4586:	681b      	ldr	r3, [r3, #0]
    4588:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    458a:	68fb      	ldr	r3, [r7, #12]
    458c:	681b      	ldr	r3, [r3, #0]
    458e:	011b      	lsls	r3, r3, #4
    4590:	0fdb      	lsrs	r3, r3, #31
    4592:	b2db      	uxtb	r3, r3
    4594:	001a      	movs	r2, r3
    4596:	230b      	movs	r3, #11
    4598:	18fb      	adds	r3, r7, r3
    459a:	1e51      	subs	r1, r2, #1
    459c:	418a      	sbcs	r2, r1
    459e:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    45a0:	2308      	movs	r3, #8
    45a2:	18fb      	adds	r3, r7, r3
    45a4:	687a      	ldr	r2, [r7, #4]
    45a6:	8b52      	ldrh	r2, [r2, #26]
    45a8:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	8b9b      	ldrh	r3, [r3, #28]
    45ae:	b29a      	uxth	r2, r3
    45b0:	2308      	movs	r3, #8
    45b2:	18fb      	adds	r3, r7, r3
    45b4:	2108      	movs	r1, #8
    45b6:	1879      	adds	r1, r7, r1
    45b8:	8809      	ldrh	r1, [r1, #0]
    45ba:	1a8a      	subs	r2, r1, r2
    45bc:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    45be:	687b      	ldr	r3, [r7, #4]
    45c0:	8b9b      	ldrh	r3, [r3, #28]
    45c2:	b29b      	uxth	r3, r3
    45c4:	3b01      	subs	r3, #1
    45c6:	b29a      	uxth	r2, r3
    45c8:	687b      	ldr	r3, [r7, #4]
    45ca:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
    45cc:	230b      	movs	r3, #11
    45ce:	18fb      	adds	r3, r7, r3
    45d0:	781b      	ldrb	r3, [r3, #0]
    45d2:	2b00      	cmp	r3, #0
    45d4:	d010      	beq.n	45f8 <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
    45d6:	687b      	ldr	r3, [r7, #4]
    45d8:	7adb      	ldrb	r3, [r3, #11]
    45da:	2b00      	cmp	r3, #0
    45dc:	d01c      	beq.n	4618 <_i2c_master_read+0x9c>
    45de:	687b      	ldr	r3, [r7, #4]
    45e0:	8b9b      	ldrh	r3, [r3, #28]
    45e2:	b29b      	uxth	r3, r3
    45e4:	2b01      	cmp	r3, #1
    45e6:	d117      	bne.n	4618 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    45e8:	68fb      	ldr	r3, [r7, #12]
    45ea:	685b      	ldr	r3, [r3, #4]
    45ec:	2280      	movs	r2, #128	; 0x80
    45ee:	02d2      	lsls	r2, r2, #11
    45f0:	431a      	orrs	r2, r3
    45f2:	68fb      	ldr	r3, [r7, #12]
    45f4:	605a      	str	r2, [r3, #4]
    45f6:	e00f      	b.n	4618 <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
    45f8:	687b      	ldr	r3, [r7, #4]
    45fa:	7adb      	ldrb	r3, [r3, #11]
    45fc:	2b00      	cmp	r3, #0
    45fe:	d00b      	beq.n	4618 <_i2c_master_read+0x9c>
    4600:	687b      	ldr	r3, [r7, #4]
    4602:	8b9b      	ldrh	r3, [r3, #28]
    4604:	b29b      	uxth	r3, r3
    4606:	2b00      	cmp	r3, #0
    4608:	d106      	bne.n	4618 <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    460a:	68fb      	ldr	r3, [r7, #12]
    460c:	685b      	ldr	r3, [r3, #4]
    460e:	2280      	movs	r2, #128	; 0x80
    4610:	02d2      	lsls	r2, r2, #11
    4612:	431a      	orrs	r2, r3
    4614:	68fb      	ldr	r3, [r7, #12]
    4616:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
    4618:	687b      	ldr	r3, [r7, #4]
    461a:	8b9b      	ldrh	r3, [r3, #28]
    461c:	b29b      	uxth	r3, r3
    461e:	2b00      	cmp	r3, #0
    4620:	d10e      	bne.n	4640 <_i2c_master_read+0xc4>
		if (module->send_stop) {
    4622:	687b      	ldr	r3, [r7, #4]
    4624:	7a9b      	ldrb	r3, [r3, #10]
    4626:	2b00      	cmp	r3, #0
    4628:	d00a      	beq.n	4640 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    462a:	687b      	ldr	r3, [r7, #4]
    462c:	0018      	movs	r0, r3
    462e:	4b0e      	ldr	r3, [pc, #56]	; (4668 <_i2c_master_read+0xec>)
    4630:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4632:	68fb      	ldr	r3, [r7, #12]
    4634:	685b      	ldr	r3, [r3, #4]
    4636:	22c0      	movs	r2, #192	; 0xc0
    4638:	0292      	lsls	r2, r2, #10
    463a:	431a      	orrs	r2, r3
    463c:	68fb      	ldr	r3, [r7, #12]
    463e:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    4640:	687b      	ldr	r3, [r7, #4]
    4642:	0018      	movs	r0, r3
    4644:	4b08      	ldr	r3, [pc, #32]	; (4668 <_i2c_master_read+0xec>)
    4646:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    4648:	687b      	ldr	r3, [r7, #4]
    464a:	6a1a      	ldr	r2, [r3, #32]
    464c:	2308      	movs	r3, #8
    464e:	18fb      	adds	r3, r7, r3
    4650:	881b      	ldrh	r3, [r3, #0]
    4652:	18d3      	adds	r3, r2, r3
    4654:	68fa      	ldr	r2, [r7, #12]
    4656:	2128      	movs	r1, #40	; 0x28
    4658:	5c52      	ldrb	r2, [r2, r1]
    465a:	b2d2      	uxtb	r2, r2
    465c:	701a      	strb	r2, [r3, #0]
}
    465e:	46c0      	nop			; (mov r8, r8)
    4660:	46bd      	mov	sp, r7
    4662:	b004      	add	sp, #16
    4664:	bd80      	pop	{r7, pc}
    4666:	46c0      	nop			; (mov r8, r8)
    4668:	00004559 	.word	0x00004559

0000466c <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    466c:	b580      	push	{r7, lr}
    466e:	b084      	sub	sp, #16
    4670:	af00      	add	r7, sp, #0
    4672:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    4674:	687b      	ldr	r3, [r7, #4]
    4676:	681b      	ldr	r3, [r3, #0]
    4678:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    467a:	68fb      	ldr	r3, [r7, #12]
    467c:	8b5b      	ldrh	r3, [r3, #26]
    467e:	b29b      	uxth	r3, r3
    4680:	001a      	movs	r2, r3
    4682:	2304      	movs	r3, #4
    4684:	4013      	ands	r3, r2
    4686:	d004      	beq.n	4692 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    4688:	687b      	ldr	r3, [r7, #4]
    468a:	2225      	movs	r2, #37	; 0x25
    468c:	211e      	movs	r1, #30
    468e:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
    4690:	e024      	b.n	46dc <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
    4692:	230a      	movs	r3, #10
    4694:	18fb      	adds	r3, r7, r3
    4696:	687a      	ldr	r2, [r7, #4]
    4698:	8b52      	ldrh	r2, [r2, #26]
    469a:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
    469c:	687b      	ldr	r3, [r7, #4]
    469e:	8b9b      	ldrh	r3, [r3, #28]
    46a0:	b29a      	uxth	r2, r3
    46a2:	230a      	movs	r3, #10
    46a4:	18fb      	adds	r3, r7, r3
    46a6:	210a      	movs	r1, #10
    46a8:	1879      	adds	r1, r7, r1
    46aa:	8809      	ldrh	r1, [r1, #0]
    46ac:	1a8a      	subs	r2, r1, r2
    46ae:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
    46b0:	687b      	ldr	r3, [r7, #4]
    46b2:	8b9b      	ldrh	r3, [r3, #28]
    46b4:	b29b      	uxth	r3, r3
    46b6:	3b01      	subs	r3, #1
    46b8:	b29a      	uxth	r2, r3
    46ba:	687b      	ldr	r3, [r7, #4]
    46bc:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
    46be:	687b      	ldr	r3, [r7, #4]
    46c0:	0018      	movs	r0, r3
    46c2:	4b08      	ldr	r3, [pc, #32]	; (46e4 <_i2c_master_write+0x78>)
    46c4:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    46c6:	687b      	ldr	r3, [r7, #4]
    46c8:	6a1a      	ldr	r2, [r3, #32]
    46ca:	230a      	movs	r3, #10
    46cc:	18fb      	adds	r3, r7, r3
    46ce:	881b      	ldrh	r3, [r3, #0]
    46d0:	18d3      	adds	r3, r2, r3
    46d2:	781b      	ldrb	r3, [r3, #0]
    46d4:	b2d9      	uxtb	r1, r3
    46d6:	68fb      	ldr	r3, [r7, #12]
    46d8:	2228      	movs	r2, #40	; 0x28
    46da:	5499      	strb	r1, [r3, r2]
}
    46dc:	46bd      	mov	sp, r7
    46de:	b004      	add	sp, #16
    46e0:	bd80      	pop	{r7, pc}
    46e2:	46c0      	nop			; (mov r8, r8)
    46e4:	00004559 	.word	0x00004559

000046e8 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    46e8:	b580      	push	{r7, lr}
    46ea:	b084      	sub	sp, #16
    46ec:	af00      	add	r7, sp, #0
    46ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    46f0:	687b      	ldr	r3, [r7, #4]
    46f2:	681b      	ldr	r3, [r3, #0]
    46f4:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    46f6:	68fb      	ldr	r3, [r7, #12]
    46f8:	7e1b      	ldrb	r3, [r3, #24]
    46fa:	b2db      	uxtb	r3, r3
    46fc:	001a      	movs	r2, r3
    46fe:	2301      	movs	r3, #1
    4700:	4013      	ands	r3, r2
    4702:	d02b      	beq.n	475c <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    4704:	68fb      	ldr	r3, [r7, #12]
    4706:	2201      	movs	r2, #1
    4708:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    470a:	68fb      	ldr	r3, [r7, #12]
    470c:	8b5b      	ldrh	r3, [r3, #26]
    470e:	b29b      	uxth	r3, r3
    4710:	001a      	movs	r2, r3
    4712:	2302      	movs	r3, #2
    4714:	4013      	ands	r3, r2
    4716:	d004      	beq.n	4722 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    4718:	687b      	ldr	r3, [r7, #4]
    471a:	2225      	movs	r2, #37	; 0x25
    471c:	2141      	movs	r1, #65	; 0x41
    471e:	5499      	strb	r1, [r3, r2]
    4720:	e01c      	b.n	475c <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    4722:	68fb      	ldr	r3, [r7, #12]
    4724:	8b5b      	ldrh	r3, [r3, #26]
    4726:	b29b      	uxth	r3, r3
    4728:	001a      	movs	r2, r3
    472a:	2304      	movs	r3, #4
    472c:	4013      	ands	r3, r2
    472e:	d015      	beq.n	475c <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    4730:	687b      	ldr	r3, [r7, #4]
    4732:	2225      	movs	r2, #37	; 0x25
    4734:	2118      	movs	r1, #24
    4736:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
    4738:	687b      	ldr	r3, [r7, #4]
    473a:	2200      	movs	r2, #0
    473c:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
    473e:	687b      	ldr	r3, [r7, #4]
    4740:	7a9b      	ldrb	r3, [r3, #10]
    4742:	2b00      	cmp	r3, #0
    4744:	d00a      	beq.n	475c <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
    4746:	687b      	ldr	r3, [r7, #4]
    4748:	0018      	movs	r0, r3
    474a:	4b13      	ldr	r3, [pc, #76]	; (4798 <_i2c_master_async_address_response+0xb0>)
    474c:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    474e:	68fb      	ldr	r3, [r7, #12]
    4750:	685b      	ldr	r3, [r3, #4]
    4752:	22c0      	movs	r2, #192	; 0xc0
    4754:	0292      	lsls	r2, r2, #10
    4756:	431a      	orrs	r2, r3
    4758:	68fb      	ldr	r3, [r7, #12]
    475a:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    475c:	687b      	ldr	r3, [r7, #4]
    475e:	8b9b      	ldrh	r3, [r3, #28]
    4760:	b29a      	uxth	r2, r3
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    4766:	687b      	ldr	r3, [r7, #4]
    4768:	2225      	movs	r2, #37	; 0x25
    476a:	5c9b      	ldrb	r3, [r3, r2]
    476c:	b2db      	uxtb	r3, r3
    476e:	2b05      	cmp	r3, #5
    4770:	d10e      	bne.n	4790 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    4772:	687b      	ldr	r3, [r7, #4]
    4774:	2224      	movs	r2, #36	; 0x24
    4776:	5c9b      	ldrb	r3, [r3, r2]
    4778:	b2db      	uxtb	r3, r3
    477a:	2b00      	cmp	r3, #0
    477c:	d104      	bne.n	4788 <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
    477e:	687b      	ldr	r3, [r7, #4]
    4780:	0018      	movs	r0, r3
    4782:	4b06      	ldr	r3, [pc, #24]	; (479c <_i2c_master_async_address_response+0xb4>)
    4784:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
    4786:	e003      	b.n	4790 <_i2c_master_async_address_response+0xa8>
	if (module->status == STATUS_BUSY) {
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
			_i2c_master_write(module);
		} else {
			_i2c_master_read(module);
    4788:	687b      	ldr	r3, [r7, #4]
    478a:	0018      	movs	r0, r3
    478c:	4b04      	ldr	r3, [pc, #16]	; (47a0 <_i2c_master_async_address_response+0xb8>)
    478e:	4798      	blx	r3
		}
	}
}
    4790:	46c0      	nop			; (mov r8, r8)
    4792:	46bd      	mov	sp, r7
    4794:	b004      	add	sp, #16
    4796:	bd80      	pop	{r7, pc}
    4798:	00004559 	.word	0x00004559
    479c:	0000466d 	.word	0x0000466d
    47a0:	0000457d 	.word	0x0000457d

000047a4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    47a4:	b580      	push	{r7, lr}
    47a6:	b086      	sub	sp, #24
    47a8:	af00      	add	r7, sp, #0
    47aa:	0002      	movs	r2, r0
    47ac:	1dfb      	adds	r3, r7, #7
    47ae:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
    47b0:	1dfb      	adds	r3, r7, #7
    47b2:	781a      	ldrb	r2, [r3, #0]
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    47b4:	4b93      	ldr	r3, [pc, #588]	; (4a04 <_i2c_master_interrupt_handler+0x260>)
    47b6:	0092      	lsls	r2, r2, #2
    47b8:	58d3      	ldr	r3, [r2, r3]
    47ba:	617b      	str	r3, [r7, #20]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    47bc:	697b      	ldr	r3, [r7, #20]
    47be:	681b      	ldr	r3, [r3, #0]
    47c0:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    47c2:	693b      	ldr	r3, [r7, #16]
    47c4:	681b      	ldr	r3, [r3, #0]
    47c6:	011b      	lsls	r3, r3, #4
    47c8:	0fdb      	lsrs	r3, r3, #31
    47ca:	b2db      	uxtb	r3, r3
    47cc:	001a      	movs	r2, r3
    47ce:	230f      	movs	r3, #15
    47d0:	18fb      	adds	r3, r7, r3
    47d2:	1e51      	subs	r1, r2, #1
    47d4:	418a      	sbcs	r2, r1
    47d6:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    47d8:	230e      	movs	r3, #14
    47da:	18fb      	adds	r3, r7, r3
    47dc:	697a      	ldr	r2, [r7, #20]
    47de:	7e52      	ldrb	r2, [r2, #25]
    47e0:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    47e2:	697b      	ldr	r3, [r7, #20]
    47e4:	7e1b      	ldrb	r3, [r3, #24]
    47e6:	b2da      	uxtb	r2, r3
    47e8:	230e      	movs	r3, #14
    47ea:	18fb      	adds	r3, r7, r3
    47ec:	210e      	movs	r1, #14
    47ee:	1879      	adds	r1, r7, r1
    47f0:	7809      	ldrb	r1, [r1, #0]
    47f2:	400a      	ands	r2, r1
    47f4:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    47f6:	697b      	ldr	r3, [r7, #20]
    47f8:	8b5b      	ldrh	r3, [r3, #26]
    47fa:	b29b      	uxth	r3, r3
    47fc:	2b00      	cmp	r3, #0
    47fe:	d109      	bne.n	4814 <_i2c_master_interrupt_handler+0x70>
    4800:	697b      	ldr	r3, [r7, #20]
    4802:	8b9b      	ldrh	r3, [r3, #28]
    4804:	b29b      	uxth	r3, r3
    4806:	2b00      	cmp	r3, #0
    4808:	d004      	beq.n	4814 <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
    480a:	697b      	ldr	r3, [r7, #20]
    480c:	0018      	movs	r0, r3
    480e:	4b7e      	ldr	r3, [pc, #504]	; (4a08 <_i2c_master_interrupt_handler+0x264>)
    4810:	4798      	blx	r3
    4812:	e070      	b.n	48f6 <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4814:	697b      	ldr	r3, [r7, #20]
    4816:	8b5b      	ldrh	r3, [r3, #26]
    4818:	b29b      	uxth	r3, r3
    481a:	2b00      	cmp	r3, #0
    481c:	d039      	beq.n	4892 <_i2c_master_interrupt_handler+0xee>
    481e:	697b      	ldr	r3, [r7, #20]
    4820:	8b9b      	ldrh	r3, [r3, #28]
    4822:	b29b      	uxth	r3, r3
    4824:	2b00      	cmp	r3, #0
    4826:	d134      	bne.n	4892 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
    4828:	697b      	ldr	r3, [r7, #20]
    482a:	2225      	movs	r2, #37	; 0x25
    482c:	5c9b      	ldrb	r3, [r3, r2]
    482e:	b2db      	uxtb	r3, r3
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4830:	2b05      	cmp	r3, #5
    4832:	d12e      	bne.n	4892 <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    4834:	697b      	ldr	r3, [r7, #20]
    4836:	2224      	movs	r2, #36	; 0x24
    4838:	5c9b      	ldrb	r3, [r3, r2]
    483a:	b2db      	uxtb	r3, r3
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    483c:	2b00      	cmp	r3, #0
    483e:	d128      	bne.n	4892 <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    4840:	693b      	ldr	r3, [r7, #16]
    4842:	2203      	movs	r2, #3
    4844:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    4846:	697b      	ldr	r3, [r7, #20]
    4848:	2200      	movs	r2, #0
    484a:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    484c:	697b      	ldr	r3, [r7, #20]
    484e:	2225      	movs	r2, #37	; 0x25
    4850:	2100      	movs	r1, #0
    4852:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
    4854:	697b      	ldr	r3, [r7, #20]
    4856:	7a9b      	ldrb	r3, [r3, #10]
    4858:	2b00      	cmp	r3, #0
    485a:	d00b      	beq.n	4874 <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    485c:	697b      	ldr	r3, [r7, #20]
    485e:	0018      	movs	r0, r3
    4860:	4b6a      	ldr	r3, [pc, #424]	; (4a0c <_i2c_master_interrupt_handler+0x268>)
    4862:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    4864:	693b      	ldr	r3, [r7, #16]
    4866:	685b      	ldr	r3, [r3, #4]
    4868:	22c0      	movs	r2, #192	; 0xc0
    486a:	0292      	lsls	r2, r2, #10
    486c:	431a      	orrs	r2, r3
    486e:	693b      	ldr	r3, [r7, #16]
    4870:	605a      	str	r2, [r3, #4]
    4872:	e002      	b.n	487a <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    4874:	693b      	ldr	r3, [r7, #16]
    4876:	2201      	movs	r2, #1
    4878:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    487a:	230e      	movs	r3, #14
    487c:	18fb      	adds	r3, r7, r3
    487e:	781b      	ldrb	r3, [r3, #0]
    4880:	2201      	movs	r2, #1
    4882:	4013      	ands	r3, r2
    4884:	d037      	beq.n	48f6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4886:	697b      	ldr	r3, [r7, #20]
    4888:	68db      	ldr	r3, [r3, #12]
    488a:	697a      	ldr	r2, [r7, #20]
    488c:	0010      	movs	r0, r2
    488e:	4798      	blx	r3
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    4890:	e031      	b.n	48f6 <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    4892:	697b      	ldr	r3, [r7, #20]
    4894:	8b5b      	ldrh	r3, [r3, #26]
    4896:	b29b      	uxth	r3, r3
    4898:	2b00      	cmp	r3, #0
    489a:	d02c      	beq.n	48f6 <_i2c_master_interrupt_handler+0x152>
    489c:	697b      	ldr	r3, [r7, #20]
    489e:	8b9b      	ldrh	r3, [r3, #28]
    48a0:	b29b      	uxth	r3, r3
    48a2:	2b00      	cmp	r3, #0
    48a4:	d027      	beq.n	48f6 <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    48a6:	693b      	ldr	r3, [r7, #16]
    48a8:	8b5b      	ldrh	r3, [r3, #26]
    48aa:	b29b      	uxth	r3, r3
    48ac:	001a      	movs	r2, r3
    48ae:	2320      	movs	r3, #32
    48b0:	4013      	ands	r3, r2
    48b2:	d111      	bne.n	48d8 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    48b4:	230f      	movs	r3, #15
    48b6:	18fb      	adds	r3, r7, r3
    48b8:	781b      	ldrb	r3, [r3, #0]
    48ba:	2201      	movs	r2, #1
    48bc:	4053      	eors	r3, r2
    48be:	b2db      	uxtb	r3, r3
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    48c0:	2b00      	cmp	r3, #0
    48c2:	d104      	bne.n	48ce <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    48c4:	697b      	ldr	r3, [r7, #20]
    48c6:	8b9b      	ldrh	r3, [r3, #28]
    48c8:	b29b      	uxth	r3, r3
    48ca:	2b01      	cmp	r3, #1
    48cc:	d004      	beq.n	48d8 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
    48ce:	697b      	ldr	r3, [r7, #20]
    48d0:	2225      	movs	r2, #37	; 0x25
    48d2:	2141      	movs	r1, #65	; 0x41
    48d4:	5499      	strb	r1, [r3, r2]
    48d6:	e00e      	b.n	48f6 <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    48d8:	697b      	ldr	r3, [r7, #20]
    48da:	2224      	movs	r2, #36	; 0x24
    48dc:	5c9b      	ldrb	r3, [r3, r2]
    48de:	b2db      	uxtb	r3, r3
    48e0:	2b00      	cmp	r3, #0
    48e2:	d104      	bne.n	48ee <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
    48e4:	697b      	ldr	r3, [r7, #20]
    48e6:	0018      	movs	r0, r3
    48e8:	4b49      	ldr	r3, [pc, #292]	; (4a10 <_i2c_master_interrupt_handler+0x26c>)
    48ea:	4798      	blx	r3
    48ec:	e003      	b.n	48f6 <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
    48ee:	697b      	ldr	r3, [r7, #20]
    48f0:	0018      	movs	r0, r3
    48f2:	4b48      	ldr	r3, [pc, #288]	; (4a14 <_i2c_master_interrupt_handler+0x270>)
    48f4:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    48f6:	697b      	ldr	r3, [r7, #20]
    48f8:	8b5b      	ldrh	r3, [r3, #26]
    48fa:	b29b      	uxth	r3, r3
    48fc:	2b00      	cmp	r3, #0
    48fe:	d047      	beq.n	4990 <_i2c_master_interrupt_handler+0x1ec>
    4900:	697b      	ldr	r3, [r7, #20]
    4902:	8b9b      	ldrh	r3, [r3, #28]
    4904:	b29b      	uxth	r3, r3
    4906:	2b00      	cmp	r3, #0
    4908:	d142      	bne.n	4990 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
    490a:	697b      	ldr	r3, [r7, #20]
    490c:	2225      	movs	r2, #37	; 0x25
    490e:	5c9b      	ldrb	r3, [r3, r2]
    4910:	b2db      	uxtb	r3, r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    4912:	2b05      	cmp	r3, #5
    4914:	d13c      	bne.n	4990 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    4916:	697b      	ldr	r3, [r7, #20]
    4918:	2224      	movs	r2, #36	; 0x24
    491a:	5c9b      	ldrb	r3, [r3, r2]
    491c:	b2db      	uxtb	r3, r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
			(module->status == STATUS_BUSY) &&
    491e:	2b01      	cmp	r3, #1
    4920:	d136      	bne.n	4990 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    4922:	693b      	ldr	r3, [r7, #16]
    4924:	7e1b      	ldrb	r3, [r3, #24]
    4926:	b2db      	uxtb	r3, r3
    4928:	001a      	movs	r2, r3
    492a:	2302      	movs	r3, #2
    492c:	4013      	ands	r3, r2
    492e:	d002      	beq.n	4936 <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    4930:	693b      	ldr	r3, [r7, #16]
    4932:	2202      	movs	r2, #2
    4934:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    4936:	693b      	ldr	r3, [r7, #16]
    4938:	2203      	movs	r2, #3
    493a:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    493c:	697b      	ldr	r3, [r7, #20]
    493e:	2200      	movs	r2, #0
    4940:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
    4942:	697b      	ldr	r3, [r7, #20]
    4944:	2225      	movs	r2, #37	; 0x25
    4946:	2100      	movs	r1, #0
    4948:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    494a:	230e      	movs	r3, #14
    494c:	18fb      	adds	r3, r7, r3
    494e:	781b      	ldrb	r3, [r3, #0]
    4950:	2202      	movs	r2, #2
    4952:	4013      	ands	r3, r2
    4954:	d00b      	beq.n	496e <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    4956:	697b      	ldr	r3, [r7, #20]
    4958:	2224      	movs	r2, #36	; 0x24
    495a:	5c9b      	ldrb	r3, [r3, r2]
    495c:	b2db      	uxtb	r3, r3
    495e:	2b01      	cmp	r3, #1
    4960:	d105      	bne.n	496e <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    4962:	697b      	ldr	r3, [r7, #20]
    4964:	691b      	ldr	r3, [r3, #16]
    4966:	697a      	ldr	r2, [r7, #20]
    4968:	0010      	movs	r0, r2
    496a:	4798      	blx	r3
    496c:	e010      	b.n	4990 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    496e:	230e      	movs	r3, #14
    4970:	18fb      	adds	r3, r7, r3
    4972:	781b      	ldrb	r3, [r3, #0]
    4974:	2201      	movs	r2, #1
    4976:	4013      	ands	r3, r2
    4978:	d00a      	beq.n	4990 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    497a:	697b      	ldr	r3, [r7, #20]
    497c:	2224      	movs	r2, #36	; 0x24
    497e:	5c9b      	ldrb	r3, [r3, r2]
    4980:	b2db      	uxtb	r3, r3
    4982:	2b00      	cmp	r3, #0
    4984:	d104      	bne.n	4990 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    4986:	697b      	ldr	r3, [r7, #20]
    4988:	68db      	ldr	r3, [r3, #12]
    498a:	697a      	ldr	r2, [r7, #20]
    498c:	0010      	movs	r0, r2
    498e:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    4990:	697b      	ldr	r3, [r7, #20]
    4992:	2225      	movs	r2, #37	; 0x25
    4994:	5c9b      	ldrb	r3, [r3, r2]
    4996:	b2db      	uxtb	r3, r3
    4998:	2b05      	cmp	r3, #5
    499a:	d02e      	beq.n	49fa <_i2c_master_interrupt_handler+0x256>
    499c:	697b      	ldr	r3, [r7, #20]
    499e:	2225      	movs	r2, #37	; 0x25
    49a0:	5c9b      	ldrb	r3, [r3, r2]
    49a2:	b2db      	uxtb	r3, r3
    49a4:	2b00      	cmp	r3, #0
    49a6:	d028      	beq.n	49fa <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    49a8:	693b      	ldr	r3, [r7, #16]
    49aa:	2203      	movs	r2, #3
    49ac:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    49ae:	697b      	ldr	r3, [r7, #20]
    49b0:	2200      	movs	r2, #0
    49b2:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
    49b4:	697b      	ldr	r3, [r7, #20]
    49b6:	2200      	movs	r2, #0
    49b8:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    49ba:	697b      	ldr	r3, [r7, #20]
    49bc:	2225      	movs	r2, #37	; 0x25
    49be:	5c9b      	ldrb	r3, [r3, r2]
    49c0:	b2db      	uxtb	r3, r3
    49c2:	2b41      	cmp	r3, #65	; 0x41
    49c4:	d00e      	beq.n	49e4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
    49c6:	697b      	ldr	r3, [r7, #20]
    49c8:	7a9b      	ldrb	r3, [r3, #10]

		module->buffer_length = 0;
		module->buffer_remaining = 0;

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    49ca:	2b00      	cmp	r3, #0
    49cc:	d00a      	beq.n	49e4 <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    49ce:	697b      	ldr	r3, [r7, #20]
    49d0:	0018      	movs	r0, r3
    49d2:	4b0e      	ldr	r3, [pc, #56]	; (4a0c <_i2c_master_interrupt_handler+0x268>)
    49d4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    49d6:	693b      	ldr	r3, [r7, #16]
    49d8:	685b      	ldr	r3, [r3, #4]
    49da:	22e0      	movs	r2, #224	; 0xe0
    49dc:	02d2      	lsls	r2, r2, #11
    49de:	431a      	orrs	r2, r3
    49e0:	693b      	ldr	r3, [r7, #16]
    49e2:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    49e4:	230e      	movs	r3, #14
    49e6:	18fb      	adds	r3, r7, r3
    49e8:	781b      	ldrb	r3, [r3, #0]
    49ea:	2204      	movs	r2, #4
    49ec:	4013      	ands	r3, r2
    49ee:	d004      	beq.n	49fa <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    49f0:	697b      	ldr	r3, [r7, #20]
    49f2:	695b      	ldr	r3, [r3, #20]
    49f4:	697a      	ldr	r2, [r7, #20]
    49f6:	0010      	movs	r0, r2
    49f8:	4798      	blx	r3
		}
	}
}
    49fa:	46c0      	nop			; (mov r8, r8)
    49fc:	46bd      	mov	sp, r7
    49fe:	b006      	add	sp, #24
    4a00:	bd80      	pop	{r7, pc}
    4a02:	46c0      	nop			; (mov r8, r8)
    4a04:	200045b4 	.word	0x200045b4
    4a08:	000046e9 	.word	0x000046e9
    4a0c:	00004559 	.word	0x00004559
    4a10:	0000466d 	.word	0x0000466d
    4a14:	0000457d 	.word	0x0000457d

00004a18 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4a18:	b580      	push	{r7, lr}
    4a1a:	b082      	sub	sp, #8
    4a1c:	af00      	add	r7, sp, #0
    4a1e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	2200      	movs	r2, #0
    4a24:	701a      	strb	r2, [r3, #0]
}
    4a26:	46c0      	nop			; (mov r8, r8)
    4a28:	46bd      	mov	sp, r7
    4a2a:	b002      	add	sp, #8
    4a2c:	bd80      	pop	{r7, pc}
    4a2e:	46c0      	nop			; (mov r8, r8)

00004a30 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    4a30:	b580      	push	{r7, lr}
    4a32:	b086      	sub	sp, #24
    4a34:	af00      	add	r7, sp, #0
    4a36:	60f8      	str	r0, [r7, #12]
    4a38:	60b9      	str	r1, [r7, #8]
    4a3a:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    4a3c:	2316      	movs	r3, #22
    4a3e:	18fb      	adds	r3, r7, r3
    4a40:	2200      	movs	r2, #0
    4a42:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    4a44:	68bb      	ldr	r3, [r7, #8]
    4a46:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    4a48:	68bb      	ldr	r3, [r7, #8]
    4a4a:	085a      	lsrs	r2, r3, #1
    4a4c:	68fb      	ldr	r3, [r7, #12]
    4a4e:	429a      	cmp	r2, r3
    4a50:	d201      	bcs.n	4a56 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4a52:	2340      	movs	r3, #64	; 0x40
    4a54:	e026      	b.n	4aa4 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    4a56:	68bb      	ldr	r3, [r7, #8]
    4a58:	085b      	lsrs	r3, r3, #1
    4a5a:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    4a5c:	e00a      	b.n	4a74 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    4a5e:	693a      	ldr	r2, [r7, #16]
    4a60:	68fb      	ldr	r3, [r7, #12]
    4a62:	1ad3      	subs	r3, r2, r3
    4a64:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    4a66:	2316      	movs	r3, #22
    4a68:	18fb      	adds	r3, r7, r3
    4a6a:	881a      	ldrh	r2, [r3, #0]
    4a6c:	2316      	movs	r3, #22
    4a6e:	18fb      	adds	r3, r7, r3
    4a70:	3201      	adds	r2, #1
    4a72:	801a      	strh	r2, [r3, #0]
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
    4a74:	693a      	ldr	r2, [r7, #16]
    4a76:	68fb      	ldr	r3, [r7, #12]
    4a78:	429a      	cmp	r2, r3
    4a7a:	d2f0      	bcs.n	4a5e <_sercom_get_sync_baud_val+0x2e>
		clock_value = clock_value - baudrate;
		baud_calculated++;
	}
	baud_calculated = baud_calculated - 1;
    4a7c:	2316      	movs	r3, #22
    4a7e:	18fb      	adds	r3, r7, r3
    4a80:	2216      	movs	r2, #22
    4a82:	18ba      	adds	r2, r7, r2
    4a84:	8812      	ldrh	r2, [r2, #0]
    4a86:	3a01      	subs	r2, #1
    4a88:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    4a8a:	2316      	movs	r3, #22
    4a8c:	18fb      	adds	r3, r7, r3
    4a8e:	881b      	ldrh	r3, [r3, #0]
    4a90:	2bff      	cmp	r3, #255	; 0xff
    4a92:	d901      	bls.n	4a98 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    4a94:	2340      	movs	r3, #64	; 0x40
    4a96:	e005      	b.n	4aa4 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    4a98:	687b      	ldr	r3, [r7, #4]
    4a9a:	2216      	movs	r2, #22
    4a9c:	18ba      	adds	r2, r7, r2
    4a9e:	8812      	ldrh	r2, [r2, #0]
    4aa0:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    4aa2:	2300      	movs	r3, #0
	}
}
    4aa4:	0018      	movs	r0, r3
    4aa6:	46bd      	mov	sp, r7
    4aa8:	b006      	add	sp, #24
    4aaa:	bd80      	pop	{r7, pc}

00004aac <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    4aac:	b580      	push	{r7, lr}
    4aae:	b084      	sub	sp, #16
    4ab0:	af00      	add	r7, sp, #0
    4ab2:	0002      	movs	r2, r0
    4ab4:	1dfb      	adds	r3, r7, #7
    4ab6:	701a      	strb	r2, [r3, #0]
    4ab8:	1dbb      	adds	r3, r7, #6
    4aba:	1c0a      	adds	r2, r1, #0
    4abc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    4abe:	4b1a      	ldr	r3, [pc, #104]	; (4b28 <sercom_set_gclk_generator+0x7c>)
    4ac0:	781b      	ldrb	r3, [r3, #0]
    4ac2:	2201      	movs	r2, #1
    4ac4:	4053      	eors	r3, r2
    4ac6:	b2db      	uxtb	r3, r3
    4ac8:	2b00      	cmp	r3, #0
    4aca:	d103      	bne.n	4ad4 <sercom_set_gclk_generator+0x28>
    4acc:	1dbb      	adds	r3, r7, #6
    4ace:	781b      	ldrb	r3, [r3, #0]
    4ad0:	2b00      	cmp	r3, #0
    4ad2:	d01b      	beq.n	4b0c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4ad4:	230c      	movs	r3, #12
    4ad6:	18fb      	adds	r3, r7, r3
    4ad8:	0018      	movs	r0, r3
    4ada:	4b14      	ldr	r3, [pc, #80]	; (4b2c <sercom_set_gclk_generator+0x80>)
    4adc:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    4ade:	230c      	movs	r3, #12
    4ae0:	18fb      	adds	r3, r7, r3
    4ae2:	1dfa      	adds	r2, r7, #7
    4ae4:	7812      	ldrb	r2, [r2, #0]
    4ae6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    4ae8:	230c      	movs	r3, #12
    4aea:	18fb      	adds	r3, r7, r3
    4aec:	0019      	movs	r1, r3
    4aee:	2013      	movs	r0, #19
    4af0:	4b0f      	ldr	r3, [pc, #60]	; (4b30 <sercom_set_gclk_generator+0x84>)
    4af2:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    4af4:	2013      	movs	r0, #19
    4af6:	4b0f      	ldr	r3, [pc, #60]	; (4b34 <sercom_set_gclk_generator+0x88>)
    4af8:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    4afa:	4b0b      	ldr	r3, [pc, #44]	; (4b28 <sercom_set_gclk_generator+0x7c>)
    4afc:	1dfa      	adds	r2, r7, #7
    4afe:	7812      	ldrb	r2, [r2, #0]
    4b00:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    4b02:	4b09      	ldr	r3, [pc, #36]	; (4b28 <sercom_set_gclk_generator+0x7c>)
    4b04:	2201      	movs	r2, #1
    4b06:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    4b08:	2300      	movs	r3, #0
    4b0a:	e008      	b.n	4b1e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    4b0c:	4b06      	ldr	r3, [pc, #24]	; (4b28 <sercom_set_gclk_generator+0x7c>)
    4b0e:	785b      	ldrb	r3, [r3, #1]
    4b10:	1dfa      	adds	r2, r7, #7
    4b12:	7812      	ldrb	r2, [r2, #0]
    4b14:	429a      	cmp	r2, r3
    4b16:	d101      	bne.n	4b1c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    4b18:	2300      	movs	r3, #0
    4b1a:	e000      	b.n	4b1e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    4b1c:	231d      	movs	r3, #29
}
    4b1e:	0018      	movs	r0, r3
    4b20:	46bd      	mov	sp, r7
    4b22:	b004      	add	sp, #16
    4b24:	bd80      	pop	{r7, pc}
    4b26:	46c0      	nop			; (mov r8, r8)
    4b28:	200000d0 	.word	0x200000d0
    4b2c:	00004a19 	.word	0x00004a19
    4b30:	00006725 	.word	0x00006725
    4b34:	00006769 	.word	0x00006769

00004b38 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    4b38:	b580      	push	{r7, lr}
    4b3a:	b082      	sub	sp, #8
    4b3c:	af00      	add	r7, sp, #0
    4b3e:	6078      	str	r0, [r7, #4]
    4b40:	000a      	movs	r2, r1
    4b42:	1cfb      	adds	r3, r7, #3
    4b44:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    4b46:	687b      	ldr	r3, [r7, #4]
    4b48:	4a4d      	ldr	r2, [pc, #308]	; (4c80 <_sercom_get_default_pad+0x148>)
    4b4a:	4293      	cmp	r3, r2
    4b4c:	d03f      	beq.n	4bce <_sercom_get_default_pad+0x96>
    4b4e:	4a4c      	ldr	r2, [pc, #304]	; (4c80 <_sercom_get_default_pad+0x148>)
    4b50:	4293      	cmp	r3, r2
    4b52:	d806      	bhi.n	4b62 <_sercom_get_default_pad+0x2a>
    4b54:	4a4b      	ldr	r2, [pc, #300]	; (4c84 <_sercom_get_default_pad+0x14c>)
    4b56:	4293      	cmp	r3, r2
    4b58:	d00f      	beq.n	4b7a <_sercom_get_default_pad+0x42>
    4b5a:	4a4b      	ldr	r2, [pc, #300]	; (4c88 <_sercom_get_default_pad+0x150>)
    4b5c:	4293      	cmp	r3, r2
    4b5e:	d021      	beq.n	4ba4 <_sercom_get_default_pad+0x6c>
    4b60:	e089      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4b62:	4a4a      	ldr	r2, [pc, #296]	; (4c8c <_sercom_get_default_pad+0x154>)
    4b64:	4293      	cmp	r3, r2
    4b66:	d100      	bne.n	4b6a <_sercom_get_default_pad+0x32>
    4b68:	e05b      	b.n	4c22 <_sercom_get_default_pad+0xea>
    4b6a:	4a49      	ldr	r2, [pc, #292]	; (4c90 <_sercom_get_default_pad+0x158>)
    4b6c:	4293      	cmp	r3, r2
    4b6e:	d100      	bne.n	4b72 <_sercom_get_default_pad+0x3a>
    4b70:	e06c      	b.n	4c4c <_sercom_get_default_pad+0x114>
    4b72:	4a48      	ldr	r2, [pc, #288]	; (4c94 <_sercom_get_default_pad+0x15c>)
    4b74:	4293      	cmp	r3, r2
    4b76:	d03f      	beq.n	4bf8 <_sercom_get_default_pad+0xc0>
    4b78:	e07d      	b.n	4c76 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    4b7a:	1cfb      	adds	r3, r7, #3
    4b7c:	781b      	ldrb	r3, [r3, #0]
    4b7e:	2b01      	cmp	r3, #1
    4b80:	d00a      	beq.n	4b98 <_sercom_get_default_pad+0x60>
    4b82:	dc02      	bgt.n	4b8a <_sercom_get_default_pad+0x52>
    4b84:	2b00      	cmp	r3, #0
    4b86:	d005      	beq.n	4b94 <_sercom_get_default_pad+0x5c>
    4b88:	e075      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4b8a:	2b02      	cmp	r3, #2
    4b8c:	d006      	beq.n	4b9c <_sercom_get_default_pad+0x64>
    4b8e:	2b03      	cmp	r3, #3
    4b90:	d006      	beq.n	4ba0 <_sercom_get_default_pad+0x68>
    4b92:	e070      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4b94:	4b40      	ldr	r3, [pc, #256]	; (4c98 <_sercom_get_default_pad+0x160>)
    4b96:	e06f      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4b98:	4b40      	ldr	r3, [pc, #256]	; (4c9c <_sercom_get_default_pad+0x164>)
    4b9a:	e06d      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4b9c:	4b40      	ldr	r3, [pc, #256]	; (4ca0 <_sercom_get_default_pad+0x168>)
    4b9e:	e06b      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4ba0:	4b40      	ldr	r3, [pc, #256]	; (4ca4 <_sercom_get_default_pad+0x16c>)
    4ba2:	e069      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4ba4:	1cfb      	adds	r3, r7, #3
    4ba6:	781b      	ldrb	r3, [r3, #0]
    4ba8:	2b01      	cmp	r3, #1
    4baa:	d00a      	beq.n	4bc2 <_sercom_get_default_pad+0x8a>
    4bac:	dc02      	bgt.n	4bb4 <_sercom_get_default_pad+0x7c>
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d005      	beq.n	4bbe <_sercom_get_default_pad+0x86>
    4bb2:	e060      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4bb4:	2b02      	cmp	r3, #2
    4bb6:	d006      	beq.n	4bc6 <_sercom_get_default_pad+0x8e>
    4bb8:	2b03      	cmp	r3, #3
    4bba:	d006      	beq.n	4bca <_sercom_get_default_pad+0x92>
    4bbc:	e05b      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4bbe:	2303      	movs	r3, #3
    4bc0:	e05a      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4bc2:	4b39      	ldr	r3, [pc, #228]	; (4ca8 <_sercom_get_default_pad+0x170>)
    4bc4:	e058      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4bc6:	4b39      	ldr	r3, [pc, #228]	; (4cac <_sercom_get_default_pad+0x174>)
    4bc8:	e056      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4bca:	4b39      	ldr	r3, [pc, #228]	; (4cb0 <_sercom_get_default_pad+0x178>)
    4bcc:	e054      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4bce:	1cfb      	adds	r3, r7, #3
    4bd0:	781b      	ldrb	r3, [r3, #0]
    4bd2:	2b01      	cmp	r3, #1
    4bd4:	d00a      	beq.n	4bec <_sercom_get_default_pad+0xb4>
    4bd6:	dc02      	bgt.n	4bde <_sercom_get_default_pad+0xa6>
    4bd8:	2b00      	cmp	r3, #0
    4bda:	d005      	beq.n	4be8 <_sercom_get_default_pad+0xb0>
    4bdc:	e04b      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4bde:	2b02      	cmp	r3, #2
    4be0:	d006      	beq.n	4bf0 <_sercom_get_default_pad+0xb8>
    4be2:	2b03      	cmp	r3, #3
    4be4:	d006      	beq.n	4bf4 <_sercom_get_default_pad+0xbc>
    4be6:	e046      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4be8:	4b32      	ldr	r3, [pc, #200]	; (4cb4 <_sercom_get_default_pad+0x17c>)
    4bea:	e045      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4bec:	4b32      	ldr	r3, [pc, #200]	; (4cb8 <_sercom_get_default_pad+0x180>)
    4bee:	e043      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4bf0:	4b32      	ldr	r3, [pc, #200]	; (4cbc <_sercom_get_default_pad+0x184>)
    4bf2:	e041      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4bf4:	4b32      	ldr	r3, [pc, #200]	; (4cc0 <_sercom_get_default_pad+0x188>)
    4bf6:	e03f      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4bf8:	1cfb      	adds	r3, r7, #3
    4bfa:	781b      	ldrb	r3, [r3, #0]
    4bfc:	2b01      	cmp	r3, #1
    4bfe:	d00a      	beq.n	4c16 <_sercom_get_default_pad+0xde>
    4c00:	dc02      	bgt.n	4c08 <_sercom_get_default_pad+0xd0>
    4c02:	2b00      	cmp	r3, #0
    4c04:	d005      	beq.n	4c12 <_sercom_get_default_pad+0xda>
    4c06:	e036      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4c08:	2b02      	cmp	r3, #2
    4c0a:	d006      	beq.n	4c1a <_sercom_get_default_pad+0xe2>
    4c0c:	2b03      	cmp	r3, #3
    4c0e:	d006      	beq.n	4c1e <_sercom_get_default_pad+0xe6>
    4c10:	e031      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4c12:	4b2c      	ldr	r3, [pc, #176]	; (4cc4 <_sercom_get_default_pad+0x18c>)
    4c14:	e030      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c16:	4b2c      	ldr	r3, [pc, #176]	; (4cc8 <_sercom_get_default_pad+0x190>)
    4c18:	e02e      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c1a:	4b2c      	ldr	r3, [pc, #176]	; (4ccc <_sercom_get_default_pad+0x194>)
    4c1c:	e02c      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c1e:	4b2c      	ldr	r3, [pc, #176]	; (4cd0 <_sercom_get_default_pad+0x198>)
    4c20:	e02a      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c22:	1cfb      	adds	r3, r7, #3
    4c24:	781b      	ldrb	r3, [r3, #0]
    4c26:	2b01      	cmp	r3, #1
    4c28:	d00a      	beq.n	4c40 <_sercom_get_default_pad+0x108>
    4c2a:	dc02      	bgt.n	4c32 <_sercom_get_default_pad+0xfa>
    4c2c:	2b00      	cmp	r3, #0
    4c2e:	d005      	beq.n	4c3c <_sercom_get_default_pad+0x104>
    4c30:	e021      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4c32:	2b02      	cmp	r3, #2
    4c34:	d006      	beq.n	4c44 <_sercom_get_default_pad+0x10c>
    4c36:	2b03      	cmp	r3, #3
    4c38:	d006      	beq.n	4c48 <_sercom_get_default_pad+0x110>
    4c3a:	e01c      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4c3c:	4b25      	ldr	r3, [pc, #148]	; (4cd4 <_sercom_get_default_pad+0x19c>)
    4c3e:	e01b      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c40:	4b25      	ldr	r3, [pc, #148]	; (4cd8 <_sercom_get_default_pad+0x1a0>)
    4c42:	e019      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c44:	4b25      	ldr	r3, [pc, #148]	; (4cdc <_sercom_get_default_pad+0x1a4>)
    4c46:	e017      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c48:	4b25      	ldr	r3, [pc, #148]	; (4ce0 <_sercom_get_default_pad+0x1a8>)
    4c4a:	e015      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c4c:	1cfb      	adds	r3, r7, #3
    4c4e:	781b      	ldrb	r3, [r3, #0]
    4c50:	2b01      	cmp	r3, #1
    4c52:	d00a      	beq.n	4c6a <_sercom_get_default_pad+0x132>
    4c54:	dc02      	bgt.n	4c5c <_sercom_get_default_pad+0x124>
    4c56:	2b00      	cmp	r3, #0
    4c58:	d005      	beq.n	4c66 <_sercom_get_default_pad+0x12e>
    4c5a:	e00c      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4c5c:	2b02      	cmp	r3, #2
    4c5e:	d006      	beq.n	4c6e <_sercom_get_default_pad+0x136>
    4c60:	2b03      	cmp	r3, #3
    4c62:	d006      	beq.n	4c72 <_sercom_get_default_pad+0x13a>
    4c64:	e007      	b.n	4c76 <_sercom_get_default_pad+0x13e>
    4c66:	4b1f      	ldr	r3, [pc, #124]	; (4ce4 <_sercom_get_default_pad+0x1ac>)
    4c68:	e006      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c6a:	4b1f      	ldr	r3, [pc, #124]	; (4ce8 <_sercom_get_default_pad+0x1b0>)
    4c6c:	e004      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c6e:	4b1f      	ldr	r3, [pc, #124]	; (4cec <_sercom_get_default_pad+0x1b4>)
    4c70:	e002      	b.n	4c78 <_sercom_get_default_pad+0x140>
    4c72:	4b1f      	ldr	r3, [pc, #124]	; (4cf0 <_sercom_get_default_pad+0x1b8>)
    4c74:	e000      	b.n	4c78 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    4c76:	2300      	movs	r3, #0
}
    4c78:	0018      	movs	r0, r3
    4c7a:	46bd      	mov	sp, r7
    4c7c:	b002      	add	sp, #8
    4c7e:	bd80      	pop	{r7, pc}
    4c80:	42001000 	.word	0x42001000
    4c84:	42000800 	.word	0x42000800
    4c88:	42000c00 	.word	0x42000c00
    4c8c:	42001800 	.word	0x42001800
    4c90:	42001c00 	.word	0x42001c00
    4c94:	42001400 	.word	0x42001400
    4c98:	00040003 	.word	0x00040003
    4c9c:	00050003 	.word	0x00050003
    4ca0:	00060003 	.word	0x00060003
    4ca4:	00070003 	.word	0x00070003
    4ca8:	00010003 	.word	0x00010003
    4cac:	001e0003 	.word	0x001e0003
    4cb0:	001f0003 	.word	0x001f0003
    4cb4:	00080003 	.word	0x00080003
    4cb8:	00090003 	.word	0x00090003
    4cbc:	000a0003 	.word	0x000a0003
    4cc0:	000b0003 	.word	0x000b0003
    4cc4:	00100003 	.word	0x00100003
    4cc8:	00110003 	.word	0x00110003
    4ccc:	00120003 	.word	0x00120003
    4cd0:	00130003 	.word	0x00130003
    4cd4:	000c0003 	.word	0x000c0003
    4cd8:	000d0003 	.word	0x000d0003
    4cdc:	000e0003 	.word	0x000e0003
    4ce0:	000f0003 	.word	0x000f0003
    4ce4:	00160003 	.word	0x00160003
    4ce8:	00170003 	.word	0x00170003
    4cec:	00180003 	.word	0x00180003
    4cf0:	00190003 	.word	0x00190003

00004cf4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    4cf4:	b590      	push	{r4, r7, lr}
    4cf6:	b08b      	sub	sp, #44	; 0x2c
    4cf8:	af00      	add	r7, sp, #0
    4cfa:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    4cfc:	230c      	movs	r3, #12
    4cfe:	18fb      	adds	r3, r7, r3
    4d00:	4a0f      	ldr	r2, [pc, #60]	; (4d40 <_sercom_get_sercom_inst_index+0x4c>)
    4d02:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d04:	c313      	stmia	r3!, {r0, r1, r4}
    4d06:	ca13      	ldmia	r2!, {r0, r1, r4}
    4d08:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d0a:	2300      	movs	r3, #0
    4d0c:	627b      	str	r3, [r7, #36]	; 0x24
    4d0e:	e00e      	b.n	4d2e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    4d10:	230c      	movs	r3, #12
    4d12:	18fb      	adds	r3, r7, r3
    4d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4d16:	0092      	lsls	r2, r2, #2
    4d18:	58d3      	ldr	r3, [r2, r3]
    4d1a:	1e1a      	subs	r2, r3, #0
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	429a      	cmp	r2, r3
    4d20:	d102      	bne.n	4d28 <_sercom_get_sercom_inst_index+0x34>
			return i;
    4d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d24:	b2db      	uxtb	r3, r3
    4d26:	e006      	b.n	4d36 <_sercom_get_sercom_inst_index+0x42>
{
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d2a:	3301      	adds	r3, #1
    4d2c:	627b      	str	r3, [r7, #36]	; 0x24
    4d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d30:	2b05      	cmp	r3, #5
    4d32:	d9ed      	bls.n	4d10 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    4d34:	2300      	movs	r3, #0
}
    4d36:	0018      	movs	r0, r3
    4d38:	46bd      	mov	sp, r7
    4d3a:	b00b      	add	sp, #44	; 0x2c
    4d3c:	bd90      	pop	{r4, r7, pc}
    4d3e:	46c0      	nop			; (mov r8, r8)
    4d40:	0000dd80 	.word	0x0000dd80

00004d44 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    4d44:	b580      	push	{r7, lr}
    4d46:	b082      	sub	sp, #8
    4d48:	af00      	add	r7, sp, #0
    4d4a:	0002      	movs	r2, r0
    4d4c:	1dfb      	adds	r3, r7, #7
    4d4e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    4d50:	46c0      	nop			; (mov r8, r8)
    4d52:	46bd      	mov	sp, r7
    4d54:	b002      	add	sp, #8
    4d56:	bd80      	pop	{r7, pc}

00004d58 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    4d58:	b580      	push	{r7, lr}
    4d5a:	b084      	sub	sp, #16
    4d5c:	af00      	add	r7, sp, #0
    4d5e:	0002      	movs	r2, r0
    4d60:	6039      	str	r1, [r7, #0]
    4d62:	1dfb      	adds	r3, r7, #7
    4d64:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    4d66:	4b13      	ldr	r3, [pc, #76]	; (4db4 <_sercom_set_handler+0x5c>)
    4d68:	781b      	ldrb	r3, [r3, #0]
    4d6a:	2201      	movs	r2, #1
    4d6c:	4053      	eors	r3, r2
    4d6e:	b2db      	uxtb	r3, r3
    4d70:	2b00      	cmp	r3, #0
    4d72:	d015      	beq.n	4da0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d74:	2300      	movs	r3, #0
    4d76:	60fb      	str	r3, [r7, #12]
    4d78:	e00c      	b.n	4d94 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    4d7a:	4b0f      	ldr	r3, [pc, #60]	; (4db8 <_sercom_set_handler+0x60>)
    4d7c:	68fa      	ldr	r2, [r7, #12]
    4d7e:	0092      	lsls	r2, r2, #2
    4d80:	490e      	ldr	r1, [pc, #56]	; (4dbc <_sercom_set_handler+0x64>)
    4d82:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    4d84:	4b0e      	ldr	r3, [pc, #56]	; (4dc0 <_sercom_set_handler+0x68>)
    4d86:	68fa      	ldr	r2, [r7, #12]
    4d88:	0092      	lsls	r2, r2, #2
    4d8a:	2100      	movs	r1, #0
    4d8c:	50d1      	str	r1, [r2, r3]
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    4d8e:	68fb      	ldr	r3, [r7, #12]
    4d90:	3301      	adds	r3, #1
    4d92:	60fb      	str	r3, [r7, #12]
    4d94:	68fb      	ldr	r3, [r7, #12]
    4d96:	2b05      	cmp	r3, #5
    4d98:	d9ef      	bls.n	4d7a <_sercom_set_handler+0x22>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    4d9a:	4b06      	ldr	r3, [pc, #24]	; (4db4 <_sercom_set_handler+0x5c>)
    4d9c:	2201      	movs	r2, #1
    4d9e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    4da0:	1dfb      	adds	r3, r7, #7
    4da2:	781a      	ldrb	r2, [r3, #0]
    4da4:	4b04      	ldr	r3, [pc, #16]	; (4db8 <_sercom_set_handler+0x60>)
    4da6:	0092      	lsls	r2, r2, #2
    4da8:	6839      	ldr	r1, [r7, #0]
    4daa:	50d1      	str	r1, [r2, r3]
}
    4dac:	46c0      	nop			; (mov r8, r8)
    4dae:	46bd      	mov	sp, r7
    4db0:	b004      	add	sp, #16
    4db2:	bd80      	pop	{r7, pc}
    4db4:	200000d2 	.word	0x200000d2
    4db8:	200000d4 	.word	0x200000d4
    4dbc:	00004d45 	.word	0x00004d45
    4dc0:	200045b4 	.word	0x200045b4

00004dc4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    4dc4:	b590      	push	{r4, r7, lr}
    4dc6:	b085      	sub	sp, #20
    4dc8:	af00      	add	r7, sp, #0
    4dca:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    4dcc:	2308      	movs	r3, #8
    4dce:	18fa      	adds	r2, r7, r3
    4dd0:	4b0c      	ldr	r3, [pc, #48]	; (4e04 <_sercom_get_interrupt_vector+0x40>)
    4dd2:	0010      	movs	r0, r2
    4dd4:	0019      	movs	r1, r3
    4dd6:	2306      	movs	r3, #6
    4dd8:	001a      	movs	r2, r3
    4dda:	4b0b      	ldr	r3, [pc, #44]	; (4e08 <_sercom_get_interrupt_vector+0x44>)
    4ddc:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    4dde:	230f      	movs	r3, #15
    4de0:	18fc      	adds	r4, r7, r3
    4de2:	687b      	ldr	r3, [r7, #4]
    4de4:	0018      	movs	r0, r3
    4de6:	4b09      	ldr	r3, [pc, #36]	; (4e0c <_sercom_get_interrupt_vector+0x48>)
    4de8:	4798      	blx	r3
    4dea:	0003      	movs	r3, r0
    4dec:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    4dee:	230f      	movs	r3, #15
    4df0:	18fb      	adds	r3, r7, r3
    4df2:	781b      	ldrb	r3, [r3, #0]
    4df4:	2208      	movs	r2, #8
    4df6:	18ba      	adds	r2, r7, r2
    4df8:	5cd3      	ldrb	r3, [r2, r3]
    4dfa:	b25b      	sxtb	r3, r3
}
    4dfc:	0018      	movs	r0, r3
    4dfe:	46bd      	mov	sp, r7
    4e00:	b005      	add	sp, #20
    4e02:	bd90      	pop	{r4, r7, pc}
    4e04:	0000dd98 	.word	0x0000dd98
    4e08:	0000bb09 	.word	0x0000bb09
    4e0c:	00004cf5 	.word	0x00004cf5

00004e10 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    4e10:	b580      	push	{r7, lr}
    4e12:	af00      	add	r7, sp, #0
    4e14:	4b03      	ldr	r3, [pc, #12]	; (4e24 <SERCOM0_Handler+0x14>)
    4e16:	681b      	ldr	r3, [r3, #0]
    4e18:	2000      	movs	r0, #0
    4e1a:	4798      	blx	r3
    4e1c:	46c0      	nop			; (mov r8, r8)
    4e1e:	46bd      	mov	sp, r7
    4e20:	bd80      	pop	{r7, pc}
    4e22:	46c0      	nop			; (mov r8, r8)
    4e24:	200000d4 	.word	0x200000d4

00004e28 <SERCOM1_Handler>:
    4e28:	b580      	push	{r7, lr}
    4e2a:	af00      	add	r7, sp, #0
    4e2c:	4b03      	ldr	r3, [pc, #12]	; (4e3c <SERCOM1_Handler+0x14>)
    4e2e:	685b      	ldr	r3, [r3, #4]
    4e30:	2001      	movs	r0, #1
    4e32:	4798      	blx	r3
    4e34:	46c0      	nop			; (mov r8, r8)
    4e36:	46bd      	mov	sp, r7
    4e38:	bd80      	pop	{r7, pc}
    4e3a:	46c0      	nop			; (mov r8, r8)
    4e3c:	200000d4 	.word	0x200000d4

00004e40 <SERCOM2_Handler>:
    4e40:	b580      	push	{r7, lr}
    4e42:	af00      	add	r7, sp, #0
    4e44:	4b03      	ldr	r3, [pc, #12]	; (4e54 <SERCOM2_Handler+0x14>)
    4e46:	689b      	ldr	r3, [r3, #8]
    4e48:	2002      	movs	r0, #2
    4e4a:	4798      	blx	r3
    4e4c:	46c0      	nop			; (mov r8, r8)
    4e4e:	46bd      	mov	sp, r7
    4e50:	bd80      	pop	{r7, pc}
    4e52:	46c0      	nop			; (mov r8, r8)
    4e54:	200000d4 	.word	0x200000d4

00004e58 <SERCOM3_Handler>:
    4e58:	b580      	push	{r7, lr}
    4e5a:	af00      	add	r7, sp, #0
    4e5c:	4b03      	ldr	r3, [pc, #12]	; (4e6c <SERCOM3_Handler+0x14>)
    4e5e:	68db      	ldr	r3, [r3, #12]
    4e60:	2003      	movs	r0, #3
    4e62:	4798      	blx	r3
    4e64:	46c0      	nop			; (mov r8, r8)
    4e66:	46bd      	mov	sp, r7
    4e68:	bd80      	pop	{r7, pc}
    4e6a:	46c0      	nop			; (mov r8, r8)
    4e6c:	200000d4 	.word	0x200000d4

00004e70 <SERCOM4_Handler>:
    4e70:	b580      	push	{r7, lr}
    4e72:	af00      	add	r7, sp, #0
    4e74:	4b03      	ldr	r3, [pc, #12]	; (4e84 <SERCOM4_Handler+0x14>)
    4e76:	691b      	ldr	r3, [r3, #16]
    4e78:	2004      	movs	r0, #4
    4e7a:	4798      	blx	r3
    4e7c:	46c0      	nop			; (mov r8, r8)
    4e7e:	46bd      	mov	sp, r7
    4e80:	bd80      	pop	{r7, pc}
    4e82:	46c0      	nop			; (mov r8, r8)
    4e84:	200000d4 	.word	0x200000d4

00004e88 <SERCOM5_Handler>:
    4e88:	b580      	push	{r7, lr}
    4e8a:	af00      	add	r7, sp, #0
    4e8c:	4b03      	ldr	r3, [pc, #12]	; (4e9c <SERCOM5_Handler+0x14>)
    4e8e:	695b      	ldr	r3, [r3, #20]
    4e90:	2005      	movs	r0, #5
    4e92:	4798      	blx	r3
    4e94:	46c0      	nop			; (mov r8, r8)
    4e96:	46bd      	mov	sp, r7
    4e98:	bd80      	pop	{r7, pc}
    4e9a:	46c0      	nop			; (mov r8, r8)
    4e9c:	200000d4 	.word	0x200000d4

00004ea0 <system_pinmux_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_pinmux_get_config_defaults(
		struct system_pinmux_config *const config)
{
    4ea0:	b580      	push	{r7, lr}
    4ea2:	b082      	sub	sp, #8
    4ea4:	af00      	add	r7, sp, #0
    4ea6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	2280      	movs	r2, #128	; 0x80
    4eac:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4eae:	687b      	ldr	r3, [r7, #4]
    4eb0:	2200      	movs	r2, #0
    4eb2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	2201      	movs	r2, #1
    4eb8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4eba:	687b      	ldr	r3, [r7, #4]
    4ebc:	2200      	movs	r2, #0
    4ebe:	70da      	strb	r2, [r3, #3]
}
    4ec0:	46c0      	nop			; (mov r8, r8)
    4ec2:	46bd      	mov	sp, r7
    4ec4:	b002      	add	sp, #8
    4ec6:	bd80      	pop	{r7, pc}

00004ec8 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4ec8:	b580      	push	{r7, lr}
    4eca:	b084      	sub	sp, #16
    4ecc:	af00      	add	r7, sp, #0
    4ece:	0002      	movs	r2, r0
    4ed0:	1dfb      	adds	r3, r7, #7
    4ed2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    4ed4:	230f      	movs	r3, #15
    4ed6:	18fb      	adds	r3, r7, r3
    4ed8:	1dfa      	adds	r2, r7, #7
    4eda:	7812      	ldrb	r2, [r2, #0]
    4edc:	09d2      	lsrs	r2, r2, #7
    4ede:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    4ee0:	230e      	movs	r3, #14
    4ee2:	18fb      	adds	r3, r7, r3
    4ee4:	1dfa      	adds	r2, r7, #7
    4ee6:	7812      	ldrb	r2, [r2, #0]
    4ee8:	0952      	lsrs	r2, r2, #5
    4eea:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    4eec:	4b0d      	ldr	r3, [pc, #52]	; (4f24 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    4eee:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    4ef0:	230f      	movs	r3, #15
    4ef2:	18fb      	adds	r3, r7, r3
    4ef4:	781b      	ldrb	r3, [r3, #0]
    4ef6:	2b00      	cmp	r3, #0
    4ef8:	d10f      	bne.n	4f1a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    4efa:	230f      	movs	r3, #15
    4efc:	18fb      	adds	r3, r7, r3
    4efe:	781b      	ldrb	r3, [r3, #0]
    4f00:	009b      	lsls	r3, r3, #2
    4f02:	2210      	movs	r2, #16
    4f04:	4694      	mov	ip, r2
    4f06:	44bc      	add	ip, r7
    4f08:	4463      	add	r3, ip
    4f0a:	3b08      	subs	r3, #8
    4f0c:	681a      	ldr	r2, [r3, #0]
    4f0e:	230e      	movs	r3, #14
    4f10:	18fb      	adds	r3, r7, r3
    4f12:	781b      	ldrb	r3, [r3, #0]
    4f14:	01db      	lsls	r3, r3, #7
    4f16:	18d3      	adds	r3, r2, r3
    4f18:	e000      	b.n	4f1c <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    4f1a:	2300      	movs	r3, #0
	}
}
    4f1c:	0018      	movs	r0, r3
    4f1e:	46bd      	mov	sp, r7
    4f20:	b004      	add	sp, #16
    4f22:	bd80      	pop	{r7, pc}
    4f24:	41004400 	.word	0x41004400

00004f28 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    4f28:	b580      	push	{r7, lr}
    4f2a:	b082      	sub	sp, #8
    4f2c:	af00      	add	r7, sp, #0
    4f2e:	0002      	movs	r2, r0
    4f30:	1dfb      	adds	r3, r7, #7
    4f32:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    4f34:	1dfb      	adds	r3, r7, #7
    4f36:	781b      	ldrb	r3, [r3, #0]
    4f38:	0018      	movs	r0, r3
    4f3a:	4b03      	ldr	r3, [pc, #12]	; (4f48 <port_get_group_from_gpio_pin+0x20>)
    4f3c:	4798      	blx	r3
    4f3e:	0003      	movs	r3, r0
}
    4f40:	0018      	movs	r0, r3
    4f42:	46bd      	mov	sp, r7
    4f44:	b002      	add	sp, #8
    4f46:	bd80      	pop	{r7, pc}
    4f48:	00004ec9 	.word	0x00004ec9

00004f4c <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    4f4c:	b580      	push	{r7, lr}
    4f4e:	b084      	sub	sp, #16
    4f50:	af00      	add	r7, sp, #0
    4f52:	0002      	movs	r2, r0
    4f54:	1dfb      	adds	r3, r7, #7
    4f56:	701a      	strb	r2, [r3, #0]
    4f58:	1dbb      	adds	r3, r7, #6
    4f5a:	1c0a      	adds	r2, r1, #0
    4f5c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    4f5e:	1dfb      	adds	r3, r7, #7
    4f60:	781b      	ldrb	r3, [r3, #0]
    4f62:	0018      	movs	r0, r3
    4f64:	4b0d      	ldr	r3, [pc, #52]	; (4f9c <port_pin_set_output_level+0x50>)
    4f66:	4798      	blx	r3
    4f68:	0003      	movs	r3, r0
    4f6a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    4f6c:	1dfb      	adds	r3, r7, #7
    4f6e:	781b      	ldrb	r3, [r3, #0]
    4f70:	221f      	movs	r2, #31
    4f72:	4013      	ands	r3, r2
    4f74:	2201      	movs	r2, #1
    4f76:	409a      	lsls	r2, r3
    4f78:	0013      	movs	r3, r2
    4f7a:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    4f7c:	1dbb      	adds	r3, r7, #6
    4f7e:	781b      	ldrb	r3, [r3, #0]
    4f80:	2b00      	cmp	r3, #0
    4f82:	d003      	beq.n	4f8c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    4f84:	68fb      	ldr	r3, [r7, #12]
    4f86:	68ba      	ldr	r2, [r7, #8]
    4f88:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    4f8a:	e002      	b.n	4f92 <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    4f8c:	68fb      	ldr	r3, [r7, #12]
    4f8e:	68ba      	ldr	r2, [r7, #8]
    4f90:	615a      	str	r2, [r3, #20]
	}
}
    4f92:	46c0      	nop			; (mov r8, r8)
    4f94:	46bd      	mov	sp, r7
    4f96:	b004      	add	sp, #16
    4f98:	bd80      	pop	{r7, pc}
    4f9a:	46c0      	nop			; (mov r8, r8)
    4f9c:	00004f29 	.word	0x00004f29

00004fa0 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    4fa0:	b580      	push	{r7, lr}
    4fa2:	b082      	sub	sp, #8
    4fa4:	af00      	add	r7, sp, #0
    4fa6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    4fa8:	687b      	ldr	r3, [r7, #4]
    4faa:	2200      	movs	r2, #0
    4fac:	701a      	strb	r2, [r3, #0]
}
    4fae:	46c0      	nop			; (mov r8, r8)
    4fb0:	46bd      	mov	sp, r7
    4fb2:	b002      	add	sp, #8
    4fb4:	bd80      	pop	{r7, pc}
    4fb6:	46c0      	nop			; (mov r8, r8)

00004fb8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4fb8:	b580      	push	{r7, lr}
    4fba:	b082      	sub	sp, #8
    4fbc:	af00      	add	r7, sp, #0
    4fbe:	0002      	movs	r2, r0
    4fc0:	6039      	str	r1, [r7, #0]
    4fc2:	1dfb      	adds	r3, r7, #7
    4fc4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4fc6:	1dfb      	adds	r3, r7, #7
    4fc8:	781b      	ldrb	r3, [r3, #0]
    4fca:	2b01      	cmp	r3, #1
    4fcc:	d00a      	beq.n	4fe4 <system_apb_clock_set_mask+0x2c>
    4fce:	2b02      	cmp	r3, #2
    4fd0:	d00f      	beq.n	4ff2 <system_apb_clock_set_mask+0x3a>
    4fd2:	2b00      	cmp	r3, #0
    4fd4:	d114      	bne.n	5000 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4fd6:	4b0e      	ldr	r3, [pc, #56]	; (5010 <system_apb_clock_set_mask+0x58>)
    4fd8:	4a0d      	ldr	r2, [pc, #52]	; (5010 <system_apb_clock_set_mask+0x58>)
    4fda:	6991      	ldr	r1, [r2, #24]
    4fdc:	683a      	ldr	r2, [r7, #0]
    4fde:	430a      	orrs	r2, r1
    4fe0:	619a      	str	r2, [r3, #24]
			break;
    4fe2:	e00f      	b.n	5004 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4fe4:	4b0a      	ldr	r3, [pc, #40]	; (5010 <system_apb_clock_set_mask+0x58>)
    4fe6:	4a0a      	ldr	r2, [pc, #40]	; (5010 <system_apb_clock_set_mask+0x58>)
    4fe8:	69d1      	ldr	r1, [r2, #28]
    4fea:	683a      	ldr	r2, [r7, #0]
    4fec:	430a      	orrs	r2, r1
    4fee:	61da      	str	r2, [r3, #28]
			break;
    4ff0:	e008      	b.n	5004 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4ff2:	4b07      	ldr	r3, [pc, #28]	; (5010 <system_apb_clock_set_mask+0x58>)
    4ff4:	4a06      	ldr	r2, [pc, #24]	; (5010 <system_apb_clock_set_mask+0x58>)
    4ff6:	6a11      	ldr	r1, [r2, #32]
    4ff8:	683a      	ldr	r2, [r7, #0]
    4ffa:	430a      	orrs	r2, r1
    4ffc:	621a      	str	r2, [r3, #32]
			break;
    4ffe:	e001      	b.n	5004 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5000:	2317      	movs	r3, #23
    5002:	e000      	b.n	5006 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    5004:	2300      	movs	r3, #0
}
    5006:	0018      	movs	r0, r3
    5008:	46bd      	mov	sp, r7
    500a:	b002      	add	sp, #8
    500c:	bd80      	pop	{r7, pc}
    500e:	46c0      	nop			; (mov r8, r8)
    5010:	40000400 	.word	0x40000400

00005014 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    5014:	b580      	push	{r7, lr}
    5016:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5018:	4b05      	ldr	r3, [pc, #20]	; (5030 <system_is_debugger_present+0x1c>)
    501a:	789b      	ldrb	r3, [r3, #2]
    501c:	b2db      	uxtb	r3, r3
    501e:	001a      	movs	r2, r3
    5020:	2302      	movs	r3, #2
    5022:	4013      	ands	r3, r2
    5024:	1e5a      	subs	r2, r3, #1
    5026:	4193      	sbcs	r3, r2
    5028:	b2db      	uxtb	r3, r3
}
    502a:	0018      	movs	r0, r3
    502c:	46bd      	mov	sp, r7
    502e:	bd80      	pop	{r7, pc}
    5030:	41002000 	.word	0x41002000

00005034 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    5034:	b580      	push	{r7, lr}
    5036:	b084      	sub	sp, #16
    5038:	af00      	add	r7, sp, #0
    503a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    503c:	687b      	ldr	r3, [r7, #4]
    503e:	681b      	ldr	r3, [r3, #0]
    5040:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5042:	68fb      	ldr	r3, [r7, #12]
    5044:	7e1b      	ldrb	r3, [r3, #24]
    5046:	b2db      	uxtb	r3, r3
    5048:	001a      	movs	r2, r3
    504a:	2301      	movs	r3, #1
    504c:	4013      	ands	r3, r2
    504e:	1e5a      	subs	r2, r3, #1
    5050:	4193      	sbcs	r3, r2
    5052:	b2db      	uxtb	r3, r3
}
    5054:	0018      	movs	r0, r3
    5056:	46bd      	mov	sp, r7
    5058:	b004      	add	sp, #16
    505a:	bd80      	pop	{r7, pc}

0000505c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    505c:	b580      	push	{r7, lr}
    505e:	b084      	sub	sp, #16
    5060:	af00      	add	r7, sp, #0
    5062:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5064:	687b      	ldr	r3, [r7, #4]
    5066:	681b      	ldr	r3, [r3, #0]
    5068:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    506a:	68fb      	ldr	r3, [r7, #12]
    506c:	7e1b      	ldrb	r3, [r3, #24]
    506e:	b2db      	uxtb	r3, r3
    5070:	001a      	movs	r2, r3
    5072:	2304      	movs	r3, #4
    5074:	4013      	ands	r3, r2
    5076:	1e5a      	subs	r2, r3, #1
    5078:	4193      	sbcs	r3, r2
    507a:	b2db      	uxtb	r3, r3
}
    507c:	0018      	movs	r0, r3
    507e:	46bd      	mov	sp, r7
    5080:	b004      	add	sp, #16
    5082:	bd80      	pop	{r7, pc}

00005084 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    5084:	b580      	push	{r7, lr}
    5086:	b084      	sub	sp, #16
    5088:	af00      	add	r7, sp, #0
    508a:	6078      	str	r0, [r7, #4]
    508c:	000a      	movs	r2, r1
    508e:	1cbb      	adds	r3, r7, #2
    5090:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5092:	687b      	ldr	r3, [r7, #4]
    5094:	681b      	ldr	r3, [r3, #0]
    5096:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5098:	687b      	ldr	r3, [r7, #4]
    509a:	0018      	movs	r0, r3
    509c:	4b0a      	ldr	r3, [pc, #40]	; (50c8 <spi_write+0x44>)
    509e:	4798      	blx	r3
    50a0:	0003      	movs	r3, r0
    50a2:	001a      	movs	r2, r3
    50a4:	2301      	movs	r3, #1
    50a6:	4053      	eors	r3, r2
    50a8:	b2db      	uxtb	r3, r3
    50aa:	2b00      	cmp	r3, #0
    50ac:	d001      	beq.n	50b2 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    50ae:	2305      	movs	r3, #5
    50b0:	e006      	b.n	50c0 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    50b2:	1cbb      	adds	r3, r7, #2
    50b4:	881b      	ldrh	r3, [r3, #0]
    50b6:	05db      	lsls	r3, r3, #23
    50b8:	0dda      	lsrs	r2, r3, #23
    50ba:	68fb      	ldr	r3, [r7, #12]
    50bc:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    50be:	2300      	movs	r3, #0
}
    50c0:	0018      	movs	r0, r3
    50c2:	46bd      	mov	sp, r7
    50c4:	b004      	add	sp, #16
    50c6:	bd80      	pop	{r7, pc}
    50c8:	00005035 	.word	0x00005035

000050cc <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    50cc:	b580      	push	{r7, lr}
    50ce:	b084      	sub	sp, #16
    50d0:	af00      	add	r7, sp, #0
    50d2:	6078      	str	r0, [r7, #4]
    50d4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    50d6:	687b      	ldr	r3, [r7, #4]
    50d8:	681b      	ldr	r3, [r3, #0]
    50da:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    50dc:	687b      	ldr	r3, [r7, #4]
    50de:	0018      	movs	r0, r3
    50e0:	4b1b      	ldr	r3, [pc, #108]	; (5150 <spi_read+0x84>)
    50e2:	4798      	blx	r3
    50e4:	0003      	movs	r3, r0
    50e6:	001a      	movs	r2, r3
    50e8:	2301      	movs	r3, #1
    50ea:	4053      	eors	r3, r2
    50ec:	b2db      	uxtb	r3, r3
    50ee:	2b00      	cmp	r3, #0
    50f0:	d001      	beq.n	50f6 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    50f2:	2310      	movs	r3, #16
    50f4:	e027      	b.n	5146 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    50f6:	230f      	movs	r3, #15
    50f8:	18fb      	adds	r3, r7, r3
    50fa:	2200      	movs	r2, #0
    50fc:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    50fe:	68bb      	ldr	r3, [r7, #8]
    5100:	8b5b      	ldrh	r3, [r3, #26]
    5102:	b29b      	uxth	r3, r3
    5104:	001a      	movs	r2, r3
    5106:	2304      	movs	r3, #4
    5108:	4013      	ands	r3, r2
    510a:	d006      	beq.n	511a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    510c:	230f      	movs	r3, #15
    510e:	18fb      	adds	r3, r7, r3
    5110:	221e      	movs	r2, #30
    5112:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5114:	68bb      	ldr	r3, [r7, #8]
    5116:	2204      	movs	r2, #4
    5118:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    511a:	687b      	ldr	r3, [r7, #4]
    511c:	799b      	ldrb	r3, [r3, #6]
    511e:	2b01      	cmp	r3, #1
    5120:	d108      	bne.n	5134 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5122:	68bb      	ldr	r3, [r7, #8]
    5124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5126:	b29b      	uxth	r3, r3
    5128:	05db      	lsls	r3, r3, #23
    512a:	0ddb      	lsrs	r3, r3, #23
    512c:	b29a      	uxth	r2, r3
    512e:	683b      	ldr	r3, [r7, #0]
    5130:	801a      	strh	r2, [r3, #0]
    5132:	e005      	b.n	5140 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5134:	68bb      	ldr	r3, [r7, #8]
    5136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5138:	b2db      	uxtb	r3, r3
    513a:	b29a      	uxth	r2, r3
    513c:	683b      	ldr	r3, [r7, #0]
    513e:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    5140:	230f      	movs	r3, #15
    5142:	18fb      	adds	r3, r7, r3
    5144:	781b      	ldrb	r3, [r3, #0]
}
    5146:	0018      	movs	r0, r3
    5148:	46bd      	mov	sp, r7
    514a:	b004      	add	sp, #16
    514c:	bd80      	pop	{r7, pc}
    514e:	46c0      	nop			; (mov r8, r8)
    5150:	0000505d 	.word	0x0000505d

00005154 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    5154:	b590      	push	{r4, r7, lr}
    5156:	b093      	sub	sp, #76	; 0x4c
    5158:	af00      	add	r7, sp, #0
    515a:	6078      	str	r0, [r7, #4]
    515c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    515e:	687b      	ldr	r3, [r7, #4]
    5160:	681b      	ldr	r3, [r3, #0]
    5162:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    5164:	687b      	ldr	r3, [r7, #4]
    5166:	681b      	ldr	r3, [r3, #0]
    5168:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    516a:	231c      	movs	r3, #28
    516c:	18fb      	adds	r3, r7, r3
    516e:	0018      	movs	r0, r3
    5170:	4b75      	ldr	r3, [pc, #468]	; (5348 <_spi_set_config+0x1f4>)
    5172:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5174:	231c      	movs	r3, #28
    5176:	18fb      	adds	r3, r7, r3
    5178:	2200      	movs	r2, #0
    517a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    517c:	683b      	ldr	r3, [r7, #0]
    517e:	781b      	ldrb	r3, [r3, #0]
    5180:	2b00      	cmp	r3, #0
    5182:	d103      	bne.n	518c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    5184:	231c      	movs	r3, #28
    5186:	18fb      	adds	r3, r7, r3
    5188:	2200      	movs	r2, #0
    518a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    518c:	683b      	ldr	r3, [r7, #0]
    518e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    5190:	230c      	movs	r3, #12
    5192:	18fb      	adds	r3, r7, r3
    5194:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    5196:	683b      	ldr	r3, [r7, #0]
    5198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    519a:	230c      	movs	r3, #12
    519c:	18fb      	adds	r3, r7, r3
    519e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    51a0:	683b      	ldr	r3, [r7, #0]
    51a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    51a4:	230c      	movs	r3, #12
    51a6:	18fb      	adds	r3, r7, r3
    51a8:	609a      	str	r2, [r3, #8]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
    51aa:	683b      	ldr	r3, [r7, #0]
    51ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	if(config->mode == SPI_MODE_SLAVE) {
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
	}

	uint32_t pad_pinmuxes[] = {
    51ae:	230c      	movs	r3, #12
    51b0:	18fb      	adds	r3, r7, r3
    51b2:	60da      	str	r2, [r3, #12]
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    51b4:	2347      	movs	r3, #71	; 0x47
    51b6:	18fb      	adds	r3, r7, r3
    51b8:	2200      	movs	r2, #0
    51ba:	701a      	strb	r2, [r3, #0]
    51bc:	e02c      	b.n	5218 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    51be:	2347      	movs	r3, #71	; 0x47
    51c0:	18fb      	adds	r3, r7, r3
    51c2:	781a      	ldrb	r2, [r3, #0]
    51c4:	230c      	movs	r3, #12
    51c6:	18fb      	adds	r3, r7, r3
    51c8:	0092      	lsls	r2, r2, #2
    51ca:	58d3      	ldr	r3, [r2, r3]
    51cc:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    51ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51d0:	2b00      	cmp	r3, #0
    51d2:	d109      	bne.n	51e8 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    51d4:	2347      	movs	r3, #71	; 0x47
    51d6:	18fb      	adds	r3, r7, r3
    51d8:	781a      	ldrb	r2, [r3, #0]
    51da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    51dc:	0011      	movs	r1, r2
    51de:	0018      	movs	r0, r3
    51e0:	4b5a      	ldr	r3, [pc, #360]	; (534c <_spi_set_config+0x1f8>)
    51e2:	4798      	blx	r3
    51e4:	0003      	movs	r3, r0
    51e6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    51e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51ea:	3301      	adds	r3, #1
    51ec:	d00d      	beq.n	520a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    51ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51f0:	b2da      	uxtb	r2, r3
    51f2:	231c      	movs	r3, #28
    51f4:	18fb      	adds	r3, r7, r3
    51f6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    51f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    51fa:	0c1b      	lsrs	r3, r3, #16
    51fc:	b2db      	uxtb	r3, r3
    51fe:	221c      	movs	r2, #28
    5200:	18ba      	adds	r2, r7, r2
    5202:	0011      	movs	r1, r2
    5204:	0018      	movs	r0, r3
    5206:	4b52      	ldr	r3, [pc, #328]	; (5350 <_spi_set_config+0x1fc>)
    5208:	4798      	blx	r3
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    520a:	2347      	movs	r3, #71	; 0x47
    520c:	18fb      	adds	r3, r7, r3
    520e:	781a      	ldrb	r2, [r3, #0]
    5210:	2347      	movs	r3, #71	; 0x47
    5212:	18fb      	adds	r3, r7, r3
    5214:	3201      	adds	r2, #1
    5216:	701a      	strb	r2, [r3, #0]
    5218:	2347      	movs	r3, #71	; 0x47
    521a:	18fb      	adds	r3, r7, r3
    521c:	781b      	ldrb	r3, [r3, #0]
    521e:	2b03      	cmp	r3, #3
    5220:	d9cd      	bls.n	51be <_spi_set_config+0x6a>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
		}
	}

	module->mode             = config->mode;
    5222:	683b      	ldr	r3, [r7, #0]
    5224:	781a      	ldrb	r2, [r3, #0]
    5226:	687b      	ldr	r3, [r7, #4]
    5228:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    522a:	683b      	ldr	r3, [r7, #0]
    522c:	7c1a      	ldrb	r2, [r3, #16]
    522e:	687b      	ldr	r3, [r7, #4]
    5230:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    5232:	683b      	ldr	r3, [r7, #0]
    5234:	7c9a      	ldrb	r2, [r3, #18]
    5236:	687b      	ldr	r3, [r7, #4]
    5238:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    523a:	683b      	ldr	r3, [r7, #0]
    523c:	7d1a      	ldrb	r2, [r3, #20]
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    5242:	230a      	movs	r3, #10
    5244:	18fb      	adds	r3, r7, r3
    5246:	2200      	movs	r2, #0
    5248:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    524a:	2300      	movs	r3, #0
    524c:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    524e:	2300      	movs	r3, #0
    5250:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    5252:	683b      	ldr	r3, [r7, #0]
    5254:	781b      	ldrb	r3, [r3, #0]
    5256:	2b01      	cmp	r3, #1
    5258:	d129      	bne.n	52ae <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    525a:	687b      	ldr	r3, [r7, #4]
    525c:	681b      	ldr	r3, [r3, #0]
    525e:	0018      	movs	r0, r3
    5260:	4b3c      	ldr	r3, [pc, #240]	; (5354 <_spi_set_config+0x200>)
    5262:	4798      	blx	r3
    5264:	0003      	movs	r3, r0
    5266:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    526a:	3314      	adds	r3, #20
    526c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5270:	b2db      	uxtb	r3, r3
    5272:	0018      	movs	r0, r3
    5274:	4b38      	ldr	r3, [pc, #224]	; (5358 <_spi_set_config+0x204>)
    5276:	4798      	blx	r3
    5278:	0003      	movs	r3, r0
    527a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    527c:	683b      	ldr	r3, [r7, #0]
    527e:	699b      	ldr	r3, [r3, #24]
    5280:	2223      	movs	r2, #35	; 0x23
    5282:	18bc      	adds	r4, r7, r2
    5284:	220a      	movs	r2, #10
    5286:	18ba      	adds	r2, r7, r2
    5288:	6a79      	ldr	r1, [r7, #36]	; 0x24
    528a:	0018      	movs	r0, r3
    528c:	4b33      	ldr	r3, [pc, #204]	; (535c <_spi_set_config+0x208>)
    528e:	4798      	blx	r3
    5290:	0003      	movs	r3, r0
    5292:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    5294:	2323      	movs	r3, #35	; 0x23
    5296:	18fb      	adds	r3, r7, r3
    5298:	781b      	ldrb	r3, [r3, #0]
    529a:	2b00      	cmp	r3, #0
    529c:	d001      	beq.n	52a2 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    529e:	2317      	movs	r3, #23
    52a0:	e04e      	b.n	5340 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    52a2:	230a      	movs	r3, #10
    52a4:	18fb      	adds	r3, r7, r3
    52a6:	881b      	ldrh	r3, [r3, #0]
    52a8:	b2da      	uxtb	r2, r3
    52aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    52ac:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    52ae:	683b      	ldr	r3, [r7, #0]
    52b0:	685b      	ldr	r3, [r3, #4]
    52b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    52b4:	4313      	orrs	r3, r2
    52b6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    52b8:	683b      	ldr	r3, [r7, #0]
    52ba:	689b      	ldr	r3, [r3, #8]
    52bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    52be:	4313      	orrs	r3, r2
    52c0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    52c2:	683b      	ldr	r3, [r7, #0]
    52c4:	68db      	ldr	r3, [r3, #12]
    52c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    52c8:	4313      	orrs	r3, r2
    52ca:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    52cc:	683b      	ldr	r3, [r7, #0]
    52ce:	7c1b      	ldrb	r3, [r3, #16]
    52d0:	001a      	movs	r2, r3
    52d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    52d4:	4313      	orrs	r3, r2
    52d6:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    52d8:	683b      	ldr	r3, [r7, #0]
    52da:	7c5b      	ldrb	r3, [r3, #17]
    52dc:	2b00      	cmp	r3, #0
    52de:	d103      	bne.n	52e8 <_spi_set_config+0x194>
    52e0:	4b1f      	ldr	r3, [pc, #124]	; (5360 <_spi_set_config+0x20c>)
    52e2:	4798      	blx	r3
    52e4:	1e03      	subs	r3, r0, #0
    52e6:	d003      	beq.n	52f0 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    52e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    52ea:	2280      	movs	r2, #128	; 0x80
    52ec:	4313      	orrs	r3, r2
    52ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    52f0:	683b      	ldr	r3, [r7, #0]
    52f2:	7c9b      	ldrb	r3, [r3, #18]
    52f4:	2b00      	cmp	r3, #0
    52f6:	d004      	beq.n	5302 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    52f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    52fa:	2280      	movs	r2, #128	; 0x80
    52fc:	0292      	lsls	r2, r2, #10
    52fe:	4313      	orrs	r3, r2
    5300:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    5302:	683b      	ldr	r3, [r7, #0]
    5304:	7cdb      	ldrb	r3, [r3, #19]
    5306:	2b00      	cmp	r3, #0
    5308:	d004      	beq.n	5314 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    530c:	2280      	movs	r2, #128	; 0x80
    530e:	0092      	lsls	r2, r2, #2
    5310:	4313      	orrs	r3, r2
    5312:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    5314:	683b      	ldr	r3, [r7, #0]
    5316:	7d1b      	ldrb	r3, [r3, #20]
    5318:	2b00      	cmp	r3, #0
    531a:	d004      	beq.n	5326 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    531e:	2280      	movs	r2, #128	; 0x80
    5320:	0192      	lsls	r2, r2, #6
    5322:	4313      	orrs	r3, r2
    5324:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    5326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5328:	681a      	ldr	r2, [r3, #0]
    532a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    532c:	431a      	orrs	r2, r3
    532e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5330:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    5332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    5334:	685a      	ldr	r2, [r3, #4]
    5336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    5338:	431a      	orrs	r2, r3
    533a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    533c:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    533e:	2300      	movs	r3, #0
}
    5340:	0018      	movs	r0, r3
    5342:	46bd      	mov	sp, r7
    5344:	b013      	add	sp, #76	; 0x4c
    5346:	bd90      	pop	{r4, r7, pc}
    5348:	00004ea1 	.word	0x00004ea1
    534c:	00004b39 	.word	0x00004b39
    5350:	00006a11 	.word	0x00006a11
    5354:	00004cf5 	.word	0x00004cf5
    5358:	00006849 	.word	0x00006849
    535c:	00004a31 	.word	0x00004a31
    5360:	00005015 	.word	0x00005015

00005364 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    5364:	b590      	push	{r4, r7, lr}
    5366:	b08b      	sub	sp, #44	; 0x2c
    5368:	af00      	add	r7, sp, #0
    536a:	60f8      	str	r0, [r7, #12]
    536c:	60b9      	str	r1, [r7, #8]
    536e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    5370:	68fb      	ldr	r3, [r7, #12]
    5372:	68ba      	ldr	r2, [r7, #8]
    5374:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    5376:	68fb      	ldr	r3, [r7, #12]
    5378:	681b      	ldr	r3, [r3, #0]
    537a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    537c:	6a3b      	ldr	r3, [r7, #32]
    537e:	681b      	ldr	r3, [r3, #0]
    5380:	2202      	movs	r2, #2
    5382:	4013      	ands	r3, r2
    5384:	d001      	beq.n	538a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    5386:	231c      	movs	r3, #28
    5388:	e09c      	b.n	54c4 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    538a:	6a3b      	ldr	r3, [r7, #32]
    538c:	681b      	ldr	r3, [r3, #0]
    538e:	2201      	movs	r2, #1
    5390:	4013      	ands	r3, r2
    5392:	d001      	beq.n	5398 <spi_init+0x34>
		return STATUS_BUSY;
    5394:	2305      	movs	r3, #5
    5396:	e095      	b.n	54c4 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5398:	68fb      	ldr	r3, [r7, #12]
    539a:	681b      	ldr	r3, [r3, #0]
    539c:	0018      	movs	r0, r3
    539e:	4b4b      	ldr	r3, [pc, #300]	; (54cc <spi_init+0x168>)
    53a0:	4798      	blx	r3
    53a2:	0003      	movs	r3, r0
    53a4:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    53a6:	69fb      	ldr	r3, [r7, #28]
    53a8:	3302      	adds	r3, #2
    53aa:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    53ac:	69fb      	ldr	r3, [r7, #28]
    53ae:	3314      	adds	r3, #20
    53b0:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    53b2:	2201      	movs	r2, #1
    53b4:	69bb      	ldr	r3, [r7, #24]
    53b6:	409a      	lsls	r2, r3
    53b8:	0013      	movs	r3, r2
    53ba:	0019      	movs	r1, r3
    53bc:	2002      	movs	r0, #2
    53be:	4b44      	ldr	r3, [pc, #272]	; (54d0 <spi_init+0x16c>)
    53c0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    53c2:	2310      	movs	r3, #16
    53c4:	18fb      	adds	r3, r7, r3
    53c6:	0018      	movs	r0, r3
    53c8:	4b42      	ldr	r3, [pc, #264]	; (54d4 <spi_init+0x170>)
    53ca:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    53cc:	687b      	ldr	r3, [r7, #4]
    53ce:	2224      	movs	r2, #36	; 0x24
    53d0:	5c9a      	ldrb	r2, [r3, r2]
    53d2:	2310      	movs	r3, #16
    53d4:	18fb      	adds	r3, r7, r3
    53d6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    53d8:	697b      	ldr	r3, [r7, #20]
    53da:	b2db      	uxtb	r3, r3
    53dc:	2210      	movs	r2, #16
    53de:	18ba      	adds	r2, r7, r2
    53e0:	0011      	movs	r1, r2
    53e2:	0018      	movs	r0, r3
    53e4:	4b3c      	ldr	r3, [pc, #240]	; (54d8 <spi_init+0x174>)
    53e6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    53e8:	697b      	ldr	r3, [r7, #20]
    53ea:	b2db      	uxtb	r3, r3
    53ec:	0018      	movs	r0, r3
    53ee:	4b3b      	ldr	r3, [pc, #236]	; (54dc <spi_init+0x178>)
    53f0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    53f2:	687b      	ldr	r3, [r7, #4]
    53f4:	2224      	movs	r2, #36	; 0x24
    53f6:	5c9b      	ldrb	r3, [r3, r2]
    53f8:	2100      	movs	r1, #0
    53fa:	0018      	movs	r0, r3
    53fc:	4b38      	ldr	r3, [pc, #224]	; (54e0 <spi_init+0x17c>)
    53fe:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    5400:	687b      	ldr	r3, [r7, #4]
    5402:	781b      	ldrb	r3, [r3, #0]
    5404:	2b01      	cmp	r3, #1
    5406:	d105      	bne.n	5414 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    5408:	6a3b      	ldr	r3, [r7, #32]
    540a:	681b      	ldr	r3, [r3, #0]
    540c:	220c      	movs	r2, #12
    540e:	431a      	orrs	r2, r3
    5410:	6a3b      	ldr	r3, [r7, #32]
    5412:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    5414:	2327      	movs	r3, #39	; 0x27
    5416:	18fb      	adds	r3, r7, r3
    5418:	2200      	movs	r2, #0
    541a:	701a      	strb	r2, [r3, #0]
    541c:	e010      	b.n	5440 <spi_init+0xdc>
		module->callback[i]        = NULL;
    541e:	2327      	movs	r3, #39	; 0x27
    5420:	18fb      	adds	r3, r7, r3
    5422:	781b      	ldrb	r3, [r3, #0]
    5424:	68fa      	ldr	r2, [r7, #12]
    5426:	3302      	adds	r3, #2
    5428:	009b      	lsls	r3, r3, #2
    542a:	18d3      	adds	r3, r2, r3
    542c:	3304      	adds	r3, #4
    542e:	2200      	movs	r2, #0
    5430:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    5432:	2327      	movs	r3, #39	; 0x27
    5434:	18fb      	adds	r3, r7, r3
    5436:	781a      	ldrb	r2, [r3, #0]
    5438:	2327      	movs	r3, #39	; 0x27
    543a:	18fb      	adds	r3, r7, r3
    543c:	3201      	adds	r2, #1
    543e:	701a      	strb	r2, [r3, #0]
    5440:	2327      	movs	r3, #39	; 0x27
    5442:	18fb      	adds	r3, r7, r3
    5444:	781b      	ldrb	r3, [r3, #0]
    5446:	2b06      	cmp	r3, #6
    5448:	d9e9      	bls.n	541e <spi_init+0xba>
		module->callback[i]        = NULL;
	}
	module->tx_buffer_ptr              = NULL;
    544a:	68fb      	ldr	r3, [r7, #12]
    544c:	2200      	movs	r2, #0
    544e:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    5450:	68fb      	ldr	r3, [r7, #12]
    5452:	2200      	movs	r2, #0
    5454:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    5456:	68fb      	ldr	r3, [r7, #12]
    5458:	2200      	movs	r2, #0
    545a:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    545c:	68fb      	ldr	r3, [r7, #12]
    545e:	2200      	movs	r2, #0
    5460:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    5462:	68fb      	ldr	r3, [r7, #12]
    5464:	2236      	movs	r2, #54	; 0x36
    5466:	2100      	movs	r1, #0
    5468:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    546a:	68fb      	ldr	r3, [r7, #12]
    546c:	2237      	movs	r2, #55	; 0x37
    546e:	2100      	movs	r1, #0
    5470:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    5472:	68fb      	ldr	r3, [r7, #12]
    5474:	2238      	movs	r2, #56	; 0x38
    5476:	2100      	movs	r1, #0
    5478:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    547a:	68fb      	ldr	r3, [r7, #12]
    547c:	2203      	movs	r2, #3
    547e:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    5480:	68fb      	ldr	r3, [r7, #12]
    5482:	2200      	movs	r2, #0
    5484:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    5486:	68fb      	ldr	r3, [r7, #12]
    5488:	681b      	ldr	r3, [r3, #0]
    548a:	2213      	movs	r2, #19
    548c:	18bc      	adds	r4, r7, r2
    548e:	0018      	movs	r0, r3
    5490:	4b0e      	ldr	r3, [pc, #56]	; (54cc <spi_init+0x168>)
    5492:	4798      	blx	r3
    5494:	0003      	movs	r3, r0
    5496:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    5498:	4a12      	ldr	r2, [pc, #72]	; (54e4 <spi_init+0x180>)
    549a:	2313      	movs	r3, #19
    549c:	18fb      	adds	r3, r7, r3
    549e:	781b      	ldrb	r3, [r3, #0]
    54a0:	0011      	movs	r1, r2
    54a2:	0018      	movs	r0, r3
    54a4:	4b10      	ldr	r3, [pc, #64]	; (54e8 <spi_init+0x184>)
    54a6:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    54a8:	2313      	movs	r3, #19
    54aa:	18fb      	adds	r3, r7, r3
    54ac:	781a      	ldrb	r2, [r3, #0]
    54ae:	4b0f      	ldr	r3, [pc, #60]	; (54ec <spi_init+0x188>)
    54b0:	0092      	lsls	r2, r2, #2
    54b2:	68f9      	ldr	r1, [r7, #12]
    54b4:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    54b6:	687a      	ldr	r2, [r7, #4]
    54b8:	68fb      	ldr	r3, [r7, #12]
    54ba:	0011      	movs	r1, r2
    54bc:	0018      	movs	r0, r3
    54be:	4b0c      	ldr	r3, [pc, #48]	; (54f0 <spi_init+0x18c>)
    54c0:	4798      	blx	r3
    54c2:	0003      	movs	r3, r0
}
    54c4:	0018      	movs	r0, r3
    54c6:	46bd      	mov	sp, r7
    54c8:	b00b      	add	sp, #44	; 0x2c
    54ca:	bd90      	pop	{r4, r7, pc}
    54cc:	00004cf5 	.word	0x00004cf5
    54d0:	00004fb9 	.word	0x00004fb9
    54d4:	00004fa1 	.word	0x00004fa1
    54d8:	00006725 	.word	0x00006725
    54dc:	00006769 	.word	0x00006769
    54e0:	00004aad 	.word	0x00004aad
    54e4:	00005825 	.word	0x00005825
    54e8:	00004d59 	.word	0x00004d59
    54ec:	200045b4 	.word	0x200045b4
    54f0:	00005155 	.word	0x00005155

000054f4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    54f4:	b580      	push	{r7, lr}
    54f6:	b086      	sub	sp, #24
    54f8:	af00      	add	r7, sp, #0
    54fa:	60f8      	str	r0, [r7, #12]
    54fc:	60b9      	str	r1, [r7, #8]
    54fe:	1dfb      	adds	r3, r7, #7
    5500:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    5502:	68fb      	ldr	r3, [r7, #12]
    5504:	795b      	ldrb	r3, [r3, #5]
    5506:	2b01      	cmp	r3, #1
    5508:	d001      	beq.n	550e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    550a:	2315      	movs	r3, #21
    550c:	e05c      	b.n	55c8 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    550e:	68fb      	ldr	r3, [r7, #12]
    5510:	7a1b      	ldrb	r3, [r3, #8]
    5512:	2201      	movs	r2, #1
    5514:	4053      	eors	r3, r2
    5516:	b2db      	uxtb	r3, r3
    5518:	2b00      	cmp	r3, #0
    551a:	d054      	beq.n	55c6 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    551c:	1dfb      	adds	r3, r7, #7
    551e:	781b      	ldrb	r3, [r3, #0]
    5520:	2b00      	cmp	r3, #0
    5522:	d04a      	beq.n	55ba <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    5524:	68bb      	ldr	r3, [r7, #8]
    5526:	785b      	ldrb	r3, [r3, #1]
    5528:	2b00      	cmp	r3, #0
    552a:	d03f      	beq.n	55ac <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    552c:	68fb      	ldr	r3, [r7, #12]
    552e:	0018      	movs	r0, r3
    5530:	4b27      	ldr	r3, [pc, #156]	; (55d0 <spi_select_slave+0xdc>)
    5532:	4798      	blx	r3
    5534:	0003      	movs	r3, r0
    5536:	001a      	movs	r2, r3
    5538:	2301      	movs	r3, #1
    553a:	4053      	eors	r3, r2
    553c:	b2db      	uxtb	r3, r3
    553e:	2b00      	cmp	r3, #0
    5540:	d007      	beq.n	5552 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    5542:	68bb      	ldr	r3, [r7, #8]
    5544:	781b      	ldrb	r3, [r3, #0]
    5546:	2101      	movs	r1, #1
    5548:	0018      	movs	r0, r3
    554a:	4b22      	ldr	r3, [pc, #136]	; (55d4 <spi_select_slave+0xe0>)
    554c:	4798      	blx	r3
					return STATUS_BUSY;
    554e:	2305      	movs	r3, #5
    5550:	e03a      	b.n	55c8 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    5552:	68bb      	ldr	r3, [r7, #8]
    5554:	781b      	ldrb	r3, [r3, #0]
    5556:	2100      	movs	r1, #0
    5558:	0018      	movs	r0, r3
    555a:	4b1e      	ldr	r3, [pc, #120]	; (55d4 <spi_select_slave+0xe0>)
    555c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    555e:	68bb      	ldr	r3, [r7, #8]
    5560:	789b      	ldrb	r3, [r3, #2]
    5562:	b29a      	uxth	r2, r3
    5564:	68fb      	ldr	r3, [r7, #12]
    5566:	0011      	movs	r1, r2
    5568:	0018      	movs	r0, r3
    556a:	4b1b      	ldr	r3, [pc, #108]	; (55d8 <spi_select_slave+0xe4>)
    556c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    556e:	68fb      	ldr	r3, [r7, #12]
    5570:	79db      	ldrb	r3, [r3, #7]
    5572:	2201      	movs	r2, #1
    5574:	4053      	eors	r3, r2
    5576:	b2db      	uxtb	r3, r3
    5578:	2b00      	cmp	r3, #0
    557a:	d024      	beq.n	55c6 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    557c:	46c0      	nop			; (mov r8, r8)
    557e:	68fb      	ldr	r3, [r7, #12]
    5580:	0018      	movs	r0, r3
    5582:	4b16      	ldr	r3, [pc, #88]	; (55dc <spi_select_slave+0xe8>)
    5584:	4798      	blx	r3
    5586:	0003      	movs	r3, r0
    5588:	001a      	movs	r2, r3
    558a:	2301      	movs	r3, #1
    558c:	4053      	eors	r3, r2
    558e:	b2db      	uxtb	r3, r3
    5590:	2b00      	cmp	r3, #0
    5592:	d1f4      	bne.n	557e <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    5594:	2316      	movs	r3, #22
    5596:	18fb      	adds	r3, r7, r3
    5598:	2200      	movs	r2, #0
    559a:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    559c:	2316      	movs	r3, #22
    559e:	18fa      	adds	r2, r7, r3
    55a0:	68fb      	ldr	r3, [r7, #12]
    55a2:	0011      	movs	r1, r2
    55a4:	0018      	movs	r0, r3
    55a6:	4b0e      	ldr	r3, [pc, #56]	; (55e0 <spi_select_slave+0xec>)
    55a8:	4798      	blx	r3
    55aa:	e00c      	b.n	55c6 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    55ac:	68bb      	ldr	r3, [r7, #8]
    55ae:	781b      	ldrb	r3, [r3, #0]
    55b0:	2100      	movs	r1, #0
    55b2:	0018      	movs	r0, r3
    55b4:	4b07      	ldr	r3, [pc, #28]	; (55d4 <spi_select_slave+0xe0>)
    55b6:	4798      	blx	r3
    55b8:	e005      	b.n	55c6 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    55ba:	68bb      	ldr	r3, [r7, #8]
    55bc:	781b      	ldrb	r3, [r3, #0]
    55be:	2101      	movs	r1, #1
    55c0:	0018      	movs	r0, r3
    55c2:	4b04      	ldr	r3, [pc, #16]	; (55d4 <spi_select_slave+0xe0>)
    55c4:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    55c6:	2300      	movs	r3, #0
}
    55c8:	0018      	movs	r0, r3
    55ca:	46bd      	mov	sp, r7
    55cc:	b006      	add	sp, #24
    55ce:	bd80      	pop	{r7, pc}
    55d0:	00005035 	.word	0x00005035
    55d4:	00004f4d 	.word	0x00004f4d
    55d8:	00005085 	.word	0x00005085
    55dc:	0000505d 	.word	0x0000505d
    55e0:	000050cd 	.word	0x000050cd

000055e4 <_spi_write_buffer>:
 */
static void _spi_write_buffer(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    55e4:	b580      	push	{r7, lr}
    55e6:	b086      	sub	sp, #24
    55e8:	af00      	add	r7, sp, #0
    55ea:	60f8      	str	r0, [r7, #12]
    55ec:	60b9      	str	r1, [r7, #8]
    55ee:	1dbb      	adds	r3, r7, #6
    55f0:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    55f2:	68fb      	ldr	r3, [r7, #12]
    55f4:	1dba      	adds	r2, r7, #6
    55f6:	8812      	ldrh	r2, [r2, #0]
    55f8:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_dummy_buffer_length = length;
    55fa:	68fb      	ldr	r3, [r7, #12]
    55fc:	1dba      	adds	r2, r7, #6
    55fe:	8812      	ldrh	r2, [r2, #0]
    5600:	865a      	strh	r2, [r3, #50]	; 0x32
	module->tx_buffer_ptr = tx_data;
    5602:	68fb      	ldr	r3, [r7, #12]
    5604:	68ba      	ldr	r2, [r7, #8]
    5606:	62da      	str	r2, [r3, #44]	; 0x2c
	module->status = STATUS_BUSY;
    5608:	68fb      	ldr	r3, [r7, #12]
    560a:	2238      	movs	r2, #56	; 0x38
    560c:	2105      	movs	r1, #5
    560e:	5499      	strb	r1, [r3, r2]

	module->dir = SPI_DIRECTION_WRITE;
    5610:	68fb      	ldr	r3, [r7, #12]
    5612:	2201      	movs	r2, #1
    5614:	725a      	strb	r2, [r3, #9]

	/* Get a pointer to the hardware module instance */
	SercomSpi *const hw = &(module->hw->SPI);
    5616:	68fb      	ldr	r3, [r7, #12]
    5618:	681b      	ldr	r3, [r3, #0]
    561a:	617b      	str	r3, [r7, #20]
		/* Enable transmit complete interrupt for slave */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
	}
#  endif

	if (module->receiver_enabled) {
    561c:	68fb      	ldr	r3, [r7, #12]
    561e:	79db      	ldrb	r3, [r3, #7]
    5620:	2b00      	cmp	r3, #0
    5622:	d003      	beq.n	562c <_spi_write_buffer+0x48>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
    5624:	697b      	ldr	r3, [r7, #20]
    5626:	2205      	movs	r2, #5
    5628:	759a      	strb	r2, [r3, #22]
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
	}
}
    562a:	e002      	b.n	5632 <_spi_write_buffer+0x4e>
		/* Enable the Data Register Empty and RX Complete interrupt */
		hw->INTENSET.reg = (SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY |
				SPI_INTERRUPT_FLAG_RX_COMPLETE);
	} else {
		/* Enable the Data Register Empty interrupt */
		hw->INTENSET.reg = SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    562c:	697b      	ldr	r3, [r7, #20]
    562e:	2201      	movs	r2, #1
    5630:	759a      	strb	r2, [r3, #22]
	}
}
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	46bd      	mov	sp, r7
    5636:	b006      	add	sp, #24
    5638:	bd80      	pop	{r7, pc}
    563a:	46c0      	nop			; (mov r8, r8)

0000563c <spi_register_callback>:
 */
void spi_register_callback(
		struct spi_module *const module,
		spi_callback_t callback_func,
		enum spi_callback callback_type)
{
    563c:	b580      	push	{r7, lr}
    563e:	b084      	sub	sp, #16
    5640:	af00      	add	r7, sp, #0
    5642:	60f8      	str	r0, [r7, #12]
    5644:	60b9      	str	r1, [r7, #8]
    5646:	1dfb      	adds	r3, r7, #7
    5648:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    564a:	1dfb      	adds	r3, r7, #7
    564c:	781b      	ldrb	r3, [r3, #0]
    564e:	68fa      	ldr	r2, [r7, #12]
    5650:	3302      	adds	r3, #2
    5652:	009b      	lsls	r3, r3, #2
    5654:	18d3      	adds	r3, r2, r3
    5656:	3304      	adds	r3, #4
    5658:	68ba      	ldr	r2, [r7, #8]
    565a:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback |= (1 << callback_type);
    565c:	68fb      	ldr	r3, [r7, #12]
    565e:	2236      	movs	r2, #54	; 0x36
    5660:	5c9b      	ldrb	r3, [r3, r2]
    5662:	b25a      	sxtb	r2, r3
    5664:	1dfb      	adds	r3, r7, #7
    5666:	781b      	ldrb	r3, [r3, #0]
    5668:	2101      	movs	r1, #1
    566a:	4099      	lsls	r1, r3
    566c:	000b      	movs	r3, r1
    566e:	b25b      	sxtb	r3, r3
    5670:	4313      	orrs	r3, r2
    5672:	b25b      	sxtb	r3, r3
    5674:	b2d9      	uxtb	r1, r3
    5676:	68fb      	ldr	r3, [r7, #12]
    5678:	2236      	movs	r2, #54	; 0x36
    567a:	5499      	strb	r1, [r3, r2]
}
    567c:	46c0      	nop			; (mov r8, r8)
    567e:	46bd      	mov	sp, r7
    5680:	b004      	add	sp, #16
    5682:	bd80      	pop	{r7, pc}

00005684 <spi_write_buffer_job>:
 */
enum status_code spi_write_buffer_job(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    5684:	b580      	push	{r7, lr}
    5686:	b084      	sub	sp, #16
    5688:	af00      	add	r7, sp, #0
    568a:	60f8      	str	r0, [r7, #12]
    568c:	60b9      	str	r1, [r7, #8]
    568e:	1dbb      	adds	r3, r7, #6
    5690:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5692:	1dbb      	adds	r3, r7, #6
    5694:	881b      	ldrh	r3, [r3, #0]
    5696:	2b00      	cmp	r3, #0
    5698:	d101      	bne.n	569e <spi_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    569a:	2317      	movs	r3, #23
    569c:	e00f      	b.n	56be <spi_write_buffer_job+0x3a>
	}

	/* Check if the SPI is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
    569e:	68fb      	ldr	r3, [r7, #12]
    56a0:	2238      	movs	r2, #56	; 0x38
    56a2:	5c9b      	ldrb	r3, [r3, r2]
    56a4:	b2db      	uxtb	r3, r3
    56a6:	2b05      	cmp	r3, #5
    56a8:	d101      	bne.n	56ae <spi_write_buffer_job+0x2a>
		return STATUS_BUSY;
    56aa:	2305      	movs	r3, #5
    56ac:	e007      	b.n	56be <spi_write_buffer_job+0x3a>
	}

	/* Issue internal write */
	_spi_write_buffer(module, tx_data, length);
    56ae:	1dbb      	adds	r3, r7, #6
    56b0:	881a      	ldrh	r2, [r3, #0]
    56b2:	68b9      	ldr	r1, [r7, #8]
    56b4:	68fb      	ldr	r3, [r7, #12]
    56b6:	0018      	movs	r0, r3
    56b8:	4b03      	ldr	r3, [pc, #12]	; (56c8 <spi_write_buffer_job+0x44>)
    56ba:	4798      	blx	r3

	return STATUS_OK;
    56bc:	2300      	movs	r3, #0
}
    56be:	0018      	movs	r0, r3
    56c0:	46bd      	mov	sp, r7
    56c2:	b004      	add	sp, #16
    56c4:	bd80      	pop	{r7, pc}
    56c6:	46c0      	nop			; (mov r8, r8)
    56c8:	000055e5 	.word	0x000055e5

000056cc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    56cc:	b580      	push	{r7, lr}
    56ce:	b084      	sub	sp, #16
    56d0:	af00      	add	r7, sp, #0
    56d2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    56d4:	687b      	ldr	r3, [r7, #4]
    56d6:	681b      	ldr	r3, [r3, #0]
    56d8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    56da:	687b      	ldr	r3, [r7, #4]
    56dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56de:	781b      	ldrb	r3, [r3, #0]
    56e0:	b2da      	uxtb	r2, r3
    56e2:	230e      	movs	r3, #14
    56e4:	18fb      	adds	r3, r7, r3
    56e6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56ec:	1c5a      	adds	r2, r3, #1
    56ee:	687b      	ldr	r3, [r7, #4]
    56f0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    56f2:	687b      	ldr	r3, [r7, #4]
    56f4:	799b      	ldrb	r3, [r3, #6]
    56f6:	2b01      	cmp	r3, #1
    56f8:	d113      	bne.n	5722 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56fe:	781b      	ldrb	r3, [r3, #0]
    5700:	b2db      	uxtb	r3, r3
    5702:	021b      	lsls	r3, r3, #8
    5704:	b21a      	sxth	r2, r3
    5706:	230e      	movs	r3, #14
    5708:	18fb      	adds	r3, r7, r3
    570a:	2100      	movs	r1, #0
    570c:	5e5b      	ldrsh	r3, [r3, r1]
    570e:	4313      	orrs	r3, r2
    5710:	b21a      	sxth	r2, r3
    5712:	230e      	movs	r3, #14
    5714:	18fb      	adds	r3, r7, r3
    5716:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    5718:	687b      	ldr	r3, [r7, #4]
    571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    571c:	1c5a      	adds	r2, r3, #1
    571e:	687b      	ldr	r3, [r7, #4]
    5720:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    5722:	230e      	movs	r3, #14
    5724:	18fb      	adds	r3, r7, r3
    5726:	881b      	ldrh	r3, [r3, #0]
    5728:	05db      	lsls	r3, r3, #23
    572a:	0dda      	lsrs	r2, r3, #23
    572c:	68bb      	ldr	r3, [r7, #8]
    572e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    5730:	687b      	ldr	r3, [r7, #4]
    5732:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5734:	b29b      	uxth	r3, r3
    5736:	3b01      	subs	r3, #1
    5738:	b29a      	uxth	r2, r3
    573a:	687b      	ldr	r3, [r7, #4]
    573c:	869a      	strh	r2, [r3, #52]	; 0x34
}
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	46bd      	mov	sp, r7
    5742:	b004      	add	sp, #16
    5744:	bd80      	pop	{r7, pc}
    5746:	46c0      	nop			; (mov r8, r8)

00005748 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    5748:	b580      	push	{r7, lr}
    574a:	b084      	sub	sp, #16
    574c:	af00      	add	r7, sp, #0
    574e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5750:	687b      	ldr	r3, [r7, #4]
    5752:	681b      	ldr	r3, [r3, #0]
    5754:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    5756:	4b08      	ldr	r3, [pc, #32]	; (5778 <_spi_write_dummy+0x30>)
    5758:	881b      	ldrh	r3, [r3, #0]
    575a:	001a      	movs	r2, r3
    575c:	68fb      	ldr	r3, [r7, #12]
    575e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    5764:	b29b      	uxth	r3, r3
    5766:	3b01      	subs	r3, #1
    5768:	b29a      	uxth	r2, r3
    576a:	687b      	ldr	r3, [r7, #4]
    576c:	865a      	strh	r2, [r3, #50]	; 0x32
}
    576e:	46c0      	nop			; (mov r8, r8)
    5770:	46bd      	mov	sp, r7
    5772:	b004      	add	sp, #16
    5774:	bd80      	pop	{r7, pc}
    5776:	46c0      	nop			; (mov r8, r8)
    5778:	200045cc 	.word	0x200045cc

0000577c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    577c:	b580      	push	{r7, lr}
    577e:	b084      	sub	sp, #16
    5780:	af00      	add	r7, sp, #0
    5782:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    5784:	687b      	ldr	r3, [r7, #4]
    5786:	681b      	ldr	r3, [r3, #0]
    5788:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    578a:	230a      	movs	r3, #10
    578c:	18fb      	adds	r3, r7, r3
    578e:	2200      	movs	r2, #0
    5790:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    5792:	68fb      	ldr	r3, [r7, #12]
    5794:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5796:	230a      	movs	r3, #10
    5798:	18fb      	adds	r3, r7, r3
    579a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    579c:	687b      	ldr	r3, [r7, #4]
    579e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    57a0:	b29b      	uxth	r3, r3
    57a2:	3b01      	subs	r3, #1
    57a4:	b29a      	uxth	r2, r3
    57a6:	687b      	ldr	r3, [r7, #4]
    57a8:	865a      	strh	r2, [r3, #50]	; 0x32
}
    57aa:	46c0      	nop			; (mov r8, r8)
    57ac:	46bd      	mov	sp, r7
    57ae:	b004      	add	sp, #16
    57b0:	bd80      	pop	{r7, pc}
    57b2:	46c0      	nop			; (mov r8, r8)

000057b4 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    57b4:	b580      	push	{r7, lr}
    57b6:	b084      	sub	sp, #16
    57b8:	af00      	add	r7, sp, #0
    57ba:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    57bc:	687b      	ldr	r3, [r7, #4]
    57be:	681b      	ldr	r3, [r3, #0]
    57c0:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    57c2:	68fb      	ldr	r3, [r7, #12]
    57c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    57c6:	b29a      	uxth	r2, r3
    57c8:	230a      	movs	r3, #10
    57ca:	18fb      	adds	r3, r7, r3
    57cc:	05d2      	lsls	r2, r2, #23
    57ce:	0dd2      	lsrs	r2, r2, #23
    57d0:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    57d2:	687b      	ldr	r3, [r7, #4]
    57d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    57d6:	220a      	movs	r2, #10
    57d8:	18ba      	adds	r2, r7, r2
    57da:	8812      	ldrh	r2, [r2, #0]
    57dc:	b2d2      	uxtb	r2, r2
    57de:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    57e0:	687b      	ldr	r3, [r7, #4]
    57e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    57e4:	1c5a      	adds	r2, r3, #1
    57e6:	687b      	ldr	r3, [r7, #4]
    57e8:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    57ea:	687b      	ldr	r3, [r7, #4]
    57ec:	799b      	ldrb	r3, [r3, #6]
    57ee:	2b01      	cmp	r3, #1
    57f0:	d10d      	bne.n	580e <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    57f2:	687b      	ldr	r3, [r7, #4]
    57f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    57f6:	220a      	movs	r2, #10
    57f8:	18ba      	adds	r2, r7, r2
    57fa:	8812      	ldrh	r2, [r2, #0]
    57fc:	0a12      	lsrs	r2, r2, #8
    57fe:	b292      	uxth	r2, r2
    5800:	b2d2      	uxtb	r2, r2
    5802:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    5804:	687b      	ldr	r3, [r7, #4]
    5806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5808:	1c5a      	adds	r2, r3, #1
    580a:	687b      	ldr	r3, [r7, #4]
    580c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    580e:	687b      	ldr	r3, [r7, #4]
    5810:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    5812:	b29b      	uxth	r3, r3
    5814:	3b01      	subs	r3, #1
    5816:	b29a      	uxth	r2, r3
    5818:	687b      	ldr	r3, [r7, #4]
    581a:	861a      	strh	r2, [r3, #48]	; 0x30
}
    581c:	46c0      	nop			; (mov r8, r8)
    581e:	46bd      	mov	sp, r7
    5820:	b004      	add	sp, #16
    5822:	bd80      	pop	{r7, pc}

00005824 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    5824:	b580      	push	{r7, lr}
    5826:	b086      	sub	sp, #24
    5828:	af00      	add	r7, sp, #0
    582a:	0002      	movs	r2, r0
    582c:	1dfb      	adds	r3, r7, #7
    582e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    5830:	1dfb      	adds	r3, r7, #7
    5832:	781a      	ldrb	r2, [r3, #0]
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
	/* Get device instance from the look-up table */
	struct spi_module *module
    5834:	4b96      	ldr	r3, [pc, #600]	; (5a90 <_spi_interrupt_handler+0x26c>)
    5836:	0092      	lsls	r2, r2, #2
    5838:	58d3      	ldr	r3, [r2, r3]
    583a:	617b      	str	r3, [r7, #20]
		= (struct spi_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    583c:	697b      	ldr	r3, [r7, #20]
    583e:	681b      	ldr	r3, [r3, #0]
    5840:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    5842:	697b      	ldr	r3, [r7, #20]
    5844:	2237      	movs	r2, #55	; 0x37
    5846:	5c9a      	ldrb	r2, [r3, r2]
    5848:	697b      	ldr	r3, [r7, #20]
    584a:	2136      	movs	r1, #54	; 0x36
    584c:	5c59      	ldrb	r1, [r3, r1]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
    584e:	230f      	movs	r3, #15
    5850:	18fb      	adds	r3, r7, r3
    5852:	400a      	ands	r2, r1
    5854:	701a      	strb	r2, [r3, #0]
			module->enabled_callback & module->registered_callback;

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    5856:	693b      	ldr	r3, [r7, #16]
    5858:	7e1b      	ldrb	r3, [r3, #24]
    585a:	b2da      	uxtb	r2, r3
    585c:	230c      	movs	r3, #12
    585e:	18fb      	adds	r3, r7, r3
    5860:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    5862:	693b      	ldr	r3, [r7, #16]
    5864:	7d9b      	ldrb	r3, [r3, #22]
    5866:	b2db      	uxtb	r3, r3
    5868:	b29a      	uxth	r2, r3
    586a:	230c      	movs	r3, #12
    586c:	18fb      	adds	r3, r7, r3
    586e:	210c      	movs	r1, #12
    5870:	1879      	adds	r1, r7, r1
    5872:	8809      	ldrh	r1, [r1, #0]
    5874:	400a      	ands	r2, r1
    5876:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    5878:	230c      	movs	r3, #12
    587a:	18fb      	adds	r3, r7, r3
    587c:	881b      	ldrh	r3, [r3, #0]
    587e:	2201      	movs	r2, #1
    5880:	4013      	ands	r3, r2
    5882:	d038      	beq.n	58f6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5884:	697b      	ldr	r3, [r7, #20]
    5886:	795b      	ldrb	r3, [r3, #5]
    5888:	2b01      	cmp	r3, #1
    588a:	d110      	bne.n	58ae <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    588c:	697b      	ldr	r3, [r7, #20]
    588e:	7a5b      	ldrb	r3, [r3, #9]
    5890:	b2db      	uxtb	r3, r3
	interrupt_status &= spi_hw->INTENSET.reg;

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5892:	2b00      	cmp	r3, #0
    5894:	d10b      	bne.n	58ae <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    5896:	697b      	ldr	r3, [r7, #20]
    5898:	0018      	movs	r0, r3
    589a:	4b7e      	ldr	r3, [pc, #504]	; (5a94 <_spi_interrupt_handler+0x270>)
    589c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    589e:	697b      	ldr	r3, [r7, #20]
    58a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    58a2:	b29b      	uxth	r3, r3
    58a4:	2b00      	cmp	r3, #0
    58a6:	d102      	bne.n	58ae <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    58a8:	693b      	ldr	r3, [r7, #16]
    58aa:	2201      	movs	r2, #1
    58ac:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    58ae:	697b      	ldr	r3, [r7, #20]
    58b0:	795b      	ldrb	r3, [r3, #5]
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
			}
		}
#  endif

		if (0
    58b2:	2b01      	cmp	r3, #1
    58b4:	d11f      	bne.n	58f6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    58b6:	697b      	ldr	r3, [r7, #20]
    58b8:	7a5b      	ldrb	r3, [r3, #9]
    58ba:	b2db      	uxtb	r3, r3
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    58bc:	2b00      	cmp	r3, #0
    58be:	d01a      	beq.n	58f6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    58c0:	697b      	ldr	r3, [r7, #20]
    58c2:	0018      	movs	r0, r3
    58c4:	4b74      	ldr	r3, [pc, #464]	; (5a98 <_spi_interrupt_handler+0x274>)
    58c6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    58c8:	697b      	ldr	r3, [r7, #20]
    58ca:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    58cc:	b29b      	uxth	r3, r3
    58ce:	2b00      	cmp	r3, #0
    58d0:	d111      	bne.n	58f6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    58d2:	693b      	ldr	r3, [r7, #16]
    58d4:	2201      	movs	r2, #1
    58d6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    58d8:	697b      	ldr	r3, [r7, #20]
    58da:	7a5b      	ldrb	r3, [r3, #9]
    58dc:	b2db      	uxtb	r3, r3
    58de:	2b01      	cmp	r3, #1
    58e0:	d109      	bne.n	58f6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    58e2:	697b      	ldr	r3, [r7, #20]
    58e4:	79db      	ldrb	r3, [r3, #7]
    58e6:	2201      	movs	r2, #1
    58e8:	4053      	eors	r3, r2
    58ea:	b2db      	uxtb	r3, r3
			if (module->remaining_tx_buffer_length == 0) {
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;

				if (module->dir == SPI_DIRECTION_WRITE &&
    58ec:	2b00      	cmp	r3, #0
    58ee:	d002      	beq.n	58f6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    58f0:	693b      	ldr	r3, [r7, #16]
    58f2:	2202      	movs	r2, #2
    58f4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    58f6:	230c      	movs	r3, #12
    58f8:	18fb      	adds	r3, r7, r3
    58fa:	881b      	ldrh	r3, [r3, #0]
    58fc:	2204      	movs	r2, #4
    58fe:	4013      	ands	r3, r2
    5900:	d100      	bne.n	5904 <_spi_interrupt_handler+0xe0>
    5902:	e07e      	b.n	5a02 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5904:	693b      	ldr	r3, [r7, #16]
    5906:	8b5b      	ldrh	r3, [r3, #26]
    5908:	b29b      	uxth	r3, r3
    590a:	001a      	movs	r2, r3
    590c:	2304      	movs	r3, #4
    590e:	4013      	ands	r3, r2
    5910:	d022      	beq.n	5958 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    5912:	697b      	ldr	r3, [r7, #20]
    5914:	7a5b      	ldrb	r3, [r3, #9]
    5916:	b2db      	uxtb	r3, r3
    5918:	2b01      	cmp	r3, #1
    591a:	d014      	beq.n	5946 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    591c:	697b      	ldr	r3, [r7, #20]
    591e:	2238      	movs	r2, #56	; 0x38
    5920:	211e      	movs	r1, #30
    5922:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    5924:	697b      	ldr	r3, [r7, #20]
    5926:	2203      	movs	r2, #3
    5928:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    592a:	693b      	ldr	r3, [r7, #16]
    592c:	2205      	movs	r2, #5
    592e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    5930:	230f      	movs	r3, #15
    5932:	18fb      	adds	r3, r7, r3
    5934:	781b      	ldrb	r3, [r3, #0]
    5936:	2208      	movs	r2, #8
    5938:	4013      	ands	r3, r2
    593a:	d004      	beq.n	5946 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    593c:	697b      	ldr	r3, [r7, #20]
    593e:	699b      	ldr	r3, [r3, #24]
    5940:	697a      	ldr	r2, [r7, #20]
    5942:	0010      	movs	r0, r2
    5944:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    5946:	693b      	ldr	r3, [r7, #16]
    5948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    594a:	230a      	movs	r3, #10
    594c:	18fb      	adds	r3, r7, r3
    594e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5950:	693b      	ldr	r3, [r7, #16]
    5952:	2204      	movs	r2, #4
    5954:	835a      	strh	r2, [r3, #26]
    5956:	e054      	b.n	5a02 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    5958:	697b      	ldr	r3, [r7, #20]
    595a:	7a5b      	ldrb	r3, [r3, #9]
    595c:	b2db      	uxtb	r3, r3
    595e:	2b01      	cmp	r3, #1
    5960:	d11e      	bne.n	59a0 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    5962:	697b      	ldr	r3, [r7, #20]
    5964:	0018      	movs	r0, r3
    5966:	4b4d      	ldr	r3, [pc, #308]	; (5a9c <_spi_interrupt_handler+0x278>)
    5968:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    596a:	697b      	ldr	r3, [r7, #20]
    596c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    596e:	b29b      	uxth	r3, r3
    5970:	2b00      	cmp	r3, #0
    5972:	d146      	bne.n	5a02 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    5974:	693b      	ldr	r3, [r7, #16]
    5976:	2204      	movs	r2, #4
    5978:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    597a:	697b      	ldr	r3, [r7, #20]
    597c:	2238      	movs	r2, #56	; 0x38
    597e:	2100      	movs	r1, #0
    5980:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    5982:	697b      	ldr	r3, [r7, #20]
    5984:	2203      	movs	r2, #3
    5986:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    5988:	230f      	movs	r3, #15
    598a:	18fb      	adds	r3, r7, r3
    598c:	781b      	ldrb	r3, [r3, #0]
    598e:	2201      	movs	r2, #1
    5990:	4013      	ands	r3, r2
    5992:	d036      	beq.n	5a02 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    5994:	697b      	ldr	r3, [r7, #20]
    5996:	68db      	ldr	r3, [r3, #12]
    5998:	697a      	ldr	r2, [r7, #20]
    599a:	0010      	movs	r0, r2
    599c:	4798      	blx	r3
    599e:	e030      	b.n	5a02 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    59a0:	697b      	ldr	r3, [r7, #20]
    59a2:	0018      	movs	r0, r3
    59a4:	4b3e      	ldr	r3, [pc, #248]	; (5aa0 <_spi_interrupt_handler+0x27c>)
    59a6:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    59a8:	697b      	ldr	r3, [r7, #20]
    59aa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    59ac:	b29b      	uxth	r3, r3
    59ae:	2b00      	cmp	r3, #0
    59b0:	d127      	bne.n	5a02 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    59b2:	697b      	ldr	r3, [r7, #20]
    59b4:	2238      	movs	r2, #56	; 0x38
    59b6:	2100      	movs	r1, #0
    59b8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    59ba:	693b      	ldr	r3, [r7, #16]
    59bc:	2204      	movs	r2, #4
    59be:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    59c0:	697b      	ldr	r3, [r7, #20]
    59c2:	7a5b      	ldrb	r3, [r3, #9]
    59c4:	b2db      	uxtb	r3, r3
    59c6:	2b02      	cmp	r3, #2
    59c8:	d10b      	bne.n	59e2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    59ca:	230f      	movs	r3, #15
    59cc:	18fb      	adds	r3, r7, r3
    59ce:	781b      	ldrb	r3, [r3, #0]
    59d0:	2204      	movs	r2, #4
    59d2:	4013      	ands	r3, r2
    59d4:	d015      	beq.n	5a02 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    59d6:	697b      	ldr	r3, [r7, #20]
    59d8:	695b      	ldr	r3, [r3, #20]
    59da:	697a      	ldr	r2, [r7, #20]
    59dc:	0010      	movs	r0, r2
    59de:	4798      	blx	r3
    59e0:	e00f      	b.n	5a02 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    59e2:	697b      	ldr	r3, [r7, #20]
    59e4:	7a5b      	ldrb	r3, [r3, #9]
    59e6:	b2db      	uxtb	r3, r3
    59e8:	2b00      	cmp	r3, #0
    59ea:	d10a      	bne.n	5a02 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    59ec:	230f      	movs	r3, #15
    59ee:	18fb      	adds	r3, r7, r3
    59f0:	781b      	ldrb	r3, [r3, #0]
    59f2:	2202      	movs	r2, #2
    59f4:	4013      	ands	r3, r2
    59f6:	d004      	beq.n	5a02 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    59f8:	697b      	ldr	r3, [r7, #20]
    59fa:	691b      	ldr	r3, [r3, #16]
    59fc:	697a      	ldr	r2, [r7, #20]
    59fe:	0010      	movs	r0, r2
    5a00:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    5a02:	230c      	movs	r3, #12
    5a04:	18fb      	adds	r3, r7, r3
    5a06:	881b      	ldrh	r3, [r3, #0]
    5a08:	2202      	movs	r2, #2
    5a0a:	4013      	ands	r3, r2
    5a0c:	d024      	beq.n	5a58 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5a0e:	697b      	ldr	r3, [r7, #20]
    5a10:	795b      	ldrb	r3, [r3, #5]
    5a12:	2b01      	cmp	r3, #1
    5a14:	d120      	bne.n	5a58 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5a16:	697b      	ldr	r3, [r7, #20]
    5a18:	7a5b      	ldrb	r3, [r3, #9]
    5a1a:	b2db      	uxtb	r3, r3
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    5a1c:	2b01      	cmp	r3, #1
    5a1e:	d11b      	bne.n	5a58 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    5a20:	697b      	ldr	r3, [r7, #20]
    5a22:	79db      	ldrb	r3, [r3, #7]
    5a24:	2201      	movs	r2, #1
    5a26:	4053      	eors	r3, r2
    5a28:	b2db      	uxtb	r3, r3
    5a2a:	2b00      	cmp	r3, #0
    5a2c:	d014      	beq.n	5a58 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    5a2e:	693b      	ldr	r3, [r7, #16]
    5a30:	2202      	movs	r2, #2
    5a32:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    5a34:	697b      	ldr	r3, [r7, #20]
    5a36:	2203      	movs	r2, #3
    5a38:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    5a3a:	697b      	ldr	r3, [r7, #20]
    5a3c:	2238      	movs	r2, #56	; 0x38
    5a3e:	2100      	movs	r1, #0
    5a40:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    5a42:	230f      	movs	r3, #15
    5a44:	18fb      	adds	r3, r7, r3
    5a46:	781b      	ldrb	r3, [r3, #0]
    5a48:	2201      	movs	r2, #1
    5a4a:	4013      	ands	r3, r2
    5a4c:	d004      	beq.n	5a58 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    5a4e:	697b      	ldr	r3, [r7, #20]
    5a50:	68db      	ldr	r3, [r3, #12]
    5a52:	697a      	ldr	r2, [r7, #20]
    5a54:	0010      	movs	r0, r2
    5a56:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    5a58:	230c      	movs	r3, #12
    5a5a:	18fb      	adds	r3, r7, r3
    5a5c:	881b      	ldrh	r3, [r3, #0]
    5a5e:	2280      	movs	r2, #128	; 0x80
    5a60:	4013      	ands	r3, r2
    5a62:	d010      	beq.n	5a86 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5a64:	693b      	ldr	r3, [r7, #16]
    5a66:	2280      	movs	r2, #128	; 0x80
    5a68:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    5a6a:	693b      	ldr	r3, [r7, #16]
    5a6c:	2280      	movs	r2, #128	; 0x80
    5a6e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    5a70:	230f      	movs	r3, #15
    5a72:	18fb      	adds	r3, r7, r3
    5a74:	781b      	ldrb	r3, [r3, #0]
    5a76:	2240      	movs	r2, #64	; 0x40
    5a78:	4013      	ands	r3, r2
    5a7a:	d004      	beq.n	5a86 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    5a7c:	697b      	ldr	r3, [r7, #20]
    5a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5a80:	697a      	ldr	r2, [r7, #20]
    5a82:	0010      	movs	r0, r2
    5a84:	4798      	blx	r3
		}
	}
#  endif
}
    5a86:	46c0      	nop			; (mov r8, r8)
    5a88:	46bd      	mov	sp, r7
    5a8a:	b006      	add	sp, #24
    5a8c:	bd80      	pop	{r7, pc}
    5a8e:	46c0      	nop			; (mov r8, r8)
    5a90:	200045b4 	.word	0x200045b4
    5a94:	00005749 	.word	0x00005749
    5a98:	000056cd 	.word	0x000056cd
    5a9c:	0000577d 	.word	0x0000577d
    5aa0:	000057b5 	.word	0x000057b5

00005aa4 <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
    5aa4:	b580      	push	{r7, lr}
    5aa6:	b082      	sub	sp, #8
    5aa8:	af00      	add	r7, sp, #0
    5aaa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    5aac:	687b      	ldr	r3, [r7, #4]
    5aae:	2201      	movs	r2, #1
    5ab0:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5ab2:	687b      	ldr	r3, [r7, #4]
    5ab4:	2200      	movs	r2, #0
    5ab6:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	2206      	movs	r2, #6
    5abc:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	2200      	movs	r2, #0
    5ac2:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5ac4:	687b      	ldr	r3, [r7, #4]
    5ac6:	2200      	movs	r2, #0
    5ac8:	725a      	strb	r2, [r3, #9]
}
    5aca:	46c0      	nop			; (mov r8, r8)
    5acc:	46bd      	mov	sp, r7
    5ace:	b002      	add	sp, #8
    5ad0:	bd80      	pop	{r7, pc}
    5ad2:	46c0      	nop			; (mov r8, r8)

00005ad4 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    5ad4:	b580      	push	{r7, lr}
    5ad6:	b082      	sub	sp, #8
    5ad8:	af00      	add	r7, sp, #0
    5ada:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    5adc:	687b      	ldr	r3, [r7, #4]
    5ade:	2200      	movs	r2, #0
    5ae0:	701a      	strb	r2, [r3, #0]
}
    5ae2:	46c0      	nop			; (mov r8, r8)
    5ae4:	46bd      	mov	sp, r7
    5ae6:	b002      	add	sp, #8
    5ae8:	bd80      	pop	{r7, pc}
    5aea:	46c0      	nop			; (mov r8, r8)

00005aec <system_clock_source_xosc32k_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_xosc32k_get_config_defaults(
		struct system_clock_source_xosc32k_config *const config)
{
    5aec:	b580      	push	{r7, lr}
    5aee:	b082      	sub	sp, #8
    5af0:	af00      	add	r7, sp, #0
    5af2:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5af4:	687b      	ldr	r3, [r7, #4]
    5af6:	2200      	movs	r2, #0
    5af8:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5afa:	687b      	ldr	r3, [r7, #4]
    5afc:	2204      	movs	r2, #4
    5afe:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    5b00:	687b      	ldr	r3, [r7, #4]
    5b02:	2200      	movs	r2, #0
    5b04:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5b06:	687b      	ldr	r3, [r7, #4]
    5b08:	2280      	movs	r2, #128	; 0x80
    5b0a:	0212      	lsls	r2, r2, #8
    5b0c:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    5b0e:	687b      	ldr	r3, [r7, #4]
    5b10:	2200      	movs	r2, #0
    5b12:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5b14:	687b      	ldr	r3, [r7, #4]
    5b16:	2201      	movs	r2, #1
    5b18:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5b1a:	687b      	ldr	r3, [r7, #4]
    5b1c:	2200      	movs	r2, #0
    5b1e:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    5b20:	687b      	ldr	r3, [r7, #4]
    5b22:	2201      	movs	r2, #1
    5b24:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5b26:	687b      	ldr	r3, [r7, #4]
    5b28:	2200      	movs	r2, #0
    5b2a:	739a      	strb	r2, [r3, #14]
}
    5b2c:	46c0      	nop			; (mov r8, r8)
    5b2e:	46bd      	mov	sp, r7
    5b30:	b002      	add	sp, #8
    5b32:	bd80      	pop	{r7, pc}

00005b34 <system_clock_source_osc8m_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_osc8m_get_config_defaults(
		struct system_clock_source_osc8m_config *const config)
{
    5b34:	b580      	push	{r7, lr}
    5b36:	b082      	sub	sp, #8
    5b38:	af00      	add	r7, sp, #0
    5b3a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    5b3c:	687b      	ldr	r3, [r7, #4]
    5b3e:	2203      	movs	r2, #3
    5b40:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    5b42:	687b      	ldr	r3, [r7, #4]
    5b44:	2200      	movs	r2, #0
    5b46:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    5b48:	687b      	ldr	r3, [r7, #4]
    5b4a:	2201      	movs	r2, #1
    5b4c:	709a      	strb	r2, [r3, #2]
}
    5b4e:	46c0      	nop			; (mov r8, r8)
    5b50:	46bd      	mov	sp, r7
    5b52:	b002      	add	sp, #8
    5b54:	bd80      	pop	{r7, pc}
    5b56:	46c0      	nop			; (mov r8, r8)

00005b58 <system_clock_source_dfll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dfll_get_config_defaults(
		struct system_clock_source_dfll_config *const config)
{
    5b58:	b580      	push	{r7, lr}
    5b5a:	b082      	sub	sp, #8
    5b5c:	af00      	add	r7, sp, #0
    5b5e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    5b60:	687b      	ldr	r3, [r7, #4]
    5b62:	2200      	movs	r2, #0
    5b64:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    5b66:	687b      	ldr	r3, [r7, #4]
    5b68:	2200      	movs	r2, #0
    5b6a:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    5b6c:	687b      	ldr	r3, [r7, #4]
    5b6e:	2200      	movs	r2, #0
    5b70:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    5b72:	687b      	ldr	r3, [r7, #4]
    5b74:	2200      	movs	r2, #0
    5b76:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    5b78:	687b      	ldr	r3, [r7, #4]
    5b7a:	2200      	movs	r2, #0
    5b7c:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    5b7e:	687b      	ldr	r3, [r7, #4]
    5b80:	2201      	movs	r2, #1
    5b82:	705a      	strb	r2, [r3, #1]

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    5b84:	687b      	ldr	r3, [r7, #4]
    5b86:	2207      	movs	r2, #7
    5b88:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    5b8a:	687b      	ldr	r3, [r7, #4]
    5b8c:	223f      	movs	r2, #63	; 0x3f
    5b8e:	815a      	strh	r2, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
    5b90:	687b      	ldr	r3, [r7, #4]
    5b92:	2201      	movs	r2, #1
    5b94:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5b96:	687b      	ldr	r3, [r7, #4]
    5b98:	2201      	movs	r2, #1
    5b9a:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5b9c:	687b      	ldr	r3, [r7, #4]
    5b9e:	2206      	movs	r2, #6
    5ba0:	821a      	strh	r2, [r3, #16]
}
    5ba2:	46c0      	nop			; (mov r8, r8)
    5ba4:	46bd      	mov	sp, r7
    5ba6:	b002      	add	sp, #8
    5ba8:	bd80      	pop	{r7, pc}
    5baa:	46c0      	nop			; (mov r8, r8)

00005bac <system_cpu_clock_set_divider>:
 *
 * \param[in] divider  CPU clock divider to set
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
    5bac:	b580      	push	{r7, lr}
    5bae:	b082      	sub	sp, #8
    5bb0:	af00      	add	r7, sp, #0
    5bb2:	0002      	movs	r2, r0
    5bb4:	1dfb      	adds	r3, r7, #7
    5bb6:	701a      	strb	r2, [r3, #0]
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    5bb8:	4a03      	ldr	r2, [pc, #12]	; (5bc8 <system_cpu_clock_set_divider+0x1c>)
    5bba:	1dfb      	adds	r3, r7, #7
    5bbc:	781b      	ldrb	r3, [r3, #0]
    5bbe:	7213      	strb	r3, [r2, #8]
}
    5bc0:	46c0      	nop			; (mov r8, r8)
    5bc2:	46bd      	mov	sp, r7
    5bc4:	b002      	add	sp, #8
    5bc6:	bd80      	pop	{r7, pc}
    5bc8:	40000400 	.word	0x40000400

00005bcc <system_apb_clock_set_divider>:
 * \retval STATUS_OK               The APBx clock was set successfully
 */
static inline enum status_code system_apb_clock_set_divider(
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
    5bcc:	b580      	push	{r7, lr}
    5bce:	b082      	sub	sp, #8
    5bd0:	af00      	add	r7, sp, #0
    5bd2:	0002      	movs	r2, r0
    5bd4:	1dfb      	adds	r3, r7, #7
    5bd6:	701a      	strb	r2, [r3, #0]
    5bd8:	1dbb      	adds	r3, r7, #6
    5bda:	1c0a      	adds	r2, r1, #0
    5bdc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5bde:	1dfb      	adds	r3, r7, #7
    5be0:	781b      	ldrb	r3, [r3, #0]
    5be2:	2b01      	cmp	r3, #1
    5be4:	d008      	beq.n	5bf8 <system_apb_clock_set_divider+0x2c>
    5be6:	2b02      	cmp	r3, #2
    5be8:	d00b      	beq.n	5c02 <system_apb_clock_set_divider+0x36>
    5bea:	2b00      	cmp	r3, #0
    5bec:	d10e      	bne.n	5c0c <system_apb_clock_set_divider+0x40>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    5bee:	4a0b      	ldr	r2, [pc, #44]	; (5c1c <system_apb_clock_set_divider+0x50>)
    5bf0:	1dbb      	adds	r3, r7, #6
    5bf2:	781b      	ldrb	r3, [r3, #0]
    5bf4:	7253      	strb	r3, [r2, #9]
			break;
    5bf6:	e00b      	b.n	5c10 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    5bf8:	4a08      	ldr	r2, [pc, #32]	; (5c1c <system_apb_clock_set_divider+0x50>)
    5bfa:	1dbb      	adds	r3, r7, #6
    5bfc:	781b      	ldrb	r3, [r3, #0]
    5bfe:	7293      	strb	r3, [r2, #10]
			break;
    5c00:	e006      	b.n	5c10 <system_apb_clock_set_divider+0x44>
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
    5c02:	4a06      	ldr	r2, [pc, #24]	; (5c1c <system_apb_clock_set_divider+0x50>)
    5c04:	1dbb      	adds	r3, r7, #6
    5c06:	781b      	ldrb	r3, [r3, #0]
    5c08:	72d3      	strb	r3, [r2, #11]
			break;
    5c0a:	e001      	b.n	5c10 <system_apb_clock_set_divider+0x44>
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    5c0c:	2317      	movs	r3, #23
    5c0e:	e000      	b.n	5c12 <system_apb_clock_set_divider+0x46>
	}

	return STATUS_OK;
    5c10:	2300      	movs	r3, #0
}
    5c12:	0018      	movs	r0, r3
    5c14:	46bd      	mov	sp, r7
    5c16:	b002      	add	sp, #8
    5c18:	bd80      	pop	{r7, pc}
    5c1a:	46c0      	nop			; (mov r8, r8)
    5c1c:	40000400 	.word	0x40000400

00005c20 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5c20:	b580      	push	{r7, lr}
    5c22:	b082      	sub	sp, #8
    5c24:	af00      	add	r7, sp, #0
    5c26:	0002      	movs	r2, r0
    5c28:	1dfb      	adds	r3, r7, #7
    5c2a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5c2c:	4a08      	ldr	r2, [pc, #32]	; (5c50 <system_flash_set_waitstates+0x30>)
    5c2e:	1dfb      	adds	r3, r7, #7
    5c30:	781b      	ldrb	r3, [r3, #0]
    5c32:	210f      	movs	r1, #15
    5c34:	400b      	ands	r3, r1
    5c36:	b2d9      	uxtb	r1, r3
    5c38:	6853      	ldr	r3, [r2, #4]
    5c3a:	200f      	movs	r0, #15
    5c3c:	4001      	ands	r1, r0
    5c3e:	0049      	lsls	r1, r1, #1
    5c40:	201e      	movs	r0, #30
    5c42:	4383      	bics	r3, r0
    5c44:	430b      	orrs	r3, r1
    5c46:	6053      	str	r3, [r2, #4]
}
    5c48:	46c0      	nop			; (mov r8, r8)
    5c4a:	46bd      	mov	sp, r7
    5c4c:	b002      	add	sp, #8
    5c4e:	bd80      	pop	{r7, pc}
    5c50:	41004000 	.word	0x41004000

00005c54 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5c54:	b580      	push	{r7, lr}
    5c56:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5c58:	46c0      	nop			; (mov r8, r8)
    5c5a:	4b04      	ldr	r3, [pc, #16]	; (5c6c <_system_dfll_wait_for_sync+0x18>)
    5c5c:	68db      	ldr	r3, [r3, #12]
    5c5e:	2210      	movs	r2, #16
    5c60:	4013      	ands	r3, r2
    5c62:	d0fa      	beq.n	5c5a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5c64:	46c0      	nop			; (mov r8, r8)
    5c66:	46bd      	mov	sp, r7
    5c68:	bd80      	pop	{r7, pc}
    5c6a:	46c0      	nop			; (mov r8, r8)
    5c6c:	40000800 	.word	0x40000800

00005c70 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5c70:	b580      	push	{r7, lr}
    5c72:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5c74:	4b0c      	ldr	r3, [pc, #48]	; (5ca8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5c76:	2202      	movs	r2, #2
    5c78:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5c7a:	4b0c      	ldr	r3, [pc, #48]	; (5cac <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5c7c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5c7e:	4a0a      	ldr	r2, [pc, #40]	; (5ca8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5c80:	4b0b      	ldr	r3, [pc, #44]	; (5cb0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5c82:	689b      	ldr	r3, [r3, #8]
    5c84:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5c86:	4a08      	ldr	r2, [pc, #32]	; (5ca8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5c88:	4b09      	ldr	r3, [pc, #36]	; (5cb0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5c8a:	685b      	ldr	r3, [r3, #4]
    5c8c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5c8e:	4b06      	ldr	r3, [pc, #24]	; (5ca8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5c90:	2200      	movs	r2, #0
    5c92:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5c94:	4b05      	ldr	r3, [pc, #20]	; (5cac <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5c96:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5c98:	4a03      	ldr	r2, [pc, #12]	; (5ca8 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5c9a:	4b05      	ldr	r3, [pc, #20]	; (5cb0 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5c9c:	681b      	ldr	r3, [r3, #0]
    5c9e:	b29b      	uxth	r3, r3
    5ca0:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5ca2:	46c0      	nop			; (mov r8, r8)
    5ca4:	46bd      	mov	sp, r7
    5ca6:	bd80      	pop	{r7, pc}
    5ca8:	40000800 	.word	0x40000800
    5cac:	00005c55 	.word	0x00005c55
    5cb0:	200000ec 	.word	0x200000ec

00005cb4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5cb4:	b580      	push	{r7, lr}
    5cb6:	b082      	sub	sp, #8
    5cb8:	af00      	add	r7, sp, #0
    5cba:	0002      	movs	r2, r0
    5cbc:	1dfb      	adds	r3, r7, #7
    5cbe:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5cc0:	1dfb      	adds	r3, r7, #7
    5cc2:	781b      	ldrb	r3, [r3, #0]
    5cc4:	2b08      	cmp	r3, #8
    5cc6:	d840      	bhi.n	5d4a <system_clock_source_get_hz+0x96>
    5cc8:	009a      	lsls	r2, r3, #2
    5cca:	4b22      	ldr	r3, [pc, #136]	; (5d54 <system_clock_source_get_hz+0xa0>)
    5ccc:	18d3      	adds	r3, r2, r3
    5cce:	681b      	ldr	r3, [r3, #0]
    5cd0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5cd2:	4b21      	ldr	r3, [pc, #132]	; (5d58 <system_clock_source_get_hz+0xa4>)
    5cd4:	691b      	ldr	r3, [r3, #16]
    5cd6:	e039      	b.n	5d4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5cd8:	4b20      	ldr	r3, [pc, #128]	; (5d5c <system_clock_source_get_hz+0xa8>)
    5cda:	6a1b      	ldr	r3, [r3, #32]
    5cdc:	059b      	lsls	r3, r3, #22
    5cde:	0f9b      	lsrs	r3, r3, #30
    5ce0:	b2db      	uxtb	r3, r3
    5ce2:	001a      	movs	r2, r3
    5ce4:	4b1e      	ldr	r3, [pc, #120]	; (5d60 <system_clock_source_get_hz+0xac>)
    5ce6:	40d3      	lsrs	r3, r2
    5ce8:	e030      	b.n	5d4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5cea:	2380      	movs	r3, #128	; 0x80
    5cec:	021b      	lsls	r3, r3, #8
    5cee:	e02d      	b.n	5d4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5cf0:	2380      	movs	r3, #128	; 0x80
    5cf2:	021b      	lsls	r3, r3, #8
    5cf4:	e02a      	b.n	5d4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5cf6:	4b18      	ldr	r3, [pc, #96]	; (5d58 <system_clock_source_get_hz+0xa4>)
    5cf8:	695b      	ldr	r3, [r3, #20]
    5cfa:	e027      	b.n	5d4c <system_clock_source_get_hz+0x98>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5cfc:	4b16      	ldr	r3, [pc, #88]	; (5d58 <system_clock_source_get_hz+0xa4>)
    5cfe:	681b      	ldr	r3, [r3, #0]
    5d00:	2202      	movs	r2, #2
    5d02:	4013      	ands	r3, r2
    5d04:	d101      	bne.n	5d0a <system_clock_source_get_hz+0x56>
			return 0;
    5d06:	2300      	movs	r3, #0
    5d08:	e020      	b.n	5d4c <system_clock_source_get_hz+0x98>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5d0a:	4b16      	ldr	r3, [pc, #88]	; (5d64 <system_clock_source_get_hz+0xb0>)
    5d0c:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    5d0e:	4b12      	ldr	r3, [pc, #72]	; (5d58 <system_clock_source_get_hz+0xa4>)
    5d10:	681b      	ldr	r3, [r3, #0]
    5d12:	2204      	movs	r2, #4
    5d14:	4013      	ands	r3, r2
    5d16:	d009      	beq.n	5d2c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5d18:	2000      	movs	r0, #0
    5d1a:	4b13      	ldr	r3, [pc, #76]	; (5d68 <system_clock_source_get_hz+0xb4>)
    5d1c:	4798      	blx	r3
    5d1e:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5d20:	4b0d      	ldr	r3, [pc, #52]	; (5d58 <system_clock_source_get_hz+0xa4>)
    5d22:	689b      	ldr	r3, [r3, #8]
    5d24:	041b      	lsls	r3, r3, #16
    5d26:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5d28:	4353      	muls	r3, r2
    5d2a:	e00f      	b.n	5d4c <system_clock_source_get_hz+0x98>
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    5d2c:	4b0f      	ldr	r3, [pc, #60]	; (5d6c <system_clock_source_get_hz+0xb8>)
    5d2e:	e00d      	b.n	5d4c <system_clock_source_get_hz+0x98>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5d30:	4a0a      	ldr	r2, [pc, #40]	; (5d5c <system_clock_source_get_hz+0xa8>)
    5d32:	2350      	movs	r3, #80	; 0x50
    5d34:	5cd3      	ldrb	r3, [r2, r3]
    5d36:	b2db      	uxtb	r3, r3
    5d38:	001a      	movs	r2, r3
    5d3a:	2304      	movs	r3, #4
    5d3c:	4013      	ands	r3, r2
    5d3e:	d101      	bne.n	5d44 <system_clock_source_get_hz+0x90>
			return 0;
    5d40:	2300      	movs	r3, #0
    5d42:	e003      	b.n	5d4c <system_clock_source_get_hz+0x98>
		}

		return _system_clock_inst.dpll.frequency;
    5d44:	4b04      	ldr	r3, [pc, #16]	; (5d58 <system_clock_source_get_hz+0xa4>)
    5d46:	68db      	ldr	r3, [r3, #12]
    5d48:	e000      	b.n	5d4c <system_clock_source_get_hz+0x98>
#endif

	default:
		return 0;
    5d4a:	2300      	movs	r3, #0
	}
}
    5d4c:	0018      	movs	r0, r3
    5d4e:	46bd      	mov	sp, r7
    5d50:	b002      	add	sp, #8
    5d52:	bd80      	pop	{r7, pc}
    5d54:	0000dda0 	.word	0x0000dda0
    5d58:	200000ec 	.word	0x200000ec
    5d5c:	40000800 	.word	0x40000800
    5d60:	007a1200 	.word	0x007a1200
    5d64:	00005c55 	.word	0x00005c55
    5d68:	00006849 	.word	0x00006849
    5d6c:	02dc6c00 	.word	0x02dc6c00

00005d70 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5d70:	b580      	push	{r7, lr}
    5d72:	b084      	sub	sp, #16
    5d74:	af00      	add	r7, sp, #0
    5d76:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5d78:	4b1a      	ldr	r3, [pc, #104]	; (5de4 <system_clock_source_osc8m_set_config+0x74>)
    5d7a:	6a1b      	ldr	r3, [r3, #32]
    5d7c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5d7e:	687b      	ldr	r3, [r7, #4]
    5d80:	781b      	ldrb	r3, [r3, #0]
    5d82:	1c1a      	adds	r2, r3, #0
    5d84:	2303      	movs	r3, #3
    5d86:	4013      	ands	r3, r2
    5d88:	b2da      	uxtb	r2, r3
    5d8a:	230d      	movs	r3, #13
    5d8c:	18fb      	adds	r3, r7, r3
    5d8e:	2103      	movs	r1, #3
    5d90:	400a      	ands	r2, r1
    5d92:	0010      	movs	r0, r2
    5d94:	781a      	ldrb	r2, [r3, #0]
    5d96:	2103      	movs	r1, #3
    5d98:	438a      	bics	r2, r1
    5d9a:	1c11      	adds	r1, r2, #0
    5d9c:	1c02      	adds	r2, r0, #0
    5d9e:	430a      	orrs	r2, r1
    5da0:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	789a      	ldrb	r2, [r3, #2]
    5da6:	230c      	movs	r3, #12
    5da8:	18fb      	adds	r3, r7, r3
    5daa:	01d0      	lsls	r0, r2, #7
    5dac:	781a      	ldrb	r2, [r3, #0]
    5dae:	217f      	movs	r1, #127	; 0x7f
    5db0:	400a      	ands	r2, r1
    5db2:	1c11      	adds	r1, r2, #0
    5db4:	1c02      	adds	r2, r0, #0
    5db6:	430a      	orrs	r2, r1
    5db8:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5dba:	687b      	ldr	r3, [r7, #4]
    5dbc:	785a      	ldrb	r2, [r3, #1]
    5dbe:	230c      	movs	r3, #12
    5dc0:	18fb      	adds	r3, r7, r3
    5dc2:	2101      	movs	r1, #1
    5dc4:	400a      	ands	r2, r1
    5dc6:	0190      	lsls	r0, r2, #6
    5dc8:	781a      	ldrb	r2, [r3, #0]
    5dca:	2140      	movs	r1, #64	; 0x40
    5dcc:	438a      	bics	r2, r1
    5dce:	1c11      	adds	r1, r2, #0
    5dd0:	1c02      	adds	r2, r0, #0
    5dd2:	430a      	orrs	r2, r1
    5dd4:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5dd6:	4b03      	ldr	r3, [pc, #12]	; (5de4 <system_clock_source_osc8m_set_config+0x74>)
    5dd8:	68fa      	ldr	r2, [r7, #12]
    5dda:	621a      	str	r2, [r3, #32]
}
    5ddc:	46c0      	nop			; (mov r8, r8)
    5dde:	46bd      	mov	sp, r7
    5de0:	b004      	add	sp, #16
    5de2:	bd80      	pop	{r7, pc}
    5de4:	40000800 	.word	0x40000800

00005de8 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b084      	sub	sp, #16
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5df0:	4a43      	ldr	r2, [pc, #268]	; (5f00 <system_clock_source_xosc32k_set_config+0x118>)
    5df2:	230c      	movs	r3, #12
    5df4:	18fb      	adds	r3, r7, r3
    5df6:	8a92      	ldrh	r2, [r2, #20]
    5df8:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    5dfa:	687b      	ldr	r3, [r7, #4]
    5dfc:	785b      	ldrb	r3, [r3, #1]
    5dfe:	1c1a      	adds	r2, r3, #0
    5e00:	2307      	movs	r3, #7
    5e02:	4013      	ands	r3, r2
    5e04:	b2da      	uxtb	r2, r3
    5e06:	230c      	movs	r3, #12
    5e08:	18fb      	adds	r3, r7, r3
    5e0a:	2107      	movs	r1, #7
    5e0c:	400a      	ands	r2, r1
    5e0e:	0010      	movs	r0, r2
    5e10:	785a      	ldrb	r2, [r3, #1]
    5e12:	2107      	movs	r1, #7
    5e14:	438a      	bics	r2, r1
    5e16:	1c11      	adds	r1, r2, #0
    5e18:	1c02      	adds	r2, r0, #0
    5e1a:	430a      	orrs	r2, r1
    5e1c:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5e1e:	687b      	ldr	r3, [r7, #4]
    5e20:	781b      	ldrb	r3, [r3, #0]
    5e22:	2b00      	cmp	r3, #0
    5e24:	d106      	bne.n	5e34 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    5e26:	230c      	movs	r3, #12
    5e28:	18fb      	adds	r3, r7, r3
    5e2a:	781a      	ldrb	r2, [r3, #0]
    5e2c:	2104      	movs	r1, #4
    5e2e:	430a      	orrs	r2, r1
    5e30:	701a      	strb	r2, [r3, #0]
    5e32:	e005      	b.n	5e40 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    5e34:	230c      	movs	r3, #12
    5e36:	18fb      	adds	r3, r7, r3
    5e38:	781a      	ldrb	r2, [r3, #0]
    5e3a:	2104      	movs	r1, #4
    5e3c:	438a      	bics	r2, r1
    5e3e:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5e40:	687b      	ldr	r3, [r7, #4]
    5e42:	789a      	ldrb	r2, [r3, #2]
    5e44:	230c      	movs	r3, #12
    5e46:	18fb      	adds	r3, r7, r3
    5e48:	2101      	movs	r1, #1
    5e4a:	400a      	ands	r2, r1
    5e4c:	0150      	lsls	r0, r2, #5
    5e4e:	781a      	ldrb	r2, [r3, #0]
    5e50:	2120      	movs	r1, #32
    5e52:	438a      	bics	r2, r1
    5e54:	1c11      	adds	r1, r2, #0
    5e56:	1c02      	adds	r2, r0, #0
    5e58:	430a      	orrs	r2, r1
    5e5a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    5e5c:	687b      	ldr	r3, [r7, #4]
    5e5e:	78da      	ldrb	r2, [r3, #3]
    5e60:	230c      	movs	r3, #12
    5e62:	18fb      	adds	r3, r7, r3
    5e64:	2101      	movs	r1, #1
    5e66:	400a      	ands	r2, r1
    5e68:	0110      	lsls	r0, r2, #4
    5e6a:	781a      	ldrb	r2, [r3, #0]
    5e6c:	2110      	movs	r1, #16
    5e6e:	438a      	bics	r2, r1
    5e70:	1c11      	adds	r1, r2, #0
    5e72:	1c02      	adds	r2, r0, #0
    5e74:	430a      	orrs	r2, r1
    5e76:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    5e78:	687b      	ldr	r3, [r7, #4]
    5e7a:	791a      	ldrb	r2, [r3, #4]
    5e7c:	230c      	movs	r3, #12
    5e7e:	18fb      	adds	r3, r7, r3
    5e80:	2101      	movs	r1, #1
    5e82:	400a      	ands	r2, r1
    5e84:	00d0      	lsls	r0, r2, #3
    5e86:	781a      	ldrb	r2, [r3, #0]
    5e88:	2108      	movs	r1, #8
    5e8a:	438a      	bics	r2, r1
    5e8c:	1c11      	adds	r1, r2, #0
    5e8e:	1c02      	adds	r2, r0, #0
    5e90:	430a      	orrs	r2, r1
    5e92:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    5e94:	687b      	ldr	r3, [r7, #4]
    5e96:	7b5a      	ldrb	r2, [r3, #13]
    5e98:	230c      	movs	r3, #12
    5e9a:	18fb      	adds	r3, r7, r3
    5e9c:	01d0      	lsls	r0, r2, #7
    5e9e:	781a      	ldrb	r2, [r3, #0]
    5ea0:	217f      	movs	r1, #127	; 0x7f
    5ea2:	400a      	ands	r2, r1
    5ea4:	1c11      	adds	r1, r2, #0
    5ea6:	1c02      	adds	r2, r0, #0
    5ea8:	430a      	orrs	r2, r1
    5eaa:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5eac:	687b      	ldr	r3, [r7, #4]
    5eae:	7b1a      	ldrb	r2, [r3, #12]
    5eb0:	230c      	movs	r3, #12
    5eb2:	18fb      	adds	r3, r7, r3
    5eb4:	2101      	movs	r1, #1
    5eb6:	400a      	ands	r2, r1
    5eb8:	0190      	lsls	r0, r2, #6
    5eba:	781a      	ldrb	r2, [r3, #0]
    5ebc:	2140      	movs	r1, #64	; 0x40
    5ebe:	438a      	bics	r2, r1
    5ec0:	1c11      	adds	r1, r2, #0
    5ec2:	1c02      	adds	r2, r0, #0
    5ec4:	430a      	orrs	r2, r1
    5ec6:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    5ec8:	687b      	ldr	r3, [r7, #4]
    5eca:	7b9a      	ldrb	r2, [r3, #14]
    5ecc:	230c      	movs	r3, #12
    5ece:	18fb      	adds	r3, r7, r3
    5ed0:	2101      	movs	r1, #1
    5ed2:	400a      	ands	r2, r1
    5ed4:	0110      	lsls	r0, r2, #4
    5ed6:	785a      	ldrb	r2, [r3, #1]
    5ed8:	2110      	movs	r1, #16
    5eda:	438a      	bics	r2, r1
    5edc:	1c11      	adds	r1, r2, #0
    5ede:	1c02      	adds	r2, r0, #0
    5ee0:	430a      	orrs	r2, r1
    5ee2:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5ee4:	687b      	ldr	r3, [r7, #4]
    5ee6:	689a      	ldr	r2, [r3, #8]
    5ee8:	4b06      	ldr	r3, [pc, #24]	; (5f04 <system_clock_source_xosc32k_set_config+0x11c>)
    5eea:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    5eec:	4a04      	ldr	r2, [pc, #16]	; (5f00 <system_clock_source_xosc32k_set_config+0x118>)
    5eee:	230c      	movs	r3, #12
    5ef0:	18fb      	adds	r3, r7, r3
    5ef2:	881b      	ldrh	r3, [r3, #0]
    5ef4:	8293      	strh	r3, [r2, #20]
}
    5ef6:	46c0      	nop			; (mov r8, r8)
    5ef8:	46bd      	mov	sp, r7
    5efa:	b004      	add	sp, #16
    5efc:	bd80      	pop	{r7, pc}
    5efe:	46c0      	nop			; (mov r8, r8)
    5f00:	40000800 	.word	0x40000800
    5f04:	200000ec 	.word	0x200000ec

00005f08 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5f08:	b580      	push	{r7, lr}
    5f0a:	b082      	sub	sp, #8
    5f0c:	af00      	add	r7, sp, #0
    5f0e:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	7a1b      	ldrb	r3, [r3, #8]
    5f14:	029b      	lsls	r3, r3, #10
    5f16:	041b      	lsls	r3, r3, #16
    5f18:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5f1a:	687b      	ldr	r3, [r7, #4]
    5f1c:	895b      	ldrh	r3, [r3, #10]
    5f1e:	059b      	lsls	r3, r3, #22
    5f20:	0d9b      	lsrs	r3, r3, #22
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5f22:	431a      	orrs	r2, r3
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
	_system_clock_inst.dfll.val =
    5f24:	4b2a      	ldr	r3, [pc, #168]	; (5fd0 <system_clock_source_dfll_set_config+0xc8>)
    5f26:	605a      	str	r2, [r3, #4]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5f2c:	687b      	ldr	r3, [r7, #4]
    5f2e:	79db      	ldrb	r3, [r3, #7]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5f30:	4313      	orrs	r3, r2
    5f32:	b2db      	uxtb	r3, r3
    5f34:	001a      	movs	r2, r3
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	885b      	ldrh	r3, [r3, #2]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
    5f3a:	4313      	orrs	r3, r2
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5f3c:	687a      	ldr	r2, [r7, #4]
    5f3e:	8892      	ldrh	r2, [r2, #4]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    5f40:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5f42:	687b      	ldr	r3, [r7, #4]
    5f44:	785b      	ldrb	r3, [r3, #1]
    5f46:	01db      	lsls	r3, r3, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
    5f48:	431a      	orrs	r2, r3
{
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
			SYSCTRL_DFLLVAL_FINE(config->fine_value);

	_system_clock_inst.dfll.control =
    5f4a:	4b21      	ldr	r3, [pc, #132]	; (5fd0 <system_clock_source_dfll_set_config+0xc8>)
    5f4c:	601a      	str	r2, [r3, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5f4e:	687b      	ldr	r3, [r7, #4]
    5f50:	781b      	ldrb	r3, [r3, #0]
    5f52:	2b04      	cmp	r3, #4
    5f54:	d116      	bne.n	5f84 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5f56:	687b      	ldr	r3, [r7, #4]
    5f58:	7b1b      	ldrb	r3, [r3, #12]
    5f5a:	069b      	lsls	r3, r3, #26
    5f5c:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5f5e:	687b      	ldr	r3, [r7, #4]
    5f60:	89db      	ldrh	r3, [r3, #14]
    5f62:	041b      	lsls	r3, r3, #16
    5f64:	0019      	movs	r1, r3
    5f66:	4b1b      	ldr	r3, [pc, #108]	; (5fd4 <system_clock_source_dfll_set_config+0xcc>)
    5f68:	400b      	ands	r3, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5f6a:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5f6c:	687a      	ldr	r2, [r7, #4]
    5f6e:	8a12      	ldrh	r2, [r2, #16]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5f70:	431a      	orrs	r2, r3
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		_system_clock_inst.dfll.mul =
    5f72:	4b17      	ldr	r3, [pc, #92]	; (5fd0 <system_clock_source_dfll_set_config+0xc8>)
    5f74:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5f76:	4b16      	ldr	r3, [pc, #88]	; (5fd0 <system_clock_source_dfll_set_config+0xc8>)
    5f78:	681b      	ldr	r3, [r3, #0]
    5f7a:	687a      	ldr	r2, [r7, #4]
    5f7c:	7812      	ldrb	r2, [r2, #0]
    5f7e:	431a      	orrs	r2, r3
    5f80:	4b13      	ldr	r3, [pc, #76]	; (5fd0 <system_clock_source_dfll_set_config+0xc8>)
    5f82:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5f84:	687b      	ldr	r3, [r7, #4]
    5f86:	781b      	ldrb	r3, [r3, #0]
    5f88:	2b20      	cmp	r3, #32
    5f8a:	d11c      	bne.n	5fc6 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5f8c:	687b      	ldr	r3, [r7, #4]
    5f8e:	7b1b      	ldrb	r3, [r3, #12]
    5f90:	069b      	lsls	r3, r3, #26
    5f92:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5f94:	687b      	ldr	r3, [r7, #4]
    5f96:	89db      	ldrh	r3, [r3, #14]
    5f98:	041b      	lsls	r3, r3, #16
    5f9a:	0019      	movs	r1, r3
    5f9c:	4b0d      	ldr	r3, [pc, #52]	; (5fd4 <system_clock_source_dfll_set_config+0xcc>)
    5f9e:	400b      	ands	r3, r1
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5fa0:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5fa2:	687a      	ldr	r2, [r7, #4]
    5fa4:	8a12      	ldrh	r2, [r2, #16]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5fa6:	431a      	orrs	r2, r3
		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {

		_system_clock_inst.dfll.mul =
    5fa8:	4b09      	ldr	r3, [pc, #36]	; (5fd0 <system_clock_source_dfll_set_config+0xc8>)
    5faa:	609a      	str	r2, [r3, #8]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5fac:	4b08      	ldr	r3, [pc, #32]	; (5fd0 <system_clock_source_dfll_set_config+0xc8>)
    5fae:	681b      	ldr	r3, [r3, #0]
    5fb0:	687a      	ldr	r2, [r7, #4]
    5fb2:	7812      	ldrb	r2, [r2, #0]
    5fb4:	2104      	movs	r1, #4
    5fb6:	430a      	orrs	r2, r1
    5fb8:	b2d2      	uxtb	r2, r2
    5fba:	4313      	orrs	r3, r2
    5fbc:	2280      	movs	r2, #128	; 0x80
    5fbe:	00d2      	lsls	r2, r2, #3
    5fc0:	431a      	orrs	r2, r3
    5fc2:	4b03      	ldr	r3, [pc, #12]	; (5fd0 <system_clock_source_dfll_set_config+0xc8>)
    5fc4:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5fc6:	46c0      	nop			; (mov r8, r8)
    5fc8:	46bd      	mov	sp, r7
    5fca:	b002      	add	sp, #8
    5fcc:	bd80      	pop	{r7, pc}
    5fce:	46c0      	nop			; (mov r8, r8)
    5fd0:	200000ec 	.word	0x200000ec
    5fd4:	03ff0000 	.word	0x03ff0000

00005fd8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5fd8:	b580      	push	{r7, lr}
    5fda:	b082      	sub	sp, #8
    5fdc:	af00      	add	r7, sp, #0
    5fde:	0002      	movs	r2, r0
    5fe0:	1dfb      	adds	r3, r7, #7
    5fe2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5fe4:	1dfb      	adds	r3, r7, #7
    5fe6:	781b      	ldrb	r3, [r3, #0]
    5fe8:	2b08      	cmp	r3, #8
    5fea:	d83b      	bhi.n	6064 <system_clock_source_enable+0x8c>
    5fec:	009a      	lsls	r2, r3, #2
    5fee:	4b21      	ldr	r3, [pc, #132]	; (6074 <system_clock_source_enable+0x9c>)
    5ff0:	18d3      	adds	r3, r2, r3
    5ff2:	681b      	ldr	r3, [r3, #0]
    5ff4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5ff6:	4b20      	ldr	r3, [pc, #128]	; (6078 <system_clock_source_enable+0xa0>)
    5ff8:	4a1f      	ldr	r2, [pc, #124]	; (6078 <system_clock_source_enable+0xa0>)
    5ffa:	6a12      	ldr	r2, [r2, #32]
    5ffc:	2102      	movs	r1, #2
    5ffe:	430a      	orrs	r2, r1
    6000:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    6002:	2300      	movs	r3, #0
    6004:	e031      	b.n	606a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    6006:	4b1c      	ldr	r3, [pc, #112]	; (6078 <system_clock_source_enable+0xa0>)
    6008:	4a1b      	ldr	r2, [pc, #108]	; (6078 <system_clock_source_enable+0xa0>)
    600a:	6992      	ldr	r2, [r2, #24]
    600c:	2102      	movs	r1, #2
    600e:	430a      	orrs	r2, r1
    6010:	619a      	str	r2, [r3, #24]
		break;
    6012:	e029      	b.n	6068 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    6014:	4a18      	ldr	r2, [pc, #96]	; (6078 <system_clock_source_enable+0xa0>)
    6016:	4b18      	ldr	r3, [pc, #96]	; (6078 <system_clock_source_enable+0xa0>)
    6018:	8a1b      	ldrh	r3, [r3, #16]
    601a:	b29b      	uxth	r3, r3
    601c:	2102      	movs	r1, #2
    601e:	430b      	orrs	r3, r1
    6020:	b29b      	uxth	r3, r3
    6022:	8213      	strh	r3, [r2, #16]
		break;
    6024:	e020      	b.n	6068 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    6026:	4a14      	ldr	r2, [pc, #80]	; (6078 <system_clock_source_enable+0xa0>)
    6028:	4b13      	ldr	r3, [pc, #76]	; (6078 <system_clock_source_enable+0xa0>)
    602a:	8a9b      	ldrh	r3, [r3, #20]
    602c:	b29b      	uxth	r3, r3
    602e:	2102      	movs	r1, #2
    6030:	430b      	orrs	r3, r1
    6032:	b29b      	uxth	r3, r3
    6034:	8293      	strh	r3, [r2, #20]
		break;
    6036:	e017      	b.n	6068 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    6038:	4b10      	ldr	r3, [pc, #64]	; (607c <system_clock_source_enable+0xa4>)
    603a:	681b      	ldr	r3, [r3, #0]
    603c:	2202      	movs	r2, #2
    603e:	431a      	orrs	r2, r3
    6040:	4b0e      	ldr	r3, [pc, #56]	; (607c <system_clock_source_enable+0xa4>)
    6042:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    6044:	4b0e      	ldr	r3, [pc, #56]	; (6080 <system_clock_source_enable+0xa8>)
    6046:	4798      	blx	r3
		break;
    6048:	e00e      	b.n	6068 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    604a:	4a0b      	ldr	r2, [pc, #44]	; (6078 <system_clock_source_enable+0xa0>)
    604c:	490a      	ldr	r1, [pc, #40]	; (6078 <system_clock_source_enable+0xa0>)
    604e:	2344      	movs	r3, #68	; 0x44
    6050:	5ccb      	ldrb	r3, [r1, r3]
    6052:	b2db      	uxtb	r3, r3
    6054:	2102      	movs	r1, #2
    6056:	430b      	orrs	r3, r1
    6058:	b2d9      	uxtb	r1, r3
    605a:	2344      	movs	r3, #68	; 0x44
    605c:	54d1      	strb	r1, [r2, r3]
		break;
    605e:	e003      	b.n	6068 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    6060:	2300      	movs	r3, #0
    6062:	e002      	b.n	606a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    6064:	2317      	movs	r3, #23
    6066:	e000      	b.n	606a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    6068:	2300      	movs	r3, #0
}
    606a:	0018      	movs	r0, r3
    606c:	46bd      	mov	sp, r7
    606e:	b002      	add	sp, #8
    6070:	bd80      	pop	{r7, pc}
    6072:	46c0      	nop			; (mov r8, r8)
    6074:	0000ddc4 	.word	0x0000ddc4
    6078:	40000800 	.word	0x40000800
    607c:	200000ec 	.word	0x200000ec
    6080:	00005c71 	.word	0x00005c71

00006084 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    6084:	b580      	push	{r7, lr}
    6086:	b084      	sub	sp, #16
    6088:	af00      	add	r7, sp, #0
    608a:	0002      	movs	r2, r0
    608c:	1dfb      	adds	r3, r7, #7
    608e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    6090:	2300      	movs	r3, #0
    6092:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    6094:	1dfb      	adds	r3, r7, #7
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	2b08      	cmp	r3, #8
    609a:	d821      	bhi.n	60e0 <system_clock_source_is_ready+0x5c>
    609c:	009a      	lsls	r2, r3, #2
    609e:	4b18      	ldr	r3, [pc, #96]	; (6100 <system_clock_source_is_ready+0x7c>)
    60a0:	18d3      	adds	r3, r2, r3
    60a2:	681b      	ldr	r3, [r3, #0]
    60a4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    60a6:	2308      	movs	r3, #8
    60a8:	60fb      	str	r3, [r7, #12]
		break;
    60aa:	e01b      	b.n	60e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    60ac:	2304      	movs	r3, #4
    60ae:	60fb      	str	r3, [r7, #12]
		break;
    60b0:	e018      	b.n	60e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    60b2:	2301      	movs	r3, #1
    60b4:	60fb      	str	r3, [r7, #12]
		break;
    60b6:	e015      	b.n	60e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    60b8:	2302      	movs	r3, #2
    60ba:	60fb      	str	r3, [r7, #12]
		break;
    60bc:	e012      	b.n	60e4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    60be:	23d0      	movs	r3, #208	; 0xd0
    60c0:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    60c2:	e00f      	b.n	60e4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    60c4:	4a0f      	ldr	r2, [pc, #60]	; (6104 <system_clock_source_is_ready+0x80>)
    60c6:	2350      	movs	r3, #80	; 0x50
    60c8:	5cd3      	ldrb	r3, [r2, r3]
    60ca:	b2db      	uxtb	r3, r3
    60cc:	001a      	movs	r2, r3
    60ce:	2303      	movs	r3, #3
    60d0:	4013      	ands	r3, r2
    60d2:	3b03      	subs	r3, #3
    60d4:	425a      	negs	r2, r3
    60d6:	4153      	adcs	r3, r2
    60d8:	b2db      	uxtb	r3, r3
    60da:	e00c      	b.n	60f6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    60dc:	2301      	movs	r3, #1
    60de:	e00a      	b.n	60f6 <system_clock_source_is_ready+0x72>

	default:
		return false;
    60e0:	2300      	movs	r3, #0
    60e2:	e008      	b.n	60f6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    60e4:	4b07      	ldr	r3, [pc, #28]	; (6104 <system_clock_source_is_ready+0x80>)
    60e6:	68db      	ldr	r3, [r3, #12]
    60e8:	68fa      	ldr	r2, [r7, #12]
    60ea:	401a      	ands	r2, r3
    60ec:	68fb      	ldr	r3, [r7, #12]
    60ee:	1ad3      	subs	r3, r2, r3
    60f0:	425a      	negs	r2, r3
    60f2:	4153      	adcs	r3, r2
    60f4:	b2db      	uxtb	r3, r3
}
    60f6:	0018      	movs	r0, r3
    60f8:	46bd      	mov	sp, r7
    60fa:	b004      	add	sp, #16
    60fc:	bd80      	pop	{r7, pc}
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	0000dde8 	.word	0x0000dde8
    6104:	40000800 	.word	0x40000800

00006108 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    6108:	b580      	push	{r7, lr}
    610a:	b082      	sub	sp, #8
    610c:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    610e:	003b      	movs	r3, r7
    6110:	2202      	movs	r2, #2
    6112:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6114:	2300      	movs	r3, #0
    6116:	607b      	str	r3, [r7, #4]
    6118:	e009      	b.n	612e <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    611a:	687b      	ldr	r3, [r7, #4]
    611c:	b2db      	uxtb	r3, r3
    611e:	003a      	movs	r2, r7
    6120:	0011      	movs	r1, r2
    6122:	0018      	movs	r0, r3
    6124:	4b05      	ldr	r3, [pc, #20]	; (613c <_switch_peripheral_gclk+0x34>)
    6126:	4798      	blx	r3
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    6128:	687b      	ldr	r3, [r7, #4]
    612a:	3301      	adds	r3, #1
    612c:	607b      	str	r3, [r7, #4]
    612e:	687b      	ldr	r3, [r7, #4]
    6130:	2b24      	cmp	r3, #36	; 0x24
    6132:	d9f2      	bls.n	611a <_switch_peripheral_gclk+0x12>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
	}
}
    6134:	46c0      	nop			; (mov r8, r8)
    6136:	46bd      	mov	sp, r7
    6138:	b002      	add	sp, #8
    613a:	bd80      	pop	{r7, pc}
    613c:	00006725 	.word	0x00006725

00006140 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    6140:	b580      	push	{r7, lr}
    6142:	b0aa      	sub	sp, #168	; 0xa8
    6144:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    6146:	4b96      	ldr	r3, [pc, #600]	; (63a0 <system_clock_init+0x260>)
    6148:	22c2      	movs	r2, #194	; 0xc2
    614a:	00d2      	lsls	r2, r2, #3
    614c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    614e:	2002      	movs	r0, #2
    6150:	4b94      	ldr	r3, [pc, #592]	; (63a4 <system_clock_init+0x264>)
    6152:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    6154:	4b94      	ldr	r3, [pc, #592]	; (63a8 <system_clock_init+0x268>)
    6156:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    6158:	2394      	movs	r3, #148	; 0x94
    615a:	18fb      	adds	r3, r7, r3
    615c:	0018      	movs	r0, r3
    615e:	4b93      	ldr	r3, [pc, #588]	; (63ac <system_clock_init+0x26c>)
    6160:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    6162:	2394      	movs	r3, #148	; 0x94
    6164:	18fb      	adds	r3, r7, r3
    6166:	2280      	movs	r2, #128	; 0x80
    6168:	0212      	lsls	r2, r2, #8
    616a:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    616c:	2394      	movs	r3, #148	; 0x94
    616e:	18fb      	adds	r3, r7, r3
    6170:	2200      	movs	r2, #0
    6172:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    6174:	2394      	movs	r3, #148	; 0x94
    6176:	18fb      	adds	r3, r7, r3
    6178:	2203      	movs	r2, #3
    617a:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    617c:	2394      	movs	r3, #148	; 0x94
    617e:	18fb      	adds	r3, r7, r3
    6180:	2200      	movs	r2, #0
    6182:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    6184:	2394      	movs	r3, #148	; 0x94
    6186:	18fb      	adds	r3, r7, r3
    6188:	2200      	movs	r2, #0
    618a:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    618c:	2394      	movs	r3, #148	; 0x94
    618e:	18fb      	adds	r3, r7, r3
    6190:	2201      	movs	r2, #1
    6192:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    6194:	2394      	movs	r3, #148	; 0x94
    6196:	18fb      	adds	r3, r7, r3
    6198:	2200      	movs	r2, #0
    619a:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    619c:	2394      	movs	r3, #148	; 0x94
    619e:	18fb      	adds	r3, r7, r3
    61a0:	2200      	movs	r2, #0
    61a2:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    61a4:	2394      	movs	r3, #148	; 0x94
    61a6:	18fb      	adds	r3, r7, r3
    61a8:	0018      	movs	r0, r3
    61aa:	4b81      	ldr	r3, [pc, #516]	; (63b0 <system_clock_init+0x270>)
    61ac:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    61ae:	2005      	movs	r0, #5
    61b0:	4b80      	ldr	r3, [pc, #512]	; (63b4 <system_clock_init+0x274>)
    61b2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    61b4:	46c0      	nop			; (mov r8, r8)
    61b6:	2005      	movs	r0, #5
    61b8:	4b7f      	ldr	r3, [pc, #508]	; (63b8 <system_clock_init+0x278>)
    61ba:	4798      	blx	r3
    61bc:	0003      	movs	r3, r0
    61be:	001a      	movs	r2, r3
    61c0:	2301      	movs	r3, #1
    61c2:	4053      	eors	r3, r2
    61c4:	b2db      	uxtb	r3, r3
    61c6:	2b00      	cmp	r3, #0
    61c8:	d1f5      	bne.n	61b6 <system_clock_init+0x76>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    61ca:	4a75      	ldr	r2, [pc, #468]	; (63a0 <system_clock_init+0x260>)
    61cc:	8a93      	ldrh	r3, [r2, #20]
    61ce:	2180      	movs	r1, #128	; 0x80
    61d0:	430b      	orrs	r3, r1
    61d2:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    61d4:	2380      	movs	r3, #128	; 0x80
    61d6:	18fb      	adds	r3, r7, r3
    61d8:	0018      	movs	r0, r3
    61da:	4b78      	ldr	r3, [pc, #480]	; (63bc <system_clock_init+0x27c>)
    61dc:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    61de:	2380      	movs	r3, #128	; 0x80
    61e0:	18fb      	adds	r3, r7, r3
    61e2:	2204      	movs	r2, #4
    61e4:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    61e6:	2380      	movs	r3, #128	; 0x80
    61e8:	18fb      	adds	r3, r7, r3
    61ea:	2200      	movs	r2, #0
    61ec:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    61ee:	4b74      	ldr	r3, [pc, #464]	; (63c0 <system_clock_init+0x280>)
    61f0:	681b      	ldr	r3, [r3, #0]
    61f2:	0e9b      	lsrs	r3, r3, #26
    61f4:	22a4      	movs	r2, #164	; 0xa4
    61f6:	18ba      	adds	r2, r7, r2
    61f8:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    61fa:	23a4      	movs	r3, #164	; 0xa4
    61fc:	18fb      	adds	r3, r7, r3
    61fe:	681b      	ldr	r3, [r3, #0]
    6200:	2b3f      	cmp	r3, #63	; 0x3f
    6202:	d103      	bne.n	620c <system_clock_init+0xcc>
		coarse = 0x1f;
    6204:	231f      	movs	r3, #31
    6206:	22a4      	movs	r2, #164	; 0xa4
    6208:	18ba      	adds	r2, r7, r2
    620a:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    620c:	23a4      	movs	r3, #164	; 0xa4
    620e:	18fb      	adds	r3, r7, r3
    6210:	681b      	ldr	r3, [r3, #0]
    6212:	b2da      	uxtb	r2, r3
    6214:	2380      	movs	r3, #128	; 0x80
    6216:	18fb      	adds	r3, r7, r3
    6218:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    621a:	2380      	movs	r3, #128	; 0x80
    621c:	18fb      	adds	r3, r7, r3
    621e:	2200      	movs	r2, #0
    6220:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6222:	2380      	movs	r3, #128	; 0x80
    6224:	18fb      	adds	r3, r7, r3
    6226:	2200      	movs	r2, #0
    6228:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    622a:	2380      	movs	r3, #128	; 0x80
    622c:	18fb      	adds	r3, r7, r3
    622e:	2200      	movs	r2, #0
    6230:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6232:	2380      	movs	r3, #128	; 0x80
    6234:	18fb      	adds	r3, r7, r3
    6236:	2200      	movs	r2, #0
    6238:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    623a:	2380      	movs	r3, #128	; 0x80
    623c:	18fb      	adds	r3, r7, r3
    623e:	4a61      	ldr	r2, [pc, #388]	; (63c4 <system_clock_init+0x284>)
    6240:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    6242:	2380      	movs	r3, #128	; 0x80
    6244:	18fb      	adds	r3, r7, r3
    6246:	2207      	movs	r2, #7
    6248:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    624a:	2380      	movs	r3, #128	; 0x80
    624c:	18fb      	adds	r3, r7, r3
    624e:	223f      	movs	r2, #63	; 0x3f
    6250:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    6252:	2380      	movs	r3, #128	; 0x80
    6254:	18fb      	adds	r3, r7, r3
    6256:	0018      	movs	r0, r3
    6258:	4b5b      	ldr	r3, [pc, #364]	; (63c8 <system_clock_init+0x288>)
    625a:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    625c:	237c      	movs	r3, #124	; 0x7c
    625e:	18fb      	adds	r3, r7, r3
    6260:	0018      	movs	r0, r3
    6262:	4b5a      	ldr	r3, [pc, #360]	; (63cc <system_clock_init+0x28c>)
    6264:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    6266:	237c      	movs	r3, #124	; 0x7c
    6268:	18fb      	adds	r3, r7, r3
    626a:	2200      	movs	r2, #0
    626c:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    626e:	237c      	movs	r3, #124	; 0x7c
    6270:	18fb      	adds	r3, r7, r3
    6272:	2201      	movs	r2, #1
    6274:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    6276:	237c      	movs	r3, #124	; 0x7c
    6278:	18fb      	adds	r3, r7, r3
    627a:	2200      	movs	r2, #0
    627c:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    627e:	237c      	movs	r3, #124	; 0x7c
    6280:	18fb      	adds	r3, r7, r3
    6282:	0018      	movs	r0, r3
    6284:	4b52      	ldr	r3, [pc, #328]	; (63d0 <system_clock_init+0x290>)
    6286:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    6288:	2006      	movs	r0, #6
    628a:	4b4a      	ldr	r3, [pc, #296]	; (63b4 <system_clock_init+0x274>)
    628c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    628e:	4b51      	ldr	r3, [pc, #324]	; (63d4 <system_clock_init+0x294>)
    6290:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    6292:	2364      	movs	r3, #100	; 0x64
    6294:	18fb      	adds	r3, r7, r3
    6296:	0018      	movs	r0, r3
    6298:	4b4f      	ldr	r3, [pc, #316]	; (63d8 <system_clock_init+0x298>)
    629a:	4798      	blx	r3
    629c:	2364      	movs	r3, #100	; 0x64
    629e:	18fb      	adds	r3, r7, r3
    62a0:	2205      	movs	r2, #5
    62a2:	701a      	strb	r2, [r3, #0]
    62a4:	2364      	movs	r3, #100	; 0x64
    62a6:	18fb      	adds	r3, r7, r3
    62a8:	2201      	movs	r2, #1
    62aa:	605a      	str	r2, [r3, #4]
    62ac:	2364      	movs	r3, #100	; 0x64
    62ae:	18fb      	adds	r3, r7, r3
    62b0:	2200      	movs	r2, #0
    62b2:	721a      	strb	r2, [r3, #8]
    62b4:	2364      	movs	r3, #100	; 0x64
    62b6:	18fb      	adds	r3, r7, r3
    62b8:	2200      	movs	r2, #0
    62ba:	725a      	strb	r2, [r3, #9]
    62bc:	2364      	movs	r3, #100	; 0x64
    62be:	18fb      	adds	r3, r7, r3
    62c0:	0019      	movs	r1, r3
    62c2:	2001      	movs	r0, #1
    62c4:	4b45      	ldr	r3, [pc, #276]	; (63dc <system_clock_init+0x29c>)
    62c6:	4798      	blx	r3
    62c8:	2001      	movs	r0, #1
    62ca:	4b45      	ldr	r3, [pc, #276]	; (63e0 <system_clock_init+0x2a0>)
    62cc:	4798      	blx	r3
    62ce:	2340      	movs	r3, #64	; 0x40
    62d0:	18fb      	adds	r3, r7, r3
    62d2:	0018      	movs	r0, r3
    62d4:	4b40      	ldr	r3, [pc, #256]	; (63d8 <system_clock_init+0x298>)
    62d6:	4798      	blx	r3
    62d8:	2340      	movs	r3, #64	; 0x40
    62da:	18fb      	adds	r3, r7, r3
    62dc:	2206      	movs	r2, #6
    62de:	701a      	strb	r2, [r3, #0]
    62e0:	2340      	movs	r3, #64	; 0x40
    62e2:	18fb      	adds	r3, r7, r3
    62e4:	2202      	movs	r2, #2
    62e6:	605a      	str	r2, [r3, #4]
    62e8:	2340      	movs	r3, #64	; 0x40
    62ea:	18fb      	adds	r3, r7, r3
    62ec:	2200      	movs	r2, #0
    62ee:	721a      	strb	r2, [r3, #8]
    62f0:	2340      	movs	r3, #64	; 0x40
    62f2:	18fb      	adds	r3, r7, r3
    62f4:	2201      	movs	r2, #1
    62f6:	725a      	strb	r2, [r3, #9]
    62f8:	2340      	movs	r3, #64	; 0x40
    62fa:	18fb      	adds	r3, r7, r3
    62fc:	0019      	movs	r1, r3
    62fe:	2004      	movs	r0, #4
    6300:	4b36      	ldr	r3, [pc, #216]	; (63dc <system_clock_init+0x29c>)
    6302:	4798      	blx	r3
    6304:	2004      	movs	r0, #4
    6306:	4b36      	ldr	r3, [pc, #216]	; (63e0 <system_clock_init+0x2a0>)
    6308:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    630a:	230c      	movs	r3, #12
    630c:	18fb      	adds	r3, r7, r3
    630e:	0018      	movs	r0, r3
    6310:	4b34      	ldr	r3, [pc, #208]	; (63e4 <system_clock_init+0x2a4>)
    6312:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    6314:	230c      	movs	r3, #12
    6316:	18fb      	adds	r3, r7, r3
    6318:	2201      	movs	r2, #1
    631a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    631c:	230c      	movs	r3, #12
    631e:	18fb      	adds	r3, r7, r3
    6320:	0019      	movs	r1, r3
    6322:	2000      	movs	r0, #0
    6324:	4b30      	ldr	r3, [pc, #192]	; (63e8 <system_clock_init+0x2a8>)
    6326:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6328:	2000      	movs	r0, #0
    632a:	4b30      	ldr	r3, [pc, #192]	; (63ec <system_clock_init+0x2ac>)
    632c:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    632e:	2007      	movs	r0, #7
    6330:	4b20      	ldr	r3, [pc, #128]	; (63b4 <system_clock_init+0x274>)
    6332:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    6334:	46c0      	nop			; (mov r8, r8)
    6336:	2007      	movs	r0, #7
    6338:	4b1f      	ldr	r3, [pc, #124]	; (63b8 <system_clock_init+0x278>)
    633a:	4798      	blx	r3
    633c:	0003      	movs	r3, r0
    633e:	001a      	movs	r2, r3
    6340:	2301      	movs	r3, #1
    6342:	4053      	eors	r3, r2
    6344:	b2db      	uxtb	r3, r3
    6346:	2b00      	cmp	r3, #0
    6348:	d1f5      	bne.n	6336 <system_clock_init+0x1f6>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    634a:	2000      	movs	r0, #0
    634c:	4b28      	ldr	r3, [pc, #160]	; (63f0 <system_clock_init+0x2b0>)
    634e:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6350:	2100      	movs	r1, #0
    6352:	2000      	movs	r0, #0
    6354:	4b27      	ldr	r3, [pc, #156]	; (63f4 <system_clock_init+0x2b4>)
    6356:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6358:	2100      	movs	r1, #0
    635a:	2001      	movs	r0, #1
    635c:	4b25      	ldr	r3, [pc, #148]	; (63f4 <system_clock_init+0x2b4>)
    635e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6360:	2100      	movs	r1, #0
    6362:	2002      	movs	r0, #2
    6364:	4b23      	ldr	r3, [pc, #140]	; (63f4 <system_clock_init+0x2b4>)
    6366:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6368:	003b      	movs	r3, r7
    636a:	0018      	movs	r0, r3
    636c:	4b1a      	ldr	r3, [pc, #104]	; (63d8 <system_clock_init+0x298>)
    636e:	4798      	blx	r3
    6370:	003b      	movs	r3, r7
    6372:	2207      	movs	r2, #7
    6374:	701a      	strb	r2, [r3, #0]
    6376:	003b      	movs	r3, r7
    6378:	2201      	movs	r2, #1
    637a:	605a      	str	r2, [r3, #4]
    637c:	003b      	movs	r3, r7
    637e:	2200      	movs	r2, #0
    6380:	721a      	strb	r2, [r3, #8]
    6382:	003b      	movs	r3, r7
    6384:	2200      	movs	r2, #0
    6386:	725a      	strb	r2, [r3, #9]
    6388:	003b      	movs	r3, r7
    638a:	0019      	movs	r1, r3
    638c:	2000      	movs	r0, #0
    638e:	4b13      	ldr	r3, [pc, #76]	; (63dc <system_clock_init+0x29c>)
    6390:	4798      	blx	r3
    6392:	2000      	movs	r0, #0
    6394:	4b12      	ldr	r3, [pc, #72]	; (63e0 <system_clock_init+0x2a0>)
    6396:	4798      	blx	r3
#endif
}
    6398:	46c0      	nop			; (mov r8, r8)
    639a:	46bd      	mov	sp, r7
    639c:	b02a      	add	sp, #168	; 0xa8
    639e:	bd80      	pop	{r7, pc}
    63a0:	40000800 	.word	0x40000800
    63a4:	00005c21 	.word	0x00005c21
    63a8:	00006109 	.word	0x00006109
    63ac:	00005aed 	.word	0x00005aed
    63b0:	00005de9 	.word	0x00005de9
    63b4:	00005fd9 	.word	0x00005fd9
    63b8:	00006085 	.word	0x00006085
    63bc:	00005b59 	.word	0x00005b59
    63c0:	00806024 	.word	0x00806024
    63c4:	000005b9 	.word	0x000005b9
    63c8:	00005f09 	.word	0x00005f09
    63cc:	00005b35 	.word	0x00005b35
    63d0:	00005d71 	.word	0x00005d71
    63d4:	0000649d 	.word	0x0000649d
    63d8:	00005aa5 	.word	0x00005aa5
    63dc:	000064cd 	.word	0x000064cd
    63e0:	000065f1 	.word	0x000065f1
    63e4:	00005ad5 	.word	0x00005ad5
    63e8:	00006725 	.word	0x00006725
    63ec:	00006769 	.word	0x00006769
    63f0:	00005bad 	.word	0x00005bad
    63f4:	00005bcd 	.word	0x00005bcd

000063f8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    63f8:	b580      	push	{r7, lr}
    63fa:	b082      	sub	sp, #8
    63fc:	af00      	add	r7, sp, #0
    63fe:	0002      	movs	r2, r0
    6400:	6039      	str	r1, [r7, #0]
    6402:	1dfb      	adds	r3, r7, #7
    6404:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6406:	1dfb      	adds	r3, r7, #7
    6408:	781b      	ldrb	r3, [r3, #0]
    640a:	2b01      	cmp	r3, #1
    640c:	d00a      	beq.n	6424 <system_apb_clock_set_mask+0x2c>
    640e:	2b02      	cmp	r3, #2
    6410:	d00f      	beq.n	6432 <system_apb_clock_set_mask+0x3a>
    6412:	2b00      	cmp	r3, #0
    6414:	d114      	bne.n	6440 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    6416:	4b0e      	ldr	r3, [pc, #56]	; (6450 <system_apb_clock_set_mask+0x58>)
    6418:	4a0d      	ldr	r2, [pc, #52]	; (6450 <system_apb_clock_set_mask+0x58>)
    641a:	6991      	ldr	r1, [r2, #24]
    641c:	683a      	ldr	r2, [r7, #0]
    641e:	430a      	orrs	r2, r1
    6420:	619a      	str	r2, [r3, #24]
			break;
    6422:	e00f      	b.n	6444 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    6424:	4b0a      	ldr	r3, [pc, #40]	; (6450 <system_apb_clock_set_mask+0x58>)
    6426:	4a0a      	ldr	r2, [pc, #40]	; (6450 <system_apb_clock_set_mask+0x58>)
    6428:	69d1      	ldr	r1, [r2, #28]
    642a:	683a      	ldr	r2, [r7, #0]
    642c:	430a      	orrs	r2, r1
    642e:	61da      	str	r2, [r3, #28]
			break;
    6430:	e008      	b.n	6444 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    6432:	4b07      	ldr	r3, [pc, #28]	; (6450 <system_apb_clock_set_mask+0x58>)
    6434:	4a06      	ldr	r2, [pc, #24]	; (6450 <system_apb_clock_set_mask+0x58>)
    6436:	6a11      	ldr	r1, [r2, #32]
    6438:	683a      	ldr	r2, [r7, #0]
    643a:	430a      	orrs	r2, r1
    643c:	621a      	str	r2, [r3, #32]
			break;
    643e:	e001      	b.n	6444 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    6440:	2317      	movs	r3, #23
    6442:	e000      	b.n	6446 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    6444:	2300      	movs	r3, #0
}
    6446:	0018      	movs	r0, r3
    6448:	46bd      	mov	sp, r7
    644a:	b002      	add	sp, #8
    644c:	bd80      	pop	{r7, pc}
    644e:	46c0      	nop			; (mov r8, r8)
    6450:	40000400 	.word	0x40000400

00006454 <system_interrupt_enter_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
    6454:	b580      	push	{r7, lr}
    6456:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    6458:	4b02      	ldr	r3, [pc, #8]	; (6464 <system_interrupt_enter_critical_section+0x10>)
    645a:	4798      	blx	r3
}
    645c:	46c0      	nop			; (mov r8, r8)
    645e:	46bd      	mov	sp, r7
    6460:	bd80      	pop	{r7, pc}
    6462:	46c0      	nop			; (mov r8, r8)
    6464:	00003521 	.word	0x00003521

00006468 <system_interrupt_leave_critical_section>:
 * count of the critical section nesting will be kept, so that global interrupts
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
    6468:	b580      	push	{r7, lr}
    646a:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    646c:	4b02      	ldr	r3, [pc, #8]	; (6478 <system_interrupt_leave_critical_section+0x10>)
    646e:	4798      	blx	r3
}
    6470:	46c0      	nop			; (mov r8, r8)
    6472:	46bd      	mov	sp, r7
    6474:	bd80      	pop	{r7, pc}
    6476:	46c0      	nop			; (mov r8, r8)
    6478:	00003575 	.word	0x00003575

0000647c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    647c:	b580      	push	{r7, lr}
    647e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    6480:	4b05      	ldr	r3, [pc, #20]	; (6498 <system_gclk_is_syncing+0x1c>)
    6482:	785b      	ldrb	r3, [r3, #1]
    6484:	b2db      	uxtb	r3, r3
    6486:	b25b      	sxtb	r3, r3
    6488:	2b00      	cmp	r3, #0
    648a:	da01      	bge.n	6490 <system_gclk_is_syncing+0x14>
		return true;
    648c:	2301      	movs	r3, #1
    648e:	e000      	b.n	6492 <system_gclk_is_syncing+0x16>
	}

	return false;
    6490:	2300      	movs	r3, #0
}
    6492:	0018      	movs	r0, r3
    6494:	46bd      	mov	sp, r7
    6496:	bd80      	pop	{r7, pc}
    6498:	40000c00 	.word	0x40000c00

0000649c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    649c:	b580      	push	{r7, lr}
    649e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    64a0:	2108      	movs	r1, #8
    64a2:	2000      	movs	r0, #0
    64a4:	4b07      	ldr	r3, [pc, #28]	; (64c4 <system_gclk_init+0x28>)
    64a6:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    64a8:	4b07      	ldr	r3, [pc, #28]	; (64c8 <system_gclk_init+0x2c>)
    64aa:	2201      	movs	r2, #1
    64ac:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    64ae:	46c0      	nop			; (mov r8, r8)
    64b0:	4b05      	ldr	r3, [pc, #20]	; (64c8 <system_gclk_init+0x2c>)
    64b2:	781b      	ldrb	r3, [r3, #0]
    64b4:	b2db      	uxtb	r3, r3
    64b6:	001a      	movs	r2, r3
    64b8:	2301      	movs	r3, #1
    64ba:	4013      	ands	r3, r2
    64bc:	d1f8      	bne.n	64b0 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    64be:	46c0      	nop			; (mov r8, r8)
    64c0:	46bd      	mov	sp, r7
    64c2:	bd80      	pop	{r7, pc}
    64c4:	000063f9 	.word	0x000063f9
    64c8:	40000c00 	.word	0x40000c00

000064cc <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    64cc:	b580      	push	{r7, lr}
    64ce:	b086      	sub	sp, #24
    64d0:	af00      	add	r7, sp, #0
    64d2:	0002      	movs	r2, r0
    64d4:	6039      	str	r1, [r7, #0]
    64d6:	1dfb      	adds	r3, r7, #7
    64d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    64da:	1dfb      	adds	r3, r7, #7
    64dc:	781b      	ldrb	r3, [r3, #0]
    64de:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    64e0:	1dfb      	adds	r3, r7, #7
    64e2:	781b      	ldrb	r3, [r3, #0]
    64e4:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    64e6:	683b      	ldr	r3, [r7, #0]
    64e8:	781b      	ldrb	r3, [r3, #0]
    64ea:	021b      	lsls	r3, r3, #8
    64ec:	001a      	movs	r2, r3
    64ee:	697b      	ldr	r3, [r7, #20]
    64f0:	4313      	orrs	r3, r2
    64f2:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    64f4:	683b      	ldr	r3, [r7, #0]
    64f6:	785b      	ldrb	r3, [r3, #1]
    64f8:	2b00      	cmp	r3, #0
    64fa:	d004      	beq.n	6506 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    64fc:	697b      	ldr	r3, [r7, #20]
    64fe:	2280      	movs	r2, #128	; 0x80
    6500:	02d2      	lsls	r2, r2, #11
    6502:	4313      	orrs	r3, r2
    6504:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    6506:	683b      	ldr	r3, [r7, #0]
    6508:	7a5b      	ldrb	r3, [r3, #9]
    650a:	2b00      	cmp	r3, #0
    650c:	d004      	beq.n	6518 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    650e:	697b      	ldr	r3, [r7, #20]
    6510:	2280      	movs	r2, #128	; 0x80
    6512:	0312      	lsls	r2, r2, #12
    6514:	4313      	orrs	r3, r2
    6516:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    6518:	683b      	ldr	r3, [r7, #0]
    651a:	685b      	ldr	r3, [r3, #4]
    651c:	2b01      	cmp	r3, #1
    651e:	d92c      	bls.n	657a <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6520:	683b      	ldr	r3, [r7, #0]
    6522:	685a      	ldr	r2, [r3, #4]
    6524:	683b      	ldr	r3, [r7, #0]
    6526:	685b      	ldr	r3, [r3, #4]
    6528:	3b01      	subs	r3, #1
    652a:	4013      	ands	r3, r2
    652c:	d11a      	bne.n	6564 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    652e:	2300      	movs	r3, #0
    6530:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6532:	2302      	movs	r3, #2
    6534:	60bb      	str	r3, [r7, #8]
    6536:	e005      	b.n	6544 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    6538:	68fb      	ldr	r3, [r7, #12]
    653a:	3301      	adds	r3, #1
    653c:	60fb      	str	r3, [r7, #12]

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    653e:	68bb      	ldr	r3, [r7, #8]
    6540:	005b      	lsls	r3, r3, #1
    6542:	60bb      	str	r3, [r7, #8]
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6544:	683b      	ldr	r3, [r7, #0]
    6546:	685a      	ldr	r2, [r3, #4]
    6548:	68bb      	ldr	r3, [r7, #8]
    654a:	429a      	cmp	r2, r3
    654c:	d8f4      	bhi.n	6538 <system_gclk_gen_set_config+0x6c>
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    654e:	68fb      	ldr	r3, [r7, #12]
    6550:	021b      	lsls	r3, r3, #8
    6552:	693a      	ldr	r2, [r7, #16]
    6554:	4313      	orrs	r3, r2
    6556:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    6558:	697b      	ldr	r3, [r7, #20]
    655a:	2280      	movs	r2, #128	; 0x80
    655c:	0352      	lsls	r2, r2, #13
    655e:	4313      	orrs	r3, r2
    6560:	617b      	str	r3, [r7, #20]
    6562:	e00a      	b.n	657a <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6564:	683b      	ldr	r3, [r7, #0]
    6566:	685b      	ldr	r3, [r3, #4]
    6568:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    656a:	693a      	ldr	r2, [r7, #16]
    656c:	4313      	orrs	r3, r2
    656e:	613b      	str	r3, [r7, #16]
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6570:	697b      	ldr	r3, [r7, #20]
    6572:	2280      	movs	r2, #128	; 0x80
    6574:	0292      	lsls	r2, r2, #10
    6576:	4313      	orrs	r3, r2
    6578:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    657a:	683b      	ldr	r3, [r7, #0]
    657c:	7a1b      	ldrb	r3, [r3, #8]
    657e:	2b00      	cmp	r3, #0
    6580:	d004      	beq.n	658c <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    6582:	697b      	ldr	r3, [r7, #20]
    6584:	2280      	movs	r2, #128	; 0x80
    6586:	0392      	lsls	r2, r2, #14
    6588:	4313      	orrs	r3, r2
    658a:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    658c:	46c0      	nop			; (mov r8, r8)
    658e:	4b13      	ldr	r3, [pc, #76]	; (65dc <system_gclk_gen_set_config+0x110>)
    6590:	4798      	blx	r3
    6592:	1e03      	subs	r3, r0, #0
    6594:	d1fb      	bne.n	658e <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6596:	4b12      	ldr	r3, [pc, #72]	; (65e0 <system_gclk_gen_set_config+0x114>)
    6598:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    659a:	4a12      	ldr	r2, [pc, #72]	; (65e4 <system_gclk_gen_set_config+0x118>)
    659c:	1dfb      	adds	r3, r7, #7
    659e:	781b      	ldrb	r3, [r3, #0]
    65a0:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    65a2:	46c0      	nop			; (mov r8, r8)
    65a4:	4b0d      	ldr	r3, [pc, #52]	; (65dc <system_gclk_gen_set_config+0x110>)
    65a6:	4798      	blx	r3
    65a8:	1e03      	subs	r3, r0, #0
    65aa:	d1fb      	bne.n	65a4 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    65ac:	4b0e      	ldr	r3, [pc, #56]	; (65e8 <system_gclk_gen_set_config+0x11c>)
    65ae:	693a      	ldr	r2, [r7, #16]
    65b0:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    65b2:	46c0      	nop			; (mov r8, r8)
    65b4:	4b09      	ldr	r3, [pc, #36]	; (65dc <system_gclk_gen_set_config+0x110>)
    65b6:	4798      	blx	r3
    65b8:	1e03      	subs	r3, r0, #0
    65ba:	d1fb      	bne.n	65b4 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    65bc:	4b0a      	ldr	r3, [pc, #40]	; (65e8 <system_gclk_gen_set_config+0x11c>)
    65be:	4a0a      	ldr	r2, [pc, #40]	; (65e8 <system_gclk_gen_set_config+0x11c>)
    65c0:	6851      	ldr	r1, [r2, #4]
    65c2:	2280      	movs	r2, #128	; 0x80
    65c4:	0252      	lsls	r2, r2, #9
    65c6:	4011      	ands	r1, r2
    65c8:	697a      	ldr	r2, [r7, #20]
    65ca:	430a      	orrs	r2, r1
    65cc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    65ce:	4b07      	ldr	r3, [pc, #28]	; (65ec <system_gclk_gen_set_config+0x120>)
    65d0:	4798      	blx	r3
}
    65d2:	46c0      	nop			; (mov r8, r8)
    65d4:	46bd      	mov	sp, r7
    65d6:	b006      	add	sp, #24
    65d8:	bd80      	pop	{r7, pc}
    65da:	46c0      	nop			; (mov r8, r8)
    65dc:	0000647d 	.word	0x0000647d
    65e0:	00006455 	.word	0x00006455
    65e4:	40000c08 	.word	0x40000c08
    65e8:	40000c00 	.word	0x40000c00
    65ec:	00006469 	.word	0x00006469

000065f0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    65f0:	b580      	push	{r7, lr}
    65f2:	b082      	sub	sp, #8
    65f4:	af00      	add	r7, sp, #0
    65f6:	0002      	movs	r2, r0
    65f8:	1dfb      	adds	r3, r7, #7
    65fa:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    65fc:	46c0      	nop			; (mov r8, r8)
    65fe:	4b0e      	ldr	r3, [pc, #56]	; (6638 <system_gclk_gen_enable+0x48>)
    6600:	4798      	blx	r3
    6602:	1e03      	subs	r3, r0, #0
    6604:	d1fb      	bne.n	65fe <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6606:	4b0d      	ldr	r3, [pc, #52]	; (663c <system_gclk_gen_enable+0x4c>)
    6608:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    660a:	4a0d      	ldr	r2, [pc, #52]	; (6640 <system_gclk_gen_enable+0x50>)
    660c:	1dfb      	adds	r3, r7, #7
    660e:	781b      	ldrb	r3, [r3, #0]
    6610:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6612:	46c0      	nop			; (mov r8, r8)
    6614:	4b08      	ldr	r3, [pc, #32]	; (6638 <system_gclk_gen_enable+0x48>)
    6616:	4798      	blx	r3
    6618:	1e03      	subs	r3, r0, #0
    661a:	d1fb      	bne.n	6614 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    661c:	4b09      	ldr	r3, [pc, #36]	; (6644 <system_gclk_gen_enable+0x54>)
    661e:	4a09      	ldr	r2, [pc, #36]	; (6644 <system_gclk_gen_enable+0x54>)
    6620:	6852      	ldr	r2, [r2, #4]
    6622:	2180      	movs	r1, #128	; 0x80
    6624:	0249      	lsls	r1, r1, #9
    6626:	430a      	orrs	r2, r1
    6628:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    662a:	4b07      	ldr	r3, [pc, #28]	; (6648 <system_gclk_gen_enable+0x58>)
    662c:	4798      	blx	r3
}
    662e:	46c0      	nop			; (mov r8, r8)
    6630:	46bd      	mov	sp, r7
    6632:	b002      	add	sp, #8
    6634:	bd80      	pop	{r7, pc}
    6636:	46c0      	nop			; (mov r8, r8)
    6638:	0000647d 	.word	0x0000647d
    663c:	00006455 	.word	0x00006455
    6640:	40000c04 	.word	0x40000c04
    6644:	40000c00 	.word	0x40000c00
    6648:	00006469 	.word	0x00006469

0000664c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    664c:	b580      	push	{r7, lr}
    664e:	b086      	sub	sp, #24
    6650:	af00      	add	r7, sp, #0
    6652:	0002      	movs	r2, r0
    6654:	1dfb      	adds	r3, r7, #7
    6656:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6658:	46c0      	nop			; (mov r8, r8)
    665a:	4b2a      	ldr	r3, [pc, #168]	; (6704 <system_gclk_gen_get_hz+0xb8>)
    665c:	4798      	blx	r3
    665e:	1e03      	subs	r3, r0, #0
    6660:	d1fb      	bne.n	665a <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6662:	4b29      	ldr	r3, [pc, #164]	; (6708 <system_gclk_gen_get_hz+0xbc>)
    6664:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    6666:	4a29      	ldr	r2, [pc, #164]	; (670c <system_gclk_gen_get_hz+0xc0>)
    6668:	1dfb      	adds	r3, r7, #7
    666a:	781b      	ldrb	r3, [r3, #0]
    666c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    666e:	46c0      	nop			; (mov r8, r8)
    6670:	4b24      	ldr	r3, [pc, #144]	; (6704 <system_gclk_gen_get_hz+0xb8>)
    6672:	4798      	blx	r3
    6674:	1e03      	subs	r3, r0, #0
    6676:	d1fb      	bne.n	6670 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    6678:	4b25      	ldr	r3, [pc, #148]	; (6710 <system_gclk_gen_get_hz+0xc4>)
    667a:	685b      	ldr	r3, [r3, #4]
    667c:	04db      	lsls	r3, r3, #19
    667e:	0edb      	lsrs	r3, r3, #27
    6680:	b2db      	uxtb	r3, r3
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    6682:	0018      	movs	r0, r3
    6684:	4b23      	ldr	r3, [pc, #140]	; (6714 <system_gclk_gen_get_hz+0xc8>)
    6686:	4798      	blx	r3
    6688:	0003      	movs	r3, r0
    668a:	617b      	str	r3, [r7, #20]
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    668c:	4a1f      	ldr	r2, [pc, #124]	; (670c <system_gclk_gen_get_hz+0xc0>)
    668e:	1dfb      	adds	r3, r7, #7
    6690:	781b      	ldrb	r3, [r3, #0]
    6692:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    6694:	4b1e      	ldr	r3, [pc, #120]	; (6710 <system_gclk_gen_get_hz+0xc4>)
    6696:	685b      	ldr	r3, [r3, #4]
    6698:	02db      	lsls	r3, r3, #11
    669a:	0fdb      	lsrs	r3, r3, #31
    669c:	b2da      	uxtb	r2, r3
    669e:	2313      	movs	r3, #19
    66a0:	18fb      	adds	r3, r7, r3
    66a2:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    66a4:	4a1c      	ldr	r2, [pc, #112]	; (6718 <system_gclk_gen_get_hz+0xcc>)
    66a6:	1dfb      	adds	r3, r7, #7
    66a8:	781b      	ldrb	r3, [r3, #0]
    66aa:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    66ac:	46c0      	nop			; (mov r8, r8)
    66ae:	4b15      	ldr	r3, [pc, #84]	; (6704 <system_gclk_gen_get_hz+0xb8>)
    66b0:	4798      	blx	r3
    66b2:	1e03      	subs	r3, r0, #0
    66b4:	d1fb      	bne.n	66ae <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    66b6:	4b16      	ldr	r3, [pc, #88]	; (6710 <system_gclk_gen_get_hz+0xc4>)
    66b8:	689b      	ldr	r3, [r3, #8]
    66ba:	021b      	lsls	r3, r3, #8
    66bc:	0c1b      	lsrs	r3, r3, #16
    66be:	b29b      	uxth	r3, r3
    66c0:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    66c2:	4b16      	ldr	r3, [pc, #88]	; (671c <system_gclk_gen_get_hz+0xd0>)
    66c4:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    66c6:	2313      	movs	r3, #19
    66c8:	18fb      	adds	r3, r7, r3
    66ca:	781b      	ldrb	r3, [r3, #0]
    66cc:	2b00      	cmp	r3, #0
    66ce:	d109      	bne.n	66e4 <system_gclk_gen_get_hz+0x98>
    66d0:	68fb      	ldr	r3, [r7, #12]
    66d2:	2b01      	cmp	r3, #1
    66d4:	d906      	bls.n	66e4 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    66d6:	4b12      	ldr	r3, [pc, #72]	; (6720 <system_gclk_gen_get_hz+0xd4>)
    66d8:	68f9      	ldr	r1, [r7, #12]
    66da:	6978      	ldr	r0, [r7, #20]
    66dc:	4798      	blx	r3
    66de:	0003      	movs	r3, r0
    66e0:	617b      	str	r3, [r7, #20]
    66e2:	e00a      	b.n	66fa <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    66e4:	2313      	movs	r3, #19
    66e6:	18fb      	adds	r3, r7, r3
    66e8:	781b      	ldrb	r3, [r3, #0]
    66ea:	2b00      	cmp	r3, #0
    66ec:	d005      	beq.n	66fa <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    66ee:	68fb      	ldr	r3, [r7, #12]
    66f0:	3301      	adds	r3, #1
    66f2:	697a      	ldr	r2, [r7, #20]
    66f4:	40da      	lsrs	r2, r3
    66f6:	0013      	movs	r3, r2
    66f8:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    66fa:	697b      	ldr	r3, [r7, #20]
}
    66fc:	0018      	movs	r0, r3
    66fe:	46bd      	mov	sp, r7
    6700:	b006      	add	sp, #24
    6702:	bd80      	pop	{r7, pc}
    6704:	0000647d 	.word	0x0000647d
    6708:	00006455 	.word	0x00006455
    670c:	40000c04 	.word	0x40000c04
    6710:	40000c00 	.word	0x40000c00
    6714:	00005cb5 	.word	0x00005cb5
    6718:	40000c08 	.word	0x40000c08
    671c:	00006469 	.word	0x00006469
    6720:	00009e39 	.word	0x00009e39

00006724 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6724:	b580      	push	{r7, lr}
    6726:	b084      	sub	sp, #16
    6728:	af00      	add	r7, sp, #0
    672a:	0002      	movs	r2, r0
    672c:	6039      	str	r1, [r7, #0]
    672e:	1dfb      	adds	r3, r7, #7
    6730:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6732:	1dfb      	adds	r3, r7, #7
    6734:	781b      	ldrb	r3, [r3, #0]
    6736:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    6738:	683b      	ldr	r3, [r7, #0]
    673a:	781b      	ldrb	r3, [r3, #0]
    673c:	021b      	lsls	r3, r3, #8
    673e:	001a      	movs	r2, r3
    6740:	68fb      	ldr	r3, [r7, #12]
    6742:	4313      	orrs	r3, r2
    6744:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    6746:	1dfb      	adds	r3, r7, #7
    6748:	781b      	ldrb	r3, [r3, #0]
    674a:	0018      	movs	r0, r3
    674c:	4b04      	ldr	r3, [pc, #16]	; (6760 <system_gclk_chan_set_config+0x3c>)
    674e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6750:	4b04      	ldr	r3, [pc, #16]	; (6764 <system_gclk_chan_set_config+0x40>)
    6752:	68fa      	ldr	r2, [r7, #12]
    6754:	b292      	uxth	r2, r2
    6756:	805a      	strh	r2, [r3, #2]
}
    6758:	46c0      	nop			; (mov r8, r8)
    675a:	46bd      	mov	sp, r7
    675c:	b004      	add	sp, #16
    675e:	bd80      	pop	{r7, pc}
    6760:	000067b1 	.word	0x000067b1
    6764:	40000c00 	.word	0x40000c00

00006768 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    6768:	b580      	push	{r7, lr}
    676a:	b082      	sub	sp, #8
    676c:	af00      	add	r7, sp, #0
    676e:	0002      	movs	r2, r0
    6770:	1dfb      	adds	r3, r7, #7
    6772:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6774:	4b0a      	ldr	r3, [pc, #40]	; (67a0 <system_gclk_chan_enable+0x38>)
    6776:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6778:	4a0a      	ldr	r2, [pc, #40]	; (67a4 <system_gclk_chan_enable+0x3c>)
    677a:	1dfb      	adds	r3, r7, #7
    677c:	781b      	ldrb	r3, [r3, #0]
    677e:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    6780:	4909      	ldr	r1, [pc, #36]	; (67a8 <system_gclk_chan_enable+0x40>)
    6782:	4b09      	ldr	r3, [pc, #36]	; (67a8 <system_gclk_chan_enable+0x40>)
    6784:	885b      	ldrh	r3, [r3, #2]
    6786:	b29b      	uxth	r3, r3
    6788:	2280      	movs	r2, #128	; 0x80
    678a:	01d2      	lsls	r2, r2, #7
    678c:	4313      	orrs	r3, r2
    678e:	b29b      	uxth	r3, r3
    6790:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    6792:	4b06      	ldr	r3, [pc, #24]	; (67ac <system_gclk_chan_enable+0x44>)
    6794:	4798      	blx	r3
}
    6796:	46c0      	nop			; (mov r8, r8)
    6798:	46bd      	mov	sp, r7
    679a:	b002      	add	sp, #8
    679c:	bd80      	pop	{r7, pc}
    679e:	46c0      	nop			; (mov r8, r8)
    67a0:	00006455 	.word	0x00006455
    67a4:	40000c02 	.word	0x40000c02
    67a8:	40000c00 	.word	0x40000c00
    67ac:	00006469 	.word	0x00006469

000067b0 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    67b0:	b580      	push	{r7, lr}
    67b2:	b084      	sub	sp, #16
    67b4:	af00      	add	r7, sp, #0
    67b6:	0002      	movs	r2, r0
    67b8:	1dfb      	adds	r3, r7, #7
    67ba:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    67bc:	4b1c      	ldr	r3, [pc, #112]	; (6830 <system_gclk_chan_disable+0x80>)
    67be:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    67c0:	4a1c      	ldr	r2, [pc, #112]	; (6834 <system_gclk_chan_disable+0x84>)
    67c2:	1dfb      	adds	r3, r7, #7
    67c4:	781b      	ldrb	r3, [r3, #0]
    67c6:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    67c8:	4b1b      	ldr	r3, [pc, #108]	; (6838 <system_gclk_chan_disable+0x88>)
    67ca:	885b      	ldrh	r3, [r3, #2]
    67cc:	051b      	lsls	r3, r3, #20
    67ce:	0f1b      	lsrs	r3, r3, #28
    67d0:	b2db      	uxtb	r3, r3
    67d2:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    67d4:	4a18      	ldr	r2, [pc, #96]	; (6838 <system_gclk_chan_disable+0x88>)
    67d6:	8853      	ldrh	r3, [r2, #2]
    67d8:	4918      	ldr	r1, [pc, #96]	; (683c <system_gclk_chan_disable+0x8c>)
    67da:	400b      	ands	r3, r1
    67dc:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    67de:	4a16      	ldr	r2, [pc, #88]	; (6838 <system_gclk_chan_disable+0x88>)
    67e0:	4b15      	ldr	r3, [pc, #84]	; (6838 <system_gclk_chan_disable+0x88>)
    67e2:	885b      	ldrh	r3, [r3, #2]
    67e4:	b29b      	uxth	r3, r3
    67e6:	4916      	ldr	r1, [pc, #88]	; (6840 <system_gclk_chan_disable+0x90>)
    67e8:	400b      	ands	r3, r1
    67ea:	b29b      	uxth	r3, r3
    67ec:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    67ee:	46c0      	nop			; (mov r8, r8)
    67f0:	4b11      	ldr	r3, [pc, #68]	; (6838 <system_gclk_chan_disable+0x88>)
    67f2:	885b      	ldrh	r3, [r3, #2]
    67f4:	b29b      	uxth	r3, r3
    67f6:	001a      	movs	r2, r3
    67f8:	2380      	movs	r3, #128	; 0x80
    67fa:	01db      	lsls	r3, r3, #7
    67fc:	4013      	ands	r3, r2
    67fe:	d1f7      	bne.n	67f0 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6800:	4a0d      	ldr	r2, [pc, #52]	; (6838 <system_gclk_chan_disable+0x88>)
    6802:	68fb      	ldr	r3, [r7, #12]
    6804:	b2db      	uxtb	r3, r3
    6806:	1c19      	adds	r1, r3, #0
    6808:	230f      	movs	r3, #15
    680a:	400b      	ands	r3, r1
    680c:	b2d9      	uxtb	r1, r3
    680e:	8853      	ldrh	r3, [r2, #2]
    6810:	1c08      	adds	r0, r1, #0
    6812:	210f      	movs	r1, #15
    6814:	4001      	ands	r1, r0
    6816:	0208      	lsls	r0, r1, #8
    6818:	4908      	ldr	r1, [pc, #32]	; (683c <system_gclk_chan_disable+0x8c>)
    681a:	400b      	ands	r3, r1
    681c:	1c19      	adds	r1, r3, #0
    681e:	1c03      	adds	r3, r0, #0
    6820:	430b      	orrs	r3, r1
    6822:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6824:	4b07      	ldr	r3, [pc, #28]	; (6844 <system_gclk_chan_disable+0x94>)
    6826:	4798      	blx	r3
}
    6828:	46c0      	nop			; (mov r8, r8)
    682a:	46bd      	mov	sp, r7
    682c:	b004      	add	sp, #16
    682e:	bd80      	pop	{r7, pc}
    6830:	00006455 	.word	0x00006455
    6834:	40000c02 	.word	0x40000c02
    6838:	40000c00 	.word	0x40000c00
    683c:	fffff0ff 	.word	0xfffff0ff
    6840:	ffffbfff 	.word	0xffffbfff
    6844:	00006469 	.word	0x00006469

00006848 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    6848:	b580      	push	{r7, lr}
    684a:	b084      	sub	sp, #16
    684c:	af00      	add	r7, sp, #0
    684e:	0002      	movs	r2, r0
    6850:	1dfb      	adds	r3, r7, #7
    6852:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6854:	4b0d      	ldr	r3, [pc, #52]	; (688c <system_gclk_chan_get_hz+0x44>)
    6856:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    6858:	4a0d      	ldr	r2, [pc, #52]	; (6890 <system_gclk_chan_get_hz+0x48>)
    685a:	1dfb      	adds	r3, r7, #7
    685c:	781b      	ldrb	r3, [r3, #0]
    685e:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6860:	4b0c      	ldr	r3, [pc, #48]	; (6894 <system_gclk_chan_get_hz+0x4c>)
    6862:	885b      	ldrh	r3, [r3, #2]
    6864:	051b      	lsls	r3, r3, #20
    6866:	0f1b      	lsrs	r3, r3, #28
    6868:	b2da      	uxtb	r2, r3
    686a:	230f      	movs	r3, #15
    686c:	18fb      	adds	r3, r7, r3
    686e:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6870:	4b09      	ldr	r3, [pc, #36]	; (6898 <system_gclk_chan_get_hz+0x50>)
    6872:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6874:	230f      	movs	r3, #15
    6876:	18fb      	adds	r3, r7, r3
    6878:	781b      	ldrb	r3, [r3, #0]
    687a:	0018      	movs	r0, r3
    687c:	4b07      	ldr	r3, [pc, #28]	; (689c <system_gclk_chan_get_hz+0x54>)
    687e:	4798      	blx	r3
    6880:	0003      	movs	r3, r0
}
    6882:	0018      	movs	r0, r3
    6884:	46bd      	mov	sp, r7
    6886:	b004      	add	sp, #16
    6888:	bd80      	pop	{r7, pc}
    688a:	46c0      	nop			; (mov r8, r8)
    688c:	00006455 	.word	0x00006455
    6890:	40000c02 	.word	0x40000c02
    6894:	40000c00 	.word	0x40000c00
    6898:	00006469 	.word	0x00006469
    689c:	0000664d 	.word	0x0000664d

000068a0 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    68a0:	b580      	push	{r7, lr}
    68a2:	b084      	sub	sp, #16
    68a4:	af00      	add	r7, sp, #0
    68a6:	0002      	movs	r2, r0
    68a8:	1dfb      	adds	r3, r7, #7
    68aa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    68ac:	230f      	movs	r3, #15
    68ae:	18fb      	adds	r3, r7, r3
    68b0:	1dfa      	adds	r2, r7, #7
    68b2:	7812      	ldrb	r2, [r2, #0]
    68b4:	09d2      	lsrs	r2, r2, #7
    68b6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    68b8:	230e      	movs	r3, #14
    68ba:	18fb      	adds	r3, r7, r3
    68bc:	1dfa      	adds	r2, r7, #7
    68be:	7812      	ldrb	r2, [r2, #0]
    68c0:	0952      	lsrs	r2, r2, #5
    68c2:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    68c4:	4b0d      	ldr	r3, [pc, #52]	; (68fc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    68c6:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    68c8:	230f      	movs	r3, #15
    68ca:	18fb      	adds	r3, r7, r3
    68cc:	781b      	ldrb	r3, [r3, #0]
    68ce:	2b00      	cmp	r3, #0
    68d0:	d10f      	bne.n	68f2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    68d2:	230f      	movs	r3, #15
    68d4:	18fb      	adds	r3, r7, r3
    68d6:	781b      	ldrb	r3, [r3, #0]
    68d8:	009b      	lsls	r3, r3, #2
    68da:	2210      	movs	r2, #16
    68dc:	4694      	mov	ip, r2
    68de:	44bc      	add	ip, r7
    68e0:	4463      	add	r3, ip
    68e2:	3b08      	subs	r3, #8
    68e4:	681a      	ldr	r2, [r3, #0]
    68e6:	230e      	movs	r3, #14
    68e8:	18fb      	adds	r3, r7, r3
    68ea:	781b      	ldrb	r3, [r3, #0]
    68ec:	01db      	lsls	r3, r3, #7
    68ee:	18d3      	adds	r3, r2, r3
    68f0:	e000      	b.n	68f4 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    68f2:	2300      	movs	r3, #0
	}
}
    68f4:	0018      	movs	r0, r3
    68f6:	46bd      	mov	sp, r7
    68f8:	b004      	add	sp, #16
    68fa:	bd80      	pop	{r7, pc}
    68fc:	41004400 	.word	0x41004400

00006900 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6900:	b580      	push	{r7, lr}
    6902:	b088      	sub	sp, #32
    6904:	af00      	add	r7, sp, #0
    6906:	60f8      	str	r0, [r7, #12]
    6908:	60b9      	str	r1, [r7, #8]
    690a:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    690c:	2300      	movs	r3, #0
    690e:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6910:	687b      	ldr	r3, [r7, #4]
    6912:	78db      	ldrb	r3, [r3, #3]
    6914:	2201      	movs	r2, #1
    6916:	4053      	eors	r3, r2
    6918:	b2db      	uxtb	r3, r3
    691a:	2b00      	cmp	r3, #0
    691c:	d035      	beq.n	698a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    691e:	687b      	ldr	r3, [r7, #4]
    6920:	781b      	ldrb	r3, [r3, #0]
    6922:	2b80      	cmp	r3, #128	; 0x80
    6924:	d00b      	beq.n	693e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    6926:	69fb      	ldr	r3, [r7, #28]
    6928:	2280      	movs	r2, #128	; 0x80
    692a:	0252      	lsls	r2, r2, #9
    692c:	4313      	orrs	r3, r2
    692e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	781b      	ldrb	r3, [r3, #0]
    6934:	061b      	lsls	r3, r3, #24
    6936:	001a      	movs	r2, r3
    6938:	69fb      	ldr	r3, [r7, #28]
    693a:	4313      	orrs	r3, r2
    693c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    693e:	687b      	ldr	r3, [r7, #4]
    6940:	785b      	ldrb	r3, [r3, #1]
    6942:	2b00      	cmp	r3, #0
    6944:	d003      	beq.n	694e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6946:	687b      	ldr	r3, [r7, #4]
    6948:	785b      	ldrb	r3, [r3, #1]
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    694a:	2b02      	cmp	r3, #2
    694c:	d110      	bne.n	6970 <_system_pinmux_config+0x70>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    694e:	69fb      	ldr	r3, [r7, #28]
    6950:	2280      	movs	r2, #128	; 0x80
    6952:	0292      	lsls	r2, r2, #10
    6954:	4313      	orrs	r3, r2
    6956:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    6958:	687b      	ldr	r3, [r7, #4]
    695a:	789b      	ldrb	r3, [r3, #2]
    695c:	2b00      	cmp	r3, #0
    695e:	d004      	beq.n	696a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6960:	69fb      	ldr	r3, [r7, #28]
    6962:	2280      	movs	r2, #128	; 0x80
    6964:	02d2      	lsls	r2, r2, #11
    6966:	4313      	orrs	r3, r2
    6968:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    696a:	68fb      	ldr	r3, [r7, #12]
    696c:	68ba      	ldr	r2, [r7, #8]
    696e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6970:	687b      	ldr	r3, [r7, #4]
    6972:	785b      	ldrb	r3, [r3, #1]
    6974:	2b01      	cmp	r3, #1
    6976:	d003      	beq.n	6980 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	785b      	ldrb	r3, [r3, #1]
			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    697c:	2b02      	cmp	r3, #2
    697e:	d107      	bne.n	6990 <_system_pinmux_config+0x90>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    6980:	69fb      	ldr	r3, [r7, #28]
    6982:	4a22      	ldr	r2, [pc, #136]	; (6a0c <_system_pinmux_config+0x10c>)
    6984:	4013      	ands	r3, r2
    6986:	61fb      	str	r3, [r7, #28]
    6988:	e002      	b.n	6990 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    698a:	68fb      	ldr	r3, [r7, #12]
    698c:	68ba      	ldr	r2, [r7, #8]
    698e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    6990:	68bb      	ldr	r3, [r7, #8]
    6992:	041b      	lsls	r3, r3, #16
    6994:	0c1b      	lsrs	r3, r3, #16
    6996:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    6998:	68bb      	ldr	r3, [r7, #8]
    699a:	0c1b      	lsrs	r3, r3, #16
    699c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    699e:	69ba      	ldr	r2, [r7, #24]
    69a0:	69fb      	ldr	r3, [r7, #28]
    69a2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    69a4:	22a0      	movs	r2, #160	; 0xa0
    69a6:	05d2      	lsls	r2, r2, #23
    69a8:	431a      	orrs	r2, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    69aa:	68fb      	ldr	r3, [r7, #12]
    69ac:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    69ae:	697a      	ldr	r2, [r7, #20]
    69b0:	69fb      	ldr	r3, [r7, #28]
    69b2:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    69b4:	22d0      	movs	r2, #208	; 0xd0
    69b6:	0612      	lsls	r2, r2, #24
    69b8:	431a      	orrs	r2, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    69ba:	68fb      	ldr	r3, [r7, #12]
    69bc:	629a      	str	r2, [r3, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    69be:	687b      	ldr	r3, [r7, #4]
    69c0:	78db      	ldrb	r3, [r3, #3]
    69c2:	2201      	movs	r2, #1
    69c4:	4053      	eors	r3, r2
    69c6:	b2db      	uxtb	r3, r3
    69c8:	2b00      	cmp	r3, #0
    69ca:	d01a      	beq.n	6a02 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    69cc:	69fa      	ldr	r2, [r7, #28]
    69ce:	2380      	movs	r3, #128	; 0x80
    69d0:	02db      	lsls	r3, r3, #11
    69d2:	4013      	ands	r3, r2
    69d4:	d00a      	beq.n	69ec <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    69d6:	687b      	ldr	r3, [r7, #4]
    69d8:	789b      	ldrb	r3, [r3, #2]
    69da:	2b01      	cmp	r3, #1
    69dc:	d103      	bne.n	69e6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    69de:	68fb      	ldr	r3, [r7, #12]
    69e0:	68ba      	ldr	r2, [r7, #8]
    69e2:	619a      	str	r2, [r3, #24]
    69e4:	e002      	b.n	69ec <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    69e6:	68fb      	ldr	r3, [r7, #12]
    69e8:	68ba      	ldr	r2, [r7, #8]
    69ea:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    69ec:	687b      	ldr	r3, [r7, #4]
    69ee:	785b      	ldrb	r3, [r3, #1]
    69f0:	2b01      	cmp	r3, #1
    69f2:	d003      	beq.n	69fc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    69f4:	687b      	ldr	r3, [r7, #4]
    69f6:	785b      	ldrb	r3, [r3, #1]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    69f8:	2b02      	cmp	r3, #2
    69fa:	d102      	bne.n	6a02 <_system_pinmux_config+0x102>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    69fc:	68fb      	ldr	r3, [r7, #12]
    69fe:	68ba      	ldr	r2, [r7, #8]
    6a00:	609a      	str	r2, [r3, #8]
		}
	}
}
    6a02:	46c0      	nop			; (mov r8, r8)
    6a04:	46bd      	mov	sp, r7
    6a06:	b008      	add	sp, #32
    6a08:	bd80      	pop	{r7, pc}
    6a0a:	46c0      	nop			; (mov r8, r8)
    6a0c:	fffbffff 	.word	0xfffbffff

00006a10 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6a10:	b580      	push	{r7, lr}
    6a12:	b084      	sub	sp, #16
    6a14:	af00      	add	r7, sp, #0
    6a16:	0002      	movs	r2, r0
    6a18:	6039      	str	r1, [r7, #0]
    6a1a:	1dfb      	adds	r3, r7, #7
    6a1c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6a1e:	1dfb      	adds	r3, r7, #7
    6a20:	781b      	ldrb	r3, [r3, #0]
    6a22:	0018      	movs	r0, r3
    6a24:	4b0a      	ldr	r3, [pc, #40]	; (6a50 <system_pinmux_pin_set_config+0x40>)
    6a26:	4798      	blx	r3
    6a28:	0003      	movs	r3, r0
    6a2a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6a2c:	1dfb      	adds	r3, r7, #7
    6a2e:	781b      	ldrb	r3, [r3, #0]
    6a30:	221f      	movs	r2, #31
    6a32:	4013      	ands	r3, r2
    6a34:	2201      	movs	r2, #1
    6a36:	409a      	lsls	r2, r3
    6a38:	0013      	movs	r3, r2
    6a3a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6a3c:	683a      	ldr	r2, [r7, #0]
    6a3e:	68b9      	ldr	r1, [r7, #8]
    6a40:	68fb      	ldr	r3, [r7, #12]
    6a42:	0018      	movs	r0, r3
    6a44:	4b03      	ldr	r3, [pc, #12]	; (6a54 <system_pinmux_pin_set_config+0x44>)
    6a46:	4798      	blx	r3
}
    6a48:	46c0      	nop			; (mov r8, r8)
    6a4a:	46bd      	mov	sp, r7
    6a4c:	b004      	add	sp, #16
    6a4e:	bd80      	pop	{r7, pc}
    6a50:	000068a1 	.word	0x000068a1
    6a54:	00006901 	.word	0x00006901

00006a58 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    6a58:	b580      	push	{r7, lr}
    6a5a:	af00      	add	r7, sp, #0
	return;
    6a5c:	46c0      	nop			; (mov r8, r8)
}
    6a5e:	46bd      	mov	sp, r7
    6a60:	bd80      	pop	{r7, pc}
    6a62:	46c0      	nop			; (mov r8, r8)

00006a64 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6a64:	b580      	push	{r7, lr}
    6a66:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    6a68:	4b06      	ldr	r3, [pc, #24]	; (6a84 <system_init+0x20>)
    6a6a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6a6c:	4b06      	ldr	r3, [pc, #24]	; (6a88 <system_init+0x24>)
    6a6e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6a70:	4b06      	ldr	r3, [pc, #24]	; (6a8c <system_init+0x28>)
    6a72:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6a74:	4b06      	ldr	r3, [pc, #24]	; (6a90 <system_init+0x2c>)
    6a76:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    6a78:	4b06      	ldr	r3, [pc, #24]	; (6a94 <system_init+0x30>)
    6a7a:	4798      	blx	r3
}
    6a7c:	46c0      	nop			; (mov r8, r8)
    6a7e:	46bd      	mov	sp, r7
    6a80:	bd80      	pop	{r7, pc}
    6a82:	46c0      	nop			; (mov r8, r8)
    6a84:	00006141 	.word	0x00006141
    6a88:	000036b1 	.word	0x000036b1
    6a8c:	00006a59 	.word	0x00006a59
    6a90:	00003b8d 	.word	0x00003b8d
    6a94:	00006a59 	.word	0x00006a59

00006a98 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    6a98:	b580      	push	{r7, lr}
    6a9a:	af00      	add	r7, sp, #0
    6a9c:	2000      	movs	r0, #0
    6a9e:	4b02      	ldr	r3, [pc, #8]	; (6aa8 <TCC0_Handler+0x10>)
    6aa0:	4798      	blx	r3
    6aa2:	46c0      	nop			; (mov r8, r8)
    6aa4:	46bd      	mov	sp, r7
    6aa6:	bd80      	pop	{r7, pc}
    6aa8:	00006ad5 	.word	0x00006ad5

00006aac <TCC1_Handler>:
    6aac:	b580      	push	{r7, lr}
    6aae:	af00      	add	r7, sp, #0
    6ab0:	2001      	movs	r0, #1
    6ab2:	4b02      	ldr	r3, [pc, #8]	; (6abc <TCC1_Handler+0x10>)
    6ab4:	4798      	blx	r3
    6ab6:	46c0      	nop			; (mov r8, r8)
    6ab8:	46bd      	mov	sp, r7
    6aba:	bd80      	pop	{r7, pc}
    6abc:	00006ad5 	.word	0x00006ad5

00006ac0 <TCC2_Handler>:
    6ac0:	b580      	push	{r7, lr}
    6ac2:	af00      	add	r7, sp, #0
    6ac4:	2002      	movs	r0, #2
    6ac6:	4b02      	ldr	r3, [pc, #8]	; (6ad0 <TCC2_Handler+0x10>)
    6ac8:	4798      	blx	r3
    6aca:	46c0      	nop			; (mov r8, r8)
    6acc:	46bd      	mov	sp, r7
    6ace:	bd80      	pop	{r7, pc}
    6ad0:	00006ad5 	.word	0x00006ad5

00006ad4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    6ad4:	b580      	push	{r7, lr}
    6ad6:	b086      	sub	sp, #24
    6ad8:	af00      	add	r7, sp, #0
    6ada:	0002      	movs	r2, r0
    6adc:	1dfb      	adds	r3, r7, #7
    6ade:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    6ae0:	1dfb      	adds	r3, r7, #7
    6ae2:	781a      	ldrb	r2, [r3, #0]
{
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    6ae4:	4b18      	ldr	r3, [pc, #96]	; (6b48 <_tcc_interrupt_handler+0x74>)
    6ae6:	0092      	lsls	r2, r2, #2
    6ae8:	58d3      	ldr	r3, [r2, r3]
    6aea:	613b      	str	r3, [r7, #16]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6aec:	693b      	ldr	r3, [r7, #16]
    6aee:	681b      	ldr	r3, [r3, #0]
    6af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    6af2:	693b      	ldr	r3, [r7, #16]
    6af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6af6:	401a      	ands	r2, r3
			module->register_callback_mask &
			module->enable_callback_mask);
    6af8:	693b      	ldr	r3, [r7, #16]
    6afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    6afc:	4013      	ands	r3, r2
    6afe:	60fb      	str	r3, [r7, #12]
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6b00:	2300      	movs	r3, #0
    6b02:	617b      	str	r3, [r7, #20]
    6b04:	e019      	b.n	6b3a <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    6b06:	4b11      	ldr	r3, [pc, #68]	; (6b4c <_tcc_interrupt_handler+0x78>)
    6b08:	697a      	ldr	r2, [r7, #20]
    6b0a:	0092      	lsls	r2, r2, #2
    6b0c:	58d3      	ldr	r3, [r2, r3]
    6b0e:	68fa      	ldr	r2, [r7, #12]
    6b10:	4013      	ands	r3, r2
    6b12:	d00f      	beq.n	6b34 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    6b14:	693a      	ldr	r2, [r7, #16]
    6b16:	697b      	ldr	r3, [r7, #20]
    6b18:	009b      	lsls	r3, r3, #2
    6b1a:	18d3      	adds	r3, r2, r3
    6b1c:	3304      	adds	r3, #4
    6b1e:	681b      	ldr	r3, [r3, #0]
    6b20:	693a      	ldr	r2, [r7, #16]
    6b22:	0010      	movs	r0, r2
    6b24:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    6b26:	693b      	ldr	r3, [r7, #16]
    6b28:	681b      	ldr	r3, [r3, #0]
    6b2a:	4a08      	ldr	r2, [pc, #32]	; (6b4c <_tcc_interrupt_handler+0x78>)
    6b2c:	6979      	ldr	r1, [r7, #20]
    6b2e:	0089      	lsls	r1, r1, #2
    6b30:	588a      	ldr	r2, [r1, r2]
    6b32:	62da      	str	r2, [r3, #44]	; 0x2c
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    6b34:	697b      	ldr	r3, [r7, #20]
    6b36:	3301      	adds	r3, #1
    6b38:	617b      	str	r3, [r7, #20]
    6b3a:	697b      	ldr	r3, [r7, #20]
    6b3c:	2b0b      	cmp	r3, #11
    6b3e:	dde2      	ble.n	6b06 <_tcc_interrupt_handler+0x32>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
    6b40:	46c0      	nop			; (mov r8, r8)
    6b42:	46bd      	mov	sp, r7
    6b44:	b006      	add	sp, #24
    6b46:	bd80      	pop	{r7, pc}
    6b48:	200045d0 	.word	0x200045d0
    6b4c:	0000de0c 	.word	0x0000de0c

00006b50 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    6b50:	b580      	push	{r7, lr}
    6b52:	b082      	sub	sp, #8
    6b54:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    6b56:	4b2f      	ldr	r3, [pc, #188]	; (6c14 <Reset_Handler+0xc4>)
    6b58:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    6b5a:	4b2f      	ldr	r3, [pc, #188]	; (6c18 <Reset_Handler+0xc8>)
    6b5c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    6b5e:	687a      	ldr	r2, [r7, #4]
    6b60:	683b      	ldr	r3, [r7, #0]
    6b62:	429a      	cmp	r2, r3
    6b64:	d00c      	beq.n	6b80 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    6b66:	e007      	b.n	6b78 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    6b68:	683b      	ldr	r3, [r7, #0]
    6b6a:	1d1a      	adds	r2, r3, #4
    6b6c:	603a      	str	r2, [r7, #0]
    6b6e:	687a      	ldr	r2, [r7, #4]
    6b70:	1d11      	adds	r1, r2, #4
    6b72:	6079      	str	r1, [r7, #4]
    6b74:	6812      	ldr	r2, [r2, #0]
    6b76:	601a      	str	r2, [r3, #0]
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    6b78:	683a      	ldr	r2, [r7, #0]
    6b7a:	4b28      	ldr	r3, [pc, #160]	; (6c1c <Reset_Handler+0xcc>)
    6b7c:	429a      	cmp	r2, r3
    6b7e:	d3f3      	bcc.n	6b68 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6b80:	4b27      	ldr	r3, [pc, #156]	; (6c20 <Reset_Handler+0xd0>)
    6b82:	603b      	str	r3, [r7, #0]
    6b84:	e004      	b.n	6b90 <Reset_Handler+0x40>
                *pDest++ = 0;
    6b86:	683b      	ldr	r3, [r7, #0]
    6b88:	1d1a      	adds	r2, r3, #4
    6b8a:	603a      	str	r2, [r7, #0]
    6b8c:	2200      	movs	r2, #0
    6b8e:	601a      	str	r2, [r3, #0]
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    6b90:	683a      	ldr	r2, [r7, #0]
    6b92:	4b24      	ldr	r3, [pc, #144]	; (6c24 <Reset_Handler+0xd4>)
    6b94:	429a      	cmp	r2, r3
    6b96:	d3f6      	bcc.n	6b86 <Reset_Handler+0x36>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6b98:	4b23      	ldr	r3, [pc, #140]	; (6c28 <Reset_Handler+0xd8>)
    6b9a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6b9c:	4b23      	ldr	r3, [pc, #140]	; (6c2c <Reset_Handler+0xdc>)
    6b9e:	687a      	ldr	r2, [r7, #4]
    6ba0:	21ff      	movs	r1, #255	; 0xff
    6ba2:	438a      	bics	r2, r1
    6ba4:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6ba6:	4a22      	ldr	r2, [pc, #136]	; (6c30 <Reset_Handler+0xe0>)
    6ba8:	2390      	movs	r3, #144	; 0x90
    6baa:	005b      	lsls	r3, r3, #1
    6bac:	2102      	movs	r1, #2
    6bae:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    6bb0:	4a20      	ldr	r2, [pc, #128]	; (6c34 <Reset_Handler+0xe4>)
    6bb2:	78d3      	ldrb	r3, [r2, #3]
    6bb4:	2103      	movs	r1, #3
    6bb6:	438b      	bics	r3, r1
    6bb8:	1c19      	adds	r1, r3, #0
    6bba:	2302      	movs	r3, #2
    6bbc:	430b      	orrs	r3, r1
    6bbe:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    6bc0:	4a1c      	ldr	r2, [pc, #112]	; (6c34 <Reset_Handler+0xe4>)
    6bc2:	78d3      	ldrb	r3, [r2, #3]
    6bc4:	210c      	movs	r1, #12
    6bc6:	438b      	bics	r3, r1
    6bc8:	1c19      	adds	r1, r3, #0
    6bca:	2308      	movs	r3, #8
    6bcc:	430b      	orrs	r3, r1
    6bce:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    6bd0:	4a19      	ldr	r2, [pc, #100]	; (6c38 <Reset_Handler+0xe8>)
    6bd2:	7b93      	ldrb	r3, [r2, #14]
    6bd4:	2130      	movs	r1, #48	; 0x30
    6bd6:	438b      	bics	r3, r1
    6bd8:	1c19      	adds	r1, r3, #0
    6bda:	2320      	movs	r3, #32
    6bdc:	430b      	orrs	r3, r1
    6bde:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    6be0:	4a15      	ldr	r2, [pc, #84]	; (6c38 <Reset_Handler+0xe8>)
    6be2:	7b93      	ldrb	r3, [r2, #14]
    6be4:	210c      	movs	r1, #12
    6be6:	438b      	bics	r3, r1
    6be8:	1c19      	adds	r1, r3, #0
    6bea:	2308      	movs	r3, #8
    6bec:	430b      	orrs	r3, r1
    6bee:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    6bf0:	4a11      	ldr	r2, [pc, #68]	; (6c38 <Reset_Handler+0xe8>)
    6bf2:	7b93      	ldrb	r3, [r2, #14]
    6bf4:	2103      	movs	r1, #3
    6bf6:	438b      	bics	r3, r1
    6bf8:	1c19      	adds	r1, r3, #0
    6bfa:	2302      	movs	r3, #2
    6bfc:	430b      	orrs	r3, r1
    6bfe:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    6c00:	4a0e      	ldr	r2, [pc, #56]	; (6c3c <Reset_Handler+0xec>)
    6c02:	6853      	ldr	r3, [r2, #4]
    6c04:	2180      	movs	r1, #128	; 0x80
    6c06:	430b      	orrs	r3, r1
    6c08:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6c0a:	4b0d      	ldr	r3, [pc, #52]	; (6c40 <Reset_Handler+0xf0>)
    6c0c:	4798      	blx	r3

        /* Branch to main function */
        main();
    6c0e:	4b0d      	ldr	r3, [pc, #52]	; (6c44 <Reset_Handler+0xf4>)
    6c10:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    6c12:	e7fe      	b.n	6c12 <Reset_Handler+0xc2>
    6c14:	0000e490 	.word	0x0000e490
    6c18:	20000000 	.word	0x20000000
    6c1c:	20000090 	.word	0x20000090
    6c20:	20000090 	.word	0x20000090
    6c24:	2000461c 	.word	0x2000461c
    6c28:	00000000 	.word	0x00000000
    6c2c:	e000ed00 	.word	0xe000ed00
    6c30:	41007000 	.word	0x41007000
    6c34:	41005000 	.word	0x41005000
    6c38:	41004800 	.word	0x41004800
    6c3c:	41004000 	.word	0x41004000
    6c40:	0000babd 	.word	0x0000babd
    6c44:	00009721 	.word	0x00009721

00006c48 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
 uint32_t phantomISR = 9999;
void Dummy_Handler(void)
{
    6c48:	b580      	push	{r7, lr}
    6c4a:	b082      	sub	sp, #8
    6c4c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6c4e:	f3ef 8305 	mrs	r3, IPSR
    6c52:	607b      	str	r3, [r7, #4]
  return(result);
    6c54:	687a      	ldr	r2, [r7, #4]
        while (1) {
            phantomISR = __get_IPSR();
    6c56:	4b01      	ldr	r3, [pc, #4]	; (6c5c <Dummy_Handler+0x14>)
    6c58:	601a      	str	r2, [r3, #0]
        }
    6c5a:	e7f8      	b.n	6c4e <Dummy_Handler+0x6>
    6c5c:	20000014 	.word	0x20000014

00006c60 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    6c60:	b580      	push	{r7, lr}
    6c62:	b086      	sub	sp, #24
    6c64:	af00      	add	r7, sp, #0
    6c66:	60f8      	str	r0, [r7, #12]
    6c68:	60b9      	str	r1, [r7, #8]
    6c6a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6c6c:	2300      	movs	r3, #0
    6c6e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    6c70:	68fb      	ldr	r3, [r7, #12]
    6c72:	2b00      	cmp	r3, #0
    6c74:	d012      	beq.n	6c9c <_read+0x3c>
		return -1;
    6c76:	2301      	movs	r3, #1
    6c78:	425b      	negs	r3, r3
    6c7a:	e013      	b.n	6ca4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    6c7c:	4b0b      	ldr	r3, [pc, #44]	; (6cac <_read+0x4c>)
    6c7e:	681a      	ldr	r2, [r3, #0]
    6c80:	4b0b      	ldr	r3, [pc, #44]	; (6cb0 <_read+0x50>)
    6c82:	681b      	ldr	r3, [r3, #0]
    6c84:	68b9      	ldr	r1, [r7, #8]
    6c86:	0018      	movs	r0, r3
    6c88:	4790      	blx	r2
		ptr++;
    6c8a:	68bb      	ldr	r3, [r7, #8]
    6c8c:	3301      	adds	r3, #1
    6c8e:	60bb      	str	r3, [r7, #8]
		nChars++;
    6c90:	697b      	ldr	r3, [r7, #20]
    6c92:	3301      	adds	r3, #1
    6c94:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    6c96:	687b      	ldr	r3, [r7, #4]
    6c98:	3b01      	subs	r3, #1
    6c9a:	607b      	str	r3, [r7, #4]
    6c9c:	687b      	ldr	r3, [r7, #4]
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	dcec      	bgt.n	6c7c <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
    6ca2:	697b      	ldr	r3, [r7, #20]
}
    6ca4:	0018      	movs	r0, r3
    6ca6:	46bd      	mov	sp, r7
    6ca8:	b006      	add	sp, #24
    6caa:	bd80      	pop	{r7, pc}
    6cac:	200045dc 	.word	0x200045dc
    6cb0:	200045e4 	.word	0x200045e4

00006cb4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6cb4:	b580      	push	{r7, lr}
    6cb6:	b086      	sub	sp, #24
    6cb8:	af00      	add	r7, sp, #0
    6cba:	60f8      	str	r0, [r7, #12]
    6cbc:	60b9      	str	r1, [r7, #8]
    6cbe:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6cc0:	2300      	movs	r3, #0
    6cc2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6cc4:	68fb      	ldr	r3, [r7, #12]
    6cc6:	2b01      	cmp	r3, #1
    6cc8:	d01d      	beq.n	6d06 <_write+0x52>
    6cca:	68fb      	ldr	r3, [r7, #12]
    6ccc:	2b02      	cmp	r3, #2
    6cce:	d01a      	beq.n	6d06 <_write+0x52>
    6cd0:	68fb      	ldr	r3, [r7, #12]
    6cd2:	2b03      	cmp	r3, #3
    6cd4:	d017      	beq.n	6d06 <_write+0x52>
		return -1;
    6cd6:	2301      	movs	r3, #1
    6cd8:	425b      	negs	r3, r3
    6cda:	e018      	b.n	6d0e <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6cdc:	4b0e      	ldr	r3, [pc, #56]	; (6d18 <_write+0x64>)
    6cde:	681a      	ldr	r2, [r3, #0]
    6ce0:	4b0e      	ldr	r3, [pc, #56]	; (6d1c <_write+0x68>)
    6ce2:	6818      	ldr	r0, [r3, #0]
    6ce4:	68bb      	ldr	r3, [r7, #8]
    6ce6:	1c59      	adds	r1, r3, #1
    6ce8:	60b9      	str	r1, [r7, #8]
    6cea:	781b      	ldrb	r3, [r3, #0]
    6cec:	0019      	movs	r1, r3
    6cee:	4790      	blx	r2
    6cf0:	1e03      	subs	r3, r0, #0
    6cf2:	da02      	bge.n	6cfa <_write+0x46>
			return -1;
    6cf4:	2301      	movs	r3, #1
    6cf6:	425b      	negs	r3, r3
    6cf8:	e009      	b.n	6d0e <_write+0x5a>
		}
		++nChars;
    6cfa:	697b      	ldr	r3, [r7, #20]
    6cfc:	3301      	adds	r3, #1
    6cfe:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    6d00:	687b      	ldr	r3, [r7, #4]
    6d02:	3b01      	subs	r3, #1
    6d04:	607b      	str	r3, [r7, #4]
    6d06:	687b      	ldr	r3, [r7, #4]
    6d08:	2b00      	cmp	r3, #0
    6d0a:	d1e7      	bne.n	6cdc <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
    6d0c:	697b      	ldr	r3, [r7, #20]
}
    6d0e:	0018      	movs	r0, r3
    6d10:	46bd      	mov	sp, r7
    6d12:	b006      	add	sp, #24
    6d14:	bd80      	pop	{r7, pc}
    6d16:	46c0      	nop			; (mov r8, r8)
    6d18:	200045e0 	.word	0x200045e0
    6d1c:	200045e4 	.word	0x200045e4

00006d20 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6d20:	b580      	push	{r7, lr}
    6d22:	b084      	sub	sp, #16
    6d24:	af00      	add	r7, sp, #0
    6d26:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6d28:	4b0a      	ldr	r3, [pc, #40]	; (6d54 <_sbrk+0x34>)
    6d2a:	681b      	ldr	r3, [r3, #0]
    6d2c:	2b00      	cmp	r3, #0
    6d2e:	d102      	bne.n	6d36 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6d30:	4b08      	ldr	r3, [pc, #32]	; (6d54 <_sbrk+0x34>)
    6d32:	4a09      	ldr	r2, [pc, #36]	; (6d58 <_sbrk+0x38>)
    6d34:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6d36:	4b07      	ldr	r3, [pc, #28]	; (6d54 <_sbrk+0x34>)
    6d38:	681b      	ldr	r3, [r3, #0]
    6d3a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6d3c:	4b05      	ldr	r3, [pc, #20]	; (6d54 <_sbrk+0x34>)
    6d3e:	681a      	ldr	r2, [r3, #0]
    6d40:	687b      	ldr	r3, [r7, #4]
    6d42:	18d2      	adds	r2, r2, r3
    6d44:	4b03      	ldr	r3, [pc, #12]	; (6d54 <_sbrk+0x34>)
    6d46:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6d48:	68fb      	ldr	r3, [r7, #12]
}
    6d4a:	0018      	movs	r0, r3
    6d4c:	46bd      	mov	sp, r7
    6d4e:	b004      	add	sp, #16
    6d50:	bd80      	pop	{r7, pc}
    6d52:	46c0      	nop			; (mov r8, r8)
    6d54:	20000104 	.word	0x20000104
    6d58:	20006620 	.word	0x20006620

00006d5c <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6d5c:	b580      	push	{r7, lr}
    6d5e:	b082      	sub	sp, #8
    6d60:	af00      	add	r7, sp, #0
    6d62:	6078      	str	r0, [r7, #4]
	return -1;
    6d64:	2301      	movs	r3, #1
    6d66:	425b      	negs	r3, r3
}
    6d68:	0018      	movs	r0, r3
    6d6a:	46bd      	mov	sp, r7
    6d6c:	b002      	add	sp, #8
    6d6e:	bd80      	pop	{r7, pc}

00006d70 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6d70:	b580      	push	{r7, lr}
    6d72:	b082      	sub	sp, #8
    6d74:	af00      	add	r7, sp, #0
    6d76:	6078      	str	r0, [r7, #4]
    6d78:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6d7a:	683b      	ldr	r3, [r7, #0]
    6d7c:	2280      	movs	r2, #128	; 0x80
    6d7e:	0192      	lsls	r2, r2, #6
    6d80:	605a      	str	r2, [r3, #4]

	return 0;
    6d82:	2300      	movs	r3, #0
}
    6d84:	0018      	movs	r0, r3
    6d86:	46bd      	mov	sp, r7
    6d88:	b002      	add	sp, #8
    6d8a:	bd80      	pop	{r7, pc}

00006d8c <_isatty>:

extern int _isatty(int file)
{
    6d8c:	b580      	push	{r7, lr}
    6d8e:	b082      	sub	sp, #8
    6d90:	af00      	add	r7, sp, #0
    6d92:	6078      	str	r0, [r7, #4]
	return 1;
    6d94:	2301      	movs	r3, #1
}
    6d96:	0018      	movs	r0, r3
    6d98:	46bd      	mov	sp, r7
    6d9a:	b002      	add	sp, #8
    6d9c:	bd80      	pop	{r7, pc}
    6d9e:	46c0      	nop			; (mov r8, r8)

00006da0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    6da0:	b580      	push	{r7, lr}
    6da2:	b084      	sub	sp, #16
    6da4:	af00      	add	r7, sp, #0
    6da6:	60f8      	str	r0, [r7, #12]
    6da8:	60b9      	str	r1, [r7, #8]
    6daa:	607a      	str	r2, [r7, #4]
	return 0;
    6dac:	2300      	movs	r3, #0
}
    6dae:	0018      	movs	r0, r3
    6db0:	46bd      	mov	sp, r7
    6db2:	b004      	add	sp, #16
    6db4:	bd80      	pop	{r7, pc}
    6db6:	46c0      	nop			; (mov r8, r8)

00006db8 <_exit>:

extern void _exit(int status)
{
    6db8:	b580      	push	{r7, lr}
    6dba:	b082      	sub	sp, #8
    6dbc:	af00      	add	r7, sp, #0
    6dbe:	6078      	str	r0, [r7, #4]
	asm("BKPT #0");
    6dc0:	be00      	bkpt	0x0000
}
    6dc2:	46c0      	nop			; (mov r8, r8)
    6dc4:	46bd      	mov	sp, r7
    6dc6:	b002      	add	sp, #8
    6dc8:	bd80      	pop	{r7, pc}
    6dca:	46c0      	nop			; (mov r8, r8)

00006dcc <_kill>:

extern void _kill(int pid, int sig)
{
    6dcc:	b580      	push	{r7, lr}
    6dce:	b082      	sub	sp, #8
    6dd0:	af00      	add	r7, sp, #0
    6dd2:	6078      	str	r0, [r7, #4]
    6dd4:	6039      	str	r1, [r7, #0]
	return;
    6dd6:	46c0      	nop			; (mov r8, r8)
}
    6dd8:	46bd      	mov	sp, r7
    6dda:	b002      	add	sp, #8
    6ddc:	bd80      	pop	{r7, pc}
    6dde:	46c0      	nop			; (mov r8, r8)

00006de0 <_getpid>:

extern int _getpid(void)
{
    6de0:	b580      	push	{r7, lr}
    6de2:	af00      	add	r7, sp, #0
	return -1;
    6de4:	2301      	movs	r3, #1
    6de6:	425b      	negs	r3, r3
}
    6de8:	0018      	movs	r0, r3
    6dea:	46bd      	mov	sp, r7
    6dec:	bd80      	pop	{r7, pc}
    6dee:	46c0      	nop			; (mov r8, r8)

00006df0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    6df0:	b580      	push	{r7, lr}
    6df2:	b082      	sub	sp, #8
    6df4:	af00      	add	r7, sp, #0
    6df6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6df8:	687b      	ldr	r3, [r7, #4]
    6dfa:	3308      	adds	r3, #8
    6dfc:	001a      	movs	r2, r3
    6dfe:	687b      	ldr	r3, [r7, #4]
    6e00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    6e02:	687b      	ldr	r3, [r7, #4]
    6e04:	2201      	movs	r2, #1
    6e06:	4252      	negs	r2, r2
    6e08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6e0a:	687b      	ldr	r3, [r7, #4]
    6e0c:	3308      	adds	r3, #8
    6e0e:	001a      	movs	r2, r3
    6e10:	687b      	ldr	r3, [r7, #4]
    6e12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6e14:	687b      	ldr	r3, [r7, #4]
    6e16:	3308      	adds	r3, #8
    6e18:	001a      	movs	r2, r3
    6e1a:	687b      	ldr	r3, [r7, #4]
    6e1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    6e1e:	687b      	ldr	r3, [r7, #4]
    6e20:	2200      	movs	r2, #0
    6e22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    6e24:	46c0      	nop			; (mov r8, r8)
    6e26:	46bd      	mov	sp, r7
    6e28:	b002      	add	sp, #8
    6e2a:	bd80      	pop	{r7, pc}

00006e2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    6e2c:	b580      	push	{r7, lr}
    6e2e:	b082      	sub	sp, #8
    6e30:	af00      	add	r7, sp, #0
    6e32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    6e34:	687b      	ldr	r3, [r7, #4]
    6e36:	2200      	movs	r2, #0
    6e38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    6e3a:	46c0      	nop			; (mov r8, r8)
    6e3c:	46bd      	mov	sp, r7
    6e3e:	b002      	add	sp, #8
    6e40:	bd80      	pop	{r7, pc}
    6e42:	46c0      	nop			; (mov r8, r8)

00006e44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    6e44:	b580      	push	{r7, lr}
    6e46:	b084      	sub	sp, #16
    6e48:	af00      	add	r7, sp, #0
    6e4a:	6078      	str	r0, [r7, #4]
    6e4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
    6e4e:	687b      	ldr	r3, [r7, #4]
    6e50:	685b      	ldr	r3, [r3, #4]
    6e52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    6e54:	683b      	ldr	r3, [r7, #0]
    6e56:	68fa      	ldr	r2, [r7, #12]
    6e58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    6e5a:	68fb      	ldr	r3, [r7, #12]
    6e5c:	689a      	ldr	r2, [r3, #8]
    6e5e:	683b      	ldr	r3, [r7, #0]
    6e60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    6e62:	68fb      	ldr	r3, [r7, #12]
    6e64:	689b      	ldr	r3, [r3, #8]
    6e66:	683a      	ldr	r2, [r7, #0]
    6e68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
    6e6a:	68fb      	ldr	r3, [r7, #12]
    6e6c:	683a      	ldr	r2, [r7, #0]
    6e6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6e70:	683b      	ldr	r3, [r7, #0]
    6e72:	687a      	ldr	r2, [r7, #4]
    6e74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6e76:	687b      	ldr	r3, [r7, #4]
    6e78:	681b      	ldr	r3, [r3, #0]
    6e7a:	1c5a      	adds	r2, r3, #1
    6e7c:	687b      	ldr	r3, [r7, #4]
    6e7e:	601a      	str	r2, [r3, #0]
}
    6e80:	46c0      	nop			; (mov r8, r8)
    6e82:	46bd      	mov	sp, r7
    6e84:	b004      	add	sp, #16
    6e86:	bd80      	pop	{r7, pc}

00006e88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    6e88:	b580      	push	{r7, lr}
    6e8a:	b084      	sub	sp, #16
    6e8c:	af00      	add	r7, sp, #0
    6e8e:	6078      	str	r0, [r7, #4]
    6e90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    6e92:	683b      	ldr	r3, [r7, #0]
    6e94:	681b      	ldr	r3, [r3, #0]
    6e96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    6e98:	68bb      	ldr	r3, [r7, #8]
    6e9a:	3301      	adds	r3, #1
    6e9c:	d103      	bne.n	6ea6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	691b      	ldr	r3, [r3, #16]
    6ea2:	60fb      	str	r3, [r7, #12]
    6ea4:	e00c      	b.n	6ec0 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    6ea6:	687b      	ldr	r3, [r7, #4]
    6ea8:	3308      	adds	r3, #8
    6eaa:	60fb      	str	r3, [r7, #12]
    6eac:	e002      	b.n	6eb4 <vListInsert+0x2c>
    6eae:	68fb      	ldr	r3, [r7, #12]
    6eb0:	685b      	ldr	r3, [r3, #4]
    6eb2:	60fb      	str	r3, [r7, #12]
    6eb4:	68fb      	ldr	r3, [r7, #12]
    6eb6:	685b      	ldr	r3, [r3, #4]
    6eb8:	681a      	ldr	r2, [r3, #0]
    6eba:	68bb      	ldr	r3, [r7, #8]
    6ebc:	429a      	cmp	r2, r3
    6ebe:	d9f6      	bls.n	6eae <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    6ec0:	68fb      	ldr	r3, [r7, #12]
    6ec2:	685a      	ldr	r2, [r3, #4]
    6ec4:	683b      	ldr	r3, [r7, #0]
    6ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    6ec8:	683b      	ldr	r3, [r7, #0]
    6eca:	685b      	ldr	r3, [r3, #4]
    6ecc:	683a      	ldr	r2, [r7, #0]
    6ece:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    6ed0:	683b      	ldr	r3, [r7, #0]
    6ed2:	68fa      	ldr	r2, [r7, #12]
    6ed4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
    6ed6:	68fb      	ldr	r3, [r7, #12]
    6ed8:	683a      	ldr	r2, [r7, #0]
    6eda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    6edc:	683b      	ldr	r3, [r7, #0]
    6ede:	687a      	ldr	r2, [r7, #4]
    6ee0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6ee2:	687b      	ldr	r3, [r7, #4]
    6ee4:	681b      	ldr	r3, [r3, #0]
    6ee6:	1c5a      	adds	r2, r3, #1
    6ee8:	687b      	ldr	r3, [r7, #4]
    6eea:	601a      	str	r2, [r3, #0]
}
    6eec:	46c0      	nop			; (mov r8, r8)
    6eee:	46bd      	mov	sp, r7
    6ef0:	b004      	add	sp, #16
    6ef2:	bd80      	pop	{r7, pc}

00006ef4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    6ef4:	b580      	push	{r7, lr}
    6ef6:	b084      	sub	sp, #16
    6ef8:	af00      	add	r7, sp, #0
    6efa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	691b      	ldr	r3, [r3, #16]
    6f00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    6f02:	687b      	ldr	r3, [r7, #4]
    6f04:	685b      	ldr	r3, [r3, #4]
    6f06:	687a      	ldr	r2, [r7, #4]
    6f08:	6892      	ldr	r2, [r2, #8]
    6f0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    6f0c:	687b      	ldr	r3, [r7, #4]
    6f0e:	689b      	ldr	r3, [r3, #8]
    6f10:	687a      	ldr	r2, [r7, #4]
    6f12:	6852      	ldr	r2, [r2, #4]
    6f14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    6f16:	68fb      	ldr	r3, [r7, #12]
    6f18:	685a      	ldr	r2, [r3, #4]
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	429a      	cmp	r2, r3
    6f1e:	d103      	bne.n	6f28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	689a      	ldr	r2, [r3, #8]
    6f24:	68fb      	ldr	r3, [r7, #12]
    6f26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    6f28:	687b      	ldr	r3, [r7, #4]
    6f2a:	2200      	movs	r2, #0
    6f2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    6f2e:	68fb      	ldr	r3, [r7, #12]
    6f30:	681b      	ldr	r3, [r3, #0]
    6f32:	1e5a      	subs	r2, r3, #1
    6f34:	68fb      	ldr	r3, [r7, #12]
    6f36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
    6f38:	68fb      	ldr	r3, [r7, #12]
    6f3a:	681b      	ldr	r3, [r3, #0]
}
    6f3c:	0018      	movs	r0, r3
    6f3e:	46bd      	mov	sp, r7
    6f40:	b004      	add	sp, #16
    6f42:	bd80      	pop	{r7, pc}

00006f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    6f44:	b580      	push	{r7, lr}
    6f46:	b084      	sub	sp, #16
    6f48:	af00      	add	r7, sp, #0
    6f4a:	60f8      	str	r0, [r7, #12]
    6f4c:	60b9      	str	r1, [r7, #8]
    6f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    6f50:	68fb      	ldr	r3, [r7, #12]
    6f52:	3b04      	subs	r3, #4
    6f54:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    6f56:	68fb      	ldr	r3, [r7, #12]
    6f58:	2280      	movs	r2, #128	; 0x80
    6f5a:	0452      	lsls	r2, r2, #17
    6f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6f5e:	68fb      	ldr	r3, [r7, #12]
    6f60:	3b04      	subs	r3, #4
    6f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
    6f64:	68ba      	ldr	r2, [r7, #8]
    6f66:	68fb      	ldr	r3, [r7, #12]
    6f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    6f6a:	68fb      	ldr	r3, [r7, #12]
    6f6c:	3b04      	subs	r3, #4
    6f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
    6f70:	4a08      	ldr	r2, [pc, #32]	; (6f94 <pxPortInitialiseStack+0x50>)
    6f72:	68fb      	ldr	r3, [r7, #12]
    6f74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    6f76:	68fb      	ldr	r3, [r7, #12]
    6f78:	3b14      	subs	r3, #20
    6f7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
    6f7c:	687a      	ldr	r2, [r7, #4]
    6f7e:	68fb      	ldr	r3, [r7, #12]
    6f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
    6f82:	68fb      	ldr	r3, [r7, #12]
    6f84:	3b20      	subs	r3, #32
    6f86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    6f88:	68fb      	ldr	r3, [r7, #12]
}
    6f8a:	0018      	movs	r0, r3
    6f8c:	46bd      	mov	sp, r7
    6f8e:	b004      	add	sp, #16
    6f90:	bd80      	pop	{r7, pc}
    6f92:	46c0      	nop			; (mov r8, r8)
    6f94:	00006f99 	.word	0x00006f99

00006f98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    6f98:	b580      	push	{r7, lr}
    6f9a:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
    6f9c:	4b03      	ldr	r3, [pc, #12]	; (6fac <prvTaskExitError+0x14>)
    6f9e:	681b      	ldr	r3, [r3, #0]
    6fa0:	3301      	adds	r3, #1
    6fa2:	d001      	beq.n	6fa8 <prvTaskExitError+0x10>
    6fa4:	b672      	cpsid	i
    6fa6:	e7fe      	b.n	6fa6 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
    6fa8:	b672      	cpsid	i
	for( ;; );
    6faa:	e7fe      	b.n	6faa <prvTaskExitError+0x12>
    6fac:	20000018 	.word	0x20000018

00006fb0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    6fb0:	b580      	push	{r7, lr}
    6fb2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
    6fb4:	46c0      	nop			; (mov r8, r8)
    6fb6:	46bd      	mov	sp, r7
    6fb8:	bd80      	pop	{r7, pc}
    6fba:	46c0      	nop			; (mov r8, r8)
    6fbc:	0000      	movs	r0, r0
	...

00006fc0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
    6fc0:	4a0b      	ldr	r2, [pc, #44]	; (6ff0 <pxCurrentTCBConst2>)
    6fc2:	6813      	ldr	r3, [r2, #0]
    6fc4:	6818      	ldr	r0, [r3, #0]
    6fc6:	3020      	adds	r0, #32
    6fc8:	f380 8809 	msr	PSP, r0
    6fcc:	2002      	movs	r0, #2
    6fce:	f380 8814 	msr	CONTROL, r0
    6fd2:	f3bf 8f6f 	isb	sy
    6fd6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
    6fd8:	46ae      	mov	lr, r5
    6fda:	bc08      	pop	{r3}
    6fdc:	bc04      	pop	{r2}
    6fde:	b662      	cpsie	i
    6fe0:	4718      	bx	r3
    6fe2:	46c0      	nop			; (mov r8, r8)
    6fe4:	46c0      	nop			; (mov r8, r8)
    6fe6:	46c0      	nop			; (mov r8, r8)
    6fe8:	46c0      	nop			; (mov r8, r8)
    6fea:	46c0      	nop			; (mov r8, r8)
    6fec:	46c0      	nop			; (mov r8, r8)
    6fee:	46c0      	nop			; (mov r8, r8)

00006ff0 <pxCurrentTCBConst2>:
    6ff0:	20003ba8 	.word	0x20003ba8
	"	bx r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
    6ff4:	46c0      	nop			; (mov r8, r8)
    6ff6:	46c0      	nop			; (mov r8, r8)

00006ff8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
    6ff8:	b580      	push	{r7, lr}
    6ffa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    6ffc:	4b0d      	ldr	r3, [pc, #52]	; (7034 <xPortStartScheduler+0x3c>)
    6ffe:	4a0d      	ldr	r2, [pc, #52]	; (7034 <xPortStartScheduler+0x3c>)
    7000:	6812      	ldr	r2, [r2, #0]
    7002:	21ff      	movs	r1, #255	; 0xff
    7004:	0409      	lsls	r1, r1, #16
    7006:	430a      	orrs	r2, r1
    7008:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    700a:	4b0a      	ldr	r3, [pc, #40]	; (7034 <xPortStartScheduler+0x3c>)
    700c:	4a09      	ldr	r2, [pc, #36]	; (7034 <xPortStartScheduler+0x3c>)
    700e:	6812      	ldr	r2, [r2, #0]
    7010:	21ff      	movs	r1, #255	; 0xff
    7012:	0609      	lsls	r1, r1, #24
    7014:	430a      	orrs	r2, r1
    7016:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    7018:	4b07      	ldr	r3, [pc, #28]	; (7038 <xPortStartScheduler+0x40>)
    701a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    701c:	4b07      	ldr	r3, [pc, #28]	; (703c <xPortStartScheduler+0x44>)
    701e:	2200      	movs	r2, #0
    7020:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
    7022:	4b07      	ldr	r3, [pc, #28]	; (7040 <xPortStartScheduler+0x48>)
    7024:	4798      	blx	r3

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
    7026:	4b07      	ldr	r3, [pc, #28]	; (7044 <xPortStartScheduler+0x4c>)
    7028:	4798      	blx	r3

	/* Should not get here! */
	return 0;
    702a:	2300      	movs	r3, #0
}
    702c:	0018      	movs	r0, r3
    702e:	46bd      	mov	sp, r7
    7030:	bd80      	pop	{r7, pc}
    7032:	46c0      	nop			; (mov r8, r8)
    7034:	e000ed20 	.word	0xe000ed20
    7038:	00007159 	.word	0x00007159
    703c:	20000018 	.word	0x20000018
    7040:	00006fc1 	.word	0x00006fc1
    7044:	00006f99 	.word	0x00006f99

00007048 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
    7048:	b580      	push	{r7, lr}
    704a:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
    704c:	4b05      	ldr	r3, [pc, #20]	; (7064 <vPortYield+0x1c>)
    704e:	2280      	movs	r2, #128	; 0x80
    7050:	0552      	lsls	r2, r2, #21
    7052:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
    7054:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    7058:	f3bf 8f6f 	isb	sy
}
    705c:	46c0      	nop			; (mov r8, r8)
    705e:	46bd      	mov	sp, r7
    7060:	bd80      	pop	{r7, pc}
    7062:	46c0      	nop			; (mov r8, r8)
    7064:	e000ed04 	.word	0xe000ed04

00007068 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    7068:	b580      	push	{r7, lr}
    706a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
    706c:	b672      	cpsid	i
    uxCriticalNesting++;
    706e:	4b06      	ldr	r3, [pc, #24]	; (7088 <vPortEnterCritical+0x20>)
    7070:	681b      	ldr	r3, [r3, #0]
    7072:	1c5a      	adds	r2, r3, #1
    7074:	4b04      	ldr	r3, [pc, #16]	; (7088 <vPortEnterCritical+0x20>)
    7076:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
    7078:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
    707c:	f3bf 8f6f 	isb	sy
}
    7080:	46c0      	nop			; (mov r8, r8)
    7082:	46bd      	mov	sp, r7
    7084:	bd80      	pop	{r7, pc}
    7086:	46c0      	nop			; (mov r8, r8)
    7088:	20000018 	.word	0x20000018

0000708c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    708c:	b580      	push	{r7, lr}
    708e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
    7090:	4b09      	ldr	r3, [pc, #36]	; (70b8 <vPortExitCritical+0x2c>)
    7092:	681b      	ldr	r3, [r3, #0]
    7094:	2b00      	cmp	r3, #0
    7096:	d101      	bne.n	709c <vPortExitCritical+0x10>
    7098:	b672      	cpsid	i
    709a:	e7fe      	b.n	709a <vPortExitCritical+0xe>
    uxCriticalNesting--;
    709c:	4b06      	ldr	r3, [pc, #24]	; (70b8 <vPortExitCritical+0x2c>)
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	1e5a      	subs	r2, r3, #1
    70a2:	4b05      	ldr	r3, [pc, #20]	; (70b8 <vPortExitCritical+0x2c>)
    70a4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
    70a6:	4b04      	ldr	r3, [pc, #16]	; (70b8 <vPortExitCritical+0x2c>)
    70a8:	681b      	ldr	r3, [r3, #0]
    70aa:	2b00      	cmp	r3, #0
    70ac:	d100      	bne.n	70b0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
    70ae:	b662      	cpsie	i
    }
}
    70b0:	46c0      	nop			; (mov r8, r8)
    70b2:	46bd      	mov	sp, r7
    70b4:	bd80      	pop	{r7, pc}
    70b6:	46c0      	nop			; (mov r8, r8)
    70b8:	20000018 	.word	0x20000018

000070bc <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
    70bc:	f3ef 8010 	mrs	r0, PRIMASK
    70c0:	b672      	cpsid	i
    70c2:	4770      	bx	lr
					" cpsid i			\n"
					" bx lr				  "
				  );

	/* To avoid compiler warnings.  This line will never be reached. */
	return 0;
    70c4:	2300      	movs	r3, #0
}
    70c6:	0018      	movs	r0, r3

000070c8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( uint32_t ulMask )
{
	__asm volatile(
    70c8:	f380 8810 	msr	PRIMASK, r0
    70cc:	4770      	bx	lr
					" bx lr				  "
				  );

	/* Just to avoid compiler warning. */
	( void ) ulMask;
}
    70ce:	46c0      	nop			; (mov r8, r8)

000070d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    70d0:	f3ef 8009 	mrs	r0, PSP
    70d4:	4b0e      	ldr	r3, [pc, #56]	; (7110 <pxCurrentTCBConst>)
    70d6:	681a      	ldr	r2, [r3, #0]
    70d8:	3820      	subs	r0, #32
    70da:	6010      	str	r0, [r2, #0]
    70dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    70de:	4644      	mov	r4, r8
    70e0:	464d      	mov	r5, r9
    70e2:	4656      	mov	r6, sl
    70e4:	465f      	mov	r7, fp
    70e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
    70e8:	b508      	push	{r3, lr}
    70ea:	b672      	cpsid	i
    70ec:	f001 f902 	bl	82f4 <vTaskSwitchContext>
    70f0:	b662      	cpsie	i
    70f2:	bc0c      	pop	{r2, r3}
    70f4:	6811      	ldr	r1, [r2, #0]
    70f6:	6808      	ldr	r0, [r1, #0]
    70f8:	3010      	adds	r0, #16
    70fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    70fc:	46a0      	mov	r8, r4
    70fe:	46a9      	mov	r9, r5
    7100:	46b2      	mov	sl, r6
    7102:	46bb      	mov	fp, r7
    7104:	f380 8809 	msr	PSP, r0
    7108:	3820      	subs	r0, #32
    710a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
    710c:	4718      	bx	r3
    710e:	46c0      	nop			; (mov r8, r8)

00007110 <pxCurrentTCBConst>:
    7110:	20003ba8 	.word	0x20003ba8
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
    7114:	46c0      	nop			; (mov r8, r8)
    7116:	46c0      	nop			; (mov r8, r8)

00007118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    7118:	b580      	push	{r7, lr}
    711a:	b082      	sub	sp, #8
    711c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
    711e:	4b0a      	ldr	r3, [pc, #40]	; (7148 <SysTick_Handler+0x30>)
    7120:	4798      	blx	r3
    7122:	0003      	movs	r3, r0
    7124:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
    7126:	4b09      	ldr	r3, [pc, #36]	; (714c <SysTick_Handler+0x34>)
    7128:	4798      	blx	r3
    712a:	1e03      	subs	r3, r0, #0
    712c:	d003      	beq.n	7136 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    712e:	4b08      	ldr	r3, [pc, #32]	; (7150 <SysTick_Handler+0x38>)
    7130:	2280      	movs	r2, #128	; 0x80
    7132:	0552      	lsls	r2, r2, #21
    7134:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
    7136:	687b      	ldr	r3, [r7, #4]
    7138:	0018      	movs	r0, r3
    713a:	4b06      	ldr	r3, [pc, #24]	; (7154 <SysTick_Handler+0x3c>)
    713c:	4798      	blx	r3
}
    713e:	46c0      	nop			; (mov r8, r8)
    7140:	46bd      	mov	sp, r7
    7142:	b002      	add	sp, #8
    7144:	bd80      	pop	{r7, pc}
    7146:	46c0      	nop			; (mov r8, r8)
    7148:	000070bd 	.word	0x000070bd
    714c:	00008181 	.word	0x00008181
    7150:	e000ed04 	.word	0xe000ed04
    7154:	000070c9 	.word	0x000070c9

00007158 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    7158:	b580      	push	{r7, lr}
    715a:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    715c:	4b04      	ldr	r3, [pc, #16]	; (7170 <prvSetupTimerInterrupt+0x18>)
    715e:	4a05      	ldr	r2, [pc, #20]	; (7174 <prvSetupTimerInterrupt+0x1c>)
    7160:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    7162:	4b05      	ldr	r3, [pc, #20]	; (7178 <prvSetupTimerInterrupt+0x20>)
    7164:	2207      	movs	r2, #7
    7166:	601a      	str	r2, [r3, #0]
}
    7168:	46c0      	nop			; (mov r8, r8)
    716a:	46bd      	mov	sp, r7
    716c:	bd80      	pop	{r7, pc}
    716e:	46c0      	nop			; (mov r8, r8)
    7170:	e000e014 	.word	0xe000e014
    7174:	0000bb7f 	.word	0x0000bb7f
    7178:	e000e010 	.word	0xe000e010

0000717c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    717c:	b580      	push	{r7, lr}
    717e:	b084      	sub	sp, #16
    7180:	af00      	add	r7, sp, #0
    7182:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
    7184:	2300      	movs	r3, #0
    7186:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
    7188:	687b      	ldr	r3, [r7, #4]
    718a:	2207      	movs	r2, #7
    718c:	4013      	ands	r3, r2
    718e:	d004      	beq.n	719a <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
    7190:	687b      	ldr	r3, [r7, #4]
    7192:	2207      	movs	r2, #7
    7194:	4393      	bics	r3, r2
    7196:	3308      	adds	r3, #8
    7198:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
    719a:	4b17      	ldr	r3, [pc, #92]	; (71f8 <pvPortMalloc+0x7c>)
    719c:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
    719e:	4b17      	ldr	r3, [pc, #92]	; (71fc <pvPortMalloc+0x80>)
    71a0:	681b      	ldr	r3, [r3, #0]
    71a2:	2b00      	cmp	r3, #0
    71a4:	d105      	bne.n	71b2 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    71a6:	4b16      	ldr	r3, [pc, #88]	; (7200 <pvPortMalloc+0x84>)
    71a8:	2207      	movs	r2, #7
    71aa:	4393      	bics	r3, r2
    71ac:	001a      	movs	r2, r3
    71ae:	4b13      	ldr	r3, [pc, #76]	; (71fc <pvPortMalloc+0x80>)
    71b0:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    71b2:	4b14      	ldr	r3, [pc, #80]	; (7204 <pvPortMalloc+0x88>)
    71b4:	681a      	ldr	r2, [r3, #0]
    71b6:	687b      	ldr	r3, [r7, #4]
    71b8:	18d3      	adds	r3, r2, r3
    71ba:	4a13      	ldr	r2, [pc, #76]	; (7208 <pvPortMalloc+0x8c>)
    71bc:	4293      	cmp	r3, r2
    71be:	d813      	bhi.n	71e8 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    71c0:	4b10      	ldr	r3, [pc, #64]	; (7204 <pvPortMalloc+0x88>)
    71c2:	681a      	ldr	r2, [r3, #0]
    71c4:	687b      	ldr	r3, [r7, #4]
    71c6:	18d2      	adds	r2, r2, r3
    71c8:	4b0e      	ldr	r3, [pc, #56]	; (7204 <pvPortMalloc+0x88>)
    71ca:	681b      	ldr	r3, [r3, #0]
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    71cc:	429a      	cmp	r2, r3
    71ce:	d90b      	bls.n	71e8 <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    71d0:	4b0a      	ldr	r3, [pc, #40]	; (71fc <pvPortMalloc+0x80>)
    71d2:	681a      	ldr	r2, [r3, #0]
    71d4:	4b0b      	ldr	r3, [pc, #44]	; (7204 <pvPortMalloc+0x88>)
    71d6:	681b      	ldr	r3, [r3, #0]
    71d8:	18d3      	adds	r3, r2, r3
    71da:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
    71dc:	4b09      	ldr	r3, [pc, #36]	; (7204 <pvPortMalloc+0x88>)
    71de:	681a      	ldr	r2, [r3, #0]
    71e0:	687b      	ldr	r3, [r7, #4]
    71e2:	18d2      	adds	r2, r2, r3
    71e4:	4b07      	ldr	r3, [pc, #28]	; (7204 <pvPortMalloc+0x88>)
    71e6:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    71e8:	4b08      	ldr	r3, [pc, #32]	; (720c <pvPortMalloc+0x90>)
    71ea:	4798      	blx	r3
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    71ec:	68fb      	ldr	r3, [r7, #12]
}
    71ee:	0018      	movs	r0, r3
    71f0:	46bd      	mov	sp, r7
    71f2:	b004      	add	sp, #16
    71f4:	bd80      	pop	{r7, pc}
    71f6:	46c0      	nop			; (mov r8, r8)
    71f8:	00008019 	.word	0x00008019
    71fc:	20003ba4 	.word	0x20003ba4
    7200:	20000110 	.word	0x20000110
    7204:	20003ba0 	.word	0x20003ba0
    7208:	00003a8f 	.word	0x00003a8f
    720c:	00008031 	.word	0x00008031

00007210 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    7210:	b580      	push	{r7, lr}
    7212:	b082      	sub	sp, #8
    7214:	af00      	add	r7, sp, #0
    7216:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
    7218:	687b      	ldr	r3, [r7, #4]
    721a:	2b00      	cmp	r3, #0
    721c:	d001      	beq.n	7222 <vPortFree+0x12>
    721e:	b672      	cpsid	i
    7220:	e7fe      	b.n	7220 <vPortFree+0x10>
}
    7222:	46c0      	nop			; (mov r8, r8)
    7224:	46bd      	mov	sp, r7
    7226:	b002      	add	sp, #8
    7228:	bd80      	pop	{r7, pc}
    722a:	46c0      	nop			; (mov r8, r8)

0000722c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    722c:	b580      	push	{r7, lr}
    722e:	b084      	sub	sp, #16
    7230:	af00      	add	r7, sp, #0
    7232:	6078      	str	r0, [r7, #4]
    7234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7236:	687b      	ldr	r3, [r7, #4]
    7238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
    723a:	68fb      	ldr	r3, [r7, #12]
    723c:	2b00      	cmp	r3, #0
    723e:	d101      	bne.n	7244 <xQueueGenericReset+0x18>
    7240:	b672      	cpsid	i
    7242:	e7fe      	b.n	7242 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
    7244:	4b23      	ldr	r3, [pc, #140]	; (72d4 <xQueueGenericReset+0xa8>)
    7246:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    7248:	68fb      	ldr	r3, [r7, #12]
    724a:	681a      	ldr	r2, [r3, #0]
    724c:	68fb      	ldr	r3, [r7, #12]
    724e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    7250:	68fb      	ldr	r3, [r7, #12]
    7252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7254:	434b      	muls	r3, r1
    7256:	18d2      	adds	r2, r2, r3
    7258:	68fb      	ldr	r3, [r7, #12]
    725a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    725c:	68fb      	ldr	r3, [r7, #12]
    725e:	2200      	movs	r2, #0
    7260:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    7262:	68fb      	ldr	r3, [r7, #12]
    7264:	681a      	ldr	r2, [r3, #0]
    7266:	68fb      	ldr	r3, [r7, #12]
    7268:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    726a:	68fb      	ldr	r3, [r7, #12]
    726c:	681a      	ldr	r2, [r3, #0]
    726e:	68fb      	ldr	r3, [r7, #12]
    7270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7272:	1e59      	subs	r1, r3, #1
    7274:	68fb      	ldr	r3, [r7, #12]
    7276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7278:	434b      	muls	r3, r1
    727a:	18d2      	adds	r2, r2, r3
    727c:	68fb      	ldr	r3, [r7, #12]
    727e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
    7280:	68fb      	ldr	r3, [r7, #12]
    7282:	2244      	movs	r2, #68	; 0x44
    7284:	21ff      	movs	r1, #255	; 0xff
    7286:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
    7288:	68fb      	ldr	r3, [r7, #12]
    728a:	2245      	movs	r2, #69	; 0x45
    728c:	21ff      	movs	r1, #255	; 0xff
    728e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
    7290:	683b      	ldr	r3, [r7, #0]
    7292:	2b00      	cmp	r3, #0
    7294:	d10d      	bne.n	72b2 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7296:	68fb      	ldr	r3, [r7, #12]
    7298:	691b      	ldr	r3, [r3, #16]
    729a:	2b00      	cmp	r3, #0
    729c:	d013      	beq.n	72c6 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    729e:	68fb      	ldr	r3, [r7, #12]
    72a0:	3310      	adds	r3, #16
    72a2:	0018      	movs	r0, r3
    72a4:	4b0c      	ldr	r3, [pc, #48]	; (72d8 <xQueueGenericReset+0xac>)
    72a6:	4798      	blx	r3
    72a8:	1e03      	subs	r3, r0, #0
    72aa:	d00c      	beq.n	72c6 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
    72ac:	4b0b      	ldr	r3, [pc, #44]	; (72dc <xQueueGenericReset+0xb0>)
    72ae:	4798      	blx	r3
    72b0:	e009      	b.n	72c6 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    72b2:	68fb      	ldr	r3, [r7, #12]
    72b4:	3310      	adds	r3, #16
    72b6:	0018      	movs	r0, r3
    72b8:	4b09      	ldr	r3, [pc, #36]	; (72e0 <xQueueGenericReset+0xb4>)
    72ba:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    72bc:	68fb      	ldr	r3, [r7, #12]
    72be:	3324      	adds	r3, #36	; 0x24
    72c0:	0018      	movs	r0, r3
    72c2:	4b07      	ldr	r3, [pc, #28]	; (72e0 <xQueueGenericReset+0xb4>)
    72c4:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
    72c6:	4b07      	ldr	r3, [pc, #28]	; (72e4 <xQueueGenericReset+0xb8>)
    72c8:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    72ca:	2301      	movs	r3, #1
}
    72cc:	0018      	movs	r0, r3
    72ce:	46bd      	mov	sp, r7
    72d0:	b004      	add	sp, #16
    72d2:	bd80      	pop	{r7, pc}
    72d4:	00007069 	.word	0x00007069
    72d8:	00008455 	.word	0x00008455
    72dc:	00007049 	.word	0x00007049
    72e0:	00006df1 	.word	0x00006df1
    72e4:	0000708d 	.word	0x0000708d

000072e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    72e8:	b590      	push	{r4, r7, lr}
    72ea:	b08b      	sub	sp, #44	; 0x2c
    72ec:	af02      	add	r7, sp, #8
    72ee:	60f8      	str	r0, [r7, #12]
    72f0:	60b9      	str	r1, [r7, #8]
    72f2:	1dfb      	adds	r3, r7, #7
    72f4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
    72f6:	68fb      	ldr	r3, [r7, #12]
    72f8:	2b00      	cmp	r3, #0
    72fa:	d101      	bne.n	7300 <xQueueGenericCreate+0x18>
    72fc:	b672      	cpsid	i
    72fe:	e7fe      	b.n	72fe <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
    7300:	68bb      	ldr	r3, [r7, #8]
    7302:	2b00      	cmp	r3, #0
    7304:	d102      	bne.n	730c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    7306:	2300      	movs	r3, #0
    7308:	61fb      	str	r3, [r7, #28]
    730a:	e003      	b.n	7314 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    730c:	68fb      	ldr	r3, [r7, #12]
    730e:	68ba      	ldr	r2, [r7, #8]
    7310:	4353      	muls	r3, r2
    7312:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    7314:	69fb      	ldr	r3, [r7, #28]
    7316:	334c      	adds	r3, #76	; 0x4c
    7318:	0018      	movs	r0, r3
    731a:	4b0c      	ldr	r3, [pc, #48]	; (734c <xQueueGenericCreate+0x64>)
    731c:	4798      	blx	r3
    731e:	0003      	movs	r3, r0
    7320:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
    7322:	69bb      	ldr	r3, [r7, #24]
    7324:	2b00      	cmp	r3, #0
    7326:	d00c      	beq.n	7342 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    7328:	69bb      	ldr	r3, [r7, #24]
    732a:	334c      	adds	r3, #76	; 0x4c
    732c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    732e:	1dfb      	adds	r3, r7, #7
    7330:	781c      	ldrb	r4, [r3, #0]
    7332:	697a      	ldr	r2, [r7, #20]
    7334:	68b9      	ldr	r1, [r7, #8]
    7336:	68f8      	ldr	r0, [r7, #12]
    7338:	69bb      	ldr	r3, [r7, #24]
    733a:	9300      	str	r3, [sp, #0]
    733c:	0023      	movs	r3, r4
    733e:	4c04      	ldr	r4, [pc, #16]	; (7350 <xQueueGenericCreate+0x68>)
    7340:	47a0      	blx	r4
		}

		return pxNewQueue;
    7342:	69bb      	ldr	r3, [r7, #24]
	}
    7344:	0018      	movs	r0, r3
    7346:	46bd      	mov	sp, r7
    7348:	b009      	add	sp, #36	; 0x24
    734a:	bd90      	pop	{r4, r7, pc}
    734c:	0000717d 	.word	0x0000717d
    7350:	00007355 	.word	0x00007355

00007354 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    7354:	b580      	push	{r7, lr}
    7356:	b084      	sub	sp, #16
    7358:	af00      	add	r7, sp, #0
    735a:	60f8      	str	r0, [r7, #12]
    735c:	60b9      	str	r1, [r7, #8]
    735e:	607a      	str	r2, [r7, #4]
    7360:	001a      	movs	r2, r3
    7362:	1cfb      	adds	r3, r7, #3
    7364:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    7366:	68bb      	ldr	r3, [r7, #8]
    7368:	2b00      	cmp	r3, #0
    736a:	d103      	bne.n	7374 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    736c:	69bb      	ldr	r3, [r7, #24]
    736e:	69ba      	ldr	r2, [r7, #24]
    7370:	601a      	str	r2, [r3, #0]
    7372:	e002      	b.n	737a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    7374:	69bb      	ldr	r3, [r7, #24]
    7376:	687a      	ldr	r2, [r7, #4]
    7378:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    737a:	69bb      	ldr	r3, [r7, #24]
    737c:	68fa      	ldr	r2, [r7, #12]
    737e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
    7380:	69bb      	ldr	r3, [r7, #24]
    7382:	68ba      	ldr	r2, [r7, #8]
    7384:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    7386:	69bb      	ldr	r3, [r7, #24]
    7388:	2101      	movs	r1, #1
    738a:	0018      	movs	r0, r3
    738c:	4b04      	ldr	r3, [pc, #16]	; (73a0 <prvInitialiseNewQueue+0x4c>)
    738e:	4798      	blx	r3
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
    7390:	69bb      	ldr	r3, [r7, #24]
    7392:	2200      	movs	r2, #0
    7394:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    7396:	46c0      	nop			; (mov r8, r8)
    7398:	46bd      	mov	sp, r7
    739a:	b004      	add	sp, #16
    739c:	bd80      	pop	{r7, pc}
    739e:	46c0      	nop			; (mov r8, r8)
    73a0:	0000722d 	.word	0x0000722d

000073a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    73a4:	b580      	push	{r7, lr}
    73a6:	b08a      	sub	sp, #40	; 0x28
    73a8:	af00      	add	r7, sp, #0
    73aa:	60f8      	str	r0, [r7, #12]
    73ac:	60b9      	str	r1, [r7, #8]
    73ae:	607a      	str	r2, [r7, #4]
    73b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    73b2:	2300      	movs	r3, #0
    73b4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    73b6:	68fb      	ldr	r3, [r7, #12]
    73b8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    73ba:	6a3b      	ldr	r3, [r7, #32]
    73bc:	2b00      	cmp	r3, #0
    73be:	d101      	bne.n	73c4 <xQueueGenericSend+0x20>
    73c0:	b672      	cpsid	i
    73c2:	e7fe      	b.n	73c2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    73c4:	68bb      	ldr	r3, [r7, #8]
    73c6:	2b00      	cmp	r3, #0
    73c8:	d103      	bne.n	73d2 <xQueueGenericSend+0x2e>
    73ca:	6a3b      	ldr	r3, [r7, #32]
    73cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    73ce:	2b00      	cmp	r3, #0
    73d0:	d101      	bne.n	73d6 <xQueueGenericSend+0x32>
    73d2:	2301      	movs	r3, #1
    73d4:	e000      	b.n	73d8 <xQueueGenericSend+0x34>
    73d6:	2300      	movs	r3, #0
    73d8:	2b00      	cmp	r3, #0
    73da:	d101      	bne.n	73e0 <xQueueGenericSend+0x3c>
    73dc:	b672      	cpsid	i
    73de:	e7fe      	b.n	73de <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    73e0:	683b      	ldr	r3, [r7, #0]
    73e2:	2b02      	cmp	r3, #2
    73e4:	d103      	bne.n	73ee <xQueueGenericSend+0x4a>
    73e6:	6a3b      	ldr	r3, [r7, #32]
    73e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    73ea:	2b01      	cmp	r3, #1
    73ec:	d101      	bne.n	73f2 <xQueueGenericSend+0x4e>
    73ee:	2301      	movs	r3, #1
    73f0:	e000      	b.n	73f4 <xQueueGenericSend+0x50>
    73f2:	2300      	movs	r3, #0
    73f4:	2b00      	cmp	r3, #0
    73f6:	d101      	bne.n	73fc <xQueueGenericSend+0x58>
    73f8:	b672      	cpsid	i
    73fa:	e7fe      	b.n	73fa <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    73fc:	4b53      	ldr	r3, [pc, #332]	; (754c <xQueueGenericSend+0x1a8>)
    73fe:	4798      	blx	r3
    7400:	1e03      	subs	r3, r0, #0
    7402:	d102      	bne.n	740a <xQueueGenericSend+0x66>
    7404:	687b      	ldr	r3, [r7, #4]
    7406:	2b00      	cmp	r3, #0
    7408:	d101      	bne.n	740e <xQueueGenericSend+0x6a>
    740a:	2301      	movs	r3, #1
    740c:	e000      	b.n	7410 <xQueueGenericSend+0x6c>
    740e:	2300      	movs	r3, #0
    7410:	2b00      	cmp	r3, #0
    7412:	d101      	bne.n	7418 <xQueueGenericSend+0x74>
    7414:	b672      	cpsid	i
    7416:	e7fe      	b.n	7416 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    7418:	4b4d      	ldr	r3, [pc, #308]	; (7550 <xQueueGenericSend+0x1ac>)
    741a:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    741c:	6a3b      	ldr	r3, [r7, #32]
    741e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7420:	6a3b      	ldr	r3, [r7, #32]
    7422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7424:	429a      	cmp	r2, r3
    7426:	d302      	bcc.n	742e <xQueueGenericSend+0x8a>
    7428:	683b      	ldr	r3, [r7, #0]
    742a:	2b02      	cmp	r3, #2
    742c:	d12d      	bne.n	748a <xQueueGenericSend+0xe6>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    742e:	683a      	ldr	r2, [r7, #0]
    7430:	68b9      	ldr	r1, [r7, #8]
    7432:	6a3b      	ldr	r3, [r7, #32]
    7434:	0018      	movs	r0, r3
    7436:	4b47      	ldr	r3, [pc, #284]	; (7554 <xQueueGenericSend+0x1b0>)
    7438:	4798      	blx	r3
    743a:	0003      	movs	r3, r0
    743c:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    743e:	6a3b      	ldr	r3, [r7, #32]
    7440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7442:	2b00      	cmp	r3, #0
    7444:	d00a      	beq.n	745c <xQueueGenericSend+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    7446:	683a      	ldr	r2, [r7, #0]
    7448:	6a3b      	ldr	r3, [r7, #32]
    744a:	0011      	movs	r1, r2
    744c:	0018      	movs	r0, r3
    744e:	4b42      	ldr	r3, [pc, #264]	; (7558 <xQueueGenericSend+0x1b4>)
    7450:	4798      	blx	r3
    7452:	1e03      	subs	r3, r0, #0
    7454:	d015      	beq.n	7482 <xQueueGenericSend+0xde>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
    7456:	4b41      	ldr	r3, [pc, #260]	; (755c <xQueueGenericSend+0x1b8>)
    7458:	4798      	blx	r3
    745a:	e012      	b.n	7482 <xQueueGenericSend+0xde>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    745c:	6a3b      	ldr	r3, [r7, #32]
    745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7460:	2b00      	cmp	r3, #0
    7462:	d009      	beq.n	7478 <xQueueGenericSend+0xd4>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7464:	6a3b      	ldr	r3, [r7, #32]
    7466:	3324      	adds	r3, #36	; 0x24
    7468:	0018      	movs	r0, r3
    746a:	4b3d      	ldr	r3, [pc, #244]	; (7560 <xQueueGenericSend+0x1bc>)
    746c:	4798      	blx	r3
    746e:	1e03      	subs	r3, r0, #0
    7470:	d007      	beq.n	7482 <xQueueGenericSend+0xde>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
    7472:	4b3a      	ldr	r3, [pc, #232]	; (755c <xQueueGenericSend+0x1b8>)
    7474:	4798      	blx	r3
    7476:	e004      	b.n	7482 <xQueueGenericSend+0xde>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
    7478:	69fb      	ldr	r3, [r7, #28]
    747a:	2b00      	cmp	r3, #0
    747c:	d001      	beq.n	7482 <xQueueGenericSend+0xde>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
    747e:	4b37      	ldr	r3, [pc, #220]	; (755c <xQueueGenericSend+0x1b8>)
    7480:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    7482:	4b38      	ldr	r3, [pc, #224]	; (7564 <xQueueGenericSend+0x1c0>)
    7484:	4798      	blx	r3
				return pdPASS;
    7486:	2301      	movs	r3, #1
    7488:	e05c      	b.n	7544 <xQueueGenericSend+0x1a0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    748a:	687b      	ldr	r3, [r7, #4]
    748c:	2b00      	cmp	r3, #0
    748e:	d103      	bne.n	7498 <xQueueGenericSend+0xf4>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    7490:	4b34      	ldr	r3, [pc, #208]	; (7564 <xQueueGenericSend+0x1c0>)
    7492:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    7494:	2300      	movs	r3, #0
    7496:	e055      	b.n	7544 <xQueueGenericSend+0x1a0>
				}
				else if( xEntryTimeSet == pdFALSE )
    7498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    749a:	2b00      	cmp	r3, #0
    749c:	d106      	bne.n	74ac <xQueueGenericSend+0x108>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    749e:	2314      	movs	r3, #20
    74a0:	18fb      	adds	r3, r7, r3
    74a2:	0018      	movs	r0, r3
    74a4:	4b30      	ldr	r3, [pc, #192]	; (7568 <xQueueGenericSend+0x1c4>)
    74a6:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    74a8:	2301      	movs	r3, #1
    74aa:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    74ac:	4b2d      	ldr	r3, [pc, #180]	; (7564 <xQueueGenericSend+0x1c0>)
    74ae:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    74b0:	4b2e      	ldr	r3, [pc, #184]	; (756c <xQueueGenericSend+0x1c8>)
    74b2:	4798      	blx	r3
		prvLockQueue( pxQueue );
    74b4:	4b26      	ldr	r3, [pc, #152]	; (7550 <xQueueGenericSend+0x1ac>)
    74b6:	4798      	blx	r3
    74b8:	6a3b      	ldr	r3, [r7, #32]
    74ba:	2244      	movs	r2, #68	; 0x44
    74bc:	5c9b      	ldrb	r3, [r3, r2]
    74be:	b25b      	sxtb	r3, r3
    74c0:	3301      	adds	r3, #1
    74c2:	d103      	bne.n	74cc <xQueueGenericSend+0x128>
    74c4:	6a3b      	ldr	r3, [r7, #32]
    74c6:	2244      	movs	r2, #68	; 0x44
    74c8:	2100      	movs	r1, #0
    74ca:	5499      	strb	r1, [r3, r2]
    74cc:	6a3b      	ldr	r3, [r7, #32]
    74ce:	2245      	movs	r2, #69	; 0x45
    74d0:	5c9b      	ldrb	r3, [r3, r2]
    74d2:	b25b      	sxtb	r3, r3
    74d4:	3301      	adds	r3, #1
    74d6:	d103      	bne.n	74e0 <xQueueGenericSend+0x13c>
    74d8:	6a3b      	ldr	r3, [r7, #32]
    74da:	2245      	movs	r2, #69	; 0x45
    74dc:	2100      	movs	r1, #0
    74de:	5499      	strb	r1, [r3, r2]
    74e0:	4b20      	ldr	r3, [pc, #128]	; (7564 <xQueueGenericSend+0x1c0>)
    74e2:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    74e4:	1d3a      	adds	r2, r7, #4
    74e6:	2314      	movs	r3, #20
    74e8:	18fb      	adds	r3, r7, r3
    74ea:	0011      	movs	r1, r2
    74ec:	0018      	movs	r0, r3
    74ee:	4b20      	ldr	r3, [pc, #128]	; (7570 <xQueueGenericSend+0x1cc>)
    74f0:	4798      	blx	r3
    74f2:	1e03      	subs	r3, r0, #0
    74f4:	d11f      	bne.n	7536 <xQueueGenericSend+0x192>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    74f6:	6a3b      	ldr	r3, [r7, #32]
    74f8:	0018      	movs	r0, r3
    74fa:	4b1e      	ldr	r3, [pc, #120]	; (7574 <xQueueGenericSend+0x1d0>)
    74fc:	4798      	blx	r3
    74fe:	1e03      	subs	r3, r0, #0
    7500:	d012      	beq.n	7528 <xQueueGenericSend+0x184>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    7502:	6a3b      	ldr	r3, [r7, #32]
    7504:	3310      	adds	r3, #16
    7506:	687a      	ldr	r2, [r7, #4]
    7508:	0011      	movs	r1, r2
    750a:	0018      	movs	r0, r3
    750c:	4b1a      	ldr	r3, [pc, #104]	; (7578 <xQueueGenericSend+0x1d4>)
    750e:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    7510:	6a3b      	ldr	r3, [r7, #32]
    7512:	0018      	movs	r0, r3
    7514:	4b19      	ldr	r3, [pc, #100]	; (757c <xQueueGenericSend+0x1d8>)
    7516:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    7518:	4b19      	ldr	r3, [pc, #100]	; (7580 <xQueueGenericSend+0x1dc>)
    751a:	4798      	blx	r3
    751c:	1e03      	subs	r3, r0, #0
    751e:	d000      	beq.n	7522 <xQueueGenericSend+0x17e>
    7520:	e77a      	b.n	7418 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
    7522:	4b0e      	ldr	r3, [pc, #56]	; (755c <xQueueGenericSend+0x1b8>)
    7524:	4798      	blx	r3
    7526:	e777      	b.n	7418 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    7528:	6a3b      	ldr	r3, [r7, #32]
    752a:	0018      	movs	r0, r3
    752c:	4b13      	ldr	r3, [pc, #76]	; (757c <xQueueGenericSend+0x1d8>)
    752e:	4798      	blx	r3
				( void ) xTaskResumeAll();
    7530:	4b13      	ldr	r3, [pc, #76]	; (7580 <xQueueGenericSend+0x1dc>)
    7532:	4798      	blx	r3
    7534:	e770      	b.n	7418 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    7536:	6a3b      	ldr	r3, [r7, #32]
    7538:	0018      	movs	r0, r3
    753a:	4b10      	ldr	r3, [pc, #64]	; (757c <xQueueGenericSend+0x1d8>)
    753c:	4798      	blx	r3
			( void ) xTaskResumeAll();
    753e:	4b10      	ldr	r3, [pc, #64]	; (7580 <xQueueGenericSend+0x1dc>)
    7540:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    7542:	2300      	movs	r3, #0
		}
	}
}
    7544:	0018      	movs	r0, r3
    7546:	46bd      	mov	sp, r7
    7548:	b00a      	add	sp, #40	; 0x28
    754a:	bd80      	pop	{r7, pc}
    754c:	000087bd 	.word	0x000087bd
    7550:	00007069 	.word	0x00007069
    7554:	000078a9 	.word	0x000078a9
    7558:	00007bad 	.word	0x00007bad
    755c:	00007049 	.word	0x00007049
    7560:	00008455 	.word	0x00008455
    7564:	0000708d 	.word	0x0000708d
    7568:	00008515 	.word	0x00008515
    756c:	00008019 	.word	0x00008019
    7570:	00008549 	.word	0x00008549
    7574:	00007afd 	.word	0x00007afd
    7578:	000083bd 	.word	0x000083bd
    757c:	000079d9 	.word	0x000079d9
    7580:	00008031 	.word	0x00008031

00007584 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    7584:	b580      	push	{r7, lr}
    7586:	b088      	sub	sp, #32
    7588:	af00      	add	r7, sp, #0
    758a:	60f8      	str	r0, [r7, #12]
    758c:	60b9      	str	r1, [r7, #8]
    758e:	607a      	str	r2, [r7, #4]
    7590:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7592:	68fb      	ldr	r3, [r7, #12]
    7594:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
    7596:	69bb      	ldr	r3, [r7, #24]
    7598:	2b00      	cmp	r3, #0
    759a:	d101      	bne.n	75a0 <xQueueGenericSendFromISR+0x1c>
    759c:	b672      	cpsid	i
    759e:	e7fe      	b.n	759e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    75a0:	68bb      	ldr	r3, [r7, #8]
    75a2:	2b00      	cmp	r3, #0
    75a4:	d103      	bne.n	75ae <xQueueGenericSendFromISR+0x2a>
    75a6:	69bb      	ldr	r3, [r7, #24]
    75a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    75aa:	2b00      	cmp	r3, #0
    75ac:	d101      	bne.n	75b2 <xQueueGenericSendFromISR+0x2e>
    75ae:	2301      	movs	r3, #1
    75b0:	e000      	b.n	75b4 <xQueueGenericSendFromISR+0x30>
    75b2:	2300      	movs	r3, #0
    75b4:	2b00      	cmp	r3, #0
    75b6:	d101      	bne.n	75bc <xQueueGenericSendFromISR+0x38>
    75b8:	b672      	cpsid	i
    75ba:	e7fe      	b.n	75ba <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
    75bc:	683b      	ldr	r3, [r7, #0]
    75be:	2b02      	cmp	r3, #2
    75c0:	d103      	bne.n	75ca <xQueueGenericSendFromISR+0x46>
    75c2:	69bb      	ldr	r3, [r7, #24]
    75c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    75c6:	2b01      	cmp	r3, #1
    75c8:	d101      	bne.n	75ce <xQueueGenericSendFromISR+0x4a>
    75ca:	2301      	movs	r3, #1
    75cc:	e000      	b.n	75d0 <xQueueGenericSendFromISR+0x4c>
    75ce:	2300      	movs	r3, #0
    75d0:	2b00      	cmp	r3, #0
    75d2:	d101      	bne.n	75d8 <xQueueGenericSendFromISR+0x54>
    75d4:	b672      	cpsid	i
    75d6:	e7fe      	b.n	75d6 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    75d8:	4b2d      	ldr	r3, [pc, #180]	; (7690 <xQueueGenericSendFromISR+0x10c>)
    75da:	4798      	blx	r3
    75dc:	0003      	movs	r3, r0
    75de:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    75e0:	69bb      	ldr	r3, [r7, #24]
    75e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    75e4:	69bb      	ldr	r3, [r7, #24]
    75e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    75e8:	429a      	cmp	r2, r3
    75ea:	d302      	bcc.n	75f2 <xQueueGenericSendFromISR+0x6e>
    75ec:	683b      	ldr	r3, [r7, #0]
    75ee:	2b02      	cmp	r3, #2
    75f0:	d142      	bne.n	7678 <xQueueGenericSendFromISR+0xf4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    75f2:	2313      	movs	r3, #19
    75f4:	18fb      	adds	r3, r7, r3
    75f6:	69ba      	ldr	r2, [r7, #24]
    75f8:	2145      	movs	r1, #69	; 0x45
    75fa:	5c52      	ldrb	r2, [r2, r1]
    75fc:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    75fe:	683a      	ldr	r2, [r7, #0]
    7600:	68b9      	ldr	r1, [r7, #8]
    7602:	69bb      	ldr	r3, [r7, #24]
    7604:	0018      	movs	r0, r3
    7606:	4b23      	ldr	r3, [pc, #140]	; (7694 <xQueueGenericSendFromISR+0x110>)
    7608:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    760a:	2313      	movs	r3, #19
    760c:	18fb      	adds	r3, r7, r3
    760e:	781b      	ldrb	r3, [r3, #0]
    7610:	b25b      	sxtb	r3, r3
    7612:	3301      	adds	r3, #1
    7614:	d124      	bne.n	7660 <xQueueGenericSendFromISR+0xdc>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
    7616:	69bb      	ldr	r3, [r7, #24]
    7618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    761a:	2b00      	cmp	r3, #0
    761c:	d00e      	beq.n	763c <xQueueGenericSendFromISR+0xb8>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
    761e:	683a      	ldr	r2, [r7, #0]
    7620:	69bb      	ldr	r3, [r7, #24]
    7622:	0011      	movs	r1, r2
    7624:	0018      	movs	r0, r3
    7626:	4b1c      	ldr	r3, [pc, #112]	; (7698 <xQueueGenericSendFromISR+0x114>)
    7628:	4798      	blx	r3
    762a:	1e03      	subs	r3, r0, #0
    762c:	d021      	beq.n	7672 <xQueueGenericSendFromISR+0xee>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    762e:	687b      	ldr	r3, [r7, #4]
    7630:	2b00      	cmp	r3, #0
    7632:	d01e      	beq.n	7672 <xQueueGenericSendFromISR+0xee>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    7634:	687b      	ldr	r3, [r7, #4]
    7636:	2201      	movs	r2, #1
    7638:	601a      	str	r2, [r3, #0]
    763a:	e01a      	b.n	7672 <xQueueGenericSendFromISR+0xee>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    763c:	69bb      	ldr	r3, [r7, #24]
    763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7640:	2b00      	cmp	r3, #0
    7642:	d016      	beq.n	7672 <xQueueGenericSendFromISR+0xee>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7644:	69bb      	ldr	r3, [r7, #24]
    7646:	3324      	adds	r3, #36	; 0x24
    7648:	0018      	movs	r0, r3
    764a:	4b14      	ldr	r3, [pc, #80]	; (769c <xQueueGenericSendFromISR+0x118>)
    764c:	4798      	blx	r3
    764e:	1e03      	subs	r3, r0, #0
    7650:	d00f      	beq.n	7672 <xQueueGenericSendFromISR+0xee>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
    7652:	687b      	ldr	r3, [r7, #4]
    7654:	2b00      	cmp	r3, #0
    7656:	d00c      	beq.n	7672 <xQueueGenericSendFromISR+0xee>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
    7658:	687b      	ldr	r3, [r7, #4]
    765a:	2201      	movs	r2, #1
    765c:	601a      	str	r2, [r3, #0]
    765e:	e008      	b.n	7672 <xQueueGenericSendFromISR+0xee>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    7660:	2313      	movs	r3, #19
    7662:	18fb      	adds	r3, r7, r3
    7664:	781b      	ldrb	r3, [r3, #0]
    7666:	3301      	adds	r3, #1
    7668:	b2db      	uxtb	r3, r3
    766a:	b259      	sxtb	r1, r3
    766c:	69bb      	ldr	r3, [r7, #24]
    766e:	2245      	movs	r2, #69	; 0x45
    7670:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
    7672:	2301      	movs	r3, #1
    7674:	61fb      	str	r3, [r7, #28]
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
		{
    7676:	e001      	b.n	767c <xQueueGenericSendFromISR+0xf8>
			xReturn = pdPASS;
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    7678:	2300      	movs	r3, #0
    767a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    767c:	697b      	ldr	r3, [r7, #20]
    767e:	0018      	movs	r0, r3
    7680:	4b07      	ldr	r3, [pc, #28]	; (76a0 <xQueueGenericSendFromISR+0x11c>)
    7682:	4798      	blx	r3

	return xReturn;
    7684:	69fb      	ldr	r3, [r7, #28]
}
    7686:	0018      	movs	r0, r3
    7688:	46bd      	mov	sp, r7
    768a:	b008      	add	sp, #32
    768c:	bd80      	pop	{r7, pc}
    768e:	46c0      	nop			; (mov r8, r8)
    7690:	000070bd 	.word	0x000070bd
    7694:	000078a9 	.word	0x000078a9
    7698:	00007bad 	.word	0x00007bad
    769c:	00008455 	.word	0x00008455
    76a0:	000070c9 	.word	0x000070c9

000076a4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    76a4:	b580      	push	{r7, lr}
    76a6:	b08a      	sub	sp, #40	; 0x28
    76a8:	af00      	add	r7, sp, #0
    76aa:	60f8      	str	r0, [r7, #12]
    76ac:	60b9      	str	r1, [r7, #8]
    76ae:	607a      	str	r2, [r7, #4]
    76b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
    76b2:	2300      	movs	r3, #0
    76b4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    76b6:	68fb      	ldr	r3, [r7, #12]
    76b8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
    76ba:	6a3b      	ldr	r3, [r7, #32]
    76bc:	2b00      	cmp	r3, #0
    76be:	d101      	bne.n	76c4 <xQueueGenericReceive+0x20>
    76c0:	b672      	cpsid	i
    76c2:	e7fe      	b.n	76c2 <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
    76c4:	68bb      	ldr	r3, [r7, #8]
    76c6:	2b00      	cmp	r3, #0
    76c8:	d103      	bne.n	76d2 <xQueueGenericReceive+0x2e>
    76ca:	6a3b      	ldr	r3, [r7, #32]
    76cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    76ce:	2b00      	cmp	r3, #0
    76d0:	d101      	bne.n	76d6 <xQueueGenericReceive+0x32>
    76d2:	2301      	movs	r3, #1
    76d4:	e000      	b.n	76d8 <xQueueGenericReceive+0x34>
    76d6:	2300      	movs	r3, #0
    76d8:	2b00      	cmp	r3, #0
    76da:	d101      	bne.n	76e0 <xQueueGenericReceive+0x3c>
    76dc:	b672      	cpsid	i
    76de:	e7fe      	b.n	76de <xQueueGenericReceive+0x3a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
    76e0:	4b62      	ldr	r3, [pc, #392]	; (786c <xQueueGenericReceive+0x1c8>)
    76e2:	4798      	blx	r3
    76e4:	1e03      	subs	r3, r0, #0
    76e6:	d102      	bne.n	76ee <xQueueGenericReceive+0x4a>
    76e8:	687b      	ldr	r3, [r7, #4]
    76ea:	2b00      	cmp	r3, #0
    76ec:	d101      	bne.n	76f2 <xQueueGenericReceive+0x4e>
    76ee:	2301      	movs	r3, #1
    76f0:	e000      	b.n	76f4 <xQueueGenericReceive+0x50>
    76f2:	2300      	movs	r3, #0
    76f4:	2b00      	cmp	r3, #0
    76f6:	d101      	bne.n	76fc <xQueueGenericReceive+0x58>
    76f8:	b672      	cpsid	i
    76fa:	e7fe      	b.n	76fa <xQueueGenericReceive+0x56>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    76fc:	4b5c      	ldr	r3, [pc, #368]	; (7870 <xQueueGenericReceive+0x1cc>)
    76fe:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    7700:	6a3b      	ldr	r3, [r7, #32]
    7702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7704:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7706:	69fb      	ldr	r3, [r7, #28]
    7708:	2b00      	cmp	r3, #0
    770a:	d03a      	beq.n	7782 <xQueueGenericReceive+0xde>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    770c:	6a3b      	ldr	r3, [r7, #32]
    770e:	68db      	ldr	r3, [r3, #12]
    7710:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    7712:	68ba      	ldr	r2, [r7, #8]
    7714:	6a3b      	ldr	r3, [r7, #32]
    7716:	0011      	movs	r1, r2
    7718:	0018      	movs	r0, r3
    771a:	4b56      	ldr	r3, [pc, #344]	; (7874 <xQueueGenericReceive+0x1d0>)
    771c:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
    771e:	683b      	ldr	r3, [r7, #0]
    7720:	2b00      	cmp	r3, #0
    7722:	d11a      	bne.n	775a <xQueueGenericReceive+0xb6>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    7724:	69fb      	ldr	r3, [r7, #28]
    7726:	1e5a      	subs	r2, r3, #1
    7728:	6a3b      	ldr	r3, [r7, #32]
    772a:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    772c:	6a3b      	ldr	r3, [r7, #32]
    772e:	681b      	ldr	r3, [r3, #0]
    7730:	2b00      	cmp	r3, #0
    7732:	d104      	bne.n	773e <xQueueGenericReceive+0x9a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    7734:	4b50      	ldr	r3, [pc, #320]	; (7878 <xQueueGenericReceive+0x1d4>)
    7736:	4798      	blx	r3
    7738:	0002      	movs	r2, r0
    773a:	6a3b      	ldr	r3, [r7, #32]
    773c:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    773e:	6a3b      	ldr	r3, [r7, #32]
    7740:	691b      	ldr	r3, [r3, #16]
    7742:	2b00      	cmp	r3, #0
    7744:	d019      	beq.n	777a <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7746:	6a3b      	ldr	r3, [r7, #32]
    7748:	3310      	adds	r3, #16
    774a:	0018      	movs	r0, r3
    774c:	4b4b      	ldr	r3, [pc, #300]	; (787c <xQueueGenericReceive+0x1d8>)
    774e:	4798      	blx	r3
    7750:	1e03      	subs	r3, r0, #0
    7752:	d012      	beq.n	777a <xQueueGenericReceive+0xd6>
						{
							queueYIELD_IF_USING_PREEMPTION();
    7754:	4b4a      	ldr	r3, [pc, #296]	; (7880 <xQueueGenericReceive+0x1dc>)
    7756:	4798      	blx	r3
    7758:	e00f      	b.n	777a <xQueueGenericReceive+0xd6>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    775a:	6a3b      	ldr	r3, [r7, #32]
    775c:	69ba      	ldr	r2, [r7, #24]
    775e:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7760:	6a3b      	ldr	r3, [r7, #32]
    7762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7764:	2b00      	cmp	r3, #0
    7766:	d008      	beq.n	777a <xQueueGenericReceive+0xd6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7768:	6a3b      	ldr	r3, [r7, #32]
    776a:	3324      	adds	r3, #36	; 0x24
    776c:	0018      	movs	r0, r3
    776e:	4b43      	ldr	r3, [pc, #268]	; (787c <xQueueGenericReceive+0x1d8>)
    7770:	4798      	blx	r3
    7772:	1e03      	subs	r3, r0, #0
    7774:	d001      	beq.n	777a <xQueueGenericReceive+0xd6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    7776:	4b42      	ldr	r3, [pc, #264]	; (7880 <xQueueGenericReceive+0x1dc>)
    7778:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    777a:	4b42      	ldr	r3, [pc, #264]	; (7884 <xQueueGenericReceive+0x1e0>)
    777c:	4798      	blx	r3
				return pdPASS;
    777e:	2301      	movs	r3, #1
    7780:	e070      	b.n	7864 <xQueueGenericReceive+0x1c0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    7782:	687b      	ldr	r3, [r7, #4]
    7784:	2b00      	cmp	r3, #0
    7786:	d103      	bne.n	7790 <xQueueGenericReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    7788:	4b3e      	ldr	r3, [pc, #248]	; (7884 <xQueueGenericReceive+0x1e0>)
    778a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    778c:	2300      	movs	r3, #0
    778e:	e069      	b.n	7864 <xQueueGenericReceive+0x1c0>
				}
				else if( xEntryTimeSet == pdFALSE )
    7790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7792:	2b00      	cmp	r3, #0
    7794:	d106      	bne.n	77a4 <xQueueGenericReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    7796:	2310      	movs	r3, #16
    7798:	18fb      	adds	r3, r7, r3
    779a:	0018      	movs	r0, r3
    779c:	4b3a      	ldr	r3, [pc, #232]	; (7888 <xQueueGenericReceive+0x1e4>)
    779e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
    77a0:	2301      	movs	r3, #1
    77a2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    77a4:	4b37      	ldr	r3, [pc, #220]	; (7884 <xQueueGenericReceive+0x1e0>)
    77a6:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    77a8:	4b38      	ldr	r3, [pc, #224]	; (788c <xQueueGenericReceive+0x1e8>)
    77aa:	4798      	blx	r3
		prvLockQueue( pxQueue );
    77ac:	4b30      	ldr	r3, [pc, #192]	; (7870 <xQueueGenericReceive+0x1cc>)
    77ae:	4798      	blx	r3
    77b0:	6a3b      	ldr	r3, [r7, #32]
    77b2:	2244      	movs	r2, #68	; 0x44
    77b4:	5c9b      	ldrb	r3, [r3, r2]
    77b6:	b25b      	sxtb	r3, r3
    77b8:	3301      	adds	r3, #1
    77ba:	d103      	bne.n	77c4 <xQueueGenericReceive+0x120>
    77bc:	6a3b      	ldr	r3, [r7, #32]
    77be:	2244      	movs	r2, #68	; 0x44
    77c0:	2100      	movs	r1, #0
    77c2:	5499      	strb	r1, [r3, r2]
    77c4:	6a3b      	ldr	r3, [r7, #32]
    77c6:	2245      	movs	r2, #69	; 0x45
    77c8:	5c9b      	ldrb	r3, [r3, r2]
    77ca:	b25b      	sxtb	r3, r3
    77cc:	3301      	adds	r3, #1
    77ce:	d103      	bne.n	77d8 <xQueueGenericReceive+0x134>
    77d0:	6a3b      	ldr	r3, [r7, #32]
    77d2:	2245      	movs	r2, #69	; 0x45
    77d4:	2100      	movs	r1, #0
    77d6:	5499      	strb	r1, [r3, r2]
    77d8:	4b2a      	ldr	r3, [pc, #168]	; (7884 <xQueueGenericReceive+0x1e0>)
    77da:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    77dc:	1d3a      	adds	r2, r7, #4
    77de:	2310      	movs	r3, #16
    77e0:	18fb      	adds	r3, r7, r3
    77e2:	0011      	movs	r1, r2
    77e4:	0018      	movs	r0, r3
    77e6:	4b2a      	ldr	r3, [pc, #168]	; (7890 <xQueueGenericReceive+0x1ec>)
    77e8:	4798      	blx	r3
    77ea:	1e03      	subs	r3, r0, #0
    77ec:	d12c      	bne.n	7848 <xQueueGenericReceive+0x1a4>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    77ee:	6a3b      	ldr	r3, [r7, #32]
    77f0:	0018      	movs	r0, r3
    77f2:	4b28      	ldr	r3, [pc, #160]	; (7894 <xQueueGenericReceive+0x1f0>)
    77f4:	4798      	blx	r3
    77f6:	1e03      	subs	r3, r0, #0
    77f8:	d01f      	beq.n	783a <xQueueGenericReceive+0x196>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    77fa:	6a3b      	ldr	r3, [r7, #32]
    77fc:	681b      	ldr	r3, [r3, #0]
    77fe:	2b00      	cmp	r3, #0
    7800:	d108      	bne.n	7814 <xQueueGenericReceive+0x170>
					{
						taskENTER_CRITICAL();
    7802:	4b1b      	ldr	r3, [pc, #108]	; (7870 <xQueueGenericReceive+0x1cc>)
    7804:	4798      	blx	r3
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    7806:	6a3b      	ldr	r3, [r7, #32]
    7808:	685b      	ldr	r3, [r3, #4]
    780a:	0018      	movs	r0, r3
    780c:	4b22      	ldr	r3, [pc, #136]	; (7898 <xQueueGenericReceive+0x1f4>)
    780e:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
    7810:	4b1c      	ldr	r3, [pc, #112]	; (7884 <xQueueGenericReceive+0x1e0>)
    7812:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    7814:	6a3b      	ldr	r3, [r7, #32]
    7816:	3324      	adds	r3, #36	; 0x24
    7818:	687a      	ldr	r2, [r7, #4]
    781a:	0011      	movs	r1, r2
    781c:	0018      	movs	r0, r3
    781e:	4b1f      	ldr	r3, [pc, #124]	; (789c <xQueueGenericReceive+0x1f8>)
    7820:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
    7822:	6a3b      	ldr	r3, [r7, #32]
    7824:	0018      	movs	r0, r3
    7826:	4b1e      	ldr	r3, [pc, #120]	; (78a0 <xQueueGenericReceive+0x1fc>)
    7828:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
    782a:	4b1e      	ldr	r3, [pc, #120]	; (78a4 <xQueueGenericReceive+0x200>)
    782c:	4798      	blx	r3
    782e:	1e03      	subs	r3, r0, #0
    7830:	d000      	beq.n	7834 <xQueueGenericReceive+0x190>
    7832:	e763      	b.n	76fc <xQueueGenericReceive+0x58>
				{
					portYIELD_WITHIN_API();
    7834:	4b12      	ldr	r3, [pc, #72]	; (7880 <xQueueGenericReceive+0x1dc>)
    7836:	4798      	blx	r3
    7838:	e760      	b.n	76fc <xQueueGenericReceive+0x58>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    783a:	6a3b      	ldr	r3, [r7, #32]
    783c:	0018      	movs	r0, r3
    783e:	4b18      	ldr	r3, [pc, #96]	; (78a0 <xQueueGenericReceive+0x1fc>)
    7840:	4798      	blx	r3
				( void ) xTaskResumeAll();
    7842:	4b18      	ldr	r3, [pc, #96]	; (78a4 <xQueueGenericReceive+0x200>)
    7844:	4798      	blx	r3
    7846:	e759      	b.n	76fc <xQueueGenericReceive+0x58>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    7848:	6a3b      	ldr	r3, [r7, #32]
    784a:	0018      	movs	r0, r3
    784c:	4b14      	ldr	r3, [pc, #80]	; (78a0 <xQueueGenericReceive+0x1fc>)
    784e:	4798      	blx	r3
			( void ) xTaskResumeAll();
    7850:	4b14      	ldr	r3, [pc, #80]	; (78a4 <xQueueGenericReceive+0x200>)
    7852:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    7854:	6a3b      	ldr	r3, [r7, #32]
    7856:	0018      	movs	r0, r3
    7858:	4b0e      	ldr	r3, [pc, #56]	; (7894 <xQueueGenericReceive+0x1f0>)
    785a:	4798      	blx	r3
    785c:	1e03      	subs	r3, r0, #0
    785e:	d100      	bne.n	7862 <xQueueGenericReceive+0x1be>
    7860:	e74c      	b.n	76fc <xQueueGenericReceive+0x58>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    7862:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    7864:	0018      	movs	r0, r3
    7866:	46bd      	mov	sp, r7
    7868:	b00a      	add	sp, #40	; 0x28
    786a:	bd80      	pop	{r7, pc}
    786c:	000087bd 	.word	0x000087bd
    7870:	00007069 	.word	0x00007069
    7874:	00007989 	.word	0x00007989
    7878:	00008979 	.word	0x00008979
    787c:	00008455 	.word	0x00008455
    7880:	00007049 	.word	0x00007049
    7884:	0000708d 	.word	0x0000708d
    7888:	00008515 	.word	0x00008515
    788c:	00008019 	.word	0x00008019
    7890:	00008549 	.word	0x00008549
    7894:	00007ac9 	.word	0x00007ac9
    7898:	000087f5 	.word	0x000087f5
    789c:	000083bd 	.word	0x000083bd
    78a0:	000079d9 	.word	0x000079d9
    78a4:	00008031 	.word	0x00008031

000078a8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    78a8:	b580      	push	{r7, lr}
    78aa:	b086      	sub	sp, #24
    78ac:	af00      	add	r7, sp, #0
    78ae:	60f8      	str	r0, [r7, #12]
    78b0:	60b9      	str	r1, [r7, #8]
    78b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
    78b4:	2300      	movs	r3, #0
    78b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    78b8:	68fb      	ldr	r3, [r7, #12]
    78ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    78bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    78be:	68fb      	ldr	r3, [r7, #12]
    78c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    78c2:	2b00      	cmp	r3, #0
    78c4:	d10e      	bne.n	78e4 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    78c6:	68fb      	ldr	r3, [r7, #12]
    78c8:	681b      	ldr	r3, [r3, #0]
    78ca:	2b00      	cmp	r3, #0
    78cc:	d14e      	bne.n	796c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    78ce:	68fb      	ldr	r3, [r7, #12]
    78d0:	685b      	ldr	r3, [r3, #4]
    78d2:	0018      	movs	r0, r3
    78d4:	4b2a      	ldr	r3, [pc, #168]	; (7980 <prvCopyDataToQueue+0xd8>)
    78d6:	4798      	blx	r3
    78d8:	0003      	movs	r3, r0
    78da:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
    78dc:	68fb      	ldr	r3, [r7, #12]
    78de:	2200      	movs	r2, #0
    78e0:	605a      	str	r2, [r3, #4]
    78e2:	e043      	b.n	796c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    78e4:	687b      	ldr	r3, [r7, #4]
    78e6:	2b00      	cmp	r3, #0
    78e8:	d119      	bne.n	791e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    78ea:	68fb      	ldr	r3, [r7, #12]
    78ec:	6898      	ldr	r0, [r3, #8]
    78ee:	68fb      	ldr	r3, [r7, #12]
    78f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    78f2:	68bb      	ldr	r3, [r7, #8]
    78f4:	0019      	movs	r1, r3
    78f6:	4b23      	ldr	r3, [pc, #140]	; (7984 <prvCopyDataToQueue+0xdc>)
    78f8:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    78fa:	68fb      	ldr	r3, [r7, #12]
    78fc:	689a      	ldr	r2, [r3, #8]
    78fe:	68fb      	ldr	r3, [r7, #12]
    7900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7902:	18d2      	adds	r2, r2, r3
    7904:	68fb      	ldr	r3, [r7, #12]
    7906:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    7908:	68fb      	ldr	r3, [r7, #12]
    790a:	689a      	ldr	r2, [r3, #8]
    790c:	68fb      	ldr	r3, [r7, #12]
    790e:	685b      	ldr	r3, [r3, #4]
    7910:	429a      	cmp	r2, r3
    7912:	d32b      	bcc.n	796c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    7914:	68fb      	ldr	r3, [r7, #12]
    7916:	681a      	ldr	r2, [r3, #0]
    7918:	68fb      	ldr	r3, [r7, #12]
    791a:	609a      	str	r2, [r3, #8]
    791c:	e026      	b.n	796c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    791e:	68fb      	ldr	r3, [r7, #12]
    7920:	68d8      	ldr	r0, [r3, #12]
    7922:	68fb      	ldr	r3, [r7, #12]
    7924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7926:	68bb      	ldr	r3, [r7, #8]
    7928:	0019      	movs	r1, r3
    792a:	4b16      	ldr	r3, [pc, #88]	; (7984 <prvCopyDataToQueue+0xdc>)
    792c:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    792e:	68fb      	ldr	r3, [r7, #12]
    7930:	68da      	ldr	r2, [r3, #12]
    7932:	68fb      	ldr	r3, [r7, #12]
    7934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7936:	425b      	negs	r3, r3
    7938:	18d2      	adds	r2, r2, r3
    793a:	68fb      	ldr	r3, [r7, #12]
    793c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    793e:	68fb      	ldr	r3, [r7, #12]
    7940:	68da      	ldr	r2, [r3, #12]
    7942:	68fb      	ldr	r3, [r7, #12]
    7944:	681b      	ldr	r3, [r3, #0]
    7946:	429a      	cmp	r2, r3
    7948:	d207      	bcs.n	795a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    794a:	68fb      	ldr	r3, [r7, #12]
    794c:	685a      	ldr	r2, [r3, #4]
    794e:	68fb      	ldr	r3, [r7, #12]
    7950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7952:	425b      	negs	r3, r3
    7954:	18d2      	adds	r2, r2, r3
    7956:	68fb      	ldr	r3, [r7, #12]
    7958:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    795a:	687b      	ldr	r3, [r7, #4]
    795c:	2b02      	cmp	r3, #2
    795e:	d105      	bne.n	796c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    7960:	693b      	ldr	r3, [r7, #16]
    7962:	2b00      	cmp	r3, #0
    7964:	d002      	beq.n	796c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    7966:	693b      	ldr	r3, [r7, #16]
    7968:	3b01      	subs	r3, #1
    796a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    796c:	693b      	ldr	r3, [r7, #16]
    796e:	1c5a      	adds	r2, r3, #1
    7970:	68fb      	ldr	r3, [r7, #12]
    7972:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
    7974:	697b      	ldr	r3, [r7, #20]
}
    7976:	0018      	movs	r0, r3
    7978:	46bd      	mov	sp, r7
    797a:	b006      	add	sp, #24
    797c:	bd80      	pop	{r7, pc}
    797e:	46c0      	nop			; (mov r8, r8)
    7980:	000088b9 	.word	0x000088b9
    7984:	0000bb09 	.word	0x0000bb09

00007988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    7988:	b580      	push	{r7, lr}
    798a:	b082      	sub	sp, #8
    798c:	af00      	add	r7, sp, #0
    798e:	6078      	str	r0, [r7, #4]
    7990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    7992:	687b      	ldr	r3, [r7, #4]
    7994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7996:	2b00      	cmp	r3, #0
    7998:	d018      	beq.n	79cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    799a:	687b      	ldr	r3, [r7, #4]
    799c:	68da      	ldr	r2, [r3, #12]
    799e:	687b      	ldr	r3, [r7, #4]
    79a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    79a2:	18d2      	adds	r2, r2, r3
    79a4:	687b      	ldr	r3, [r7, #4]
    79a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    79a8:	687b      	ldr	r3, [r7, #4]
    79aa:	68da      	ldr	r2, [r3, #12]
    79ac:	687b      	ldr	r3, [r7, #4]
    79ae:	685b      	ldr	r3, [r3, #4]
    79b0:	429a      	cmp	r2, r3
    79b2:	d303      	bcc.n	79bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    79b4:	687b      	ldr	r3, [r7, #4]
    79b6:	681a      	ldr	r2, [r3, #0]
    79b8:	687b      	ldr	r3, [r7, #4]
    79ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    79bc:	687b      	ldr	r3, [r7, #4]
    79be:	68d9      	ldr	r1, [r3, #12]
    79c0:	687b      	ldr	r3, [r7, #4]
    79c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    79c4:	683b      	ldr	r3, [r7, #0]
    79c6:	0018      	movs	r0, r3
    79c8:	4b02      	ldr	r3, [pc, #8]	; (79d4 <prvCopyDataFromQueue+0x4c>)
    79ca:	4798      	blx	r3
	}
}
    79cc:	46c0      	nop			; (mov r8, r8)
    79ce:	46bd      	mov	sp, r7
    79d0:	b002      	add	sp, #8
    79d2:	bd80      	pop	{r7, pc}
    79d4:	0000bb09 	.word	0x0000bb09

000079d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    79d8:	b580      	push	{r7, lr}
    79da:	b084      	sub	sp, #16
    79dc:	af00      	add	r7, sp, #0
    79de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    79e0:	4b34      	ldr	r3, [pc, #208]	; (7ab4 <prvUnlockQueue+0xdc>)
    79e2:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
    79e4:	230f      	movs	r3, #15
    79e6:	18fb      	adds	r3, r7, r3
    79e8:	687a      	ldr	r2, [r7, #4]
    79ea:	2145      	movs	r1, #69	; 0x45
    79ec:	5c52      	ldrb	r2, [r2, r1]
    79ee:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    79f0:	e022      	b.n	7a38 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
    79f2:	687b      	ldr	r3, [r7, #4]
    79f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    79f6:	2b00      	cmp	r3, #0
    79f8:	d009      	beq.n	7a0e <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
    79fa:	687b      	ldr	r3, [r7, #4]
    79fc:	2100      	movs	r1, #0
    79fe:	0018      	movs	r0, r3
    7a00:	4b2d      	ldr	r3, [pc, #180]	; (7ab8 <prvUnlockQueue+0xe0>)
    7a02:	4798      	blx	r3
    7a04:	1e03      	subs	r3, r0, #0
    7a06:	d00f      	beq.n	7a28 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
    7a08:	4b2c      	ldr	r3, [pc, #176]	; (7abc <prvUnlockQueue+0xe4>)
    7a0a:	4798      	blx	r3
    7a0c:	e00c      	b.n	7a28 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    7a0e:	687b      	ldr	r3, [r7, #4]
    7a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7a12:	2b00      	cmp	r3, #0
    7a14:	d017      	beq.n	7a46 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    7a16:	687b      	ldr	r3, [r7, #4]
    7a18:	3324      	adds	r3, #36	; 0x24
    7a1a:	0018      	movs	r0, r3
    7a1c:	4b28      	ldr	r3, [pc, #160]	; (7ac0 <prvUnlockQueue+0xe8>)
    7a1e:	4798      	blx	r3
    7a20:	1e03      	subs	r3, r0, #0
    7a22:	d001      	beq.n	7a28 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
    7a24:	4b25      	ldr	r3, [pc, #148]	; (7abc <prvUnlockQueue+0xe4>)
    7a26:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    7a28:	230f      	movs	r3, #15
    7a2a:	18fb      	adds	r3, r7, r3
    7a2c:	781b      	ldrb	r3, [r3, #0]
    7a2e:	3b01      	subs	r3, #1
    7a30:	b2da      	uxtb	r2, r3
    7a32:	230f      	movs	r3, #15
    7a34:	18fb      	adds	r3, r7, r3
    7a36:	701a      	strb	r2, [r3, #0]
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    7a38:	230f      	movs	r3, #15
    7a3a:	18fb      	adds	r3, r7, r3
    7a3c:	781b      	ldrb	r3, [r3, #0]
    7a3e:	b25b      	sxtb	r3, r3
    7a40:	2b00      	cmp	r3, #0
    7a42:	dcd6      	bgt.n	79f2 <prvUnlockQueue+0x1a>
    7a44:	e000      	b.n	7a48 <prvUnlockQueue+0x70>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						break;
    7a46:	46c0      	nop			; (mov r8, r8)
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    7a48:	687b      	ldr	r3, [r7, #4]
    7a4a:	2245      	movs	r2, #69	; 0x45
    7a4c:	21ff      	movs	r1, #255	; 0xff
    7a4e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    7a50:	4b1c      	ldr	r3, [pc, #112]	; (7ac4 <prvUnlockQueue+0xec>)
    7a52:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    7a54:	4b17      	ldr	r3, [pc, #92]	; (7ab4 <prvUnlockQueue+0xdc>)
    7a56:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
    7a58:	230e      	movs	r3, #14
    7a5a:	18fb      	adds	r3, r7, r3
    7a5c:	687a      	ldr	r2, [r7, #4]
    7a5e:	2144      	movs	r1, #68	; 0x44
    7a60:	5c52      	ldrb	r2, [r2, r1]
    7a62:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
    7a64:	e014      	b.n	7a90 <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    7a66:	687b      	ldr	r3, [r7, #4]
    7a68:	691b      	ldr	r3, [r3, #16]
    7a6a:	2b00      	cmp	r3, #0
    7a6c:	d017      	beq.n	7a9e <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    7a6e:	687b      	ldr	r3, [r7, #4]
    7a70:	3310      	adds	r3, #16
    7a72:	0018      	movs	r0, r3
    7a74:	4b12      	ldr	r3, [pc, #72]	; (7ac0 <prvUnlockQueue+0xe8>)
    7a76:	4798      	blx	r3
    7a78:	1e03      	subs	r3, r0, #0
    7a7a:	d001      	beq.n	7a80 <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
    7a7c:	4b0f      	ldr	r3, [pc, #60]	; (7abc <prvUnlockQueue+0xe4>)
    7a7e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    7a80:	230e      	movs	r3, #14
    7a82:	18fb      	adds	r3, r7, r3
    7a84:	781b      	ldrb	r3, [r3, #0]
    7a86:	3b01      	subs	r3, #1
    7a88:	b2da      	uxtb	r2, r3
    7a8a:	230e      	movs	r3, #14
    7a8c:	18fb      	adds	r3, r7, r3
    7a8e:	701a      	strb	r2, [r3, #0]
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    7a90:	230e      	movs	r3, #14
    7a92:	18fb      	adds	r3, r7, r3
    7a94:	781b      	ldrb	r3, [r3, #0]
    7a96:	b25b      	sxtb	r3, r3
    7a98:	2b00      	cmp	r3, #0
    7a9a:	dce4      	bgt.n	7a66 <prvUnlockQueue+0x8e>
    7a9c:	e000      	b.n	7aa0 <prvUnlockQueue+0xc8>

				--cRxLock;
			}
			else
			{
				break;
    7a9e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    7aa0:	687b      	ldr	r3, [r7, #4]
    7aa2:	2244      	movs	r2, #68	; 0x44
    7aa4:	21ff      	movs	r1, #255	; 0xff
    7aa6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
    7aa8:	4b06      	ldr	r3, [pc, #24]	; (7ac4 <prvUnlockQueue+0xec>)
    7aaa:	4798      	blx	r3
}
    7aac:	46c0      	nop			; (mov r8, r8)
    7aae:	46bd      	mov	sp, r7
    7ab0:	b004      	add	sp, #16
    7ab2:	bd80      	pop	{r7, pc}
    7ab4:	00007069 	.word	0x00007069
    7ab8:	00007bad 	.word	0x00007bad
    7abc:	000085f1 	.word	0x000085f1
    7ac0:	00008455 	.word	0x00008455
    7ac4:	0000708d 	.word	0x0000708d

00007ac8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    7ac8:	b580      	push	{r7, lr}
    7aca:	b084      	sub	sp, #16
    7acc:	af00      	add	r7, sp, #0
    7ace:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    7ad0:	4b08      	ldr	r3, [pc, #32]	; (7af4 <prvIsQueueEmpty+0x2c>)
    7ad2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    7ad4:	687b      	ldr	r3, [r7, #4]
    7ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7ad8:	2b00      	cmp	r3, #0
    7ada:	d102      	bne.n	7ae2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
    7adc:	2301      	movs	r3, #1
    7ade:	60fb      	str	r3, [r7, #12]
    7ae0:	e001      	b.n	7ae6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
    7ae2:	2300      	movs	r3, #0
    7ae4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    7ae6:	4b04      	ldr	r3, [pc, #16]	; (7af8 <prvIsQueueEmpty+0x30>)
    7ae8:	4798      	blx	r3

	return xReturn;
    7aea:	68fb      	ldr	r3, [r7, #12]
}
    7aec:	0018      	movs	r0, r3
    7aee:	46bd      	mov	sp, r7
    7af0:	b004      	add	sp, #16
    7af2:	bd80      	pop	{r7, pc}
    7af4:	00007069 	.word	0x00007069
    7af8:	0000708d 	.word	0x0000708d

00007afc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    7afc:	b580      	push	{r7, lr}
    7afe:	b084      	sub	sp, #16
    7b00:	af00      	add	r7, sp, #0
    7b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
    7b04:	4b09      	ldr	r3, [pc, #36]	; (7b2c <prvIsQueueFull+0x30>)
    7b06:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7b0c:	687b      	ldr	r3, [r7, #4]
    7b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7b10:	429a      	cmp	r2, r3
    7b12:	d102      	bne.n	7b1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
    7b14:	2301      	movs	r3, #1
    7b16:	60fb      	str	r3, [r7, #12]
    7b18:	e001      	b.n	7b1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
    7b1a:	2300      	movs	r3, #0
    7b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    7b1e:	4b04      	ldr	r3, [pc, #16]	; (7b30 <prvIsQueueFull+0x34>)
    7b20:	4798      	blx	r3

	return xReturn;
    7b22:	68fb      	ldr	r3, [r7, #12]
}
    7b24:	0018      	movs	r0, r3
    7b26:	46bd      	mov	sp, r7
    7b28:	b004      	add	sp, #16
    7b2a:	bd80      	pop	{r7, pc}
    7b2c:	00007069 	.word	0x00007069
    7b30:	0000708d 	.word	0x0000708d

00007b34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    7b34:	b580      	push	{r7, lr}
    7b36:	b086      	sub	sp, #24
    7b38:	af00      	add	r7, sp, #0
    7b3a:	60f8      	str	r0, [r7, #12]
    7b3c:	60b9      	str	r1, [r7, #8]
    7b3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    7b40:	68fb      	ldr	r3, [r7, #12]
    7b42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
    7b44:	4b15      	ldr	r3, [pc, #84]	; (7b9c <vQueueWaitForMessageRestricted+0x68>)
    7b46:	4798      	blx	r3
    7b48:	697b      	ldr	r3, [r7, #20]
    7b4a:	2244      	movs	r2, #68	; 0x44
    7b4c:	5c9b      	ldrb	r3, [r3, r2]
    7b4e:	b25b      	sxtb	r3, r3
    7b50:	3301      	adds	r3, #1
    7b52:	d103      	bne.n	7b5c <vQueueWaitForMessageRestricted+0x28>
    7b54:	697b      	ldr	r3, [r7, #20]
    7b56:	2244      	movs	r2, #68	; 0x44
    7b58:	2100      	movs	r1, #0
    7b5a:	5499      	strb	r1, [r3, r2]
    7b5c:	697b      	ldr	r3, [r7, #20]
    7b5e:	2245      	movs	r2, #69	; 0x45
    7b60:	5c9b      	ldrb	r3, [r3, r2]
    7b62:	b25b      	sxtb	r3, r3
    7b64:	3301      	adds	r3, #1
    7b66:	d103      	bne.n	7b70 <vQueueWaitForMessageRestricted+0x3c>
    7b68:	697b      	ldr	r3, [r7, #20]
    7b6a:	2245      	movs	r2, #69	; 0x45
    7b6c:	2100      	movs	r1, #0
    7b6e:	5499      	strb	r1, [r3, r2]
    7b70:	4b0b      	ldr	r3, [pc, #44]	; (7ba0 <vQueueWaitForMessageRestricted+0x6c>)
    7b72:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    7b74:	697b      	ldr	r3, [r7, #20]
    7b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7b78:	2b00      	cmp	r3, #0
    7b7a:	d106      	bne.n	7b8a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    7b7c:	697b      	ldr	r3, [r7, #20]
    7b7e:	3324      	adds	r3, #36	; 0x24
    7b80:	687a      	ldr	r2, [r7, #4]
    7b82:	68b9      	ldr	r1, [r7, #8]
    7b84:	0018      	movs	r0, r3
    7b86:	4b07      	ldr	r3, [pc, #28]	; (7ba4 <vQueueWaitForMessageRestricted+0x70>)
    7b88:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
    7b8a:	697b      	ldr	r3, [r7, #20]
    7b8c:	0018      	movs	r0, r3
    7b8e:	4b06      	ldr	r3, [pc, #24]	; (7ba8 <vQueueWaitForMessageRestricted+0x74>)
    7b90:	4798      	blx	r3
	}
    7b92:	46c0      	nop			; (mov r8, r8)
    7b94:	46bd      	mov	sp, r7
    7b96:	b006      	add	sp, #24
    7b98:	bd80      	pop	{r7, pc}
    7b9a:	46c0      	nop			; (mov r8, r8)
    7b9c:	00007069 	.word	0x00007069
    7ba0:	0000708d 	.word	0x0000708d
    7ba4:	00008401 	.word	0x00008401
    7ba8:	000079d9 	.word	0x000079d9

00007bac <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
    7bac:	b580      	push	{r7, lr}
    7bae:	b086      	sub	sp, #24
    7bb0:	af00      	add	r7, sp, #0
    7bb2:	6078      	str	r0, [r7, #4]
    7bb4:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
    7bb6:	687b      	ldr	r3, [r7, #4]
    7bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    7bba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
    7bbc:	2300      	movs	r3, #0
    7bbe:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
    7bc0:	693b      	ldr	r3, [r7, #16]
    7bc2:	2b00      	cmp	r3, #0
    7bc4:	d101      	bne.n	7bca <prvNotifyQueueSetContainer+0x1e>
    7bc6:	b672      	cpsid	i
    7bc8:	e7fe      	b.n	7bc8 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
    7bca:	693b      	ldr	r3, [r7, #16]
    7bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7bce:	693b      	ldr	r3, [r7, #16]
    7bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7bd2:	429a      	cmp	r2, r3
    7bd4:	d301      	bcc.n	7bda <prvNotifyQueueSetContainer+0x2e>
    7bd6:	b672      	cpsid	i
    7bd8:	e7fe      	b.n	7bd8 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
    7bda:	693b      	ldr	r3, [r7, #16]
    7bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    7bde:	693b      	ldr	r3, [r7, #16]
    7be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7be2:	429a      	cmp	r2, r3
    7be4:	d22a      	bcs.n	7c3c <prvNotifyQueueSetContainer+0x90>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
    7be6:	230f      	movs	r3, #15
    7be8:	18fb      	adds	r3, r7, r3
    7bea:	693a      	ldr	r2, [r7, #16]
    7bec:	2145      	movs	r1, #69	; 0x45
    7bee:	5c52      	ldrb	r2, [r2, r1]
    7bf0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
    7bf2:	683a      	ldr	r2, [r7, #0]
    7bf4:	1d39      	adds	r1, r7, #4
    7bf6:	693b      	ldr	r3, [r7, #16]
    7bf8:	0018      	movs	r0, r3
    7bfa:	4b13      	ldr	r3, [pc, #76]	; (7c48 <prvNotifyQueueSetContainer+0x9c>)
    7bfc:	4798      	blx	r3
    7bfe:	0003      	movs	r3, r0
    7c00:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
    7c02:	230f      	movs	r3, #15
    7c04:	18fb      	adds	r3, r7, r3
    7c06:	781b      	ldrb	r3, [r3, #0]
    7c08:	b25b      	sxtb	r3, r3
    7c0a:	3301      	adds	r3, #1
    7c0c:	d10d      	bne.n	7c2a <prvNotifyQueueSetContainer+0x7e>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
    7c0e:	693b      	ldr	r3, [r7, #16]
    7c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    7c12:	2b00      	cmp	r3, #0
    7c14:	d012      	beq.n	7c3c <prvNotifyQueueSetContainer+0x90>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
    7c16:	693b      	ldr	r3, [r7, #16]
    7c18:	3324      	adds	r3, #36	; 0x24
    7c1a:	0018      	movs	r0, r3
    7c1c:	4b0b      	ldr	r3, [pc, #44]	; (7c4c <prvNotifyQueueSetContainer+0xa0>)
    7c1e:	4798      	blx	r3
    7c20:	1e03      	subs	r3, r0, #0
    7c22:	d00b      	beq.n	7c3c <prvNotifyQueueSetContainer+0x90>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
    7c24:	2301      	movs	r3, #1
    7c26:	617b      	str	r3, [r7, #20]
    7c28:	e008      	b.n	7c3c <prvNotifyQueueSetContainer+0x90>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
    7c2a:	230f      	movs	r3, #15
    7c2c:	18fb      	adds	r3, r7, r3
    7c2e:	781b      	ldrb	r3, [r3, #0]
    7c30:	3301      	adds	r3, #1
    7c32:	b2db      	uxtb	r3, r3
    7c34:	b259      	sxtb	r1, r3
    7c36:	693b      	ldr	r3, [r7, #16]
    7c38:	2245      	movs	r2, #69	; 0x45
    7c3a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    7c3c:	697b      	ldr	r3, [r7, #20]
	}
    7c3e:	0018      	movs	r0, r3
    7c40:	46bd      	mov	sp, r7
    7c42:	b006      	add	sp, #24
    7c44:	bd80      	pop	{r7, pc}
    7c46:	46c0      	nop			; (mov r8, r8)
    7c48:	000078a9 	.word	0x000078a9
    7c4c:	00008455 	.word	0x00008455

00007c50 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    7c50:	b590      	push	{r4, r7, lr}
    7c52:	b08d      	sub	sp, #52	; 0x34
    7c54:	af04      	add	r7, sp, #16
    7c56:	60f8      	str	r0, [r7, #12]
    7c58:	60b9      	str	r1, [r7, #8]
    7c5a:	603b      	str	r3, [r7, #0]
    7c5c:	1dbb      	adds	r3, r7, #6
    7c5e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7c60:	1dbb      	adds	r3, r7, #6
    7c62:	881b      	ldrh	r3, [r3, #0]
    7c64:	009b      	lsls	r3, r3, #2
    7c66:	0018      	movs	r0, r3
    7c68:	4b1d      	ldr	r3, [pc, #116]	; (7ce0 <xTaskCreate+0x90>)
    7c6a:	4798      	blx	r3
    7c6c:	0003      	movs	r3, r0
    7c6e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
    7c70:	697b      	ldr	r3, [r7, #20]
    7c72:	2b00      	cmp	r3, #0
    7c74:	d010      	beq.n	7c98 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    7c76:	2050      	movs	r0, #80	; 0x50
    7c78:	4b19      	ldr	r3, [pc, #100]	; (7ce0 <xTaskCreate+0x90>)
    7c7a:	4798      	blx	r3
    7c7c:	0003      	movs	r3, r0
    7c7e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
    7c80:	69fb      	ldr	r3, [r7, #28]
    7c82:	2b00      	cmp	r3, #0
    7c84:	d003      	beq.n	7c8e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    7c86:	69fb      	ldr	r3, [r7, #28]
    7c88:	697a      	ldr	r2, [r7, #20]
    7c8a:	631a      	str	r2, [r3, #48]	; 0x30
    7c8c:	e006      	b.n	7c9c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    7c8e:	697b      	ldr	r3, [r7, #20]
    7c90:	0018      	movs	r0, r3
    7c92:	4b14      	ldr	r3, [pc, #80]	; (7ce4 <xTaskCreate+0x94>)
    7c94:	4798      	blx	r3
    7c96:	e001      	b.n	7c9c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
    7c98:	2300      	movs	r3, #0
    7c9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    7c9c:	69fb      	ldr	r3, [r7, #28]
    7c9e:	2b00      	cmp	r3, #0
    7ca0:	d016      	beq.n	7cd0 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    7ca2:	1dbb      	adds	r3, r7, #6
    7ca4:	881a      	ldrh	r2, [r3, #0]
    7ca6:	683c      	ldr	r4, [r7, #0]
    7ca8:	68b9      	ldr	r1, [r7, #8]
    7caa:	68f8      	ldr	r0, [r7, #12]
    7cac:	2300      	movs	r3, #0
    7cae:	9303      	str	r3, [sp, #12]
    7cb0:	69fb      	ldr	r3, [r7, #28]
    7cb2:	9302      	str	r3, [sp, #8]
    7cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7cb6:	9301      	str	r3, [sp, #4]
    7cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7cba:	9300      	str	r3, [sp, #0]
    7cbc:	0023      	movs	r3, r4
    7cbe:	4c0a      	ldr	r4, [pc, #40]	; (7ce8 <xTaskCreate+0x98>)
    7cc0:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
    7cc2:	69fb      	ldr	r3, [r7, #28]
    7cc4:	0018      	movs	r0, r3
    7cc6:	4b09      	ldr	r3, [pc, #36]	; (7cec <xTaskCreate+0x9c>)
    7cc8:	4798      	blx	r3
			xReturn = pdPASS;
    7cca:	2301      	movs	r3, #1
    7ccc:	61bb      	str	r3, [r7, #24]
    7cce:	e002      	b.n	7cd6 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    7cd0:	2301      	movs	r3, #1
    7cd2:	425b      	negs	r3, r3
    7cd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
    7cd6:	69bb      	ldr	r3, [r7, #24]
	}
    7cd8:	0018      	movs	r0, r3
    7cda:	46bd      	mov	sp, r7
    7cdc:	b009      	add	sp, #36	; 0x24
    7cde:	bd90      	pop	{r4, r7, pc}
    7ce0:	0000717d 	.word	0x0000717d
    7ce4:	00007211 	.word	0x00007211
    7ce8:	00007cf1 	.word	0x00007cf1
    7cec:	00007ded 	.word	0x00007ded

00007cf0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    7cf0:	b580      	push	{r7, lr}
    7cf2:	b086      	sub	sp, #24
    7cf4:	af00      	add	r7, sp, #0
    7cf6:	60f8      	str	r0, [r7, #12]
    7cf8:	60b9      	str	r1, [r7, #8]
    7cfa:	607a      	str	r2, [r7, #4]
    7cfc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    7cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7d02:	687b      	ldr	r3, [r7, #4]
    7d04:	4936      	ldr	r1, [pc, #216]	; (7de0 <prvInitialiseNewTask+0xf0>)
    7d06:	468c      	mov	ip, r1
    7d08:	4463      	add	r3, ip
    7d0a:	009b      	lsls	r3, r3, #2
    7d0c:	18d3      	adds	r3, r2, r3
    7d0e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
    7d10:	693b      	ldr	r3, [r7, #16]
    7d12:	2207      	movs	r2, #7
    7d14:	4393      	bics	r3, r2
    7d16:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
    7d18:	693b      	ldr	r3, [r7, #16]
    7d1a:	2207      	movs	r2, #7
    7d1c:	4013      	ands	r3, r2
    7d1e:	d001      	beq.n	7d24 <prvInitialiseNewTask+0x34>
    7d20:	b672      	cpsid	i
    7d22:	e7fe      	b.n	7d22 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7d24:	2300      	movs	r3, #0
    7d26:	617b      	str	r3, [r7, #20]
    7d28:	e013      	b.n	7d52 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    7d2a:	68ba      	ldr	r2, [r7, #8]
    7d2c:	697b      	ldr	r3, [r7, #20]
    7d2e:	18d3      	adds	r3, r2, r3
    7d30:	7818      	ldrb	r0, [r3, #0]
    7d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7d34:	2134      	movs	r1, #52	; 0x34
    7d36:	697b      	ldr	r3, [r7, #20]
    7d38:	18d3      	adds	r3, r2, r3
    7d3a:	185b      	adds	r3, r3, r1
    7d3c:	1c02      	adds	r2, r0, #0
    7d3e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    7d40:	68ba      	ldr	r2, [r7, #8]
    7d42:	697b      	ldr	r3, [r7, #20]
    7d44:	18d3      	adds	r3, r2, r3
    7d46:	781b      	ldrb	r3, [r3, #0]
    7d48:	2b00      	cmp	r3, #0
    7d4a:	d006      	beq.n	7d5a <prvInitialiseNewTask+0x6a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    7d4c:	697b      	ldr	r3, [r7, #20]
    7d4e:	3301      	adds	r3, #1
    7d50:	617b      	str	r3, [r7, #20]
    7d52:	697b      	ldr	r3, [r7, #20]
    7d54:	2b0b      	cmp	r3, #11
    7d56:	d9e8      	bls.n	7d2a <prvInitialiseNewTask+0x3a>
    7d58:	e000      	b.n	7d5c <prvInitialiseNewTask+0x6c>
		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
		{
			break;
    7d5a:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    7d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d5e:	223f      	movs	r2, #63	; 0x3f
    7d60:	2100      	movs	r1, #0
    7d62:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    7d64:	6a3b      	ldr	r3, [r7, #32]
    7d66:	2b04      	cmp	r3, #4
    7d68:	d901      	bls.n	7d6e <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    7d6a:	2304      	movs	r3, #4
    7d6c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    7d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d70:	6a3a      	ldr	r2, [r7, #32]
    7d72:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    7d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d76:	6a3a      	ldr	r2, [r7, #32]
    7d78:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
    7d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d7c:	2200      	movs	r2, #0
    7d7e:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    7d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d82:	3304      	adds	r3, #4
    7d84:	0018      	movs	r0, r3
    7d86:	4b17      	ldr	r3, [pc, #92]	; (7de4 <prvInitialiseNewTask+0xf4>)
    7d88:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    7d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d8c:	3318      	adds	r3, #24
    7d8e:	0018      	movs	r0, r3
    7d90:	4b14      	ldr	r3, [pc, #80]	; (7de4 <prvInitialiseNewTask+0xf4>)
    7d92:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    7d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7d98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    7d9a:	6a3b      	ldr	r3, [r7, #32]
    7d9c:	2205      	movs	r2, #5
    7d9e:	1ad2      	subs	r2, r2, r3
    7da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7da2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    7da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7da8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    7daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7dac:	2200      	movs	r2, #0
    7dae:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    7db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7db2:	224c      	movs	r2, #76	; 0x4c
    7db4:	2100      	movs	r1, #0
    7db6:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    7db8:	683a      	ldr	r2, [r7, #0]
    7dba:	68f9      	ldr	r1, [r7, #12]
    7dbc:	693b      	ldr	r3, [r7, #16]
    7dbe:	0018      	movs	r0, r3
    7dc0:	4b09      	ldr	r3, [pc, #36]	; (7de8 <prvInitialiseNewTask+0xf8>)
    7dc2:	4798      	blx	r3
    7dc4:	0002      	movs	r2, r0
    7dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7dc8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    7dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7dcc:	2b00      	cmp	r3, #0
    7dce:	d002      	beq.n	7dd6 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    7dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7dd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7dd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    7dd6:	46c0      	nop			; (mov r8, r8)
    7dd8:	46bd      	mov	sp, r7
    7dda:	b006      	add	sp, #24
    7ddc:	bd80      	pop	{r7, pc}
    7dde:	46c0      	nop			; (mov r8, r8)
    7de0:	3fffffff 	.word	0x3fffffff
    7de4:	00006e2d 	.word	0x00006e2d
    7de8:	00006f45 	.word	0x00006f45

00007dec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    7dec:	b580      	push	{r7, lr}
    7dee:	b082      	sub	sp, #8
    7df0:	af00      	add	r7, sp, #0
    7df2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    7df4:	4b29      	ldr	r3, [pc, #164]	; (7e9c <prvAddNewTaskToReadyList+0xb0>)
    7df6:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
    7df8:	4b29      	ldr	r3, [pc, #164]	; (7ea0 <prvAddNewTaskToReadyList+0xb4>)
    7dfa:	681b      	ldr	r3, [r3, #0]
    7dfc:	1c5a      	adds	r2, r3, #1
    7dfe:	4b28      	ldr	r3, [pc, #160]	; (7ea0 <prvAddNewTaskToReadyList+0xb4>)
    7e00:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
    7e02:	4b28      	ldr	r3, [pc, #160]	; (7ea4 <prvAddNewTaskToReadyList+0xb8>)
    7e04:	681b      	ldr	r3, [r3, #0]
    7e06:	2b00      	cmp	r3, #0
    7e08:	d109      	bne.n	7e1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    7e0a:	4b26      	ldr	r3, [pc, #152]	; (7ea4 <prvAddNewTaskToReadyList+0xb8>)
    7e0c:	687a      	ldr	r2, [r7, #4]
    7e0e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    7e10:	4b23      	ldr	r3, [pc, #140]	; (7ea0 <prvAddNewTaskToReadyList+0xb4>)
    7e12:	681b      	ldr	r3, [r3, #0]
    7e14:	2b01      	cmp	r3, #1
    7e16:	d110      	bne.n	7e3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    7e18:	4b23      	ldr	r3, [pc, #140]	; (7ea8 <prvAddNewTaskToReadyList+0xbc>)
    7e1a:	4798      	blx	r3
    7e1c:	e00d      	b.n	7e3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    7e1e:	4b23      	ldr	r3, [pc, #140]	; (7eac <prvAddNewTaskToReadyList+0xc0>)
    7e20:	681b      	ldr	r3, [r3, #0]
    7e22:	2b00      	cmp	r3, #0
    7e24:	d109      	bne.n	7e3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    7e26:	4b1f      	ldr	r3, [pc, #124]	; (7ea4 <prvAddNewTaskToReadyList+0xb8>)
    7e28:	681b      	ldr	r3, [r3, #0]
    7e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7e2c:	687b      	ldr	r3, [r7, #4]
    7e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e30:	429a      	cmp	r2, r3
    7e32:	d802      	bhi.n	7e3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
    7e34:	4b1b      	ldr	r3, [pc, #108]	; (7ea4 <prvAddNewTaskToReadyList+0xb8>)
    7e36:	687a      	ldr	r2, [r7, #4]
    7e38:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    7e3a:	4b1d      	ldr	r3, [pc, #116]	; (7eb0 <prvAddNewTaskToReadyList+0xc4>)
    7e3c:	681b      	ldr	r3, [r3, #0]
    7e3e:	1c5a      	adds	r2, r3, #1
    7e40:	4b1b      	ldr	r3, [pc, #108]	; (7eb0 <prvAddNewTaskToReadyList+0xc4>)
    7e42:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    7e44:	687b      	ldr	r3, [r7, #4]
    7e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7e48:	4b1a      	ldr	r3, [pc, #104]	; (7eb4 <prvAddNewTaskToReadyList+0xc8>)
    7e4a:	681b      	ldr	r3, [r3, #0]
    7e4c:	429a      	cmp	r2, r3
    7e4e:	d903      	bls.n	7e58 <prvAddNewTaskToReadyList+0x6c>
    7e50:	687b      	ldr	r3, [r7, #4]
    7e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7e54:	4b17      	ldr	r3, [pc, #92]	; (7eb4 <prvAddNewTaskToReadyList+0xc8>)
    7e56:	601a      	str	r2, [r3, #0]
    7e58:	687b      	ldr	r3, [r7, #4]
    7e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7e5c:	0013      	movs	r3, r2
    7e5e:	009b      	lsls	r3, r3, #2
    7e60:	189b      	adds	r3, r3, r2
    7e62:	009b      	lsls	r3, r3, #2
    7e64:	4a14      	ldr	r2, [pc, #80]	; (7eb8 <prvAddNewTaskToReadyList+0xcc>)
    7e66:	189a      	adds	r2, r3, r2
    7e68:	687b      	ldr	r3, [r7, #4]
    7e6a:	3304      	adds	r3, #4
    7e6c:	0019      	movs	r1, r3
    7e6e:	0010      	movs	r0, r2
    7e70:	4b12      	ldr	r3, [pc, #72]	; (7ebc <prvAddNewTaskToReadyList+0xd0>)
    7e72:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    7e74:	4b12      	ldr	r3, [pc, #72]	; (7ec0 <prvAddNewTaskToReadyList+0xd4>)
    7e76:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
    7e78:	4b0c      	ldr	r3, [pc, #48]	; (7eac <prvAddNewTaskToReadyList+0xc0>)
    7e7a:	681b      	ldr	r3, [r3, #0]
    7e7c:	2b00      	cmp	r3, #0
    7e7e:	d008      	beq.n	7e92 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    7e80:	4b08      	ldr	r3, [pc, #32]	; (7ea4 <prvAddNewTaskToReadyList+0xb8>)
    7e82:	681b      	ldr	r3, [r3, #0]
    7e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7e86:	687b      	ldr	r3, [r7, #4]
    7e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7e8a:	429a      	cmp	r2, r3
    7e8c:	d201      	bcs.n	7e92 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    7e8e:	4b0d      	ldr	r3, [pc, #52]	; (7ec4 <prvAddNewTaskToReadyList+0xd8>)
    7e90:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    7e92:	46c0      	nop			; (mov r8, r8)
    7e94:	46bd      	mov	sp, r7
    7e96:	b002      	add	sp, #8
    7e98:	bd80      	pop	{r7, pc}
    7e9a:	46c0      	nop			; (mov r8, r8)
    7e9c:	00007069 	.word	0x00007069
    7ea0:	20003c80 	.word	0x20003c80
    7ea4:	20003ba8 	.word	0x20003ba8
    7ea8:	00008635 	.word	0x00008635
    7eac:	20003c8c 	.word	0x20003c8c
    7eb0:	20003c9c 	.word	0x20003c9c
    7eb4:	20003c88 	.word	0x20003c88
    7eb8:	20003bac 	.word	0x20003bac
    7ebc:	00006e45 	.word	0x00006e45
    7ec0:	0000708d 	.word	0x0000708d
    7ec4:	00007049 	.word	0x00007049

00007ec8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    7ec8:	b580      	push	{r7, lr}
    7eca:	b086      	sub	sp, #24
    7ecc:	af00      	add	r7, sp, #0
    7ece:	6078      	str	r0, [r7, #4]
    7ed0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    7ed2:	2300      	movs	r3, #0
    7ed4:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
    7ed6:	687b      	ldr	r3, [r7, #4]
    7ed8:	2b00      	cmp	r3, #0
    7eda:	d101      	bne.n	7ee0 <vTaskDelayUntil+0x18>
    7edc:	b672      	cpsid	i
    7ede:	e7fe      	b.n	7ede <vTaskDelayUntil+0x16>
		configASSERT( ( xTimeIncrement > 0U ) );
    7ee0:	683b      	ldr	r3, [r7, #0]
    7ee2:	2b00      	cmp	r3, #0
    7ee4:	d101      	bne.n	7eea <vTaskDelayUntil+0x22>
    7ee6:	b672      	cpsid	i
    7ee8:	e7fe      	b.n	7ee8 <vTaskDelayUntil+0x20>
		configASSERT( uxSchedulerSuspended == 0 );
    7eea:	4b23      	ldr	r3, [pc, #140]	; (7f78 <vTaskDelayUntil+0xb0>)
    7eec:	681b      	ldr	r3, [r3, #0]
    7eee:	2b00      	cmp	r3, #0
    7ef0:	d001      	beq.n	7ef6 <vTaskDelayUntil+0x2e>
    7ef2:	b672      	cpsid	i
    7ef4:	e7fe      	b.n	7ef4 <vTaskDelayUntil+0x2c>

		vTaskSuspendAll();
    7ef6:	4b21      	ldr	r3, [pc, #132]	; (7f7c <vTaskDelayUntil+0xb4>)
    7ef8:	4798      	blx	r3
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    7efa:	4b21      	ldr	r3, [pc, #132]	; (7f80 <vTaskDelayUntil+0xb8>)
    7efc:	681b      	ldr	r3, [r3, #0]
    7efe:	613b      	str	r3, [r7, #16]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    7f00:	687b      	ldr	r3, [r7, #4]
    7f02:	681a      	ldr	r2, [r3, #0]
    7f04:	683b      	ldr	r3, [r7, #0]
    7f06:	18d3      	adds	r3, r2, r3
    7f08:	60fb      	str	r3, [r7, #12]

			if( xConstTickCount < *pxPreviousWakeTime )
    7f0a:	687b      	ldr	r3, [r7, #4]
    7f0c:	681a      	ldr	r2, [r3, #0]
    7f0e:	693b      	ldr	r3, [r7, #16]
    7f10:	429a      	cmp	r2, r3
    7f12:	d90b      	bls.n	7f2c <vTaskDelayUntil+0x64>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    7f14:	687b      	ldr	r3, [r7, #4]
    7f16:	681a      	ldr	r2, [r3, #0]
    7f18:	68fb      	ldr	r3, [r7, #12]
    7f1a:	429a      	cmp	r2, r3
    7f1c:	d911      	bls.n	7f42 <vTaskDelayUntil+0x7a>
    7f1e:	68fa      	ldr	r2, [r7, #12]
    7f20:	693b      	ldr	r3, [r7, #16]
    7f22:	429a      	cmp	r2, r3
    7f24:	d90d      	bls.n	7f42 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    7f26:	2301      	movs	r3, #1
    7f28:	617b      	str	r3, [r7, #20]
    7f2a:	e00a      	b.n	7f42 <vTaskDelayUntil+0x7a>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    7f2c:	687b      	ldr	r3, [r7, #4]
    7f2e:	681a      	ldr	r2, [r3, #0]
    7f30:	68fb      	ldr	r3, [r7, #12]
    7f32:	429a      	cmp	r2, r3
    7f34:	d803      	bhi.n	7f3e <vTaskDelayUntil+0x76>
    7f36:	68fa      	ldr	r2, [r7, #12]
    7f38:	693b      	ldr	r3, [r7, #16]
    7f3a:	429a      	cmp	r2, r3
    7f3c:	d901      	bls.n	7f42 <vTaskDelayUntil+0x7a>
				{
					xShouldDelay = pdTRUE;
    7f3e:	2301      	movs	r3, #1
    7f40:	617b      	str	r3, [r7, #20]
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    7f42:	687b      	ldr	r3, [r7, #4]
    7f44:	68fa      	ldr	r2, [r7, #12]
    7f46:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    7f48:	697b      	ldr	r3, [r7, #20]
    7f4a:	2b00      	cmp	r3, #0
    7f4c:	d006      	beq.n	7f5c <vTaskDelayUntil+0x94>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    7f4e:	68fa      	ldr	r2, [r7, #12]
    7f50:	693b      	ldr	r3, [r7, #16]
    7f52:	1ad3      	subs	r3, r2, r3
    7f54:	2100      	movs	r1, #0
    7f56:	0018      	movs	r0, r3
    7f58:	4b0a      	ldr	r3, [pc, #40]	; (7f84 <vTaskDelayUntil+0xbc>)
    7f5a:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    7f5c:	4b0a      	ldr	r3, [pc, #40]	; (7f88 <vTaskDelayUntil+0xc0>)
    7f5e:	4798      	blx	r3
    7f60:	0003      	movs	r3, r0
    7f62:	60bb      	str	r3, [r7, #8]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    7f64:	68bb      	ldr	r3, [r7, #8]
    7f66:	2b00      	cmp	r3, #0
    7f68:	d101      	bne.n	7f6e <vTaskDelayUntil+0xa6>
		{
			portYIELD_WITHIN_API();
    7f6a:	4b08      	ldr	r3, [pc, #32]	; (7f8c <vTaskDelayUntil+0xc4>)
    7f6c:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    7f6e:	46c0      	nop			; (mov r8, r8)
    7f70:	46bd      	mov	sp, r7
    7f72:	b006      	add	sp, #24
    7f74:	bd80      	pop	{r7, pc}
    7f76:	46c0      	nop			; (mov r8, r8)
    7f78:	20003ca8 	.word	0x20003ca8
    7f7c:	00008019 	.word	0x00008019
    7f80:	20003c84 	.word	0x20003c84
    7f84:	0000899d 	.word	0x0000899d
    7f88:	00008031 	.word	0x00008031
    7f8c:	00007049 	.word	0x00007049

00007f90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    7f90:	b590      	push	{r4, r7, lr}
    7f92:	b085      	sub	sp, #20
    7f94:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    7f96:	2380      	movs	r3, #128	; 0x80
    7f98:	005a      	lsls	r2, r3, #1
    7f9a:	4916      	ldr	r1, [pc, #88]	; (7ff4 <vTaskStartScheduler+0x64>)
    7f9c:	4816      	ldr	r0, [pc, #88]	; (7ff8 <vTaskStartScheduler+0x68>)
    7f9e:	4b17      	ldr	r3, [pc, #92]	; (7ffc <vTaskStartScheduler+0x6c>)
    7fa0:	9301      	str	r3, [sp, #4]
    7fa2:	2300      	movs	r3, #0
    7fa4:	9300      	str	r3, [sp, #0]
    7fa6:	2300      	movs	r3, #0
    7fa8:	4c15      	ldr	r4, [pc, #84]	; (8000 <vTaskStartScheduler+0x70>)
    7faa:	47a0      	blx	r4
    7fac:	0003      	movs	r3, r0
    7fae:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
    7fb0:	687b      	ldr	r3, [r7, #4]
    7fb2:	2b01      	cmp	r3, #1
    7fb4:	d103      	bne.n	7fbe <vTaskStartScheduler+0x2e>
		{
			xReturn = xTimerCreateTimerTask();
    7fb6:	4b13      	ldr	r3, [pc, #76]	; (8004 <vTaskStartScheduler+0x74>)
    7fb8:	4798      	blx	r3
    7fba:	0003      	movs	r3, r0
    7fbc:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    7fbe:	687b      	ldr	r3, [r7, #4]
    7fc0:	2b01      	cmp	r3, #1
    7fc2:	d10d      	bne.n	7fe0 <vTaskStartScheduler+0x50>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    7fc4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    7fc6:	4b10      	ldr	r3, [pc, #64]	; (8008 <vTaskStartScheduler+0x78>)
    7fc8:	2201      	movs	r2, #1
    7fca:	4252      	negs	r2, r2
    7fcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
    7fce:	4b0f      	ldr	r3, [pc, #60]	; (800c <vTaskStartScheduler+0x7c>)
    7fd0:	2201      	movs	r2, #1
    7fd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
    7fd4:	4b0e      	ldr	r3, [pc, #56]	; (8010 <vTaskStartScheduler+0x80>)
    7fd6:	2200      	movs	r2, #0
    7fd8:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    7fda:	4b0e      	ldr	r3, [pc, #56]	; (8014 <vTaskStartScheduler+0x84>)
    7fdc:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    7fde:	e004      	b.n	7fea <vTaskStartScheduler+0x5a>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
    7fe0:	687b      	ldr	r3, [r7, #4]
    7fe2:	3301      	adds	r3, #1
    7fe4:	d101      	bne.n	7fea <vTaskStartScheduler+0x5a>
    7fe6:	b672      	cpsid	i
    7fe8:	e7fe      	b.n	7fe8 <vTaskStartScheduler+0x58>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    7fea:	46c0      	nop			; (mov r8, r8)
    7fec:	46bd      	mov	sp, r7
    7fee:	b003      	add	sp, #12
    7ff0:	bd90      	pop	{r4, r7, pc}
    7ff2:	46c0      	nop			; (mov r8, r8)
    7ff4:	0000de3c 	.word	0x0000de3c
    7ff8:	00008605 	.word	0x00008605
    7ffc:	20003ca4 	.word	0x20003ca4
    8000:	00007c51 	.word	0x00007c51
    8004:	00008a51 	.word	0x00008a51
    8008:	20003ca0 	.word	0x20003ca0
    800c:	20003c8c 	.word	0x20003c8c
    8010:	20003c84 	.word	0x20003c84
    8014:	00006ff9 	.word	0x00006ff9

00008018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    8018:	b580      	push	{r7, lr}
    801a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    801c:	4b03      	ldr	r3, [pc, #12]	; (802c <vTaskSuspendAll+0x14>)
    801e:	681b      	ldr	r3, [r3, #0]
    8020:	1c5a      	adds	r2, r3, #1
    8022:	4b02      	ldr	r3, [pc, #8]	; (802c <vTaskSuspendAll+0x14>)
    8024:	601a      	str	r2, [r3, #0]
}
    8026:	46c0      	nop			; (mov r8, r8)
    8028:	46bd      	mov	sp, r7
    802a:	bd80      	pop	{r7, pc}
    802c:	20003ca8 	.word	0x20003ca8

00008030 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    8030:	b580      	push	{r7, lr}
    8032:	b084      	sub	sp, #16
    8034:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
    8036:	2300      	movs	r3, #0
    8038:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
    803a:	2300      	movs	r3, #0
    803c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
    803e:	4b3a      	ldr	r3, [pc, #232]	; (8128 <xTaskResumeAll+0xf8>)
    8040:	681b      	ldr	r3, [r3, #0]
    8042:	2b00      	cmp	r3, #0
    8044:	d101      	bne.n	804a <xTaskResumeAll+0x1a>
    8046:	b672      	cpsid	i
    8048:	e7fe      	b.n	8048 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    804a:	4b38      	ldr	r3, [pc, #224]	; (812c <xTaskResumeAll+0xfc>)
    804c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
    804e:	4b36      	ldr	r3, [pc, #216]	; (8128 <xTaskResumeAll+0xf8>)
    8050:	681b      	ldr	r3, [r3, #0]
    8052:	1e5a      	subs	r2, r3, #1
    8054:	4b34      	ldr	r3, [pc, #208]	; (8128 <xTaskResumeAll+0xf8>)
    8056:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8058:	4b33      	ldr	r3, [pc, #204]	; (8128 <xTaskResumeAll+0xf8>)
    805a:	681b      	ldr	r3, [r3, #0]
    805c:	2b00      	cmp	r3, #0
    805e:	d15b      	bne.n	8118 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    8060:	4b33      	ldr	r3, [pc, #204]	; (8130 <xTaskResumeAll+0x100>)
    8062:	681b      	ldr	r3, [r3, #0]
    8064:	2b00      	cmp	r3, #0
    8066:	d057      	beq.n	8118 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    8068:	e02f      	b.n	80ca <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    806a:	4b32      	ldr	r3, [pc, #200]	; (8134 <xTaskResumeAll+0x104>)
    806c:	68db      	ldr	r3, [r3, #12]
    806e:	68db      	ldr	r3, [r3, #12]
    8070:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8072:	68fb      	ldr	r3, [r7, #12]
    8074:	3318      	adds	r3, #24
    8076:	0018      	movs	r0, r3
    8078:	4b2f      	ldr	r3, [pc, #188]	; (8138 <xTaskResumeAll+0x108>)
    807a:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    807c:	68fb      	ldr	r3, [r7, #12]
    807e:	3304      	adds	r3, #4
    8080:	0018      	movs	r0, r3
    8082:	4b2d      	ldr	r3, [pc, #180]	; (8138 <xTaskResumeAll+0x108>)
    8084:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
    8086:	68fb      	ldr	r3, [r7, #12]
    8088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    808a:	4b2c      	ldr	r3, [pc, #176]	; (813c <xTaskResumeAll+0x10c>)
    808c:	681b      	ldr	r3, [r3, #0]
    808e:	429a      	cmp	r2, r3
    8090:	d903      	bls.n	809a <xTaskResumeAll+0x6a>
    8092:	68fb      	ldr	r3, [r7, #12]
    8094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8096:	4b29      	ldr	r3, [pc, #164]	; (813c <xTaskResumeAll+0x10c>)
    8098:	601a      	str	r2, [r3, #0]
    809a:	68fb      	ldr	r3, [r7, #12]
    809c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    809e:	0013      	movs	r3, r2
    80a0:	009b      	lsls	r3, r3, #2
    80a2:	189b      	adds	r3, r3, r2
    80a4:	009b      	lsls	r3, r3, #2
    80a6:	4a26      	ldr	r2, [pc, #152]	; (8140 <xTaskResumeAll+0x110>)
    80a8:	189a      	adds	r2, r3, r2
    80aa:	68fb      	ldr	r3, [r7, #12]
    80ac:	3304      	adds	r3, #4
    80ae:	0019      	movs	r1, r3
    80b0:	0010      	movs	r0, r2
    80b2:	4b24      	ldr	r3, [pc, #144]	; (8144 <xTaskResumeAll+0x114>)
    80b4:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    80b6:	68fb      	ldr	r3, [r7, #12]
    80b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    80ba:	4b23      	ldr	r3, [pc, #140]	; (8148 <xTaskResumeAll+0x118>)
    80bc:	681b      	ldr	r3, [r3, #0]
    80be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    80c0:	429a      	cmp	r2, r3
    80c2:	d302      	bcc.n	80ca <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
    80c4:	4b21      	ldr	r3, [pc, #132]	; (814c <xTaskResumeAll+0x11c>)
    80c6:	2201      	movs	r2, #1
    80c8:	601a      	str	r2, [r3, #0]
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    80ca:	4b1a      	ldr	r3, [pc, #104]	; (8134 <xTaskResumeAll+0x104>)
    80cc:	681b      	ldr	r3, [r3, #0]
    80ce:	2b00      	cmp	r3, #0
    80d0:	d1cb      	bne.n	806a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    80d2:	68fb      	ldr	r3, [r7, #12]
    80d4:	2b00      	cmp	r3, #0
    80d6:	d001      	beq.n	80dc <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    80d8:	4b1d      	ldr	r3, [pc, #116]	; (8150 <xTaskResumeAll+0x120>)
    80da:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    80dc:	4b1d      	ldr	r3, [pc, #116]	; (8154 <xTaskResumeAll+0x124>)
    80de:	681b      	ldr	r3, [r3, #0]
    80e0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    80e2:	687b      	ldr	r3, [r7, #4]
    80e4:	2b00      	cmp	r3, #0
    80e6:	d00f      	beq.n	8108 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    80e8:	4b1b      	ldr	r3, [pc, #108]	; (8158 <xTaskResumeAll+0x128>)
    80ea:	4798      	blx	r3
    80ec:	1e03      	subs	r3, r0, #0
    80ee:	d002      	beq.n	80f6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
    80f0:	4b16      	ldr	r3, [pc, #88]	; (814c <xTaskResumeAll+0x11c>)
    80f2:	2201      	movs	r2, #1
    80f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    80f6:	687b      	ldr	r3, [r7, #4]
    80f8:	3b01      	subs	r3, #1
    80fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    80fc:	687b      	ldr	r3, [r7, #4]
    80fe:	2b00      	cmp	r3, #0
    8100:	d1f2      	bne.n	80e8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
    8102:	4b14      	ldr	r3, [pc, #80]	; (8154 <xTaskResumeAll+0x124>)
    8104:	2200      	movs	r2, #0
    8106:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    8108:	4b10      	ldr	r3, [pc, #64]	; (814c <xTaskResumeAll+0x11c>)
    810a:	681b      	ldr	r3, [r3, #0]
    810c:	2b00      	cmp	r3, #0
    810e:	d003      	beq.n	8118 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    8110:	2301      	movs	r3, #1
    8112:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    8114:	4b11      	ldr	r3, [pc, #68]	; (815c <xTaskResumeAll+0x12c>)
    8116:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    8118:	4b11      	ldr	r3, [pc, #68]	; (8160 <xTaskResumeAll+0x130>)
    811a:	4798      	blx	r3

	return xAlreadyYielded;
    811c:	68bb      	ldr	r3, [r7, #8]
}
    811e:	0018      	movs	r0, r3
    8120:	46bd      	mov	sp, r7
    8122:	b004      	add	sp, #16
    8124:	bd80      	pop	{r7, pc}
    8126:	46c0      	nop			; (mov r8, r8)
    8128:	20003ca8 	.word	0x20003ca8
    812c:	00007069 	.word	0x00007069
    8130:	20003c80 	.word	0x20003c80
    8134:	20003c40 	.word	0x20003c40
    8138:	00006ef5 	.word	0x00006ef5
    813c:	20003c88 	.word	0x20003c88
    8140:	20003bac 	.word	0x20003bac
    8144:	00006e45 	.word	0x00006e45
    8148:	20003ba8 	.word	0x20003ba8
    814c:	20003c94 	.word	0x20003c94
    8150:	00008775 	.word	0x00008775
    8154:	20003c90 	.word	0x20003c90
    8158:	00008181 	.word	0x00008181
    815c:	00007049 	.word	0x00007049
    8160:	0000708d 	.word	0x0000708d

00008164 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    8164:	b580      	push	{r7, lr}
    8166:	b082      	sub	sp, #8
    8168:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
    816a:	4b04      	ldr	r3, [pc, #16]	; (817c <xTaskGetTickCount+0x18>)
    816c:	681b      	ldr	r3, [r3, #0]
    816e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
    8170:	687b      	ldr	r3, [r7, #4]
}
    8172:	0018      	movs	r0, r3
    8174:	46bd      	mov	sp, r7
    8176:	b002      	add	sp, #8
    8178:	bd80      	pop	{r7, pc}
    817a:	46c0      	nop			; (mov r8, r8)
    817c:	20003c84 	.word	0x20003c84

00008180 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    8180:	b580      	push	{r7, lr}
    8182:	b086      	sub	sp, #24
    8184:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    8186:	2300      	movs	r3, #0
    8188:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    818a:	4b4c      	ldr	r3, [pc, #304]	; (82bc <xTaskIncrementTick+0x13c>)
    818c:	681b      	ldr	r3, [r3, #0]
    818e:	2b00      	cmp	r3, #0
    8190:	d000      	beq.n	8194 <xTaskIncrementTick+0x14>
    8192:	e083      	b.n	829c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    8194:	4b4a      	ldr	r3, [pc, #296]	; (82c0 <xTaskIncrementTick+0x140>)
    8196:	681b      	ldr	r3, [r3, #0]
    8198:	3301      	adds	r3, #1
    819a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    819c:	4b48      	ldr	r3, [pc, #288]	; (82c0 <xTaskIncrementTick+0x140>)
    819e:	693a      	ldr	r2, [r7, #16]
    81a0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
    81a2:	693b      	ldr	r3, [r7, #16]
    81a4:	2b00      	cmp	r3, #0
    81a6:	d117      	bne.n	81d8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
    81a8:	4b46      	ldr	r3, [pc, #280]	; (82c4 <xTaskIncrementTick+0x144>)
    81aa:	681b      	ldr	r3, [r3, #0]
    81ac:	681b      	ldr	r3, [r3, #0]
    81ae:	2b00      	cmp	r3, #0
    81b0:	d001      	beq.n	81b6 <xTaskIncrementTick+0x36>
    81b2:	b672      	cpsid	i
    81b4:	e7fe      	b.n	81b4 <xTaskIncrementTick+0x34>
    81b6:	4b43      	ldr	r3, [pc, #268]	; (82c4 <xTaskIncrementTick+0x144>)
    81b8:	681b      	ldr	r3, [r3, #0]
    81ba:	60fb      	str	r3, [r7, #12]
    81bc:	4b42      	ldr	r3, [pc, #264]	; (82c8 <xTaskIncrementTick+0x148>)
    81be:	681a      	ldr	r2, [r3, #0]
    81c0:	4b40      	ldr	r3, [pc, #256]	; (82c4 <xTaskIncrementTick+0x144>)
    81c2:	601a      	str	r2, [r3, #0]
    81c4:	4b40      	ldr	r3, [pc, #256]	; (82c8 <xTaskIncrementTick+0x148>)
    81c6:	68fa      	ldr	r2, [r7, #12]
    81c8:	601a      	str	r2, [r3, #0]
    81ca:	4b40      	ldr	r3, [pc, #256]	; (82cc <xTaskIncrementTick+0x14c>)
    81cc:	681b      	ldr	r3, [r3, #0]
    81ce:	1c5a      	adds	r2, r3, #1
    81d0:	4b3e      	ldr	r3, [pc, #248]	; (82cc <xTaskIncrementTick+0x14c>)
    81d2:	601a      	str	r2, [r3, #0]
    81d4:	4b3e      	ldr	r3, [pc, #248]	; (82d0 <xTaskIncrementTick+0x150>)
    81d6:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    81d8:	4b3e      	ldr	r3, [pc, #248]	; (82d4 <xTaskIncrementTick+0x154>)
    81da:	681b      	ldr	r3, [r3, #0]
    81dc:	693a      	ldr	r2, [r7, #16]
    81de:	429a      	cmp	r2, r3
    81e0:	d34e      	bcc.n	8280 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    81e2:	4b38      	ldr	r3, [pc, #224]	; (82c4 <xTaskIncrementTick+0x144>)
    81e4:	681b      	ldr	r3, [r3, #0]
    81e6:	681b      	ldr	r3, [r3, #0]
    81e8:	2b00      	cmp	r3, #0
    81ea:	d101      	bne.n	81f0 <xTaskIncrementTick+0x70>
    81ec:	2301      	movs	r3, #1
    81ee:	e000      	b.n	81f2 <xTaskIncrementTick+0x72>
    81f0:	2300      	movs	r3, #0
    81f2:	2b00      	cmp	r3, #0
    81f4:	d004      	beq.n	8200 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    81f6:	4b37      	ldr	r3, [pc, #220]	; (82d4 <xTaskIncrementTick+0x154>)
    81f8:	2201      	movs	r2, #1
    81fa:	4252      	negs	r2, r2
    81fc:	601a      	str	r2, [r3, #0]
					break;
    81fe:	e03f      	b.n	8280 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    8200:	4b30      	ldr	r3, [pc, #192]	; (82c4 <xTaskIncrementTick+0x144>)
    8202:	681b      	ldr	r3, [r3, #0]
    8204:	68db      	ldr	r3, [r3, #12]
    8206:	68db      	ldr	r3, [r3, #12]
    8208:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    820a:	68bb      	ldr	r3, [r7, #8]
    820c:	685b      	ldr	r3, [r3, #4]
    820e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
    8210:	693a      	ldr	r2, [r7, #16]
    8212:	687b      	ldr	r3, [r7, #4]
    8214:	429a      	cmp	r2, r3
    8216:	d203      	bcs.n	8220 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    8218:	4b2e      	ldr	r3, [pc, #184]	; (82d4 <xTaskIncrementTick+0x154>)
    821a:	687a      	ldr	r2, [r7, #4]
    821c:	601a      	str	r2, [r3, #0]
						break;
    821e:	e02f      	b.n	8280 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    8220:	68bb      	ldr	r3, [r7, #8]
    8222:	3304      	adds	r3, #4
    8224:	0018      	movs	r0, r3
    8226:	4b2c      	ldr	r3, [pc, #176]	; (82d8 <xTaskIncrementTick+0x158>)
    8228:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    822a:	68bb      	ldr	r3, [r7, #8]
    822c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    822e:	2b00      	cmp	r3, #0
    8230:	d004      	beq.n	823c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    8232:	68bb      	ldr	r3, [r7, #8]
    8234:	3318      	adds	r3, #24
    8236:	0018      	movs	r0, r3
    8238:	4b27      	ldr	r3, [pc, #156]	; (82d8 <xTaskIncrementTick+0x158>)
    823a:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    823c:	68bb      	ldr	r3, [r7, #8]
    823e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8240:	4b26      	ldr	r3, [pc, #152]	; (82dc <xTaskIncrementTick+0x15c>)
    8242:	681b      	ldr	r3, [r3, #0]
    8244:	429a      	cmp	r2, r3
    8246:	d903      	bls.n	8250 <xTaskIncrementTick+0xd0>
    8248:	68bb      	ldr	r3, [r7, #8]
    824a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    824c:	4b23      	ldr	r3, [pc, #140]	; (82dc <xTaskIncrementTick+0x15c>)
    824e:	601a      	str	r2, [r3, #0]
    8250:	68bb      	ldr	r3, [r7, #8]
    8252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8254:	0013      	movs	r3, r2
    8256:	009b      	lsls	r3, r3, #2
    8258:	189b      	adds	r3, r3, r2
    825a:	009b      	lsls	r3, r3, #2
    825c:	4a20      	ldr	r2, [pc, #128]	; (82e0 <xTaskIncrementTick+0x160>)
    825e:	189a      	adds	r2, r3, r2
    8260:	68bb      	ldr	r3, [r7, #8]
    8262:	3304      	adds	r3, #4
    8264:	0019      	movs	r1, r3
    8266:	0010      	movs	r0, r2
    8268:	4b1e      	ldr	r3, [pc, #120]	; (82e4 <xTaskIncrementTick+0x164>)
    826a:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    826c:	68bb      	ldr	r3, [r7, #8]
    826e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8270:	4b1d      	ldr	r3, [pc, #116]	; (82e8 <xTaskIncrementTick+0x168>)
    8272:	681b      	ldr	r3, [r3, #0]
    8274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8276:	429a      	cmp	r2, r3
    8278:	d3b3      	bcc.n	81e2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
    827a:	2301      	movs	r3, #1
    827c:	617b      	str	r3, [r7, #20]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_PREEMPTION */
				}
			}
    827e:	e7b0      	b.n	81e2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    8280:	4b19      	ldr	r3, [pc, #100]	; (82e8 <xTaskIncrementTick+0x168>)
    8282:	681b      	ldr	r3, [r3, #0]
    8284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8286:	4916      	ldr	r1, [pc, #88]	; (82e0 <xTaskIncrementTick+0x160>)
    8288:	0013      	movs	r3, r2
    828a:	009b      	lsls	r3, r3, #2
    828c:	189b      	adds	r3, r3, r2
    828e:	009b      	lsls	r3, r3, #2
    8290:	585b      	ldr	r3, [r3, r1]
    8292:	2b01      	cmp	r3, #1
    8294:	d907      	bls.n	82a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
    8296:	2301      	movs	r3, #1
    8298:	617b      	str	r3, [r7, #20]
    829a:	e004      	b.n	82a6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    829c:	4b13      	ldr	r3, [pc, #76]	; (82ec <xTaskIncrementTick+0x16c>)
    829e:	681b      	ldr	r3, [r3, #0]
    82a0:	1c5a      	adds	r2, r3, #1
    82a2:	4b12      	ldr	r3, [pc, #72]	; (82ec <xTaskIncrementTick+0x16c>)
    82a4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    82a6:	4b12      	ldr	r3, [pc, #72]	; (82f0 <xTaskIncrementTick+0x170>)
    82a8:	681b      	ldr	r3, [r3, #0]
    82aa:	2b00      	cmp	r3, #0
    82ac:	d001      	beq.n	82b2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
    82ae:	2301      	movs	r3, #1
    82b0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    82b2:	697b      	ldr	r3, [r7, #20]
}
    82b4:	0018      	movs	r0, r3
    82b6:	46bd      	mov	sp, r7
    82b8:	b006      	add	sp, #24
    82ba:	bd80      	pop	{r7, pc}
    82bc:	20003ca8 	.word	0x20003ca8
    82c0:	20003c84 	.word	0x20003c84
    82c4:	20003c38 	.word	0x20003c38
    82c8:	20003c3c 	.word	0x20003c3c
    82cc:	20003c98 	.word	0x20003c98
    82d0:	00008775 	.word	0x00008775
    82d4:	20003ca0 	.word	0x20003ca0
    82d8:	00006ef5 	.word	0x00006ef5
    82dc:	20003c88 	.word	0x20003c88
    82e0:	20003bac 	.word	0x20003bac
    82e4:	00006e45 	.word	0x00006e45
    82e8:	20003ba8 	.word	0x20003ba8
    82ec:	20003c90 	.word	0x20003c90
    82f0:	20003c94 	.word	0x20003c94

000082f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    82f4:	b580      	push	{r7, lr}
    82f6:	b082      	sub	sp, #8
    82f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    82fa:	4b2a      	ldr	r3, [pc, #168]	; (83a4 <vTaskSwitchContext+0xb0>)
    82fc:	681b      	ldr	r3, [r3, #0]
    82fe:	2b00      	cmp	r3, #0
    8300:	d003      	beq.n	830a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    8302:	4b29      	ldr	r3, [pc, #164]	; (83a8 <vTaskSwitchContext+0xb4>)
    8304:	2201      	movs	r2, #1
    8306:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    8308:	e048      	b.n	839c <vTaskSwitchContext+0xa8>
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
    830a:	4b27      	ldr	r3, [pc, #156]	; (83a8 <vTaskSwitchContext+0xb4>)
    830c:	2200      	movs	r2, #0
    830e:	601a      	str	r2, [r3, #0]
				ulTaskSwitchedInTime = ulTotalRunTime;
		}
		#endif /* configGENERATE_RUN_TIME_STATS */

		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();
    8310:	4b26      	ldr	r3, [pc, #152]	; (83ac <vTaskSwitchContext+0xb8>)
    8312:	681b      	ldr	r3, [r3, #0]
    8314:	681a      	ldr	r2, [r3, #0]
    8316:	4b25      	ldr	r3, [pc, #148]	; (83ac <vTaskSwitchContext+0xb8>)
    8318:	681b      	ldr	r3, [r3, #0]
    831a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    831c:	429a      	cmp	r2, r3
    831e:	d808      	bhi.n	8332 <vTaskSwitchContext+0x3e>
    8320:	4b22      	ldr	r3, [pc, #136]	; (83ac <vTaskSwitchContext+0xb8>)
    8322:	681a      	ldr	r2, [r3, #0]
    8324:	4b21      	ldr	r3, [pc, #132]	; (83ac <vTaskSwitchContext+0xb8>)
    8326:	681b      	ldr	r3, [r3, #0]
    8328:	3334      	adds	r3, #52	; 0x34
    832a:	0019      	movs	r1, r3
    832c:	0010      	movs	r0, r2
    832e:	4b20      	ldr	r3, [pc, #128]	; (83b0 <vTaskSwitchContext+0xbc>)
    8330:	4798      	blx	r3

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    8332:	4b20      	ldr	r3, [pc, #128]	; (83b4 <vTaskSwitchContext+0xc0>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	607b      	str	r3, [r7, #4]
    8338:	e007      	b.n	834a <vTaskSwitchContext+0x56>
    833a:	687b      	ldr	r3, [r7, #4]
    833c:	2b00      	cmp	r3, #0
    833e:	d101      	bne.n	8344 <vTaskSwitchContext+0x50>
    8340:	b672      	cpsid	i
    8342:	e7fe      	b.n	8342 <vTaskSwitchContext+0x4e>
    8344:	687b      	ldr	r3, [r7, #4]
    8346:	3b01      	subs	r3, #1
    8348:	607b      	str	r3, [r7, #4]
    834a:	491b      	ldr	r1, [pc, #108]	; (83b8 <vTaskSwitchContext+0xc4>)
    834c:	687a      	ldr	r2, [r7, #4]
    834e:	0013      	movs	r3, r2
    8350:	009b      	lsls	r3, r3, #2
    8352:	189b      	adds	r3, r3, r2
    8354:	009b      	lsls	r3, r3, #2
    8356:	585b      	ldr	r3, [r3, r1]
    8358:	2b00      	cmp	r3, #0
    835a:	d0ee      	beq.n	833a <vTaskSwitchContext+0x46>
    835c:	687a      	ldr	r2, [r7, #4]
    835e:	0013      	movs	r3, r2
    8360:	009b      	lsls	r3, r3, #2
    8362:	189b      	adds	r3, r3, r2
    8364:	009b      	lsls	r3, r3, #2
    8366:	4a14      	ldr	r2, [pc, #80]	; (83b8 <vTaskSwitchContext+0xc4>)
    8368:	189b      	adds	r3, r3, r2
    836a:	603b      	str	r3, [r7, #0]
    836c:	683b      	ldr	r3, [r7, #0]
    836e:	685b      	ldr	r3, [r3, #4]
    8370:	685a      	ldr	r2, [r3, #4]
    8372:	683b      	ldr	r3, [r7, #0]
    8374:	605a      	str	r2, [r3, #4]
    8376:	683b      	ldr	r3, [r7, #0]
    8378:	685a      	ldr	r2, [r3, #4]
    837a:	683b      	ldr	r3, [r7, #0]
    837c:	3308      	adds	r3, #8
    837e:	429a      	cmp	r2, r3
    8380:	d104      	bne.n	838c <vTaskSwitchContext+0x98>
    8382:	683b      	ldr	r3, [r7, #0]
    8384:	685b      	ldr	r3, [r3, #4]
    8386:	685a      	ldr	r2, [r3, #4]
    8388:	683b      	ldr	r3, [r7, #0]
    838a:	605a      	str	r2, [r3, #4]
    838c:	683b      	ldr	r3, [r7, #0]
    838e:	685b      	ldr	r3, [r3, #4]
    8390:	68da      	ldr	r2, [r3, #12]
    8392:	4b06      	ldr	r3, [pc, #24]	; (83ac <vTaskSwitchContext+0xb8>)
    8394:	601a      	str	r2, [r3, #0]
    8396:	4b07      	ldr	r3, [pc, #28]	; (83b4 <vTaskSwitchContext+0xc0>)
    8398:	687a      	ldr	r2, [r7, #4]
    839a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    839c:	46c0      	nop			; (mov r8, r8)
    839e:	46bd      	mov	sp, r7
    83a0:	b002      	add	sp, #8
    83a2:	bd80      	pop	{r7, pc}
    83a4:	20003ca8 	.word	0x20003ca8
    83a8:	20003c94 	.word	0x20003c94
    83ac:	20003ba8 	.word	0x20003ba8
    83b0:	00009701 	.word	0x00009701
    83b4:	20003c88 	.word	0x20003c88
    83b8:	20003bac 	.word	0x20003bac

000083bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    83bc:	b580      	push	{r7, lr}
    83be:	b082      	sub	sp, #8
    83c0:	af00      	add	r7, sp, #0
    83c2:	6078      	str	r0, [r7, #4]
    83c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
    83c6:	687b      	ldr	r3, [r7, #4]
    83c8:	2b00      	cmp	r3, #0
    83ca:	d101      	bne.n	83d0 <vTaskPlaceOnEventList+0x14>
    83cc:	b672      	cpsid	i
    83ce:	e7fe      	b.n	83ce <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    83d0:	4b08      	ldr	r3, [pc, #32]	; (83f4 <vTaskPlaceOnEventList+0x38>)
    83d2:	681b      	ldr	r3, [r3, #0]
    83d4:	3318      	adds	r3, #24
    83d6:	001a      	movs	r2, r3
    83d8:	687b      	ldr	r3, [r7, #4]
    83da:	0011      	movs	r1, r2
    83dc:	0018      	movs	r0, r3
    83de:	4b06      	ldr	r3, [pc, #24]	; (83f8 <vTaskPlaceOnEventList+0x3c>)
    83e0:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    83e2:	683b      	ldr	r3, [r7, #0]
    83e4:	2101      	movs	r1, #1
    83e6:	0018      	movs	r0, r3
    83e8:	4b04      	ldr	r3, [pc, #16]	; (83fc <vTaskPlaceOnEventList+0x40>)
    83ea:	4798      	blx	r3
}
    83ec:	46c0      	nop			; (mov r8, r8)
    83ee:	46bd      	mov	sp, r7
    83f0:	b002      	add	sp, #8
    83f2:	bd80      	pop	{r7, pc}
    83f4:	20003ba8 	.word	0x20003ba8
    83f8:	00006e89 	.word	0x00006e89
    83fc:	0000899d 	.word	0x0000899d

00008400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
    8400:	b580      	push	{r7, lr}
    8402:	b084      	sub	sp, #16
    8404:	af00      	add	r7, sp, #0
    8406:	60f8      	str	r0, [r7, #12]
    8408:	60b9      	str	r1, [r7, #8]
    840a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
    840c:	68fb      	ldr	r3, [r7, #12]
    840e:	2b00      	cmp	r3, #0
    8410:	d101      	bne.n	8416 <vTaskPlaceOnEventListRestricted+0x16>
    8412:	b672      	cpsid	i
    8414:	e7fe      	b.n	8414 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    8416:	4b0c      	ldr	r3, [pc, #48]	; (8448 <vTaskPlaceOnEventListRestricted+0x48>)
    8418:	681b      	ldr	r3, [r3, #0]
    841a:	3318      	adds	r3, #24
    841c:	001a      	movs	r2, r3
    841e:	68fb      	ldr	r3, [r7, #12]
    8420:	0011      	movs	r1, r2
    8422:	0018      	movs	r0, r3
    8424:	4b09      	ldr	r3, [pc, #36]	; (844c <vTaskPlaceOnEventListRestricted+0x4c>)
    8426:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
    8428:	687b      	ldr	r3, [r7, #4]
    842a:	2b00      	cmp	r3, #0
    842c:	d002      	beq.n	8434 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
    842e:	2301      	movs	r3, #1
    8430:	425b      	negs	r3, r3
    8432:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
    8434:	687a      	ldr	r2, [r7, #4]
    8436:	68bb      	ldr	r3, [r7, #8]
    8438:	0011      	movs	r1, r2
    843a:	0018      	movs	r0, r3
    843c:	4b04      	ldr	r3, [pc, #16]	; (8450 <vTaskPlaceOnEventListRestricted+0x50>)
    843e:	4798      	blx	r3
	}
    8440:	46c0      	nop			; (mov r8, r8)
    8442:	46bd      	mov	sp, r7
    8444:	b004      	add	sp, #16
    8446:	bd80      	pop	{r7, pc}
    8448:	20003ba8 	.word	0x20003ba8
    844c:	00006e45 	.word	0x00006e45
    8450:	0000899d 	.word	0x0000899d

00008454 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    8454:	b580      	push	{r7, lr}
    8456:	b084      	sub	sp, #16
    8458:	af00      	add	r7, sp, #0
    845a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    845c:	687b      	ldr	r3, [r7, #4]
    845e:	68db      	ldr	r3, [r3, #12]
    8460:	68db      	ldr	r3, [r3, #12]
    8462:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
    8464:	68bb      	ldr	r3, [r7, #8]
    8466:	2b00      	cmp	r3, #0
    8468:	d101      	bne.n	846e <xTaskRemoveFromEventList+0x1a>
    846a:	b672      	cpsid	i
    846c:	e7fe      	b.n	846c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    846e:	68bb      	ldr	r3, [r7, #8]
    8470:	3318      	adds	r3, #24
    8472:	0018      	movs	r0, r3
    8474:	4b1f      	ldr	r3, [pc, #124]	; (84f4 <xTaskRemoveFromEventList+0xa0>)
    8476:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    8478:	4b1f      	ldr	r3, [pc, #124]	; (84f8 <xTaskRemoveFromEventList+0xa4>)
    847a:	681b      	ldr	r3, [r3, #0]
    847c:	2b00      	cmp	r3, #0
    847e:	d11d      	bne.n	84bc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    8480:	68bb      	ldr	r3, [r7, #8]
    8482:	3304      	adds	r3, #4
    8484:	0018      	movs	r0, r3
    8486:	4b1b      	ldr	r3, [pc, #108]	; (84f4 <xTaskRemoveFromEventList+0xa0>)
    8488:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
    848a:	68bb      	ldr	r3, [r7, #8]
    848c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    848e:	4b1b      	ldr	r3, [pc, #108]	; (84fc <xTaskRemoveFromEventList+0xa8>)
    8490:	681b      	ldr	r3, [r3, #0]
    8492:	429a      	cmp	r2, r3
    8494:	d903      	bls.n	849e <xTaskRemoveFromEventList+0x4a>
    8496:	68bb      	ldr	r3, [r7, #8]
    8498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    849a:	4b18      	ldr	r3, [pc, #96]	; (84fc <xTaskRemoveFromEventList+0xa8>)
    849c:	601a      	str	r2, [r3, #0]
    849e:	68bb      	ldr	r3, [r7, #8]
    84a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    84a2:	0013      	movs	r3, r2
    84a4:	009b      	lsls	r3, r3, #2
    84a6:	189b      	adds	r3, r3, r2
    84a8:	009b      	lsls	r3, r3, #2
    84aa:	4a15      	ldr	r2, [pc, #84]	; (8500 <xTaskRemoveFromEventList+0xac>)
    84ac:	189a      	adds	r2, r3, r2
    84ae:	68bb      	ldr	r3, [r7, #8]
    84b0:	3304      	adds	r3, #4
    84b2:	0019      	movs	r1, r3
    84b4:	0010      	movs	r0, r2
    84b6:	4b13      	ldr	r3, [pc, #76]	; (8504 <xTaskRemoveFromEventList+0xb0>)
    84b8:	4798      	blx	r3
    84ba:	e007      	b.n	84cc <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    84bc:	68bb      	ldr	r3, [r7, #8]
    84be:	3318      	adds	r3, #24
    84c0:	001a      	movs	r2, r3
    84c2:	4b11      	ldr	r3, [pc, #68]	; (8508 <xTaskRemoveFromEventList+0xb4>)
    84c4:	0011      	movs	r1, r2
    84c6:	0018      	movs	r0, r3
    84c8:	4b0e      	ldr	r3, [pc, #56]	; (8504 <xTaskRemoveFromEventList+0xb0>)
    84ca:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    84cc:	68bb      	ldr	r3, [r7, #8]
    84ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    84d0:	4b0e      	ldr	r3, [pc, #56]	; (850c <xTaskRemoveFromEventList+0xb8>)
    84d2:	681b      	ldr	r3, [r3, #0]
    84d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    84d6:	429a      	cmp	r2, r3
    84d8:	d905      	bls.n	84e6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    84da:	2301      	movs	r3, #1
    84dc:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    84de:	4b0c      	ldr	r3, [pc, #48]	; (8510 <xTaskRemoveFromEventList+0xbc>)
    84e0:	2201      	movs	r2, #1
    84e2:	601a      	str	r2, [r3, #0]
    84e4:	e001      	b.n	84ea <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
    84e6:	2300      	movs	r3, #0
    84e8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    84ea:	68fb      	ldr	r3, [r7, #12]
}
    84ec:	0018      	movs	r0, r3
    84ee:	46bd      	mov	sp, r7
    84f0:	b004      	add	sp, #16
    84f2:	bd80      	pop	{r7, pc}
    84f4:	00006ef5 	.word	0x00006ef5
    84f8:	20003ca8 	.word	0x20003ca8
    84fc:	20003c88 	.word	0x20003c88
    8500:	20003bac 	.word	0x20003bac
    8504:	00006e45 	.word	0x00006e45
    8508:	20003c40 	.word	0x20003c40
    850c:	20003ba8 	.word	0x20003ba8
    8510:	20003c94 	.word	0x20003c94

00008514 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    8514:	b580      	push	{r7, lr}
    8516:	b082      	sub	sp, #8
    8518:	af00      	add	r7, sp, #0
    851a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
    851c:	687b      	ldr	r3, [r7, #4]
    851e:	2b00      	cmp	r3, #0
    8520:	d101      	bne.n	8526 <vTaskSetTimeOutState+0x12>
    8522:	b672      	cpsid	i
    8524:	e7fe      	b.n	8524 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    8526:	4b06      	ldr	r3, [pc, #24]	; (8540 <vTaskSetTimeOutState+0x2c>)
    8528:	681a      	ldr	r2, [r3, #0]
    852a:	687b      	ldr	r3, [r7, #4]
    852c:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    852e:	4b05      	ldr	r3, [pc, #20]	; (8544 <vTaskSetTimeOutState+0x30>)
    8530:	681a      	ldr	r2, [r3, #0]
    8532:	687b      	ldr	r3, [r7, #4]
    8534:	605a      	str	r2, [r3, #4]
}
    8536:	46c0      	nop			; (mov r8, r8)
    8538:	46bd      	mov	sp, r7
    853a:	b002      	add	sp, #8
    853c:	bd80      	pop	{r7, pc}
    853e:	46c0      	nop			; (mov r8, r8)
    8540:	20003c98 	.word	0x20003c98
    8544:	20003c84 	.word	0x20003c84

00008548 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    8548:	b580      	push	{r7, lr}
    854a:	b084      	sub	sp, #16
    854c:	af00      	add	r7, sp, #0
    854e:	6078      	str	r0, [r7, #4]
    8550:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
    8552:	687b      	ldr	r3, [r7, #4]
    8554:	2b00      	cmp	r3, #0
    8556:	d101      	bne.n	855c <xTaskCheckForTimeOut+0x14>
    8558:	b672      	cpsid	i
    855a:	e7fe      	b.n	855a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
    855c:	683b      	ldr	r3, [r7, #0]
    855e:	2b00      	cmp	r3, #0
    8560:	d101      	bne.n	8566 <xTaskCheckForTimeOut+0x1e>
    8562:	b672      	cpsid	i
    8564:	e7fe      	b.n	8564 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
    8566:	4b1d      	ldr	r3, [pc, #116]	; (85dc <xTaskCheckForTimeOut+0x94>)
    8568:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    856a:	4b1d      	ldr	r3, [pc, #116]	; (85e0 <xTaskCheckForTimeOut+0x98>)
    856c:	681b      	ldr	r3, [r3, #0]
    856e:	60bb      	str	r3, [r7, #8]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    8570:	683b      	ldr	r3, [r7, #0]
    8572:	681b      	ldr	r3, [r3, #0]
    8574:	3301      	adds	r3, #1
    8576:	d102      	bne.n	857e <xTaskCheckForTimeOut+0x36>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    8578:	2300      	movs	r3, #0
    857a:	60fb      	str	r3, [r7, #12]
    857c:	e027      	b.n	85ce <xTaskCheckForTimeOut+0x86>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    857e:	687b      	ldr	r3, [r7, #4]
    8580:	681a      	ldr	r2, [r3, #0]
    8582:	4b18      	ldr	r3, [pc, #96]	; (85e4 <xTaskCheckForTimeOut+0x9c>)
    8584:	681b      	ldr	r3, [r3, #0]
    8586:	429a      	cmp	r2, r3
    8588:	d007      	beq.n	859a <xTaskCheckForTimeOut+0x52>
    858a:	687b      	ldr	r3, [r7, #4]
    858c:	685a      	ldr	r2, [r3, #4]
    858e:	68bb      	ldr	r3, [r7, #8]
    8590:	429a      	cmp	r2, r3
    8592:	d802      	bhi.n	859a <xTaskCheckForTimeOut+0x52>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    8594:	2301      	movs	r3, #1
    8596:	60fb      	str	r3, [r7, #12]
    8598:	e019      	b.n	85ce <xTaskCheckForTimeOut+0x86>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    859a:	687b      	ldr	r3, [r7, #4]
    859c:	685b      	ldr	r3, [r3, #4]
    859e:	68ba      	ldr	r2, [r7, #8]
    85a0:	1ad2      	subs	r2, r2, r3
    85a2:	683b      	ldr	r3, [r7, #0]
    85a4:	681b      	ldr	r3, [r3, #0]
    85a6:	429a      	cmp	r2, r3
    85a8:	d20f      	bcs.n	85ca <xTaskCheckForTimeOut+0x82>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    85aa:	683b      	ldr	r3, [r7, #0]
    85ac:	681a      	ldr	r2, [r3, #0]
    85ae:	687b      	ldr	r3, [r7, #4]
    85b0:	6859      	ldr	r1, [r3, #4]
    85b2:	68bb      	ldr	r3, [r7, #8]
    85b4:	1acb      	subs	r3, r1, r3
    85b6:	18d2      	adds	r2, r2, r3
    85b8:	683b      	ldr	r3, [r7, #0]
    85ba:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    85bc:	687b      	ldr	r3, [r7, #4]
    85be:	0018      	movs	r0, r3
    85c0:	4b09      	ldr	r3, [pc, #36]	; (85e8 <xTaskCheckForTimeOut+0xa0>)
    85c2:	4798      	blx	r3
			xReturn = pdFALSE;
    85c4:	2300      	movs	r3, #0
    85c6:	60fb      	str	r3, [r7, #12]
    85c8:	e001      	b.n	85ce <xTaskCheckForTimeOut+0x86>
		}
		else
		{
			xReturn = pdTRUE;
    85ca:	2301      	movs	r3, #1
    85cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    85ce:	4b07      	ldr	r3, [pc, #28]	; (85ec <xTaskCheckForTimeOut+0xa4>)
    85d0:	4798      	blx	r3

	return xReturn;
    85d2:	68fb      	ldr	r3, [r7, #12]
}
    85d4:	0018      	movs	r0, r3
    85d6:	46bd      	mov	sp, r7
    85d8:	b004      	add	sp, #16
    85da:	bd80      	pop	{r7, pc}
    85dc:	00007069 	.word	0x00007069
    85e0:	20003c84 	.word	0x20003c84
    85e4:	20003c98 	.word	0x20003c98
    85e8:	00008515 	.word	0x00008515
    85ec:	0000708d 	.word	0x0000708d

000085f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    85f0:	b580      	push	{r7, lr}
    85f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
    85f4:	4b02      	ldr	r3, [pc, #8]	; (8600 <vTaskMissedYield+0x10>)
    85f6:	2201      	movs	r2, #1
    85f8:	601a      	str	r2, [r3, #0]
}
    85fa:	46c0      	nop			; (mov r8, r8)
    85fc:	46bd      	mov	sp, r7
    85fe:	bd80      	pop	{r7, pc}
    8600:	20003c94 	.word	0x20003c94

00008604 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    8604:	b580      	push	{r7, lr}
    8606:	b082      	sub	sp, #8
    8608:	af00      	add	r7, sp, #0
    860a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    860c:	4b05      	ldr	r3, [pc, #20]	; (8624 <prvIdleTask+0x20>)
    860e:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    8610:	4b05      	ldr	r3, [pc, #20]	; (8628 <prvIdleTask+0x24>)
    8612:	681b      	ldr	r3, [r3, #0]
    8614:	2b01      	cmp	r3, #1
    8616:	d901      	bls.n	861c <prvIdleTask+0x18>
			{
				taskYIELD();
    8618:	4b04      	ldr	r3, [pc, #16]	; (862c <prvIdleTask+0x28>)
    861a:	4798      	blx	r3
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
    861c:	4b04      	ldr	r3, [pc, #16]	; (8630 <prvIdleTask+0x2c>)
    861e:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_TICKLESS_IDLE */
	}
    8620:	e7f4      	b.n	860c <prvIdleTask+0x8>
    8622:	46c0      	nop			; (mov r8, r8)
    8624:	000086c1 	.word	0x000086c1
    8628:	20003bac 	.word	0x20003bac
    862c:	00007049 	.word	0x00007049
    8630:	000096ed 	.word	0x000096ed

00008634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    8634:	b580      	push	{r7, lr}
    8636:	b082      	sub	sp, #8
    8638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    863a:	2300      	movs	r3, #0
    863c:	607b      	str	r3, [r7, #4]
    863e:	e00c      	b.n	865a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    8640:	687a      	ldr	r2, [r7, #4]
    8642:	0013      	movs	r3, r2
    8644:	009b      	lsls	r3, r3, #2
    8646:	189b      	adds	r3, r3, r2
    8648:	009b      	lsls	r3, r3, #2
    864a:	4a14      	ldr	r2, [pc, #80]	; (869c <prvInitialiseTaskLists+0x68>)
    864c:	189b      	adds	r3, r3, r2
    864e:	0018      	movs	r0, r3
    8650:	4b13      	ldr	r3, [pc, #76]	; (86a0 <prvInitialiseTaskLists+0x6c>)
    8652:	4798      	blx	r3

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    8654:	687b      	ldr	r3, [r7, #4]
    8656:	3301      	adds	r3, #1
    8658:	607b      	str	r3, [r7, #4]
    865a:	687b      	ldr	r3, [r7, #4]
    865c:	2b04      	cmp	r3, #4
    865e:	d9ef      	bls.n	8640 <prvInitialiseTaskLists+0xc>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    8660:	4b10      	ldr	r3, [pc, #64]	; (86a4 <prvInitialiseTaskLists+0x70>)
    8662:	0018      	movs	r0, r3
    8664:	4b0e      	ldr	r3, [pc, #56]	; (86a0 <prvInitialiseTaskLists+0x6c>)
    8666:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
    8668:	4b0f      	ldr	r3, [pc, #60]	; (86a8 <prvInitialiseTaskLists+0x74>)
    866a:	0018      	movs	r0, r3
    866c:	4b0c      	ldr	r3, [pc, #48]	; (86a0 <prvInitialiseTaskLists+0x6c>)
    866e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
    8670:	4b0e      	ldr	r3, [pc, #56]	; (86ac <prvInitialiseTaskLists+0x78>)
    8672:	0018      	movs	r0, r3
    8674:	4b0a      	ldr	r3, [pc, #40]	; (86a0 <prvInitialiseTaskLists+0x6c>)
    8676:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    8678:	4b0d      	ldr	r3, [pc, #52]	; (86b0 <prvInitialiseTaskLists+0x7c>)
    867a:	0018      	movs	r0, r3
    867c:	4b08      	ldr	r3, [pc, #32]	; (86a0 <prvInitialiseTaskLists+0x6c>)
    867e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    8680:	4b0c      	ldr	r3, [pc, #48]	; (86b4 <prvInitialiseTaskLists+0x80>)
    8682:	0018      	movs	r0, r3
    8684:	4b06      	ldr	r3, [pc, #24]	; (86a0 <prvInitialiseTaskLists+0x6c>)
    8686:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    8688:	4b0b      	ldr	r3, [pc, #44]	; (86b8 <prvInitialiseTaskLists+0x84>)
    868a:	4a06      	ldr	r2, [pc, #24]	; (86a4 <prvInitialiseTaskLists+0x70>)
    868c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    868e:	4b0b      	ldr	r3, [pc, #44]	; (86bc <prvInitialiseTaskLists+0x88>)
    8690:	4a05      	ldr	r2, [pc, #20]	; (86a8 <prvInitialiseTaskLists+0x74>)
    8692:	601a      	str	r2, [r3, #0]
}
    8694:	46c0      	nop			; (mov r8, r8)
    8696:	46bd      	mov	sp, r7
    8698:	b002      	add	sp, #8
    869a:	bd80      	pop	{r7, pc}
    869c:	20003bac 	.word	0x20003bac
    86a0:	00006df1 	.word	0x00006df1
    86a4:	20003c10 	.word	0x20003c10
    86a8:	20003c24 	.word	0x20003c24
    86ac:	20003c40 	.word	0x20003c40
    86b0:	20003c54 	.word	0x20003c54
    86b4:	20003c6c 	.word	0x20003c6c
    86b8:	20003c38 	.word	0x20003c38
    86bc:	20003c3c 	.word	0x20003c3c

000086c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    86c0:	b580      	push	{r7, lr}
    86c2:	b082      	sub	sp, #8
    86c4:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    86c6:	e027      	b.n	8718 <prvCheckTasksWaitingTermination+0x58>
		{
			vTaskSuspendAll();
    86c8:	4b17      	ldr	r3, [pc, #92]	; (8728 <prvCheckTasksWaitingTermination+0x68>)
    86ca:	4798      	blx	r3
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    86cc:	4b17      	ldr	r3, [pc, #92]	; (872c <prvCheckTasksWaitingTermination+0x6c>)
    86ce:	681b      	ldr	r3, [r3, #0]
    86d0:	425a      	negs	r2, r3
    86d2:	4153      	adcs	r3, r2
    86d4:	b2db      	uxtb	r3, r3
    86d6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
    86d8:	4b15      	ldr	r3, [pc, #84]	; (8730 <prvCheckTasksWaitingTermination+0x70>)
    86da:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
    86dc:	687b      	ldr	r3, [r7, #4]
    86de:	2b00      	cmp	r3, #0
    86e0:	d11a      	bne.n	8718 <prvCheckTasksWaitingTermination+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    86e2:	4b14      	ldr	r3, [pc, #80]	; (8734 <prvCheckTasksWaitingTermination+0x74>)
    86e4:	4798      	blx	r3
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    86e6:	4b11      	ldr	r3, [pc, #68]	; (872c <prvCheckTasksWaitingTermination+0x6c>)
    86e8:	68db      	ldr	r3, [r3, #12]
    86ea:	68db      	ldr	r3, [r3, #12]
    86ec:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    86ee:	683b      	ldr	r3, [r7, #0]
    86f0:	3304      	adds	r3, #4
    86f2:	0018      	movs	r0, r3
    86f4:	4b10      	ldr	r3, [pc, #64]	; (8738 <prvCheckTasksWaitingTermination+0x78>)
    86f6:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
    86f8:	4b10      	ldr	r3, [pc, #64]	; (873c <prvCheckTasksWaitingTermination+0x7c>)
    86fa:	681b      	ldr	r3, [r3, #0]
    86fc:	1e5a      	subs	r2, r3, #1
    86fe:	4b0f      	ldr	r3, [pc, #60]	; (873c <prvCheckTasksWaitingTermination+0x7c>)
    8700:	601a      	str	r2, [r3, #0]
					--uxDeletedTasksWaitingCleanUp;
    8702:	4b0f      	ldr	r3, [pc, #60]	; (8740 <prvCheckTasksWaitingTermination+0x80>)
    8704:	681b      	ldr	r3, [r3, #0]
    8706:	1e5a      	subs	r2, r3, #1
    8708:	4b0d      	ldr	r3, [pc, #52]	; (8740 <prvCheckTasksWaitingTermination+0x80>)
    870a:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    870c:	4b0d      	ldr	r3, [pc, #52]	; (8744 <prvCheckTasksWaitingTermination+0x84>)
    870e:	4798      	blx	r3

				prvDeleteTCB( pxTCB );
    8710:	683b      	ldr	r3, [r7, #0]
    8712:	0018      	movs	r0, r3
    8714:	4b0c      	ldr	r3, [pc, #48]	; (8748 <prvCheckTasksWaitingTermination+0x88>)
    8716:	4798      	blx	r3
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    8718:	4b09      	ldr	r3, [pc, #36]	; (8740 <prvCheckTasksWaitingTermination+0x80>)
    871a:	681b      	ldr	r3, [r3, #0]
    871c:	2b00      	cmp	r3, #0
    871e:	d1d3      	bne.n	86c8 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    8720:	46c0      	nop			; (mov r8, r8)
    8722:	46bd      	mov	sp, r7
    8724:	b002      	add	sp, #8
    8726:	bd80      	pop	{r7, pc}
    8728:	00008019 	.word	0x00008019
    872c:	20003c54 	.word	0x20003c54
    8730:	00008031 	.word	0x00008031
    8734:	00007069 	.word	0x00007069
    8738:	00006ef5 	.word	0x00006ef5
    873c:	20003c80 	.word	0x20003c80
    8740:	20003c68 	.word	0x20003c68
    8744:	0000708d 	.word	0x0000708d
    8748:	0000874d 	.word	0x0000874d

0000874c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    874c:	b580      	push	{r7, lr}
    874e:	b082      	sub	sp, #8
    8750:	af00      	add	r7, sp, #0
    8752:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    8754:	687b      	ldr	r3, [r7, #4]
    8756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8758:	0018      	movs	r0, r3
    875a:	4b05      	ldr	r3, [pc, #20]	; (8770 <prvDeleteTCB+0x24>)
    875c:	4798      	blx	r3
			vPortFree( pxTCB );
    875e:	687b      	ldr	r3, [r7, #4]
    8760:	0018      	movs	r0, r3
    8762:	4b03      	ldr	r3, [pc, #12]	; (8770 <prvDeleteTCB+0x24>)
    8764:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    8766:	46c0      	nop			; (mov r8, r8)
    8768:	46bd      	mov	sp, r7
    876a:	b002      	add	sp, #8
    876c:	bd80      	pop	{r7, pc}
    876e:	46c0      	nop			; (mov r8, r8)
    8770:	00007211 	.word	0x00007211

00008774 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    8774:	b580      	push	{r7, lr}
    8776:	b082      	sub	sp, #8
    8778:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    877a:	4b0e      	ldr	r3, [pc, #56]	; (87b4 <prvResetNextTaskUnblockTime+0x40>)
    877c:	681b      	ldr	r3, [r3, #0]
    877e:	681b      	ldr	r3, [r3, #0]
    8780:	2b00      	cmp	r3, #0
    8782:	d101      	bne.n	8788 <prvResetNextTaskUnblockTime+0x14>
    8784:	2301      	movs	r3, #1
    8786:	e000      	b.n	878a <prvResetNextTaskUnblockTime+0x16>
    8788:	2300      	movs	r3, #0
    878a:	2b00      	cmp	r3, #0
    878c:	d004      	beq.n	8798 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    878e:	4b0a      	ldr	r3, [pc, #40]	; (87b8 <prvResetNextTaskUnblockTime+0x44>)
    8790:	2201      	movs	r2, #1
    8792:	4252      	negs	r2, r2
    8794:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
    8796:	e008      	b.n	87aa <prvResetNextTaskUnblockTime+0x36>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    8798:	4b06      	ldr	r3, [pc, #24]	; (87b4 <prvResetNextTaskUnblockTime+0x40>)
    879a:	681b      	ldr	r3, [r3, #0]
    879c:	68db      	ldr	r3, [r3, #12]
    879e:	68db      	ldr	r3, [r3, #12]
    87a0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    87a2:	687b      	ldr	r3, [r7, #4]
    87a4:	685a      	ldr	r2, [r3, #4]
    87a6:	4b04      	ldr	r3, [pc, #16]	; (87b8 <prvResetNextTaskUnblockTime+0x44>)
    87a8:	601a      	str	r2, [r3, #0]
	}
}
    87aa:	46c0      	nop			; (mov r8, r8)
    87ac:	46bd      	mov	sp, r7
    87ae:	b002      	add	sp, #8
    87b0:	bd80      	pop	{r7, pc}
    87b2:	46c0      	nop			; (mov r8, r8)
    87b4:	20003c38 	.word	0x20003c38
    87b8:	20003ca0 	.word	0x20003ca0

000087bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
    87bc:	b580      	push	{r7, lr}
    87be:	b082      	sub	sp, #8
    87c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
    87c2:	4b0a      	ldr	r3, [pc, #40]	; (87ec <xTaskGetSchedulerState+0x30>)
    87c4:	681b      	ldr	r3, [r3, #0]
    87c6:	2b00      	cmp	r3, #0
    87c8:	d102      	bne.n	87d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
    87ca:	2301      	movs	r3, #1
    87cc:	607b      	str	r3, [r7, #4]
    87ce:	e008      	b.n	87e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    87d0:	4b07      	ldr	r3, [pc, #28]	; (87f0 <xTaskGetSchedulerState+0x34>)
    87d2:	681b      	ldr	r3, [r3, #0]
    87d4:	2b00      	cmp	r3, #0
    87d6:	d102      	bne.n	87de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
    87d8:	2302      	movs	r3, #2
    87da:	607b      	str	r3, [r7, #4]
    87dc:	e001      	b.n	87e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
    87de:	2300      	movs	r3, #0
    87e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
    87e2:	687b      	ldr	r3, [r7, #4]
	}
    87e4:	0018      	movs	r0, r3
    87e6:	46bd      	mov	sp, r7
    87e8:	b002      	add	sp, #8
    87ea:	bd80      	pop	{r7, pc}
    87ec:	20003c8c 	.word	0x20003c8c
    87f0:	20003ca8 	.word	0x20003ca8

000087f4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    87f4:	b580      	push	{r7, lr}
    87f6:	b084      	sub	sp, #16
    87f8:	af00      	add	r7, sp, #0
    87fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    87fc:	687b      	ldr	r3, [r7, #4]
    87fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    8800:	687b      	ldr	r3, [r7, #4]
    8802:	2b00      	cmp	r3, #0
    8804:	d04a      	beq.n	889c <vTaskPriorityInherit+0xa8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    8806:	68fb      	ldr	r3, [r7, #12]
    8808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    880a:	4b26      	ldr	r3, [pc, #152]	; (88a4 <vTaskPriorityInherit+0xb0>)
    880c:	681b      	ldr	r3, [r3, #0]
    880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8810:	429a      	cmp	r2, r3
    8812:	d243      	bcs.n	889c <vTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    8814:	68fb      	ldr	r3, [r7, #12]
    8816:	699b      	ldr	r3, [r3, #24]
    8818:	2b00      	cmp	r3, #0
    881a:	db06      	blt.n	882a <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    881c:	4b21      	ldr	r3, [pc, #132]	; (88a4 <vTaskPriorityInherit+0xb0>)
    881e:	681b      	ldr	r3, [r3, #0]
    8820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8822:	2205      	movs	r2, #5
    8824:	1ad2      	subs	r2, r2, r3
    8826:	68fb      	ldr	r3, [r7, #12]
    8828:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    882a:	68fb      	ldr	r3, [r7, #12]
    882c:	6959      	ldr	r1, [r3, #20]
    882e:	68fb      	ldr	r3, [r7, #12]
    8830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8832:	0013      	movs	r3, r2
    8834:	009b      	lsls	r3, r3, #2
    8836:	189b      	adds	r3, r3, r2
    8838:	009b      	lsls	r3, r3, #2
    883a:	4a1b      	ldr	r2, [pc, #108]	; (88a8 <vTaskPriorityInherit+0xb4>)
    883c:	189b      	adds	r3, r3, r2
    883e:	4299      	cmp	r1, r3
    8840:	d101      	bne.n	8846 <vTaskPriorityInherit+0x52>
    8842:	2301      	movs	r3, #1
    8844:	e000      	b.n	8848 <vTaskPriorityInherit+0x54>
    8846:	2300      	movs	r3, #0
    8848:	2b00      	cmp	r3, #0
    884a:	d022      	beq.n	8892 <vTaskPriorityInherit+0x9e>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    884c:	68fb      	ldr	r3, [r7, #12]
    884e:	3304      	adds	r3, #4
    8850:	0018      	movs	r0, r3
    8852:	4b16      	ldr	r3, [pc, #88]	; (88ac <vTaskPriorityInherit+0xb8>)
    8854:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    8856:	4b13      	ldr	r3, [pc, #76]	; (88a4 <vTaskPriorityInherit+0xb0>)
    8858:	681b      	ldr	r3, [r3, #0]
    885a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    885c:	68fb      	ldr	r3, [r7, #12]
    885e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
    8860:	68fb      	ldr	r3, [r7, #12]
    8862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8864:	4b12      	ldr	r3, [pc, #72]	; (88b0 <vTaskPriorityInherit+0xbc>)
    8866:	681b      	ldr	r3, [r3, #0]
    8868:	429a      	cmp	r2, r3
    886a:	d903      	bls.n	8874 <vTaskPriorityInherit+0x80>
    886c:	68fb      	ldr	r3, [r7, #12]
    886e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8870:	4b0f      	ldr	r3, [pc, #60]	; (88b0 <vTaskPriorityInherit+0xbc>)
    8872:	601a      	str	r2, [r3, #0]
    8874:	68fb      	ldr	r3, [r7, #12]
    8876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8878:	0013      	movs	r3, r2
    887a:	009b      	lsls	r3, r3, #2
    887c:	189b      	adds	r3, r3, r2
    887e:	009b      	lsls	r3, r3, #2
    8880:	4a09      	ldr	r2, [pc, #36]	; (88a8 <vTaskPriorityInherit+0xb4>)
    8882:	189a      	adds	r2, r3, r2
    8884:	68fb      	ldr	r3, [r7, #12]
    8886:	3304      	adds	r3, #4
    8888:	0019      	movs	r1, r3
    888a:	0010      	movs	r0, r2
    888c:	4b09      	ldr	r3, [pc, #36]	; (88b4 <vTaskPriorityInherit+0xc0>)
    888e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    8890:	e004      	b.n	889c <vTaskPriorityInherit+0xa8>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    8892:	4b04      	ldr	r3, [pc, #16]	; (88a4 <vTaskPriorityInherit+0xb0>)
    8894:	681b      	ldr	r3, [r3, #0]
    8896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8898:	68fb      	ldr	r3, [r7, #12]
    889a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    889c:	46c0      	nop			; (mov r8, r8)
    889e:	46bd      	mov	sp, r7
    88a0:	b004      	add	sp, #16
    88a2:	bd80      	pop	{r7, pc}
    88a4:	20003ba8 	.word	0x20003ba8
    88a8:	20003bac 	.word	0x20003bac
    88ac:	00006ef5 	.word	0x00006ef5
    88b0:	20003c88 	.word	0x20003c88
    88b4:	00006e45 	.word	0x00006e45

000088b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    88b8:	b580      	push	{r7, lr}
    88ba:	b084      	sub	sp, #16
    88bc:	af00      	add	r7, sp, #0
    88be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    88c0:	687b      	ldr	r3, [r7, #4]
    88c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
    88c4:	2300      	movs	r3, #0
    88c6:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    88c8:	687b      	ldr	r3, [r7, #4]
    88ca:	2b00      	cmp	r3, #0
    88cc:	d044      	beq.n	8958 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
    88ce:	4b25      	ldr	r3, [pc, #148]	; (8964 <xTaskPriorityDisinherit+0xac>)
    88d0:	681b      	ldr	r3, [r3, #0]
    88d2:	68ba      	ldr	r2, [r7, #8]
    88d4:	429a      	cmp	r2, r3
    88d6:	d001      	beq.n	88dc <xTaskPriorityDisinherit+0x24>
    88d8:	b672      	cpsid	i
    88da:	e7fe      	b.n	88da <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
    88dc:	68bb      	ldr	r3, [r7, #8]
    88de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    88e0:	2b00      	cmp	r3, #0
    88e2:	d101      	bne.n	88e8 <xTaskPriorityDisinherit+0x30>
    88e4:	b672      	cpsid	i
    88e6:	e7fe      	b.n	88e6 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
    88e8:	68bb      	ldr	r3, [r7, #8]
    88ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    88ec:	1e5a      	subs	r2, r3, #1
    88ee:	68bb      	ldr	r3, [r7, #8]
    88f0:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    88f2:	68bb      	ldr	r3, [r7, #8]
    88f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    88f6:	68bb      	ldr	r3, [r7, #8]
    88f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    88fa:	429a      	cmp	r2, r3
    88fc:	d02c      	beq.n	8958 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    88fe:	68bb      	ldr	r3, [r7, #8]
    8900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    8902:	2b00      	cmp	r3, #0
    8904:	d128      	bne.n	8958 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    8906:	68bb      	ldr	r3, [r7, #8]
    8908:	3304      	adds	r3, #4
    890a:	0018      	movs	r0, r3
    890c:	4b16      	ldr	r3, [pc, #88]	; (8968 <xTaskPriorityDisinherit+0xb0>)
    890e:	4798      	blx	r3
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    8910:	68bb      	ldr	r3, [r7, #8]
    8912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8914:	68bb      	ldr	r3, [r7, #8]
    8916:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8918:	68bb      	ldr	r3, [r7, #8]
    891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    891c:	2205      	movs	r2, #5
    891e:	1ad2      	subs	r2, r2, r3
    8920:	68bb      	ldr	r3, [r7, #8]
    8922:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
    8924:	68bb      	ldr	r3, [r7, #8]
    8926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8928:	4b10      	ldr	r3, [pc, #64]	; (896c <xTaskPriorityDisinherit+0xb4>)
    892a:	681b      	ldr	r3, [r3, #0]
    892c:	429a      	cmp	r2, r3
    892e:	d903      	bls.n	8938 <xTaskPriorityDisinherit+0x80>
    8930:	68bb      	ldr	r3, [r7, #8]
    8932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    8934:	4b0d      	ldr	r3, [pc, #52]	; (896c <xTaskPriorityDisinherit+0xb4>)
    8936:	601a      	str	r2, [r3, #0]
    8938:	68bb      	ldr	r3, [r7, #8]
    893a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    893c:	0013      	movs	r3, r2
    893e:	009b      	lsls	r3, r3, #2
    8940:	189b      	adds	r3, r3, r2
    8942:	009b      	lsls	r3, r3, #2
    8944:	4a0a      	ldr	r2, [pc, #40]	; (8970 <xTaskPriorityDisinherit+0xb8>)
    8946:	189a      	adds	r2, r3, r2
    8948:	68bb      	ldr	r3, [r7, #8]
    894a:	3304      	adds	r3, #4
    894c:	0019      	movs	r1, r3
    894e:	0010      	movs	r0, r2
    8950:	4b08      	ldr	r3, [pc, #32]	; (8974 <xTaskPriorityDisinherit+0xbc>)
    8952:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    8954:	2301      	movs	r3, #1
    8956:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    8958:	68fb      	ldr	r3, [r7, #12]
	}
    895a:	0018      	movs	r0, r3
    895c:	46bd      	mov	sp, r7
    895e:	b004      	add	sp, #16
    8960:	bd80      	pop	{r7, pc}
    8962:	46c0      	nop			; (mov r8, r8)
    8964:	20003ba8 	.word	0x20003ba8
    8968:	00006ef5 	.word	0x00006ef5
    896c:	20003c88 	.word	0x20003c88
    8970:	20003bac 	.word	0x20003bac
    8974:	00006e45 	.word	0x00006e45

00008978 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    8978:	b580      	push	{r7, lr}
    897a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    897c:	4b06      	ldr	r3, [pc, #24]	; (8998 <pvTaskIncrementMutexHeldCount+0x20>)
    897e:	681b      	ldr	r3, [r3, #0]
    8980:	2b00      	cmp	r3, #0
    8982:	d004      	beq.n	898e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    8984:	4b04      	ldr	r3, [pc, #16]	; (8998 <pvTaskIncrementMutexHeldCount+0x20>)
    8986:	681b      	ldr	r3, [r3, #0]
    8988:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    898a:	3201      	adds	r2, #1
    898c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
    898e:	4b02      	ldr	r3, [pc, #8]	; (8998 <pvTaskIncrementMutexHeldCount+0x20>)
    8990:	681b      	ldr	r3, [r3, #0]
	}
    8992:	0018      	movs	r0, r3
    8994:	46bd      	mov	sp, r7
    8996:	bd80      	pop	{r7, pc}
    8998:	20003ba8 	.word	0x20003ba8

0000899c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    899c:	b580      	push	{r7, lr}
    899e:	b084      	sub	sp, #16
    89a0:	af00      	add	r7, sp, #0
    89a2:	6078      	str	r0, [r7, #4]
    89a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    89a6:	4b21      	ldr	r3, [pc, #132]	; (8a2c <prvAddCurrentTaskToDelayedList+0x90>)
    89a8:	681b      	ldr	r3, [r3, #0]
    89aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    89ac:	4b20      	ldr	r3, [pc, #128]	; (8a30 <prvAddCurrentTaskToDelayedList+0x94>)
    89ae:	681b      	ldr	r3, [r3, #0]
    89b0:	3304      	adds	r3, #4
    89b2:	0018      	movs	r0, r3
    89b4:	4b1f      	ldr	r3, [pc, #124]	; (8a34 <prvAddCurrentTaskToDelayedList+0x98>)
    89b6:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    89b8:	687b      	ldr	r3, [r7, #4]
    89ba:	3301      	adds	r3, #1
    89bc:	d10b      	bne.n	89d6 <prvAddCurrentTaskToDelayedList+0x3a>
    89be:	683b      	ldr	r3, [r7, #0]
    89c0:	2b00      	cmp	r3, #0
    89c2:	d008      	beq.n	89d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    89c4:	4b1a      	ldr	r3, [pc, #104]	; (8a30 <prvAddCurrentTaskToDelayedList+0x94>)
    89c6:	681b      	ldr	r3, [r3, #0]
    89c8:	1d1a      	adds	r2, r3, #4
    89ca:	4b1b      	ldr	r3, [pc, #108]	; (8a38 <prvAddCurrentTaskToDelayedList+0x9c>)
    89cc:	0011      	movs	r1, r2
    89ce:	0018      	movs	r0, r3
    89d0:	4b1a      	ldr	r3, [pc, #104]	; (8a3c <prvAddCurrentTaskToDelayedList+0xa0>)
    89d2:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    89d4:	e026      	b.n	8a24 <prvAddCurrentTaskToDelayedList+0x88>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    89d6:	68fa      	ldr	r2, [r7, #12]
    89d8:	687b      	ldr	r3, [r7, #4]
    89da:	18d3      	adds	r3, r2, r3
    89dc:	60bb      	str	r3, [r7, #8]

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    89de:	4b14      	ldr	r3, [pc, #80]	; (8a30 <prvAddCurrentTaskToDelayedList+0x94>)
    89e0:	681b      	ldr	r3, [r3, #0]
    89e2:	68ba      	ldr	r2, [r7, #8]
    89e4:	605a      	str	r2, [r3, #4]

			if( xTimeToWake < xConstTickCount )
    89e6:	68ba      	ldr	r2, [r7, #8]
    89e8:	68fb      	ldr	r3, [r7, #12]
    89ea:	429a      	cmp	r2, r3
    89ec:	d209      	bcs.n	8a02 <prvAddCurrentTaskToDelayedList+0x66>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    89ee:	4b14      	ldr	r3, [pc, #80]	; (8a40 <prvAddCurrentTaskToDelayedList+0xa4>)
    89f0:	681a      	ldr	r2, [r3, #0]
    89f2:	4b0f      	ldr	r3, [pc, #60]	; (8a30 <prvAddCurrentTaskToDelayedList+0x94>)
    89f4:	681b      	ldr	r3, [r3, #0]
    89f6:	3304      	adds	r3, #4
    89f8:	0019      	movs	r1, r3
    89fa:	0010      	movs	r0, r2
    89fc:	4b11      	ldr	r3, [pc, #68]	; (8a44 <prvAddCurrentTaskToDelayedList+0xa8>)
    89fe:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    8a00:	e010      	b.n	8a24 <prvAddCurrentTaskToDelayedList+0x88>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    8a02:	4b11      	ldr	r3, [pc, #68]	; (8a48 <prvAddCurrentTaskToDelayedList+0xac>)
    8a04:	681a      	ldr	r2, [r3, #0]
    8a06:	4b0a      	ldr	r3, [pc, #40]	; (8a30 <prvAddCurrentTaskToDelayedList+0x94>)
    8a08:	681b      	ldr	r3, [r3, #0]
    8a0a:	3304      	adds	r3, #4
    8a0c:	0019      	movs	r1, r3
    8a0e:	0010      	movs	r0, r2
    8a10:	4b0c      	ldr	r3, [pc, #48]	; (8a44 <prvAddCurrentTaskToDelayedList+0xa8>)
    8a12:	4798      	blx	r3

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    8a14:	4b0d      	ldr	r3, [pc, #52]	; (8a4c <prvAddCurrentTaskToDelayedList+0xb0>)
    8a16:	681b      	ldr	r3, [r3, #0]
    8a18:	68ba      	ldr	r2, [r7, #8]
    8a1a:	429a      	cmp	r2, r3
    8a1c:	d202      	bcs.n	8a24 <prvAddCurrentTaskToDelayedList+0x88>
				{
					xNextTaskUnblockTime = xTimeToWake;
    8a1e:	4b0b      	ldr	r3, [pc, #44]	; (8a4c <prvAddCurrentTaskToDelayedList+0xb0>)
    8a20:	68ba      	ldr	r2, [r7, #8]
    8a22:	601a      	str	r2, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    8a24:	46c0      	nop			; (mov r8, r8)
    8a26:	46bd      	mov	sp, r7
    8a28:	b004      	add	sp, #16
    8a2a:	bd80      	pop	{r7, pc}
    8a2c:	20003c84 	.word	0x20003c84
    8a30:	20003ba8 	.word	0x20003ba8
    8a34:	00006ef5 	.word	0x00006ef5
    8a38:	20003c6c 	.word	0x20003c6c
    8a3c:	00006e45 	.word	0x00006e45
    8a40:	20003c3c 	.word	0x20003c3c
    8a44:	00006e89 	.word	0x00006e89
    8a48:	20003c38 	.word	0x20003c38
    8a4c:	20003ca0 	.word	0x20003ca0

00008a50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    8a50:	b590      	push	{r4, r7, lr}
    8a52:	b085      	sub	sp, #20
    8a54:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
    8a56:	2300      	movs	r3, #0
    8a58:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
    8a5a:	4b0e      	ldr	r3, [pc, #56]	; (8a94 <xTimerCreateTimerTask+0x44>)
    8a5c:	4798      	blx	r3

	if( xTimerQueue != NULL )
    8a5e:	4b0e      	ldr	r3, [pc, #56]	; (8a98 <xTimerCreateTimerTask+0x48>)
    8a60:	681b      	ldr	r3, [r3, #0]
    8a62:	2b00      	cmp	r3, #0
    8a64:	d00b      	beq.n	8a7e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
    8a66:	490d      	ldr	r1, [pc, #52]	; (8a9c <xTimerCreateTimerTask+0x4c>)
    8a68:	480d      	ldr	r0, [pc, #52]	; (8aa0 <xTimerCreateTimerTask+0x50>)
    8a6a:	4b0e      	ldr	r3, [pc, #56]	; (8aa4 <xTimerCreateTimerTask+0x54>)
    8a6c:	9301      	str	r3, [sp, #4]
    8a6e:	2302      	movs	r3, #2
    8a70:	9300      	str	r3, [sp, #0]
    8a72:	2300      	movs	r3, #0
    8a74:	2250      	movs	r2, #80	; 0x50
    8a76:	4c0c      	ldr	r4, [pc, #48]	; (8aa8 <xTimerCreateTimerTask+0x58>)
    8a78:	47a0      	blx	r4
    8a7a:	0003      	movs	r3, r0
    8a7c:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
    8a7e:	687b      	ldr	r3, [r7, #4]
    8a80:	2b00      	cmp	r3, #0
    8a82:	d101      	bne.n	8a88 <xTimerCreateTimerTask+0x38>
    8a84:	b672      	cpsid	i
    8a86:	e7fe      	b.n	8a86 <xTimerCreateTimerTask+0x36>
	return xReturn;
    8a88:	687b      	ldr	r3, [r7, #4]
}
    8a8a:	0018      	movs	r0, r3
    8a8c:	46bd      	mov	sp, r7
    8a8e:	b003      	add	sp, #12
    8a90:	bd90      	pop	{r4, r7, pc}
    8a92:	46c0      	nop			; (mov r8, r8)
    8a94:	00008f91 	.word	0x00008f91
    8a98:	20003cdc 	.word	0x20003cdc
    8a9c:	0000de44 	.word	0x0000de44
    8aa0:	00008bd1 	.word	0x00008bd1
    8aa4:	20003ce0 	.word	0x20003ce0
    8aa8:	00007c51 	.word	0x00007c51

00008aac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    8aac:	b590      	push	{r4, r7, lr}
    8aae:	b089      	sub	sp, #36	; 0x24
    8ab0:	af00      	add	r7, sp, #0
    8ab2:	60f8      	str	r0, [r7, #12]
    8ab4:	60b9      	str	r1, [r7, #8]
    8ab6:	607a      	str	r2, [r7, #4]
    8ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
    8aba:	2300      	movs	r3, #0
    8abc:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
    8abe:	68fb      	ldr	r3, [r7, #12]
    8ac0:	2b00      	cmp	r3, #0
    8ac2:	d101      	bne.n	8ac8 <xTimerGenericCommand+0x1c>
    8ac4:	b672      	cpsid	i
    8ac6:	e7fe      	b.n	8ac6 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
    8ac8:	4b1e      	ldr	r3, [pc, #120]	; (8b44 <xTimerGenericCommand+0x98>)
    8aca:	681b      	ldr	r3, [r3, #0]
    8acc:	2b00      	cmp	r3, #0
    8ace:	d033      	beq.n	8b38 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
    8ad0:	2310      	movs	r3, #16
    8ad2:	18fb      	adds	r3, r7, r3
    8ad4:	68ba      	ldr	r2, [r7, #8]
    8ad6:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    8ad8:	2310      	movs	r3, #16
    8ada:	18fb      	adds	r3, r7, r3
    8adc:	687a      	ldr	r2, [r7, #4]
    8ade:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
    8ae0:	2310      	movs	r3, #16
    8ae2:	18fb      	adds	r3, r7, r3
    8ae4:	68fa      	ldr	r2, [r7, #12]
    8ae6:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    8ae8:	68bb      	ldr	r3, [r7, #8]
    8aea:	2b05      	cmp	r3, #5
    8aec:	dc1a      	bgt.n	8b24 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    8aee:	4b16      	ldr	r3, [pc, #88]	; (8b48 <xTimerGenericCommand+0x9c>)
    8af0:	4798      	blx	r3
    8af2:	1e03      	subs	r3, r0, #0
    8af4:	2b02      	cmp	r3, #2
    8af6:	d10a      	bne.n	8b0e <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    8af8:	4b12      	ldr	r3, [pc, #72]	; (8b44 <xTimerGenericCommand+0x98>)
    8afa:	6818      	ldr	r0, [r3, #0]
    8afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    8afe:	2310      	movs	r3, #16
    8b00:	18f9      	adds	r1, r7, r3
    8b02:	2300      	movs	r3, #0
    8b04:	4c11      	ldr	r4, [pc, #68]	; (8b4c <xTimerGenericCommand+0xa0>)
    8b06:	47a0      	blx	r4
    8b08:	0003      	movs	r3, r0
    8b0a:	61fb      	str	r3, [r7, #28]
    8b0c:	e014      	b.n	8b38 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    8b0e:	4b0d      	ldr	r3, [pc, #52]	; (8b44 <xTimerGenericCommand+0x98>)
    8b10:	6818      	ldr	r0, [r3, #0]
    8b12:	2310      	movs	r3, #16
    8b14:	18f9      	adds	r1, r7, r3
    8b16:	2300      	movs	r3, #0
    8b18:	2200      	movs	r2, #0
    8b1a:	4c0c      	ldr	r4, [pc, #48]	; (8b4c <xTimerGenericCommand+0xa0>)
    8b1c:	47a0      	blx	r4
    8b1e:	0003      	movs	r3, r0
    8b20:	61fb      	str	r3, [r7, #28]
    8b22:	e009      	b.n	8b38 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    8b24:	4b07      	ldr	r3, [pc, #28]	; (8b44 <xTimerGenericCommand+0x98>)
    8b26:	6818      	ldr	r0, [r3, #0]
    8b28:	683a      	ldr	r2, [r7, #0]
    8b2a:	2310      	movs	r3, #16
    8b2c:	18f9      	adds	r1, r7, r3
    8b2e:	2300      	movs	r3, #0
    8b30:	4c07      	ldr	r4, [pc, #28]	; (8b50 <xTimerGenericCommand+0xa4>)
    8b32:	47a0      	blx	r4
    8b34:	0003      	movs	r3, r0
    8b36:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
    8b38:	69fb      	ldr	r3, [r7, #28]
}
    8b3a:	0018      	movs	r0, r3
    8b3c:	46bd      	mov	sp, r7
    8b3e:	b009      	add	sp, #36	; 0x24
    8b40:	bd90      	pop	{r4, r7, pc}
    8b42:	46c0      	nop			; (mov r8, r8)
    8b44:	20003cdc 	.word	0x20003cdc
    8b48:	000087bd 	.word	0x000087bd
    8b4c:	000073a5 	.word	0x000073a5
    8b50:	00007585 	.word	0x00007585

00008b54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    8b54:	b590      	push	{r4, r7, lr}
    8b56:	b087      	sub	sp, #28
    8b58:	af02      	add	r7, sp, #8
    8b5a:	6078      	str	r0, [r7, #4]
    8b5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    8b5e:	4b18      	ldr	r3, [pc, #96]	; (8bc0 <prvProcessExpiredTimer+0x6c>)
    8b60:	681b      	ldr	r3, [r3, #0]
    8b62:	68db      	ldr	r3, [r3, #12]
    8b64:	68db      	ldr	r3, [r3, #12]
    8b66:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8b68:	68fb      	ldr	r3, [r7, #12]
    8b6a:	3304      	adds	r3, #4
    8b6c:	0018      	movs	r0, r3
    8b6e:	4b15      	ldr	r3, [pc, #84]	; (8bc4 <prvProcessExpiredTimer+0x70>)
    8b70:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    8b72:	68fb      	ldr	r3, [r7, #12]
    8b74:	69db      	ldr	r3, [r3, #28]
    8b76:	2b01      	cmp	r3, #1
    8b78:	d119      	bne.n	8bae <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    8b7a:	68fb      	ldr	r3, [r7, #12]
    8b7c:	699a      	ldr	r2, [r3, #24]
    8b7e:	687b      	ldr	r3, [r7, #4]
    8b80:	18d1      	adds	r1, r2, r3
    8b82:	687b      	ldr	r3, [r7, #4]
    8b84:	683a      	ldr	r2, [r7, #0]
    8b86:	68f8      	ldr	r0, [r7, #12]
    8b88:	4c0f      	ldr	r4, [pc, #60]	; (8bc8 <prvProcessExpiredTimer+0x74>)
    8b8a:	47a0      	blx	r4
    8b8c:	1e03      	subs	r3, r0, #0
    8b8e:	d00e      	beq.n	8bae <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    8b90:	687a      	ldr	r2, [r7, #4]
    8b92:	68f8      	ldr	r0, [r7, #12]
    8b94:	2300      	movs	r3, #0
    8b96:	9300      	str	r3, [sp, #0]
    8b98:	2300      	movs	r3, #0
    8b9a:	2100      	movs	r1, #0
    8b9c:	4c0b      	ldr	r4, [pc, #44]	; (8bcc <prvProcessExpiredTimer+0x78>)
    8b9e:	47a0      	blx	r4
    8ba0:	0003      	movs	r3, r0
    8ba2:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
    8ba4:	68bb      	ldr	r3, [r7, #8]
    8ba6:	2b00      	cmp	r3, #0
    8ba8:	d101      	bne.n	8bae <prvProcessExpiredTimer+0x5a>
    8baa:	b672      	cpsid	i
    8bac:	e7fe      	b.n	8bac <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    8bae:	68fb      	ldr	r3, [r7, #12]
    8bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8bb2:	68fa      	ldr	r2, [r7, #12]
    8bb4:	0010      	movs	r0, r2
    8bb6:	4798      	blx	r3
}
    8bb8:	46c0      	nop			; (mov r8, r8)
    8bba:	46bd      	mov	sp, r7
    8bbc:	b005      	add	sp, #20
    8bbe:	bd90      	pop	{r4, r7, pc}
    8bc0:	20003cd4 	.word	0x20003cd4
    8bc4:	00006ef5 	.word	0x00006ef5
    8bc8:	00008d31 	.word	0x00008d31
    8bcc:	00008aad 	.word	0x00008aad

00008bd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
    8bd0:	b580      	push	{r7, lr}
    8bd2:	b084      	sub	sp, #16
    8bd4:	af00      	add	r7, sp, #0
    8bd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
    8bd8:	2308      	movs	r3, #8
    8bda:	18fb      	adds	r3, r7, r3
    8bdc:	0018      	movs	r0, r3
    8bde:	4b06      	ldr	r3, [pc, #24]	; (8bf8 <prvTimerTask+0x28>)
    8be0:	4798      	blx	r3
    8be2:	0003      	movs	r3, r0
    8be4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
    8be6:	68ba      	ldr	r2, [r7, #8]
    8be8:	68fb      	ldr	r3, [r7, #12]
    8bea:	0011      	movs	r1, r2
    8bec:	0018      	movs	r0, r3
    8bee:	4b03      	ldr	r3, [pc, #12]	; (8bfc <prvTimerTask+0x2c>)
    8bf0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
    8bf2:	4b03      	ldr	r3, [pc, #12]	; (8c00 <prvTimerTask+0x30>)
    8bf4:	4798      	blx	r3
	}
    8bf6:	e7ef      	b.n	8bd8 <prvTimerTask+0x8>
    8bf8:	00008ca9 	.word	0x00008ca9
    8bfc:	00008c05 	.word	0x00008c05
    8c00:	00008db9 	.word	0x00008db9

00008c04 <prvProcessTimerOrBlockTask>:
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    8c04:	b580      	push	{r7, lr}
    8c06:	b084      	sub	sp, #16
    8c08:	af00      	add	r7, sp, #0
    8c0a:	6078      	str	r0, [r7, #4]
    8c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
    8c0e:	4b1e      	ldr	r3, [pc, #120]	; (8c88 <prvProcessTimerOrBlockTask+0x84>)
    8c10:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    8c12:	2308      	movs	r3, #8
    8c14:	18fb      	adds	r3, r7, r3
    8c16:	0018      	movs	r0, r3
    8c18:	4b1c      	ldr	r3, [pc, #112]	; (8c8c <prvProcessTimerOrBlockTask+0x88>)
    8c1a:	4798      	blx	r3
    8c1c:	0003      	movs	r3, r0
    8c1e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
    8c20:	68bb      	ldr	r3, [r7, #8]
    8c22:	2b00      	cmp	r3, #0
    8c24:	d129      	bne.n	8c7a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    8c26:	683b      	ldr	r3, [r7, #0]
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d10c      	bne.n	8c46 <prvProcessTimerOrBlockTask+0x42>
    8c2c:	687a      	ldr	r2, [r7, #4]
    8c2e:	68fb      	ldr	r3, [r7, #12]
    8c30:	429a      	cmp	r2, r3
    8c32:	d808      	bhi.n	8c46 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
    8c34:	4b16      	ldr	r3, [pc, #88]	; (8c90 <prvProcessTimerOrBlockTask+0x8c>)
    8c36:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    8c38:	68fa      	ldr	r2, [r7, #12]
    8c3a:	687b      	ldr	r3, [r7, #4]
    8c3c:	0011      	movs	r1, r2
    8c3e:	0018      	movs	r0, r3
    8c40:	4b14      	ldr	r3, [pc, #80]	; (8c94 <prvProcessTimerOrBlockTask+0x90>)
    8c42:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    8c44:	e01b      	b.n	8c7e <prvProcessTimerOrBlockTask+0x7a>
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				if( xListWasEmpty != pdFALSE )
    8c46:	683b      	ldr	r3, [r7, #0]
    8c48:	2b00      	cmp	r3, #0
    8c4a:	d006      	beq.n	8c5a <prvProcessTimerOrBlockTask+0x56>
				{
					/* The current timer list is empty - is the overflow list
					also empty? */
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    8c4c:	4b12      	ldr	r3, [pc, #72]	; (8c98 <prvProcessTimerOrBlockTask+0x94>)
    8c4e:	681b      	ldr	r3, [r3, #0]
    8c50:	681b      	ldr	r3, [r3, #0]
    8c52:	425a      	negs	r2, r3
    8c54:	4153      	adcs	r3, r2
    8c56:	b2db      	uxtb	r3, r3
    8c58:	603b      	str	r3, [r7, #0]
				}

				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    8c5a:	4b10      	ldr	r3, [pc, #64]	; (8c9c <prvProcessTimerOrBlockTask+0x98>)
    8c5c:	6818      	ldr	r0, [r3, #0]
    8c5e:	687a      	ldr	r2, [r7, #4]
    8c60:	68fb      	ldr	r3, [r7, #12]
    8c62:	1ad3      	subs	r3, r2, r3
    8c64:	683a      	ldr	r2, [r7, #0]
    8c66:	0019      	movs	r1, r3
    8c68:	4b0d      	ldr	r3, [pc, #52]	; (8ca0 <prvProcessTimerOrBlockTask+0x9c>)
    8c6a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
    8c6c:	4b08      	ldr	r3, [pc, #32]	; (8c90 <prvProcessTimerOrBlockTask+0x8c>)
    8c6e:	4798      	blx	r3
    8c70:	1e03      	subs	r3, r0, #0
    8c72:	d104      	bne.n	8c7e <prvProcessTimerOrBlockTask+0x7a>
				{
					/* Yield to wait for either a command to arrive, or the
					block time to expire.  If a command arrived between the
					critical section being exited and this yield then the yield
					will not cause the task to block. */
					portYIELD_WITHIN_API();
    8c74:	4b0b      	ldr	r3, [pc, #44]	; (8ca4 <prvProcessTimerOrBlockTask+0xa0>)
    8c76:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
    8c78:	e001      	b.n	8c7e <prvProcessTimerOrBlockTask+0x7a>
				}
			}
		}
		else
		{
			( void ) xTaskResumeAll();
    8c7a:	4b05      	ldr	r3, [pc, #20]	; (8c90 <prvProcessTimerOrBlockTask+0x8c>)
    8c7c:	4798      	blx	r3
		}
	}
}
    8c7e:	46c0      	nop			; (mov r8, r8)
    8c80:	46bd      	mov	sp, r7
    8c82:	b004      	add	sp, #16
    8c84:	bd80      	pop	{r7, pc}
    8c86:	46c0      	nop			; (mov r8, r8)
    8c88:	00008019 	.word	0x00008019
    8c8c:	00008ce9 	.word	0x00008ce9
    8c90:	00008031 	.word	0x00008031
    8c94:	00008b55 	.word	0x00008b55
    8c98:	20003cd8 	.word	0x20003cd8
    8c9c:	20003cdc 	.word	0x20003cdc
    8ca0:	00007b35 	.word	0x00007b35
    8ca4:	00007049 	.word	0x00007049

00008ca8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    8ca8:	b580      	push	{r7, lr}
    8caa:	b084      	sub	sp, #16
    8cac:	af00      	add	r7, sp, #0
    8cae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    8cb0:	4b0c      	ldr	r3, [pc, #48]	; (8ce4 <prvGetNextExpireTime+0x3c>)
    8cb2:	681b      	ldr	r3, [r3, #0]
    8cb4:	681b      	ldr	r3, [r3, #0]
    8cb6:	425a      	negs	r2, r3
    8cb8:	4153      	adcs	r3, r2
    8cba:	b2db      	uxtb	r3, r3
    8cbc:	001a      	movs	r2, r3
    8cbe:	687b      	ldr	r3, [r7, #4]
    8cc0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
    8cc2:	687b      	ldr	r3, [r7, #4]
    8cc4:	681b      	ldr	r3, [r3, #0]
    8cc6:	2b00      	cmp	r3, #0
    8cc8:	d105      	bne.n	8cd6 <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    8cca:	4b06      	ldr	r3, [pc, #24]	; (8ce4 <prvGetNextExpireTime+0x3c>)
    8ccc:	681b      	ldr	r3, [r3, #0]
    8cce:	68db      	ldr	r3, [r3, #12]
    8cd0:	681b      	ldr	r3, [r3, #0]
    8cd2:	60fb      	str	r3, [r7, #12]
    8cd4:	e001      	b.n	8cda <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
    8cd6:	2300      	movs	r3, #0
    8cd8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
    8cda:	68fb      	ldr	r3, [r7, #12]
}
    8cdc:	0018      	movs	r0, r3
    8cde:	46bd      	mov	sp, r7
    8ce0:	b004      	add	sp, #16
    8ce2:	bd80      	pop	{r7, pc}
    8ce4:	20003cd4 	.word	0x20003cd4

00008ce8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    8ce8:	b580      	push	{r7, lr}
    8cea:	b084      	sub	sp, #16
    8cec:	af00      	add	r7, sp, #0
    8cee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
    8cf0:	4b0c      	ldr	r3, [pc, #48]	; (8d24 <prvSampleTimeNow+0x3c>)
    8cf2:	4798      	blx	r3
    8cf4:	0003      	movs	r3, r0
    8cf6:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
    8cf8:	4b0b      	ldr	r3, [pc, #44]	; (8d28 <prvSampleTimeNow+0x40>)
    8cfa:	681b      	ldr	r3, [r3, #0]
    8cfc:	68fa      	ldr	r2, [r7, #12]
    8cfe:	429a      	cmp	r2, r3
    8d00:	d205      	bcs.n	8d0e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
    8d02:	4b0a      	ldr	r3, [pc, #40]	; (8d2c <prvSampleTimeNow+0x44>)
    8d04:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
    8d06:	687b      	ldr	r3, [r7, #4]
    8d08:	2201      	movs	r2, #1
    8d0a:	601a      	str	r2, [r3, #0]
    8d0c:	e002      	b.n	8d14 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
    8d0e:	687b      	ldr	r3, [r7, #4]
    8d10:	2200      	movs	r2, #0
    8d12:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
    8d14:	4b04      	ldr	r3, [pc, #16]	; (8d28 <prvSampleTimeNow+0x40>)
    8d16:	68fa      	ldr	r2, [r7, #12]
    8d18:	601a      	str	r2, [r3, #0]

	return xTimeNow;
    8d1a:	68fb      	ldr	r3, [r7, #12]
}
    8d1c:	0018      	movs	r0, r3
    8d1e:	46bd      	mov	sp, r7
    8d20:	b004      	add	sp, #16
    8d22:	bd80      	pop	{r7, pc}
    8d24:	00008165 	.word	0x00008165
    8d28:	20003ce4 	.word	0x20003ce4
    8d2c:	00008ed1 	.word	0x00008ed1

00008d30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    8d30:	b580      	push	{r7, lr}
    8d32:	b086      	sub	sp, #24
    8d34:	af00      	add	r7, sp, #0
    8d36:	60f8      	str	r0, [r7, #12]
    8d38:	60b9      	str	r1, [r7, #8]
    8d3a:	607a      	str	r2, [r7, #4]
    8d3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
    8d3e:	2300      	movs	r3, #0
    8d40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    8d42:	68fb      	ldr	r3, [r7, #12]
    8d44:	68ba      	ldr	r2, [r7, #8]
    8d46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    8d48:	68fb      	ldr	r3, [r7, #12]
    8d4a:	68fa      	ldr	r2, [r7, #12]
    8d4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
    8d4e:	68ba      	ldr	r2, [r7, #8]
    8d50:	687b      	ldr	r3, [r7, #4]
    8d52:	429a      	cmp	r2, r3
    8d54:	d812      	bhi.n	8d7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    8d56:	687a      	ldr	r2, [r7, #4]
    8d58:	683b      	ldr	r3, [r7, #0]
    8d5a:	1ad2      	subs	r2, r2, r3
    8d5c:	68fb      	ldr	r3, [r7, #12]
    8d5e:	699b      	ldr	r3, [r3, #24]
    8d60:	429a      	cmp	r2, r3
    8d62:	d302      	bcc.n	8d6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
    8d64:	2301      	movs	r3, #1
    8d66:	617b      	str	r3, [r7, #20]
    8d68:	e01b      	b.n	8da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    8d6a:	4b10      	ldr	r3, [pc, #64]	; (8dac <prvInsertTimerInActiveList+0x7c>)
    8d6c:	681a      	ldr	r2, [r3, #0]
    8d6e:	68fb      	ldr	r3, [r7, #12]
    8d70:	3304      	adds	r3, #4
    8d72:	0019      	movs	r1, r3
    8d74:	0010      	movs	r0, r2
    8d76:	4b0e      	ldr	r3, [pc, #56]	; (8db0 <prvInsertTimerInActiveList+0x80>)
    8d78:	4798      	blx	r3
    8d7a:	e012      	b.n	8da2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    8d7c:	687a      	ldr	r2, [r7, #4]
    8d7e:	683b      	ldr	r3, [r7, #0]
    8d80:	429a      	cmp	r2, r3
    8d82:	d206      	bcs.n	8d92 <prvInsertTimerInActiveList+0x62>
    8d84:	68ba      	ldr	r2, [r7, #8]
    8d86:	683b      	ldr	r3, [r7, #0]
    8d88:	429a      	cmp	r2, r3
    8d8a:	d302      	bcc.n	8d92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
    8d8c:	2301      	movs	r3, #1
    8d8e:	617b      	str	r3, [r7, #20]
    8d90:	e007      	b.n	8da2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    8d92:	4b08      	ldr	r3, [pc, #32]	; (8db4 <prvInsertTimerInActiveList+0x84>)
    8d94:	681a      	ldr	r2, [r3, #0]
    8d96:	68fb      	ldr	r3, [r7, #12]
    8d98:	3304      	adds	r3, #4
    8d9a:	0019      	movs	r1, r3
    8d9c:	0010      	movs	r0, r2
    8d9e:	4b04      	ldr	r3, [pc, #16]	; (8db0 <prvInsertTimerInActiveList+0x80>)
    8da0:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
    8da2:	697b      	ldr	r3, [r7, #20]
}
    8da4:	0018      	movs	r0, r3
    8da6:	46bd      	mov	sp, r7
    8da8:	b006      	add	sp, #24
    8daa:	bd80      	pop	{r7, pc}
    8dac:	20003cd8 	.word	0x20003cd8
    8db0:	00006e89 	.word	0x00006e89
    8db4:	20003cd4 	.word	0x20003cd4

00008db8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
    8db8:	b590      	push	{r4, r7, lr}
    8dba:	b08b      	sub	sp, #44	; 0x2c
    8dbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    8dbe:	e068      	b.n	8e92 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    8dc0:	2308      	movs	r3, #8
    8dc2:	18fb      	adds	r3, r7, r3
    8dc4:	681b      	ldr	r3, [r3, #0]
    8dc6:	2b00      	cmp	r3, #0
    8dc8:	db63      	blt.n	8e92 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
    8dca:	2308      	movs	r3, #8
    8dcc:	18fb      	adds	r3, r7, r3
    8dce:	689b      	ldr	r3, [r3, #8]
    8dd0:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
    8dd2:	69fb      	ldr	r3, [r7, #28]
    8dd4:	695b      	ldr	r3, [r3, #20]
    8dd6:	2b00      	cmp	r3, #0
    8dd8:	d004      	beq.n	8de4 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8dda:	69fb      	ldr	r3, [r7, #28]
    8ddc:	3304      	adds	r3, #4
    8dde:	0018      	movs	r0, r3
    8de0:	4b33      	ldr	r3, [pc, #204]	; (8eb0 <prvProcessReceivedCommands+0xf8>)
    8de2:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    8de4:	1d3b      	adds	r3, r7, #4
    8de6:	0018      	movs	r0, r3
    8de8:	4b32      	ldr	r3, [pc, #200]	; (8eb4 <prvProcessReceivedCommands+0xfc>)
    8dea:	4798      	blx	r3
    8dec:	0003      	movs	r3, r0
    8dee:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
    8df0:	2308      	movs	r3, #8
    8df2:	18fb      	adds	r3, r7, r3
    8df4:	681b      	ldr	r3, [r3, #0]
    8df6:	2b09      	cmp	r3, #9
    8df8:	d84a      	bhi.n	8e90 <prvProcessReceivedCommands+0xd8>
    8dfa:	009a      	lsls	r2, r3, #2
    8dfc:	4b2e      	ldr	r3, [pc, #184]	; (8eb8 <prvProcessReceivedCommands+0x100>)
    8dfe:	18d3      	adds	r3, r2, r3
    8e00:	681b      	ldr	r3, [r3, #0]
    8e02:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    8e04:	2308      	movs	r3, #8
    8e06:	18fb      	adds	r3, r7, r3
    8e08:	685a      	ldr	r2, [r3, #4]
    8e0a:	69fb      	ldr	r3, [r7, #28]
    8e0c:	699b      	ldr	r3, [r3, #24]
    8e0e:	18d1      	adds	r1, r2, r3
    8e10:	2308      	movs	r3, #8
    8e12:	18fb      	adds	r3, r7, r3
    8e14:	685b      	ldr	r3, [r3, #4]
    8e16:	69ba      	ldr	r2, [r7, #24]
    8e18:	69f8      	ldr	r0, [r7, #28]
    8e1a:	4c28      	ldr	r4, [pc, #160]	; (8ebc <prvProcessReceivedCommands+0x104>)
    8e1c:	47a0      	blx	r4
    8e1e:	1e03      	subs	r3, r0, #0
    8e20:	d037      	beq.n	8e92 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    8e22:	69fb      	ldr	r3, [r7, #28]
    8e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8e26:	69fa      	ldr	r2, [r7, #28]
    8e28:	0010      	movs	r0, r2
    8e2a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    8e2c:	69fb      	ldr	r3, [r7, #28]
    8e2e:	69db      	ldr	r3, [r3, #28]
    8e30:	2b01      	cmp	r3, #1
    8e32:	d12e      	bne.n	8e92 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    8e34:	2308      	movs	r3, #8
    8e36:	18fb      	adds	r3, r7, r3
    8e38:	685a      	ldr	r2, [r3, #4]
    8e3a:	69fb      	ldr	r3, [r7, #28]
    8e3c:	699b      	ldr	r3, [r3, #24]
    8e3e:	18d2      	adds	r2, r2, r3
    8e40:	69f8      	ldr	r0, [r7, #28]
    8e42:	2300      	movs	r3, #0
    8e44:	9300      	str	r3, [sp, #0]
    8e46:	2300      	movs	r3, #0
    8e48:	2100      	movs	r1, #0
    8e4a:	4c1d      	ldr	r4, [pc, #116]	; (8ec0 <prvProcessReceivedCommands+0x108>)
    8e4c:	47a0      	blx	r4
    8e4e:	0003      	movs	r3, r0
    8e50:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
    8e52:	697b      	ldr	r3, [r7, #20]
    8e54:	2b00      	cmp	r3, #0
    8e56:	d11c      	bne.n	8e92 <prvProcessReceivedCommands+0xda>
    8e58:	b672      	cpsid	i
    8e5a:	e7fe      	b.n	8e5a <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    8e5c:	2308      	movs	r3, #8
    8e5e:	18fb      	adds	r3, r7, r3
    8e60:	685a      	ldr	r2, [r3, #4]
    8e62:	69fb      	ldr	r3, [r7, #28]
    8e64:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
    8e66:	69fb      	ldr	r3, [r7, #28]
    8e68:	699b      	ldr	r3, [r3, #24]
    8e6a:	2b00      	cmp	r3, #0
    8e6c:	d101      	bne.n	8e72 <prvProcessReceivedCommands+0xba>
    8e6e:	b672      	cpsid	i
    8e70:	e7fe      	b.n	8e70 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    8e72:	69fb      	ldr	r3, [r7, #28]
    8e74:	699a      	ldr	r2, [r3, #24]
    8e76:	69bb      	ldr	r3, [r7, #24]
    8e78:	18d1      	adds	r1, r2, r3
    8e7a:	69bb      	ldr	r3, [r7, #24]
    8e7c:	69ba      	ldr	r2, [r7, #24]
    8e7e:	69f8      	ldr	r0, [r7, #28]
    8e80:	4c0e      	ldr	r4, [pc, #56]	; (8ebc <prvProcessReceivedCommands+0x104>)
    8e82:	47a0      	blx	r4
					break;
    8e84:	e005      	b.n	8e92 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
    8e86:	69fb      	ldr	r3, [r7, #28]
    8e88:	0018      	movs	r0, r3
    8e8a:	4b0e      	ldr	r3, [pc, #56]	; (8ec4 <prvProcessReceivedCommands+0x10c>)
    8e8c:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
    8e8e:	e000      	b.n	8e92 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
    8e90:	46c0      	nop			; (mov r8, r8)
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    8e92:	4b0d      	ldr	r3, [pc, #52]	; (8ec8 <prvProcessReceivedCommands+0x110>)
    8e94:	6818      	ldr	r0, [r3, #0]
    8e96:	2308      	movs	r3, #8
    8e98:	18f9      	adds	r1, r7, r3
    8e9a:	2300      	movs	r3, #0
    8e9c:	2200      	movs	r2, #0
    8e9e:	4c0b      	ldr	r4, [pc, #44]	; (8ecc <prvProcessReceivedCommands+0x114>)
    8ea0:	47a0      	blx	r4
    8ea2:	1e03      	subs	r3, r0, #0
    8ea4:	d18c      	bne.n	8dc0 <prvProcessReceivedCommands+0x8>
					/* Don't expect to get here. */
					break;
			}
		}
	}
}
    8ea6:	46c0      	nop			; (mov r8, r8)
    8ea8:	46bd      	mov	sp, r7
    8eaa:	b009      	add	sp, #36	; 0x24
    8eac:	bd90      	pop	{r4, r7, pc}
    8eae:	46c0      	nop			; (mov r8, r8)
    8eb0:	00006ef5 	.word	0x00006ef5
    8eb4:	00008ce9 	.word	0x00008ce9
    8eb8:	0000de4c 	.word	0x0000de4c
    8ebc:	00008d31 	.word	0x00008d31
    8ec0:	00008aad 	.word	0x00008aad
    8ec4:	00007211 	.word	0x00007211
    8ec8:	20003cdc 	.word	0x20003cdc
    8ecc:	000076a5 	.word	0x000076a5

00008ed0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    8ed0:	b590      	push	{r4, r7, lr}
    8ed2:	b089      	sub	sp, #36	; 0x24
    8ed4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    8ed6:	e03e      	b.n	8f56 <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    8ed8:	4b28      	ldr	r3, [pc, #160]	; (8f7c <prvSwitchTimerLists+0xac>)
    8eda:	681b      	ldr	r3, [r3, #0]
    8edc:	68db      	ldr	r3, [r3, #12]
    8ede:	681b      	ldr	r3, [r3, #0]
    8ee0:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
    8ee2:	4b26      	ldr	r3, [pc, #152]	; (8f7c <prvSwitchTimerLists+0xac>)
    8ee4:	681b      	ldr	r3, [r3, #0]
    8ee6:	68db      	ldr	r3, [r3, #12]
    8ee8:	68db      	ldr	r3, [r3, #12]
    8eea:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    8eec:	693b      	ldr	r3, [r7, #16]
    8eee:	3304      	adds	r3, #4
    8ef0:	0018      	movs	r0, r3
    8ef2:	4b23      	ldr	r3, [pc, #140]	; (8f80 <prvSwitchTimerLists+0xb0>)
    8ef4:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    8ef6:	693b      	ldr	r3, [r7, #16]
    8ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8efa:	693a      	ldr	r2, [r7, #16]
    8efc:	0010      	movs	r0, r2
    8efe:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
    8f00:	693b      	ldr	r3, [r7, #16]
    8f02:	69db      	ldr	r3, [r3, #28]
    8f04:	2b01      	cmp	r3, #1
    8f06:	d126      	bne.n	8f56 <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    8f08:	693b      	ldr	r3, [r7, #16]
    8f0a:	699a      	ldr	r2, [r3, #24]
    8f0c:	697b      	ldr	r3, [r7, #20]
    8f0e:	18d3      	adds	r3, r2, r3
    8f10:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
    8f12:	68fa      	ldr	r2, [r7, #12]
    8f14:	697b      	ldr	r3, [r7, #20]
    8f16:	429a      	cmp	r2, r3
    8f18:	d90e      	bls.n	8f38 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    8f1a:	693b      	ldr	r3, [r7, #16]
    8f1c:	68fa      	ldr	r2, [r7, #12]
    8f1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    8f20:	693b      	ldr	r3, [r7, #16]
    8f22:	693a      	ldr	r2, [r7, #16]
    8f24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    8f26:	4b15      	ldr	r3, [pc, #84]	; (8f7c <prvSwitchTimerLists+0xac>)
    8f28:	681a      	ldr	r2, [r3, #0]
    8f2a:	693b      	ldr	r3, [r7, #16]
    8f2c:	3304      	adds	r3, #4
    8f2e:	0019      	movs	r1, r3
    8f30:	0010      	movs	r0, r2
    8f32:	4b14      	ldr	r3, [pc, #80]	; (8f84 <prvSwitchTimerLists+0xb4>)
    8f34:	4798      	blx	r3
    8f36:	e00e      	b.n	8f56 <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    8f38:	697a      	ldr	r2, [r7, #20]
    8f3a:	6938      	ldr	r0, [r7, #16]
    8f3c:	2300      	movs	r3, #0
    8f3e:	9300      	str	r3, [sp, #0]
    8f40:	2300      	movs	r3, #0
    8f42:	2100      	movs	r1, #0
    8f44:	4c10      	ldr	r4, [pc, #64]	; (8f88 <prvSwitchTimerLists+0xb8>)
    8f46:	47a0      	blx	r4
    8f48:	0003      	movs	r3, r0
    8f4a:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
    8f4c:	68bb      	ldr	r3, [r7, #8]
    8f4e:	2b00      	cmp	r3, #0
    8f50:	d101      	bne.n	8f56 <prvSwitchTimerLists+0x86>
    8f52:	b672      	cpsid	i
    8f54:	e7fe      	b.n	8f54 <prvSwitchTimerLists+0x84>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    8f56:	4b09      	ldr	r3, [pc, #36]	; (8f7c <prvSwitchTimerLists+0xac>)
    8f58:	681b      	ldr	r3, [r3, #0]
    8f5a:	681b      	ldr	r3, [r3, #0]
    8f5c:	2b00      	cmp	r3, #0
    8f5e:	d1bb      	bne.n	8ed8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
    8f60:	4b06      	ldr	r3, [pc, #24]	; (8f7c <prvSwitchTimerLists+0xac>)
    8f62:	681b      	ldr	r3, [r3, #0]
    8f64:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
    8f66:	4b09      	ldr	r3, [pc, #36]	; (8f8c <prvSwitchTimerLists+0xbc>)
    8f68:	681a      	ldr	r2, [r3, #0]
    8f6a:	4b04      	ldr	r3, [pc, #16]	; (8f7c <prvSwitchTimerLists+0xac>)
    8f6c:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
    8f6e:	4b07      	ldr	r3, [pc, #28]	; (8f8c <prvSwitchTimerLists+0xbc>)
    8f70:	687a      	ldr	r2, [r7, #4]
    8f72:	601a      	str	r2, [r3, #0]
}
    8f74:	46c0      	nop			; (mov r8, r8)
    8f76:	46bd      	mov	sp, r7
    8f78:	b007      	add	sp, #28
    8f7a:	bd90      	pop	{r4, r7, pc}
    8f7c:	20003cd4 	.word	0x20003cd4
    8f80:	00006ef5 	.word	0x00006ef5
    8f84:	00006e89 	.word	0x00006e89
    8f88:	00008aad 	.word	0x00008aad
    8f8c:	20003cd8 	.word	0x20003cd8

00008f90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    8f90:	b580      	push	{r7, lr}
    8f92:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
    8f94:	4b10      	ldr	r3, [pc, #64]	; (8fd8 <prvCheckForValidListAndQueue+0x48>)
    8f96:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
    8f98:	4b10      	ldr	r3, [pc, #64]	; (8fdc <prvCheckForValidListAndQueue+0x4c>)
    8f9a:	681b      	ldr	r3, [r3, #0]
    8f9c:	2b00      	cmp	r3, #0
    8f9e:	d115      	bne.n	8fcc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
    8fa0:	4b0f      	ldr	r3, [pc, #60]	; (8fe0 <prvCheckForValidListAndQueue+0x50>)
    8fa2:	0018      	movs	r0, r3
    8fa4:	4b0f      	ldr	r3, [pc, #60]	; (8fe4 <prvCheckForValidListAndQueue+0x54>)
    8fa6:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
    8fa8:	4b0f      	ldr	r3, [pc, #60]	; (8fe8 <prvCheckForValidListAndQueue+0x58>)
    8faa:	0018      	movs	r0, r3
    8fac:	4b0d      	ldr	r3, [pc, #52]	; (8fe4 <prvCheckForValidListAndQueue+0x54>)
    8fae:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
    8fb0:	4b0e      	ldr	r3, [pc, #56]	; (8fec <prvCheckForValidListAndQueue+0x5c>)
    8fb2:	4a0b      	ldr	r2, [pc, #44]	; (8fe0 <prvCheckForValidListAndQueue+0x50>)
    8fb4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
    8fb6:	4b0e      	ldr	r3, [pc, #56]	; (8ff0 <prvCheckForValidListAndQueue+0x60>)
    8fb8:	4a0b      	ldr	r2, [pc, #44]	; (8fe8 <prvCheckForValidListAndQueue+0x58>)
    8fba:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    8fbc:	2200      	movs	r2, #0
    8fbe:	210c      	movs	r1, #12
    8fc0:	2002      	movs	r0, #2
    8fc2:	4b0c      	ldr	r3, [pc, #48]	; (8ff4 <prvCheckForValidListAndQueue+0x64>)
    8fc4:	4798      	blx	r3
    8fc6:	0002      	movs	r2, r0
    8fc8:	4b04      	ldr	r3, [pc, #16]	; (8fdc <prvCheckForValidListAndQueue+0x4c>)
    8fca:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    8fcc:	4b0a      	ldr	r3, [pc, #40]	; (8ff8 <prvCheckForValidListAndQueue+0x68>)
    8fce:	4798      	blx	r3
}
    8fd0:	46c0      	nop			; (mov r8, r8)
    8fd2:	46bd      	mov	sp, r7
    8fd4:	bd80      	pop	{r7, pc}
    8fd6:	46c0      	nop			; (mov r8, r8)
    8fd8:	00007069 	.word	0x00007069
    8fdc:	20003cdc 	.word	0x20003cdc
    8fe0:	20003cac 	.word	0x20003cac
    8fe4:	00006df1 	.word	0x00006df1
    8fe8:	20003cc0 	.word	0x20003cc0
    8fec:	20003cd4 	.word	0x20003cd4
    8ff0:	20003cd8 	.word	0x20003cd8
    8ff4:	000072e9 	.word	0x000072e9
    8ff8:	0000708d 	.word	0x0000708d

00008ffc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    8ffc:	b580      	push	{r7, lr}
    8ffe:	b084      	sub	sp, #16
    9000:	af00      	add	r7, sp, #0
    9002:	0002      	movs	r2, r0
    9004:	1dfb      	adds	r3, r7, #7
    9006:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9008:	230f      	movs	r3, #15
    900a:	18fb      	adds	r3, r7, r3
    900c:	1dfa      	adds	r2, r7, #7
    900e:	7812      	ldrb	r2, [r2, #0]
    9010:	09d2      	lsrs	r2, r2, #7
    9012:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    9014:	230e      	movs	r3, #14
    9016:	18fb      	adds	r3, r7, r3
    9018:	1dfa      	adds	r2, r7, #7
    901a:	7812      	ldrb	r2, [r2, #0]
    901c:	0952      	lsrs	r2, r2, #5
    901e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9020:	4b0d      	ldr	r3, [pc, #52]	; (9058 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    9022:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    9024:	230f      	movs	r3, #15
    9026:	18fb      	adds	r3, r7, r3
    9028:	781b      	ldrb	r3, [r3, #0]
    902a:	2b00      	cmp	r3, #0
    902c:	d10f      	bne.n	904e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    902e:	230f      	movs	r3, #15
    9030:	18fb      	adds	r3, r7, r3
    9032:	781b      	ldrb	r3, [r3, #0]
    9034:	009b      	lsls	r3, r3, #2
    9036:	2210      	movs	r2, #16
    9038:	4694      	mov	ip, r2
    903a:	44bc      	add	ip, r7
    903c:	4463      	add	r3, ip
    903e:	3b08      	subs	r3, #8
    9040:	681a      	ldr	r2, [r3, #0]
    9042:	230e      	movs	r3, #14
    9044:	18fb      	adds	r3, r7, r3
    9046:	781b      	ldrb	r3, [r3, #0]
    9048:	01db      	lsls	r3, r3, #7
    904a:	18d3      	adds	r3, r2, r3
    904c:	e000      	b.n	9050 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    904e:	2300      	movs	r3, #0
	}
}
    9050:	0018      	movs	r0, r3
    9052:	46bd      	mov	sp, r7
    9054:	b004      	add	sp, #16
    9056:	bd80      	pop	{r7, pc}
    9058:	41004400 	.word	0x41004400

0000905c <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
    905c:	b580      	push	{r7, lr}
    905e:	b084      	sub	sp, #16
    9060:	af00      	add	r7, sp, #0
    9062:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
    9064:	687b      	ldr	r3, [r7, #4]
    9066:	681b      	ldr	r3, [r3, #0]
    9068:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    906a:	68fb      	ldr	r3, [r7, #12]
    906c:	7e5b      	ldrb	r3, [r3, #25]
    906e:	b2db      	uxtb	r3, r3
    9070:	b25b      	sxtb	r3, r3
    9072:	2b00      	cmp	r3, #0
    9074:	da01      	bge.n	907a <adc_is_syncing+0x1e>
		return true;
    9076:	2301      	movs	r3, #1
    9078:	e000      	b.n	907c <adc_is_syncing+0x20>
	}

	return false;
    907a:	2300      	movs	r3, #0
}
    907c:	0018      	movs	r0, r3
    907e:	46bd      	mov	sp, r7
    9080:	b004      	add	sp, #16
    9082:	bd80      	pop	{r7, pc}

00009084 <adc_get_status>:
 *                                  window range
 * \retval ADC_STATUS_OVERRUN       ADC result has overrun
 */
static inline uint32_t adc_get_status(
		struct adc_module *const module_inst)
{
    9084:	b580      	push	{r7, lr}
    9086:	b086      	sub	sp, #24
    9088:	af00      	add	r7, sp, #0
    908a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    908c:	687b      	ldr	r3, [r7, #4]
    908e:	681b      	ldr	r3, [r3, #0]
    9090:	613b      	str	r3, [r7, #16]

	uint32_t int_flags = adc_module->INTFLAG.reg;
    9092:	693b      	ldr	r3, [r7, #16]
    9094:	7e1b      	ldrb	r3, [r3, #24]
    9096:	b2db      	uxtb	r3, r3
    9098:	60fb      	str	r3, [r7, #12]

	uint32_t status_flags = 0;
    909a:	2300      	movs	r3, #0
    909c:	617b      	str	r3, [r7, #20]

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    909e:	68fb      	ldr	r3, [r7, #12]
    90a0:	2201      	movs	r2, #1
    90a2:	4013      	ands	r3, r2
    90a4:	d003      	beq.n	90ae <adc_get_status+0x2a>
		status_flags |= ADC_STATUS_RESULT_READY;
    90a6:	697b      	ldr	r3, [r7, #20]
    90a8:	2201      	movs	r2, #1
    90aa:	4313      	orrs	r3, r2
    90ac:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    90ae:	68fb      	ldr	r3, [r7, #12]
    90b0:	2204      	movs	r2, #4
    90b2:	4013      	ands	r3, r2
    90b4:	d003      	beq.n	90be <adc_get_status+0x3a>
		status_flags |= ADC_STATUS_WINDOW;
    90b6:	697b      	ldr	r3, [r7, #20]
    90b8:	2202      	movs	r2, #2
    90ba:	4313      	orrs	r3, r2
    90bc:	617b      	str	r3, [r7, #20]
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    90be:	68fb      	ldr	r3, [r7, #12]
    90c0:	2202      	movs	r2, #2
    90c2:	4013      	ands	r3, r2
    90c4:	d003      	beq.n	90ce <adc_get_status+0x4a>
		status_flags |= ADC_STATUS_OVERRUN;
    90c6:	697b      	ldr	r3, [r7, #20]
    90c8:	2204      	movs	r2, #4
    90ca:	4313      	orrs	r3, r2
    90cc:	617b      	str	r3, [r7, #20]
	}

	return status_flags;
    90ce:	697b      	ldr	r3, [r7, #20]
}
    90d0:	0018      	movs	r0, r3
    90d2:	46bd      	mov	sp, r7
    90d4:	b006      	add	sp, #24
    90d6:	bd80      	pop	{r7, pc}

000090d8 <adc_clear_status>:
 * \param[in] status_flags  Bitmask of \c ADC_STATUS_* flags to clear
 */
static inline void adc_clear_status(
		struct adc_module *const module_inst,
		const uint32_t status_flags)
{
    90d8:	b580      	push	{r7, lr}
    90da:	b084      	sub	sp, #16
    90dc:	af00      	add	r7, sp, #0
    90de:	6078      	str	r0, [r7, #4]
    90e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    90e2:	687b      	ldr	r3, [r7, #4]
    90e4:	681b      	ldr	r3, [r3, #0]
    90e6:	60bb      	str	r3, [r7, #8]

	uint32_t int_flags = 0;
    90e8:	2300      	movs	r3, #0
    90ea:	60fb      	str	r3, [r7, #12]

	/* Check for ADC Result Ready */
	if (status_flags & ADC_STATUS_RESULT_READY) {
    90ec:	683b      	ldr	r3, [r7, #0]
    90ee:	2201      	movs	r2, #1
    90f0:	4013      	ands	r3, r2
    90f2:	d003      	beq.n	90fc <adc_clear_status+0x24>
		int_flags |= ADC_INTFLAG_RESRDY;
    90f4:	68fb      	ldr	r3, [r7, #12]
    90f6:	2201      	movs	r2, #1
    90f8:	4313      	orrs	r3, r2
    90fa:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Window Match */
	if (status_flags & ADC_STATUS_WINDOW) {
    90fc:	683b      	ldr	r3, [r7, #0]
    90fe:	2202      	movs	r2, #2
    9100:	4013      	ands	r3, r2
    9102:	d003      	beq.n	910c <adc_clear_status+0x34>
		int_flags |= ADC_INTFLAG_WINMON;
    9104:	68fb      	ldr	r3, [r7, #12]
    9106:	2204      	movs	r2, #4
    9108:	4313      	orrs	r3, r2
    910a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for ADC Overrun */
	if (status_flags & ADC_STATUS_OVERRUN) {
    910c:	683b      	ldr	r3, [r7, #0]
    910e:	2204      	movs	r2, #4
    9110:	4013      	ands	r3, r2
    9112:	d003      	beq.n	911c <adc_clear_status+0x44>
		int_flags |= ADC_INTFLAG_OVERRUN;
    9114:	68fb      	ldr	r3, [r7, #12]
    9116:	2202      	movs	r2, #2
    9118:	4313      	orrs	r3, r2
    911a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    911c:	68fb      	ldr	r3, [r7, #12]
    911e:	b2da      	uxtb	r2, r3
    9120:	68bb      	ldr	r3, [r7, #8]
    9122:	761a      	strb	r2, [r3, #24]
}
    9124:	46c0      	nop			; (mov r8, r8)
    9126:	46bd      	mov	sp, r7
    9128:	b004      	add	sp, #16
    912a:	bd80      	pop	{r7, pc}

0000912c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
    912c:	b580      	push	{r7, lr}
    912e:	b084      	sub	sp, #16
    9130:	af00      	add	r7, sp, #0
    9132:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    9134:	687b      	ldr	r3, [r7, #4]
    9136:	681b      	ldr	r3, [r3, #0]
    9138:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
    913a:	46c0      	nop			; (mov r8, r8)
    913c:	687b      	ldr	r3, [r7, #4]
    913e:	0018      	movs	r0, r3
    9140:	4b0b      	ldr	r3, [pc, #44]	; (9170 <adc_start_conversion+0x44>)
    9142:	4798      	blx	r3
    9144:	1e03      	subs	r3, r0, #0
    9146:	d1f9      	bne.n	913c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    9148:	68fb      	ldr	r3, [r7, #12]
    914a:	7b1b      	ldrb	r3, [r3, #12]
    914c:	b2db      	uxtb	r3, r3
    914e:	2202      	movs	r2, #2
    9150:	4313      	orrs	r3, r2
    9152:	b2da      	uxtb	r2, r3
    9154:	68fb      	ldr	r3, [r7, #12]
    9156:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
    9158:	46c0      	nop			; (mov r8, r8)
    915a:	687b      	ldr	r3, [r7, #4]
    915c:	0018      	movs	r0, r3
    915e:	4b04      	ldr	r3, [pc, #16]	; (9170 <adc_start_conversion+0x44>)
    9160:	4798      	blx	r3
    9162:	1e03      	subs	r3, r0, #0
    9164:	d1f9      	bne.n	915a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
    9166:	46c0      	nop			; (mov r8, r8)
    9168:	46bd      	mov	sp, r7
    916a:	b004      	add	sp, #16
    916c:	bd80      	pop	{r7, pc}
    916e:	46c0      	nop			; (mov r8, r8)
    9170:	0000905d 	.word	0x0000905d

00009174 <adc_read>:
 *                             ADC module before the result was read by the software
 */
static inline enum status_code adc_read(
		struct adc_module *const module_inst,
		uint16_t *result)
{
    9174:	b580      	push	{r7, lr}
    9176:	b084      	sub	sp, #16
    9178:	af00      	add	r7, sp, #0
    917a:	6078      	str	r0, [r7, #4]
    917c:	6039      	str	r1, [r7, #0]
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    917e:	687b      	ldr	r3, [r7, #4]
    9180:	0018      	movs	r0, r3
    9182:	4b18      	ldr	r3, [pc, #96]	; (91e4 <adc_read+0x70>)
    9184:	4798      	blx	r3
    9186:	0002      	movs	r2, r0
    9188:	2301      	movs	r3, #1
    918a:	4013      	ands	r3, r2
    918c:	d101      	bne.n	9192 <adc_read+0x1e>
		/* Result not ready */
		return STATUS_BUSY;
    918e:	2305      	movs	r3, #5
    9190:	e023      	b.n	91da <adc_read+0x66>
	}

	Adc *const adc_module = module_inst->hw;
    9192:	687b      	ldr	r3, [r7, #4]
    9194:	681b      	ldr	r3, [r3, #0]
    9196:	60fb      	str	r3, [r7, #12]

#if (SAMD) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
    9198:	46c0      	nop			; (mov r8, r8)
    919a:	687b      	ldr	r3, [r7, #4]
    919c:	0018      	movs	r0, r3
    919e:	4b12      	ldr	r3, [pc, #72]	; (91e8 <adc_read+0x74>)
    91a0:	4798      	blx	r3
    91a2:	1e03      	subs	r3, r0, #0
    91a4:	d1f9      	bne.n	919a <adc_read+0x26>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    91a6:	68fb      	ldr	r3, [r7, #12]
    91a8:	8b5b      	ldrh	r3, [r3, #26]
    91aa:	b29a      	uxth	r2, r3
    91ac:	683b      	ldr	r3, [r7, #0]
    91ae:	801a      	strh	r2, [r3, #0]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);
    91b0:	687b      	ldr	r3, [r7, #4]
    91b2:	2101      	movs	r1, #1
    91b4:	0018      	movs	r0, r3
    91b6:	4b0d      	ldr	r3, [pc, #52]	; (91ec <adc_read+0x78>)
    91b8:	4798      	blx	r3

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    91ba:	687b      	ldr	r3, [r7, #4]
    91bc:	0018      	movs	r0, r3
    91be:	4b09      	ldr	r3, [pc, #36]	; (91e4 <adc_read+0x70>)
    91c0:	4798      	blx	r3
    91c2:	0002      	movs	r2, r0
    91c4:	2304      	movs	r3, #4
    91c6:	4013      	ands	r3, r2
    91c8:	d006      	beq.n	91d8 <adc_read+0x64>
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
    91ca:	687b      	ldr	r3, [r7, #4]
    91cc:	2104      	movs	r1, #4
    91ce:	0018      	movs	r0, r3
    91d0:	4b06      	ldr	r3, [pc, #24]	; (91ec <adc_read+0x78>)
    91d2:	4798      	blx	r3
		return STATUS_ERR_OVERFLOW;
    91d4:	231e      	movs	r3, #30
    91d6:	e000      	b.n	91da <adc_read+0x66>
	}

	return STATUS_OK;
    91d8:	2300      	movs	r3, #0
}
    91da:	0018      	movs	r0, r3
    91dc:	46bd      	mov	sp, r7
    91de:	b004      	add	sp, #16
    91e0:	bd80      	pop	{r7, pc}
    91e2:	46c0      	nop			; (mov r8, r8)
    91e4:	00009085 	.word	0x00009085
    91e8:	0000905d 	.word	0x0000905d
    91ec:	000090d9 	.word	0x000090d9

000091f0 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    91f0:	b580      	push	{r7, lr}
    91f2:	b082      	sub	sp, #8
    91f4:	af00      	add	r7, sp, #0
    91f6:	0002      	movs	r2, r0
    91f8:	1dfb      	adds	r3, r7, #7
    91fa:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    91fc:	1dfb      	adds	r3, r7, #7
    91fe:	781b      	ldrb	r3, [r3, #0]
    9200:	0018      	movs	r0, r3
    9202:	4b03      	ldr	r3, [pc, #12]	; (9210 <port_get_group_from_gpio_pin+0x20>)
    9204:	4798      	blx	r3
    9206:	0003      	movs	r3, r0
}
    9208:	0018      	movs	r0, r3
    920a:	46bd      	mov	sp, r7
    920c:	b002      	add	sp, #8
    920e:	bd80      	pop	{r7, pc}
    9210:	00008ffd 	.word	0x00008ffd

00009214 <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
    9214:	b580      	push	{r7, lr}
    9216:	b084      	sub	sp, #16
    9218:	af00      	add	r7, sp, #0
    921a:	0002      	movs	r2, r0
    921c:	1dfb      	adds	r3, r7, #7
    921e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    9220:	1dfb      	adds	r3, r7, #7
    9222:	781b      	ldrb	r3, [r3, #0]
    9224:	0018      	movs	r0, r3
    9226:	4b0b      	ldr	r3, [pc, #44]	; (9254 <port_pin_get_output_level+0x40>)
    9228:	4798      	blx	r3
    922a:	0003      	movs	r3, r0
    922c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    922e:	1dfb      	adds	r3, r7, #7
    9230:	781b      	ldrb	r3, [r3, #0]
    9232:	221f      	movs	r2, #31
    9234:	4013      	ands	r3, r2
    9236:	2201      	movs	r2, #1
    9238:	409a      	lsls	r2, r3
    923a:	0013      	movs	r3, r2
    923c:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
    923e:	68fb      	ldr	r3, [r7, #12]
    9240:	691b      	ldr	r3, [r3, #16]
    9242:	68ba      	ldr	r2, [r7, #8]
    9244:	4013      	ands	r3, r2
    9246:	1e5a      	subs	r2, r3, #1
    9248:	4193      	sbcs	r3, r2
    924a:	b2db      	uxtb	r3, r3
}
    924c:	0018      	movs	r0, r3
    924e:	46bd      	mov	sp, r7
    9250:	b004      	add	sp, #16
    9252:	bd80      	pop	{r7, pc}
    9254:	000091f1 	.word	0x000091f1

00009258 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    9258:	b580      	push	{r7, lr}
    925a:	b084      	sub	sp, #16
    925c:	af00      	add	r7, sp, #0
    925e:	0002      	movs	r2, r0
    9260:	1dfb      	adds	r3, r7, #7
    9262:	701a      	strb	r2, [r3, #0]
    9264:	1dbb      	adds	r3, r7, #6
    9266:	1c0a      	adds	r2, r1, #0
    9268:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    926a:	1dfb      	adds	r3, r7, #7
    926c:	781b      	ldrb	r3, [r3, #0]
    926e:	0018      	movs	r0, r3
    9270:	4b0d      	ldr	r3, [pc, #52]	; (92a8 <port_pin_set_output_level+0x50>)
    9272:	4798      	blx	r3
    9274:	0003      	movs	r3, r0
    9276:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    9278:	1dfb      	adds	r3, r7, #7
    927a:	781b      	ldrb	r3, [r3, #0]
    927c:	221f      	movs	r2, #31
    927e:	4013      	ands	r3, r2
    9280:	2201      	movs	r2, #1
    9282:	409a      	lsls	r2, r3
    9284:	0013      	movs	r3, r2
    9286:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    9288:	1dbb      	adds	r3, r7, #6
    928a:	781b      	ldrb	r3, [r3, #0]
    928c:	2b00      	cmp	r3, #0
    928e:	d003      	beq.n	9298 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    9290:	68fb      	ldr	r3, [r7, #12]
    9292:	68ba      	ldr	r2, [r7, #8]
    9294:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    9296:	e002      	b.n	929e <port_pin_set_output_level+0x46>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    9298:	68fb      	ldr	r3, [r7, #12]
    929a:	68ba      	ldr	r2, [r7, #8]
    929c:	615a      	str	r2, [r3, #20]
	}
}
    929e:	46c0      	nop			; (mov r8, r8)
    92a0:	46bd      	mov	sp, r7
    92a2:	b004      	add	sp, #16
    92a4:	bd80      	pop	{r7, pc}
    92a6:	46c0      	nop			; (mov r8, r8)
    92a8:	000091f1 	.word	0x000091f1

000092ac <m2m_wifi_state>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
    92ac:	b590      	push	{r4, r7, lr}
    92ae:	b087      	sub	sp, #28
    92b0:	af02      	add	r7, sp, #8
    92b2:	0002      	movs	r2, r0
    92b4:	6039      	str	r1, [r7, #0]
    92b6:	1dfb      	adds	r3, r7, #7
    92b8:	701a      	strb	r2, [r3, #0]
	switch (u8MsgType) {
    92ba:	1dfb      	adds	r3, r7, #7
    92bc:	781b      	ldrb	r3, [r3, #0]
    92be:	2b2c      	cmp	r3, #44	; 0x2c
    92c0:	d002      	beq.n	92c8 <m2m_wifi_state+0x1c>
    92c2:	2b32      	cmp	r3, #50	; 0x32
    92c4:	d025      	beq.n	9312 <m2m_wifi_state+0x66>
		break;
	}

	default:
	{
		break;
    92c6:	e042      	b.n	934e <m2m_wifi_state+0xa2>
static void m2m_wifi_state(uint8_t u8MsgType, void *pvMsg)
{
	switch (u8MsgType) {
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
    92c8:	683b      	ldr	r3, [r7, #0]
    92ca:	60fb      	str	r3, [r7, #12]
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
    92cc:	68fb      	ldr	r3, [r7, #12]
    92ce:	781b      	ldrb	r3, [r3, #0]
    92d0:	2b01      	cmp	r3, #1
    92d2:	d104      	bne.n	92de <m2m_wifi_state+0x32>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
    92d4:	4b20      	ldr	r3, [pc, #128]	; (9358 <m2m_wifi_state+0xac>)
    92d6:	0018      	movs	r0, r3
    92d8:	4b20      	ldr	r3, [pc, #128]	; (935c <m2m_wifi_state+0xb0>)
    92da:	4798      	blx	r3
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    92dc:	e036      	b.n	934c <m2m_wifi_state+0xa0>
	case M2M_WIFI_RESP_CON_STATE_CHANGED:
	{
		tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
		if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: CONNECTED\r\n");
		} else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
    92de:	68fb      	ldr	r3, [r7, #12]
    92e0:	781b      	ldrb	r3, [r3, #0]
    92e2:	2b00      	cmp	r3, #0
    92e4:	d132      	bne.n	934c <m2m_wifi_state+0xa0>
			printf("m2m_wifi_state: M2M_WIFI_RESP_CON_STATE_CHANGED: DISCONNECTED\r\n");
    92e6:	4b1e      	ldr	r3, [pc, #120]	; (9360 <m2m_wifi_state+0xb4>)
    92e8:	0018      	movs	r0, r3
    92ea:	4b1c      	ldr	r3, [pc, #112]	; (935c <m2m_wifi_state+0xb0>)
    92ec:	4798      	blx	r3
			if (WifiStateConnected == gWifiState) {
    92ee:	4b1d      	ldr	r3, [pc, #116]	; (9364 <m2m_wifi_state+0xb8>)
    92f0:	781b      	ldrb	r3, [r3, #0]
    92f2:	b2db      	uxtb	r3, r3
    92f4:	2b03      	cmp	r3, #3
    92f6:	d129      	bne.n	934c <m2m_wifi_state+0xa0>
				gWifiState = WifiStateDisConnected;
    92f8:	4b1a      	ldr	r3, [pc, #104]	; (9364 <m2m_wifi_state+0xb8>)
    92fa:	2204      	movs	r2, #4
    92fc:	701a      	strb	r2, [r3, #0]
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
    92fe:	4a1a      	ldr	r2, [pc, #104]	; (9368 <m2m_wifi_state+0xbc>)
    9300:	481a      	ldr	r0, [pc, #104]	; (936c <m2m_wifi_state+0xc0>)
    9302:	23ff      	movs	r3, #255	; 0xff
    9304:	9300      	str	r3, [sp, #0]
    9306:	0013      	movs	r3, r2
    9308:	2202      	movs	r2, #2
    930a:	211b      	movs	r1, #27
    930c:	4c18      	ldr	r4, [pc, #96]	; (9370 <m2m_wifi_state+0xc4>)
    930e:	47a0      	blx	r4
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    9310:	e01c      	b.n	934c <m2m_wifi_state+0xa0>
	}

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
    9312:	683b      	ldr	r3, [r7, #0]
    9314:	60bb      	str	r3, [r7, #8]
		gu32connectEndTime = gu32MsTicks;
    9316:	4b17      	ldr	r3, [pc, #92]	; (9374 <m2m_wifi_state+0xc8>)
    9318:	681a      	ldr	r2, [r3, #0]
    931a:	4b17      	ldr	r3, [pc, #92]	; (9378 <m2m_wifi_state+0xcc>)
    931c:	601a      	str	r2, [r3, #0]
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    931e:	68bb      	ldr	r3, [r7, #8]
    9320:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    9322:	0019      	movs	r1, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    9324:	68bb      	ldr	r3, [r7, #8]
    9326:	3301      	adds	r3, #1
    9328:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    932a:	001a      	movs	r2, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    932c:	68bb      	ldr	r3, [r7, #8]
    932e:	3302      	adds	r3, #2
    9330:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    9332:	001c      	movs	r4, r3
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
    9334:	68bb      	ldr	r3, [r7, #8]
    9336:	3303      	adds	r3, #3
    9338:	781b      	ldrb	r3, [r3, #0]

	case M2M_WIFI_REQ_DHCP_CONF:
	{
		uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
		gu32connectEndTime = gu32MsTicks;
		printf("m2m_wifi_state: M2M_WIFI_REQ_DHCP_CONF: IP is %u.%u.%u.%u\r\n",
    933a:	4810      	ldr	r0, [pc, #64]	; (937c <m2m_wifi_state+0xd0>)
    933c:	9300      	str	r3, [sp, #0]
    933e:	0023      	movs	r3, r4
    9340:	4c0f      	ldr	r4, [pc, #60]	; (9380 <m2m_wifi_state+0xd4>)
    9342:	47a0      	blx	r4
				pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
		gWifiState = WifiStateConnected;
    9344:	4b07      	ldr	r3, [pc, #28]	; (9364 <m2m_wifi_state+0xb8>)
    9346:	2203      	movs	r2, #3
    9348:	701a      	strb	r2, [r3, #0]

		break;
    934a:	e000      	b.n	934e <m2m_wifi_state+0xa2>
				m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
						MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
			}
		}

		break;
    934c:	46c0      	nop			; (mov r8, r8)
	default:
	{
		break;
	}
	}
}
    934e:	46c0      	nop			; (mov r8, r8)
    9350:	46bd      	mov	sp, r7
    9352:	b005      	add	sp, #20
    9354:	bd90      	pop	{r4, r7, pc}
    9356:	46c0      	nop			; (mov r8, r8)
    9358:	0000deac 	.word	0x0000deac
    935c:	0000c1f1 	.word	0x0000c1f1
    9360:	0000dee8 	.word	0x0000dee8
    9364:	20003ce8 	.word	0x20003ce8
    9368:	0000df28 	.word	0x0000df28
    936c:	0000df34 	.word	0x0000df34
    9370:	0000156d 	.word	0x0000156d
    9374:	20003cec 	.word	0x20003cec
    9378:	20003cfc 	.word	0x20003cfc
    937c:	0000df50 	.word	0x0000df50
    9380:	0000c0d1 	.word	0x0000c0d1

00009384 <task_3s>:
	adc_enable(&adc_instance);
}


static void task_3s(void *args)
{
    9384:	b5f0      	push	{r4, r5, r6, r7, lr}
    9386:	b0cd      	sub	sp, #308	; 0x134
    9388:	af04      	add	r7, sp, #16
    938a:	6078      	str	r0, [r7, #4]
    double temperature = 0;
    938c:	2300      	movs	r3, #0
    938e:	2400      	movs	r4, #0
    9390:	228c      	movs	r2, #140	; 0x8c
    9392:	0052      	lsls	r2, r2, #1
    9394:	18ba      	adds	r2, r7, r2
    9396:	6013      	str	r3, [r2, #0]
    9398:	6054      	str	r4, [r2, #4]
    uint16_t light = 0;
    939a:	2389      	movs	r3, #137	; 0x89
    939c:	005b      	lsls	r3, r3, #1
    939e:	18fb      	adds	r3, r7, r3
    93a0:	2200      	movs	r2, #0
    93a2:	801a      	strh	r2, [r3, #0]
    char buf[256] = {0};
    93a4:	4b4f      	ldr	r3, [pc, #316]	; (94e4 <task_3s+0x160>)
    93a6:	2290      	movs	r2, #144	; 0x90
    93a8:	0052      	lsls	r2, r2, #1
    93aa:	4694      	mov	ip, r2
    93ac:	44bc      	add	ip, r7
    93ae:	4463      	add	r3, ip
    93b0:	0018      	movs	r0, r3
    93b2:	2380      	movs	r3, #128	; 0x80
    93b4:	005b      	lsls	r3, r3, #1
    93b6:	001a      	movs	r2, r3
    93b8:	2100      	movs	r1, #0
    93ba:	4b4b      	ldr	r3, [pc, #300]	; (94e8 <task_3s+0x164>)
    93bc:	4798      	blx	r3
    TickType_t lastTimer;
    TickType_t delay_time = pdMS_TO_TICKS(3000);
    93be:	4b4b      	ldr	r3, [pc, #300]	; (94ec <task_3s+0x168>)
    93c0:	228a      	movs	r2, #138	; 0x8a
    93c2:	0052      	lsls	r2, r2, #1
    93c4:	18ba      	adds	r2, r7, r2
    93c6:	6013      	str	r3, [r2, #0]

    lastTimer = xTaskGetTickCount();
    93c8:	4b49      	ldr	r3, [pc, #292]	; (94f0 <task_3s+0x16c>)
    93ca:	4798      	blx	r3
    93cc:	0003      	movs	r3, r0
    93ce:	60fb      	str	r3, [r7, #12]
    for ( ;; )
    {
        vTaskDelayUntil(&lastTimer, delay_time);
    93d0:	238a      	movs	r3, #138	; 0x8a
    93d2:	005b      	lsls	r3, r3, #1
    93d4:	18fb      	adds	r3, r7, r3
    93d6:	681a      	ldr	r2, [r3, #0]
    93d8:	230c      	movs	r3, #12
    93da:	18fb      	adds	r3, r7, r3
    93dc:	0011      	movs	r1, r2
    93de:	0018      	movs	r0, r3
    93e0:	4b44      	ldr	r3, [pc, #272]	; (94f4 <task_3s+0x170>)
    93e2:	4798      	blx	r3

        if (gWifiState == WifiStateConnected) {
    93e4:	4b44      	ldr	r3, [pc, #272]	; (94f8 <task_3s+0x174>)
    93e6:	781b      	ldrb	r3, [r3, #0]
    93e8:	b2db      	uxtb	r3, r3
    93ea:	2b03      	cmp	r3, #3
    93ec:	d1f0      	bne.n	93d0 <task_3s+0x4c>
            gu32publishDelay = gu32MsTicks;
    93ee:	4b43      	ldr	r3, [pc, #268]	; (94fc <task_3s+0x178>)
    93f0:	681a      	ldr	r2, [r3, #0]
    93f2:	4b43      	ldr	r3, [pc, #268]	; (9500 <task_3s+0x17c>)
    93f4:	601a      	str	r2, [r3, #0]
            adc_start_conversion(&adc_instance);            
    93f6:	4b43      	ldr	r3, [pc, #268]	; (9504 <task_3s+0x180>)
    93f8:	0018      	movs	r0, r3
    93fa:	4b43      	ldr	r3, [pc, #268]	; (9508 <task_3s+0x184>)
    93fc:	4798      	blx	r3
            temperature = 0;
    93fe:	2300      	movs	r3, #0
    9400:	2400      	movs	r4, #0
    9402:	228c      	movs	r2, #140	; 0x8c
    9404:	0052      	lsls	r2, r2, #1
    9406:	18ba      	adds	r2, r7, r2
    9408:	6013      	str	r3, [r2, #0]
    940a:	6054      	str	r4, [r2, #4]
            adc_read(&adc_instance, &light);
    940c:	2389      	movs	r3, #137	; 0x89
    940e:	005b      	lsls	r3, r3, #1
    9410:	18fa      	adds	r2, r7, r3
    9412:	4b3c      	ldr	r3, [pc, #240]	; (9504 <task_3s+0x180>)
    9414:	0011      	movs	r1, r2
    9416:	0018      	movs	r0, r3
    9418:	4b3c      	ldr	r3, [pc, #240]	; (950c <task_3s+0x188>)
    941a:	4798      	blx	r3
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    941c:	4b3c      	ldr	r3, [pc, #240]	; (9510 <task_3s+0x18c>)
    941e:	228c      	movs	r2, #140	; 0x8c
    9420:	0052      	lsls	r2, r2, #1
    9422:	18ba      	adds	r2, r7, r2
    9424:	6810      	ldr	r0, [r2, #0]
    9426:	6851      	ldr	r1, [r2, #4]
    9428:	4798      	blx	r3
    942a:	0006      	movs	r6, r0
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
    942c:	4c39      	ldr	r4, [pc, #228]	; (9514 <task_3s+0x190>)
    942e:	2200      	movs	r2, #0
    9430:	4b39      	ldr	r3, [pc, #228]	; (9518 <task_3s+0x194>)
    9432:	218c      	movs	r1, #140	; 0x8c
    9434:	0049      	lsls	r1, r1, #1
    9436:	1879      	adds	r1, r7, r1
    9438:	6808      	ldr	r0, [r1, #0]
    943a:	6849      	ldr	r1, [r1, #4]
    943c:	47a0      	blx	r4
    943e:	0003      	movs	r3, r0
    9440:	000c      	movs	r4, r1
    9442:	0019      	movs	r1, r3
    9444:	0022      	movs	r2, r4
    9446:	4b32      	ldr	r3, [pc, #200]	; (9510 <task_3s+0x18c>)
    9448:	0008      	movs	r0, r1
    944a:	0011      	movs	r1, r2
    944c:	4798      	blx	r3
    944e:	0002      	movs	r2, r0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);            
            temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    9450:	4b32      	ldr	r3, [pc, #200]	; (951c <task_3s+0x198>)
    9452:	2164      	movs	r1, #100	; 0x64
    9454:	0010      	movs	r0, r2
    9456:	4798      	blx	r3
    9458:	000b      	movs	r3, r1
    945a:	001c      	movs	r4, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
    945c:	2389      	movs	r3, #137	; 0x89
    945e:	005b      	lsls	r3, r3, #1
    9460:	18fb      	adds	r3, r7, r3
    9462:	881b      	ldrh	r3, [r3, #0]
    9464:	001a      	movs	r2, r3
    9466:	2380      	movs	r3, #128	; 0x80
    9468:	015b      	lsls	r3, r3, #5
    946a:	1a9b      	subs	r3, r3, r2
    946c:	2264      	movs	r2, #100	; 0x64
    946e:	4353      	muls	r3, r2
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);            
            temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    9470:	2b00      	cmp	r3, #0
    9472:	da02      	bge.n	947a <task_3s+0xf6>
    9474:	4a2a      	ldr	r2, [pc, #168]	; (9520 <task_3s+0x19c>)
    9476:	4694      	mov	ip, r2
    9478:	4463      	add	r3, ip
    947a:	131b      	asrs	r3, r3, #12
    947c:	001d      	movs	r5, r3
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
    947e:	2017      	movs	r0, #23
    9480:	4b28      	ldr	r3, [pc, #160]	; (9524 <task_3s+0x1a0>)
    9482:	4798      	blx	r3
    9484:	1e03      	subs	r3, r0, #0
        if (gWifiState == WifiStateConnected) {
            gu32publishDelay = gu32MsTicks;
            adc_start_conversion(&adc_instance);            
            temperature = 0;
            adc_read(&adc_instance, &light);
            sprintf(buf, "{\"device\":\"%s\", \"temperature\":\"%d.%d\", \"light\":\"%d\", \"led\":\"%s\"}",
    9486:	d001      	beq.n	948c <task_3s+0x108>
    9488:	4b27      	ldr	r3, [pc, #156]	; (9528 <task_3s+0x1a4>)
    948a:	e000      	b.n	948e <task_3s+0x10a>
    948c:	4b27      	ldr	r3, [pc, #156]	; (952c <task_3s+0x1a8>)
    948e:	4a28      	ldr	r2, [pc, #160]	; (9530 <task_3s+0x1ac>)
    9490:	4928      	ldr	r1, [pc, #160]	; (9534 <task_3s+0x1b0>)
    9492:	2010      	movs	r0, #16
    9494:	1838      	adds	r0, r7, r0
    9496:	9302      	str	r3, [sp, #8]
    9498:	9501      	str	r5, [sp, #4]
    949a:	9400      	str	r4, [sp, #0]
    949c:	0033      	movs	r3, r6
    949e:	4c26      	ldr	r4, [pc, #152]	; (9538 <task_3s+0x1b4>)
    94a0:	47a0      	blx	r4
            PubNubChannel,
            (int)temperature, (int)((int)(temperature * 100) % 100),
            (((4096 - light) * 100) / 4096),
            port_pin_get_output_level(LED0_PIN) ? "0" : "1");
            printf("main: publish event: {%s}\r\n", buf);
    94a2:	2310      	movs	r3, #16
    94a4:	18fa      	adds	r2, r7, r3
    94a6:	4b25      	ldr	r3, [pc, #148]	; (953c <task_3s+0x1b8>)
    94a8:	0011      	movs	r1, r2
    94aa:	0018      	movs	r0, r3
    94ac:	4b24      	ldr	r3, [pc, #144]	; (9540 <task_3s+0x1bc>)
    94ae:	4798      	blx	r3
            close(pPubNubCfg->tcp_socket);
    94b0:	4b24      	ldr	r3, [pc, #144]	; (9544 <task_3s+0x1c0>)
    94b2:	681b      	ldr	r3, [r3, #0]
    94b4:	2253      	movs	r2, #83	; 0x53
    94b6:	569b      	ldrsb	r3, [r3, r2]
    94b8:	0018      	movs	r0, r3
    94ba:	4b23      	ldr	r3, [pc, #140]	; (9548 <task_3s+0x1c4>)
    94bc:	4798      	blx	r3
            pPubNubCfg->state = PS_IDLE;
    94be:	4b21      	ldr	r3, [pc, #132]	; (9544 <task_3s+0x1c0>)
    94c0:	681b      	ldr	r3, [r3, #0]
    94c2:	2252      	movs	r2, #82	; 0x52
    94c4:	2100      	movs	r1, #0
    94c6:	5499      	strb	r1, [r3, r2]
            pPubNubCfg->last_result = PNR_IO_ERROR;
    94c8:	4b1e      	ldr	r3, [pc, #120]	; (9544 <task_3s+0x1c0>)
    94ca:	681b      	ldr	r3, [r3, #0]
    94cc:	2250      	movs	r2, #80	; 0x50
    94ce:	2102      	movs	r1, #2
    94d0:	5499      	strb	r1, [r3, r2]
            pubnub_publish(pPubNubCfg, PubNubChannel, buf);            
    94d2:	4b1c      	ldr	r3, [pc, #112]	; (9544 <task_3s+0x1c0>)
    94d4:	681b      	ldr	r3, [r3, #0]
    94d6:	2210      	movs	r2, #16
    94d8:	18ba      	adds	r2, r7, r2
    94da:	4915      	ldr	r1, [pc, #84]	; (9530 <task_3s+0x1ac>)
    94dc:	0018      	movs	r0, r3
    94de:	4b1b      	ldr	r3, [pc, #108]	; (954c <task_3s+0x1c8>)
    94e0:	4798      	blx	r3
        }        
    }
    94e2:	e775      	b.n	93d0 <task_3s+0x4c>
    94e4:	fffffef0 	.word	0xfffffef0
    94e8:	0000bb1b 	.word	0x0000bb1b
    94ec:	00000bb8 	.word	0x00000bb8
    94f0:	00008165 	.word	0x00008165
    94f4:	00007ec9 	.word	0x00007ec9
    94f8:	20003ce8 	.word	0x20003ce8
    94fc:	20003cec 	.word	0x20003cec
    9500:	20003cf0 	.word	0x20003cf0
    9504:	200045e8 	.word	0x200045e8
    9508:	0000912d 	.word	0x0000912d
    950c:	00009175 	.word	0x00009175
    9510:	0000b945 	.word	0x0000b945
    9514:	0000ada9 	.word	0x0000ada9
    9518:	40590000 	.word	0x40590000
    951c:	0000a119 	.word	0x0000a119
    9520:	00000fff 	.word	0x00000fff
    9524:	00009215 	.word	0x00009215
    9528:	0000df8c 	.word	0x0000df8c
    952c:	0000df90 	.word	0x0000df90
    9530:	2000001c 	.word	0x2000001c
    9534:	0000df94 	.word	0x0000df94
    9538:	0000c269 	.word	0x0000c269
    953c:	0000dfd8 	.word	0x0000dfd8
    9540:	0000c0d1 	.word	0x0000c0d1
    9544:	20003d00 	.word	0x20003d00
    9548:	0000338d 	.word	0x0000338d
    954c:	00009a19 	.word	0x00009a19

00009550 <task_1s>:
}

static void task_1s(void *args)
{
    9550:	b580      	push	{r7, lr}
    9552:	b086      	sub	sp, #24
    9554:	af00      	add	r7, sp, #0
    9556:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    9558:	4b45      	ldr	r3, [pc, #276]	; (9670 <task_1s+0x120>)
    955a:	4798      	blx	r3
    955c:	0003      	movs	r3, r0
    955e:	60fb      	str	r3, [r7, #12]
    TickType_t delay_time = pdMS_TO_TICKS(1000);
    9560:	23fa      	movs	r3, #250	; 0xfa
    9562:	009b      	lsls	r3, r3, #2
    9564:	617b      	str	r3, [r7, #20]

    while (1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    9566:	697a      	ldr	r2, [r7, #20]
    9568:	230c      	movs	r3, #12
    956a:	18fb      	adds	r3, r7, r3
    956c:	0011      	movs	r1, r2
    956e:	0018      	movs	r0, r3
    9570:	4b40      	ldr	r3, [pc, #256]	; (9674 <task_1s+0x124>)
    9572:	4798      	blx	r3

        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
    9574:	4b40      	ldr	r3, [pc, #256]	; (9678 <task_1s+0x128>)
    9576:	781b      	ldrb	r3, [r3, #0]
    9578:	b2db      	uxtb	r3, r3
    957a:	2b03      	cmp	r3, #3
    957c:	d1f3      	bne.n	9566 <task_1s+0x16>
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
    957e:	4b3f      	ldr	r3, [pc, #252]	; (967c <task_1s+0x12c>)
    9580:	681b      	ldr	r3, [r3, #0]
    9582:	2252      	movs	r2, #82	; 0x52
    9584:	5c9b      	ldrb	r3, [r3, r2]
    9586:	2b00      	cmp	r3, #0
    9588:	d1ed      	bne.n	9566 <task_1s+0x16>
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    958a:	4b3c      	ldr	r3, [pc, #240]	; (967c <task_1s+0x12c>)
    958c:	681b      	ldr	r3, [r3, #0]
    958e:	2251      	movs	r2, #81	; 0x51
    9590:	5c9b      	ldrb	r3, [r3, r2]
    9592:	2b00      	cmp	r3, #0
    9594:	d00b      	beq.n	95ae <task_1s+0x5e>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    9596:	4b39      	ldr	r3, [pc, #228]	; (967c <task_1s+0x12c>)
    9598:	681b      	ldr	r3, [r3, #0]
    959a:	2251      	movs	r2, #81	; 0x51
    959c:	5c9b      	ldrb	r3, [r3, r2]
        /* Device is connected to AP. */
        if (gWifiState == WifiStateConnected) {
            /* PubNub: read event from the cloud. */
            if (pPubNubCfg->state == PS_IDLE) {
                /* Subscribe at the beginning and re-subscribe after every publish. */
                if ((pPubNubCfg->trans == PBTT_NONE) ||
    959e:	2b02      	cmp	r3, #2
    95a0:	d110      	bne.n	95c4 <task_1s+0x74>
                (pPubNubCfg->trans == PBTT_PUBLISH && pPubNubCfg->last_result == PNR_OK)) {
    95a2:	4b36      	ldr	r3, [pc, #216]	; (967c <task_1s+0x12c>)
    95a4:	681b      	ldr	r3, [r3, #0]
    95a6:	2250      	movs	r2, #80	; 0x50
    95a8:	5c9b      	ldrb	r3, [r3, r2]
    95aa:	2b00      	cmp	r3, #0
    95ac:	d10a      	bne.n	95c4 <task_1s+0x74>
                    printf("main: subscribe event, PNR_OK\r\n");
    95ae:	4b34      	ldr	r3, [pc, #208]	; (9680 <task_1s+0x130>)
    95b0:	0018      	movs	r0, r3
    95b2:	4b34      	ldr	r3, [pc, #208]	; (9684 <task_1s+0x134>)
    95b4:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    95b6:	4b31      	ldr	r3, [pc, #196]	; (967c <task_1s+0x12c>)
    95b8:	681b      	ldr	r3, [r3, #0]
    95ba:	4a33      	ldr	r2, [pc, #204]	; (9688 <task_1s+0x138>)
    95bc:	0011      	movs	r1, r2
    95be:	0018      	movs	r0, r3
    95c0:	4b32      	ldr	r3, [pc, #200]	; (968c <task_1s+0x13c>)
    95c2:	4798      	blx	r3
                }

                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
    95c4:	4b2d      	ldr	r3, [pc, #180]	; (967c <task_1s+0x12c>)
    95c6:	681b      	ldr	r3, [r3, #0]
    95c8:	0018      	movs	r0, r3
    95ca:	4b31      	ldr	r3, [pc, #196]	; (9690 <task_1s+0x140>)
    95cc:	4798      	blx	r3
    95ce:	0003      	movs	r3, r0
    95d0:	613b      	str	r3, [r7, #16]
                    if (NULL == msg) {
    95d2:	693b      	ldr	r3, [r7, #16]
    95d4:	2b00      	cmp	r3, #0
    95d6:	d031      	beq.n	963c <task_1s+0xec>
                        /* No more message to process. */
                        break;
                    }

                    if (0 == (strncmp(&msg[2], "led", strlen("led")))) {
    95d8:	693b      	ldr	r3, [r7, #16]
    95da:	3302      	adds	r3, #2
    95dc:	492d      	ldr	r1, [pc, #180]	; (9694 <task_1s+0x144>)
    95de:	2203      	movs	r2, #3
    95e0:	0018      	movs	r0, r3
    95e2:	4b2d      	ldr	r3, [pc, #180]	; (9698 <task_1s+0x148>)
    95e4:	4798      	blx	r3
    95e6:	1e03      	subs	r3, r0, #0
    95e8:	d121      	bne.n	962e <task_1s+0xde>
                        /* LED control message. */
                        printf("main: received LED control message: %s\r\n", msg);
    95ea:	693a      	ldr	r2, [r7, #16]
    95ec:	4b2b      	ldr	r3, [pc, #172]	; (969c <task_1s+0x14c>)
    95ee:	0011      	movs	r1, r2
    95f0:	0018      	movs	r0, r3
    95f2:	4b2b      	ldr	r3, [pc, #172]	; (96a0 <task_1s+0x150>)
    95f4:	4798      	blx	r3
                        if (0 == (strncmp(&msg[8], "on", strlen("on")))) {
    95f6:	693b      	ldr	r3, [r7, #16]
    95f8:	3308      	adds	r3, #8
    95fa:	492a      	ldr	r1, [pc, #168]	; (96a4 <task_1s+0x154>)
    95fc:	2202      	movs	r2, #2
    95fe:	0018      	movs	r0, r3
    9600:	4b25      	ldr	r3, [pc, #148]	; (9698 <task_1s+0x148>)
    9602:	4798      	blx	r3
    9604:	1e03      	subs	r3, r0, #0
    9606:	d104      	bne.n	9612 <task_1s+0xc2>
                            port_pin_set_output_level(LED0_PIN, LED0_ACTIVE);
    9608:	2100      	movs	r1, #0
    960a:	2017      	movs	r0, #23
    960c:	4b26      	ldr	r3, [pc, #152]	; (96a8 <task_1s+0x158>)
    960e:	4798      	blx	r3
    9610:	e7d8      	b.n	95c4 <task_1s+0x74>
                            } else if (0 == (strncmp(&msg[8], "off", strlen("off")))) {
    9612:	693b      	ldr	r3, [r7, #16]
    9614:	3308      	adds	r3, #8
    9616:	4925      	ldr	r1, [pc, #148]	; (96ac <task_1s+0x15c>)
    9618:	2203      	movs	r2, #3
    961a:	0018      	movs	r0, r3
    961c:	4b1e      	ldr	r3, [pc, #120]	; (9698 <task_1s+0x148>)
    961e:	4798      	blx	r3
    9620:	1e03      	subs	r3, r0, #0
    9622:	d1cf      	bne.n	95c4 <task_1s+0x74>
                            port_pin_set_output_level(LED0_PIN, LED0_INACTIVE);
    9624:	2101      	movs	r1, #1
    9626:	2017      	movs	r0, #23
    9628:	4b1f      	ldr	r3, [pc, #124]	; (96a8 <task_1s+0x158>)
    962a:	4798      	blx	r3
    962c:	e7ca      	b.n	95c4 <task_1s+0x74>
                        }
                        } else {
                        /* Any other type of JSON message. */
                        printf("main: received message: %s\r\n", msg);
    962e:	693a      	ldr	r2, [r7, #16]
    9630:	4b1f      	ldr	r3, [pc, #124]	; (96b0 <task_1s+0x160>)
    9632:	0011      	movs	r1, r2
    9634:	0018      	movs	r0, r3
    9636:	4b1a      	ldr	r3, [pc, #104]	; (96a0 <task_1s+0x150>)
    9638:	4798      	blx	r3
                    }
                }
    963a:	e7c3      	b.n	95c4 <task_1s+0x74>
                /* Process any received messages from the channel we subscribed. */
                while (1) {
                    char const *msg = pubnub_get(pPubNubCfg);
                    if (NULL == msg) {
                        /* No more message to process. */
                        break;
    963c:	46c0      	nop			; (mov r8, r8)
                        printf("main: received message: %s\r\n", msg);
                    }
                }

                /* Subscribe to receive pending messages. */
                if (gu32MsTicks - gu32subscribeDelay > MAIN_PUBNUB_SUBSCRIBE_INTERVAL) {
    963e:	4b1d      	ldr	r3, [pc, #116]	; (96b4 <task_1s+0x164>)
    9640:	681a      	ldr	r2, [r3, #0]
    9642:	4b1d      	ldr	r3, [pc, #116]	; (96b8 <task_1s+0x168>)
    9644:	681b      	ldr	r3, [r3, #0]
    9646:	1ad2      	subs	r2, r2, r3
    9648:	23fa      	movs	r3, #250	; 0xfa
    964a:	009b      	lsls	r3, r3, #2
    964c:	429a      	cmp	r2, r3
    964e:	d98a      	bls.n	9566 <task_1s+0x16>
                    gu32subscribeDelay = gu32MsTicks;
    9650:	4b18      	ldr	r3, [pc, #96]	; (96b4 <task_1s+0x164>)
    9652:	681a      	ldr	r2, [r3, #0]
    9654:	4b18      	ldr	r3, [pc, #96]	; (96b8 <task_1s+0x168>)
    9656:	601a      	str	r2, [r3, #0]
                    printf("main: subscribe event, interval.\r\n");
    9658:	4b18      	ldr	r3, [pc, #96]	; (96bc <task_1s+0x16c>)
    965a:	0018      	movs	r0, r3
    965c:	4b09      	ldr	r3, [pc, #36]	; (9684 <task_1s+0x134>)
    965e:	4798      	blx	r3
                    pubnub_subscribe(pPubNubCfg, PubNubChannel);
    9660:	4b06      	ldr	r3, [pc, #24]	; (967c <task_1s+0x12c>)
    9662:	681b      	ldr	r3, [r3, #0]
    9664:	4a08      	ldr	r2, [pc, #32]	; (9688 <task_1s+0x138>)
    9666:	0011      	movs	r1, r2
    9668:	0018      	movs	r0, r3
    966a:	4b08      	ldr	r3, [pc, #32]	; (968c <task_1s+0x13c>)
    966c:	4798      	blx	r3
                }
            }
        }        
    }
    966e:	e77a      	b.n	9566 <task_1s+0x16>
    9670:	00008165 	.word	0x00008165
    9674:	00007ec9 	.word	0x00007ec9
    9678:	20003ce8 	.word	0x20003ce8
    967c:	20003d00 	.word	0x20003d00
    9680:	0000dff4 	.word	0x0000dff4
    9684:	0000c1f1 	.word	0x0000c1f1
    9688:	2000001c 	.word	0x2000001c
    968c:	00009c11 	.word	0x00009c11
    9690:	00009d8d 	.word	0x00009d8d
    9694:	0000e014 	.word	0x0000e014
    9698:	0000c2bb 	.word	0x0000c2bb
    969c:	0000e018 	.word	0x0000e018
    96a0:	0000c0d1 	.word	0x0000c0d1
    96a4:	0000e044 	.word	0x0000e044
    96a8:	00009259 	.word	0x00009259
    96ac:	0000e048 	.word	0x0000e048
    96b0:	0000e04c 	.word	0x0000e04c
    96b4:	20003cec 	.word	0x20003cec
    96b8:	20003cf4 	.word	0x20003cf4
    96bc:	0000e06c 	.word	0x0000e06c

000096c0 <task_50Hz>:

}

static void task_50Hz(void *args)
{
    96c0:	b580      	push	{r7, lr}
    96c2:	b084      	sub	sp, #16
    96c4:	af00      	add	r7, sp, #0
    96c6:	6078      	str	r0, [r7, #4]
    TickType_t lastTimer;

    lastTimer = xTaskGetTickCount();
    96c8:	4b06      	ldr	r3, [pc, #24]	; (96e4 <task_50Hz+0x24>)
    96ca:	4798      	blx	r3
    96cc:	0003      	movs	r3, r0
    96ce:	60bb      	str	r3, [r7, #8]
    TickType_t delay_time = pdMS_TO_TICKS(20);    
    96d0:	2314      	movs	r3, #20
    96d2:	60fb      	str	r3, [r7, #12]

    while(1) {
        vTaskDelayUntil(&lastTimer, delay_time);
    96d4:	68fa      	ldr	r2, [r7, #12]
    96d6:	2308      	movs	r3, #8
    96d8:	18fb      	adds	r3, r7, r3
    96da:	0011      	movs	r1, r2
    96dc:	0018      	movs	r0, r3
    96de:	4b02      	ldr	r3, [pc, #8]	; (96e8 <task_50Hz+0x28>)
    96e0:	4798      	blx	r3


    }
    96e2:	e7f7      	b.n	96d4 <task_50Hz+0x14>
    96e4:	00008165 	.word	0x00008165
    96e8:	00007ec9 	.word	0x00007ec9

000096ec <vApplicationIdleHook>:
}

void vApplicationIdleHook(void);
void vApplicationIdleHook(void)
{
    96ec:	b580      	push	{r7, lr}
    96ee:	af00      	add	r7, sp, #0
   
   // NOTE: NO BLOCKING FUNCTIONS MAY GO IN THE IDLE HOOK
   m2m_wifi_handle_events(NULL);
    96f0:	2000      	movs	r0, #0
    96f2:	4b02      	ldr	r3, [pc, #8]	; (96fc <vApplicationIdleHook+0x10>)
    96f4:	4798      	blx	r3

}
    96f6:	46c0      	nop			; (mov r8, r8)
    96f8:	46bd      	mov	sp, r7
    96fa:	bd80      	pop	{r7, pc}
    96fc:	00001551 	.word	0x00001551

00009700 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName )
{
    9700:	b580      	push	{r7, lr}
    9702:	b082      	sub	sp, #8
    9704:	af00      	add	r7, sp, #0
    9706:	6078      	str	r0, [r7, #4]
    9708:	6039      	str	r1, [r7, #0]
    printf("Stack overflow!: %s\n\r", pcTaskName);
    970a:	683a      	ldr	r2, [r7, #0]
    970c:	4b02      	ldr	r3, [pc, #8]	; (9718 <vApplicationStackOverflowHook+0x18>)
    970e:	0011      	movs	r1, r2
    9710:	0018      	movs	r0, r3
    9712:	4b02      	ldr	r3, [pc, #8]	; (971c <vApplicationStackOverflowHook+0x1c>)
    9714:	4798      	blx	r3
    while (1) {}
    9716:	e7fe      	b.n	9716 <vApplicationStackOverflowHook+0x16>
    9718:	0000e090 	.word	0x0000e090
    971c:	0000c0d1 	.word	0x0000c0d1

00009720 <main>:
 * Publish and subscribe event to pubnub.
 *
 * \return program return value.
 */
int main(void)
{
    9720:	b590      	push	{r4, r7, lr}
    9722:	b091      	sub	sp, #68	; 0x44
    9724:	af02      	add	r7, sp, #8
	int8_t s8InitStatus;
	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;	

	/* Initialize the board. */
	system_init();
    9726:	4b30      	ldr	r3, [pc, #192]	; (97e8 <main+0xc8>)
    9728:	4798      	blx	r3

	/* Output example information. */
	//printf(STRING_HEADER);

	/* Initialize the delay driver. */
	delay_init();
    972a:	4b30      	ldr	r3, [pc, #192]	; (97ec <main+0xcc>)
    972c:	4798      	blx	r3

	/* Initialize the Wi-Fi BSP. */
	//nm_bsp_init();

	/* Initialize Wi-Fi parameters structure. */
	memset((uint8_t *)&wifiInitParam, 0, sizeof(tstrWifiInitParam));
    972e:	231c      	movs	r3, #28
    9730:	18fb      	adds	r3, r7, r3
    9732:	2218      	movs	r2, #24
    9734:	2100      	movs	r1, #0
    9736:	0018      	movs	r0, r3
    9738:	4b2d      	ldr	r3, [pc, #180]	; (97f0 <main+0xd0>)
    973a:	4798      	blx	r3
	wifiInitParam.pfAppWifiCb = m2m_wifi_state;
    973c:	231c      	movs	r3, #28
    973e:	18fb      	adds	r3, r7, r3
    9740:	4a2c      	ldr	r2, [pc, #176]	; (97f4 <main+0xd4>)
    9742:	601a      	str	r2, [r3, #0]

    gu32connectStartTime = gu32MsTicks;
    9744:	4b2c      	ldr	r3, [pc, #176]	; (97f8 <main+0xd8>)
    9746:	681a      	ldr	r2, [r3, #0]
    9748:	4b2c      	ldr	r3, [pc, #176]	; (97fc <main+0xdc>)
    974a:	601a      	str	r2, [r3, #0]
	///* Connect to AP using Wi-Fi settings from main.h. */
	//printf("main: Wi-Fi connecting to AP using hardcoded credentials...\r\n");
	//m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
			//MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);

    tm1640_init();
    974c:	4b2c      	ldr	r3, [pc, #176]	; (9800 <main+0xe0>)
    974e:	4798      	blx	r3
    tm1640_display_t disp;
    disp.grid[0] = SEG_0;
    9750:	1d3b      	adds	r3, r7, #4
    9752:	221f      	movs	r2, #31
    9754:	701a      	strb	r2, [r3, #0]
    disp.grid[1] = SEG_1;
    9756:	1d3b      	adds	r3, r7, #4
    9758:	2206      	movs	r2, #6
    975a:	705a      	strb	r2, [r3, #1]
    disp.grid[2] = SEG_2;
    975c:	1d3b      	adds	r3, r7, #4
    975e:	225b      	movs	r2, #91	; 0x5b
    9760:	709a      	strb	r2, [r3, #2]
    disp.grid[3] = SEG_3;
    9762:	1d3b      	adds	r3, r7, #4
    9764:	224f      	movs	r2, #79	; 0x4f
    9766:	70da      	strb	r2, [r3, #3]
    disp.grid[4] = SEG_4;
    9768:	1d3b      	adds	r3, r7, #4
    976a:	2266      	movs	r2, #102	; 0x66
    976c:	711a      	strb	r2, [r3, #4]
    disp.grid[5] = SEG_5;
    976e:	1d3b      	adds	r3, r7, #4
    9770:	226d      	movs	r2, #109	; 0x6d
    9772:	715a      	strb	r2, [r3, #5]
    disp.grid[6] = SEG_6;
    9774:	1d3b      	adds	r3, r7, #4
    9776:	227d      	movs	r2, #125	; 0x7d
    9778:	719a      	strb	r2, [r3, #6]
    disp.grid[7] = SEG_7;
    977a:	1d3b      	adds	r3, r7, #4
    977c:	2207      	movs	r2, #7
    977e:	71da      	strb	r2, [r3, #7]
    enum status_code ret = tm1640_set_display(&disp, BRIGHT_5);
    9780:	2337      	movs	r3, #55	; 0x37
    9782:	18fc      	adds	r4, r7, r3
    9784:	1d3b      	adds	r3, r7, #4
    9786:	218d      	movs	r1, #141	; 0x8d
    9788:	0018      	movs	r0, r3
    978a:	4b1e      	ldr	r3, [pc, #120]	; (9804 <main+0xe4>)
    978c:	4798      	blx	r3
    978e:	0003      	movs	r3, r0
    9790:	7023      	strb	r3, [r4, #0]

    wtc6508_init();
    9792:	4b1d      	ldr	r3, [pc, #116]	; (9808 <main+0xe8>)
    9794:	4798      	blx	r3
    uint8_t status;
    wtc6508_read(&status);
    9796:	1cfb      	adds	r3, r7, #3
    9798:	0018      	movs	r0, r3
    979a:	4b1c      	ldr	r3, [pc, #112]	; (980c <main+0xec>)
    979c:	4798      	blx	r3

    xTaskCreate(task_3s, "task_3s", configMINIMAL_STACK_SIZE + 256, 0, TASK_3S_PRIORITY, NULL);
    979e:	2380      	movs	r3, #128	; 0x80
    97a0:	009a      	lsls	r2, r3, #2
    97a2:	491b      	ldr	r1, [pc, #108]	; (9810 <main+0xf0>)
    97a4:	481b      	ldr	r0, [pc, #108]	; (9814 <main+0xf4>)
    97a6:	2300      	movs	r3, #0
    97a8:	9301      	str	r3, [sp, #4]
    97aa:	2301      	movs	r3, #1
    97ac:	9300      	str	r3, [sp, #0]
    97ae:	2300      	movs	r3, #0
    97b0:	4c19      	ldr	r4, [pc, #100]	; (9818 <main+0xf8>)
    97b2:	47a0      	blx	r4
    xTaskCreate(task_1s, "task_1s", configMINIMAL_STACK_SIZE, 0, TASK_1S_PRIORITY, NULL);    
    97b4:	2380      	movs	r3, #128	; 0x80
    97b6:	005a      	lsls	r2, r3, #1
    97b8:	4918      	ldr	r1, [pc, #96]	; (981c <main+0xfc>)
    97ba:	4819      	ldr	r0, [pc, #100]	; (9820 <main+0x100>)
    97bc:	2300      	movs	r3, #0
    97be:	9301      	str	r3, [sp, #4]
    97c0:	2301      	movs	r3, #1
    97c2:	9300      	str	r3, [sp, #0]
    97c4:	2300      	movs	r3, #0
    97c6:	4c14      	ldr	r4, [pc, #80]	; (9818 <main+0xf8>)
    97c8:	47a0      	blx	r4
    xTaskCreate(task_50Hz, "task_50Hz", configMINIMAL_STACK_SIZE, 0, TASK_50HZ_PRIORITY, NULL); 
    97ca:	2380      	movs	r3, #128	; 0x80
    97cc:	005a      	lsls	r2, r3, #1
    97ce:	4915      	ldr	r1, [pc, #84]	; (9824 <main+0x104>)
    97d0:	4815      	ldr	r0, [pc, #84]	; (9828 <main+0x108>)
    97d2:	2300      	movs	r3, #0
    97d4:	9301      	str	r3, [sp, #4]
    97d6:	2302      	movs	r3, #2
    97d8:	9300      	str	r3, [sp, #0]
    97da:	2300      	movs	r3, #0
    97dc:	4c0e      	ldr	r4, [pc, #56]	; (9818 <main+0xf8>)
    97de:	47a0      	blx	r4

    vTaskStartScheduler();
    97e0:	4b12      	ldr	r3, [pc, #72]	; (982c <main+0x10c>)
    97e2:	4798      	blx	r3

    while(1) {}
    97e4:	e7fe      	b.n	97e4 <main+0xc4>
    97e6:	46c0      	nop			; (mov r8, r8)
    97e8:	00006a65 	.word	0x00006a65
    97ec:	000006c1 	.word	0x000006c1
    97f0:	0000bb1b 	.word	0x0000bb1b
    97f4:	000092ad 	.word	0x000092ad
    97f8:	20003cec 	.word	0x20003cec
    97fc:	20003cf8 	.word	0x20003cf8
    9800:	00000381 	.word	0x00000381
    9804:	000004c5 	.word	0x000004c5
    9808:	000005e9 	.word	0x000005e9
    980c:	0000064d 	.word	0x0000064d
    9810:	0000e0a8 	.word	0x0000e0a8
    9814:	00009385 	.word	0x00009385
    9818:	00007c51 	.word	0x00007c51
    981c:	0000e0b0 	.word	0x0000e0b0
    9820:	00009551 	.word	0x00009551
    9824:	0000e0b8 	.word	0x0000e0b8
    9828:	000096c1 	.word	0x000096c1
    982c:	00007f91 	.word	0x00007f91

00009830 <handle_transaction>:

static struct pubnub m_aCtx[PUBNUB_CTX_MAX];
struct sockaddr_in pubnub_origin_addr;

static void handle_transaction(pubnub_t *pb)
{
    9830:	b590      	push	{r4, r7, lr}
    9832:	b0dd      	sub	sp, #372	; 0x174
    9834:	af00      	add	r7, sp, #0
    9836:	6078      	str	r0, [r7, #4]
	if (pb->state == PS_WAIT_SEND) {
    9838:	687b      	ldr	r3, [r7, #4]
    983a:	2252      	movs	r2, #82	; 0x52
    983c:	5c9b      	ldrb	r3, [r3, r2]
    983e:	2b03      	cmp	r3, #3
    9840:	d126      	bne.n	9890 <handle_transaction+0x60>
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
    9842:	4b1e      	ldr	r3, [pc, #120]	; (98bc <handle_transaction+0x8c>)
    9844:	22b8      	movs	r2, #184	; 0xb8
    9846:	0052      	lsls	r2, r2, #1
    9848:	4694      	mov	ip, r2
    984a:	44bc      	add	ip, r7
    984c:	4463      	add	r3, ip
    984e:	0018      	movs	r0, r3
    9850:	2366      	movs	r3, #102	; 0x66
    9852:	33ff      	adds	r3, #255	; 0xff
    9854:	001a      	movs	r2, r3
    9856:	2100      	movs	r1, #0
    9858:	4b19      	ldr	r3, [pc, #100]	; (98c0 <handle_transaction+0x90>)
    985a:	4798      	blx	r3
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
    985c:	687b      	ldr	r3, [r7, #4]
    985e:	3354      	adds	r3, #84	; 0x54
    9860:	001a      	movs	r2, r3
    9862:	4b18      	ldr	r3, [pc, #96]	; (98c4 <handle_transaction+0x94>)
    9864:	4918      	ldr	r1, [pc, #96]	; (98c8 <handle_transaction+0x98>)
    9866:	2008      	movs	r0, #8
    9868:	1838      	adds	r0, r7, r0
    986a:	4c18      	ldr	r4, [pc, #96]	; (98cc <handle_transaction+0x9c>)
    986c:	47a0      	blx	r4
		send(pb->tcp_socket, buf, strlen(buf), 0);
    986e:	687b      	ldr	r3, [r7, #4]
    9870:	2253      	movs	r2, #83	; 0x53
    9872:	569c      	ldrsb	r4, [r3, r2]
    9874:	2308      	movs	r3, #8
    9876:	18fb      	adds	r3, r7, r3
    9878:	0018      	movs	r0, r3
    987a:	4b15      	ldr	r3, [pc, #84]	; (98d0 <handle_transaction+0xa0>)
    987c:	4798      	blx	r3
    987e:	0003      	movs	r3, r0
    9880:	b29a      	uxth	r2, r3
    9882:	2308      	movs	r3, #8
    9884:	18f9      	adds	r1, r7, r3
    9886:	2300      	movs	r3, #0
    9888:	0020      	movs	r0, r4
    988a:	4c12      	ldr	r4, [pc, #72]	; (98d4 <handle_transaction+0xa4>)
    988c:	47a0      	blx	r4
	} else if (pb->state == PS_WAIT_RECV) {
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
	} else if (pb->state == PS_RECV) {
	}
}
    988e:	e010      	b.n	98b2 <handle_transaction+0x82>
	if (pb->state == PS_WAIT_SEND) {
		char buf[PUBNUB_BUF_MAXLEN + sizeof(PUBNUB_REQUEST) + sizeof(PUBNUB_ORIGIN)] = { 0, };
		sprintf( buf, PUBNUB_REQUEST, pb->http_buf.url, PUBNUB_ORIGIN );
		send(pb->tcp_socket, buf, strlen(buf), 0);
		PUBNUB_PRINTF(("handle_transaction: buf = %s", buf));
	} else if (pb->state == PS_WAIT_RECV) {
    9890:	687b      	ldr	r3, [r7, #4]
    9892:	2252      	movs	r2, #82	; 0x52
    9894:	5c9b      	ldrb	r3, [r3, r2]
    9896:	2b04      	cmp	r3, #4
    9898:	d10b      	bne.n	98b2 <handle_transaction+0x82>
		PUBNUB_PRINTF(("handle_transaction: wait recv\r\n"));
		recv(pb->tcp_socket, pb->http_buf.url, PUBNUB_BUF_MAXLEN, 30 * 1000);
    989a:	687b      	ldr	r3, [r7, #4]
    989c:	2253      	movs	r2, #83	; 0x53
    989e:	5698      	ldrsb	r0, [r3, r2]
    98a0:	687b      	ldr	r3, [r7, #4]
    98a2:	3354      	adds	r3, #84	; 0x54
    98a4:	0019      	movs	r1, r3
    98a6:	4c0c      	ldr	r4, [pc, #48]	; (98d8 <handle_transaction+0xa8>)
    98a8:	2380      	movs	r3, #128	; 0x80
    98aa:	005a      	lsls	r2, r3, #1
    98ac:	0023      	movs	r3, r4
    98ae:	4c0b      	ldr	r4, [pc, #44]	; (98dc <handle_transaction+0xac>)
    98b0:	47a0      	blx	r4
	} else if (pb->state == PS_RECV) {
	}
}
    98b2:	46c0      	nop			; (mov r8, r8)
    98b4:	46bd      	mov	sp, r7
    98b6:	b05d      	add	sp, #372	; 0x174
    98b8:	bd90      	pop	{r4, r7, pc}
    98ba:	46c0      	nop			; (mov r8, r8)
    98bc:	fffffe98 	.word	0xfffffe98
    98c0:	0000bb1b 	.word	0x0000bb1b
    98c4:	0000e0c4 	.word	0x0000e0c4
    98c8:	0000e0d8 	.word	0x0000e0d8
    98cc:	0000c269 	.word	0x0000c269
    98d0:	0000c2ad 	.word	0x0000c2ad
    98d4:	000030a9 	.word	0x000030a9
    98d8:	00007530 	.word	0x00007530
    98dc:	0000320d 	.word	0x0000320d

000098e0 <valid_ctx_prt>:

static bool valid_ctx_prt(pubnub_t const *pb)
{
    98e0:	b580      	push	{r7, lr}
    98e2:	b082      	sub	sp, #8
    98e4:	af00      	add	r7, sp, #0
    98e6:	6078      	str	r0, [r7, #4]
	return ((pb >= m_aCtx) && (pb < m_aCtx + PUBNUB_CTX_MAX));
    98e8:	687a      	ldr	r2, [r7, #4]
    98ea:	4b09      	ldr	r3, [pc, #36]	; (9910 <valid_ctx_prt+0x30>)
    98ec:	429a      	cmp	r2, r3
    98ee:	d305      	bcc.n	98fc <valid_ctx_prt+0x1c>
    98f0:	4b08      	ldr	r3, [pc, #32]	; (9914 <valid_ctx_prt+0x34>)
    98f2:	687a      	ldr	r2, [r7, #4]
    98f4:	429a      	cmp	r2, r3
    98f6:	d201      	bcs.n	98fc <valid_ctx_prt+0x1c>
    98f8:	2301      	movs	r3, #1
    98fa:	e000      	b.n	98fe <valid_ctx_prt+0x1e>
    98fc:	2300      	movs	r3, #0
    98fe:	1c1a      	adds	r2, r3, #0
    9900:	2301      	movs	r3, #1
    9902:	4013      	ands	r3, r2
    9904:	b2db      	uxtb	r3, r3
}
    9906:	0018      	movs	r0, r3
    9908:	46bd      	mov	sp, r7
    990a:	b002      	add	sp, #8
    990c:	bd80      	pop	{r7, pc}
    990e:	46c0      	nop			; (mov r8, r8)
    9910:	20003d04 	.word	0x20003d04
    9914:	200043e4 	.word	0x200043e4

00009918 <handle_start_connect>:
	return NULL;
}

/** Handles start of a TCP(HTTP) connection. */
static void handle_start_connect(pubnub_t *pb)
{
    9918:	b590      	push	{r4, r7, lr}
    991a:	b083      	sub	sp, #12
    991c:	af00      	add	r7, sp, #0
    991e:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    9920:	687b      	ldr	r3, [r7, #4]
    9922:	0018      	movs	r0, r3
    9924:	4b2f      	ldr	r3, [pc, #188]	; (99e4 <handle_start_connect+0xcc>)
    9926:	4798      	blx	r3
    9928:	1e03      	subs	r3, r0, #0
    992a:	d105      	bne.n	9938 <handle_start_connect+0x20>
    992c:	4b2e      	ldr	r3, [pc, #184]	; (99e8 <handle_start_connect+0xd0>)
    992e:	4a2f      	ldr	r2, [pc, #188]	; (99ec <handle_start_connect+0xd4>)
    9930:	482f      	ldr	r0, [pc, #188]	; (99f0 <handle_start_connect+0xd8>)
    9932:	2154      	movs	r1, #84	; 0x54
    9934:	4c2f      	ldr	r4, [pc, #188]	; (99f4 <handle_start_connect+0xdc>)
    9936:	47a0      	blx	r4
	assert((pb->state == PS_IDLE) || (pb->state == PS_WAIT_DNS) || (pb->state == PS_WAIT_CONNECT));
    9938:	687b      	ldr	r3, [r7, #4]
    993a:	2252      	movs	r2, #82	; 0x52
    993c:	5c9b      	ldrb	r3, [r3, r2]
    993e:	2b00      	cmp	r3, #0
    9940:	d00f      	beq.n	9962 <handle_start_connect+0x4a>
    9942:	687b      	ldr	r3, [r7, #4]
    9944:	2252      	movs	r2, #82	; 0x52
    9946:	5c9b      	ldrb	r3, [r3, r2]
    9948:	2b01      	cmp	r3, #1
    994a:	d00a      	beq.n	9962 <handle_start_connect+0x4a>
    994c:	687b      	ldr	r3, [r7, #4]
    994e:	2252      	movs	r2, #82	; 0x52
    9950:	5c9b      	ldrb	r3, [r3, r2]
    9952:	2b02      	cmp	r3, #2
    9954:	d005      	beq.n	9962 <handle_start_connect+0x4a>
    9956:	4b28      	ldr	r3, [pc, #160]	; (99f8 <handle_start_connect+0xe0>)
    9958:	4a24      	ldr	r2, [pc, #144]	; (99ec <handle_start_connect+0xd4>)
    995a:	4825      	ldr	r0, [pc, #148]	; (99f0 <handle_start_connect+0xd8>)
    995c:	2155      	movs	r1, #85	; 0x55
    995e:	4c25      	ldr	r4, [pc, #148]	; (99f4 <handle_start_connect+0xdc>)
    9960:	47a0      	blx	r4

	if (pb->state == PS_IDLE && pb->tcp_socket <= 0) {
    9962:	687b      	ldr	r3, [r7, #4]
    9964:	2252      	movs	r2, #82	; 0x52
    9966:	5c9b      	ldrb	r3, [r3, r2]
    9968:	2b00      	cmp	r3, #0
    996a:	d12c      	bne.n	99c6 <handle_start_connect+0xae>
    996c:	687b      	ldr	r3, [r7, #4]
    996e:	2253      	movs	r2, #83	; 0x53
    9970:	569b      	ldrsb	r3, [r3, r2]
    9972:	2b00      	cmp	r3, #0
    9974:	dc27      	bgt.n	99c6 <handle_start_connect+0xae>
		if ((pb->tcp_socket = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    9976:	2200      	movs	r2, #0
    9978:	2101      	movs	r1, #1
    997a:	2002      	movs	r0, #2
    997c:	4b1f      	ldr	r3, [pc, #124]	; (99fc <handle_start_connect+0xe4>)
    997e:	4798      	blx	r3
    9980:	0003      	movs	r3, r0
    9982:	0019      	movs	r1, r3
    9984:	687b      	ldr	r3, [r7, #4]
    9986:	2253      	movs	r2, #83	; 0x53
    9988:	5499      	strb	r1, [r3, r2]
    998a:	687b      	ldr	r3, [r7, #4]
    998c:	2253      	movs	r2, #83	; 0x53
    998e:	569b      	ldrsb	r3, [r3, r2]
    9990:	2b00      	cmp	r3, #0
    9992:	da04      	bge.n	999e <handle_start_connect+0x86>
			CONF_WINC_PRINTF("failed to create TCP client socket error!\r\n");
    9994:	4b1a      	ldr	r3, [pc, #104]	; (9a00 <handle_start_connect+0xe8>)
    9996:	0018      	movs	r0, r3
    9998:	4b1a      	ldr	r3, [pc, #104]	; (9a04 <handle_start_connect+0xec>)
    999a:	4798      	blx	r3
			return;
    999c:	e01f      	b.n	99de <handle_start_connect+0xc6>
		}

		if (pubnub_origin_addr.sin_addr.s_addr <= 0) {
    999e:	4b1a      	ldr	r3, [pc, #104]	; (9a08 <handle_start_connect+0xf0>)
    99a0:	685b      	ldr	r3, [r3, #4]
    99a2:	2b00      	cmp	r3, #0
    99a4:	d10f      	bne.n	99c6 <handle_start_connect+0xae>
			pubnub_origin_addr.sin_family = AF_INET;
    99a6:	4b18      	ldr	r3, [pc, #96]	; (9a08 <handle_start_connect+0xf0>)
    99a8:	2202      	movs	r2, #2
    99aa:	801a      	strh	r2, [r3, #0]
			pubnub_origin_addr.sin_port = _htons(PUBNUB_ORIGIN_PORT);
    99ac:	4b16      	ldr	r3, [pc, #88]	; (9a08 <handle_start_connect+0xf0>)
    99ae:	22a0      	movs	r2, #160	; 0xa0
    99b0:	01d2      	lsls	r2, r2, #7
    99b2:	805a      	strh	r2, [r3, #2]

			pb->state = PS_WAIT_DNS;
    99b4:	687b      	ldr	r3, [r7, #4]
    99b6:	2252      	movs	r2, #82	; 0x52
    99b8:	2101      	movs	r1, #1
    99ba:	5499      	strb	r1, [r3, r2]
			gethostbyname((uint8 *)PUBNUB_ORIGIN);
    99bc:	4b13      	ldr	r3, [pc, #76]	; (9a0c <handle_start_connect+0xf4>)
    99be:	0018      	movs	r0, r3
    99c0:	4b13      	ldr	r3, [pc, #76]	; (9a10 <handle_start_connect+0xf8>)
    99c2:	4798      	blx	r3
			return;
    99c4:	e00b      	b.n	99de <handle_start_connect+0xc6>
		}
	}

	connect(pb->tcp_socket, (struct sockaddr *)&pubnub_origin_addr, sizeof(struct sockaddr_in));
    99c6:	687b      	ldr	r3, [r7, #4]
    99c8:	2253      	movs	r2, #83	; 0x53
    99ca:	569b      	ldrsb	r3, [r3, r2]
    99cc:	490e      	ldr	r1, [pc, #56]	; (9a08 <handle_start_connect+0xf0>)
    99ce:	2210      	movs	r2, #16
    99d0:	0018      	movs	r0, r3
    99d2:	4b10      	ldr	r3, [pc, #64]	; (9a14 <handle_start_connect+0xfc>)
    99d4:	4798      	blx	r3
	pb->state = PS_WAIT_CONNECT;
    99d6:	687b      	ldr	r3, [r7, #4]
    99d8:	2252      	movs	r2, #82	; 0x52
    99da:	2102      	movs	r1, #2
    99dc:	5499      	strb	r1, [r3, r2]
}
    99de:	46bd      	mov	sp, r7
    99e0:	b003      	add	sp, #12
    99e2:	bd90      	pop	{r4, r7, pc}
    99e4:	000098e1 	.word	0x000098e1
    99e8:	0000e12c 	.word	0x0000e12c
    99ec:	0000e2d0 	.word	0x0000e2d0
    99f0:	0000e140 	.word	0x0000e140
    99f4:	0000ba5d 	.word	0x0000ba5d
    99f8:	0000e150 	.word	0x0000e150
    99fc:	00002e3d 	.word	0x00002e3d
    9a00:	0000e1a8 	.word	0x0000e1a8
    9a04:	0000c1f1 	.word	0x0000c1f1
    9a08:	20004608 	.word	0x20004608
    9a0c:	0000e0c4 	.word	0x0000e0c4
    9a10:	0000349d 	.word	0x0000349d
    9a14:	00002f95 	.word	0x00002f95

00009a18 <pubnub_publish>:
	pb->state = PS_IDLE;
	pb->last_result = PNR_IO_ERROR;
}

bool pubnub_publish(pubnub_t *pb, const char *channel, const char *message)
{
    9a18:	b5b0      	push	{r4, r5, r7, lr}
    9a1a:	b08a      	sub	sp, #40	; 0x28
    9a1c:	af02      	add	r7, sp, #8
    9a1e:	60f8      	str	r0, [r7, #12]
    9a20:	60b9      	str	r1, [r7, #8]
    9a22:	607a      	str	r2, [r7, #4]
	assert(valid_ctx_prt(pb));
    9a24:	68fb      	ldr	r3, [r7, #12]
    9a26:	0018      	movs	r0, r3
    9a28:	4b6c      	ldr	r3, [pc, #432]	; (9bdc <pubnub_publish+0x1c4>)
    9a2a:	4798      	blx	r3
    9a2c:	1e03      	subs	r3, r0, #0
    9a2e:	d108      	bne.n	9a42 <pubnub_publish+0x2a>
    9a30:	4c6b      	ldr	r4, [pc, #428]	; (9be0 <pubnub_publish+0x1c8>)
    9a32:	4a6c      	ldr	r2, [pc, #432]	; (9be4 <pubnub_publish+0x1cc>)
    9a34:	238a      	movs	r3, #138	; 0x8a
    9a36:	33ff      	adds	r3, #255	; 0xff
    9a38:	0019      	movs	r1, r3
    9a3a:	486b      	ldr	r0, [pc, #428]	; (9be8 <pubnub_publish+0x1d0>)
    9a3c:	0023      	movs	r3, r4
    9a3e:	4c6b      	ldr	r4, [pc, #428]	; (9bec <pubnub_publish+0x1d4>)
    9a40:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    9a42:	68fb      	ldr	r3, [r7, #12]
    9a44:	2252      	movs	r2, #82	; 0x52
    9a46:	5c9b      	ldrb	r3, [r3, r2]
    9a48:	2b00      	cmp	r3, #0
    9a4a:	d001      	beq.n	9a50 <pubnub_publish+0x38>
		return false;
    9a4c:	2300      	movs	r3, #0
    9a4e:	e0c0      	b.n	9bd2 <pubnub_publish+0x1ba>
	}

	pb->trans = PBTT_PUBLISH;
    9a50:	68fb      	ldr	r3, [r7, #12]
    9a52:	2251      	movs	r2, #81	; 0x51
    9a54:	2102      	movs	r1, #2
    9a56:	5499      	strb	r1, [r3, r2]
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);
    9a58:	68fb      	ldr	r3, [r7, #12]
    9a5a:	3354      	adds	r3, #84	; 0x54
    9a5c:	0018      	movs	r0, r3
    9a5e:	68fb      	ldr	r3, [r7, #12]
    9a60:	681d      	ldr	r5, [r3, #0]
    9a62:	68fb      	ldr	r3, [r7, #12]
    9a64:	685b      	ldr	r3, [r3, #4]
    9a66:	4c62      	ldr	r4, [pc, #392]	; (9bf0 <pubnub_publish+0x1d8>)
    9a68:	2280      	movs	r2, #128	; 0x80
    9a6a:	0051      	lsls	r1, r2, #1
    9a6c:	68ba      	ldr	r2, [r7, #8]
    9a6e:	9201      	str	r2, [sp, #4]
    9a70:	9300      	str	r3, [sp, #0]
    9a72:	002b      	movs	r3, r5
    9a74:	0022      	movs	r2, r4
    9a76:	4c5f      	ldr	r4, [pc, #380]	; (9bf4 <pubnub_publish+0x1dc>)
    9a78:	47a0      	blx	r4
    9a7a:	0003      	movs	r3, r0
    9a7c:	0019      	movs	r1, r3
    9a7e:	68fa      	ldr	r2, [r7, #12]
    9a80:	23ac      	movs	r3, #172	; 0xac
    9a82:	005b      	lsls	r3, r3, #1
    9a84:	50d1      	str	r1, [r2, r3]

	const char *pmessage = message;
    9a86:	687b      	ldr	r3, [r7, #4]
    9a88:	61fb      	str	r3, [r7, #28]

	while (pmessage[0]) {
    9a8a:	e08a      	b.n	9ba2 <pubnub_publish+0x18a>
		/* RFC 3986 Unreserved characters plus few safe reserved ones. */
		size_t okspan = strspn(pmessage, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_.~" ",=:;@[]");
    9a8c:	4a5a      	ldr	r2, [pc, #360]	; (9bf8 <pubnub_publish+0x1e0>)
    9a8e:	69fb      	ldr	r3, [r7, #28]
    9a90:	0011      	movs	r1, r2
    9a92:	0018      	movs	r0, r3
    9a94:	4b59      	ldr	r3, [pc, #356]	; (9bfc <pubnub_publish+0x1e4>)
    9a96:	4798      	blx	r3
    9a98:	0003      	movs	r3, r0
    9a9a:	61bb      	str	r3, [r7, #24]
		if (okspan > 0) {
    9a9c:	69bb      	ldr	r3, [r7, #24]
    9a9e:	2b00      	cmp	r3, #0
    9aa0:	d034      	beq.n	9b0c <pubnub_publish+0xf4>
			if (okspan > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    9aa2:	68fa      	ldr	r2, [r7, #12]
    9aa4:	23ac      	movs	r3, #172	; 0xac
    9aa6:	005b      	lsls	r3, r3, #1
    9aa8:	58d3      	ldr	r3, [r2, r3]
    9aaa:	22ff      	movs	r2, #255	; 0xff
    9aac:	1ad2      	subs	r2, r2, r3
    9aae:	69bb      	ldr	r3, [r7, #24]
    9ab0:	429a      	cmp	r2, r3
    9ab2:	d206      	bcs.n	9ac2 <pubnub_publish+0xaa>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    9ab4:	68fa      	ldr	r2, [r7, #12]
    9ab6:	23ac      	movs	r3, #172	; 0xac
    9ab8:	005b      	lsls	r3, r3, #1
    9aba:	2100      	movs	r1, #0
    9abc:	50d1      	str	r1, [r2, r3]
				return false;
    9abe:	2300      	movs	r3, #0
    9ac0:	e087      	b.n	9bd2 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, pmessage, okspan);
    9ac2:	68fb      	ldr	r3, [r7, #12]
    9ac4:	3354      	adds	r3, #84	; 0x54
    9ac6:	001a      	movs	r2, r3
    9ac8:	68f9      	ldr	r1, [r7, #12]
    9aca:	23ac      	movs	r3, #172	; 0xac
    9acc:	005b      	lsls	r3, r3, #1
    9ace:	58cb      	ldr	r3, [r1, r3]
    9ad0:	18d3      	adds	r3, r2, r3
    9ad2:	69ba      	ldr	r2, [r7, #24]
    9ad4:	69f9      	ldr	r1, [r7, #28]
    9ad6:	0018      	movs	r0, r3
    9ad8:	4b49      	ldr	r3, [pc, #292]	; (9c00 <pubnub_publish+0x1e8>)
    9ada:	4798      	blx	r3
			pb->http_buf_len += okspan;
    9adc:	68fa      	ldr	r2, [r7, #12]
    9ade:	23ac      	movs	r3, #172	; 0xac
    9ae0:	005b      	lsls	r3, r3, #1
    9ae2:	58d2      	ldr	r2, [r2, r3]
    9ae4:	69bb      	ldr	r3, [r7, #24]
    9ae6:	18d1      	adds	r1, r2, r3
    9ae8:	68fa      	ldr	r2, [r7, #12]
    9aea:	23ac      	movs	r3, #172	; 0xac
    9aec:	005b      	lsls	r3, r3, #1
    9aee:	50d1      	str	r1, [r2, r3]
			pb->http_buf.url[pb->http_buf_len] = 0;
    9af0:	68fa      	ldr	r2, [r7, #12]
    9af2:	23ac      	movs	r3, #172	; 0xac
    9af4:	005b      	lsls	r3, r3, #1
    9af6:	58d3      	ldr	r3, [r2, r3]
    9af8:	68fa      	ldr	r2, [r7, #12]
    9afa:	2154      	movs	r1, #84	; 0x54
    9afc:	18d3      	adds	r3, r2, r3
    9afe:	185b      	adds	r3, r3, r1
    9b00:	2200      	movs	r2, #0
    9b02:	701a      	strb	r2, [r3, #0]
			pmessage += okspan;
    9b04:	69fa      	ldr	r2, [r7, #28]
    9b06:	69bb      	ldr	r3, [r7, #24]
    9b08:	18d3      	adds	r3, r2, r3
    9b0a:	61fb      	str	r3, [r7, #28]
		}

		if (pmessage[0]) {
    9b0c:	69fb      	ldr	r3, [r7, #28]
    9b0e:	781b      	ldrb	r3, [r3, #0]
    9b10:	2b00      	cmp	r3, #0
    9b12:	d046      	beq.n	9ba2 <pubnub_publish+0x18a>
			/* %-encode a non-ok character. */
			char enc[4] = {'%', };
    9b14:	2314      	movs	r3, #20
    9b16:	18fb      	adds	r3, r7, r3
    9b18:	2200      	movs	r2, #0
    9b1a:	601a      	str	r2, [r3, #0]
    9b1c:	2314      	movs	r3, #20
    9b1e:	18fb      	adds	r3, r7, r3
    9b20:	2225      	movs	r2, #37	; 0x25
    9b22:	701a      	strb	r2, [r3, #0]
			enc[1] = "0123456789ABCDEF"[pmessage[0] / 16];
    9b24:	69fb      	ldr	r3, [r7, #28]
    9b26:	781b      	ldrb	r3, [r3, #0]
    9b28:	091b      	lsrs	r3, r3, #4
    9b2a:	b2db      	uxtb	r3, r3
    9b2c:	001a      	movs	r2, r3
    9b2e:	4b35      	ldr	r3, [pc, #212]	; (9c04 <pubnub_publish+0x1ec>)
    9b30:	5c9a      	ldrb	r2, [r3, r2]
    9b32:	2314      	movs	r3, #20
    9b34:	18fb      	adds	r3, r7, r3
    9b36:	705a      	strb	r2, [r3, #1]
			enc[2] = "0123456789ABCDEF"[pmessage[0] % 16];
    9b38:	69fb      	ldr	r3, [r7, #28]
    9b3a:	781b      	ldrb	r3, [r3, #0]
    9b3c:	001a      	movs	r2, r3
    9b3e:	230f      	movs	r3, #15
    9b40:	4013      	ands	r3, r2
    9b42:	4a30      	ldr	r2, [pc, #192]	; (9c04 <pubnub_publish+0x1ec>)
    9b44:	5cd2      	ldrb	r2, [r2, r3]
    9b46:	2314      	movs	r3, #20
    9b48:	18fb      	adds	r3, r7, r3
    9b4a:	709a      	strb	r2, [r3, #2]
			if (3 > sizeof(pb->http_buf.url) - 1 - pb->http_buf_len) {
    9b4c:	68fa      	ldr	r2, [r7, #12]
    9b4e:	23ac      	movs	r3, #172	; 0xac
    9b50:	005b      	lsls	r3, r3, #1
    9b52:	58d3      	ldr	r3, [r2, r3]
    9b54:	22ff      	movs	r2, #255	; 0xff
    9b56:	1ad3      	subs	r3, r2, r3
    9b58:	2b02      	cmp	r3, #2
    9b5a:	d806      	bhi.n	9b6a <pubnub_publish+0x152>
				PUBNUB_PRINTF("Not enough buffer! Reduce the message or modify the PUBNUB_BUF_MAXLEN\r\n");
				pb->http_buf_len = 0;
    9b5c:	68fa      	ldr	r2, [r7, #12]
    9b5e:	23ac      	movs	r3, #172	; 0xac
    9b60:	005b      	lsls	r3, r3, #1
    9b62:	2100      	movs	r1, #0
    9b64:	50d1      	str	r1, [r2, r3]
				return false;
    9b66:	2300      	movs	r3, #0
    9b68:	e033      	b.n	9bd2 <pubnub_publish+0x1ba>
			}

			memcpy(pb->http_buf.url + pb->http_buf_len, enc, 4);
    9b6a:	68fb      	ldr	r3, [r7, #12]
    9b6c:	3354      	adds	r3, #84	; 0x54
    9b6e:	001a      	movs	r2, r3
    9b70:	68f9      	ldr	r1, [r7, #12]
    9b72:	23ac      	movs	r3, #172	; 0xac
    9b74:	005b      	lsls	r3, r3, #1
    9b76:	58cb      	ldr	r3, [r1, r3]
    9b78:	18d2      	adds	r2, r2, r3
    9b7a:	2314      	movs	r3, #20
    9b7c:	18fb      	adds	r3, r7, r3
    9b7e:	0010      	movs	r0, r2
    9b80:	0019      	movs	r1, r3
    9b82:	2304      	movs	r3, #4
    9b84:	001a      	movs	r2, r3
    9b86:	4b1e      	ldr	r3, [pc, #120]	; (9c00 <pubnub_publish+0x1e8>)
    9b88:	4798      	blx	r3
			pb->http_buf_len += 3;
    9b8a:	68fa      	ldr	r2, [r7, #12]
    9b8c:	23ac      	movs	r3, #172	; 0xac
    9b8e:	005b      	lsls	r3, r3, #1
    9b90:	58d3      	ldr	r3, [r2, r3]
    9b92:	1cd9      	adds	r1, r3, #3
    9b94:	68fa      	ldr	r2, [r7, #12]
    9b96:	23ac      	movs	r3, #172	; 0xac
    9b98:	005b      	lsls	r3, r3, #1
    9b9a:	50d1      	str	r1, [r2, r3]
			++pmessage;
    9b9c:	69fb      	ldr	r3, [r7, #28]
    9b9e:	3301      	adds	r3, #1
    9ba0:	61fb      	str	r3, [r7, #28]
	pb->trans = PBTT_PUBLISH;
	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url), "/publish/%s/%s/0/%s/0/", pb->publish_key, pb->subscribe_key, channel);

	const char *pmessage = message;

	while (pmessage[0]) {
    9ba2:	69fb      	ldr	r3, [r7, #28]
    9ba4:	781b      	ldrb	r3, [r3, #0]
    9ba6:	2b00      	cmp	r3, #0
    9ba8:	d000      	beq.n	9bac <pubnub_publish+0x194>
    9baa:	e76f      	b.n	9a8c <pubnub_publish+0x74>
			pb->http_buf_len += 3;
			++pmessage;
		}
	}

	if (pb->last_result == PNR_OK) {
    9bac:	68fb      	ldr	r3, [r7, #12]
    9bae:	2250      	movs	r2, #80	; 0x50
    9bb0:	5c9b      	ldrb	r3, [r3, r2]
    9bb2:	2b00      	cmp	r3, #0
    9bb4:	d108      	bne.n	9bc8 <pubnub_publish+0x1b0>
		pb->state = PS_WAIT_SEND;
    9bb6:	68fb      	ldr	r3, [r7, #12]
    9bb8:	2252      	movs	r2, #82	; 0x52
    9bba:	2103      	movs	r1, #3
    9bbc:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    9bbe:	68fb      	ldr	r3, [r7, #12]
    9bc0:	0018      	movs	r0, r3
    9bc2:	4b11      	ldr	r3, [pc, #68]	; (9c08 <pubnub_publish+0x1f0>)
    9bc4:	4798      	blx	r3
    9bc6:	e003      	b.n	9bd0 <pubnub_publish+0x1b8>
	} else {
		handle_start_connect(pb);
    9bc8:	68fb      	ldr	r3, [r7, #12]
    9bca:	0018      	movs	r0, r3
    9bcc:	4b0f      	ldr	r3, [pc, #60]	; (9c0c <pubnub_publish+0x1f4>)
    9bce:	4798      	blx	r3
	}

	return true;
    9bd0:	2301      	movs	r3, #1
}
    9bd2:	0018      	movs	r0, r3
    9bd4:	46bd      	mov	sp, r7
    9bd6:	b008      	add	sp, #32
    9bd8:	bdb0      	pop	{r4, r5, r7, pc}
    9bda:	46c0      	nop			; (mov r8, r8)
    9bdc:	000098e1 	.word	0x000098e1
    9be0:	0000e12c 	.word	0x0000e12c
    9be4:	0000e2e8 	.word	0x0000e2e8
    9be8:	0000e140 	.word	0x0000e140
    9bec:	0000ba5d 	.word	0x0000ba5d
    9bf0:	0000e204 	.word	0x0000e204
    9bf4:	0000c205 	.word	0x0000c205
    9bf8:	0000e21c 	.word	0x0000e21c
    9bfc:	0000c2df 	.word	0x0000c2df
    9c00:	0000bb09 	.word	0x0000bb09
    9c04:	0000e268 	.word	0x0000e268
    9c08:	00009831 	.word	0x00009831
    9c0c:	00009919 	.word	0x00009919

00009c10 <pubnub_subscribe>:

bool pubnub_subscribe(pubnub_t *pb, const char *channel)
{
    9c10:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c12:	4657      	mov	r7, sl
    9c14:	464e      	mov	r6, r9
    9c16:	4645      	mov	r5, r8
    9c18:	b4e0      	push	{r5, r6, r7}
    9c1a:	b08c      	sub	sp, #48	; 0x30
    9c1c:	af0a      	add	r7, sp, #40	; 0x28
    9c1e:	6078      	str	r0, [r7, #4]
    9c20:	6039      	str	r1, [r7, #0]
	assert(valid_ctx_prt(pb));
    9c22:	687b      	ldr	r3, [r7, #4]
    9c24:	0018      	movs	r0, r3
    9c26:	4b4a      	ldr	r3, [pc, #296]	; (9d50 <pubnub_subscribe+0x140>)
    9c28:	4798      	blx	r3
    9c2a:	1e03      	subs	r3, r0, #0
    9c2c:	d108      	bne.n	9c40 <pubnub_subscribe+0x30>
    9c2e:	4c49      	ldr	r4, [pc, #292]	; (9d54 <pubnub_subscribe+0x144>)
    9c30:	4a49      	ldr	r2, [pc, #292]	; (9d58 <pubnub_subscribe+0x148>)
    9c32:	23c2      	movs	r3, #194	; 0xc2
    9c34:	33ff      	adds	r3, #255	; 0xff
    9c36:	0019      	movs	r1, r3
    9c38:	4848      	ldr	r0, [pc, #288]	; (9d5c <pubnub_subscribe+0x14c>)
    9c3a:	0023      	movs	r3, r4
    9c3c:	4c48      	ldr	r4, [pc, #288]	; (9d60 <pubnub_subscribe+0x150>)
    9c3e:	47a0      	blx	r4

	if (pb->state != PS_IDLE) {
    9c40:	687b      	ldr	r3, [r7, #4]
    9c42:	2252      	movs	r2, #82	; 0x52
    9c44:	5c9b      	ldrb	r3, [r3, r2]
    9c46:	2b00      	cmp	r3, #0
    9c48:	d001      	beq.n	9c4e <pubnub_subscribe+0x3e>
		return false;
    9c4a:	2300      	movs	r3, #0
    9c4c:	e078      	b.n	9d40 <pubnub_subscribe+0x130>
	}

	pb->trans = PBTT_SUBSCRIBE;
    9c4e:	687b      	ldr	r3, [r7, #4]
    9c50:	2251      	movs	r2, #81	; 0x51
    9c52:	2101      	movs	r1, #1
    9c54:	5499      	strb	r1, [r3, r2]

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);
    9c56:	687b      	ldr	r3, [r7, #4]
    9c58:	3366      	adds	r3, #102	; 0x66
    9c5a:	33ff      	adds	r3, #255	; 0xff
    9c5c:	0018      	movs	r0, r3
    9c5e:	2380      	movs	r3, #128	; 0x80
    9c60:	009b      	lsls	r3, r3, #2
    9c62:	001a      	movs	r2, r3
    9c64:	2100      	movs	r1, #0
    9c66:	4b3f      	ldr	r3, [pc, #252]	; (9d64 <pubnub_subscribe+0x154>)
    9c68:	4798      	blx	r3

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9c6a:	687b      	ldr	r3, [r7, #4]
    9c6c:	2254      	movs	r2, #84	; 0x54
    9c6e:	4694      	mov	ip, r2
    9c70:	449c      	add	ip, r3
    9c72:	687b      	ldr	r3, [r7, #4]
    9c74:	685b      	ldr	r3, [r3, #4]
    9c76:	469a      	mov	sl, r3
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
    9c78:	687b      	ldr	r3, [r7, #4]
    9c7a:	3310      	adds	r3, #16
    9c7c:	001d      	movs	r5, r3
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    9c7e:	687b      	ldr	r3, [r7, #4]
    9c80:	689b      	ldr	r3, [r3, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9c82:	2b00      	cmp	r3, #0
    9c84:	d001      	beq.n	9c8a <pubnub_subscribe+0x7a>
    9c86:	4b38      	ldr	r3, [pc, #224]	; (9d68 <pubnub_subscribe+0x158>)
    9c88:	e000      	b.n	9c8c <pubnub_subscribe+0x7c>
    9c8a:	4b38      	ldr	r3, [pc, #224]	; (9d6c <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
    9c8c:	687a      	ldr	r2, [r7, #4]
    9c8e:	6892      	ldr	r2, [r2, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9c90:	2a00      	cmp	r2, #0
    9c92:	d002      	beq.n	9c9a <pubnub_subscribe+0x8a>
    9c94:	687a      	ldr	r2, [r7, #4]
    9c96:	6892      	ldr	r2, [r2, #8]
    9c98:	e000      	b.n	9c9c <pubnub_subscribe+0x8c>
    9c9a:	4a34      	ldr	r2, [pc, #208]	; (9d6c <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    9c9c:	6879      	ldr	r1, [r7, #4]
    9c9e:	6889      	ldr	r1, [r1, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9ca0:	2900      	cmp	r1, #0
    9ca2:	d005      	beq.n	9cb0 <pubnub_subscribe+0xa0>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
    9ca4:	6879      	ldr	r1, [r7, #4]
    9ca6:	68c9      	ldr	r1, [r1, #12]
    9ca8:	2900      	cmp	r1, #0
    9caa:	d001      	beq.n	9cb0 <pubnub_subscribe+0xa0>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9cac:	4930      	ldr	r1, [pc, #192]	; (9d70 <pubnub_subscribe+0x160>)
    9cae:	e000      	b.n	9cb2 <pubnub_subscribe+0xa2>
    9cb0:	492e      	ldr	r1, [pc, #184]	; (9d6c <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    9cb2:	6878      	ldr	r0, [r7, #4]
    9cb4:	6880      	ldr	r0, [r0, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9cb6:	2800      	cmp	r0, #0
    9cb8:	d005      	beq.n	9cc6 <pubnub_subscribe+0xb6>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    9cba:	6878      	ldr	r0, [r7, #4]
    9cbc:	68c0      	ldr	r0, [r0, #12]
    9cbe:	2800      	cmp	r0, #0
    9cc0:	d001      	beq.n	9cc6 <pubnub_subscribe+0xb6>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9cc2:	482c      	ldr	r0, [pc, #176]	; (9d74 <pubnub_subscribe+0x164>)
    9cc4:	e000      	b.n	9cc8 <pubnub_subscribe+0xb8>
    9cc6:	4829      	ldr	r0, [pc, #164]	; (9d6c <pubnub_subscribe+0x15c>)
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    9cc8:	687c      	ldr	r4, [r7, #4]
    9cca:	68a4      	ldr	r4, [r4, #8]

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9ccc:	2c00      	cmp	r4, #0
    9cce:	d006      	beq.n	9cde <pubnub_subscribe+0xce>
			"/subscribe/%s/%s/0/%s?" "%s%s" "%s%s%s" "&pnsdk=WINC1500%s%%2F%s",
			pb->subscribe_key, channel, pb->timetoken,
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
    9cd0:	687c      	ldr	r4, [r7, #4]
    9cd2:	68e4      	ldr	r4, [r4, #12]
    9cd4:	2c00      	cmp	r4, #0
    9cd6:	d002      	beq.n	9cde <pubnub_subscribe+0xce>

	pb->trans = PBTT_SUBSCRIBE;

	memset(pb->http_reply, 0x0, PUBNUB_REPLY_MAXLEN);

	pb->http_buf_len = snprintf(pb->http_buf.url, sizeof(pb->http_buf.url),
    9cd8:	687c      	ldr	r4, [r7, #4]
    9cda:	68e4      	ldr	r4, [r4, #12]
    9cdc:	e000      	b.n	9ce0 <pubnub_subscribe+0xd0>
    9cde:	4c23      	ldr	r4, [pc, #140]	; (9d6c <pubnub_subscribe+0x15c>)
    9ce0:	4e25      	ldr	r6, [pc, #148]	; (9d78 <pubnub_subscribe+0x168>)
    9ce2:	46b1      	mov	r9, r6
    9ce4:	2680      	movs	r6, #128	; 0x80
    9ce6:	0076      	lsls	r6, r6, #1
    9ce8:	46b0      	mov	r8, r6
    9cea:	4e24      	ldr	r6, [pc, #144]	; (9d7c <pubnub_subscribe+0x16c>)
    9cec:	9608      	str	r6, [sp, #32]
    9cee:	4e1f      	ldr	r6, [pc, #124]	; (9d6c <pubnub_subscribe+0x15c>)
    9cf0:	9607      	str	r6, [sp, #28]
    9cf2:	9406      	str	r4, [sp, #24]
    9cf4:	9005      	str	r0, [sp, #20]
    9cf6:	9104      	str	r1, [sp, #16]
    9cf8:	9203      	str	r2, [sp, #12]
    9cfa:	9302      	str	r3, [sp, #8]
    9cfc:	9501      	str	r5, [sp, #4]
    9cfe:	683b      	ldr	r3, [r7, #0]
    9d00:	9300      	str	r3, [sp, #0]
    9d02:	4653      	mov	r3, sl
    9d04:	464a      	mov	r2, r9
    9d06:	4641      	mov	r1, r8
    9d08:	4660      	mov	r0, ip
    9d0a:	4c1d      	ldr	r4, [pc, #116]	; (9d80 <pubnub_subscribe+0x170>)
    9d0c:	47a0      	blx	r4
    9d0e:	0003      	movs	r3, r0
    9d10:	0019      	movs	r1, r3
    9d12:	687a      	ldr	r2, [r7, #4]
    9d14:	23ac      	movs	r3, #172	; 0xac
    9d16:	005b      	lsls	r3, r3, #1
    9d18:	50d1      	str	r1, [r2, r3]
			pb->uuid ? "uuid=" : "", pb->uuid ? pb->uuid : "",
			pb->uuid && pb->auth ? "&" : "",
			pb->uuid && pb->auth ? "auth=" : "", pb->uuid && pb->auth ? pb->auth : "",
			"", "0.1");

	if (pb->last_result == PNR_OK) {
    9d1a:	687b      	ldr	r3, [r7, #4]
    9d1c:	2250      	movs	r2, #80	; 0x50
    9d1e:	5c9b      	ldrb	r3, [r3, r2]
    9d20:	2b00      	cmp	r3, #0
    9d22:	d108      	bne.n	9d36 <pubnub_subscribe+0x126>
		pb->state = PS_WAIT_SEND;
    9d24:	687b      	ldr	r3, [r7, #4]
    9d26:	2252      	movs	r2, #82	; 0x52
    9d28:	2103      	movs	r1, #3
    9d2a:	5499      	strb	r1, [r3, r2]
		handle_transaction(pb);
    9d2c:	687b      	ldr	r3, [r7, #4]
    9d2e:	0018      	movs	r0, r3
    9d30:	4b14      	ldr	r3, [pc, #80]	; (9d84 <pubnub_subscribe+0x174>)
    9d32:	4798      	blx	r3
    9d34:	e003      	b.n	9d3e <pubnub_subscribe+0x12e>
	} else {
		handle_start_connect(pb);
    9d36:	687b      	ldr	r3, [r7, #4]
    9d38:	0018      	movs	r0, r3
    9d3a:	4b13      	ldr	r3, [pc, #76]	; (9d88 <pubnub_subscribe+0x178>)
    9d3c:	4798      	blx	r3
	}

	return true;
    9d3e:	2301      	movs	r3, #1
}
    9d40:	0018      	movs	r0, r3
    9d42:	46bd      	mov	sp, r7
    9d44:	b002      	add	sp, #8
    9d46:	bc1c      	pop	{r2, r3, r4}
    9d48:	4690      	mov	r8, r2
    9d4a:	4699      	mov	r9, r3
    9d4c:	46a2      	mov	sl, r4
    9d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d50:	000098e1 	.word	0x000098e1
    9d54:	0000e12c 	.word	0x0000e12c
    9d58:	0000e2f8 	.word	0x0000e2f8
    9d5c:	0000e140 	.word	0x0000e140
    9d60:	0000ba5d 	.word	0x0000ba5d
    9d64:	0000bb1b 	.word	0x0000bb1b
    9d68:	0000e27c 	.word	0x0000e27c
    9d6c:	0000e284 	.word	0x0000e284
    9d70:	0000e288 	.word	0x0000e288
    9d74:	0000e28c 	.word	0x0000e28c
    9d78:	0000e294 	.word	0x0000e294
    9d7c:	0000e2cc 	.word	0x0000e2cc
    9d80:	0000c205 	.word	0x0000c205
    9d84:	00009831 	.word	0x00009831
    9d88:	00009919 	.word	0x00009919

00009d8c <pubnub_get>:

char const *pubnub_get(pubnub_t *pb)
{
    9d8c:	b590      	push	{r4, r7, lr}
    9d8e:	b085      	sub	sp, #20
    9d90:	af00      	add	r7, sp, #0
    9d92:	6078      	str	r0, [r7, #4]
	assert(valid_ctx_prt(pb));
    9d94:	687b      	ldr	r3, [r7, #4]
    9d96:	0018      	movs	r0, r3
    9d98:	4b20      	ldr	r3, [pc, #128]	; (9e1c <pubnub_get+0x90>)
    9d9a:	4798      	blx	r3
    9d9c:	1e03      	subs	r3, r0, #0
    9d9e:	d108      	bne.n	9db2 <pubnub_get+0x26>
    9da0:	4c1f      	ldr	r4, [pc, #124]	; (9e20 <pubnub_get+0x94>)
    9da2:	4a20      	ldr	r2, [pc, #128]	; (9e24 <pubnub_get+0x98>)
    9da4:	23e0      	movs	r3, #224	; 0xe0
    9da6:	33ff      	adds	r3, #255	; 0xff
    9da8:	0019      	movs	r1, r3
    9daa:	481f      	ldr	r0, [pc, #124]	; (9e28 <pubnub_get+0x9c>)
    9dac:	0023      	movs	r3, r4
    9dae:	4c1f      	ldr	r4, [pc, #124]	; (9e2c <pubnub_get+0xa0>)
    9db0:	47a0      	blx	r4

	if (pb->msg_ofs < pb->msg_end) {
    9db2:	687b      	ldr	r3, [r7, #4]
    9db4:	4a1e      	ldr	r2, [pc, #120]	; (9e30 <pubnub_get+0xa4>)
    9db6:	5a9a      	ldrh	r2, [r3, r2]
    9db8:	6879      	ldr	r1, [r7, #4]
    9dba:	23da      	movs	r3, #218	; 0xda
    9dbc:	009b      	lsls	r3, r3, #2
    9dbe:	5acb      	ldrh	r3, [r1, r3]
    9dc0:	429a      	cmp	r2, r3
    9dc2:	d225      	bcs.n	9e10 <pubnub_get+0x84>
		char const *rslt = pb->http_reply + pb->msg_ofs;
    9dc4:	687b      	ldr	r3, [r7, #4]
    9dc6:	3366      	adds	r3, #102	; 0x66
    9dc8:	33ff      	adds	r3, #255	; 0xff
    9dca:	687a      	ldr	r2, [r7, #4]
    9dcc:	4918      	ldr	r1, [pc, #96]	; (9e30 <pubnub_get+0xa4>)
    9dce:	5a52      	ldrh	r2, [r2, r1]
    9dd0:	189b      	adds	r3, r3, r2
    9dd2:	60fb      	str	r3, [r7, #12]
		pb->msg_ofs += strlen(rslt);
    9dd4:	687b      	ldr	r3, [r7, #4]
    9dd6:	4a16      	ldr	r2, [pc, #88]	; (9e30 <pubnub_get+0xa4>)
    9dd8:	5a9c      	ldrh	r4, [r3, r2]
    9dda:	68fb      	ldr	r3, [r7, #12]
    9ddc:	0018      	movs	r0, r3
    9dde:	4b15      	ldr	r3, [pc, #84]	; (9e34 <pubnub_get+0xa8>)
    9de0:	4798      	blx	r3
    9de2:	0003      	movs	r3, r0
    9de4:	b29b      	uxth	r3, r3
    9de6:	18e3      	adds	r3, r4, r3
    9de8:	b299      	uxth	r1, r3
    9dea:	687b      	ldr	r3, [r7, #4]
    9dec:	4a10      	ldr	r2, [pc, #64]	; (9e30 <pubnub_get+0xa4>)
    9dee:	5299      	strh	r1, [r3, r2]

		if (pb->msg_ofs++ <= pb->msg_end) {
    9df0:	687b      	ldr	r3, [r7, #4]
    9df2:	4a0f      	ldr	r2, [pc, #60]	; (9e30 <pubnub_get+0xa4>)
    9df4:	5a9b      	ldrh	r3, [r3, r2]
    9df6:	1c5a      	adds	r2, r3, #1
    9df8:	b290      	uxth	r0, r2
    9dfa:	687a      	ldr	r2, [r7, #4]
    9dfc:	490c      	ldr	r1, [pc, #48]	; (9e30 <pubnub_get+0xa4>)
    9dfe:	5250      	strh	r0, [r2, r1]
    9e00:	6879      	ldr	r1, [r7, #4]
    9e02:	22da      	movs	r2, #218	; 0xda
    9e04:	0092      	lsls	r2, r2, #2
    9e06:	5a8a      	ldrh	r2, [r1, r2]
    9e08:	4293      	cmp	r3, r2
    9e0a:	d801      	bhi.n	9e10 <pubnub_get+0x84>
			return rslt;
    9e0c:	68fb      	ldr	r3, [r7, #12]
    9e0e:	e000      	b.n	9e12 <pubnub_get+0x86>
		}
	}

	return NULL;
    9e10:	2300      	movs	r3, #0
}
    9e12:	0018      	movs	r0, r3
    9e14:	46bd      	mov	sp, r7
    9e16:	b005      	add	sp, #20
    9e18:	bd90      	pop	{r4, r7, pc}
    9e1a:	46c0      	nop			; (mov r8, r8)
    9e1c:	000098e1 	.word	0x000098e1
    9e20:	0000e12c 	.word	0x0000e12c
    9e24:	0000e30c 	.word	0x0000e30c
    9e28:	0000e140 	.word	0x0000e140
    9e2c:	0000ba5d 	.word	0x0000ba5d
    9e30:	00000366 	.word	0x00000366
    9e34:	0000c2ad 	.word	0x0000c2ad

00009e38 <__aeabi_uidiv>:
    9e38:	2200      	movs	r2, #0
    9e3a:	0843      	lsrs	r3, r0, #1
    9e3c:	428b      	cmp	r3, r1
    9e3e:	d374      	bcc.n	9f2a <__aeabi_uidiv+0xf2>
    9e40:	0903      	lsrs	r3, r0, #4
    9e42:	428b      	cmp	r3, r1
    9e44:	d35f      	bcc.n	9f06 <__aeabi_uidiv+0xce>
    9e46:	0a03      	lsrs	r3, r0, #8
    9e48:	428b      	cmp	r3, r1
    9e4a:	d344      	bcc.n	9ed6 <__aeabi_uidiv+0x9e>
    9e4c:	0b03      	lsrs	r3, r0, #12
    9e4e:	428b      	cmp	r3, r1
    9e50:	d328      	bcc.n	9ea4 <__aeabi_uidiv+0x6c>
    9e52:	0c03      	lsrs	r3, r0, #16
    9e54:	428b      	cmp	r3, r1
    9e56:	d30d      	bcc.n	9e74 <__aeabi_uidiv+0x3c>
    9e58:	22ff      	movs	r2, #255	; 0xff
    9e5a:	0209      	lsls	r1, r1, #8
    9e5c:	ba12      	rev	r2, r2
    9e5e:	0c03      	lsrs	r3, r0, #16
    9e60:	428b      	cmp	r3, r1
    9e62:	d302      	bcc.n	9e6a <__aeabi_uidiv+0x32>
    9e64:	1212      	asrs	r2, r2, #8
    9e66:	0209      	lsls	r1, r1, #8
    9e68:	d065      	beq.n	9f36 <__aeabi_uidiv+0xfe>
    9e6a:	0b03      	lsrs	r3, r0, #12
    9e6c:	428b      	cmp	r3, r1
    9e6e:	d319      	bcc.n	9ea4 <__aeabi_uidiv+0x6c>
    9e70:	e000      	b.n	9e74 <__aeabi_uidiv+0x3c>
    9e72:	0a09      	lsrs	r1, r1, #8
    9e74:	0bc3      	lsrs	r3, r0, #15
    9e76:	428b      	cmp	r3, r1
    9e78:	d301      	bcc.n	9e7e <__aeabi_uidiv+0x46>
    9e7a:	03cb      	lsls	r3, r1, #15
    9e7c:	1ac0      	subs	r0, r0, r3
    9e7e:	4152      	adcs	r2, r2
    9e80:	0b83      	lsrs	r3, r0, #14
    9e82:	428b      	cmp	r3, r1
    9e84:	d301      	bcc.n	9e8a <__aeabi_uidiv+0x52>
    9e86:	038b      	lsls	r3, r1, #14
    9e88:	1ac0      	subs	r0, r0, r3
    9e8a:	4152      	adcs	r2, r2
    9e8c:	0b43      	lsrs	r3, r0, #13
    9e8e:	428b      	cmp	r3, r1
    9e90:	d301      	bcc.n	9e96 <__aeabi_uidiv+0x5e>
    9e92:	034b      	lsls	r3, r1, #13
    9e94:	1ac0      	subs	r0, r0, r3
    9e96:	4152      	adcs	r2, r2
    9e98:	0b03      	lsrs	r3, r0, #12
    9e9a:	428b      	cmp	r3, r1
    9e9c:	d301      	bcc.n	9ea2 <__aeabi_uidiv+0x6a>
    9e9e:	030b      	lsls	r3, r1, #12
    9ea0:	1ac0      	subs	r0, r0, r3
    9ea2:	4152      	adcs	r2, r2
    9ea4:	0ac3      	lsrs	r3, r0, #11
    9ea6:	428b      	cmp	r3, r1
    9ea8:	d301      	bcc.n	9eae <__aeabi_uidiv+0x76>
    9eaa:	02cb      	lsls	r3, r1, #11
    9eac:	1ac0      	subs	r0, r0, r3
    9eae:	4152      	adcs	r2, r2
    9eb0:	0a83      	lsrs	r3, r0, #10
    9eb2:	428b      	cmp	r3, r1
    9eb4:	d301      	bcc.n	9eba <__aeabi_uidiv+0x82>
    9eb6:	028b      	lsls	r3, r1, #10
    9eb8:	1ac0      	subs	r0, r0, r3
    9eba:	4152      	adcs	r2, r2
    9ebc:	0a43      	lsrs	r3, r0, #9
    9ebe:	428b      	cmp	r3, r1
    9ec0:	d301      	bcc.n	9ec6 <__aeabi_uidiv+0x8e>
    9ec2:	024b      	lsls	r3, r1, #9
    9ec4:	1ac0      	subs	r0, r0, r3
    9ec6:	4152      	adcs	r2, r2
    9ec8:	0a03      	lsrs	r3, r0, #8
    9eca:	428b      	cmp	r3, r1
    9ecc:	d301      	bcc.n	9ed2 <__aeabi_uidiv+0x9a>
    9ece:	020b      	lsls	r3, r1, #8
    9ed0:	1ac0      	subs	r0, r0, r3
    9ed2:	4152      	adcs	r2, r2
    9ed4:	d2cd      	bcs.n	9e72 <__aeabi_uidiv+0x3a>
    9ed6:	09c3      	lsrs	r3, r0, #7
    9ed8:	428b      	cmp	r3, r1
    9eda:	d301      	bcc.n	9ee0 <__aeabi_uidiv+0xa8>
    9edc:	01cb      	lsls	r3, r1, #7
    9ede:	1ac0      	subs	r0, r0, r3
    9ee0:	4152      	adcs	r2, r2
    9ee2:	0983      	lsrs	r3, r0, #6
    9ee4:	428b      	cmp	r3, r1
    9ee6:	d301      	bcc.n	9eec <__aeabi_uidiv+0xb4>
    9ee8:	018b      	lsls	r3, r1, #6
    9eea:	1ac0      	subs	r0, r0, r3
    9eec:	4152      	adcs	r2, r2
    9eee:	0943      	lsrs	r3, r0, #5
    9ef0:	428b      	cmp	r3, r1
    9ef2:	d301      	bcc.n	9ef8 <__aeabi_uidiv+0xc0>
    9ef4:	014b      	lsls	r3, r1, #5
    9ef6:	1ac0      	subs	r0, r0, r3
    9ef8:	4152      	adcs	r2, r2
    9efa:	0903      	lsrs	r3, r0, #4
    9efc:	428b      	cmp	r3, r1
    9efe:	d301      	bcc.n	9f04 <__aeabi_uidiv+0xcc>
    9f00:	010b      	lsls	r3, r1, #4
    9f02:	1ac0      	subs	r0, r0, r3
    9f04:	4152      	adcs	r2, r2
    9f06:	08c3      	lsrs	r3, r0, #3
    9f08:	428b      	cmp	r3, r1
    9f0a:	d301      	bcc.n	9f10 <__aeabi_uidiv+0xd8>
    9f0c:	00cb      	lsls	r3, r1, #3
    9f0e:	1ac0      	subs	r0, r0, r3
    9f10:	4152      	adcs	r2, r2
    9f12:	0883      	lsrs	r3, r0, #2
    9f14:	428b      	cmp	r3, r1
    9f16:	d301      	bcc.n	9f1c <__aeabi_uidiv+0xe4>
    9f18:	008b      	lsls	r3, r1, #2
    9f1a:	1ac0      	subs	r0, r0, r3
    9f1c:	4152      	adcs	r2, r2
    9f1e:	0843      	lsrs	r3, r0, #1
    9f20:	428b      	cmp	r3, r1
    9f22:	d301      	bcc.n	9f28 <__aeabi_uidiv+0xf0>
    9f24:	004b      	lsls	r3, r1, #1
    9f26:	1ac0      	subs	r0, r0, r3
    9f28:	4152      	adcs	r2, r2
    9f2a:	1a41      	subs	r1, r0, r1
    9f2c:	d200      	bcs.n	9f30 <__aeabi_uidiv+0xf8>
    9f2e:	4601      	mov	r1, r0
    9f30:	4152      	adcs	r2, r2
    9f32:	4610      	mov	r0, r2
    9f34:	4770      	bx	lr
    9f36:	e7ff      	b.n	9f38 <__aeabi_uidiv+0x100>
    9f38:	b501      	push	{r0, lr}
    9f3a:	2000      	movs	r0, #0
    9f3c:	f000 f8f0 	bl	a120 <__aeabi_idiv0>
    9f40:	bd02      	pop	{r1, pc}
    9f42:	46c0      	nop			; (mov r8, r8)

00009f44 <__aeabi_uidivmod>:
    9f44:	2900      	cmp	r1, #0
    9f46:	d0f7      	beq.n	9f38 <__aeabi_uidiv+0x100>
    9f48:	e776      	b.n	9e38 <__aeabi_uidiv>
    9f4a:	4770      	bx	lr

00009f4c <__aeabi_idiv>:
    9f4c:	4603      	mov	r3, r0
    9f4e:	430b      	orrs	r3, r1
    9f50:	d47f      	bmi.n	a052 <__aeabi_idiv+0x106>
    9f52:	2200      	movs	r2, #0
    9f54:	0843      	lsrs	r3, r0, #1
    9f56:	428b      	cmp	r3, r1
    9f58:	d374      	bcc.n	a044 <__aeabi_idiv+0xf8>
    9f5a:	0903      	lsrs	r3, r0, #4
    9f5c:	428b      	cmp	r3, r1
    9f5e:	d35f      	bcc.n	a020 <__aeabi_idiv+0xd4>
    9f60:	0a03      	lsrs	r3, r0, #8
    9f62:	428b      	cmp	r3, r1
    9f64:	d344      	bcc.n	9ff0 <__aeabi_idiv+0xa4>
    9f66:	0b03      	lsrs	r3, r0, #12
    9f68:	428b      	cmp	r3, r1
    9f6a:	d328      	bcc.n	9fbe <__aeabi_idiv+0x72>
    9f6c:	0c03      	lsrs	r3, r0, #16
    9f6e:	428b      	cmp	r3, r1
    9f70:	d30d      	bcc.n	9f8e <__aeabi_idiv+0x42>
    9f72:	22ff      	movs	r2, #255	; 0xff
    9f74:	0209      	lsls	r1, r1, #8
    9f76:	ba12      	rev	r2, r2
    9f78:	0c03      	lsrs	r3, r0, #16
    9f7a:	428b      	cmp	r3, r1
    9f7c:	d302      	bcc.n	9f84 <__aeabi_idiv+0x38>
    9f7e:	1212      	asrs	r2, r2, #8
    9f80:	0209      	lsls	r1, r1, #8
    9f82:	d065      	beq.n	a050 <__aeabi_idiv+0x104>
    9f84:	0b03      	lsrs	r3, r0, #12
    9f86:	428b      	cmp	r3, r1
    9f88:	d319      	bcc.n	9fbe <__aeabi_idiv+0x72>
    9f8a:	e000      	b.n	9f8e <__aeabi_idiv+0x42>
    9f8c:	0a09      	lsrs	r1, r1, #8
    9f8e:	0bc3      	lsrs	r3, r0, #15
    9f90:	428b      	cmp	r3, r1
    9f92:	d301      	bcc.n	9f98 <__aeabi_idiv+0x4c>
    9f94:	03cb      	lsls	r3, r1, #15
    9f96:	1ac0      	subs	r0, r0, r3
    9f98:	4152      	adcs	r2, r2
    9f9a:	0b83      	lsrs	r3, r0, #14
    9f9c:	428b      	cmp	r3, r1
    9f9e:	d301      	bcc.n	9fa4 <__aeabi_idiv+0x58>
    9fa0:	038b      	lsls	r3, r1, #14
    9fa2:	1ac0      	subs	r0, r0, r3
    9fa4:	4152      	adcs	r2, r2
    9fa6:	0b43      	lsrs	r3, r0, #13
    9fa8:	428b      	cmp	r3, r1
    9faa:	d301      	bcc.n	9fb0 <__aeabi_idiv+0x64>
    9fac:	034b      	lsls	r3, r1, #13
    9fae:	1ac0      	subs	r0, r0, r3
    9fb0:	4152      	adcs	r2, r2
    9fb2:	0b03      	lsrs	r3, r0, #12
    9fb4:	428b      	cmp	r3, r1
    9fb6:	d301      	bcc.n	9fbc <__aeabi_idiv+0x70>
    9fb8:	030b      	lsls	r3, r1, #12
    9fba:	1ac0      	subs	r0, r0, r3
    9fbc:	4152      	adcs	r2, r2
    9fbe:	0ac3      	lsrs	r3, r0, #11
    9fc0:	428b      	cmp	r3, r1
    9fc2:	d301      	bcc.n	9fc8 <__aeabi_idiv+0x7c>
    9fc4:	02cb      	lsls	r3, r1, #11
    9fc6:	1ac0      	subs	r0, r0, r3
    9fc8:	4152      	adcs	r2, r2
    9fca:	0a83      	lsrs	r3, r0, #10
    9fcc:	428b      	cmp	r3, r1
    9fce:	d301      	bcc.n	9fd4 <__aeabi_idiv+0x88>
    9fd0:	028b      	lsls	r3, r1, #10
    9fd2:	1ac0      	subs	r0, r0, r3
    9fd4:	4152      	adcs	r2, r2
    9fd6:	0a43      	lsrs	r3, r0, #9
    9fd8:	428b      	cmp	r3, r1
    9fda:	d301      	bcc.n	9fe0 <__aeabi_idiv+0x94>
    9fdc:	024b      	lsls	r3, r1, #9
    9fde:	1ac0      	subs	r0, r0, r3
    9fe0:	4152      	adcs	r2, r2
    9fe2:	0a03      	lsrs	r3, r0, #8
    9fe4:	428b      	cmp	r3, r1
    9fe6:	d301      	bcc.n	9fec <__aeabi_idiv+0xa0>
    9fe8:	020b      	lsls	r3, r1, #8
    9fea:	1ac0      	subs	r0, r0, r3
    9fec:	4152      	adcs	r2, r2
    9fee:	d2cd      	bcs.n	9f8c <__aeabi_idiv+0x40>
    9ff0:	09c3      	lsrs	r3, r0, #7
    9ff2:	428b      	cmp	r3, r1
    9ff4:	d301      	bcc.n	9ffa <__aeabi_idiv+0xae>
    9ff6:	01cb      	lsls	r3, r1, #7
    9ff8:	1ac0      	subs	r0, r0, r3
    9ffa:	4152      	adcs	r2, r2
    9ffc:	0983      	lsrs	r3, r0, #6
    9ffe:	428b      	cmp	r3, r1
    a000:	d301      	bcc.n	a006 <__aeabi_idiv+0xba>
    a002:	018b      	lsls	r3, r1, #6
    a004:	1ac0      	subs	r0, r0, r3
    a006:	4152      	adcs	r2, r2
    a008:	0943      	lsrs	r3, r0, #5
    a00a:	428b      	cmp	r3, r1
    a00c:	d301      	bcc.n	a012 <__aeabi_idiv+0xc6>
    a00e:	014b      	lsls	r3, r1, #5
    a010:	1ac0      	subs	r0, r0, r3
    a012:	4152      	adcs	r2, r2
    a014:	0903      	lsrs	r3, r0, #4
    a016:	428b      	cmp	r3, r1
    a018:	d301      	bcc.n	a01e <__aeabi_idiv+0xd2>
    a01a:	010b      	lsls	r3, r1, #4
    a01c:	1ac0      	subs	r0, r0, r3
    a01e:	4152      	adcs	r2, r2
    a020:	08c3      	lsrs	r3, r0, #3
    a022:	428b      	cmp	r3, r1
    a024:	d301      	bcc.n	a02a <__aeabi_idiv+0xde>
    a026:	00cb      	lsls	r3, r1, #3
    a028:	1ac0      	subs	r0, r0, r3
    a02a:	4152      	adcs	r2, r2
    a02c:	0883      	lsrs	r3, r0, #2
    a02e:	428b      	cmp	r3, r1
    a030:	d301      	bcc.n	a036 <__aeabi_idiv+0xea>
    a032:	008b      	lsls	r3, r1, #2
    a034:	1ac0      	subs	r0, r0, r3
    a036:	4152      	adcs	r2, r2
    a038:	0843      	lsrs	r3, r0, #1
    a03a:	428b      	cmp	r3, r1
    a03c:	d301      	bcc.n	a042 <__aeabi_idiv+0xf6>
    a03e:	004b      	lsls	r3, r1, #1
    a040:	1ac0      	subs	r0, r0, r3
    a042:	4152      	adcs	r2, r2
    a044:	1a41      	subs	r1, r0, r1
    a046:	d200      	bcs.n	a04a <__aeabi_idiv+0xfe>
    a048:	4601      	mov	r1, r0
    a04a:	4152      	adcs	r2, r2
    a04c:	4610      	mov	r0, r2
    a04e:	4770      	bx	lr
    a050:	e05d      	b.n	a10e <__aeabi_idiv+0x1c2>
    a052:	0fca      	lsrs	r2, r1, #31
    a054:	d000      	beq.n	a058 <__aeabi_idiv+0x10c>
    a056:	4249      	negs	r1, r1
    a058:	1003      	asrs	r3, r0, #32
    a05a:	d300      	bcc.n	a05e <__aeabi_idiv+0x112>
    a05c:	4240      	negs	r0, r0
    a05e:	4053      	eors	r3, r2
    a060:	2200      	movs	r2, #0
    a062:	469c      	mov	ip, r3
    a064:	0903      	lsrs	r3, r0, #4
    a066:	428b      	cmp	r3, r1
    a068:	d32d      	bcc.n	a0c6 <__aeabi_idiv+0x17a>
    a06a:	0a03      	lsrs	r3, r0, #8
    a06c:	428b      	cmp	r3, r1
    a06e:	d312      	bcc.n	a096 <__aeabi_idiv+0x14a>
    a070:	22fc      	movs	r2, #252	; 0xfc
    a072:	0189      	lsls	r1, r1, #6
    a074:	ba12      	rev	r2, r2
    a076:	0a03      	lsrs	r3, r0, #8
    a078:	428b      	cmp	r3, r1
    a07a:	d30c      	bcc.n	a096 <__aeabi_idiv+0x14a>
    a07c:	0189      	lsls	r1, r1, #6
    a07e:	1192      	asrs	r2, r2, #6
    a080:	428b      	cmp	r3, r1
    a082:	d308      	bcc.n	a096 <__aeabi_idiv+0x14a>
    a084:	0189      	lsls	r1, r1, #6
    a086:	1192      	asrs	r2, r2, #6
    a088:	428b      	cmp	r3, r1
    a08a:	d304      	bcc.n	a096 <__aeabi_idiv+0x14a>
    a08c:	0189      	lsls	r1, r1, #6
    a08e:	d03a      	beq.n	a106 <__aeabi_idiv+0x1ba>
    a090:	1192      	asrs	r2, r2, #6
    a092:	e000      	b.n	a096 <__aeabi_idiv+0x14a>
    a094:	0989      	lsrs	r1, r1, #6
    a096:	09c3      	lsrs	r3, r0, #7
    a098:	428b      	cmp	r3, r1
    a09a:	d301      	bcc.n	a0a0 <__aeabi_idiv+0x154>
    a09c:	01cb      	lsls	r3, r1, #7
    a09e:	1ac0      	subs	r0, r0, r3
    a0a0:	4152      	adcs	r2, r2
    a0a2:	0983      	lsrs	r3, r0, #6
    a0a4:	428b      	cmp	r3, r1
    a0a6:	d301      	bcc.n	a0ac <__aeabi_idiv+0x160>
    a0a8:	018b      	lsls	r3, r1, #6
    a0aa:	1ac0      	subs	r0, r0, r3
    a0ac:	4152      	adcs	r2, r2
    a0ae:	0943      	lsrs	r3, r0, #5
    a0b0:	428b      	cmp	r3, r1
    a0b2:	d301      	bcc.n	a0b8 <__aeabi_idiv+0x16c>
    a0b4:	014b      	lsls	r3, r1, #5
    a0b6:	1ac0      	subs	r0, r0, r3
    a0b8:	4152      	adcs	r2, r2
    a0ba:	0903      	lsrs	r3, r0, #4
    a0bc:	428b      	cmp	r3, r1
    a0be:	d301      	bcc.n	a0c4 <__aeabi_idiv+0x178>
    a0c0:	010b      	lsls	r3, r1, #4
    a0c2:	1ac0      	subs	r0, r0, r3
    a0c4:	4152      	adcs	r2, r2
    a0c6:	08c3      	lsrs	r3, r0, #3
    a0c8:	428b      	cmp	r3, r1
    a0ca:	d301      	bcc.n	a0d0 <__aeabi_idiv+0x184>
    a0cc:	00cb      	lsls	r3, r1, #3
    a0ce:	1ac0      	subs	r0, r0, r3
    a0d0:	4152      	adcs	r2, r2
    a0d2:	0883      	lsrs	r3, r0, #2
    a0d4:	428b      	cmp	r3, r1
    a0d6:	d301      	bcc.n	a0dc <__aeabi_idiv+0x190>
    a0d8:	008b      	lsls	r3, r1, #2
    a0da:	1ac0      	subs	r0, r0, r3
    a0dc:	4152      	adcs	r2, r2
    a0de:	d2d9      	bcs.n	a094 <__aeabi_idiv+0x148>
    a0e0:	0843      	lsrs	r3, r0, #1
    a0e2:	428b      	cmp	r3, r1
    a0e4:	d301      	bcc.n	a0ea <__aeabi_idiv+0x19e>
    a0e6:	004b      	lsls	r3, r1, #1
    a0e8:	1ac0      	subs	r0, r0, r3
    a0ea:	4152      	adcs	r2, r2
    a0ec:	1a41      	subs	r1, r0, r1
    a0ee:	d200      	bcs.n	a0f2 <__aeabi_idiv+0x1a6>
    a0f0:	4601      	mov	r1, r0
    a0f2:	4663      	mov	r3, ip
    a0f4:	4152      	adcs	r2, r2
    a0f6:	105b      	asrs	r3, r3, #1
    a0f8:	4610      	mov	r0, r2
    a0fa:	d301      	bcc.n	a100 <__aeabi_idiv+0x1b4>
    a0fc:	4240      	negs	r0, r0
    a0fe:	2b00      	cmp	r3, #0
    a100:	d500      	bpl.n	a104 <__aeabi_idiv+0x1b8>
    a102:	4249      	negs	r1, r1
    a104:	4770      	bx	lr
    a106:	4663      	mov	r3, ip
    a108:	105b      	asrs	r3, r3, #1
    a10a:	d300      	bcc.n	a10e <__aeabi_idiv+0x1c2>
    a10c:	4240      	negs	r0, r0
    a10e:	b501      	push	{r0, lr}
    a110:	2000      	movs	r0, #0
    a112:	f000 f805 	bl	a120 <__aeabi_idiv0>
    a116:	bd02      	pop	{r1, pc}

0000a118 <__aeabi_idivmod>:
    a118:	2900      	cmp	r1, #0
    a11a:	d0f8      	beq.n	a10e <__aeabi_idiv+0x1c2>
    a11c:	e716      	b.n	9f4c <__aeabi_idiv>
    a11e:	4770      	bx	lr

0000a120 <__aeabi_idiv0>:
    a120:	4770      	bx	lr
    a122:	46c0      	nop			; (mov r8, r8)

0000a124 <__aeabi_dadd>:
    a124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a126:	4656      	mov	r6, sl
    a128:	465f      	mov	r7, fp
    a12a:	464d      	mov	r5, r9
    a12c:	4644      	mov	r4, r8
    a12e:	b4f0      	push	{r4, r5, r6, r7}
    a130:	000f      	movs	r7, r1
    a132:	0ffd      	lsrs	r5, r7, #31
    a134:	46aa      	mov	sl, r5
    a136:	0309      	lsls	r1, r1, #12
    a138:	007c      	lsls	r4, r7, #1
    a13a:	002e      	movs	r6, r5
    a13c:	005f      	lsls	r7, r3, #1
    a13e:	0f45      	lsrs	r5, r0, #29
    a140:	0a49      	lsrs	r1, r1, #9
    a142:	0d7f      	lsrs	r7, r7, #21
    a144:	4329      	orrs	r1, r5
    a146:	00c5      	lsls	r5, r0, #3
    a148:	0318      	lsls	r0, r3, #12
    a14a:	46bc      	mov	ip, r7
    a14c:	0a40      	lsrs	r0, r0, #9
    a14e:	0f57      	lsrs	r7, r2, #29
    a150:	0d64      	lsrs	r4, r4, #21
    a152:	0fdb      	lsrs	r3, r3, #31
    a154:	4338      	orrs	r0, r7
    a156:	00d2      	lsls	r2, r2, #3
    a158:	459a      	cmp	sl, r3
    a15a:	d100      	bne.n	a15e <__aeabi_dadd+0x3a>
    a15c:	e0aa      	b.n	a2b4 <__aeabi_dadd+0x190>
    a15e:	4666      	mov	r6, ip
    a160:	1ba6      	subs	r6, r4, r6
    a162:	2e00      	cmp	r6, #0
    a164:	dc00      	bgt.n	a168 <__aeabi_dadd+0x44>
    a166:	e0ff      	b.n	a368 <__aeabi_dadd+0x244>
    a168:	4663      	mov	r3, ip
    a16a:	2b00      	cmp	r3, #0
    a16c:	d139      	bne.n	a1e2 <__aeabi_dadd+0xbe>
    a16e:	0003      	movs	r3, r0
    a170:	4313      	orrs	r3, r2
    a172:	d000      	beq.n	a176 <__aeabi_dadd+0x52>
    a174:	e0d9      	b.n	a32a <__aeabi_dadd+0x206>
    a176:	076b      	lsls	r3, r5, #29
    a178:	d009      	beq.n	a18e <__aeabi_dadd+0x6a>
    a17a:	230f      	movs	r3, #15
    a17c:	402b      	ands	r3, r5
    a17e:	2b04      	cmp	r3, #4
    a180:	d005      	beq.n	a18e <__aeabi_dadd+0x6a>
    a182:	1d2b      	adds	r3, r5, #4
    a184:	42ab      	cmp	r3, r5
    a186:	41ad      	sbcs	r5, r5
    a188:	426d      	negs	r5, r5
    a18a:	1949      	adds	r1, r1, r5
    a18c:	001d      	movs	r5, r3
    a18e:	020b      	lsls	r3, r1, #8
    a190:	d400      	bmi.n	a194 <__aeabi_dadd+0x70>
    a192:	e082      	b.n	a29a <__aeabi_dadd+0x176>
    a194:	4bca      	ldr	r3, [pc, #808]	; (a4c0 <__aeabi_dadd+0x39c>)
    a196:	3401      	adds	r4, #1
    a198:	429c      	cmp	r4, r3
    a19a:	d100      	bne.n	a19e <__aeabi_dadd+0x7a>
    a19c:	e0fe      	b.n	a39c <__aeabi_dadd+0x278>
    a19e:	000a      	movs	r2, r1
    a1a0:	4656      	mov	r6, sl
    a1a2:	4bc8      	ldr	r3, [pc, #800]	; (a4c4 <__aeabi_dadd+0x3a0>)
    a1a4:	08ed      	lsrs	r5, r5, #3
    a1a6:	401a      	ands	r2, r3
    a1a8:	0750      	lsls	r0, r2, #29
    a1aa:	0564      	lsls	r4, r4, #21
    a1ac:	0252      	lsls	r2, r2, #9
    a1ae:	4305      	orrs	r5, r0
    a1b0:	0b12      	lsrs	r2, r2, #12
    a1b2:	0d64      	lsrs	r4, r4, #21
    a1b4:	2100      	movs	r1, #0
    a1b6:	0312      	lsls	r2, r2, #12
    a1b8:	0d0b      	lsrs	r3, r1, #20
    a1ba:	051b      	lsls	r3, r3, #20
    a1bc:	0564      	lsls	r4, r4, #21
    a1be:	0b12      	lsrs	r2, r2, #12
    a1c0:	431a      	orrs	r2, r3
    a1c2:	0863      	lsrs	r3, r4, #1
    a1c4:	4cc0      	ldr	r4, [pc, #768]	; (a4c8 <__aeabi_dadd+0x3a4>)
    a1c6:	07f6      	lsls	r6, r6, #31
    a1c8:	4014      	ands	r4, r2
    a1ca:	431c      	orrs	r4, r3
    a1cc:	0064      	lsls	r4, r4, #1
    a1ce:	0864      	lsrs	r4, r4, #1
    a1d0:	4334      	orrs	r4, r6
    a1d2:	0028      	movs	r0, r5
    a1d4:	0021      	movs	r1, r4
    a1d6:	bc3c      	pop	{r2, r3, r4, r5}
    a1d8:	4690      	mov	r8, r2
    a1da:	4699      	mov	r9, r3
    a1dc:	46a2      	mov	sl, r4
    a1de:	46ab      	mov	fp, r5
    a1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1e2:	4bb7      	ldr	r3, [pc, #732]	; (a4c0 <__aeabi_dadd+0x39c>)
    a1e4:	429c      	cmp	r4, r3
    a1e6:	d0c6      	beq.n	a176 <__aeabi_dadd+0x52>
    a1e8:	2380      	movs	r3, #128	; 0x80
    a1ea:	041b      	lsls	r3, r3, #16
    a1ec:	4318      	orrs	r0, r3
    a1ee:	2e38      	cmp	r6, #56	; 0x38
    a1f0:	dd00      	ble.n	a1f4 <__aeabi_dadd+0xd0>
    a1f2:	e0eb      	b.n	a3cc <__aeabi_dadd+0x2a8>
    a1f4:	2e1f      	cmp	r6, #31
    a1f6:	dd00      	ble.n	a1fa <__aeabi_dadd+0xd6>
    a1f8:	e11e      	b.n	a438 <__aeabi_dadd+0x314>
    a1fa:	2320      	movs	r3, #32
    a1fc:	1b9b      	subs	r3, r3, r6
    a1fe:	469c      	mov	ip, r3
    a200:	0003      	movs	r3, r0
    a202:	4667      	mov	r7, ip
    a204:	40bb      	lsls	r3, r7
    a206:	4698      	mov	r8, r3
    a208:	0013      	movs	r3, r2
    a20a:	4647      	mov	r7, r8
    a20c:	40f3      	lsrs	r3, r6
    a20e:	433b      	orrs	r3, r7
    a210:	4667      	mov	r7, ip
    a212:	40ba      	lsls	r2, r7
    a214:	1e57      	subs	r7, r2, #1
    a216:	41ba      	sbcs	r2, r7
    a218:	4313      	orrs	r3, r2
    a21a:	0002      	movs	r2, r0
    a21c:	40f2      	lsrs	r2, r6
    a21e:	1aeb      	subs	r3, r5, r3
    a220:	429d      	cmp	r5, r3
    a222:	41b6      	sbcs	r6, r6
    a224:	001d      	movs	r5, r3
    a226:	1a8a      	subs	r2, r1, r2
    a228:	4276      	negs	r6, r6
    a22a:	1b91      	subs	r1, r2, r6
    a22c:	020b      	lsls	r3, r1, #8
    a22e:	d531      	bpl.n	a294 <__aeabi_dadd+0x170>
    a230:	024a      	lsls	r2, r1, #9
    a232:	0a56      	lsrs	r6, r2, #9
    a234:	2e00      	cmp	r6, #0
    a236:	d100      	bne.n	a23a <__aeabi_dadd+0x116>
    a238:	e0b4      	b.n	a3a4 <__aeabi_dadd+0x280>
    a23a:	0030      	movs	r0, r6
    a23c:	f001 fbf0 	bl	ba20 <__clzsi2>
    a240:	0003      	movs	r3, r0
    a242:	3b08      	subs	r3, #8
    a244:	2b1f      	cmp	r3, #31
    a246:	dd00      	ble.n	a24a <__aeabi_dadd+0x126>
    a248:	e0b5      	b.n	a3b6 <__aeabi_dadd+0x292>
    a24a:	2220      	movs	r2, #32
    a24c:	0029      	movs	r1, r5
    a24e:	1ad2      	subs	r2, r2, r3
    a250:	40d1      	lsrs	r1, r2
    a252:	409e      	lsls	r6, r3
    a254:	000a      	movs	r2, r1
    a256:	409d      	lsls	r5, r3
    a258:	4332      	orrs	r2, r6
    a25a:	429c      	cmp	r4, r3
    a25c:	dd00      	ble.n	a260 <__aeabi_dadd+0x13c>
    a25e:	e0b1      	b.n	a3c4 <__aeabi_dadd+0x2a0>
    a260:	1b1c      	subs	r4, r3, r4
    a262:	1c63      	adds	r3, r4, #1
    a264:	2b1f      	cmp	r3, #31
    a266:	dd00      	ble.n	a26a <__aeabi_dadd+0x146>
    a268:	e0d5      	b.n	a416 <__aeabi_dadd+0x2f2>
    a26a:	2120      	movs	r1, #32
    a26c:	0014      	movs	r4, r2
    a26e:	0028      	movs	r0, r5
    a270:	1ac9      	subs	r1, r1, r3
    a272:	408c      	lsls	r4, r1
    a274:	40d8      	lsrs	r0, r3
    a276:	408d      	lsls	r5, r1
    a278:	4304      	orrs	r4, r0
    a27a:	40da      	lsrs	r2, r3
    a27c:	1e68      	subs	r0, r5, #1
    a27e:	4185      	sbcs	r5, r0
    a280:	0011      	movs	r1, r2
    a282:	4325      	orrs	r5, r4
    a284:	2400      	movs	r4, #0
    a286:	e776      	b.n	a176 <__aeabi_dadd+0x52>
    a288:	4641      	mov	r1, r8
    a28a:	4331      	orrs	r1, r6
    a28c:	d100      	bne.n	a290 <__aeabi_dadd+0x16c>
    a28e:	e234      	b.n	a6fa <__aeabi_dadd+0x5d6>
    a290:	0031      	movs	r1, r6
    a292:	4645      	mov	r5, r8
    a294:	076b      	lsls	r3, r5, #29
    a296:	d000      	beq.n	a29a <__aeabi_dadd+0x176>
    a298:	e76f      	b.n	a17a <__aeabi_dadd+0x56>
    a29a:	4656      	mov	r6, sl
    a29c:	0748      	lsls	r0, r1, #29
    a29e:	08ed      	lsrs	r5, r5, #3
    a2a0:	08c9      	lsrs	r1, r1, #3
    a2a2:	4305      	orrs	r5, r0
    a2a4:	4b86      	ldr	r3, [pc, #536]	; (a4c0 <__aeabi_dadd+0x39c>)
    a2a6:	429c      	cmp	r4, r3
    a2a8:	d035      	beq.n	a316 <__aeabi_dadd+0x1f2>
    a2aa:	030a      	lsls	r2, r1, #12
    a2ac:	0564      	lsls	r4, r4, #21
    a2ae:	0b12      	lsrs	r2, r2, #12
    a2b0:	0d64      	lsrs	r4, r4, #21
    a2b2:	e77f      	b.n	a1b4 <__aeabi_dadd+0x90>
    a2b4:	4663      	mov	r3, ip
    a2b6:	1ae3      	subs	r3, r4, r3
    a2b8:	469b      	mov	fp, r3
    a2ba:	2b00      	cmp	r3, #0
    a2bc:	dc00      	bgt.n	a2c0 <__aeabi_dadd+0x19c>
    a2be:	e08b      	b.n	a3d8 <__aeabi_dadd+0x2b4>
    a2c0:	4667      	mov	r7, ip
    a2c2:	2f00      	cmp	r7, #0
    a2c4:	d03c      	beq.n	a340 <__aeabi_dadd+0x21c>
    a2c6:	4f7e      	ldr	r7, [pc, #504]	; (a4c0 <__aeabi_dadd+0x39c>)
    a2c8:	42bc      	cmp	r4, r7
    a2ca:	d100      	bne.n	a2ce <__aeabi_dadd+0x1aa>
    a2cc:	e753      	b.n	a176 <__aeabi_dadd+0x52>
    a2ce:	2780      	movs	r7, #128	; 0x80
    a2d0:	043f      	lsls	r7, r7, #16
    a2d2:	4338      	orrs	r0, r7
    a2d4:	465b      	mov	r3, fp
    a2d6:	2b38      	cmp	r3, #56	; 0x38
    a2d8:	dc00      	bgt.n	a2dc <__aeabi_dadd+0x1b8>
    a2da:	e0f7      	b.n	a4cc <__aeabi_dadd+0x3a8>
    a2dc:	4302      	orrs	r2, r0
    a2de:	1e50      	subs	r0, r2, #1
    a2e0:	4182      	sbcs	r2, r0
    a2e2:	2000      	movs	r0, #0
    a2e4:	b2d2      	uxtb	r2, r2
    a2e6:	1953      	adds	r3, r2, r5
    a2e8:	1842      	adds	r2, r0, r1
    a2ea:	42ab      	cmp	r3, r5
    a2ec:	4189      	sbcs	r1, r1
    a2ee:	001d      	movs	r5, r3
    a2f0:	4249      	negs	r1, r1
    a2f2:	1889      	adds	r1, r1, r2
    a2f4:	020b      	lsls	r3, r1, #8
    a2f6:	d5cd      	bpl.n	a294 <__aeabi_dadd+0x170>
    a2f8:	4b71      	ldr	r3, [pc, #452]	; (a4c0 <__aeabi_dadd+0x39c>)
    a2fa:	3401      	adds	r4, #1
    a2fc:	429c      	cmp	r4, r3
    a2fe:	d100      	bne.n	a302 <__aeabi_dadd+0x1de>
    a300:	e13d      	b.n	a57e <__aeabi_dadd+0x45a>
    a302:	2001      	movs	r0, #1
    a304:	4a6f      	ldr	r2, [pc, #444]	; (a4c4 <__aeabi_dadd+0x3a0>)
    a306:	086b      	lsrs	r3, r5, #1
    a308:	400a      	ands	r2, r1
    a30a:	4028      	ands	r0, r5
    a30c:	4318      	orrs	r0, r3
    a30e:	07d5      	lsls	r5, r2, #31
    a310:	4305      	orrs	r5, r0
    a312:	0851      	lsrs	r1, r2, #1
    a314:	e72f      	b.n	a176 <__aeabi_dadd+0x52>
    a316:	002b      	movs	r3, r5
    a318:	430b      	orrs	r3, r1
    a31a:	d100      	bne.n	a31e <__aeabi_dadd+0x1fa>
    a31c:	e1cb      	b.n	a6b6 <__aeabi_dadd+0x592>
    a31e:	2380      	movs	r3, #128	; 0x80
    a320:	031b      	lsls	r3, r3, #12
    a322:	430b      	orrs	r3, r1
    a324:	031a      	lsls	r2, r3, #12
    a326:	0b12      	lsrs	r2, r2, #12
    a328:	e744      	b.n	a1b4 <__aeabi_dadd+0x90>
    a32a:	3e01      	subs	r6, #1
    a32c:	2e00      	cmp	r6, #0
    a32e:	d16d      	bne.n	a40c <__aeabi_dadd+0x2e8>
    a330:	1aae      	subs	r6, r5, r2
    a332:	42b5      	cmp	r5, r6
    a334:	419b      	sbcs	r3, r3
    a336:	1a09      	subs	r1, r1, r0
    a338:	425b      	negs	r3, r3
    a33a:	1ac9      	subs	r1, r1, r3
    a33c:	0035      	movs	r5, r6
    a33e:	e775      	b.n	a22c <__aeabi_dadd+0x108>
    a340:	0007      	movs	r7, r0
    a342:	4317      	orrs	r7, r2
    a344:	d100      	bne.n	a348 <__aeabi_dadd+0x224>
    a346:	e716      	b.n	a176 <__aeabi_dadd+0x52>
    a348:	2301      	movs	r3, #1
    a34a:	425b      	negs	r3, r3
    a34c:	469c      	mov	ip, r3
    a34e:	44e3      	add	fp, ip
    a350:	465b      	mov	r3, fp
    a352:	2b00      	cmp	r3, #0
    a354:	d000      	beq.n	a358 <__aeabi_dadd+0x234>
    a356:	e0e0      	b.n	a51a <__aeabi_dadd+0x3f6>
    a358:	18aa      	adds	r2, r5, r2
    a35a:	42aa      	cmp	r2, r5
    a35c:	419b      	sbcs	r3, r3
    a35e:	1809      	adds	r1, r1, r0
    a360:	425b      	negs	r3, r3
    a362:	1859      	adds	r1, r3, r1
    a364:	0015      	movs	r5, r2
    a366:	e7c5      	b.n	a2f4 <__aeabi_dadd+0x1d0>
    a368:	2e00      	cmp	r6, #0
    a36a:	d175      	bne.n	a458 <__aeabi_dadd+0x334>
    a36c:	1c66      	adds	r6, r4, #1
    a36e:	0576      	lsls	r6, r6, #21
    a370:	0d76      	lsrs	r6, r6, #21
    a372:	2e01      	cmp	r6, #1
    a374:	dc00      	bgt.n	a378 <__aeabi_dadd+0x254>
    a376:	e0f3      	b.n	a560 <__aeabi_dadd+0x43c>
    a378:	1aae      	subs	r6, r5, r2
    a37a:	46b0      	mov	r8, r6
    a37c:	4545      	cmp	r5, r8
    a37e:	41bf      	sbcs	r7, r7
    a380:	1a0e      	subs	r6, r1, r0
    a382:	427f      	negs	r7, r7
    a384:	1bf6      	subs	r6, r6, r7
    a386:	0237      	lsls	r7, r6, #8
    a388:	d400      	bmi.n	a38c <__aeabi_dadd+0x268>
    a38a:	e08f      	b.n	a4ac <__aeabi_dadd+0x388>
    a38c:	1b55      	subs	r5, r2, r5
    a38e:	42aa      	cmp	r2, r5
    a390:	41b6      	sbcs	r6, r6
    a392:	1a41      	subs	r1, r0, r1
    a394:	4276      	negs	r6, r6
    a396:	1b8e      	subs	r6, r1, r6
    a398:	469a      	mov	sl, r3
    a39a:	e74b      	b.n	a234 <__aeabi_dadd+0x110>
    a39c:	4656      	mov	r6, sl
    a39e:	2200      	movs	r2, #0
    a3a0:	2500      	movs	r5, #0
    a3a2:	e707      	b.n	a1b4 <__aeabi_dadd+0x90>
    a3a4:	0028      	movs	r0, r5
    a3a6:	f001 fb3b 	bl	ba20 <__clzsi2>
    a3aa:	3020      	adds	r0, #32
    a3ac:	0003      	movs	r3, r0
    a3ae:	3b08      	subs	r3, #8
    a3b0:	2b1f      	cmp	r3, #31
    a3b2:	dc00      	bgt.n	a3b6 <__aeabi_dadd+0x292>
    a3b4:	e749      	b.n	a24a <__aeabi_dadd+0x126>
    a3b6:	002a      	movs	r2, r5
    a3b8:	3828      	subs	r0, #40	; 0x28
    a3ba:	4082      	lsls	r2, r0
    a3bc:	2500      	movs	r5, #0
    a3be:	429c      	cmp	r4, r3
    a3c0:	dc00      	bgt.n	a3c4 <__aeabi_dadd+0x2a0>
    a3c2:	e74d      	b.n	a260 <__aeabi_dadd+0x13c>
    a3c4:	493f      	ldr	r1, [pc, #252]	; (a4c4 <__aeabi_dadd+0x3a0>)
    a3c6:	1ae4      	subs	r4, r4, r3
    a3c8:	4011      	ands	r1, r2
    a3ca:	e6d4      	b.n	a176 <__aeabi_dadd+0x52>
    a3cc:	4302      	orrs	r2, r0
    a3ce:	1e50      	subs	r0, r2, #1
    a3d0:	4182      	sbcs	r2, r0
    a3d2:	b2d3      	uxtb	r3, r2
    a3d4:	2200      	movs	r2, #0
    a3d6:	e722      	b.n	a21e <__aeabi_dadd+0xfa>
    a3d8:	2b00      	cmp	r3, #0
    a3da:	d000      	beq.n	a3de <__aeabi_dadd+0x2ba>
    a3dc:	e0f3      	b.n	a5c6 <__aeabi_dadd+0x4a2>
    a3de:	1c63      	adds	r3, r4, #1
    a3e0:	469c      	mov	ip, r3
    a3e2:	055b      	lsls	r3, r3, #21
    a3e4:	0d5b      	lsrs	r3, r3, #21
    a3e6:	2b01      	cmp	r3, #1
    a3e8:	dc00      	bgt.n	a3ec <__aeabi_dadd+0x2c8>
    a3ea:	e09f      	b.n	a52c <__aeabi_dadd+0x408>
    a3ec:	4b34      	ldr	r3, [pc, #208]	; (a4c0 <__aeabi_dadd+0x39c>)
    a3ee:	459c      	cmp	ip, r3
    a3f0:	d100      	bne.n	a3f4 <__aeabi_dadd+0x2d0>
    a3f2:	e0c3      	b.n	a57c <__aeabi_dadd+0x458>
    a3f4:	18aa      	adds	r2, r5, r2
    a3f6:	1809      	adds	r1, r1, r0
    a3f8:	42aa      	cmp	r2, r5
    a3fa:	4180      	sbcs	r0, r0
    a3fc:	4240      	negs	r0, r0
    a3fe:	1841      	adds	r1, r0, r1
    a400:	07cd      	lsls	r5, r1, #31
    a402:	0852      	lsrs	r2, r2, #1
    a404:	4315      	orrs	r5, r2
    a406:	0849      	lsrs	r1, r1, #1
    a408:	4664      	mov	r4, ip
    a40a:	e6b4      	b.n	a176 <__aeabi_dadd+0x52>
    a40c:	4b2c      	ldr	r3, [pc, #176]	; (a4c0 <__aeabi_dadd+0x39c>)
    a40e:	429c      	cmp	r4, r3
    a410:	d000      	beq.n	a414 <__aeabi_dadd+0x2f0>
    a412:	e6ec      	b.n	a1ee <__aeabi_dadd+0xca>
    a414:	e6af      	b.n	a176 <__aeabi_dadd+0x52>
    a416:	0011      	movs	r1, r2
    a418:	3c1f      	subs	r4, #31
    a41a:	40e1      	lsrs	r1, r4
    a41c:	000c      	movs	r4, r1
    a41e:	2b20      	cmp	r3, #32
    a420:	d100      	bne.n	a424 <__aeabi_dadd+0x300>
    a422:	e07f      	b.n	a524 <__aeabi_dadd+0x400>
    a424:	2140      	movs	r1, #64	; 0x40
    a426:	1acb      	subs	r3, r1, r3
    a428:	409a      	lsls	r2, r3
    a42a:	4315      	orrs	r5, r2
    a42c:	1e6a      	subs	r2, r5, #1
    a42e:	4195      	sbcs	r5, r2
    a430:	2100      	movs	r1, #0
    a432:	4325      	orrs	r5, r4
    a434:	2400      	movs	r4, #0
    a436:	e72d      	b.n	a294 <__aeabi_dadd+0x170>
    a438:	0033      	movs	r3, r6
    a43a:	0007      	movs	r7, r0
    a43c:	3b20      	subs	r3, #32
    a43e:	40df      	lsrs	r7, r3
    a440:	003b      	movs	r3, r7
    a442:	2e20      	cmp	r6, #32
    a444:	d070      	beq.n	a528 <__aeabi_dadd+0x404>
    a446:	2740      	movs	r7, #64	; 0x40
    a448:	1bbe      	subs	r6, r7, r6
    a44a:	40b0      	lsls	r0, r6
    a44c:	4302      	orrs	r2, r0
    a44e:	1e50      	subs	r0, r2, #1
    a450:	4182      	sbcs	r2, r0
    a452:	4313      	orrs	r3, r2
    a454:	2200      	movs	r2, #0
    a456:	e6e2      	b.n	a21e <__aeabi_dadd+0xfa>
    a458:	2c00      	cmp	r4, #0
    a45a:	d04f      	beq.n	a4fc <__aeabi_dadd+0x3d8>
    a45c:	4c18      	ldr	r4, [pc, #96]	; (a4c0 <__aeabi_dadd+0x39c>)
    a45e:	45a4      	cmp	ip, r4
    a460:	d100      	bne.n	a464 <__aeabi_dadd+0x340>
    a462:	e0ab      	b.n	a5bc <__aeabi_dadd+0x498>
    a464:	2480      	movs	r4, #128	; 0x80
    a466:	0424      	lsls	r4, r4, #16
    a468:	4276      	negs	r6, r6
    a46a:	4321      	orrs	r1, r4
    a46c:	2e38      	cmp	r6, #56	; 0x38
    a46e:	dd00      	ble.n	a472 <__aeabi_dadd+0x34e>
    a470:	e0df      	b.n	a632 <__aeabi_dadd+0x50e>
    a472:	2e1f      	cmp	r6, #31
    a474:	dd00      	ble.n	a478 <__aeabi_dadd+0x354>
    a476:	e143      	b.n	a700 <__aeabi_dadd+0x5dc>
    a478:	2720      	movs	r7, #32
    a47a:	1bbc      	subs	r4, r7, r6
    a47c:	46a1      	mov	r9, r4
    a47e:	000c      	movs	r4, r1
    a480:	464f      	mov	r7, r9
    a482:	40bc      	lsls	r4, r7
    a484:	46a0      	mov	r8, r4
    a486:	002c      	movs	r4, r5
    a488:	4647      	mov	r7, r8
    a48a:	40f4      	lsrs	r4, r6
    a48c:	433c      	orrs	r4, r7
    a48e:	464f      	mov	r7, r9
    a490:	40bd      	lsls	r5, r7
    a492:	1e6f      	subs	r7, r5, #1
    a494:	41bd      	sbcs	r5, r7
    a496:	40f1      	lsrs	r1, r6
    a498:	432c      	orrs	r4, r5
    a49a:	1b15      	subs	r5, r2, r4
    a49c:	42aa      	cmp	r2, r5
    a49e:	4192      	sbcs	r2, r2
    a4a0:	1a41      	subs	r1, r0, r1
    a4a2:	4252      	negs	r2, r2
    a4a4:	1a89      	subs	r1, r1, r2
    a4a6:	4664      	mov	r4, ip
    a4a8:	469a      	mov	sl, r3
    a4aa:	e6bf      	b.n	a22c <__aeabi_dadd+0x108>
    a4ac:	4641      	mov	r1, r8
    a4ae:	4645      	mov	r5, r8
    a4b0:	4331      	orrs	r1, r6
    a4b2:	d000      	beq.n	a4b6 <__aeabi_dadd+0x392>
    a4b4:	e6be      	b.n	a234 <__aeabi_dadd+0x110>
    a4b6:	2600      	movs	r6, #0
    a4b8:	2400      	movs	r4, #0
    a4ba:	2500      	movs	r5, #0
    a4bc:	e6f2      	b.n	a2a4 <__aeabi_dadd+0x180>
    a4be:	46c0      	nop			; (mov r8, r8)
    a4c0:	000007ff 	.word	0x000007ff
    a4c4:	ff7fffff 	.word	0xff7fffff
    a4c8:	800fffff 	.word	0x800fffff
    a4cc:	2b1f      	cmp	r3, #31
    a4ce:	dc59      	bgt.n	a584 <__aeabi_dadd+0x460>
    a4d0:	2720      	movs	r7, #32
    a4d2:	1aff      	subs	r7, r7, r3
    a4d4:	46bc      	mov	ip, r7
    a4d6:	0007      	movs	r7, r0
    a4d8:	4663      	mov	r3, ip
    a4da:	409f      	lsls	r7, r3
    a4dc:	465b      	mov	r3, fp
    a4de:	46b9      	mov	r9, r7
    a4e0:	0017      	movs	r7, r2
    a4e2:	40df      	lsrs	r7, r3
    a4e4:	46b8      	mov	r8, r7
    a4e6:	464f      	mov	r7, r9
    a4e8:	4643      	mov	r3, r8
    a4ea:	431f      	orrs	r7, r3
    a4ec:	4663      	mov	r3, ip
    a4ee:	409a      	lsls	r2, r3
    a4f0:	1e53      	subs	r3, r2, #1
    a4f2:	419a      	sbcs	r2, r3
    a4f4:	465b      	mov	r3, fp
    a4f6:	433a      	orrs	r2, r7
    a4f8:	40d8      	lsrs	r0, r3
    a4fa:	e6f4      	b.n	a2e6 <__aeabi_dadd+0x1c2>
    a4fc:	000c      	movs	r4, r1
    a4fe:	432c      	orrs	r4, r5
    a500:	d05c      	beq.n	a5bc <__aeabi_dadd+0x498>
    a502:	43f6      	mvns	r6, r6
    a504:	2e00      	cmp	r6, #0
    a506:	d155      	bne.n	a5b4 <__aeabi_dadd+0x490>
    a508:	1b55      	subs	r5, r2, r5
    a50a:	42aa      	cmp	r2, r5
    a50c:	41a4      	sbcs	r4, r4
    a50e:	1a41      	subs	r1, r0, r1
    a510:	4264      	negs	r4, r4
    a512:	1b09      	subs	r1, r1, r4
    a514:	469a      	mov	sl, r3
    a516:	4664      	mov	r4, ip
    a518:	e688      	b.n	a22c <__aeabi_dadd+0x108>
    a51a:	4f96      	ldr	r7, [pc, #600]	; (a774 <__aeabi_dadd+0x650>)
    a51c:	42bc      	cmp	r4, r7
    a51e:	d000      	beq.n	a522 <__aeabi_dadd+0x3fe>
    a520:	e6d8      	b.n	a2d4 <__aeabi_dadd+0x1b0>
    a522:	e628      	b.n	a176 <__aeabi_dadd+0x52>
    a524:	2200      	movs	r2, #0
    a526:	e780      	b.n	a42a <__aeabi_dadd+0x306>
    a528:	2000      	movs	r0, #0
    a52a:	e78f      	b.n	a44c <__aeabi_dadd+0x328>
    a52c:	000b      	movs	r3, r1
    a52e:	432b      	orrs	r3, r5
    a530:	2c00      	cmp	r4, #0
    a532:	d000      	beq.n	a536 <__aeabi_dadd+0x412>
    a534:	e0c2      	b.n	a6bc <__aeabi_dadd+0x598>
    a536:	2b00      	cmp	r3, #0
    a538:	d100      	bne.n	a53c <__aeabi_dadd+0x418>
    a53a:	e101      	b.n	a740 <__aeabi_dadd+0x61c>
    a53c:	0003      	movs	r3, r0
    a53e:	4313      	orrs	r3, r2
    a540:	d100      	bne.n	a544 <__aeabi_dadd+0x420>
    a542:	e618      	b.n	a176 <__aeabi_dadd+0x52>
    a544:	18ab      	adds	r3, r5, r2
    a546:	42ab      	cmp	r3, r5
    a548:	41b6      	sbcs	r6, r6
    a54a:	1809      	adds	r1, r1, r0
    a54c:	4276      	negs	r6, r6
    a54e:	1871      	adds	r1, r6, r1
    a550:	020a      	lsls	r2, r1, #8
    a552:	d400      	bmi.n	a556 <__aeabi_dadd+0x432>
    a554:	e109      	b.n	a76a <__aeabi_dadd+0x646>
    a556:	4a88      	ldr	r2, [pc, #544]	; (a778 <__aeabi_dadd+0x654>)
    a558:	001d      	movs	r5, r3
    a55a:	4011      	ands	r1, r2
    a55c:	4664      	mov	r4, ip
    a55e:	e60a      	b.n	a176 <__aeabi_dadd+0x52>
    a560:	2c00      	cmp	r4, #0
    a562:	d15b      	bne.n	a61c <__aeabi_dadd+0x4f8>
    a564:	000e      	movs	r6, r1
    a566:	432e      	orrs	r6, r5
    a568:	d000      	beq.n	a56c <__aeabi_dadd+0x448>
    a56a:	e08a      	b.n	a682 <__aeabi_dadd+0x55e>
    a56c:	0001      	movs	r1, r0
    a56e:	4311      	orrs	r1, r2
    a570:	d100      	bne.n	a574 <__aeabi_dadd+0x450>
    a572:	e0c2      	b.n	a6fa <__aeabi_dadd+0x5d6>
    a574:	0001      	movs	r1, r0
    a576:	0015      	movs	r5, r2
    a578:	469a      	mov	sl, r3
    a57a:	e5fc      	b.n	a176 <__aeabi_dadd+0x52>
    a57c:	4664      	mov	r4, ip
    a57e:	2100      	movs	r1, #0
    a580:	2500      	movs	r5, #0
    a582:	e68f      	b.n	a2a4 <__aeabi_dadd+0x180>
    a584:	2320      	movs	r3, #32
    a586:	425b      	negs	r3, r3
    a588:	469c      	mov	ip, r3
    a58a:	44dc      	add	ip, fp
    a58c:	4663      	mov	r3, ip
    a58e:	0007      	movs	r7, r0
    a590:	40df      	lsrs	r7, r3
    a592:	465b      	mov	r3, fp
    a594:	46bc      	mov	ip, r7
    a596:	2b20      	cmp	r3, #32
    a598:	d100      	bne.n	a59c <__aeabi_dadd+0x478>
    a59a:	e0ac      	b.n	a6f6 <__aeabi_dadd+0x5d2>
    a59c:	2340      	movs	r3, #64	; 0x40
    a59e:	465f      	mov	r7, fp
    a5a0:	1bdb      	subs	r3, r3, r7
    a5a2:	4098      	lsls	r0, r3
    a5a4:	4302      	orrs	r2, r0
    a5a6:	1e50      	subs	r0, r2, #1
    a5a8:	4182      	sbcs	r2, r0
    a5aa:	4663      	mov	r3, ip
    a5ac:	4313      	orrs	r3, r2
    a5ae:	001a      	movs	r2, r3
    a5b0:	2000      	movs	r0, #0
    a5b2:	e698      	b.n	a2e6 <__aeabi_dadd+0x1c2>
    a5b4:	4c6f      	ldr	r4, [pc, #444]	; (a774 <__aeabi_dadd+0x650>)
    a5b6:	45a4      	cmp	ip, r4
    a5b8:	d000      	beq.n	a5bc <__aeabi_dadd+0x498>
    a5ba:	e757      	b.n	a46c <__aeabi_dadd+0x348>
    a5bc:	0001      	movs	r1, r0
    a5be:	0015      	movs	r5, r2
    a5c0:	4664      	mov	r4, ip
    a5c2:	469a      	mov	sl, r3
    a5c4:	e5d7      	b.n	a176 <__aeabi_dadd+0x52>
    a5c6:	2c00      	cmp	r4, #0
    a5c8:	d139      	bne.n	a63e <__aeabi_dadd+0x51a>
    a5ca:	000c      	movs	r4, r1
    a5cc:	432c      	orrs	r4, r5
    a5ce:	d06e      	beq.n	a6ae <__aeabi_dadd+0x58a>
    a5d0:	43db      	mvns	r3, r3
    a5d2:	2b00      	cmp	r3, #0
    a5d4:	d01a      	beq.n	a60c <__aeabi_dadd+0x4e8>
    a5d6:	4c67      	ldr	r4, [pc, #412]	; (a774 <__aeabi_dadd+0x650>)
    a5d8:	45a4      	cmp	ip, r4
    a5da:	d068      	beq.n	a6ae <__aeabi_dadd+0x58a>
    a5dc:	2b38      	cmp	r3, #56	; 0x38
    a5de:	dd00      	ble.n	a5e2 <__aeabi_dadd+0x4be>
    a5e0:	e0a4      	b.n	a72c <__aeabi_dadd+0x608>
    a5e2:	2b1f      	cmp	r3, #31
    a5e4:	dd00      	ble.n	a5e8 <__aeabi_dadd+0x4c4>
    a5e6:	e0ae      	b.n	a746 <__aeabi_dadd+0x622>
    a5e8:	2420      	movs	r4, #32
    a5ea:	000f      	movs	r7, r1
    a5ec:	1ae4      	subs	r4, r4, r3
    a5ee:	40a7      	lsls	r7, r4
    a5f0:	46b9      	mov	r9, r7
    a5f2:	002f      	movs	r7, r5
    a5f4:	40df      	lsrs	r7, r3
    a5f6:	46b8      	mov	r8, r7
    a5f8:	46a3      	mov	fp, r4
    a5fa:	464f      	mov	r7, r9
    a5fc:	4644      	mov	r4, r8
    a5fe:	4327      	orrs	r7, r4
    a600:	465c      	mov	r4, fp
    a602:	40a5      	lsls	r5, r4
    a604:	1e6c      	subs	r4, r5, #1
    a606:	41a5      	sbcs	r5, r4
    a608:	40d9      	lsrs	r1, r3
    a60a:	433d      	orrs	r5, r7
    a60c:	18ad      	adds	r5, r5, r2
    a60e:	4295      	cmp	r5, r2
    a610:	419b      	sbcs	r3, r3
    a612:	1809      	adds	r1, r1, r0
    a614:	425b      	negs	r3, r3
    a616:	1859      	adds	r1, r3, r1
    a618:	4664      	mov	r4, ip
    a61a:	e66b      	b.n	a2f4 <__aeabi_dadd+0x1d0>
    a61c:	000c      	movs	r4, r1
    a61e:	432c      	orrs	r4, r5
    a620:	d115      	bne.n	a64e <__aeabi_dadd+0x52a>
    a622:	0001      	movs	r1, r0
    a624:	4311      	orrs	r1, r2
    a626:	d07b      	beq.n	a720 <__aeabi_dadd+0x5fc>
    a628:	0001      	movs	r1, r0
    a62a:	0015      	movs	r5, r2
    a62c:	469a      	mov	sl, r3
    a62e:	4c51      	ldr	r4, [pc, #324]	; (a774 <__aeabi_dadd+0x650>)
    a630:	e5a1      	b.n	a176 <__aeabi_dadd+0x52>
    a632:	430d      	orrs	r5, r1
    a634:	1e69      	subs	r1, r5, #1
    a636:	418d      	sbcs	r5, r1
    a638:	2100      	movs	r1, #0
    a63a:	b2ec      	uxtb	r4, r5
    a63c:	e72d      	b.n	a49a <__aeabi_dadd+0x376>
    a63e:	4c4d      	ldr	r4, [pc, #308]	; (a774 <__aeabi_dadd+0x650>)
    a640:	45a4      	cmp	ip, r4
    a642:	d034      	beq.n	a6ae <__aeabi_dadd+0x58a>
    a644:	2480      	movs	r4, #128	; 0x80
    a646:	0424      	lsls	r4, r4, #16
    a648:	425b      	negs	r3, r3
    a64a:	4321      	orrs	r1, r4
    a64c:	e7c6      	b.n	a5dc <__aeabi_dadd+0x4b8>
    a64e:	0004      	movs	r4, r0
    a650:	4314      	orrs	r4, r2
    a652:	d04e      	beq.n	a6f2 <__aeabi_dadd+0x5ce>
    a654:	08ed      	lsrs	r5, r5, #3
    a656:	074c      	lsls	r4, r1, #29
    a658:	432c      	orrs	r4, r5
    a65a:	2580      	movs	r5, #128	; 0x80
    a65c:	08c9      	lsrs	r1, r1, #3
    a65e:	032d      	lsls	r5, r5, #12
    a660:	4229      	tst	r1, r5
    a662:	d008      	beq.n	a676 <__aeabi_dadd+0x552>
    a664:	08c6      	lsrs	r6, r0, #3
    a666:	422e      	tst	r6, r5
    a668:	d105      	bne.n	a676 <__aeabi_dadd+0x552>
    a66a:	08d2      	lsrs	r2, r2, #3
    a66c:	0741      	lsls	r1, r0, #29
    a66e:	4311      	orrs	r1, r2
    a670:	000c      	movs	r4, r1
    a672:	469a      	mov	sl, r3
    a674:	0031      	movs	r1, r6
    a676:	0f62      	lsrs	r2, r4, #29
    a678:	00c9      	lsls	r1, r1, #3
    a67a:	00e5      	lsls	r5, r4, #3
    a67c:	4311      	orrs	r1, r2
    a67e:	4c3d      	ldr	r4, [pc, #244]	; (a774 <__aeabi_dadd+0x650>)
    a680:	e579      	b.n	a176 <__aeabi_dadd+0x52>
    a682:	0006      	movs	r6, r0
    a684:	4316      	orrs	r6, r2
    a686:	d100      	bne.n	a68a <__aeabi_dadd+0x566>
    a688:	e575      	b.n	a176 <__aeabi_dadd+0x52>
    a68a:	1aae      	subs	r6, r5, r2
    a68c:	46b0      	mov	r8, r6
    a68e:	4545      	cmp	r5, r8
    a690:	41bf      	sbcs	r7, r7
    a692:	1a0e      	subs	r6, r1, r0
    a694:	427f      	negs	r7, r7
    a696:	1bf6      	subs	r6, r6, r7
    a698:	0237      	lsls	r7, r6, #8
    a69a:	d400      	bmi.n	a69e <__aeabi_dadd+0x57a>
    a69c:	e5f4      	b.n	a288 <__aeabi_dadd+0x164>
    a69e:	1b55      	subs	r5, r2, r5
    a6a0:	42aa      	cmp	r2, r5
    a6a2:	41b6      	sbcs	r6, r6
    a6a4:	1a41      	subs	r1, r0, r1
    a6a6:	4276      	negs	r6, r6
    a6a8:	1b89      	subs	r1, r1, r6
    a6aa:	469a      	mov	sl, r3
    a6ac:	e563      	b.n	a176 <__aeabi_dadd+0x52>
    a6ae:	0001      	movs	r1, r0
    a6b0:	0015      	movs	r5, r2
    a6b2:	4664      	mov	r4, ip
    a6b4:	e55f      	b.n	a176 <__aeabi_dadd+0x52>
    a6b6:	2200      	movs	r2, #0
    a6b8:	2500      	movs	r5, #0
    a6ba:	e57b      	b.n	a1b4 <__aeabi_dadd+0x90>
    a6bc:	2b00      	cmp	r3, #0
    a6be:	d03b      	beq.n	a738 <__aeabi_dadd+0x614>
    a6c0:	0003      	movs	r3, r0
    a6c2:	4313      	orrs	r3, r2
    a6c4:	d015      	beq.n	a6f2 <__aeabi_dadd+0x5ce>
    a6c6:	08ed      	lsrs	r5, r5, #3
    a6c8:	074b      	lsls	r3, r1, #29
    a6ca:	432b      	orrs	r3, r5
    a6cc:	2580      	movs	r5, #128	; 0x80
    a6ce:	08c9      	lsrs	r1, r1, #3
    a6d0:	032d      	lsls	r5, r5, #12
    a6d2:	4229      	tst	r1, r5
    a6d4:	d007      	beq.n	a6e6 <__aeabi_dadd+0x5c2>
    a6d6:	08c4      	lsrs	r4, r0, #3
    a6d8:	422c      	tst	r4, r5
    a6da:	d104      	bne.n	a6e6 <__aeabi_dadd+0x5c2>
    a6dc:	0741      	lsls	r1, r0, #29
    a6de:	000b      	movs	r3, r1
    a6e0:	0021      	movs	r1, r4
    a6e2:	08d2      	lsrs	r2, r2, #3
    a6e4:	4313      	orrs	r3, r2
    a6e6:	00c9      	lsls	r1, r1, #3
    a6e8:	0f5a      	lsrs	r2, r3, #29
    a6ea:	4311      	orrs	r1, r2
    a6ec:	00dd      	lsls	r5, r3, #3
    a6ee:	4c21      	ldr	r4, [pc, #132]	; (a774 <__aeabi_dadd+0x650>)
    a6f0:	e541      	b.n	a176 <__aeabi_dadd+0x52>
    a6f2:	4c20      	ldr	r4, [pc, #128]	; (a774 <__aeabi_dadd+0x650>)
    a6f4:	e53f      	b.n	a176 <__aeabi_dadd+0x52>
    a6f6:	2000      	movs	r0, #0
    a6f8:	e754      	b.n	a5a4 <__aeabi_dadd+0x480>
    a6fa:	2600      	movs	r6, #0
    a6fc:	2500      	movs	r5, #0
    a6fe:	e5d1      	b.n	a2a4 <__aeabi_dadd+0x180>
    a700:	0034      	movs	r4, r6
    a702:	000f      	movs	r7, r1
    a704:	3c20      	subs	r4, #32
    a706:	40e7      	lsrs	r7, r4
    a708:	003c      	movs	r4, r7
    a70a:	2e20      	cmp	r6, #32
    a70c:	d02b      	beq.n	a766 <__aeabi_dadd+0x642>
    a70e:	2740      	movs	r7, #64	; 0x40
    a710:	1bbe      	subs	r6, r7, r6
    a712:	40b1      	lsls	r1, r6
    a714:	430d      	orrs	r5, r1
    a716:	1e69      	subs	r1, r5, #1
    a718:	418d      	sbcs	r5, r1
    a71a:	2100      	movs	r1, #0
    a71c:	432c      	orrs	r4, r5
    a71e:	e6bc      	b.n	a49a <__aeabi_dadd+0x376>
    a720:	2180      	movs	r1, #128	; 0x80
    a722:	2600      	movs	r6, #0
    a724:	0309      	lsls	r1, r1, #12
    a726:	4c13      	ldr	r4, [pc, #76]	; (a774 <__aeabi_dadd+0x650>)
    a728:	2500      	movs	r5, #0
    a72a:	e5bb      	b.n	a2a4 <__aeabi_dadd+0x180>
    a72c:	430d      	orrs	r5, r1
    a72e:	1e69      	subs	r1, r5, #1
    a730:	418d      	sbcs	r5, r1
    a732:	2100      	movs	r1, #0
    a734:	b2ed      	uxtb	r5, r5
    a736:	e769      	b.n	a60c <__aeabi_dadd+0x4e8>
    a738:	0001      	movs	r1, r0
    a73a:	0015      	movs	r5, r2
    a73c:	4c0d      	ldr	r4, [pc, #52]	; (a774 <__aeabi_dadd+0x650>)
    a73e:	e51a      	b.n	a176 <__aeabi_dadd+0x52>
    a740:	0001      	movs	r1, r0
    a742:	0015      	movs	r5, r2
    a744:	e517      	b.n	a176 <__aeabi_dadd+0x52>
    a746:	001c      	movs	r4, r3
    a748:	000f      	movs	r7, r1
    a74a:	3c20      	subs	r4, #32
    a74c:	40e7      	lsrs	r7, r4
    a74e:	003c      	movs	r4, r7
    a750:	2b20      	cmp	r3, #32
    a752:	d00c      	beq.n	a76e <__aeabi_dadd+0x64a>
    a754:	2740      	movs	r7, #64	; 0x40
    a756:	1afb      	subs	r3, r7, r3
    a758:	4099      	lsls	r1, r3
    a75a:	430d      	orrs	r5, r1
    a75c:	1e69      	subs	r1, r5, #1
    a75e:	418d      	sbcs	r5, r1
    a760:	2100      	movs	r1, #0
    a762:	4325      	orrs	r5, r4
    a764:	e752      	b.n	a60c <__aeabi_dadd+0x4e8>
    a766:	2100      	movs	r1, #0
    a768:	e7d4      	b.n	a714 <__aeabi_dadd+0x5f0>
    a76a:	001d      	movs	r5, r3
    a76c:	e592      	b.n	a294 <__aeabi_dadd+0x170>
    a76e:	2100      	movs	r1, #0
    a770:	e7f3      	b.n	a75a <__aeabi_dadd+0x636>
    a772:	46c0      	nop			; (mov r8, r8)
    a774:	000007ff 	.word	0x000007ff
    a778:	ff7fffff 	.word	0xff7fffff

0000a77c <__aeabi_ddiv>:
    a77c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a77e:	4656      	mov	r6, sl
    a780:	464d      	mov	r5, r9
    a782:	4644      	mov	r4, r8
    a784:	465f      	mov	r7, fp
    a786:	b4f0      	push	{r4, r5, r6, r7}
    a788:	001d      	movs	r5, r3
    a78a:	030e      	lsls	r6, r1, #12
    a78c:	004c      	lsls	r4, r1, #1
    a78e:	0fcb      	lsrs	r3, r1, #31
    a790:	b087      	sub	sp, #28
    a792:	0007      	movs	r7, r0
    a794:	4692      	mov	sl, r2
    a796:	4681      	mov	r9, r0
    a798:	0b36      	lsrs	r6, r6, #12
    a79a:	0d64      	lsrs	r4, r4, #21
    a79c:	4698      	mov	r8, r3
    a79e:	d06a      	beq.n	a876 <__aeabi_ddiv+0xfa>
    a7a0:	4b6d      	ldr	r3, [pc, #436]	; (a958 <__aeabi_ddiv+0x1dc>)
    a7a2:	429c      	cmp	r4, r3
    a7a4:	d035      	beq.n	a812 <__aeabi_ddiv+0x96>
    a7a6:	2280      	movs	r2, #128	; 0x80
    a7a8:	0f43      	lsrs	r3, r0, #29
    a7aa:	0412      	lsls	r2, r2, #16
    a7ac:	4313      	orrs	r3, r2
    a7ae:	00f6      	lsls	r6, r6, #3
    a7b0:	431e      	orrs	r6, r3
    a7b2:	00c3      	lsls	r3, r0, #3
    a7b4:	4699      	mov	r9, r3
    a7b6:	4b69      	ldr	r3, [pc, #420]	; (a95c <__aeabi_ddiv+0x1e0>)
    a7b8:	2700      	movs	r7, #0
    a7ba:	469c      	mov	ip, r3
    a7bc:	2300      	movs	r3, #0
    a7be:	4464      	add	r4, ip
    a7c0:	9302      	str	r3, [sp, #8]
    a7c2:	032b      	lsls	r3, r5, #12
    a7c4:	0068      	lsls	r0, r5, #1
    a7c6:	0b1b      	lsrs	r3, r3, #12
    a7c8:	0fed      	lsrs	r5, r5, #31
    a7ca:	4651      	mov	r1, sl
    a7cc:	469b      	mov	fp, r3
    a7ce:	0d40      	lsrs	r0, r0, #21
    a7d0:	9500      	str	r5, [sp, #0]
    a7d2:	d100      	bne.n	a7d6 <__aeabi_ddiv+0x5a>
    a7d4:	e078      	b.n	a8c8 <__aeabi_ddiv+0x14c>
    a7d6:	4b60      	ldr	r3, [pc, #384]	; (a958 <__aeabi_ddiv+0x1dc>)
    a7d8:	4298      	cmp	r0, r3
    a7da:	d06c      	beq.n	a8b6 <__aeabi_ddiv+0x13a>
    a7dc:	465b      	mov	r3, fp
    a7de:	00da      	lsls	r2, r3, #3
    a7e0:	0f4b      	lsrs	r3, r1, #29
    a7e2:	2180      	movs	r1, #128	; 0x80
    a7e4:	0409      	lsls	r1, r1, #16
    a7e6:	430b      	orrs	r3, r1
    a7e8:	4313      	orrs	r3, r2
    a7ea:	469b      	mov	fp, r3
    a7ec:	4653      	mov	r3, sl
    a7ee:	00d9      	lsls	r1, r3, #3
    a7f0:	4b5a      	ldr	r3, [pc, #360]	; (a95c <__aeabi_ddiv+0x1e0>)
    a7f2:	469c      	mov	ip, r3
    a7f4:	2300      	movs	r3, #0
    a7f6:	4460      	add	r0, ip
    a7f8:	4642      	mov	r2, r8
    a7fa:	1a20      	subs	r0, r4, r0
    a7fc:	406a      	eors	r2, r5
    a7fe:	4692      	mov	sl, r2
    a800:	9001      	str	r0, [sp, #4]
    a802:	431f      	orrs	r7, r3
    a804:	2f0f      	cmp	r7, #15
    a806:	d900      	bls.n	a80a <__aeabi_ddiv+0x8e>
    a808:	e0b0      	b.n	a96c <__aeabi_ddiv+0x1f0>
    a80a:	4855      	ldr	r0, [pc, #340]	; (a960 <__aeabi_ddiv+0x1e4>)
    a80c:	00bf      	lsls	r7, r7, #2
    a80e:	59c0      	ldr	r0, [r0, r7]
    a810:	4687      	mov	pc, r0
    a812:	4337      	orrs	r7, r6
    a814:	d000      	beq.n	a818 <__aeabi_ddiv+0x9c>
    a816:	e088      	b.n	a92a <__aeabi_ddiv+0x1ae>
    a818:	2300      	movs	r3, #0
    a81a:	4699      	mov	r9, r3
    a81c:	3302      	adds	r3, #2
    a81e:	2708      	movs	r7, #8
    a820:	2600      	movs	r6, #0
    a822:	9302      	str	r3, [sp, #8]
    a824:	e7cd      	b.n	a7c2 <__aeabi_ddiv+0x46>
    a826:	4643      	mov	r3, r8
    a828:	46b3      	mov	fp, r6
    a82a:	4649      	mov	r1, r9
    a82c:	9300      	str	r3, [sp, #0]
    a82e:	9b02      	ldr	r3, [sp, #8]
    a830:	9a00      	ldr	r2, [sp, #0]
    a832:	4692      	mov	sl, r2
    a834:	2b02      	cmp	r3, #2
    a836:	d000      	beq.n	a83a <__aeabi_ddiv+0xbe>
    a838:	e1bf      	b.n	abba <__aeabi_ddiv+0x43e>
    a83a:	2100      	movs	r1, #0
    a83c:	4653      	mov	r3, sl
    a83e:	2201      	movs	r2, #1
    a840:	2600      	movs	r6, #0
    a842:	4689      	mov	r9, r1
    a844:	401a      	ands	r2, r3
    a846:	4b44      	ldr	r3, [pc, #272]	; (a958 <__aeabi_ddiv+0x1dc>)
    a848:	2100      	movs	r1, #0
    a84a:	0336      	lsls	r6, r6, #12
    a84c:	0d0c      	lsrs	r4, r1, #20
    a84e:	0524      	lsls	r4, r4, #20
    a850:	0b36      	lsrs	r6, r6, #12
    a852:	4326      	orrs	r6, r4
    a854:	4c43      	ldr	r4, [pc, #268]	; (a964 <__aeabi_ddiv+0x1e8>)
    a856:	051b      	lsls	r3, r3, #20
    a858:	4026      	ands	r6, r4
    a85a:	431e      	orrs	r6, r3
    a85c:	0076      	lsls	r6, r6, #1
    a85e:	07d2      	lsls	r2, r2, #31
    a860:	0876      	lsrs	r6, r6, #1
    a862:	4316      	orrs	r6, r2
    a864:	4648      	mov	r0, r9
    a866:	0031      	movs	r1, r6
    a868:	b007      	add	sp, #28
    a86a:	bc3c      	pop	{r2, r3, r4, r5}
    a86c:	4690      	mov	r8, r2
    a86e:	4699      	mov	r9, r3
    a870:	46a2      	mov	sl, r4
    a872:	46ab      	mov	fp, r5
    a874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a876:	0033      	movs	r3, r6
    a878:	4303      	orrs	r3, r0
    a87a:	d04f      	beq.n	a91c <__aeabi_ddiv+0x1a0>
    a87c:	2e00      	cmp	r6, #0
    a87e:	d100      	bne.n	a882 <__aeabi_ddiv+0x106>
    a880:	e1bc      	b.n	abfc <__aeabi_ddiv+0x480>
    a882:	0030      	movs	r0, r6
    a884:	f001 f8cc 	bl	ba20 <__clzsi2>
    a888:	0003      	movs	r3, r0
    a88a:	3b0b      	subs	r3, #11
    a88c:	2b1c      	cmp	r3, #28
    a88e:	dd00      	ble.n	a892 <__aeabi_ddiv+0x116>
    a890:	e1ad      	b.n	abee <__aeabi_ddiv+0x472>
    a892:	221d      	movs	r2, #29
    a894:	0001      	movs	r1, r0
    a896:	1ad3      	subs	r3, r2, r3
    a898:	3908      	subs	r1, #8
    a89a:	003a      	movs	r2, r7
    a89c:	408f      	lsls	r7, r1
    a89e:	408e      	lsls	r6, r1
    a8a0:	40da      	lsrs	r2, r3
    a8a2:	46b9      	mov	r9, r7
    a8a4:	4316      	orrs	r6, r2
    a8a6:	4b30      	ldr	r3, [pc, #192]	; (a968 <__aeabi_ddiv+0x1ec>)
    a8a8:	2700      	movs	r7, #0
    a8aa:	469c      	mov	ip, r3
    a8ac:	2300      	movs	r3, #0
    a8ae:	4460      	add	r0, ip
    a8b0:	4244      	negs	r4, r0
    a8b2:	9302      	str	r3, [sp, #8]
    a8b4:	e785      	b.n	a7c2 <__aeabi_ddiv+0x46>
    a8b6:	4653      	mov	r3, sl
    a8b8:	465a      	mov	r2, fp
    a8ba:	4313      	orrs	r3, r2
    a8bc:	d12c      	bne.n	a918 <__aeabi_ddiv+0x19c>
    a8be:	2300      	movs	r3, #0
    a8c0:	2100      	movs	r1, #0
    a8c2:	469b      	mov	fp, r3
    a8c4:	3302      	adds	r3, #2
    a8c6:	e797      	b.n	a7f8 <__aeabi_ddiv+0x7c>
    a8c8:	430b      	orrs	r3, r1
    a8ca:	d020      	beq.n	a90e <__aeabi_ddiv+0x192>
    a8cc:	465b      	mov	r3, fp
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	d100      	bne.n	a8d4 <__aeabi_ddiv+0x158>
    a8d2:	e19e      	b.n	ac12 <__aeabi_ddiv+0x496>
    a8d4:	4658      	mov	r0, fp
    a8d6:	f001 f8a3 	bl	ba20 <__clzsi2>
    a8da:	0003      	movs	r3, r0
    a8dc:	3b0b      	subs	r3, #11
    a8de:	2b1c      	cmp	r3, #28
    a8e0:	dd00      	ble.n	a8e4 <__aeabi_ddiv+0x168>
    a8e2:	e18f      	b.n	ac04 <__aeabi_ddiv+0x488>
    a8e4:	0002      	movs	r2, r0
    a8e6:	4659      	mov	r1, fp
    a8e8:	3a08      	subs	r2, #8
    a8ea:	4091      	lsls	r1, r2
    a8ec:	468b      	mov	fp, r1
    a8ee:	211d      	movs	r1, #29
    a8f0:	1acb      	subs	r3, r1, r3
    a8f2:	4651      	mov	r1, sl
    a8f4:	40d9      	lsrs	r1, r3
    a8f6:	000b      	movs	r3, r1
    a8f8:	4659      	mov	r1, fp
    a8fa:	430b      	orrs	r3, r1
    a8fc:	4651      	mov	r1, sl
    a8fe:	469b      	mov	fp, r3
    a900:	4091      	lsls	r1, r2
    a902:	4b19      	ldr	r3, [pc, #100]	; (a968 <__aeabi_ddiv+0x1ec>)
    a904:	469c      	mov	ip, r3
    a906:	4460      	add	r0, ip
    a908:	4240      	negs	r0, r0
    a90a:	2300      	movs	r3, #0
    a90c:	e774      	b.n	a7f8 <__aeabi_ddiv+0x7c>
    a90e:	2300      	movs	r3, #0
    a910:	2100      	movs	r1, #0
    a912:	469b      	mov	fp, r3
    a914:	3301      	adds	r3, #1
    a916:	e76f      	b.n	a7f8 <__aeabi_ddiv+0x7c>
    a918:	2303      	movs	r3, #3
    a91a:	e76d      	b.n	a7f8 <__aeabi_ddiv+0x7c>
    a91c:	2300      	movs	r3, #0
    a91e:	4699      	mov	r9, r3
    a920:	3301      	adds	r3, #1
    a922:	2704      	movs	r7, #4
    a924:	2600      	movs	r6, #0
    a926:	9302      	str	r3, [sp, #8]
    a928:	e74b      	b.n	a7c2 <__aeabi_ddiv+0x46>
    a92a:	2303      	movs	r3, #3
    a92c:	270c      	movs	r7, #12
    a92e:	9302      	str	r3, [sp, #8]
    a930:	e747      	b.n	a7c2 <__aeabi_ddiv+0x46>
    a932:	2201      	movs	r2, #1
    a934:	1ad5      	subs	r5, r2, r3
    a936:	2d38      	cmp	r5, #56	; 0x38
    a938:	dc00      	bgt.n	a93c <__aeabi_ddiv+0x1c0>
    a93a:	e1b0      	b.n	ac9e <__aeabi_ddiv+0x522>
    a93c:	4653      	mov	r3, sl
    a93e:	401a      	ands	r2, r3
    a940:	2100      	movs	r1, #0
    a942:	2300      	movs	r3, #0
    a944:	2600      	movs	r6, #0
    a946:	4689      	mov	r9, r1
    a948:	e77e      	b.n	a848 <__aeabi_ddiv+0xcc>
    a94a:	2300      	movs	r3, #0
    a94c:	2680      	movs	r6, #128	; 0x80
    a94e:	4699      	mov	r9, r3
    a950:	2200      	movs	r2, #0
    a952:	0336      	lsls	r6, r6, #12
    a954:	4b00      	ldr	r3, [pc, #0]	; (a958 <__aeabi_ddiv+0x1dc>)
    a956:	e777      	b.n	a848 <__aeabi_ddiv+0xcc>
    a958:	000007ff 	.word	0x000007ff
    a95c:	fffffc01 	.word	0xfffffc01
    a960:	0000e318 	.word	0x0000e318
    a964:	800fffff 	.word	0x800fffff
    a968:	000003f3 	.word	0x000003f3
    a96c:	455e      	cmp	r6, fp
    a96e:	d900      	bls.n	a972 <__aeabi_ddiv+0x1f6>
    a970:	e172      	b.n	ac58 <__aeabi_ddiv+0x4dc>
    a972:	d100      	bne.n	a976 <__aeabi_ddiv+0x1fa>
    a974:	e16d      	b.n	ac52 <__aeabi_ddiv+0x4d6>
    a976:	9b01      	ldr	r3, [sp, #4]
    a978:	464d      	mov	r5, r9
    a97a:	3b01      	subs	r3, #1
    a97c:	9301      	str	r3, [sp, #4]
    a97e:	2300      	movs	r3, #0
    a980:	0034      	movs	r4, r6
    a982:	9302      	str	r3, [sp, #8]
    a984:	465b      	mov	r3, fp
    a986:	021e      	lsls	r6, r3, #8
    a988:	0e0b      	lsrs	r3, r1, #24
    a98a:	431e      	orrs	r6, r3
    a98c:	020b      	lsls	r3, r1, #8
    a98e:	9303      	str	r3, [sp, #12]
    a990:	0c33      	lsrs	r3, r6, #16
    a992:	4699      	mov	r9, r3
    a994:	0433      	lsls	r3, r6, #16
    a996:	0c1b      	lsrs	r3, r3, #16
    a998:	4649      	mov	r1, r9
    a99a:	0020      	movs	r0, r4
    a99c:	9300      	str	r3, [sp, #0]
    a99e:	f7ff fa4b 	bl	9e38 <__aeabi_uidiv>
    a9a2:	9b00      	ldr	r3, [sp, #0]
    a9a4:	0037      	movs	r7, r6
    a9a6:	4343      	muls	r3, r0
    a9a8:	0006      	movs	r6, r0
    a9aa:	4649      	mov	r1, r9
    a9ac:	0020      	movs	r0, r4
    a9ae:	4698      	mov	r8, r3
    a9b0:	f7ff fac8 	bl	9f44 <__aeabi_uidivmod>
    a9b4:	0c2c      	lsrs	r4, r5, #16
    a9b6:	0409      	lsls	r1, r1, #16
    a9b8:	430c      	orrs	r4, r1
    a9ba:	45a0      	cmp	r8, r4
    a9bc:	d909      	bls.n	a9d2 <__aeabi_ddiv+0x256>
    a9be:	19e4      	adds	r4, r4, r7
    a9c0:	1e73      	subs	r3, r6, #1
    a9c2:	42a7      	cmp	r7, r4
    a9c4:	d900      	bls.n	a9c8 <__aeabi_ddiv+0x24c>
    a9c6:	e15c      	b.n	ac82 <__aeabi_ddiv+0x506>
    a9c8:	45a0      	cmp	r8, r4
    a9ca:	d800      	bhi.n	a9ce <__aeabi_ddiv+0x252>
    a9cc:	e159      	b.n	ac82 <__aeabi_ddiv+0x506>
    a9ce:	3e02      	subs	r6, #2
    a9d0:	19e4      	adds	r4, r4, r7
    a9d2:	4643      	mov	r3, r8
    a9d4:	1ae4      	subs	r4, r4, r3
    a9d6:	4649      	mov	r1, r9
    a9d8:	0020      	movs	r0, r4
    a9da:	f7ff fa2d 	bl	9e38 <__aeabi_uidiv>
    a9de:	0003      	movs	r3, r0
    a9e0:	9a00      	ldr	r2, [sp, #0]
    a9e2:	4680      	mov	r8, r0
    a9e4:	4353      	muls	r3, r2
    a9e6:	4649      	mov	r1, r9
    a9e8:	0020      	movs	r0, r4
    a9ea:	469b      	mov	fp, r3
    a9ec:	f7ff faaa 	bl	9f44 <__aeabi_uidivmod>
    a9f0:	042a      	lsls	r2, r5, #16
    a9f2:	0409      	lsls	r1, r1, #16
    a9f4:	0c12      	lsrs	r2, r2, #16
    a9f6:	430a      	orrs	r2, r1
    a9f8:	4593      	cmp	fp, r2
    a9fa:	d90d      	bls.n	aa18 <__aeabi_ddiv+0x29c>
    a9fc:	4643      	mov	r3, r8
    a9fe:	19d2      	adds	r2, r2, r7
    aa00:	3b01      	subs	r3, #1
    aa02:	4297      	cmp	r7, r2
    aa04:	d900      	bls.n	aa08 <__aeabi_ddiv+0x28c>
    aa06:	e13a      	b.n	ac7e <__aeabi_ddiv+0x502>
    aa08:	4593      	cmp	fp, r2
    aa0a:	d800      	bhi.n	aa0e <__aeabi_ddiv+0x292>
    aa0c:	e137      	b.n	ac7e <__aeabi_ddiv+0x502>
    aa0e:	2302      	movs	r3, #2
    aa10:	425b      	negs	r3, r3
    aa12:	469c      	mov	ip, r3
    aa14:	19d2      	adds	r2, r2, r7
    aa16:	44e0      	add	r8, ip
    aa18:	465b      	mov	r3, fp
    aa1a:	1ad2      	subs	r2, r2, r3
    aa1c:	4643      	mov	r3, r8
    aa1e:	0436      	lsls	r6, r6, #16
    aa20:	4333      	orrs	r3, r6
    aa22:	469b      	mov	fp, r3
    aa24:	9903      	ldr	r1, [sp, #12]
    aa26:	0c18      	lsrs	r0, r3, #16
    aa28:	0c0b      	lsrs	r3, r1, #16
    aa2a:	001d      	movs	r5, r3
    aa2c:	9305      	str	r3, [sp, #20]
    aa2e:	0409      	lsls	r1, r1, #16
    aa30:	465b      	mov	r3, fp
    aa32:	0c09      	lsrs	r1, r1, #16
    aa34:	000c      	movs	r4, r1
    aa36:	041b      	lsls	r3, r3, #16
    aa38:	0c1b      	lsrs	r3, r3, #16
    aa3a:	4344      	muls	r4, r0
    aa3c:	9104      	str	r1, [sp, #16]
    aa3e:	4359      	muls	r1, r3
    aa40:	436b      	muls	r3, r5
    aa42:	4368      	muls	r0, r5
    aa44:	191b      	adds	r3, r3, r4
    aa46:	0c0d      	lsrs	r5, r1, #16
    aa48:	18eb      	adds	r3, r5, r3
    aa4a:	429c      	cmp	r4, r3
    aa4c:	d903      	bls.n	aa56 <__aeabi_ddiv+0x2da>
    aa4e:	2480      	movs	r4, #128	; 0x80
    aa50:	0264      	lsls	r4, r4, #9
    aa52:	46a4      	mov	ip, r4
    aa54:	4460      	add	r0, ip
    aa56:	0c1c      	lsrs	r4, r3, #16
    aa58:	0409      	lsls	r1, r1, #16
    aa5a:	041b      	lsls	r3, r3, #16
    aa5c:	0c09      	lsrs	r1, r1, #16
    aa5e:	1820      	adds	r0, r4, r0
    aa60:	185d      	adds	r5, r3, r1
    aa62:	4282      	cmp	r2, r0
    aa64:	d200      	bcs.n	aa68 <__aeabi_ddiv+0x2ec>
    aa66:	e0de      	b.n	ac26 <__aeabi_ddiv+0x4aa>
    aa68:	d100      	bne.n	aa6c <__aeabi_ddiv+0x2f0>
    aa6a:	e0d7      	b.n	ac1c <__aeabi_ddiv+0x4a0>
    aa6c:	1a16      	subs	r6, r2, r0
    aa6e:	9b02      	ldr	r3, [sp, #8]
    aa70:	469c      	mov	ip, r3
    aa72:	1b5d      	subs	r5, r3, r5
    aa74:	45ac      	cmp	ip, r5
    aa76:	419b      	sbcs	r3, r3
    aa78:	425b      	negs	r3, r3
    aa7a:	1af6      	subs	r6, r6, r3
    aa7c:	42b7      	cmp	r7, r6
    aa7e:	d100      	bne.n	aa82 <__aeabi_ddiv+0x306>
    aa80:	e106      	b.n	ac90 <__aeabi_ddiv+0x514>
    aa82:	4649      	mov	r1, r9
    aa84:	0030      	movs	r0, r6
    aa86:	f7ff f9d7 	bl	9e38 <__aeabi_uidiv>
    aa8a:	9b00      	ldr	r3, [sp, #0]
    aa8c:	0004      	movs	r4, r0
    aa8e:	4343      	muls	r3, r0
    aa90:	4649      	mov	r1, r9
    aa92:	0030      	movs	r0, r6
    aa94:	4698      	mov	r8, r3
    aa96:	f7ff fa55 	bl	9f44 <__aeabi_uidivmod>
    aa9a:	0c2e      	lsrs	r6, r5, #16
    aa9c:	0409      	lsls	r1, r1, #16
    aa9e:	430e      	orrs	r6, r1
    aaa0:	45b0      	cmp	r8, r6
    aaa2:	d909      	bls.n	aab8 <__aeabi_ddiv+0x33c>
    aaa4:	19f6      	adds	r6, r6, r7
    aaa6:	1e63      	subs	r3, r4, #1
    aaa8:	42b7      	cmp	r7, r6
    aaaa:	d900      	bls.n	aaae <__aeabi_ddiv+0x332>
    aaac:	e0f3      	b.n	ac96 <__aeabi_ddiv+0x51a>
    aaae:	45b0      	cmp	r8, r6
    aab0:	d800      	bhi.n	aab4 <__aeabi_ddiv+0x338>
    aab2:	e0f0      	b.n	ac96 <__aeabi_ddiv+0x51a>
    aab4:	3c02      	subs	r4, #2
    aab6:	19f6      	adds	r6, r6, r7
    aab8:	4643      	mov	r3, r8
    aaba:	1af3      	subs	r3, r6, r3
    aabc:	4649      	mov	r1, r9
    aabe:	0018      	movs	r0, r3
    aac0:	9302      	str	r3, [sp, #8]
    aac2:	f7ff f9b9 	bl	9e38 <__aeabi_uidiv>
    aac6:	9b00      	ldr	r3, [sp, #0]
    aac8:	0006      	movs	r6, r0
    aaca:	4343      	muls	r3, r0
    aacc:	4649      	mov	r1, r9
    aace:	9802      	ldr	r0, [sp, #8]
    aad0:	4698      	mov	r8, r3
    aad2:	f7ff fa37 	bl	9f44 <__aeabi_uidivmod>
    aad6:	042d      	lsls	r5, r5, #16
    aad8:	0409      	lsls	r1, r1, #16
    aada:	0c2d      	lsrs	r5, r5, #16
    aadc:	430d      	orrs	r5, r1
    aade:	45a8      	cmp	r8, r5
    aae0:	d909      	bls.n	aaf6 <__aeabi_ddiv+0x37a>
    aae2:	19ed      	adds	r5, r5, r7
    aae4:	1e73      	subs	r3, r6, #1
    aae6:	42af      	cmp	r7, r5
    aae8:	d900      	bls.n	aaec <__aeabi_ddiv+0x370>
    aaea:	e0d6      	b.n	ac9a <__aeabi_ddiv+0x51e>
    aaec:	45a8      	cmp	r8, r5
    aaee:	d800      	bhi.n	aaf2 <__aeabi_ddiv+0x376>
    aaf0:	e0d3      	b.n	ac9a <__aeabi_ddiv+0x51e>
    aaf2:	3e02      	subs	r6, #2
    aaf4:	19ed      	adds	r5, r5, r7
    aaf6:	0424      	lsls	r4, r4, #16
    aaf8:	0021      	movs	r1, r4
    aafa:	4643      	mov	r3, r8
    aafc:	4331      	orrs	r1, r6
    aafe:	9e04      	ldr	r6, [sp, #16]
    ab00:	9a05      	ldr	r2, [sp, #20]
    ab02:	0030      	movs	r0, r6
    ab04:	1aed      	subs	r5, r5, r3
    ab06:	040b      	lsls	r3, r1, #16
    ab08:	0c0c      	lsrs	r4, r1, #16
    ab0a:	0c1b      	lsrs	r3, r3, #16
    ab0c:	4358      	muls	r0, r3
    ab0e:	4366      	muls	r6, r4
    ab10:	4353      	muls	r3, r2
    ab12:	4354      	muls	r4, r2
    ab14:	199a      	adds	r2, r3, r6
    ab16:	0c03      	lsrs	r3, r0, #16
    ab18:	189b      	adds	r3, r3, r2
    ab1a:	429e      	cmp	r6, r3
    ab1c:	d903      	bls.n	ab26 <__aeabi_ddiv+0x3aa>
    ab1e:	2280      	movs	r2, #128	; 0x80
    ab20:	0252      	lsls	r2, r2, #9
    ab22:	4694      	mov	ip, r2
    ab24:	4464      	add	r4, ip
    ab26:	0c1a      	lsrs	r2, r3, #16
    ab28:	0400      	lsls	r0, r0, #16
    ab2a:	041b      	lsls	r3, r3, #16
    ab2c:	0c00      	lsrs	r0, r0, #16
    ab2e:	1914      	adds	r4, r2, r4
    ab30:	181b      	adds	r3, r3, r0
    ab32:	42a5      	cmp	r5, r4
    ab34:	d350      	bcc.n	abd8 <__aeabi_ddiv+0x45c>
    ab36:	d04d      	beq.n	abd4 <__aeabi_ddiv+0x458>
    ab38:	2301      	movs	r3, #1
    ab3a:	4319      	orrs	r1, r3
    ab3c:	4a96      	ldr	r2, [pc, #600]	; (ad98 <__aeabi_ddiv+0x61c>)
    ab3e:	9b01      	ldr	r3, [sp, #4]
    ab40:	4694      	mov	ip, r2
    ab42:	4463      	add	r3, ip
    ab44:	2b00      	cmp	r3, #0
    ab46:	dc00      	bgt.n	ab4a <__aeabi_ddiv+0x3ce>
    ab48:	e6f3      	b.n	a932 <__aeabi_ddiv+0x1b6>
    ab4a:	074a      	lsls	r2, r1, #29
    ab4c:	d009      	beq.n	ab62 <__aeabi_ddiv+0x3e6>
    ab4e:	220f      	movs	r2, #15
    ab50:	400a      	ands	r2, r1
    ab52:	2a04      	cmp	r2, #4
    ab54:	d005      	beq.n	ab62 <__aeabi_ddiv+0x3e6>
    ab56:	1d0a      	adds	r2, r1, #4
    ab58:	428a      	cmp	r2, r1
    ab5a:	4189      	sbcs	r1, r1
    ab5c:	4249      	negs	r1, r1
    ab5e:	448b      	add	fp, r1
    ab60:	0011      	movs	r1, r2
    ab62:	465a      	mov	r2, fp
    ab64:	01d2      	lsls	r2, r2, #7
    ab66:	d508      	bpl.n	ab7a <__aeabi_ddiv+0x3fe>
    ab68:	465a      	mov	r2, fp
    ab6a:	4b8c      	ldr	r3, [pc, #560]	; (ad9c <__aeabi_ddiv+0x620>)
    ab6c:	401a      	ands	r2, r3
    ab6e:	4693      	mov	fp, r2
    ab70:	2280      	movs	r2, #128	; 0x80
    ab72:	00d2      	lsls	r2, r2, #3
    ab74:	4694      	mov	ip, r2
    ab76:	9b01      	ldr	r3, [sp, #4]
    ab78:	4463      	add	r3, ip
    ab7a:	4a89      	ldr	r2, [pc, #548]	; (ada0 <__aeabi_ddiv+0x624>)
    ab7c:	4293      	cmp	r3, r2
    ab7e:	dd00      	ble.n	ab82 <__aeabi_ddiv+0x406>
    ab80:	e65b      	b.n	a83a <__aeabi_ddiv+0xbe>
    ab82:	465a      	mov	r2, fp
    ab84:	08c9      	lsrs	r1, r1, #3
    ab86:	0750      	lsls	r0, r2, #29
    ab88:	4308      	orrs	r0, r1
    ab8a:	0256      	lsls	r6, r2, #9
    ab8c:	4651      	mov	r1, sl
    ab8e:	2201      	movs	r2, #1
    ab90:	055b      	lsls	r3, r3, #21
    ab92:	4681      	mov	r9, r0
    ab94:	0b36      	lsrs	r6, r6, #12
    ab96:	0d5b      	lsrs	r3, r3, #21
    ab98:	400a      	ands	r2, r1
    ab9a:	e655      	b.n	a848 <__aeabi_ddiv+0xcc>
    ab9c:	2380      	movs	r3, #128	; 0x80
    ab9e:	031b      	lsls	r3, r3, #12
    aba0:	421e      	tst	r6, r3
    aba2:	d011      	beq.n	abc8 <__aeabi_ddiv+0x44c>
    aba4:	465a      	mov	r2, fp
    aba6:	421a      	tst	r2, r3
    aba8:	d10e      	bne.n	abc8 <__aeabi_ddiv+0x44c>
    abaa:	465e      	mov	r6, fp
    abac:	431e      	orrs	r6, r3
    abae:	0336      	lsls	r6, r6, #12
    abb0:	0b36      	lsrs	r6, r6, #12
    abb2:	002a      	movs	r2, r5
    abb4:	4689      	mov	r9, r1
    abb6:	4b7b      	ldr	r3, [pc, #492]	; (ada4 <__aeabi_ddiv+0x628>)
    abb8:	e646      	b.n	a848 <__aeabi_ddiv+0xcc>
    abba:	2b03      	cmp	r3, #3
    abbc:	d100      	bne.n	abc0 <__aeabi_ddiv+0x444>
    abbe:	e0e1      	b.n	ad84 <__aeabi_ddiv+0x608>
    abc0:	2b01      	cmp	r3, #1
    abc2:	d1bb      	bne.n	ab3c <__aeabi_ddiv+0x3c0>
    abc4:	401a      	ands	r2, r3
    abc6:	e6bb      	b.n	a940 <__aeabi_ddiv+0x1c4>
    abc8:	431e      	orrs	r6, r3
    abca:	0336      	lsls	r6, r6, #12
    abcc:	0b36      	lsrs	r6, r6, #12
    abce:	4642      	mov	r2, r8
    abd0:	4b74      	ldr	r3, [pc, #464]	; (ada4 <__aeabi_ddiv+0x628>)
    abd2:	e639      	b.n	a848 <__aeabi_ddiv+0xcc>
    abd4:	2b00      	cmp	r3, #0
    abd6:	d0b1      	beq.n	ab3c <__aeabi_ddiv+0x3c0>
    abd8:	197d      	adds	r5, r7, r5
    abda:	1e4a      	subs	r2, r1, #1
    abdc:	42af      	cmp	r7, r5
    abde:	d952      	bls.n	ac86 <__aeabi_ddiv+0x50a>
    abe0:	0011      	movs	r1, r2
    abe2:	42a5      	cmp	r5, r4
    abe4:	d1a8      	bne.n	ab38 <__aeabi_ddiv+0x3bc>
    abe6:	9a03      	ldr	r2, [sp, #12]
    abe8:	429a      	cmp	r2, r3
    abea:	d1a5      	bne.n	ab38 <__aeabi_ddiv+0x3bc>
    abec:	e7a6      	b.n	ab3c <__aeabi_ddiv+0x3c0>
    abee:	0003      	movs	r3, r0
    abf0:	003e      	movs	r6, r7
    abf2:	3b28      	subs	r3, #40	; 0x28
    abf4:	409e      	lsls	r6, r3
    abf6:	2300      	movs	r3, #0
    abf8:	4699      	mov	r9, r3
    abfa:	e654      	b.n	a8a6 <__aeabi_ddiv+0x12a>
    abfc:	f000 ff10 	bl	ba20 <__clzsi2>
    ac00:	3020      	adds	r0, #32
    ac02:	e641      	b.n	a888 <__aeabi_ddiv+0x10c>
    ac04:	0003      	movs	r3, r0
    ac06:	4652      	mov	r2, sl
    ac08:	3b28      	subs	r3, #40	; 0x28
    ac0a:	409a      	lsls	r2, r3
    ac0c:	2100      	movs	r1, #0
    ac0e:	4693      	mov	fp, r2
    ac10:	e677      	b.n	a902 <__aeabi_ddiv+0x186>
    ac12:	4650      	mov	r0, sl
    ac14:	f000 ff04 	bl	ba20 <__clzsi2>
    ac18:	3020      	adds	r0, #32
    ac1a:	e65e      	b.n	a8da <__aeabi_ddiv+0x15e>
    ac1c:	9b02      	ldr	r3, [sp, #8]
    ac1e:	2600      	movs	r6, #0
    ac20:	42ab      	cmp	r3, r5
    ac22:	d300      	bcc.n	ac26 <__aeabi_ddiv+0x4aa>
    ac24:	e723      	b.n	aa6e <__aeabi_ddiv+0x2f2>
    ac26:	9e03      	ldr	r6, [sp, #12]
    ac28:	9902      	ldr	r1, [sp, #8]
    ac2a:	46b4      	mov	ip, r6
    ac2c:	4461      	add	r1, ip
    ac2e:	4688      	mov	r8, r1
    ac30:	45b0      	cmp	r8, r6
    ac32:	41b6      	sbcs	r6, r6
    ac34:	465b      	mov	r3, fp
    ac36:	4276      	negs	r6, r6
    ac38:	19f6      	adds	r6, r6, r7
    ac3a:	18b2      	adds	r2, r6, r2
    ac3c:	3b01      	subs	r3, #1
    ac3e:	9102      	str	r1, [sp, #8]
    ac40:	4297      	cmp	r7, r2
    ac42:	d213      	bcs.n	ac6c <__aeabi_ddiv+0x4f0>
    ac44:	4290      	cmp	r0, r2
    ac46:	d84f      	bhi.n	ace8 <__aeabi_ddiv+0x56c>
    ac48:	d100      	bne.n	ac4c <__aeabi_ddiv+0x4d0>
    ac4a:	e08e      	b.n	ad6a <__aeabi_ddiv+0x5ee>
    ac4c:	1a16      	subs	r6, r2, r0
    ac4e:	469b      	mov	fp, r3
    ac50:	e70d      	b.n	aa6e <__aeabi_ddiv+0x2f2>
    ac52:	4589      	cmp	r9, r1
    ac54:	d200      	bcs.n	ac58 <__aeabi_ddiv+0x4dc>
    ac56:	e68e      	b.n	a976 <__aeabi_ddiv+0x1fa>
    ac58:	0874      	lsrs	r4, r6, #1
    ac5a:	464b      	mov	r3, r9
    ac5c:	07f6      	lsls	r6, r6, #31
    ac5e:	0035      	movs	r5, r6
    ac60:	085b      	lsrs	r3, r3, #1
    ac62:	431d      	orrs	r5, r3
    ac64:	464b      	mov	r3, r9
    ac66:	07db      	lsls	r3, r3, #31
    ac68:	9302      	str	r3, [sp, #8]
    ac6a:	e68b      	b.n	a984 <__aeabi_ddiv+0x208>
    ac6c:	4297      	cmp	r7, r2
    ac6e:	d1ed      	bne.n	ac4c <__aeabi_ddiv+0x4d0>
    ac70:	9903      	ldr	r1, [sp, #12]
    ac72:	9c02      	ldr	r4, [sp, #8]
    ac74:	42a1      	cmp	r1, r4
    ac76:	d9e5      	bls.n	ac44 <__aeabi_ddiv+0x4c8>
    ac78:	1a3e      	subs	r6, r7, r0
    ac7a:	469b      	mov	fp, r3
    ac7c:	e6f7      	b.n	aa6e <__aeabi_ddiv+0x2f2>
    ac7e:	4698      	mov	r8, r3
    ac80:	e6ca      	b.n	aa18 <__aeabi_ddiv+0x29c>
    ac82:	001e      	movs	r6, r3
    ac84:	e6a5      	b.n	a9d2 <__aeabi_ddiv+0x256>
    ac86:	42ac      	cmp	r4, r5
    ac88:	d83e      	bhi.n	ad08 <__aeabi_ddiv+0x58c>
    ac8a:	d074      	beq.n	ad76 <__aeabi_ddiv+0x5fa>
    ac8c:	0011      	movs	r1, r2
    ac8e:	e753      	b.n	ab38 <__aeabi_ddiv+0x3bc>
    ac90:	2101      	movs	r1, #1
    ac92:	4249      	negs	r1, r1
    ac94:	e752      	b.n	ab3c <__aeabi_ddiv+0x3c0>
    ac96:	001c      	movs	r4, r3
    ac98:	e70e      	b.n	aab8 <__aeabi_ddiv+0x33c>
    ac9a:	001e      	movs	r6, r3
    ac9c:	e72b      	b.n	aaf6 <__aeabi_ddiv+0x37a>
    ac9e:	2d1f      	cmp	r5, #31
    aca0:	dc3c      	bgt.n	ad1c <__aeabi_ddiv+0x5a0>
    aca2:	2320      	movs	r3, #32
    aca4:	000a      	movs	r2, r1
    aca6:	4658      	mov	r0, fp
    aca8:	1b5b      	subs	r3, r3, r5
    acaa:	4098      	lsls	r0, r3
    acac:	40ea      	lsrs	r2, r5
    acae:	4099      	lsls	r1, r3
    acb0:	4302      	orrs	r2, r0
    acb2:	1e48      	subs	r0, r1, #1
    acb4:	4181      	sbcs	r1, r0
    acb6:	465e      	mov	r6, fp
    acb8:	4311      	orrs	r1, r2
    acba:	40ee      	lsrs	r6, r5
    acbc:	074b      	lsls	r3, r1, #29
    acbe:	d009      	beq.n	acd4 <__aeabi_ddiv+0x558>
    acc0:	230f      	movs	r3, #15
    acc2:	400b      	ands	r3, r1
    acc4:	2b04      	cmp	r3, #4
    acc6:	d005      	beq.n	acd4 <__aeabi_ddiv+0x558>
    acc8:	000b      	movs	r3, r1
    acca:	1d19      	adds	r1, r3, #4
    accc:	4299      	cmp	r1, r3
    acce:	419b      	sbcs	r3, r3
    acd0:	425b      	negs	r3, r3
    acd2:	18f6      	adds	r6, r6, r3
    acd4:	0233      	lsls	r3, r6, #8
    acd6:	d53c      	bpl.n	ad52 <__aeabi_ddiv+0x5d6>
    acd8:	4653      	mov	r3, sl
    acda:	2201      	movs	r2, #1
    acdc:	2100      	movs	r1, #0
    acde:	401a      	ands	r2, r3
    ace0:	2600      	movs	r6, #0
    ace2:	2301      	movs	r3, #1
    ace4:	4689      	mov	r9, r1
    ace6:	e5af      	b.n	a848 <__aeabi_ddiv+0xcc>
    ace8:	2302      	movs	r3, #2
    acea:	425b      	negs	r3, r3
    acec:	469c      	mov	ip, r3
    acee:	9c03      	ldr	r4, [sp, #12]
    acf0:	44e3      	add	fp, ip
    acf2:	46a4      	mov	ip, r4
    acf4:	9b02      	ldr	r3, [sp, #8]
    acf6:	4463      	add	r3, ip
    acf8:	4698      	mov	r8, r3
    acfa:	45a0      	cmp	r8, r4
    acfc:	41b6      	sbcs	r6, r6
    acfe:	4276      	negs	r6, r6
    ad00:	19f6      	adds	r6, r6, r7
    ad02:	9302      	str	r3, [sp, #8]
    ad04:	18b2      	adds	r2, r6, r2
    ad06:	e6b1      	b.n	aa6c <__aeabi_ddiv+0x2f0>
    ad08:	9803      	ldr	r0, [sp, #12]
    ad0a:	1e8a      	subs	r2, r1, #2
    ad0c:	0041      	lsls	r1, r0, #1
    ad0e:	4281      	cmp	r1, r0
    ad10:	41b6      	sbcs	r6, r6
    ad12:	4276      	negs	r6, r6
    ad14:	19f6      	adds	r6, r6, r7
    ad16:	19ad      	adds	r5, r5, r6
    ad18:	9103      	str	r1, [sp, #12]
    ad1a:	e761      	b.n	abe0 <__aeabi_ddiv+0x464>
    ad1c:	221f      	movs	r2, #31
    ad1e:	4252      	negs	r2, r2
    ad20:	1ad3      	subs	r3, r2, r3
    ad22:	465a      	mov	r2, fp
    ad24:	40da      	lsrs	r2, r3
    ad26:	0013      	movs	r3, r2
    ad28:	2d20      	cmp	r5, #32
    ad2a:	d029      	beq.n	ad80 <__aeabi_ddiv+0x604>
    ad2c:	2240      	movs	r2, #64	; 0x40
    ad2e:	4658      	mov	r0, fp
    ad30:	1b55      	subs	r5, r2, r5
    ad32:	40a8      	lsls	r0, r5
    ad34:	4301      	orrs	r1, r0
    ad36:	1e48      	subs	r0, r1, #1
    ad38:	4181      	sbcs	r1, r0
    ad3a:	2007      	movs	r0, #7
    ad3c:	430b      	orrs	r3, r1
    ad3e:	4018      	ands	r0, r3
    ad40:	2600      	movs	r6, #0
    ad42:	2800      	cmp	r0, #0
    ad44:	d009      	beq.n	ad5a <__aeabi_ddiv+0x5de>
    ad46:	220f      	movs	r2, #15
    ad48:	2600      	movs	r6, #0
    ad4a:	401a      	ands	r2, r3
    ad4c:	0019      	movs	r1, r3
    ad4e:	2a04      	cmp	r2, #4
    ad50:	d1bb      	bne.n	acca <__aeabi_ddiv+0x54e>
    ad52:	000b      	movs	r3, r1
    ad54:	0770      	lsls	r0, r6, #29
    ad56:	0276      	lsls	r6, r6, #9
    ad58:	0b36      	lsrs	r6, r6, #12
    ad5a:	08db      	lsrs	r3, r3, #3
    ad5c:	4303      	orrs	r3, r0
    ad5e:	4699      	mov	r9, r3
    ad60:	2201      	movs	r2, #1
    ad62:	4653      	mov	r3, sl
    ad64:	401a      	ands	r2, r3
    ad66:	2300      	movs	r3, #0
    ad68:	e56e      	b.n	a848 <__aeabi_ddiv+0xcc>
    ad6a:	9902      	ldr	r1, [sp, #8]
    ad6c:	428d      	cmp	r5, r1
    ad6e:	d8bb      	bhi.n	ace8 <__aeabi_ddiv+0x56c>
    ad70:	469b      	mov	fp, r3
    ad72:	2600      	movs	r6, #0
    ad74:	e67b      	b.n	aa6e <__aeabi_ddiv+0x2f2>
    ad76:	9803      	ldr	r0, [sp, #12]
    ad78:	4298      	cmp	r0, r3
    ad7a:	d3c5      	bcc.n	ad08 <__aeabi_ddiv+0x58c>
    ad7c:	0011      	movs	r1, r2
    ad7e:	e732      	b.n	abe6 <__aeabi_ddiv+0x46a>
    ad80:	2000      	movs	r0, #0
    ad82:	e7d7      	b.n	ad34 <__aeabi_ddiv+0x5b8>
    ad84:	2680      	movs	r6, #128	; 0x80
    ad86:	465b      	mov	r3, fp
    ad88:	0336      	lsls	r6, r6, #12
    ad8a:	431e      	orrs	r6, r3
    ad8c:	0336      	lsls	r6, r6, #12
    ad8e:	0b36      	lsrs	r6, r6, #12
    ad90:	9a00      	ldr	r2, [sp, #0]
    ad92:	4689      	mov	r9, r1
    ad94:	4b03      	ldr	r3, [pc, #12]	; (ada4 <__aeabi_ddiv+0x628>)
    ad96:	e557      	b.n	a848 <__aeabi_ddiv+0xcc>
    ad98:	000003ff 	.word	0x000003ff
    ad9c:	feffffff 	.word	0xfeffffff
    ada0:	000007fe 	.word	0x000007fe
    ada4:	000007ff 	.word	0x000007ff

0000ada8 <__aeabi_dmul>:
    ada8:	b5f0      	push	{r4, r5, r6, r7, lr}
    adaa:	465f      	mov	r7, fp
    adac:	4656      	mov	r6, sl
    adae:	464d      	mov	r5, r9
    adb0:	4644      	mov	r4, r8
    adb2:	b4f0      	push	{r4, r5, r6, r7}
    adb4:	030d      	lsls	r5, r1, #12
    adb6:	4699      	mov	r9, r3
    adb8:	004e      	lsls	r6, r1, #1
    adba:	0b2b      	lsrs	r3, r5, #12
    adbc:	b087      	sub	sp, #28
    adbe:	0007      	movs	r7, r0
    adc0:	4692      	mov	sl, r2
    adc2:	4680      	mov	r8, r0
    adc4:	469b      	mov	fp, r3
    adc6:	0d76      	lsrs	r6, r6, #21
    adc8:	0fcc      	lsrs	r4, r1, #31
    adca:	2e00      	cmp	r6, #0
    adcc:	d069      	beq.n	aea2 <__aeabi_dmul+0xfa>
    adce:	4b6d      	ldr	r3, [pc, #436]	; (af84 <__aeabi_dmul+0x1dc>)
    add0:	429e      	cmp	r6, r3
    add2:	d035      	beq.n	ae40 <__aeabi_dmul+0x98>
    add4:	465b      	mov	r3, fp
    add6:	2280      	movs	r2, #128	; 0x80
    add8:	00dd      	lsls	r5, r3, #3
    adda:	0412      	lsls	r2, r2, #16
    addc:	0f43      	lsrs	r3, r0, #29
    adde:	4313      	orrs	r3, r2
    ade0:	432b      	orrs	r3, r5
    ade2:	469b      	mov	fp, r3
    ade4:	00c3      	lsls	r3, r0, #3
    ade6:	4698      	mov	r8, r3
    ade8:	4b67      	ldr	r3, [pc, #412]	; (af88 <__aeabi_dmul+0x1e0>)
    adea:	2700      	movs	r7, #0
    adec:	469c      	mov	ip, r3
    adee:	2300      	movs	r3, #0
    adf0:	4466      	add	r6, ip
    adf2:	9301      	str	r3, [sp, #4]
    adf4:	464a      	mov	r2, r9
    adf6:	0315      	lsls	r5, r2, #12
    adf8:	0050      	lsls	r0, r2, #1
    adfa:	0fd2      	lsrs	r2, r2, #31
    adfc:	4653      	mov	r3, sl
    adfe:	0b2d      	lsrs	r5, r5, #12
    ae00:	0d40      	lsrs	r0, r0, #21
    ae02:	4691      	mov	r9, r2
    ae04:	d100      	bne.n	ae08 <__aeabi_dmul+0x60>
    ae06:	e076      	b.n	aef6 <__aeabi_dmul+0x14e>
    ae08:	4a5e      	ldr	r2, [pc, #376]	; (af84 <__aeabi_dmul+0x1dc>)
    ae0a:	4290      	cmp	r0, r2
    ae0c:	d06c      	beq.n	aee8 <__aeabi_dmul+0x140>
    ae0e:	2280      	movs	r2, #128	; 0x80
    ae10:	0f5b      	lsrs	r3, r3, #29
    ae12:	0412      	lsls	r2, r2, #16
    ae14:	4313      	orrs	r3, r2
    ae16:	4a5c      	ldr	r2, [pc, #368]	; (af88 <__aeabi_dmul+0x1e0>)
    ae18:	00ed      	lsls	r5, r5, #3
    ae1a:	4694      	mov	ip, r2
    ae1c:	431d      	orrs	r5, r3
    ae1e:	4653      	mov	r3, sl
    ae20:	2200      	movs	r2, #0
    ae22:	00db      	lsls	r3, r3, #3
    ae24:	4460      	add	r0, ip
    ae26:	4649      	mov	r1, r9
    ae28:	1836      	adds	r6, r6, r0
    ae2a:	1c70      	adds	r0, r6, #1
    ae2c:	4061      	eors	r1, r4
    ae2e:	9002      	str	r0, [sp, #8]
    ae30:	4317      	orrs	r7, r2
    ae32:	2f0f      	cmp	r7, #15
    ae34:	d900      	bls.n	ae38 <__aeabi_dmul+0x90>
    ae36:	e0af      	b.n	af98 <__aeabi_dmul+0x1f0>
    ae38:	4854      	ldr	r0, [pc, #336]	; (af8c <__aeabi_dmul+0x1e4>)
    ae3a:	00bf      	lsls	r7, r7, #2
    ae3c:	59c7      	ldr	r7, [r0, r7]
    ae3e:	46bf      	mov	pc, r7
    ae40:	465b      	mov	r3, fp
    ae42:	431f      	orrs	r7, r3
    ae44:	d000      	beq.n	ae48 <__aeabi_dmul+0xa0>
    ae46:	e088      	b.n	af5a <__aeabi_dmul+0x1b2>
    ae48:	2300      	movs	r3, #0
    ae4a:	469b      	mov	fp, r3
    ae4c:	4698      	mov	r8, r3
    ae4e:	3302      	adds	r3, #2
    ae50:	2708      	movs	r7, #8
    ae52:	9301      	str	r3, [sp, #4]
    ae54:	e7ce      	b.n	adf4 <__aeabi_dmul+0x4c>
    ae56:	4649      	mov	r1, r9
    ae58:	2a02      	cmp	r2, #2
    ae5a:	d06a      	beq.n	af32 <__aeabi_dmul+0x18a>
    ae5c:	2a03      	cmp	r2, #3
    ae5e:	d100      	bne.n	ae62 <__aeabi_dmul+0xba>
    ae60:	e209      	b.n	b276 <__aeabi_dmul+0x4ce>
    ae62:	2a01      	cmp	r2, #1
    ae64:	d000      	beq.n	ae68 <__aeabi_dmul+0xc0>
    ae66:	e1bb      	b.n	b1e0 <__aeabi_dmul+0x438>
    ae68:	4011      	ands	r1, r2
    ae6a:	2200      	movs	r2, #0
    ae6c:	2300      	movs	r3, #0
    ae6e:	2500      	movs	r5, #0
    ae70:	4690      	mov	r8, r2
    ae72:	b2cc      	uxtb	r4, r1
    ae74:	2100      	movs	r1, #0
    ae76:	032d      	lsls	r5, r5, #12
    ae78:	0d0a      	lsrs	r2, r1, #20
    ae7a:	0512      	lsls	r2, r2, #20
    ae7c:	0b2d      	lsrs	r5, r5, #12
    ae7e:	4315      	orrs	r5, r2
    ae80:	4a43      	ldr	r2, [pc, #268]	; (af90 <__aeabi_dmul+0x1e8>)
    ae82:	051b      	lsls	r3, r3, #20
    ae84:	4015      	ands	r5, r2
    ae86:	431d      	orrs	r5, r3
    ae88:	006d      	lsls	r5, r5, #1
    ae8a:	07e4      	lsls	r4, r4, #31
    ae8c:	086d      	lsrs	r5, r5, #1
    ae8e:	4325      	orrs	r5, r4
    ae90:	4640      	mov	r0, r8
    ae92:	0029      	movs	r1, r5
    ae94:	b007      	add	sp, #28
    ae96:	bc3c      	pop	{r2, r3, r4, r5}
    ae98:	4690      	mov	r8, r2
    ae9a:	4699      	mov	r9, r3
    ae9c:	46a2      	mov	sl, r4
    ae9e:	46ab      	mov	fp, r5
    aea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aea2:	4303      	orrs	r3, r0
    aea4:	d052      	beq.n	af4c <__aeabi_dmul+0x1a4>
    aea6:	465b      	mov	r3, fp
    aea8:	2b00      	cmp	r3, #0
    aeaa:	d100      	bne.n	aeae <__aeabi_dmul+0x106>
    aeac:	e18a      	b.n	b1c4 <__aeabi_dmul+0x41c>
    aeae:	4658      	mov	r0, fp
    aeb0:	f000 fdb6 	bl	ba20 <__clzsi2>
    aeb4:	0003      	movs	r3, r0
    aeb6:	3b0b      	subs	r3, #11
    aeb8:	2b1c      	cmp	r3, #28
    aeba:	dd00      	ble.n	aebe <__aeabi_dmul+0x116>
    aebc:	e17b      	b.n	b1b6 <__aeabi_dmul+0x40e>
    aebe:	221d      	movs	r2, #29
    aec0:	1ad3      	subs	r3, r2, r3
    aec2:	003a      	movs	r2, r7
    aec4:	0001      	movs	r1, r0
    aec6:	465d      	mov	r5, fp
    aec8:	40da      	lsrs	r2, r3
    aeca:	3908      	subs	r1, #8
    aecc:	408d      	lsls	r5, r1
    aece:	0013      	movs	r3, r2
    aed0:	408f      	lsls	r7, r1
    aed2:	432b      	orrs	r3, r5
    aed4:	469b      	mov	fp, r3
    aed6:	46b8      	mov	r8, r7
    aed8:	4b2e      	ldr	r3, [pc, #184]	; (af94 <__aeabi_dmul+0x1ec>)
    aeda:	2700      	movs	r7, #0
    aedc:	469c      	mov	ip, r3
    aede:	2300      	movs	r3, #0
    aee0:	4460      	add	r0, ip
    aee2:	4246      	negs	r6, r0
    aee4:	9301      	str	r3, [sp, #4]
    aee6:	e785      	b.n	adf4 <__aeabi_dmul+0x4c>
    aee8:	4652      	mov	r2, sl
    aeea:	432a      	orrs	r2, r5
    aeec:	d12c      	bne.n	af48 <__aeabi_dmul+0x1a0>
    aeee:	2500      	movs	r5, #0
    aef0:	2300      	movs	r3, #0
    aef2:	2202      	movs	r2, #2
    aef4:	e797      	b.n	ae26 <__aeabi_dmul+0x7e>
    aef6:	4652      	mov	r2, sl
    aef8:	432a      	orrs	r2, r5
    aefa:	d021      	beq.n	af40 <__aeabi_dmul+0x198>
    aefc:	2d00      	cmp	r5, #0
    aefe:	d100      	bne.n	af02 <__aeabi_dmul+0x15a>
    af00:	e154      	b.n	b1ac <__aeabi_dmul+0x404>
    af02:	0028      	movs	r0, r5
    af04:	f000 fd8c 	bl	ba20 <__clzsi2>
    af08:	0003      	movs	r3, r0
    af0a:	3b0b      	subs	r3, #11
    af0c:	2b1c      	cmp	r3, #28
    af0e:	dd00      	ble.n	af12 <__aeabi_dmul+0x16a>
    af10:	e146      	b.n	b1a0 <__aeabi_dmul+0x3f8>
    af12:	211d      	movs	r1, #29
    af14:	1acb      	subs	r3, r1, r3
    af16:	4651      	mov	r1, sl
    af18:	0002      	movs	r2, r0
    af1a:	40d9      	lsrs	r1, r3
    af1c:	4653      	mov	r3, sl
    af1e:	3a08      	subs	r2, #8
    af20:	4095      	lsls	r5, r2
    af22:	4093      	lsls	r3, r2
    af24:	430d      	orrs	r5, r1
    af26:	4a1b      	ldr	r2, [pc, #108]	; (af94 <__aeabi_dmul+0x1ec>)
    af28:	4694      	mov	ip, r2
    af2a:	4460      	add	r0, ip
    af2c:	4240      	negs	r0, r0
    af2e:	2200      	movs	r2, #0
    af30:	e779      	b.n	ae26 <__aeabi_dmul+0x7e>
    af32:	2401      	movs	r4, #1
    af34:	2200      	movs	r2, #0
    af36:	400c      	ands	r4, r1
    af38:	4b12      	ldr	r3, [pc, #72]	; (af84 <__aeabi_dmul+0x1dc>)
    af3a:	2500      	movs	r5, #0
    af3c:	4690      	mov	r8, r2
    af3e:	e799      	b.n	ae74 <__aeabi_dmul+0xcc>
    af40:	2500      	movs	r5, #0
    af42:	2300      	movs	r3, #0
    af44:	2201      	movs	r2, #1
    af46:	e76e      	b.n	ae26 <__aeabi_dmul+0x7e>
    af48:	2203      	movs	r2, #3
    af4a:	e76c      	b.n	ae26 <__aeabi_dmul+0x7e>
    af4c:	2300      	movs	r3, #0
    af4e:	469b      	mov	fp, r3
    af50:	4698      	mov	r8, r3
    af52:	3301      	adds	r3, #1
    af54:	2704      	movs	r7, #4
    af56:	9301      	str	r3, [sp, #4]
    af58:	e74c      	b.n	adf4 <__aeabi_dmul+0x4c>
    af5a:	2303      	movs	r3, #3
    af5c:	270c      	movs	r7, #12
    af5e:	9301      	str	r3, [sp, #4]
    af60:	e748      	b.n	adf4 <__aeabi_dmul+0x4c>
    af62:	2300      	movs	r3, #0
    af64:	2580      	movs	r5, #128	; 0x80
    af66:	4698      	mov	r8, r3
    af68:	2400      	movs	r4, #0
    af6a:	032d      	lsls	r5, r5, #12
    af6c:	4b05      	ldr	r3, [pc, #20]	; (af84 <__aeabi_dmul+0x1dc>)
    af6e:	e781      	b.n	ae74 <__aeabi_dmul+0xcc>
    af70:	465d      	mov	r5, fp
    af72:	4643      	mov	r3, r8
    af74:	9a01      	ldr	r2, [sp, #4]
    af76:	e76f      	b.n	ae58 <__aeabi_dmul+0xb0>
    af78:	465d      	mov	r5, fp
    af7a:	4643      	mov	r3, r8
    af7c:	0021      	movs	r1, r4
    af7e:	9a01      	ldr	r2, [sp, #4]
    af80:	e76a      	b.n	ae58 <__aeabi_dmul+0xb0>
    af82:	46c0      	nop			; (mov r8, r8)
    af84:	000007ff 	.word	0x000007ff
    af88:	fffffc01 	.word	0xfffffc01
    af8c:	0000e358 	.word	0x0000e358
    af90:	800fffff 	.word	0x800fffff
    af94:	000003f3 	.word	0x000003f3
    af98:	4642      	mov	r2, r8
    af9a:	0c12      	lsrs	r2, r2, #16
    af9c:	4691      	mov	r9, r2
    af9e:	0c1a      	lsrs	r2, r3, #16
    afa0:	4694      	mov	ip, r2
    afa2:	4642      	mov	r2, r8
    afa4:	0417      	lsls	r7, r2, #16
    afa6:	464a      	mov	r2, r9
    afa8:	041b      	lsls	r3, r3, #16
    afaa:	0c1b      	lsrs	r3, r3, #16
    afac:	435a      	muls	r2, r3
    afae:	4660      	mov	r0, ip
    afb0:	4690      	mov	r8, r2
    afb2:	464a      	mov	r2, r9
    afb4:	4342      	muls	r2, r0
    afb6:	0010      	movs	r0, r2
    afb8:	9203      	str	r2, [sp, #12]
    afba:	4662      	mov	r2, ip
    afbc:	001c      	movs	r4, r3
    afbe:	0c3f      	lsrs	r7, r7, #16
    afc0:	437a      	muls	r2, r7
    afc2:	437c      	muls	r4, r7
    afc4:	4442      	add	r2, r8
    afc6:	9201      	str	r2, [sp, #4]
    afc8:	0c22      	lsrs	r2, r4, #16
    afca:	4692      	mov	sl, r2
    afcc:	9a01      	ldr	r2, [sp, #4]
    afce:	4452      	add	r2, sl
    afd0:	4590      	cmp	r8, r2
    afd2:	d906      	bls.n	afe2 <__aeabi_dmul+0x23a>
    afd4:	4682      	mov	sl, r0
    afd6:	2080      	movs	r0, #128	; 0x80
    afd8:	0240      	lsls	r0, r0, #9
    afda:	4680      	mov	r8, r0
    afdc:	44c2      	add	sl, r8
    afde:	4650      	mov	r0, sl
    afe0:	9003      	str	r0, [sp, #12]
    afe2:	0c10      	lsrs	r0, r2, #16
    afe4:	9004      	str	r0, [sp, #16]
    afe6:	4648      	mov	r0, r9
    afe8:	0424      	lsls	r4, r4, #16
    afea:	0c24      	lsrs	r4, r4, #16
    afec:	0412      	lsls	r2, r2, #16
    afee:	1912      	adds	r2, r2, r4
    aff0:	9205      	str	r2, [sp, #20]
    aff2:	0c2a      	lsrs	r2, r5, #16
    aff4:	042d      	lsls	r5, r5, #16
    aff6:	0c2d      	lsrs	r5, r5, #16
    aff8:	4368      	muls	r0, r5
    affa:	002c      	movs	r4, r5
    affc:	4682      	mov	sl, r0
    affe:	4648      	mov	r0, r9
    b000:	437c      	muls	r4, r7
    b002:	4350      	muls	r0, r2
    b004:	4681      	mov	r9, r0
    b006:	0c20      	lsrs	r0, r4, #16
    b008:	4680      	mov	r8, r0
    b00a:	4357      	muls	r7, r2
    b00c:	4457      	add	r7, sl
    b00e:	4447      	add	r7, r8
    b010:	45ba      	cmp	sl, r7
    b012:	d903      	bls.n	b01c <__aeabi_dmul+0x274>
    b014:	2080      	movs	r0, #128	; 0x80
    b016:	0240      	lsls	r0, r0, #9
    b018:	4680      	mov	r8, r0
    b01a:	44c1      	add	r9, r8
    b01c:	0c38      	lsrs	r0, r7, #16
    b01e:	043f      	lsls	r7, r7, #16
    b020:	46b8      	mov	r8, r7
    b022:	4448      	add	r0, r9
    b024:	0424      	lsls	r4, r4, #16
    b026:	0c24      	lsrs	r4, r4, #16
    b028:	9001      	str	r0, [sp, #4]
    b02a:	9804      	ldr	r0, [sp, #16]
    b02c:	44a0      	add	r8, r4
    b02e:	4440      	add	r0, r8
    b030:	9004      	str	r0, [sp, #16]
    b032:	4658      	mov	r0, fp
    b034:	0c00      	lsrs	r0, r0, #16
    b036:	4681      	mov	r9, r0
    b038:	4658      	mov	r0, fp
    b03a:	0404      	lsls	r4, r0, #16
    b03c:	0c20      	lsrs	r0, r4, #16
    b03e:	4682      	mov	sl, r0
    b040:	0007      	movs	r7, r0
    b042:	4648      	mov	r0, r9
    b044:	435f      	muls	r7, r3
    b046:	464c      	mov	r4, r9
    b048:	4343      	muls	r3, r0
    b04a:	4660      	mov	r0, ip
    b04c:	4360      	muls	r0, r4
    b04e:	4664      	mov	r4, ip
    b050:	4683      	mov	fp, r0
    b052:	4650      	mov	r0, sl
    b054:	4344      	muls	r4, r0
    b056:	0c38      	lsrs	r0, r7, #16
    b058:	4684      	mov	ip, r0
    b05a:	18e4      	adds	r4, r4, r3
    b05c:	4464      	add	r4, ip
    b05e:	42a3      	cmp	r3, r4
    b060:	d903      	bls.n	b06a <__aeabi_dmul+0x2c2>
    b062:	2380      	movs	r3, #128	; 0x80
    b064:	025b      	lsls	r3, r3, #9
    b066:	469c      	mov	ip, r3
    b068:	44e3      	add	fp, ip
    b06a:	4648      	mov	r0, r9
    b06c:	043f      	lsls	r7, r7, #16
    b06e:	0c23      	lsrs	r3, r4, #16
    b070:	0c3f      	lsrs	r7, r7, #16
    b072:	0424      	lsls	r4, r4, #16
    b074:	19e4      	adds	r4, r4, r7
    b076:	4657      	mov	r7, sl
    b078:	4368      	muls	r0, r5
    b07a:	436f      	muls	r7, r5
    b07c:	4684      	mov	ip, r0
    b07e:	464d      	mov	r5, r9
    b080:	4650      	mov	r0, sl
    b082:	4355      	muls	r5, r2
    b084:	4342      	muls	r2, r0
    b086:	0c38      	lsrs	r0, r7, #16
    b088:	4681      	mov	r9, r0
    b08a:	4462      	add	r2, ip
    b08c:	444a      	add	r2, r9
    b08e:	445b      	add	r3, fp
    b090:	4594      	cmp	ip, r2
    b092:	d903      	bls.n	b09c <__aeabi_dmul+0x2f4>
    b094:	2080      	movs	r0, #128	; 0x80
    b096:	0240      	lsls	r0, r0, #9
    b098:	4684      	mov	ip, r0
    b09a:	4465      	add	r5, ip
    b09c:	9803      	ldr	r0, [sp, #12]
    b09e:	043f      	lsls	r7, r7, #16
    b0a0:	4683      	mov	fp, r0
    b0a2:	9804      	ldr	r0, [sp, #16]
    b0a4:	0c3f      	lsrs	r7, r7, #16
    b0a6:	4684      	mov	ip, r0
    b0a8:	44e3      	add	fp, ip
    b0aa:	45c3      	cmp	fp, r8
    b0ac:	4180      	sbcs	r0, r0
    b0ae:	4240      	negs	r0, r0
    b0b0:	4682      	mov	sl, r0
    b0b2:	0410      	lsls	r0, r2, #16
    b0b4:	4684      	mov	ip, r0
    b0b6:	9801      	ldr	r0, [sp, #4]
    b0b8:	4467      	add	r7, ip
    b0ba:	4684      	mov	ip, r0
    b0bc:	4467      	add	r7, ip
    b0be:	44a3      	add	fp, r4
    b0c0:	46bc      	mov	ip, r7
    b0c2:	45a3      	cmp	fp, r4
    b0c4:	41a4      	sbcs	r4, r4
    b0c6:	4699      	mov	r9, r3
    b0c8:	44d4      	add	ip, sl
    b0ca:	4264      	negs	r4, r4
    b0cc:	4287      	cmp	r7, r0
    b0ce:	41bf      	sbcs	r7, r7
    b0d0:	45d4      	cmp	ip, sl
    b0d2:	4180      	sbcs	r0, r0
    b0d4:	44e1      	add	r9, ip
    b0d6:	46a0      	mov	r8, r4
    b0d8:	4599      	cmp	r9, r3
    b0da:	419b      	sbcs	r3, r3
    b0dc:	427f      	negs	r7, r7
    b0de:	4240      	negs	r0, r0
    b0e0:	44c8      	add	r8, r9
    b0e2:	4307      	orrs	r7, r0
    b0e4:	0c12      	lsrs	r2, r2, #16
    b0e6:	18ba      	adds	r2, r7, r2
    b0e8:	45a0      	cmp	r8, r4
    b0ea:	41a4      	sbcs	r4, r4
    b0ec:	425f      	negs	r7, r3
    b0ee:	003b      	movs	r3, r7
    b0f0:	4264      	negs	r4, r4
    b0f2:	4323      	orrs	r3, r4
    b0f4:	18d7      	adds	r7, r2, r3
    b0f6:	4643      	mov	r3, r8
    b0f8:	197d      	adds	r5, r7, r5
    b0fa:	0ddb      	lsrs	r3, r3, #23
    b0fc:	026d      	lsls	r5, r5, #9
    b0fe:	431d      	orrs	r5, r3
    b100:	465b      	mov	r3, fp
    b102:	025a      	lsls	r2, r3, #9
    b104:	9b05      	ldr	r3, [sp, #20]
    b106:	431a      	orrs	r2, r3
    b108:	1e53      	subs	r3, r2, #1
    b10a:	419a      	sbcs	r2, r3
    b10c:	465b      	mov	r3, fp
    b10e:	0ddb      	lsrs	r3, r3, #23
    b110:	431a      	orrs	r2, r3
    b112:	4643      	mov	r3, r8
    b114:	025b      	lsls	r3, r3, #9
    b116:	4313      	orrs	r3, r2
    b118:	01ea      	lsls	r2, r5, #7
    b11a:	d507      	bpl.n	b12c <__aeabi_dmul+0x384>
    b11c:	2201      	movs	r2, #1
    b11e:	085c      	lsrs	r4, r3, #1
    b120:	4013      	ands	r3, r2
    b122:	4323      	orrs	r3, r4
    b124:	07ea      	lsls	r2, r5, #31
    b126:	9e02      	ldr	r6, [sp, #8]
    b128:	4313      	orrs	r3, r2
    b12a:	086d      	lsrs	r5, r5, #1
    b12c:	4a57      	ldr	r2, [pc, #348]	; (b28c <__aeabi_dmul+0x4e4>)
    b12e:	18b2      	adds	r2, r6, r2
    b130:	2a00      	cmp	r2, #0
    b132:	dd4b      	ble.n	b1cc <__aeabi_dmul+0x424>
    b134:	0758      	lsls	r0, r3, #29
    b136:	d009      	beq.n	b14c <__aeabi_dmul+0x3a4>
    b138:	200f      	movs	r0, #15
    b13a:	4018      	ands	r0, r3
    b13c:	2804      	cmp	r0, #4
    b13e:	d005      	beq.n	b14c <__aeabi_dmul+0x3a4>
    b140:	1d18      	adds	r0, r3, #4
    b142:	4298      	cmp	r0, r3
    b144:	419b      	sbcs	r3, r3
    b146:	425b      	negs	r3, r3
    b148:	18ed      	adds	r5, r5, r3
    b14a:	0003      	movs	r3, r0
    b14c:	01e8      	lsls	r0, r5, #7
    b14e:	d504      	bpl.n	b15a <__aeabi_dmul+0x3b2>
    b150:	4a4f      	ldr	r2, [pc, #316]	; (b290 <__aeabi_dmul+0x4e8>)
    b152:	4015      	ands	r5, r2
    b154:	2280      	movs	r2, #128	; 0x80
    b156:	00d2      	lsls	r2, r2, #3
    b158:	18b2      	adds	r2, r6, r2
    b15a:	484e      	ldr	r0, [pc, #312]	; (b294 <__aeabi_dmul+0x4ec>)
    b15c:	4282      	cmp	r2, r0
    b15e:	dd00      	ble.n	b162 <__aeabi_dmul+0x3ba>
    b160:	e6e7      	b.n	af32 <__aeabi_dmul+0x18a>
    b162:	2401      	movs	r4, #1
    b164:	08db      	lsrs	r3, r3, #3
    b166:	0768      	lsls	r0, r5, #29
    b168:	4318      	orrs	r0, r3
    b16a:	026d      	lsls	r5, r5, #9
    b16c:	0553      	lsls	r3, r2, #21
    b16e:	4680      	mov	r8, r0
    b170:	0b2d      	lsrs	r5, r5, #12
    b172:	0d5b      	lsrs	r3, r3, #21
    b174:	400c      	ands	r4, r1
    b176:	e67d      	b.n	ae74 <__aeabi_dmul+0xcc>
    b178:	2280      	movs	r2, #128	; 0x80
    b17a:	4659      	mov	r1, fp
    b17c:	0312      	lsls	r2, r2, #12
    b17e:	4211      	tst	r1, r2
    b180:	d008      	beq.n	b194 <__aeabi_dmul+0x3ec>
    b182:	4215      	tst	r5, r2
    b184:	d106      	bne.n	b194 <__aeabi_dmul+0x3ec>
    b186:	4315      	orrs	r5, r2
    b188:	032d      	lsls	r5, r5, #12
    b18a:	4698      	mov	r8, r3
    b18c:	0b2d      	lsrs	r5, r5, #12
    b18e:	464c      	mov	r4, r9
    b190:	4b41      	ldr	r3, [pc, #260]	; (b298 <__aeabi_dmul+0x4f0>)
    b192:	e66f      	b.n	ae74 <__aeabi_dmul+0xcc>
    b194:	465d      	mov	r5, fp
    b196:	4315      	orrs	r5, r2
    b198:	032d      	lsls	r5, r5, #12
    b19a:	0b2d      	lsrs	r5, r5, #12
    b19c:	4b3e      	ldr	r3, [pc, #248]	; (b298 <__aeabi_dmul+0x4f0>)
    b19e:	e669      	b.n	ae74 <__aeabi_dmul+0xcc>
    b1a0:	0003      	movs	r3, r0
    b1a2:	4655      	mov	r5, sl
    b1a4:	3b28      	subs	r3, #40	; 0x28
    b1a6:	409d      	lsls	r5, r3
    b1a8:	2300      	movs	r3, #0
    b1aa:	e6bc      	b.n	af26 <__aeabi_dmul+0x17e>
    b1ac:	4650      	mov	r0, sl
    b1ae:	f000 fc37 	bl	ba20 <__clzsi2>
    b1b2:	3020      	adds	r0, #32
    b1b4:	e6a8      	b.n	af08 <__aeabi_dmul+0x160>
    b1b6:	0003      	movs	r3, r0
    b1b8:	3b28      	subs	r3, #40	; 0x28
    b1ba:	409f      	lsls	r7, r3
    b1bc:	2300      	movs	r3, #0
    b1be:	46bb      	mov	fp, r7
    b1c0:	4698      	mov	r8, r3
    b1c2:	e689      	b.n	aed8 <__aeabi_dmul+0x130>
    b1c4:	f000 fc2c 	bl	ba20 <__clzsi2>
    b1c8:	3020      	adds	r0, #32
    b1ca:	e673      	b.n	aeb4 <__aeabi_dmul+0x10c>
    b1cc:	2401      	movs	r4, #1
    b1ce:	1aa6      	subs	r6, r4, r2
    b1d0:	2e38      	cmp	r6, #56	; 0x38
    b1d2:	dd07      	ble.n	b1e4 <__aeabi_dmul+0x43c>
    b1d4:	2200      	movs	r2, #0
    b1d6:	400c      	ands	r4, r1
    b1d8:	2300      	movs	r3, #0
    b1da:	2500      	movs	r5, #0
    b1dc:	4690      	mov	r8, r2
    b1de:	e649      	b.n	ae74 <__aeabi_dmul+0xcc>
    b1e0:	9e02      	ldr	r6, [sp, #8]
    b1e2:	e7a3      	b.n	b12c <__aeabi_dmul+0x384>
    b1e4:	2e1f      	cmp	r6, #31
    b1e6:	dc20      	bgt.n	b22a <__aeabi_dmul+0x482>
    b1e8:	2220      	movs	r2, #32
    b1ea:	002c      	movs	r4, r5
    b1ec:	0018      	movs	r0, r3
    b1ee:	1b92      	subs	r2, r2, r6
    b1f0:	40f0      	lsrs	r0, r6
    b1f2:	4094      	lsls	r4, r2
    b1f4:	4093      	lsls	r3, r2
    b1f6:	4304      	orrs	r4, r0
    b1f8:	1e58      	subs	r0, r3, #1
    b1fa:	4183      	sbcs	r3, r0
    b1fc:	431c      	orrs	r4, r3
    b1fe:	40f5      	lsrs	r5, r6
    b200:	0763      	lsls	r3, r4, #29
    b202:	d009      	beq.n	b218 <__aeabi_dmul+0x470>
    b204:	230f      	movs	r3, #15
    b206:	4023      	ands	r3, r4
    b208:	2b04      	cmp	r3, #4
    b20a:	d005      	beq.n	b218 <__aeabi_dmul+0x470>
    b20c:	0023      	movs	r3, r4
    b20e:	1d1c      	adds	r4, r3, #4
    b210:	429c      	cmp	r4, r3
    b212:	4192      	sbcs	r2, r2
    b214:	4252      	negs	r2, r2
    b216:	18ad      	adds	r5, r5, r2
    b218:	022b      	lsls	r3, r5, #8
    b21a:	d51f      	bpl.n	b25c <__aeabi_dmul+0x4b4>
    b21c:	2401      	movs	r4, #1
    b21e:	2200      	movs	r2, #0
    b220:	400c      	ands	r4, r1
    b222:	2301      	movs	r3, #1
    b224:	2500      	movs	r5, #0
    b226:	4690      	mov	r8, r2
    b228:	e624      	b.n	ae74 <__aeabi_dmul+0xcc>
    b22a:	201f      	movs	r0, #31
    b22c:	002c      	movs	r4, r5
    b22e:	4240      	negs	r0, r0
    b230:	1a82      	subs	r2, r0, r2
    b232:	40d4      	lsrs	r4, r2
    b234:	2e20      	cmp	r6, #32
    b236:	d01c      	beq.n	b272 <__aeabi_dmul+0x4ca>
    b238:	2240      	movs	r2, #64	; 0x40
    b23a:	1b96      	subs	r6, r2, r6
    b23c:	40b5      	lsls	r5, r6
    b23e:	432b      	orrs	r3, r5
    b240:	1e58      	subs	r0, r3, #1
    b242:	4183      	sbcs	r3, r0
    b244:	2007      	movs	r0, #7
    b246:	4323      	orrs	r3, r4
    b248:	4018      	ands	r0, r3
    b24a:	2500      	movs	r5, #0
    b24c:	2800      	cmp	r0, #0
    b24e:	d009      	beq.n	b264 <__aeabi_dmul+0x4bc>
    b250:	220f      	movs	r2, #15
    b252:	2500      	movs	r5, #0
    b254:	401a      	ands	r2, r3
    b256:	001c      	movs	r4, r3
    b258:	2a04      	cmp	r2, #4
    b25a:	d1d8      	bne.n	b20e <__aeabi_dmul+0x466>
    b25c:	0023      	movs	r3, r4
    b25e:	0768      	lsls	r0, r5, #29
    b260:	026d      	lsls	r5, r5, #9
    b262:	0b2d      	lsrs	r5, r5, #12
    b264:	2401      	movs	r4, #1
    b266:	08db      	lsrs	r3, r3, #3
    b268:	4303      	orrs	r3, r0
    b26a:	4698      	mov	r8, r3
    b26c:	400c      	ands	r4, r1
    b26e:	2300      	movs	r3, #0
    b270:	e600      	b.n	ae74 <__aeabi_dmul+0xcc>
    b272:	2500      	movs	r5, #0
    b274:	e7e3      	b.n	b23e <__aeabi_dmul+0x496>
    b276:	2280      	movs	r2, #128	; 0x80
    b278:	2401      	movs	r4, #1
    b27a:	0312      	lsls	r2, r2, #12
    b27c:	4315      	orrs	r5, r2
    b27e:	032d      	lsls	r5, r5, #12
    b280:	4698      	mov	r8, r3
    b282:	0b2d      	lsrs	r5, r5, #12
    b284:	400c      	ands	r4, r1
    b286:	4b04      	ldr	r3, [pc, #16]	; (b298 <__aeabi_dmul+0x4f0>)
    b288:	e5f4      	b.n	ae74 <__aeabi_dmul+0xcc>
    b28a:	46c0      	nop			; (mov r8, r8)
    b28c:	000003ff 	.word	0x000003ff
    b290:	feffffff 	.word	0xfeffffff
    b294:	000007fe 	.word	0x000007fe
    b298:	000007ff 	.word	0x000007ff

0000b29c <__aeabi_dsub>:
    b29c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b29e:	4657      	mov	r7, sl
    b2a0:	464e      	mov	r6, r9
    b2a2:	4645      	mov	r5, r8
    b2a4:	b4e0      	push	{r5, r6, r7}
    b2a6:	000e      	movs	r6, r1
    b2a8:	0011      	movs	r1, r2
    b2aa:	0ff2      	lsrs	r2, r6, #31
    b2ac:	4692      	mov	sl, r2
    b2ae:	00c5      	lsls	r5, r0, #3
    b2b0:	0f42      	lsrs	r2, r0, #29
    b2b2:	0318      	lsls	r0, r3, #12
    b2b4:	0337      	lsls	r7, r6, #12
    b2b6:	0074      	lsls	r4, r6, #1
    b2b8:	0a40      	lsrs	r0, r0, #9
    b2ba:	0f4e      	lsrs	r6, r1, #29
    b2bc:	0a7f      	lsrs	r7, r7, #9
    b2be:	4330      	orrs	r0, r6
    b2c0:	4ecf      	ldr	r6, [pc, #828]	; (b600 <__aeabi_dsub+0x364>)
    b2c2:	4317      	orrs	r7, r2
    b2c4:	005a      	lsls	r2, r3, #1
    b2c6:	0d64      	lsrs	r4, r4, #21
    b2c8:	0d52      	lsrs	r2, r2, #21
    b2ca:	0fdb      	lsrs	r3, r3, #31
    b2cc:	00c9      	lsls	r1, r1, #3
    b2ce:	42b2      	cmp	r2, r6
    b2d0:	d100      	bne.n	b2d4 <__aeabi_dsub+0x38>
    b2d2:	e0e5      	b.n	b4a0 <__aeabi_dsub+0x204>
    b2d4:	2601      	movs	r6, #1
    b2d6:	4073      	eors	r3, r6
    b2d8:	1aa6      	subs	r6, r4, r2
    b2da:	46b4      	mov	ip, r6
    b2dc:	4553      	cmp	r3, sl
    b2de:	d100      	bne.n	b2e2 <__aeabi_dsub+0x46>
    b2e0:	e0af      	b.n	b442 <__aeabi_dsub+0x1a6>
    b2e2:	2e00      	cmp	r6, #0
    b2e4:	dc00      	bgt.n	b2e8 <__aeabi_dsub+0x4c>
    b2e6:	e10d      	b.n	b504 <__aeabi_dsub+0x268>
    b2e8:	2a00      	cmp	r2, #0
    b2ea:	d13a      	bne.n	b362 <__aeabi_dsub+0xc6>
    b2ec:	0003      	movs	r3, r0
    b2ee:	430b      	orrs	r3, r1
    b2f0:	d000      	beq.n	b2f4 <__aeabi_dsub+0x58>
    b2f2:	e0e4      	b.n	b4be <__aeabi_dsub+0x222>
    b2f4:	076b      	lsls	r3, r5, #29
    b2f6:	d009      	beq.n	b30c <__aeabi_dsub+0x70>
    b2f8:	230f      	movs	r3, #15
    b2fa:	402b      	ands	r3, r5
    b2fc:	2b04      	cmp	r3, #4
    b2fe:	d005      	beq.n	b30c <__aeabi_dsub+0x70>
    b300:	1d2b      	adds	r3, r5, #4
    b302:	42ab      	cmp	r3, r5
    b304:	41ad      	sbcs	r5, r5
    b306:	426d      	negs	r5, r5
    b308:	197f      	adds	r7, r7, r5
    b30a:	001d      	movs	r5, r3
    b30c:	023b      	lsls	r3, r7, #8
    b30e:	d400      	bmi.n	b312 <__aeabi_dsub+0x76>
    b310:	e088      	b.n	b424 <__aeabi_dsub+0x188>
    b312:	4bbb      	ldr	r3, [pc, #748]	; (b600 <__aeabi_dsub+0x364>)
    b314:	3401      	adds	r4, #1
    b316:	429c      	cmp	r4, r3
    b318:	d100      	bne.n	b31c <__aeabi_dsub+0x80>
    b31a:	e110      	b.n	b53e <__aeabi_dsub+0x2a2>
    b31c:	003a      	movs	r2, r7
    b31e:	4bb9      	ldr	r3, [pc, #740]	; (b604 <__aeabi_dsub+0x368>)
    b320:	4651      	mov	r1, sl
    b322:	401a      	ands	r2, r3
    b324:	2301      	movs	r3, #1
    b326:	0750      	lsls	r0, r2, #29
    b328:	08ed      	lsrs	r5, r5, #3
    b32a:	0252      	lsls	r2, r2, #9
    b32c:	0564      	lsls	r4, r4, #21
    b32e:	4305      	orrs	r5, r0
    b330:	0b12      	lsrs	r2, r2, #12
    b332:	0d64      	lsrs	r4, r4, #21
    b334:	400b      	ands	r3, r1
    b336:	2100      	movs	r1, #0
    b338:	0028      	movs	r0, r5
    b33a:	0312      	lsls	r2, r2, #12
    b33c:	0d0d      	lsrs	r5, r1, #20
    b33e:	0b12      	lsrs	r2, r2, #12
    b340:	0564      	lsls	r4, r4, #21
    b342:	052d      	lsls	r5, r5, #20
    b344:	4315      	orrs	r5, r2
    b346:	0862      	lsrs	r2, r4, #1
    b348:	4caf      	ldr	r4, [pc, #700]	; (b608 <__aeabi_dsub+0x36c>)
    b34a:	07db      	lsls	r3, r3, #31
    b34c:	402c      	ands	r4, r5
    b34e:	4314      	orrs	r4, r2
    b350:	0064      	lsls	r4, r4, #1
    b352:	0864      	lsrs	r4, r4, #1
    b354:	431c      	orrs	r4, r3
    b356:	0021      	movs	r1, r4
    b358:	bc1c      	pop	{r2, r3, r4}
    b35a:	4690      	mov	r8, r2
    b35c:	4699      	mov	r9, r3
    b35e:	46a2      	mov	sl, r4
    b360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b362:	4ba7      	ldr	r3, [pc, #668]	; (b600 <__aeabi_dsub+0x364>)
    b364:	429c      	cmp	r4, r3
    b366:	d0c5      	beq.n	b2f4 <__aeabi_dsub+0x58>
    b368:	2380      	movs	r3, #128	; 0x80
    b36a:	041b      	lsls	r3, r3, #16
    b36c:	4318      	orrs	r0, r3
    b36e:	4663      	mov	r3, ip
    b370:	2b38      	cmp	r3, #56	; 0x38
    b372:	dd00      	ble.n	b376 <__aeabi_dsub+0xda>
    b374:	e0fd      	b.n	b572 <__aeabi_dsub+0x2d6>
    b376:	2b1f      	cmp	r3, #31
    b378:	dd00      	ble.n	b37c <__aeabi_dsub+0xe0>
    b37a:	e130      	b.n	b5de <__aeabi_dsub+0x342>
    b37c:	4662      	mov	r2, ip
    b37e:	2320      	movs	r3, #32
    b380:	1a9b      	subs	r3, r3, r2
    b382:	0002      	movs	r2, r0
    b384:	409a      	lsls	r2, r3
    b386:	4666      	mov	r6, ip
    b388:	4690      	mov	r8, r2
    b38a:	000a      	movs	r2, r1
    b38c:	4099      	lsls	r1, r3
    b38e:	40f2      	lsrs	r2, r6
    b390:	4646      	mov	r6, r8
    b392:	1e4b      	subs	r3, r1, #1
    b394:	4199      	sbcs	r1, r3
    b396:	4332      	orrs	r2, r6
    b398:	4311      	orrs	r1, r2
    b39a:	4663      	mov	r3, ip
    b39c:	0002      	movs	r2, r0
    b39e:	40da      	lsrs	r2, r3
    b3a0:	1a69      	subs	r1, r5, r1
    b3a2:	428d      	cmp	r5, r1
    b3a4:	419b      	sbcs	r3, r3
    b3a6:	000d      	movs	r5, r1
    b3a8:	1aba      	subs	r2, r7, r2
    b3aa:	425b      	negs	r3, r3
    b3ac:	1ad7      	subs	r7, r2, r3
    b3ae:	023b      	lsls	r3, r7, #8
    b3b0:	d535      	bpl.n	b41e <__aeabi_dsub+0x182>
    b3b2:	027a      	lsls	r2, r7, #9
    b3b4:	0a53      	lsrs	r3, r2, #9
    b3b6:	4698      	mov	r8, r3
    b3b8:	4643      	mov	r3, r8
    b3ba:	2b00      	cmp	r3, #0
    b3bc:	d100      	bne.n	b3c0 <__aeabi_dsub+0x124>
    b3be:	e0c4      	b.n	b54a <__aeabi_dsub+0x2ae>
    b3c0:	4640      	mov	r0, r8
    b3c2:	f000 fb2d 	bl	ba20 <__clzsi2>
    b3c6:	0003      	movs	r3, r0
    b3c8:	3b08      	subs	r3, #8
    b3ca:	2b1f      	cmp	r3, #31
    b3cc:	dd00      	ble.n	b3d0 <__aeabi_dsub+0x134>
    b3ce:	e0c5      	b.n	b55c <__aeabi_dsub+0x2c0>
    b3d0:	2220      	movs	r2, #32
    b3d2:	0029      	movs	r1, r5
    b3d4:	1ad2      	subs	r2, r2, r3
    b3d6:	4647      	mov	r7, r8
    b3d8:	40d1      	lsrs	r1, r2
    b3da:	409f      	lsls	r7, r3
    b3dc:	000a      	movs	r2, r1
    b3de:	409d      	lsls	r5, r3
    b3e0:	433a      	orrs	r2, r7
    b3e2:	429c      	cmp	r4, r3
    b3e4:	dd00      	ble.n	b3e8 <__aeabi_dsub+0x14c>
    b3e6:	e0c0      	b.n	b56a <__aeabi_dsub+0x2ce>
    b3e8:	1b1c      	subs	r4, r3, r4
    b3ea:	1c63      	adds	r3, r4, #1
    b3ec:	2b1f      	cmp	r3, #31
    b3ee:	dd00      	ble.n	b3f2 <__aeabi_dsub+0x156>
    b3f0:	e0e4      	b.n	b5bc <__aeabi_dsub+0x320>
    b3f2:	2120      	movs	r1, #32
    b3f4:	0014      	movs	r4, r2
    b3f6:	0028      	movs	r0, r5
    b3f8:	1ac9      	subs	r1, r1, r3
    b3fa:	40d8      	lsrs	r0, r3
    b3fc:	408c      	lsls	r4, r1
    b3fe:	408d      	lsls	r5, r1
    b400:	4304      	orrs	r4, r0
    b402:	40da      	lsrs	r2, r3
    b404:	1e68      	subs	r0, r5, #1
    b406:	4185      	sbcs	r5, r0
    b408:	0017      	movs	r7, r2
    b40a:	4325      	orrs	r5, r4
    b40c:	2400      	movs	r4, #0
    b40e:	e771      	b.n	b2f4 <__aeabi_dsub+0x58>
    b410:	4642      	mov	r2, r8
    b412:	4663      	mov	r3, ip
    b414:	431a      	orrs	r2, r3
    b416:	d100      	bne.n	b41a <__aeabi_dsub+0x17e>
    b418:	e24c      	b.n	b8b4 <__aeabi_dsub+0x618>
    b41a:	4667      	mov	r7, ip
    b41c:	4645      	mov	r5, r8
    b41e:	076b      	lsls	r3, r5, #29
    b420:	d000      	beq.n	b424 <__aeabi_dsub+0x188>
    b422:	e769      	b.n	b2f8 <__aeabi_dsub+0x5c>
    b424:	2301      	movs	r3, #1
    b426:	4651      	mov	r1, sl
    b428:	0778      	lsls	r0, r7, #29
    b42a:	08ed      	lsrs	r5, r5, #3
    b42c:	08fa      	lsrs	r2, r7, #3
    b42e:	400b      	ands	r3, r1
    b430:	4305      	orrs	r5, r0
    b432:	4973      	ldr	r1, [pc, #460]	; (b600 <__aeabi_dsub+0x364>)
    b434:	428c      	cmp	r4, r1
    b436:	d038      	beq.n	b4aa <__aeabi_dsub+0x20e>
    b438:	0312      	lsls	r2, r2, #12
    b43a:	0564      	lsls	r4, r4, #21
    b43c:	0b12      	lsrs	r2, r2, #12
    b43e:	0d64      	lsrs	r4, r4, #21
    b440:	e779      	b.n	b336 <__aeabi_dsub+0x9a>
    b442:	2e00      	cmp	r6, #0
    b444:	dc00      	bgt.n	b448 <__aeabi_dsub+0x1ac>
    b446:	e09a      	b.n	b57e <__aeabi_dsub+0x2e2>
    b448:	2a00      	cmp	r2, #0
    b44a:	d047      	beq.n	b4dc <__aeabi_dsub+0x240>
    b44c:	4a6c      	ldr	r2, [pc, #432]	; (b600 <__aeabi_dsub+0x364>)
    b44e:	4294      	cmp	r4, r2
    b450:	d100      	bne.n	b454 <__aeabi_dsub+0x1b8>
    b452:	e74f      	b.n	b2f4 <__aeabi_dsub+0x58>
    b454:	2280      	movs	r2, #128	; 0x80
    b456:	0412      	lsls	r2, r2, #16
    b458:	4310      	orrs	r0, r2
    b45a:	4662      	mov	r2, ip
    b45c:	2a38      	cmp	r2, #56	; 0x38
    b45e:	dc00      	bgt.n	b462 <__aeabi_dsub+0x1c6>
    b460:	e108      	b.n	b674 <__aeabi_dsub+0x3d8>
    b462:	4301      	orrs	r1, r0
    b464:	1e48      	subs	r0, r1, #1
    b466:	4181      	sbcs	r1, r0
    b468:	2200      	movs	r2, #0
    b46a:	b2c9      	uxtb	r1, r1
    b46c:	1949      	adds	r1, r1, r5
    b46e:	19d2      	adds	r2, r2, r7
    b470:	42a9      	cmp	r1, r5
    b472:	41bf      	sbcs	r7, r7
    b474:	000d      	movs	r5, r1
    b476:	427f      	negs	r7, r7
    b478:	18bf      	adds	r7, r7, r2
    b47a:	023a      	lsls	r2, r7, #8
    b47c:	d400      	bmi.n	b480 <__aeabi_dsub+0x1e4>
    b47e:	e142      	b.n	b706 <__aeabi_dsub+0x46a>
    b480:	4a5f      	ldr	r2, [pc, #380]	; (b600 <__aeabi_dsub+0x364>)
    b482:	3401      	adds	r4, #1
    b484:	4294      	cmp	r4, r2
    b486:	d100      	bne.n	b48a <__aeabi_dsub+0x1ee>
    b488:	e14e      	b.n	b728 <__aeabi_dsub+0x48c>
    b48a:	2001      	movs	r0, #1
    b48c:	4a5d      	ldr	r2, [pc, #372]	; (b604 <__aeabi_dsub+0x368>)
    b48e:	0869      	lsrs	r1, r5, #1
    b490:	403a      	ands	r2, r7
    b492:	4028      	ands	r0, r5
    b494:	4308      	orrs	r0, r1
    b496:	07d5      	lsls	r5, r2, #31
    b498:	4305      	orrs	r5, r0
    b49a:	0857      	lsrs	r7, r2, #1
    b49c:	469a      	mov	sl, r3
    b49e:	e729      	b.n	b2f4 <__aeabi_dsub+0x58>
    b4a0:	0006      	movs	r6, r0
    b4a2:	430e      	orrs	r6, r1
    b4a4:	d000      	beq.n	b4a8 <__aeabi_dsub+0x20c>
    b4a6:	e717      	b.n	b2d8 <__aeabi_dsub+0x3c>
    b4a8:	e714      	b.n	b2d4 <__aeabi_dsub+0x38>
    b4aa:	0029      	movs	r1, r5
    b4ac:	4311      	orrs	r1, r2
    b4ae:	d100      	bne.n	b4b2 <__aeabi_dsub+0x216>
    b4b0:	e1f9      	b.n	b8a6 <__aeabi_dsub+0x60a>
    b4b2:	2180      	movs	r1, #128	; 0x80
    b4b4:	0309      	lsls	r1, r1, #12
    b4b6:	430a      	orrs	r2, r1
    b4b8:	0312      	lsls	r2, r2, #12
    b4ba:	0b12      	lsrs	r2, r2, #12
    b4bc:	e73b      	b.n	b336 <__aeabi_dsub+0x9a>
    b4be:	2301      	movs	r3, #1
    b4c0:	425b      	negs	r3, r3
    b4c2:	4698      	mov	r8, r3
    b4c4:	44c4      	add	ip, r8
    b4c6:	4663      	mov	r3, ip
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d172      	bne.n	b5b2 <__aeabi_dsub+0x316>
    b4cc:	1a69      	subs	r1, r5, r1
    b4ce:	428d      	cmp	r5, r1
    b4d0:	419b      	sbcs	r3, r3
    b4d2:	1a3f      	subs	r7, r7, r0
    b4d4:	425b      	negs	r3, r3
    b4d6:	1aff      	subs	r7, r7, r3
    b4d8:	000d      	movs	r5, r1
    b4da:	e768      	b.n	b3ae <__aeabi_dsub+0x112>
    b4dc:	0002      	movs	r2, r0
    b4de:	430a      	orrs	r2, r1
    b4e0:	d100      	bne.n	b4e4 <__aeabi_dsub+0x248>
    b4e2:	e707      	b.n	b2f4 <__aeabi_dsub+0x58>
    b4e4:	2201      	movs	r2, #1
    b4e6:	4252      	negs	r2, r2
    b4e8:	4690      	mov	r8, r2
    b4ea:	44c4      	add	ip, r8
    b4ec:	4662      	mov	r2, ip
    b4ee:	2a00      	cmp	r2, #0
    b4f0:	d000      	beq.n	b4f4 <__aeabi_dsub+0x258>
    b4f2:	e0e6      	b.n	b6c2 <__aeabi_dsub+0x426>
    b4f4:	1869      	adds	r1, r5, r1
    b4f6:	42a9      	cmp	r1, r5
    b4f8:	41b6      	sbcs	r6, r6
    b4fa:	183f      	adds	r7, r7, r0
    b4fc:	4276      	negs	r6, r6
    b4fe:	19f7      	adds	r7, r6, r7
    b500:	000d      	movs	r5, r1
    b502:	e7ba      	b.n	b47a <__aeabi_dsub+0x1de>
    b504:	2e00      	cmp	r6, #0
    b506:	d000      	beq.n	b50a <__aeabi_dsub+0x26e>
    b508:	e080      	b.n	b60c <__aeabi_dsub+0x370>
    b50a:	1c62      	adds	r2, r4, #1
    b50c:	0552      	lsls	r2, r2, #21
    b50e:	0d52      	lsrs	r2, r2, #21
    b510:	2a01      	cmp	r2, #1
    b512:	dc00      	bgt.n	b516 <__aeabi_dsub+0x27a>
    b514:	e0f9      	b.n	b70a <__aeabi_dsub+0x46e>
    b516:	1a6a      	subs	r2, r5, r1
    b518:	4691      	mov	r9, r2
    b51a:	454d      	cmp	r5, r9
    b51c:	41b6      	sbcs	r6, r6
    b51e:	1a3a      	subs	r2, r7, r0
    b520:	4276      	negs	r6, r6
    b522:	1b92      	subs	r2, r2, r6
    b524:	4690      	mov	r8, r2
    b526:	0212      	lsls	r2, r2, #8
    b528:	d400      	bmi.n	b52c <__aeabi_dsub+0x290>
    b52a:	e099      	b.n	b660 <__aeabi_dsub+0x3c4>
    b52c:	1b4d      	subs	r5, r1, r5
    b52e:	42a9      	cmp	r1, r5
    b530:	4189      	sbcs	r1, r1
    b532:	1bc7      	subs	r7, r0, r7
    b534:	4249      	negs	r1, r1
    b536:	1a7a      	subs	r2, r7, r1
    b538:	4690      	mov	r8, r2
    b53a:	469a      	mov	sl, r3
    b53c:	e73c      	b.n	b3b8 <__aeabi_dsub+0x11c>
    b53e:	4652      	mov	r2, sl
    b540:	2301      	movs	r3, #1
    b542:	2500      	movs	r5, #0
    b544:	4013      	ands	r3, r2
    b546:	2200      	movs	r2, #0
    b548:	e6f5      	b.n	b336 <__aeabi_dsub+0x9a>
    b54a:	0028      	movs	r0, r5
    b54c:	f000 fa68 	bl	ba20 <__clzsi2>
    b550:	3020      	adds	r0, #32
    b552:	0003      	movs	r3, r0
    b554:	3b08      	subs	r3, #8
    b556:	2b1f      	cmp	r3, #31
    b558:	dc00      	bgt.n	b55c <__aeabi_dsub+0x2c0>
    b55a:	e739      	b.n	b3d0 <__aeabi_dsub+0x134>
    b55c:	002a      	movs	r2, r5
    b55e:	3828      	subs	r0, #40	; 0x28
    b560:	4082      	lsls	r2, r0
    b562:	2500      	movs	r5, #0
    b564:	429c      	cmp	r4, r3
    b566:	dc00      	bgt.n	b56a <__aeabi_dsub+0x2ce>
    b568:	e73e      	b.n	b3e8 <__aeabi_dsub+0x14c>
    b56a:	4f26      	ldr	r7, [pc, #152]	; (b604 <__aeabi_dsub+0x368>)
    b56c:	1ae4      	subs	r4, r4, r3
    b56e:	4017      	ands	r7, r2
    b570:	e6c0      	b.n	b2f4 <__aeabi_dsub+0x58>
    b572:	4301      	orrs	r1, r0
    b574:	1e48      	subs	r0, r1, #1
    b576:	4181      	sbcs	r1, r0
    b578:	2200      	movs	r2, #0
    b57a:	b2c9      	uxtb	r1, r1
    b57c:	e710      	b.n	b3a0 <__aeabi_dsub+0x104>
    b57e:	2e00      	cmp	r6, #0
    b580:	d000      	beq.n	b584 <__aeabi_dsub+0x2e8>
    b582:	e0f1      	b.n	b768 <__aeabi_dsub+0x4cc>
    b584:	1c62      	adds	r2, r4, #1
    b586:	4694      	mov	ip, r2
    b588:	0552      	lsls	r2, r2, #21
    b58a:	0d52      	lsrs	r2, r2, #21
    b58c:	2a01      	cmp	r2, #1
    b58e:	dc00      	bgt.n	b592 <__aeabi_dsub+0x2f6>
    b590:	e0a0      	b.n	b6d4 <__aeabi_dsub+0x438>
    b592:	4a1b      	ldr	r2, [pc, #108]	; (b600 <__aeabi_dsub+0x364>)
    b594:	4594      	cmp	ip, r2
    b596:	d100      	bne.n	b59a <__aeabi_dsub+0x2fe>
    b598:	e0c5      	b.n	b726 <__aeabi_dsub+0x48a>
    b59a:	1869      	adds	r1, r5, r1
    b59c:	42a9      	cmp	r1, r5
    b59e:	4192      	sbcs	r2, r2
    b5a0:	183f      	adds	r7, r7, r0
    b5a2:	4252      	negs	r2, r2
    b5a4:	19d2      	adds	r2, r2, r7
    b5a6:	0849      	lsrs	r1, r1, #1
    b5a8:	07d5      	lsls	r5, r2, #31
    b5aa:	430d      	orrs	r5, r1
    b5ac:	0857      	lsrs	r7, r2, #1
    b5ae:	4664      	mov	r4, ip
    b5b0:	e6a0      	b.n	b2f4 <__aeabi_dsub+0x58>
    b5b2:	4b13      	ldr	r3, [pc, #76]	; (b600 <__aeabi_dsub+0x364>)
    b5b4:	429c      	cmp	r4, r3
    b5b6:	d000      	beq.n	b5ba <__aeabi_dsub+0x31e>
    b5b8:	e6d9      	b.n	b36e <__aeabi_dsub+0xd2>
    b5ba:	e69b      	b.n	b2f4 <__aeabi_dsub+0x58>
    b5bc:	0011      	movs	r1, r2
    b5be:	3c1f      	subs	r4, #31
    b5c0:	40e1      	lsrs	r1, r4
    b5c2:	000c      	movs	r4, r1
    b5c4:	2b20      	cmp	r3, #32
    b5c6:	d100      	bne.n	b5ca <__aeabi_dsub+0x32e>
    b5c8:	e080      	b.n	b6cc <__aeabi_dsub+0x430>
    b5ca:	2140      	movs	r1, #64	; 0x40
    b5cc:	1acb      	subs	r3, r1, r3
    b5ce:	409a      	lsls	r2, r3
    b5d0:	4315      	orrs	r5, r2
    b5d2:	1e6a      	subs	r2, r5, #1
    b5d4:	4195      	sbcs	r5, r2
    b5d6:	2700      	movs	r7, #0
    b5d8:	4325      	orrs	r5, r4
    b5da:	2400      	movs	r4, #0
    b5dc:	e71f      	b.n	b41e <__aeabi_dsub+0x182>
    b5de:	4663      	mov	r3, ip
    b5e0:	0002      	movs	r2, r0
    b5e2:	3b20      	subs	r3, #32
    b5e4:	40da      	lsrs	r2, r3
    b5e6:	4663      	mov	r3, ip
    b5e8:	2b20      	cmp	r3, #32
    b5ea:	d071      	beq.n	b6d0 <__aeabi_dsub+0x434>
    b5ec:	2340      	movs	r3, #64	; 0x40
    b5ee:	4666      	mov	r6, ip
    b5f0:	1b9b      	subs	r3, r3, r6
    b5f2:	4098      	lsls	r0, r3
    b5f4:	4301      	orrs	r1, r0
    b5f6:	1e48      	subs	r0, r1, #1
    b5f8:	4181      	sbcs	r1, r0
    b5fa:	4311      	orrs	r1, r2
    b5fc:	2200      	movs	r2, #0
    b5fe:	e6cf      	b.n	b3a0 <__aeabi_dsub+0x104>
    b600:	000007ff 	.word	0x000007ff
    b604:	ff7fffff 	.word	0xff7fffff
    b608:	800fffff 	.word	0x800fffff
    b60c:	2c00      	cmp	r4, #0
    b60e:	d048      	beq.n	b6a2 <__aeabi_dsub+0x406>
    b610:	4cca      	ldr	r4, [pc, #808]	; (b93c <__aeabi_dsub+0x6a0>)
    b612:	42a2      	cmp	r2, r4
    b614:	d100      	bne.n	b618 <__aeabi_dsub+0x37c>
    b616:	e0a2      	b.n	b75e <__aeabi_dsub+0x4c2>
    b618:	4274      	negs	r4, r6
    b61a:	46a1      	mov	r9, r4
    b61c:	2480      	movs	r4, #128	; 0x80
    b61e:	0424      	lsls	r4, r4, #16
    b620:	4327      	orrs	r7, r4
    b622:	464c      	mov	r4, r9
    b624:	2c38      	cmp	r4, #56	; 0x38
    b626:	dd00      	ble.n	b62a <__aeabi_dsub+0x38e>
    b628:	e0db      	b.n	b7e2 <__aeabi_dsub+0x546>
    b62a:	2c1f      	cmp	r4, #31
    b62c:	dd00      	ble.n	b630 <__aeabi_dsub+0x394>
    b62e:	e144      	b.n	b8ba <__aeabi_dsub+0x61e>
    b630:	464e      	mov	r6, r9
    b632:	2420      	movs	r4, #32
    b634:	1ba4      	subs	r4, r4, r6
    b636:	003e      	movs	r6, r7
    b638:	40a6      	lsls	r6, r4
    b63a:	46a2      	mov	sl, r4
    b63c:	46b0      	mov	r8, r6
    b63e:	464c      	mov	r4, r9
    b640:	002e      	movs	r6, r5
    b642:	40e6      	lsrs	r6, r4
    b644:	46b4      	mov	ip, r6
    b646:	4646      	mov	r6, r8
    b648:	4664      	mov	r4, ip
    b64a:	4326      	orrs	r6, r4
    b64c:	4654      	mov	r4, sl
    b64e:	40a5      	lsls	r5, r4
    b650:	1e6c      	subs	r4, r5, #1
    b652:	41a5      	sbcs	r5, r4
    b654:	0034      	movs	r4, r6
    b656:	432c      	orrs	r4, r5
    b658:	464d      	mov	r5, r9
    b65a:	40ef      	lsrs	r7, r5
    b65c:	1b0d      	subs	r5, r1, r4
    b65e:	e028      	b.n	b6b2 <__aeabi_dsub+0x416>
    b660:	464a      	mov	r2, r9
    b662:	4643      	mov	r3, r8
    b664:	464d      	mov	r5, r9
    b666:	431a      	orrs	r2, r3
    b668:	d000      	beq.n	b66c <__aeabi_dsub+0x3d0>
    b66a:	e6a5      	b.n	b3b8 <__aeabi_dsub+0x11c>
    b66c:	2300      	movs	r3, #0
    b66e:	2400      	movs	r4, #0
    b670:	2500      	movs	r5, #0
    b672:	e6de      	b.n	b432 <__aeabi_dsub+0x196>
    b674:	2a1f      	cmp	r2, #31
    b676:	dc5a      	bgt.n	b72e <__aeabi_dsub+0x492>
    b678:	4666      	mov	r6, ip
    b67a:	2220      	movs	r2, #32
    b67c:	1b92      	subs	r2, r2, r6
    b67e:	0006      	movs	r6, r0
    b680:	4096      	lsls	r6, r2
    b682:	4691      	mov	r9, r2
    b684:	46b0      	mov	r8, r6
    b686:	4662      	mov	r2, ip
    b688:	000e      	movs	r6, r1
    b68a:	40d6      	lsrs	r6, r2
    b68c:	4642      	mov	r2, r8
    b68e:	4316      	orrs	r6, r2
    b690:	464a      	mov	r2, r9
    b692:	4091      	lsls	r1, r2
    b694:	1e4a      	subs	r2, r1, #1
    b696:	4191      	sbcs	r1, r2
    b698:	0002      	movs	r2, r0
    b69a:	4660      	mov	r0, ip
    b69c:	4331      	orrs	r1, r6
    b69e:	40c2      	lsrs	r2, r0
    b6a0:	e6e4      	b.n	b46c <__aeabi_dsub+0x1d0>
    b6a2:	003c      	movs	r4, r7
    b6a4:	432c      	orrs	r4, r5
    b6a6:	d05a      	beq.n	b75e <__aeabi_dsub+0x4c2>
    b6a8:	43f4      	mvns	r4, r6
    b6aa:	46a1      	mov	r9, r4
    b6ac:	2c00      	cmp	r4, #0
    b6ae:	d152      	bne.n	b756 <__aeabi_dsub+0x4ba>
    b6b0:	1b4d      	subs	r5, r1, r5
    b6b2:	42a9      	cmp	r1, r5
    b6b4:	4189      	sbcs	r1, r1
    b6b6:	1bc7      	subs	r7, r0, r7
    b6b8:	4249      	negs	r1, r1
    b6ba:	1a7f      	subs	r7, r7, r1
    b6bc:	0014      	movs	r4, r2
    b6be:	469a      	mov	sl, r3
    b6c0:	e675      	b.n	b3ae <__aeabi_dsub+0x112>
    b6c2:	4a9e      	ldr	r2, [pc, #632]	; (b93c <__aeabi_dsub+0x6a0>)
    b6c4:	4294      	cmp	r4, r2
    b6c6:	d000      	beq.n	b6ca <__aeabi_dsub+0x42e>
    b6c8:	e6c7      	b.n	b45a <__aeabi_dsub+0x1be>
    b6ca:	e613      	b.n	b2f4 <__aeabi_dsub+0x58>
    b6cc:	2200      	movs	r2, #0
    b6ce:	e77f      	b.n	b5d0 <__aeabi_dsub+0x334>
    b6d0:	2000      	movs	r0, #0
    b6d2:	e78f      	b.n	b5f4 <__aeabi_dsub+0x358>
    b6d4:	2c00      	cmp	r4, #0
    b6d6:	d000      	beq.n	b6da <__aeabi_dsub+0x43e>
    b6d8:	e0c8      	b.n	b86c <__aeabi_dsub+0x5d0>
    b6da:	003b      	movs	r3, r7
    b6dc:	432b      	orrs	r3, r5
    b6de:	d100      	bne.n	b6e2 <__aeabi_dsub+0x446>
    b6e0:	e10f      	b.n	b902 <__aeabi_dsub+0x666>
    b6e2:	0003      	movs	r3, r0
    b6e4:	430b      	orrs	r3, r1
    b6e6:	d100      	bne.n	b6ea <__aeabi_dsub+0x44e>
    b6e8:	e604      	b.n	b2f4 <__aeabi_dsub+0x58>
    b6ea:	1869      	adds	r1, r5, r1
    b6ec:	42a9      	cmp	r1, r5
    b6ee:	419b      	sbcs	r3, r3
    b6f0:	183f      	adds	r7, r7, r0
    b6f2:	425b      	negs	r3, r3
    b6f4:	19df      	adds	r7, r3, r7
    b6f6:	023b      	lsls	r3, r7, #8
    b6f8:	d400      	bmi.n	b6fc <__aeabi_dsub+0x460>
    b6fa:	e11a      	b.n	b932 <__aeabi_dsub+0x696>
    b6fc:	4b90      	ldr	r3, [pc, #576]	; (b940 <__aeabi_dsub+0x6a4>)
    b6fe:	000d      	movs	r5, r1
    b700:	401f      	ands	r7, r3
    b702:	4664      	mov	r4, ip
    b704:	e5f6      	b.n	b2f4 <__aeabi_dsub+0x58>
    b706:	469a      	mov	sl, r3
    b708:	e689      	b.n	b41e <__aeabi_dsub+0x182>
    b70a:	003a      	movs	r2, r7
    b70c:	432a      	orrs	r2, r5
    b70e:	2c00      	cmp	r4, #0
    b710:	d15c      	bne.n	b7cc <__aeabi_dsub+0x530>
    b712:	2a00      	cmp	r2, #0
    b714:	d175      	bne.n	b802 <__aeabi_dsub+0x566>
    b716:	0002      	movs	r2, r0
    b718:	430a      	orrs	r2, r1
    b71a:	d100      	bne.n	b71e <__aeabi_dsub+0x482>
    b71c:	e0ca      	b.n	b8b4 <__aeabi_dsub+0x618>
    b71e:	0007      	movs	r7, r0
    b720:	000d      	movs	r5, r1
    b722:	469a      	mov	sl, r3
    b724:	e5e6      	b.n	b2f4 <__aeabi_dsub+0x58>
    b726:	4664      	mov	r4, ip
    b728:	2200      	movs	r2, #0
    b72a:	2500      	movs	r5, #0
    b72c:	e681      	b.n	b432 <__aeabi_dsub+0x196>
    b72e:	4662      	mov	r2, ip
    b730:	0006      	movs	r6, r0
    b732:	3a20      	subs	r2, #32
    b734:	40d6      	lsrs	r6, r2
    b736:	4662      	mov	r2, ip
    b738:	46b0      	mov	r8, r6
    b73a:	2a20      	cmp	r2, #32
    b73c:	d100      	bne.n	b740 <__aeabi_dsub+0x4a4>
    b73e:	e0b7      	b.n	b8b0 <__aeabi_dsub+0x614>
    b740:	2240      	movs	r2, #64	; 0x40
    b742:	4666      	mov	r6, ip
    b744:	1b92      	subs	r2, r2, r6
    b746:	4090      	lsls	r0, r2
    b748:	4301      	orrs	r1, r0
    b74a:	4642      	mov	r2, r8
    b74c:	1e48      	subs	r0, r1, #1
    b74e:	4181      	sbcs	r1, r0
    b750:	4311      	orrs	r1, r2
    b752:	2200      	movs	r2, #0
    b754:	e68a      	b.n	b46c <__aeabi_dsub+0x1d0>
    b756:	4c79      	ldr	r4, [pc, #484]	; (b93c <__aeabi_dsub+0x6a0>)
    b758:	42a2      	cmp	r2, r4
    b75a:	d000      	beq.n	b75e <__aeabi_dsub+0x4c2>
    b75c:	e761      	b.n	b622 <__aeabi_dsub+0x386>
    b75e:	0007      	movs	r7, r0
    b760:	000d      	movs	r5, r1
    b762:	0014      	movs	r4, r2
    b764:	469a      	mov	sl, r3
    b766:	e5c5      	b.n	b2f4 <__aeabi_dsub+0x58>
    b768:	2c00      	cmp	r4, #0
    b76a:	d141      	bne.n	b7f0 <__aeabi_dsub+0x554>
    b76c:	003c      	movs	r4, r7
    b76e:	432c      	orrs	r4, r5
    b770:	d078      	beq.n	b864 <__aeabi_dsub+0x5c8>
    b772:	43f4      	mvns	r4, r6
    b774:	46a1      	mov	r9, r4
    b776:	2c00      	cmp	r4, #0
    b778:	d020      	beq.n	b7bc <__aeabi_dsub+0x520>
    b77a:	4c70      	ldr	r4, [pc, #448]	; (b93c <__aeabi_dsub+0x6a0>)
    b77c:	42a2      	cmp	r2, r4
    b77e:	d071      	beq.n	b864 <__aeabi_dsub+0x5c8>
    b780:	464c      	mov	r4, r9
    b782:	2c38      	cmp	r4, #56	; 0x38
    b784:	dd00      	ble.n	b788 <__aeabi_dsub+0x4ec>
    b786:	e0b2      	b.n	b8ee <__aeabi_dsub+0x652>
    b788:	2c1f      	cmp	r4, #31
    b78a:	dd00      	ble.n	b78e <__aeabi_dsub+0x4f2>
    b78c:	e0bc      	b.n	b908 <__aeabi_dsub+0x66c>
    b78e:	2620      	movs	r6, #32
    b790:	1b34      	subs	r4, r6, r4
    b792:	46a2      	mov	sl, r4
    b794:	003c      	movs	r4, r7
    b796:	4656      	mov	r6, sl
    b798:	40b4      	lsls	r4, r6
    b79a:	464e      	mov	r6, r9
    b79c:	46a0      	mov	r8, r4
    b79e:	002c      	movs	r4, r5
    b7a0:	40f4      	lsrs	r4, r6
    b7a2:	46a4      	mov	ip, r4
    b7a4:	4644      	mov	r4, r8
    b7a6:	4666      	mov	r6, ip
    b7a8:	4334      	orrs	r4, r6
    b7aa:	46a4      	mov	ip, r4
    b7ac:	4654      	mov	r4, sl
    b7ae:	40a5      	lsls	r5, r4
    b7b0:	4664      	mov	r4, ip
    b7b2:	1e6e      	subs	r6, r5, #1
    b7b4:	41b5      	sbcs	r5, r6
    b7b6:	4325      	orrs	r5, r4
    b7b8:	464c      	mov	r4, r9
    b7ba:	40e7      	lsrs	r7, r4
    b7bc:	186d      	adds	r5, r5, r1
    b7be:	428d      	cmp	r5, r1
    b7c0:	4189      	sbcs	r1, r1
    b7c2:	183f      	adds	r7, r7, r0
    b7c4:	4249      	negs	r1, r1
    b7c6:	19cf      	adds	r7, r1, r7
    b7c8:	0014      	movs	r4, r2
    b7ca:	e656      	b.n	b47a <__aeabi_dsub+0x1de>
    b7cc:	2a00      	cmp	r2, #0
    b7ce:	d12f      	bne.n	b830 <__aeabi_dsub+0x594>
    b7d0:	0002      	movs	r2, r0
    b7d2:	430a      	orrs	r2, r1
    b7d4:	d100      	bne.n	b7d8 <__aeabi_dsub+0x53c>
    b7d6:	e084      	b.n	b8e2 <__aeabi_dsub+0x646>
    b7d8:	0007      	movs	r7, r0
    b7da:	000d      	movs	r5, r1
    b7dc:	469a      	mov	sl, r3
    b7de:	4c57      	ldr	r4, [pc, #348]	; (b93c <__aeabi_dsub+0x6a0>)
    b7e0:	e588      	b.n	b2f4 <__aeabi_dsub+0x58>
    b7e2:	433d      	orrs	r5, r7
    b7e4:	1e6f      	subs	r7, r5, #1
    b7e6:	41bd      	sbcs	r5, r7
    b7e8:	b2ec      	uxtb	r4, r5
    b7ea:	2700      	movs	r7, #0
    b7ec:	1b0d      	subs	r5, r1, r4
    b7ee:	e760      	b.n	b6b2 <__aeabi_dsub+0x416>
    b7f0:	4c52      	ldr	r4, [pc, #328]	; (b93c <__aeabi_dsub+0x6a0>)
    b7f2:	42a2      	cmp	r2, r4
    b7f4:	d036      	beq.n	b864 <__aeabi_dsub+0x5c8>
    b7f6:	4274      	negs	r4, r6
    b7f8:	2680      	movs	r6, #128	; 0x80
    b7fa:	0436      	lsls	r6, r6, #16
    b7fc:	46a1      	mov	r9, r4
    b7fe:	4337      	orrs	r7, r6
    b800:	e7be      	b.n	b780 <__aeabi_dsub+0x4e4>
    b802:	0002      	movs	r2, r0
    b804:	430a      	orrs	r2, r1
    b806:	d100      	bne.n	b80a <__aeabi_dsub+0x56e>
    b808:	e574      	b.n	b2f4 <__aeabi_dsub+0x58>
    b80a:	1a6a      	subs	r2, r5, r1
    b80c:	4690      	mov	r8, r2
    b80e:	4545      	cmp	r5, r8
    b810:	41b6      	sbcs	r6, r6
    b812:	1a3a      	subs	r2, r7, r0
    b814:	4276      	negs	r6, r6
    b816:	1b92      	subs	r2, r2, r6
    b818:	4694      	mov	ip, r2
    b81a:	0212      	lsls	r2, r2, #8
    b81c:	d400      	bmi.n	b820 <__aeabi_dsub+0x584>
    b81e:	e5f7      	b.n	b410 <__aeabi_dsub+0x174>
    b820:	1b4d      	subs	r5, r1, r5
    b822:	42a9      	cmp	r1, r5
    b824:	4189      	sbcs	r1, r1
    b826:	1bc7      	subs	r7, r0, r7
    b828:	4249      	negs	r1, r1
    b82a:	1a7f      	subs	r7, r7, r1
    b82c:	469a      	mov	sl, r3
    b82e:	e561      	b.n	b2f4 <__aeabi_dsub+0x58>
    b830:	0002      	movs	r2, r0
    b832:	430a      	orrs	r2, r1
    b834:	d03a      	beq.n	b8ac <__aeabi_dsub+0x610>
    b836:	08ed      	lsrs	r5, r5, #3
    b838:	077c      	lsls	r4, r7, #29
    b83a:	432c      	orrs	r4, r5
    b83c:	2580      	movs	r5, #128	; 0x80
    b83e:	08fa      	lsrs	r2, r7, #3
    b840:	032d      	lsls	r5, r5, #12
    b842:	422a      	tst	r2, r5
    b844:	d008      	beq.n	b858 <__aeabi_dsub+0x5bc>
    b846:	08c7      	lsrs	r7, r0, #3
    b848:	422f      	tst	r7, r5
    b84a:	d105      	bne.n	b858 <__aeabi_dsub+0x5bc>
    b84c:	0745      	lsls	r5, r0, #29
    b84e:	002c      	movs	r4, r5
    b850:	003a      	movs	r2, r7
    b852:	469a      	mov	sl, r3
    b854:	08c9      	lsrs	r1, r1, #3
    b856:	430c      	orrs	r4, r1
    b858:	0f67      	lsrs	r7, r4, #29
    b85a:	00d2      	lsls	r2, r2, #3
    b85c:	00e5      	lsls	r5, r4, #3
    b85e:	4317      	orrs	r7, r2
    b860:	4c36      	ldr	r4, [pc, #216]	; (b93c <__aeabi_dsub+0x6a0>)
    b862:	e547      	b.n	b2f4 <__aeabi_dsub+0x58>
    b864:	0007      	movs	r7, r0
    b866:	000d      	movs	r5, r1
    b868:	0014      	movs	r4, r2
    b86a:	e543      	b.n	b2f4 <__aeabi_dsub+0x58>
    b86c:	003a      	movs	r2, r7
    b86e:	432a      	orrs	r2, r5
    b870:	d043      	beq.n	b8fa <__aeabi_dsub+0x65e>
    b872:	0002      	movs	r2, r0
    b874:	430a      	orrs	r2, r1
    b876:	d019      	beq.n	b8ac <__aeabi_dsub+0x610>
    b878:	08ed      	lsrs	r5, r5, #3
    b87a:	077c      	lsls	r4, r7, #29
    b87c:	432c      	orrs	r4, r5
    b87e:	2580      	movs	r5, #128	; 0x80
    b880:	08fa      	lsrs	r2, r7, #3
    b882:	032d      	lsls	r5, r5, #12
    b884:	422a      	tst	r2, r5
    b886:	d007      	beq.n	b898 <__aeabi_dsub+0x5fc>
    b888:	08c6      	lsrs	r6, r0, #3
    b88a:	422e      	tst	r6, r5
    b88c:	d104      	bne.n	b898 <__aeabi_dsub+0x5fc>
    b88e:	0747      	lsls	r7, r0, #29
    b890:	003c      	movs	r4, r7
    b892:	0032      	movs	r2, r6
    b894:	08c9      	lsrs	r1, r1, #3
    b896:	430c      	orrs	r4, r1
    b898:	00d7      	lsls	r7, r2, #3
    b89a:	0f62      	lsrs	r2, r4, #29
    b89c:	00e5      	lsls	r5, r4, #3
    b89e:	4317      	orrs	r7, r2
    b8a0:	469a      	mov	sl, r3
    b8a2:	4c26      	ldr	r4, [pc, #152]	; (b93c <__aeabi_dsub+0x6a0>)
    b8a4:	e526      	b.n	b2f4 <__aeabi_dsub+0x58>
    b8a6:	2200      	movs	r2, #0
    b8a8:	2500      	movs	r5, #0
    b8aa:	e544      	b.n	b336 <__aeabi_dsub+0x9a>
    b8ac:	4c23      	ldr	r4, [pc, #140]	; (b93c <__aeabi_dsub+0x6a0>)
    b8ae:	e521      	b.n	b2f4 <__aeabi_dsub+0x58>
    b8b0:	2000      	movs	r0, #0
    b8b2:	e749      	b.n	b748 <__aeabi_dsub+0x4ac>
    b8b4:	2300      	movs	r3, #0
    b8b6:	2500      	movs	r5, #0
    b8b8:	e5bb      	b.n	b432 <__aeabi_dsub+0x196>
    b8ba:	464c      	mov	r4, r9
    b8bc:	003e      	movs	r6, r7
    b8be:	3c20      	subs	r4, #32
    b8c0:	40e6      	lsrs	r6, r4
    b8c2:	464c      	mov	r4, r9
    b8c4:	46b4      	mov	ip, r6
    b8c6:	2c20      	cmp	r4, #32
    b8c8:	d031      	beq.n	b92e <__aeabi_dsub+0x692>
    b8ca:	2440      	movs	r4, #64	; 0x40
    b8cc:	464e      	mov	r6, r9
    b8ce:	1ba6      	subs	r6, r4, r6
    b8d0:	40b7      	lsls	r7, r6
    b8d2:	433d      	orrs	r5, r7
    b8d4:	1e6c      	subs	r4, r5, #1
    b8d6:	41a5      	sbcs	r5, r4
    b8d8:	4664      	mov	r4, ip
    b8da:	432c      	orrs	r4, r5
    b8dc:	2700      	movs	r7, #0
    b8de:	1b0d      	subs	r5, r1, r4
    b8e0:	e6e7      	b.n	b6b2 <__aeabi_dsub+0x416>
    b8e2:	2280      	movs	r2, #128	; 0x80
    b8e4:	2300      	movs	r3, #0
    b8e6:	0312      	lsls	r2, r2, #12
    b8e8:	4c14      	ldr	r4, [pc, #80]	; (b93c <__aeabi_dsub+0x6a0>)
    b8ea:	2500      	movs	r5, #0
    b8ec:	e5a1      	b.n	b432 <__aeabi_dsub+0x196>
    b8ee:	433d      	orrs	r5, r7
    b8f0:	1e6f      	subs	r7, r5, #1
    b8f2:	41bd      	sbcs	r5, r7
    b8f4:	2700      	movs	r7, #0
    b8f6:	b2ed      	uxtb	r5, r5
    b8f8:	e760      	b.n	b7bc <__aeabi_dsub+0x520>
    b8fa:	0007      	movs	r7, r0
    b8fc:	000d      	movs	r5, r1
    b8fe:	4c0f      	ldr	r4, [pc, #60]	; (b93c <__aeabi_dsub+0x6a0>)
    b900:	e4f8      	b.n	b2f4 <__aeabi_dsub+0x58>
    b902:	0007      	movs	r7, r0
    b904:	000d      	movs	r5, r1
    b906:	e4f5      	b.n	b2f4 <__aeabi_dsub+0x58>
    b908:	464e      	mov	r6, r9
    b90a:	003c      	movs	r4, r7
    b90c:	3e20      	subs	r6, #32
    b90e:	40f4      	lsrs	r4, r6
    b910:	46a0      	mov	r8, r4
    b912:	464c      	mov	r4, r9
    b914:	2c20      	cmp	r4, #32
    b916:	d00e      	beq.n	b936 <__aeabi_dsub+0x69a>
    b918:	2440      	movs	r4, #64	; 0x40
    b91a:	464e      	mov	r6, r9
    b91c:	1ba4      	subs	r4, r4, r6
    b91e:	40a7      	lsls	r7, r4
    b920:	433d      	orrs	r5, r7
    b922:	1e6f      	subs	r7, r5, #1
    b924:	41bd      	sbcs	r5, r7
    b926:	4644      	mov	r4, r8
    b928:	2700      	movs	r7, #0
    b92a:	4325      	orrs	r5, r4
    b92c:	e746      	b.n	b7bc <__aeabi_dsub+0x520>
    b92e:	2700      	movs	r7, #0
    b930:	e7cf      	b.n	b8d2 <__aeabi_dsub+0x636>
    b932:	000d      	movs	r5, r1
    b934:	e573      	b.n	b41e <__aeabi_dsub+0x182>
    b936:	2700      	movs	r7, #0
    b938:	e7f2      	b.n	b920 <__aeabi_dsub+0x684>
    b93a:	46c0      	nop			; (mov r8, r8)
    b93c:	000007ff 	.word	0x000007ff
    b940:	ff7fffff 	.word	0xff7fffff

0000b944 <__aeabi_d2iz>:
    b944:	030b      	lsls	r3, r1, #12
    b946:	b530      	push	{r4, r5, lr}
    b948:	4d13      	ldr	r5, [pc, #76]	; (b998 <__aeabi_d2iz+0x54>)
    b94a:	0b1a      	lsrs	r2, r3, #12
    b94c:	004b      	lsls	r3, r1, #1
    b94e:	0d5b      	lsrs	r3, r3, #21
    b950:	0fc9      	lsrs	r1, r1, #31
    b952:	2400      	movs	r4, #0
    b954:	42ab      	cmp	r3, r5
    b956:	dd11      	ble.n	b97c <__aeabi_d2iz+0x38>
    b958:	4c10      	ldr	r4, [pc, #64]	; (b99c <__aeabi_d2iz+0x58>)
    b95a:	42a3      	cmp	r3, r4
    b95c:	dc10      	bgt.n	b980 <__aeabi_d2iz+0x3c>
    b95e:	2480      	movs	r4, #128	; 0x80
    b960:	0364      	lsls	r4, r4, #13
    b962:	4322      	orrs	r2, r4
    b964:	4c0e      	ldr	r4, [pc, #56]	; (b9a0 <__aeabi_d2iz+0x5c>)
    b966:	1ae4      	subs	r4, r4, r3
    b968:	2c1f      	cmp	r4, #31
    b96a:	dd0c      	ble.n	b986 <__aeabi_d2iz+0x42>
    b96c:	480d      	ldr	r0, [pc, #52]	; (b9a4 <__aeabi_d2iz+0x60>)
    b96e:	1ac3      	subs	r3, r0, r3
    b970:	40da      	lsrs	r2, r3
    b972:	0013      	movs	r3, r2
    b974:	425c      	negs	r4, r3
    b976:	2900      	cmp	r1, #0
    b978:	d100      	bne.n	b97c <__aeabi_d2iz+0x38>
    b97a:	001c      	movs	r4, r3
    b97c:	0020      	movs	r0, r4
    b97e:	bd30      	pop	{r4, r5, pc}
    b980:	4b09      	ldr	r3, [pc, #36]	; (b9a8 <__aeabi_d2iz+0x64>)
    b982:	18cc      	adds	r4, r1, r3
    b984:	e7fa      	b.n	b97c <__aeabi_d2iz+0x38>
    b986:	40e0      	lsrs	r0, r4
    b988:	4c08      	ldr	r4, [pc, #32]	; (b9ac <__aeabi_d2iz+0x68>)
    b98a:	46a4      	mov	ip, r4
    b98c:	4463      	add	r3, ip
    b98e:	409a      	lsls	r2, r3
    b990:	0013      	movs	r3, r2
    b992:	4303      	orrs	r3, r0
    b994:	e7ee      	b.n	b974 <__aeabi_d2iz+0x30>
    b996:	46c0      	nop			; (mov r8, r8)
    b998:	000003fe 	.word	0x000003fe
    b99c:	0000041d 	.word	0x0000041d
    b9a0:	00000433 	.word	0x00000433
    b9a4:	00000413 	.word	0x00000413
    b9a8:	7fffffff 	.word	0x7fffffff
    b9ac:	fffffbed 	.word	0xfffffbed

0000b9b0 <__aeabi_ui2d>:
    b9b0:	b570      	push	{r4, r5, r6, lr}
    b9b2:	1e05      	subs	r5, r0, #0
    b9b4:	d028      	beq.n	ba08 <__aeabi_ui2d+0x58>
    b9b6:	f000 f833 	bl	ba20 <__clzsi2>
    b9ba:	4b15      	ldr	r3, [pc, #84]	; (ba10 <__aeabi_ui2d+0x60>)
    b9bc:	4a15      	ldr	r2, [pc, #84]	; (ba14 <__aeabi_ui2d+0x64>)
    b9be:	1a1b      	subs	r3, r3, r0
    b9c0:	1ad2      	subs	r2, r2, r3
    b9c2:	2a1f      	cmp	r2, #31
    b9c4:	dd16      	ble.n	b9f4 <__aeabi_ui2d+0x44>
    b9c6:	002c      	movs	r4, r5
    b9c8:	4a13      	ldr	r2, [pc, #76]	; (ba18 <__aeabi_ui2d+0x68>)
    b9ca:	2500      	movs	r5, #0
    b9cc:	1ad2      	subs	r2, r2, r3
    b9ce:	4094      	lsls	r4, r2
    b9d0:	055a      	lsls	r2, r3, #21
    b9d2:	0324      	lsls	r4, r4, #12
    b9d4:	0b24      	lsrs	r4, r4, #12
    b9d6:	0d52      	lsrs	r2, r2, #21
    b9d8:	2100      	movs	r1, #0
    b9da:	0324      	lsls	r4, r4, #12
    b9dc:	0d0b      	lsrs	r3, r1, #20
    b9de:	0b24      	lsrs	r4, r4, #12
    b9e0:	051b      	lsls	r3, r3, #20
    b9e2:	4323      	orrs	r3, r4
    b9e4:	4c0d      	ldr	r4, [pc, #52]	; (ba1c <__aeabi_ui2d+0x6c>)
    b9e6:	0512      	lsls	r2, r2, #20
    b9e8:	4023      	ands	r3, r4
    b9ea:	4313      	orrs	r3, r2
    b9ec:	005b      	lsls	r3, r3, #1
    b9ee:	0028      	movs	r0, r5
    b9f0:	0859      	lsrs	r1, r3, #1
    b9f2:	bd70      	pop	{r4, r5, r6, pc}
    b9f4:	210b      	movs	r1, #11
    b9f6:	002c      	movs	r4, r5
    b9f8:	1a08      	subs	r0, r1, r0
    b9fa:	40c4      	lsrs	r4, r0
    b9fc:	4095      	lsls	r5, r2
    b9fe:	0324      	lsls	r4, r4, #12
    ba00:	055a      	lsls	r2, r3, #21
    ba02:	0b24      	lsrs	r4, r4, #12
    ba04:	0d52      	lsrs	r2, r2, #21
    ba06:	e7e7      	b.n	b9d8 <__aeabi_ui2d+0x28>
    ba08:	2200      	movs	r2, #0
    ba0a:	2400      	movs	r4, #0
    ba0c:	e7e4      	b.n	b9d8 <__aeabi_ui2d+0x28>
    ba0e:	46c0      	nop			; (mov r8, r8)
    ba10:	0000041e 	.word	0x0000041e
    ba14:	00000433 	.word	0x00000433
    ba18:	00000413 	.word	0x00000413
    ba1c:	800fffff 	.word	0x800fffff

0000ba20 <__clzsi2>:
    ba20:	211c      	movs	r1, #28
    ba22:	2301      	movs	r3, #1
    ba24:	041b      	lsls	r3, r3, #16
    ba26:	4298      	cmp	r0, r3
    ba28:	d301      	bcc.n	ba2e <__clzsi2+0xe>
    ba2a:	0c00      	lsrs	r0, r0, #16
    ba2c:	3910      	subs	r1, #16
    ba2e:	0a1b      	lsrs	r3, r3, #8
    ba30:	4298      	cmp	r0, r3
    ba32:	d301      	bcc.n	ba38 <__clzsi2+0x18>
    ba34:	0a00      	lsrs	r0, r0, #8
    ba36:	3908      	subs	r1, #8
    ba38:	091b      	lsrs	r3, r3, #4
    ba3a:	4298      	cmp	r0, r3
    ba3c:	d301      	bcc.n	ba42 <__clzsi2+0x22>
    ba3e:	0900      	lsrs	r0, r0, #4
    ba40:	3904      	subs	r1, #4
    ba42:	a202      	add	r2, pc, #8	; (adr r2, ba4c <__clzsi2+0x2c>)
    ba44:	5c10      	ldrb	r0, [r2, r0]
    ba46:	1840      	adds	r0, r0, r1
    ba48:	4770      	bx	lr
    ba4a:	46c0      	nop			; (mov r8, r8)
    ba4c:	02020304 	.word	0x02020304
    ba50:	01010101 	.word	0x01010101
	...

0000ba5c <__assert_func>:
    ba5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    ba5e:	001d      	movs	r5, r3
    ba60:	4b0a      	ldr	r3, [pc, #40]	; (ba8c <__assert_func+0x30>)
    ba62:	0006      	movs	r6, r0
    ba64:	681b      	ldr	r3, [r3, #0]
    ba66:	68d8      	ldr	r0, [r3, #12]
    ba68:	2a00      	cmp	r2, #0
    ba6a:	d102      	bne.n	ba72 <__assert_func+0x16>
    ba6c:	4c08      	ldr	r4, [pc, #32]	; (ba90 <__assert_func+0x34>)
    ba6e:	0023      	movs	r3, r4
    ba70:	e001      	b.n	ba76 <__assert_func+0x1a>
    ba72:	0013      	movs	r3, r2
    ba74:	4c07      	ldr	r4, [pc, #28]	; (ba94 <__assert_func+0x38>)
    ba76:	9302      	str	r3, [sp, #8]
    ba78:	9100      	str	r1, [sp, #0]
    ba7a:	0033      	movs	r3, r6
    ba7c:	002a      	movs	r2, r5
    ba7e:	4906      	ldr	r1, [pc, #24]	; (ba98 <__assert_func+0x3c>)
    ba80:	9401      	str	r4, [sp, #4]
    ba82:	f000 f80b 	bl	ba9c <fiprintf>
    ba86:	f000 fd09 	bl	c49c <abort>
    ba8a:	46c0      	nop			; (mov r8, r8)
    ba8c:	2000008c 	.word	0x2000008c
    ba90:	0000e3d3 	.word	0x0000e3d3
    ba94:	0000e398 	.word	0x0000e398
    ba98:	0000e3a5 	.word	0x0000e3a5

0000ba9c <fiprintf>:
    ba9c:	b40e      	push	{r1, r2, r3}
    ba9e:	b503      	push	{r0, r1, lr}
    baa0:	0001      	movs	r1, r0
    baa2:	ab03      	add	r3, sp, #12
    baa4:	4804      	ldr	r0, [pc, #16]	; (bab8 <fiprintf+0x1c>)
    baa6:	cb04      	ldmia	r3!, {r2}
    baa8:	6800      	ldr	r0, [r0, #0]
    baaa:	9301      	str	r3, [sp, #4]
    baac:	f000 f864 	bl	bb78 <_vfiprintf_r>
    bab0:	b002      	add	sp, #8
    bab2:	bc08      	pop	{r3}
    bab4:	b003      	add	sp, #12
    bab6:	4718      	bx	r3
    bab8:	2000008c 	.word	0x2000008c

0000babc <__libc_init_array>:
    babc:	4b0e      	ldr	r3, [pc, #56]	; (baf8 <__libc_init_array+0x3c>)
    babe:	b570      	push	{r4, r5, r6, lr}
    bac0:	2500      	movs	r5, #0
    bac2:	001e      	movs	r6, r3
    bac4:	4c0d      	ldr	r4, [pc, #52]	; (bafc <__libc_init_array+0x40>)
    bac6:	1ae4      	subs	r4, r4, r3
    bac8:	10a4      	asrs	r4, r4, #2
    baca:	42a5      	cmp	r5, r4
    bacc:	d004      	beq.n	bad8 <__libc_init_array+0x1c>
    bace:	00ab      	lsls	r3, r5, #2
    bad0:	58f3      	ldr	r3, [r6, r3]
    bad2:	4798      	blx	r3
    bad4:	3501      	adds	r5, #1
    bad6:	e7f8      	b.n	baca <__libc_init_array+0xe>
    bad8:	f002 fcca 	bl	e470 <_init>
    badc:	4b08      	ldr	r3, [pc, #32]	; (bb00 <__libc_init_array+0x44>)
    bade:	2500      	movs	r5, #0
    bae0:	001e      	movs	r6, r3
    bae2:	4c08      	ldr	r4, [pc, #32]	; (bb04 <__libc_init_array+0x48>)
    bae4:	1ae4      	subs	r4, r4, r3
    bae6:	10a4      	asrs	r4, r4, #2
    bae8:	42a5      	cmp	r5, r4
    baea:	d004      	beq.n	baf6 <__libc_init_array+0x3a>
    baec:	00ab      	lsls	r3, r5, #2
    baee:	58f3      	ldr	r3, [r6, r3]
    baf0:	4798      	blx	r3
    baf2:	3501      	adds	r5, #1
    baf4:	e7f8      	b.n	bae8 <__libc_init_array+0x2c>
    baf6:	bd70      	pop	{r4, r5, r6, pc}
    baf8:	0000e47c 	.word	0x0000e47c
    bafc:	0000e47c 	.word	0x0000e47c
    bb00:	0000e47c 	.word	0x0000e47c
    bb04:	0000e480 	.word	0x0000e480

0000bb08 <memcpy>:
    bb08:	2300      	movs	r3, #0
    bb0a:	b510      	push	{r4, lr}
    bb0c:	429a      	cmp	r2, r3
    bb0e:	d003      	beq.n	bb18 <memcpy+0x10>
    bb10:	5ccc      	ldrb	r4, [r1, r3]
    bb12:	54c4      	strb	r4, [r0, r3]
    bb14:	3301      	adds	r3, #1
    bb16:	e7f9      	b.n	bb0c <memcpy+0x4>
    bb18:	bd10      	pop	{r4, pc}

0000bb1a <memset>:
    bb1a:	0003      	movs	r3, r0
    bb1c:	1882      	adds	r2, r0, r2
    bb1e:	4293      	cmp	r3, r2
    bb20:	d002      	beq.n	bb28 <memset+0xe>
    bb22:	7019      	strb	r1, [r3, #0]
    bb24:	3301      	adds	r3, #1
    bb26:	e7fa      	b.n	bb1e <memset+0x4>
    bb28:	4770      	bx	lr

0000bb2a <__sfputc_r>:
    bb2a:	6893      	ldr	r3, [r2, #8]
    bb2c:	b510      	push	{r4, lr}
    bb2e:	3b01      	subs	r3, #1
    bb30:	6093      	str	r3, [r2, #8]
    bb32:	2b00      	cmp	r3, #0
    bb34:	da05      	bge.n	bb42 <__sfputc_r+0x18>
    bb36:	6994      	ldr	r4, [r2, #24]
    bb38:	42a3      	cmp	r3, r4
    bb3a:	db08      	blt.n	bb4e <__sfputc_r+0x24>
    bb3c:	b2cb      	uxtb	r3, r1
    bb3e:	2b0a      	cmp	r3, #10
    bb40:	d005      	beq.n	bb4e <__sfputc_r+0x24>
    bb42:	6813      	ldr	r3, [r2, #0]
    bb44:	1c58      	adds	r0, r3, #1
    bb46:	6010      	str	r0, [r2, #0]
    bb48:	7019      	strb	r1, [r3, #0]
    bb4a:	b2c8      	uxtb	r0, r1
    bb4c:	e001      	b.n	bb52 <__sfputc_r+0x28>
    bb4e:	f000 fbd7 	bl	c300 <__swbuf_r>
    bb52:	bd10      	pop	{r4, pc}

0000bb54 <__sfputs_r>:
    bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb56:	0006      	movs	r6, r0
    bb58:	000f      	movs	r7, r1
    bb5a:	0014      	movs	r4, r2
    bb5c:	18d5      	adds	r5, r2, r3
    bb5e:	42ac      	cmp	r4, r5
    bb60:	d008      	beq.n	bb74 <__sfputs_r+0x20>
    bb62:	7821      	ldrb	r1, [r4, #0]
    bb64:	003a      	movs	r2, r7
    bb66:	0030      	movs	r0, r6
    bb68:	f7ff ffdf 	bl	bb2a <__sfputc_r>
    bb6c:	3401      	adds	r4, #1
    bb6e:	1c43      	adds	r3, r0, #1
    bb70:	d1f5      	bne.n	bb5e <__sfputs_r+0xa>
    bb72:	e000      	b.n	bb76 <__sfputs_r+0x22>
    bb74:	2000      	movs	r0, #0
    bb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bb78 <_vfiprintf_r>:
    bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb7a:	b09f      	sub	sp, #124	; 0x7c
    bb7c:	0006      	movs	r6, r0
    bb7e:	000f      	movs	r7, r1
    bb80:	9202      	str	r2, [sp, #8]
    bb82:	9305      	str	r3, [sp, #20]
    bb84:	2800      	cmp	r0, #0
    bb86:	d004      	beq.n	bb92 <_vfiprintf_r+0x1a>
    bb88:	6983      	ldr	r3, [r0, #24]
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	d101      	bne.n	bb92 <_vfiprintf_r+0x1a>
    bb8e:	f000 fd81 	bl	c694 <__sinit>
    bb92:	4b7f      	ldr	r3, [pc, #508]	; (bd90 <_vfiprintf_r+0x218>)
    bb94:	429f      	cmp	r7, r3
    bb96:	d101      	bne.n	bb9c <_vfiprintf_r+0x24>
    bb98:	6877      	ldr	r7, [r6, #4]
    bb9a:	e008      	b.n	bbae <_vfiprintf_r+0x36>
    bb9c:	4b7d      	ldr	r3, [pc, #500]	; (bd94 <_vfiprintf_r+0x21c>)
    bb9e:	429f      	cmp	r7, r3
    bba0:	d101      	bne.n	bba6 <_vfiprintf_r+0x2e>
    bba2:	68b7      	ldr	r7, [r6, #8]
    bba4:	e003      	b.n	bbae <_vfiprintf_r+0x36>
    bba6:	4b7c      	ldr	r3, [pc, #496]	; (bd98 <_vfiprintf_r+0x220>)
    bba8:	429f      	cmp	r7, r3
    bbaa:	d100      	bne.n	bbae <_vfiprintf_r+0x36>
    bbac:	68f7      	ldr	r7, [r6, #12]
    bbae:	89bb      	ldrh	r3, [r7, #12]
    bbb0:	071b      	lsls	r3, r3, #28
    bbb2:	d50a      	bpl.n	bbca <_vfiprintf_r+0x52>
    bbb4:	693b      	ldr	r3, [r7, #16]
    bbb6:	2b00      	cmp	r3, #0
    bbb8:	d007      	beq.n	bbca <_vfiprintf_r+0x52>
    bbba:	2300      	movs	r3, #0
    bbbc:	ad06      	add	r5, sp, #24
    bbbe:	616b      	str	r3, [r5, #20]
    bbc0:	3320      	adds	r3, #32
    bbc2:	766b      	strb	r3, [r5, #25]
    bbc4:	3310      	adds	r3, #16
    bbc6:	76ab      	strb	r3, [r5, #26]
    bbc8:	e03d      	b.n	bc46 <_vfiprintf_r+0xce>
    bbca:	0039      	movs	r1, r7
    bbcc:	0030      	movs	r0, r6
    bbce:	f000 fbef 	bl	c3b0 <__swsetup_r>
    bbd2:	2800      	cmp	r0, #0
    bbd4:	d0f1      	beq.n	bbba <_vfiprintf_r+0x42>
    bbd6:	2001      	movs	r0, #1
    bbd8:	4240      	negs	r0, r0
    bbda:	e0d6      	b.n	bd8a <_vfiprintf_r+0x212>
    bbdc:	9a05      	ldr	r2, [sp, #20]
    bbde:	1d11      	adds	r1, r2, #4
    bbe0:	6812      	ldr	r2, [r2, #0]
    bbe2:	9105      	str	r1, [sp, #20]
    bbe4:	2a00      	cmp	r2, #0
    bbe6:	da00      	bge.n	bbea <_vfiprintf_r+0x72>
    bbe8:	e07f      	b.n	bcea <_vfiprintf_r+0x172>
    bbea:	9209      	str	r2, [sp, #36]	; 0x24
    bbec:	3401      	adds	r4, #1
    bbee:	7823      	ldrb	r3, [r4, #0]
    bbf0:	2b2e      	cmp	r3, #46	; 0x2e
    bbf2:	d100      	bne.n	bbf6 <_vfiprintf_r+0x7e>
    bbf4:	e08d      	b.n	bd12 <_vfiprintf_r+0x19a>
    bbf6:	7821      	ldrb	r1, [r4, #0]
    bbf8:	2203      	movs	r2, #3
    bbfa:	4868      	ldr	r0, [pc, #416]	; (bd9c <_vfiprintf_r+0x224>)
    bbfc:	f000 fe42 	bl	c884 <memchr>
    bc00:	2800      	cmp	r0, #0
    bc02:	d007      	beq.n	bc14 <_vfiprintf_r+0x9c>
    bc04:	4b65      	ldr	r3, [pc, #404]	; (bd9c <_vfiprintf_r+0x224>)
    bc06:	682a      	ldr	r2, [r5, #0]
    bc08:	1ac0      	subs	r0, r0, r3
    bc0a:	2340      	movs	r3, #64	; 0x40
    bc0c:	4083      	lsls	r3, r0
    bc0e:	4313      	orrs	r3, r2
    bc10:	602b      	str	r3, [r5, #0]
    bc12:	3401      	adds	r4, #1
    bc14:	7821      	ldrb	r1, [r4, #0]
    bc16:	1c63      	adds	r3, r4, #1
    bc18:	2206      	movs	r2, #6
    bc1a:	4861      	ldr	r0, [pc, #388]	; (bda0 <_vfiprintf_r+0x228>)
    bc1c:	9302      	str	r3, [sp, #8]
    bc1e:	7629      	strb	r1, [r5, #24]
    bc20:	f000 fe30 	bl	c884 <memchr>
    bc24:	2800      	cmp	r0, #0
    bc26:	d100      	bne.n	bc2a <_vfiprintf_r+0xb2>
    bc28:	e09d      	b.n	bd66 <_vfiprintf_r+0x1ee>
    bc2a:	4b5e      	ldr	r3, [pc, #376]	; (bda4 <_vfiprintf_r+0x22c>)
    bc2c:	2b00      	cmp	r3, #0
    bc2e:	d000      	beq.n	bc32 <_vfiprintf_r+0xba>
    bc30:	e090      	b.n	bd54 <_vfiprintf_r+0x1dc>
    bc32:	2207      	movs	r2, #7
    bc34:	9b05      	ldr	r3, [sp, #20]
    bc36:	3307      	adds	r3, #7
    bc38:	4393      	bics	r3, r2
    bc3a:	3308      	adds	r3, #8
    bc3c:	9305      	str	r3, [sp, #20]
    bc3e:	696b      	ldr	r3, [r5, #20]
    bc40:	9a03      	ldr	r2, [sp, #12]
    bc42:	189b      	adds	r3, r3, r2
    bc44:	616b      	str	r3, [r5, #20]
    bc46:	9c02      	ldr	r4, [sp, #8]
    bc48:	7823      	ldrb	r3, [r4, #0]
    bc4a:	2b00      	cmp	r3, #0
    bc4c:	d104      	bne.n	bc58 <_vfiprintf_r+0xe0>
    bc4e:	9b02      	ldr	r3, [sp, #8]
    bc50:	1ae3      	subs	r3, r4, r3
    bc52:	9304      	str	r3, [sp, #16]
    bc54:	d012      	beq.n	bc7c <_vfiprintf_r+0x104>
    bc56:	e003      	b.n	bc60 <_vfiprintf_r+0xe8>
    bc58:	2b25      	cmp	r3, #37	; 0x25
    bc5a:	d0f8      	beq.n	bc4e <_vfiprintf_r+0xd6>
    bc5c:	3401      	adds	r4, #1
    bc5e:	e7f3      	b.n	bc48 <_vfiprintf_r+0xd0>
    bc60:	9b04      	ldr	r3, [sp, #16]
    bc62:	9a02      	ldr	r2, [sp, #8]
    bc64:	0039      	movs	r1, r7
    bc66:	0030      	movs	r0, r6
    bc68:	f7ff ff74 	bl	bb54 <__sfputs_r>
    bc6c:	1c43      	adds	r3, r0, #1
    bc6e:	d100      	bne.n	bc72 <_vfiprintf_r+0xfa>
    bc70:	e086      	b.n	bd80 <_vfiprintf_r+0x208>
    bc72:	696a      	ldr	r2, [r5, #20]
    bc74:	9b04      	ldr	r3, [sp, #16]
    bc76:	4694      	mov	ip, r2
    bc78:	4463      	add	r3, ip
    bc7a:	616b      	str	r3, [r5, #20]
    bc7c:	7823      	ldrb	r3, [r4, #0]
    bc7e:	2b00      	cmp	r3, #0
    bc80:	d07e      	beq.n	bd80 <_vfiprintf_r+0x208>
    bc82:	2201      	movs	r2, #1
    bc84:	2300      	movs	r3, #0
    bc86:	4252      	negs	r2, r2
    bc88:	606a      	str	r2, [r5, #4]
    bc8a:	a902      	add	r1, sp, #8
    bc8c:	3254      	adds	r2, #84	; 0x54
    bc8e:	1852      	adds	r2, r2, r1
    bc90:	3401      	adds	r4, #1
    bc92:	602b      	str	r3, [r5, #0]
    bc94:	60eb      	str	r3, [r5, #12]
    bc96:	60ab      	str	r3, [r5, #8]
    bc98:	7013      	strb	r3, [r2, #0]
    bc9a:	65ab      	str	r3, [r5, #88]	; 0x58
    bc9c:	7821      	ldrb	r1, [r4, #0]
    bc9e:	2205      	movs	r2, #5
    bca0:	4841      	ldr	r0, [pc, #260]	; (bda8 <_vfiprintf_r+0x230>)
    bca2:	f000 fdef 	bl	c884 <memchr>
    bca6:	2800      	cmp	r0, #0
    bca8:	d008      	beq.n	bcbc <_vfiprintf_r+0x144>
    bcaa:	4b3f      	ldr	r3, [pc, #252]	; (bda8 <_vfiprintf_r+0x230>)
    bcac:	682a      	ldr	r2, [r5, #0]
    bcae:	1ac0      	subs	r0, r0, r3
    bcb0:	2301      	movs	r3, #1
    bcb2:	4083      	lsls	r3, r0
    bcb4:	4313      	orrs	r3, r2
    bcb6:	602b      	str	r3, [r5, #0]
    bcb8:	3401      	adds	r4, #1
    bcba:	e7ef      	b.n	bc9c <_vfiprintf_r+0x124>
    bcbc:	682b      	ldr	r3, [r5, #0]
    bcbe:	06da      	lsls	r2, r3, #27
    bcc0:	d504      	bpl.n	bccc <_vfiprintf_r+0x154>
    bcc2:	2253      	movs	r2, #83	; 0x53
    bcc4:	2120      	movs	r1, #32
    bcc6:	a802      	add	r0, sp, #8
    bcc8:	1812      	adds	r2, r2, r0
    bcca:	7011      	strb	r1, [r2, #0]
    bccc:	071a      	lsls	r2, r3, #28
    bcce:	d504      	bpl.n	bcda <_vfiprintf_r+0x162>
    bcd0:	2253      	movs	r2, #83	; 0x53
    bcd2:	212b      	movs	r1, #43	; 0x2b
    bcd4:	a802      	add	r0, sp, #8
    bcd6:	1812      	adds	r2, r2, r0
    bcd8:	7011      	strb	r1, [r2, #0]
    bcda:	7822      	ldrb	r2, [r4, #0]
    bcdc:	2a2a      	cmp	r2, #42	; 0x2a
    bcde:	d100      	bne.n	bce2 <_vfiprintf_r+0x16a>
    bce0:	e77c      	b.n	bbdc <_vfiprintf_r+0x64>
    bce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    bce4:	2000      	movs	r0, #0
    bce6:	210a      	movs	r1, #10
    bce8:	e005      	b.n	bcf6 <_vfiprintf_r+0x17e>
    bcea:	4252      	negs	r2, r2
    bcec:	60ea      	str	r2, [r5, #12]
    bcee:	2202      	movs	r2, #2
    bcf0:	4313      	orrs	r3, r2
    bcf2:	602b      	str	r3, [r5, #0]
    bcf4:	e77a      	b.n	bbec <_vfiprintf_r+0x74>
    bcf6:	7822      	ldrb	r2, [r4, #0]
    bcf8:	3a30      	subs	r2, #48	; 0x30
    bcfa:	2a09      	cmp	r2, #9
    bcfc:	d804      	bhi.n	bd08 <_vfiprintf_r+0x190>
    bcfe:	434b      	muls	r3, r1
    bd00:	3401      	adds	r4, #1
    bd02:	189b      	adds	r3, r3, r2
    bd04:	2001      	movs	r0, #1
    bd06:	e7f6      	b.n	bcf6 <_vfiprintf_r+0x17e>
    bd08:	2800      	cmp	r0, #0
    bd0a:	d100      	bne.n	bd0e <_vfiprintf_r+0x196>
    bd0c:	e76f      	b.n	bbee <_vfiprintf_r+0x76>
    bd0e:	9309      	str	r3, [sp, #36]	; 0x24
    bd10:	e76d      	b.n	bbee <_vfiprintf_r+0x76>
    bd12:	7863      	ldrb	r3, [r4, #1]
    bd14:	2b2a      	cmp	r3, #42	; 0x2a
    bd16:	d10a      	bne.n	bd2e <_vfiprintf_r+0x1b6>
    bd18:	9b05      	ldr	r3, [sp, #20]
    bd1a:	3402      	adds	r4, #2
    bd1c:	1d1a      	adds	r2, r3, #4
    bd1e:	681b      	ldr	r3, [r3, #0]
    bd20:	9205      	str	r2, [sp, #20]
    bd22:	2b00      	cmp	r3, #0
    bd24:	da01      	bge.n	bd2a <_vfiprintf_r+0x1b2>
    bd26:	2301      	movs	r3, #1
    bd28:	425b      	negs	r3, r3
    bd2a:	9307      	str	r3, [sp, #28]
    bd2c:	e763      	b.n	bbf6 <_vfiprintf_r+0x7e>
    bd2e:	2300      	movs	r3, #0
    bd30:	200a      	movs	r0, #10
    bd32:	001a      	movs	r2, r3
    bd34:	3401      	adds	r4, #1
    bd36:	606b      	str	r3, [r5, #4]
    bd38:	7821      	ldrb	r1, [r4, #0]
    bd3a:	3930      	subs	r1, #48	; 0x30
    bd3c:	2909      	cmp	r1, #9
    bd3e:	d804      	bhi.n	bd4a <_vfiprintf_r+0x1d2>
    bd40:	4342      	muls	r2, r0
    bd42:	3401      	adds	r4, #1
    bd44:	1852      	adds	r2, r2, r1
    bd46:	2301      	movs	r3, #1
    bd48:	e7f6      	b.n	bd38 <_vfiprintf_r+0x1c0>
    bd4a:	2b00      	cmp	r3, #0
    bd4c:	d100      	bne.n	bd50 <_vfiprintf_r+0x1d8>
    bd4e:	e752      	b.n	bbf6 <_vfiprintf_r+0x7e>
    bd50:	9207      	str	r2, [sp, #28]
    bd52:	e750      	b.n	bbf6 <_vfiprintf_r+0x7e>
    bd54:	ab05      	add	r3, sp, #20
    bd56:	9300      	str	r3, [sp, #0]
    bd58:	003a      	movs	r2, r7
    bd5a:	4b14      	ldr	r3, [pc, #80]	; (bdac <_vfiprintf_r+0x234>)
    bd5c:	0029      	movs	r1, r5
    bd5e:	0030      	movs	r0, r6
    bd60:	e000      	b.n	bd64 <_vfiprintf_r+0x1ec>
    bd62:	bf00      	nop
    bd64:	e007      	b.n	bd76 <_vfiprintf_r+0x1fe>
    bd66:	ab05      	add	r3, sp, #20
    bd68:	9300      	str	r3, [sp, #0]
    bd6a:	003a      	movs	r2, r7
    bd6c:	4b0f      	ldr	r3, [pc, #60]	; (bdac <_vfiprintf_r+0x234>)
    bd6e:	0029      	movs	r1, r5
    bd70:	0030      	movs	r0, r6
    bd72:	f000 f88b 	bl	be8c <_printf_i>
    bd76:	9003      	str	r0, [sp, #12]
    bd78:	9b03      	ldr	r3, [sp, #12]
    bd7a:	3301      	adds	r3, #1
    bd7c:	d000      	beq.n	bd80 <_vfiprintf_r+0x208>
    bd7e:	e75e      	b.n	bc3e <_vfiprintf_r+0xc6>
    bd80:	89bb      	ldrh	r3, [r7, #12]
    bd82:	065b      	lsls	r3, r3, #25
    bd84:	d500      	bpl.n	bd88 <_vfiprintf_r+0x210>
    bd86:	e726      	b.n	bbd6 <_vfiprintf_r+0x5e>
    bd88:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bd8a:	b01f      	add	sp, #124	; 0x7c
    bd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd8e:	46c0      	nop			; (mov r8, r8)
    bd90:	0000e410 	.word	0x0000e410
    bd94:	0000e430 	.word	0x0000e430
    bd98:	0000e450 	.word	0x0000e450
    bd9c:	0000e3e2 	.word	0x0000e3e2
    bda0:	0000e3e6 	.word	0x0000e3e6
    bda4:	00000000 	.word	0x00000000
    bda8:	0000e3dc 	.word	0x0000e3dc
    bdac:	0000bb55 	.word	0x0000bb55

0000bdb0 <_printf_common>:
    bdb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    bdb2:	0017      	movs	r7, r2
    bdb4:	9301      	str	r3, [sp, #4]
    bdb6:	688a      	ldr	r2, [r1, #8]
    bdb8:	690b      	ldr	r3, [r1, #16]
    bdba:	9000      	str	r0, [sp, #0]
    bdbc:	000c      	movs	r4, r1
    bdbe:	4293      	cmp	r3, r2
    bdc0:	da00      	bge.n	bdc4 <_printf_common+0x14>
    bdc2:	0013      	movs	r3, r2
    bdc4:	0022      	movs	r2, r4
    bdc6:	603b      	str	r3, [r7, #0]
    bdc8:	3243      	adds	r2, #67	; 0x43
    bdca:	7812      	ldrb	r2, [r2, #0]
    bdcc:	2a00      	cmp	r2, #0
    bdce:	d001      	beq.n	bdd4 <_printf_common+0x24>
    bdd0:	3301      	adds	r3, #1
    bdd2:	603b      	str	r3, [r7, #0]
    bdd4:	6823      	ldr	r3, [r4, #0]
    bdd6:	069b      	lsls	r3, r3, #26
    bdd8:	d502      	bpl.n	bde0 <_printf_common+0x30>
    bdda:	683b      	ldr	r3, [r7, #0]
    bddc:	3302      	adds	r3, #2
    bdde:	603b      	str	r3, [r7, #0]
    bde0:	2506      	movs	r5, #6
    bde2:	6823      	ldr	r3, [r4, #0]
    bde4:	401d      	ands	r5, r3
    bde6:	d01e      	beq.n	be26 <_printf_common+0x76>
    bde8:	0023      	movs	r3, r4
    bdea:	3343      	adds	r3, #67	; 0x43
    bdec:	781b      	ldrb	r3, [r3, #0]
    bdee:	1e5a      	subs	r2, r3, #1
    bdf0:	4193      	sbcs	r3, r2
    bdf2:	6822      	ldr	r2, [r4, #0]
    bdf4:	0692      	lsls	r2, r2, #26
    bdf6:	d51c      	bpl.n	be32 <_printf_common+0x82>
    bdf8:	2030      	movs	r0, #48	; 0x30
    bdfa:	18e1      	adds	r1, r4, r3
    bdfc:	3143      	adds	r1, #67	; 0x43
    bdfe:	7008      	strb	r0, [r1, #0]
    be00:	0021      	movs	r1, r4
    be02:	1c5a      	adds	r2, r3, #1
    be04:	3145      	adds	r1, #69	; 0x45
    be06:	7809      	ldrb	r1, [r1, #0]
    be08:	18a2      	adds	r2, r4, r2
    be0a:	3243      	adds	r2, #67	; 0x43
    be0c:	3302      	adds	r3, #2
    be0e:	7011      	strb	r1, [r2, #0]
    be10:	e00f      	b.n	be32 <_printf_common+0x82>
    be12:	0022      	movs	r2, r4
    be14:	2301      	movs	r3, #1
    be16:	3219      	adds	r2, #25
    be18:	9901      	ldr	r1, [sp, #4]
    be1a:	9800      	ldr	r0, [sp, #0]
    be1c:	9e08      	ldr	r6, [sp, #32]
    be1e:	47b0      	blx	r6
    be20:	1c43      	adds	r3, r0, #1
    be22:	d00e      	beq.n	be42 <_printf_common+0x92>
    be24:	3501      	adds	r5, #1
    be26:	68e3      	ldr	r3, [r4, #12]
    be28:	683a      	ldr	r2, [r7, #0]
    be2a:	1a9b      	subs	r3, r3, r2
    be2c:	429d      	cmp	r5, r3
    be2e:	dbf0      	blt.n	be12 <_printf_common+0x62>
    be30:	e7da      	b.n	bde8 <_printf_common+0x38>
    be32:	0022      	movs	r2, r4
    be34:	9901      	ldr	r1, [sp, #4]
    be36:	3243      	adds	r2, #67	; 0x43
    be38:	9800      	ldr	r0, [sp, #0]
    be3a:	9d08      	ldr	r5, [sp, #32]
    be3c:	47a8      	blx	r5
    be3e:	1c43      	adds	r3, r0, #1
    be40:	d102      	bne.n	be48 <_printf_common+0x98>
    be42:	2001      	movs	r0, #1
    be44:	4240      	negs	r0, r0
    be46:	e020      	b.n	be8a <_printf_common+0xda>
    be48:	2306      	movs	r3, #6
    be4a:	6820      	ldr	r0, [r4, #0]
    be4c:	68e1      	ldr	r1, [r4, #12]
    be4e:	683a      	ldr	r2, [r7, #0]
    be50:	4003      	ands	r3, r0
    be52:	2500      	movs	r5, #0
    be54:	2b04      	cmp	r3, #4
    be56:	d103      	bne.n	be60 <_printf_common+0xb0>
    be58:	1a8d      	subs	r5, r1, r2
    be5a:	43eb      	mvns	r3, r5
    be5c:	17db      	asrs	r3, r3, #31
    be5e:	401d      	ands	r5, r3
    be60:	68a3      	ldr	r3, [r4, #8]
    be62:	6922      	ldr	r2, [r4, #16]
    be64:	4293      	cmp	r3, r2
    be66:	dd01      	ble.n	be6c <_printf_common+0xbc>
    be68:	1a9b      	subs	r3, r3, r2
    be6a:	18ed      	adds	r5, r5, r3
    be6c:	2700      	movs	r7, #0
    be6e:	42bd      	cmp	r5, r7
    be70:	d00a      	beq.n	be88 <_printf_common+0xd8>
    be72:	0022      	movs	r2, r4
    be74:	2301      	movs	r3, #1
    be76:	321a      	adds	r2, #26
    be78:	9901      	ldr	r1, [sp, #4]
    be7a:	9800      	ldr	r0, [sp, #0]
    be7c:	9e08      	ldr	r6, [sp, #32]
    be7e:	47b0      	blx	r6
    be80:	1c43      	adds	r3, r0, #1
    be82:	d0de      	beq.n	be42 <_printf_common+0x92>
    be84:	3701      	adds	r7, #1
    be86:	e7f2      	b.n	be6e <_printf_common+0xbe>
    be88:	2000      	movs	r0, #0
    be8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000be8c <_printf_i>:
    be8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    be8e:	b08b      	sub	sp, #44	; 0x2c
    be90:	9206      	str	r2, [sp, #24]
    be92:	000a      	movs	r2, r1
    be94:	3243      	adds	r2, #67	; 0x43
    be96:	9307      	str	r3, [sp, #28]
    be98:	9005      	str	r0, [sp, #20]
    be9a:	9204      	str	r2, [sp, #16]
    be9c:	7e0a      	ldrb	r2, [r1, #24]
    be9e:	000c      	movs	r4, r1
    bea0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bea2:	2a6e      	cmp	r2, #110	; 0x6e
    bea4:	d100      	bne.n	bea8 <_printf_i+0x1c>
    bea6:	e0ab      	b.n	c000 <_printf_i+0x174>
    bea8:	d811      	bhi.n	bece <_printf_i+0x42>
    beaa:	2a63      	cmp	r2, #99	; 0x63
    beac:	d022      	beq.n	bef4 <_printf_i+0x68>
    beae:	d809      	bhi.n	bec4 <_printf_i+0x38>
    beb0:	2a00      	cmp	r2, #0
    beb2:	d100      	bne.n	beb6 <_printf_i+0x2a>
    beb4:	e0b5      	b.n	c022 <_printf_i+0x196>
    beb6:	2a58      	cmp	r2, #88	; 0x58
    beb8:	d000      	beq.n	bebc <_printf_i+0x30>
    beba:	e0c5      	b.n	c048 <_printf_i+0x1bc>
    bebc:	3145      	adds	r1, #69	; 0x45
    bebe:	700a      	strb	r2, [r1, #0]
    bec0:	4a81      	ldr	r2, [pc, #516]	; (c0c8 <_printf_i+0x23c>)
    bec2:	e04f      	b.n	bf64 <_printf_i+0xd8>
    bec4:	2a64      	cmp	r2, #100	; 0x64
    bec6:	d01d      	beq.n	bf04 <_printf_i+0x78>
    bec8:	2a69      	cmp	r2, #105	; 0x69
    beca:	d01b      	beq.n	bf04 <_printf_i+0x78>
    becc:	e0bc      	b.n	c048 <_printf_i+0x1bc>
    bece:	2a73      	cmp	r2, #115	; 0x73
    bed0:	d100      	bne.n	bed4 <_printf_i+0x48>
    bed2:	e0aa      	b.n	c02a <_printf_i+0x19e>
    bed4:	d809      	bhi.n	beea <_printf_i+0x5e>
    bed6:	2a6f      	cmp	r2, #111	; 0x6f
    bed8:	d029      	beq.n	bf2e <_printf_i+0xa2>
    beda:	2a70      	cmp	r2, #112	; 0x70
    bedc:	d000      	beq.n	bee0 <_printf_i+0x54>
    bede:	e0b3      	b.n	c048 <_printf_i+0x1bc>
    bee0:	2220      	movs	r2, #32
    bee2:	6809      	ldr	r1, [r1, #0]
    bee4:	430a      	orrs	r2, r1
    bee6:	6022      	str	r2, [r4, #0]
    bee8:	e037      	b.n	bf5a <_printf_i+0xce>
    beea:	2a75      	cmp	r2, #117	; 0x75
    beec:	d01f      	beq.n	bf2e <_printf_i+0xa2>
    beee:	2a78      	cmp	r2, #120	; 0x78
    bef0:	d033      	beq.n	bf5a <_printf_i+0xce>
    bef2:	e0a9      	b.n	c048 <_printf_i+0x1bc>
    bef4:	000e      	movs	r6, r1
    bef6:	681a      	ldr	r2, [r3, #0]
    bef8:	3642      	adds	r6, #66	; 0x42
    befa:	1d11      	adds	r1, r2, #4
    befc:	6019      	str	r1, [r3, #0]
    befe:	6813      	ldr	r3, [r2, #0]
    bf00:	7033      	strb	r3, [r6, #0]
    bf02:	e0a4      	b.n	c04e <_printf_i+0x1c2>
    bf04:	6821      	ldr	r1, [r4, #0]
    bf06:	681a      	ldr	r2, [r3, #0]
    bf08:	0608      	lsls	r0, r1, #24
    bf0a:	d406      	bmi.n	bf1a <_printf_i+0x8e>
    bf0c:	0649      	lsls	r1, r1, #25
    bf0e:	d504      	bpl.n	bf1a <_printf_i+0x8e>
    bf10:	1d11      	adds	r1, r2, #4
    bf12:	6019      	str	r1, [r3, #0]
    bf14:	2300      	movs	r3, #0
    bf16:	5ed5      	ldrsh	r5, [r2, r3]
    bf18:	e002      	b.n	bf20 <_printf_i+0x94>
    bf1a:	1d11      	adds	r1, r2, #4
    bf1c:	6019      	str	r1, [r3, #0]
    bf1e:	6815      	ldr	r5, [r2, #0]
    bf20:	2d00      	cmp	r5, #0
    bf22:	da3b      	bge.n	bf9c <_printf_i+0x110>
    bf24:	232d      	movs	r3, #45	; 0x2d
    bf26:	9a04      	ldr	r2, [sp, #16]
    bf28:	426d      	negs	r5, r5
    bf2a:	7013      	strb	r3, [r2, #0]
    bf2c:	e036      	b.n	bf9c <_printf_i+0x110>
    bf2e:	6821      	ldr	r1, [r4, #0]
    bf30:	681a      	ldr	r2, [r3, #0]
    bf32:	0608      	lsls	r0, r1, #24
    bf34:	d406      	bmi.n	bf44 <_printf_i+0xb8>
    bf36:	0649      	lsls	r1, r1, #25
    bf38:	d504      	bpl.n	bf44 <_printf_i+0xb8>
    bf3a:	6815      	ldr	r5, [r2, #0]
    bf3c:	1d11      	adds	r1, r2, #4
    bf3e:	6019      	str	r1, [r3, #0]
    bf40:	b2ad      	uxth	r5, r5
    bf42:	e002      	b.n	bf4a <_printf_i+0xbe>
    bf44:	1d11      	adds	r1, r2, #4
    bf46:	6019      	str	r1, [r3, #0]
    bf48:	6815      	ldr	r5, [r2, #0]
    bf4a:	4b5f      	ldr	r3, [pc, #380]	; (c0c8 <_printf_i+0x23c>)
    bf4c:	7e22      	ldrb	r2, [r4, #24]
    bf4e:	9303      	str	r3, [sp, #12]
    bf50:	2708      	movs	r7, #8
    bf52:	2a6f      	cmp	r2, #111	; 0x6f
    bf54:	d01d      	beq.n	bf92 <_printf_i+0x106>
    bf56:	270a      	movs	r7, #10
    bf58:	e01b      	b.n	bf92 <_printf_i+0x106>
    bf5a:	0022      	movs	r2, r4
    bf5c:	2178      	movs	r1, #120	; 0x78
    bf5e:	3245      	adds	r2, #69	; 0x45
    bf60:	7011      	strb	r1, [r2, #0]
    bf62:	4a5a      	ldr	r2, [pc, #360]	; (c0cc <_printf_i+0x240>)
    bf64:	6819      	ldr	r1, [r3, #0]
    bf66:	9203      	str	r2, [sp, #12]
    bf68:	1d08      	adds	r0, r1, #4
    bf6a:	6822      	ldr	r2, [r4, #0]
    bf6c:	6018      	str	r0, [r3, #0]
    bf6e:	680d      	ldr	r5, [r1, #0]
    bf70:	0610      	lsls	r0, r2, #24
    bf72:	d402      	bmi.n	bf7a <_printf_i+0xee>
    bf74:	0650      	lsls	r0, r2, #25
    bf76:	d500      	bpl.n	bf7a <_printf_i+0xee>
    bf78:	b2ad      	uxth	r5, r5
    bf7a:	07d3      	lsls	r3, r2, #31
    bf7c:	d502      	bpl.n	bf84 <_printf_i+0xf8>
    bf7e:	2320      	movs	r3, #32
    bf80:	431a      	orrs	r2, r3
    bf82:	6022      	str	r2, [r4, #0]
    bf84:	2710      	movs	r7, #16
    bf86:	2d00      	cmp	r5, #0
    bf88:	d103      	bne.n	bf92 <_printf_i+0x106>
    bf8a:	2320      	movs	r3, #32
    bf8c:	6822      	ldr	r2, [r4, #0]
    bf8e:	439a      	bics	r2, r3
    bf90:	6022      	str	r2, [r4, #0]
    bf92:	0023      	movs	r3, r4
    bf94:	2200      	movs	r2, #0
    bf96:	3343      	adds	r3, #67	; 0x43
    bf98:	701a      	strb	r2, [r3, #0]
    bf9a:	e002      	b.n	bfa2 <_printf_i+0x116>
    bf9c:	270a      	movs	r7, #10
    bf9e:	4b4a      	ldr	r3, [pc, #296]	; (c0c8 <_printf_i+0x23c>)
    bfa0:	9303      	str	r3, [sp, #12]
    bfa2:	6863      	ldr	r3, [r4, #4]
    bfa4:	60a3      	str	r3, [r4, #8]
    bfa6:	2b00      	cmp	r3, #0
    bfa8:	db09      	blt.n	bfbe <_printf_i+0x132>
    bfaa:	2204      	movs	r2, #4
    bfac:	6821      	ldr	r1, [r4, #0]
    bfae:	4391      	bics	r1, r2
    bfb0:	6021      	str	r1, [r4, #0]
    bfb2:	2d00      	cmp	r5, #0
    bfb4:	d105      	bne.n	bfc2 <_printf_i+0x136>
    bfb6:	9e04      	ldr	r6, [sp, #16]
    bfb8:	2b00      	cmp	r3, #0
    bfba:	d011      	beq.n	bfe0 <_printf_i+0x154>
    bfbc:	e07b      	b.n	c0b6 <_printf_i+0x22a>
    bfbe:	2d00      	cmp	r5, #0
    bfc0:	d079      	beq.n	c0b6 <_printf_i+0x22a>
    bfc2:	9e04      	ldr	r6, [sp, #16]
    bfc4:	0028      	movs	r0, r5
    bfc6:	0039      	movs	r1, r7
    bfc8:	f7fd ffbc 	bl	9f44 <__aeabi_uidivmod>
    bfcc:	9b03      	ldr	r3, [sp, #12]
    bfce:	3e01      	subs	r6, #1
    bfd0:	5c5b      	ldrb	r3, [r3, r1]
    bfd2:	0028      	movs	r0, r5
    bfd4:	7033      	strb	r3, [r6, #0]
    bfd6:	0039      	movs	r1, r7
    bfd8:	f7fd ff2e 	bl	9e38 <__aeabi_uidiv>
    bfdc:	1e05      	subs	r5, r0, #0
    bfde:	d1f1      	bne.n	bfc4 <_printf_i+0x138>
    bfe0:	2f08      	cmp	r7, #8
    bfe2:	d109      	bne.n	bff8 <_printf_i+0x16c>
    bfe4:	6823      	ldr	r3, [r4, #0]
    bfe6:	07db      	lsls	r3, r3, #31
    bfe8:	d506      	bpl.n	bff8 <_printf_i+0x16c>
    bfea:	6863      	ldr	r3, [r4, #4]
    bfec:	6922      	ldr	r2, [r4, #16]
    bfee:	4293      	cmp	r3, r2
    bff0:	dc02      	bgt.n	bff8 <_printf_i+0x16c>
    bff2:	2330      	movs	r3, #48	; 0x30
    bff4:	3e01      	subs	r6, #1
    bff6:	7033      	strb	r3, [r6, #0]
    bff8:	9b04      	ldr	r3, [sp, #16]
    bffa:	1b9b      	subs	r3, r3, r6
    bffc:	6123      	str	r3, [r4, #16]
    bffe:	e02b      	b.n	c058 <_printf_i+0x1cc>
    c000:	6809      	ldr	r1, [r1, #0]
    c002:	681a      	ldr	r2, [r3, #0]
    c004:	0608      	lsls	r0, r1, #24
    c006:	d407      	bmi.n	c018 <_printf_i+0x18c>
    c008:	0649      	lsls	r1, r1, #25
    c00a:	d505      	bpl.n	c018 <_printf_i+0x18c>
    c00c:	1d11      	adds	r1, r2, #4
    c00e:	6019      	str	r1, [r3, #0]
    c010:	6813      	ldr	r3, [r2, #0]
    c012:	8aa2      	ldrh	r2, [r4, #20]
    c014:	801a      	strh	r2, [r3, #0]
    c016:	e004      	b.n	c022 <_printf_i+0x196>
    c018:	1d11      	adds	r1, r2, #4
    c01a:	6019      	str	r1, [r3, #0]
    c01c:	6813      	ldr	r3, [r2, #0]
    c01e:	6962      	ldr	r2, [r4, #20]
    c020:	601a      	str	r2, [r3, #0]
    c022:	2300      	movs	r3, #0
    c024:	9e04      	ldr	r6, [sp, #16]
    c026:	6123      	str	r3, [r4, #16]
    c028:	e016      	b.n	c058 <_printf_i+0x1cc>
    c02a:	681a      	ldr	r2, [r3, #0]
    c02c:	1d11      	adds	r1, r2, #4
    c02e:	6019      	str	r1, [r3, #0]
    c030:	6816      	ldr	r6, [r2, #0]
    c032:	2100      	movs	r1, #0
    c034:	6862      	ldr	r2, [r4, #4]
    c036:	0030      	movs	r0, r6
    c038:	f000 fc24 	bl	c884 <memchr>
    c03c:	2800      	cmp	r0, #0
    c03e:	d001      	beq.n	c044 <_printf_i+0x1b8>
    c040:	1b80      	subs	r0, r0, r6
    c042:	6060      	str	r0, [r4, #4]
    c044:	6863      	ldr	r3, [r4, #4]
    c046:	e003      	b.n	c050 <_printf_i+0x1c4>
    c048:	0026      	movs	r6, r4
    c04a:	3642      	adds	r6, #66	; 0x42
    c04c:	7032      	strb	r2, [r6, #0]
    c04e:	2301      	movs	r3, #1
    c050:	6123      	str	r3, [r4, #16]
    c052:	2300      	movs	r3, #0
    c054:	9a04      	ldr	r2, [sp, #16]
    c056:	7013      	strb	r3, [r2, #0]
    c058:	9b07      	ldr	r3, [sp, #28]
    c05a:	aa09      	add	r2, sp, #36	; 0x24
    c05c:	9300      	str	r3, [sp, #0]
    c05e:	0021      	movs	r1, r4
    c060:	9b06      	ldr	r3, [sp, #24]
    c062:	9805      	ldr	r0, [sp, #20]
    c064:	f7ff fea4 	bl	bdb0 <_printf_common>
    c068:	1c43      	adds	r3, r0, #1
    c06a:	d102      	bne.n	c072 <_printf_i+0x1e6>
    c06c:	2001      	movs	r0, #1
    c06e:	4240      	negs	r0, r0
    c070:	e027      	b.n	c0c2 <_printf_i+0x236>
    c072:	6923      	ldr	r3, [r4, #16]
    c074:	0032      	movs	r2, r6
    c076:	9906      	ldr	r1, [sp, #24]
    c078:	9805      	ldr	r0, [sp, #20]
    c07a:	9d07      	ldr	r5, [sp, #28]
    c07c:	47a8      	blx	r5
    c07e:	1c43      	adds	r3, r0, #1
    c080:	d0f4      	beq.n	c06c <_printf_i+0x1e0>
    c082:	6823      	ldr	r3, [r4, #0]
    c084:	2500      	movs	r5, #0
    c086:	079b      	lsls	r3, r3, #30
    c088:	d40f      	bmi.n	c0aa <_printf_i+0x21e>
    c08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c08c:	68e0      	ldr	r0, [r4, #12]
    c08e:	4298      	cmp	r0, r3
    c090:	da17      	bge.n	c0c2 <_printf_i+0x236>
    c092:	0018      	movs	r0, r3
    c094:	e015      	b.n	c0c2 <_printf_i+0x236>
    c096:	0022      	movs	r2, r4
    c098:	2301      	movs	r3, #1
    c09a:	3219      	adds	r2, #25
    c09c:	9906      	ldr	r1, [sp, #24]
    c09e:	9805      	ldr	r0, [sp, #20]
    c0a0:	9e07      	ldr	r6, [sp, #28]
    c0a2:	47b0      	blx	r6
    c0a4:	1c43      	adds	r3, r0, #1
    c0a6:	d0e1      	beq.n	c06c <_printf_i+0x1e0>
    c0a8:	3501      	adds	r5, #1
    c0aa:	68e3      	ldr	r3, [r4, #12]
    c0ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c0ae:	1a9b      	subs	r3, r3, r2
    c0b0:	429d      	cmp	r5, r3
    c0b2:	dbf0      	blt.n	c096 <_printf_i+0x20a>
    c0b4:	e7e9      	b.n	c08a <_printf_i+0x1fe>
    c0b6:	0026      	movs	r6, r4
    c0b8:	9b03      	ldr	r3, [sp, #12]
    c0ba:	3642      	adds	r6, #66	; 0x42
    c0bc:	781b      	ldrb	r3, [r3, #0]
    c0be:	7033      	strb	r3, [r6, #0]
    c0c0:	e78e      	b.n	bfe0 <_printf_i+0x154>
    c0c2:	b00b      	add	sp, #44	; 0x2c
    c0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0c6:	46c0      	nop			; (mov r8, r8)
    c0c8:	0000e3ed 	.word	0x0000e3ed
    c0cc:	0000e3fe 	.word	0x0000e3fe

0000c0d0 <iprintf>:
    c0d0:	b40f      	push	{r0, r1, r2, r3}
    c0d2:	4b0b      	ldr	r3, [pc, #44]	; (c100 <iprintf+0x30>)
    c0d4:	b513      	push	{r0, r1, r4, lr}
    c0d6:	681c      	ldr	r4, [r3, #0]
    c0d8:	2c00      	cmp	r4, #0
    c0da:	d005      	beq.n	c0e8 <iprintf+0x18>
    c0dc:	69a3      	ldr	r3, [r4, #24]
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d102      	bne.n	c0e8 <iprintf+0x18>
    c0e2:	0020      	movs	r0, r4
    c0e4:	f000 fad6 	bl	c694 <__sinit>
    c0e8:	ab05      	add	r3, sp, #20
    c0ea:	9a04      	ldr	r2, [sp, #16]
    c0ec:	68a1      	ldr	r1, [r4, #8]
    c0ee:	0020      	movs	r0, r4
    c0f0:	9301      	str	r3, [sp, #4]
    c0f2:	f7ff fd41 	bl	bb78 <_vfiprintf_r>
    c0f6:	bc16      	pop	{r1, r2, r4}
    c0f8:	bc08      	pop	{r3}
    c0fa:	b004      	add	sp, #16
    c0fc:	4718      	bx	r3
    c0fe:	46c0      	nop			; (mov r8, r8)
    c100:	2000008c 	.word	0x2000008c

0000c104 <putchar>:
    c104:	4b08      	ldr	r3, [pc, #32]	; (c128 <putchar+0x24>)
    c106:	b570      	push	{r4, r5, r6, lr}
    c108:	681c      	ldr	r4, [r3, #0]
    c10a:	0005      	movs	r5, r0
    c10c:	2c00      	cmp	r4, #0
    c10e:	d005      	beq.n	c11c <putchar+0x18>
    c110:	69a3      	ldr	r3, [r4, #24]
    c112:	2b00      	cmp	r3, #0
    c114:	d102      	bne.n	c11c <putchar+0x18>
    c116:	0020      	movs	r0, r4
    c118:	f000 fabc 	bl	c694 <__sinit>
    c11c:	0029      	movs	r1, r5
    c11e:	68a2      	ldr	r2, [r4, #8]
    c120:	0020      	movs	r0, r4
    c122:	f000 fdf1 	bl	cd08 <_putc_r>
    c126:	bd70      	pop	{r4, r5, r6, pc}
    c128:	2000008c 	.word	0x2000008c

0000c12c <_puts_r>:
    c12c:	b570      	push	{r4, r5, r6, lr}
    c12e:	0005      	movs	r5, r0
    c130:	000e      	movs	r6, r1
    c132:	2800      	cmp	r0, #0
    c134:	d004      	beq.n	c140 <_puts_r+0x14>
    c136:	6983      	ldr	r3, [r0, #24]
    c138:	2b00      	cmp	r3, #0
    c13a:	d101      	bne.n	c140 <_puts_r+0x14>
    c13c:	f000 faaa 	bl	c694 <__sinit>
    c140:	69ab      	ldr	r3, [r5, #24]
    c142:	68ac      	ldr	r4, [r5, #8]
    c144:	2b00      	cmp	r3, #0
    c146:	d102      	bne.n	c14e <_puts_r+0x22>
    c148:	0028      	movs	r0, r5
    c14a:	f000 faa3 	bl	c694 <__sinit>
    c14e:	4b25      	ldr	r3, [pc, #148]	; (c1e4 <_puts_r+0xb8>)
    c150:	429c      	cmp	r4, r3
    c152:	d101      	bne.n	c158 <_puts_r+0x2c>
    c154:	686c      	ldr	r4, [r5, #4]
    c156:	e008      	b.n	c16a <_puts_r+0x3e>
    c158:	4b23      	ldr	r3, [pc, #140]	; (c1e8 <_puts_r+0xbc>)
    c15a:	429c      	cmp	r4, r3
    c15c:	d101      	bne.n	c162 <_puts_r+0x36>
    c15e:	68ac      	ldr	r4, [r5, #8]
    c160:	e003      	b.n	c16a <_puts_r+0x3e>
    c162:	4b22      	ldr	r3, [pc, #136]	; (c1ec <_puts_r+0xc0>)
    c164:	429c      	cmp	r4, r3
    c166:	d100      	bne.n	c16a <_puts_r+0x3e>
    c168:	68ec      	ldr	r4, [r5, #12]
    c16a:	89a3      	ldrh	r3, [r4, #12]
    c16c:	071b      	lsls	r3, r3, #28
    c16e:	d502      	bpl.n	c176 <_puts_r+0x4a>
    c170:	6923      	ldr	r3, [r4, #16]
    c172:	2b00      	cmp	r3, #0
    c174:	d111      	bne.n	c19a <_puts_r+0x6e>
    c176:	0021      	movs	r1, r4
    c178:	0028      	movs	r0, r5
    c17a:	f000 f919 	bl	c3b0 <__swsetup_r>
    c17e:	2800      	cmp	r0, #0
    c180:	d00b      	beq.n	c19a <_puts_r+0x6e>
    c182:	2001      	movs	r0, #1
    c184:	4240      	negs	r0, r0
    c186:	e02b      	b.n	c1e0 <_puts_r+0xb4>
    c188:	3b01      	subs	r3, #1
    c18a:	3601      	adds	r6, #1
    c18c:	60a3      	str	r3, [r4, #8]
    c18e:	2b00      	cmp	r3, #0
    c190:	db08      	blt.n	c1a4 <_puts_r+0x78>
    c192:	6823      	ldr	r3, [r4, #0]
    c194:	1c5a      	adds	r2, r3, #1
    c196:	6022      	str	r2, [r4, #0]
    c198:	7019      	strb	r1, [r3, #0]
    c19a:	7831      	ldrb	r1, [r6, #0]
    c19c:	68a3      	ldr	r3, [r4, #8]
    c19e:	2900      	cmp	r1, #0
    c1a0:	d1f2      	bne.n	c188 <_puts_r+0x5c>
    c1a2:	e00b      	b.n	c1bc <_puts_r+0x90>
    c1a4:	69a2      	ldr	r2, [r4, #24]
    c1a6:	4293      	cmp	r3, r2
    c1a8:	db01      	blt.n	c1ae <_puts_r+0x82>
    c1aa:	290a      	cmp	r1, #10
    c1ac:	d1f1      	bne.n	c192 <_puts_r+0x66>
    c1ae:	0022      	movs	r2, r4
    c1b0:	0028      	movs	r0, r5
    c1b2:	f000 f8a5 	bl	c300 <__swbuf_r>
    c1b6:	1c43      	adds	r3, r0, #1
    c1b8:	d1ef      	bne.n	c19a <_puts_r+0x6e>
    c1ba:	e7e2      	b.n	c182 <_puts_r+0x56>
    c1bc:	3b01      	subs	r3, #1
    c1be:	60a3      	str	r3, [r4, #8]
    c1c0:	2b00      	cmp	r3, #0
    c1c2:	da08      	bge.n	c1d6 <_puts_r+0xaa>
    c1c4:	0022      	movs	r2, r4
    c1c6:	310a      	adds	r1, #10
    c1c8:	0028      	movs	r0, r5
    c1ca:	f000 f899 	bl	c300 <__swbuf_r>
    c1ce:	1c43      	adds	r3, r0, #1
    c1d0:	d0d7      	beq.n	c182 <_puts_r+0x56>
    c1d2:	200a      	movs	r0, #10
    c1d4:	e004      	b.n	c1e0 <_puts_r+0xb4>
    c1d6:	200a      	movs	r0, #10
    c1d8:	6823      	ldr	r3, [r4, #0]
    c1da:	1c5a      	adds	r2, r3, #1
    c1dc:	6022      	str	r2, [r4, #0]
    c1de:	7018      	strb	r0, [r3, #0]
    c1e0:	bd70      	pop	{r4, r5, r6, pc}
    c1e2:	46c0      	nop			; (mov r8, r8)
    c1e4:	0000e410 	.word	0x0000e410
    c1e8:	0000e430 	.word	0x0000e430
    c1ec:	0000e450 	.word	0x0000e450

0000c1f0 <puts>:
    c1f0:	b510      	push	{r4, lr}
    c1f2:	4b03      	ldr	r3, [pc, #12]	; (c200 <puts+0x10>)
    c1f4:	0001      	movs	r1, r0
    c1f6:	6818      	ldr	r0, [r3, #0]
    c1f8:	f7ff ff98 	bl	c12c <_puts_r>
    c1fc:	bd10      	pop	{r4, pc}
    c1fe:	46c0      	nop			; (mov r8, r8)
    c200:	2000008c 	.word	0x2000008c

0000c204 <sniprintf>:
    c204:	b40c      	push	{r2, r3}
    c206:	b530      	push	{r4, r5, lr}
    c208:	4b16      	ldr	r3, [pc, #88]	; (c264 <sniprintf+0x60>)
    c20a:	b09d      	sub	sp, #116	; 0x74
    c20c:	1e0c      	subs	r4, r1, #0
    c20e:	681d      	ldr	r5, [r3, #0]
    c210:	da04      	bge.n	c21c <sniprintf+0x18>
    c212:	238b      	movs	r3, #139	; 0x8b
    c214:	2001      	movs	r0, #1
    c216:	602b      	str	r3, [r5, #0]
    c218:	4240      	negs	r0, r0
    c21a:	e01d      	b.n	c258 <sniprintf+0x54>
    c21c:	2382      	movs	r3, #130	; 0x82
    c21e:	a902      	add	r1, sp, #8
    c220:	009b      	lsls	r3, r3, #2
    c222:	818b      	strh	r3, [r1, #12]
    c224:	2300      	movs	r3, #0
    c226:	9002      	str	r0, [sp, #8]
    c228:	6108      	str	r0, [r1, #16]
    c22a:	429c      	cmp	r4, r3
    c22c:	d000      	beq.n	c230 <sniprintf+0x2c>
    c22e:	1e63      	subs	r3, r4, #1
    c230:	608b      	str	r3, [r1, #8]
    c232:	614b      	str	r3, [r1, #20]
    c234:	2301      	movs	r3, #1
    c236:	425b      	negs	r3, r3
    c238:	81cb      	strh	r3, [r1, #14]
    c23a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    c23c:	ab21      	add	r3, sp, #132	; 0x84
    c23e:	0028      	movs	r0, r5
    c240:	9301      	str	r3, [sp, #4]
    c242:	f000 fc63 	bl	cb0c <_svfiprintf_r>
    c246:	1c43      	adds	r3, r0, #1
    c248:	da01      	bge.n	c24e <sniprintf+0x4a>
    c24a:	238b      	movs	r3, #139	; 0x8b
    c24c:	602b      	str	r3, [r5, #0]
    c24e:	2c00      	cmp	r4, #0
    c250:	d002      	beq.n	c258 <sniprintf+0x54>
    c252:	2300      	movs	r3, #0
    c254:	9a02      	ldr	r2, [sp, #8]
    c256:	7013      	strb	r3, [r2, #0]
    c258:	b01d      	add	sp, #116	; 0x74
    c25a:	bc30      	pop	{r4, r5}
    c25c:	bc08      	pop	{r3}
    c25e:	b002      	add	sp, #8
    c260:	4718      	bx	r3
    c262:	46c0      	nop			; (mov r8, r8)
    c264:	2000008c 	.word	0x2000008c

0000c268 <siprintf>:
    c268:	b40e      	push	{r1, r2, r3}
    c26a:	b510      	push	{r4, lr}
    c26c:	b09d      	sub	sp, #116	; 0x74
    c26e:	a902      	add	r1, sp, #8
    c270:	9002      	str	r0, [sp, #8]
    c272:	6108      	str	r0, [r1, #16]
    c274:	480b      	ldr	r0, [pc, #44]	; (c2a4 <siprintf+0x3c>)
    c276:	2482      	movs	r4, #130	; 0x82
    c278:	6088      	str	r0, [r1, #8]
    c27a:	6148      	str	r0, [r1, #20]
    c27c:	2001      	movs	r0, #1
    c27e:	4240      	negs	r0, r0
    c280:	ab1f      	add	r3, sp, #124	; 0x7c
    c282:	81c8      	strh	r0, [r1, #14]
    c284:	4808      	ldr	r0, [pc, #32]	; (c2a8 <siprintf+0x40>)
    c286:	cb04      	ldmia	r3!, {r2}
    c288:	00a4      	lsls	r4, r4, #2
    c28a:	6800      	ldr	r0, [r0, #0]
    c28c:	9301      	str	r3, [sp, #4]
    c28e:	818c      	strh	r4, [r1, #12]
    c290:	f000 fc3c 	bl	cb0c <_svfiprintf_r>
    c294:	2300      	movs	r3, #0
    c296:	9a02      	ldr	r2, [sp, #8]
    c298:	7013      	strb	r3, [r2, #0]
    c29a:	b01d      	add	sp, #116	; 0x74
    c29c:	bc10      	pop	{r4}
    c29e:	bc08      	pop	{r3}
    c2a0:	b003      	add	sp, #12
    c2a2:	4718      	bx	r3
    c2a4:	7fffffff 	.word	0x7fffffff
    c2a8:	2000008c 	.word	0x2000008c

0000c2ac <strlen>:
    c2ac:	2300      	movs	r3, #0
    c2ae:	5cc2      	ldrb	r2, [r0, r3]
    c2b0:	3301      	adds	r3, #1
    c2b2:	2a00      	cmp	r2, #0
    c2b4:	d1fb      	bne.n	c2ae <strlen+0x2>
    c2b6:	1e58      	subs	r0, r3, #1
    c2b8:	4770      	bx	lr

0000c2ba <strncmp>:
    c2ba:	2300      	movs	r3, #0
    c2bc:	b530      	push	{r4, r5, lr}
    c2be:	429a      	cmp	r2, r3
    c2c0:	d00b      	beq.n	c2da <strncmp+0x20>
    c2c2:	3a01      	subs	r2, #1
    c2c4:	5cc4      	ldrb	r4, [r0, r3]
    c2c6:	5ccd      	ldrb	r5, [r1, r3]
    c2c8:	42ac      	cmp	r4, r5
    c2ca:	d105      	bne.n	c2d8 <strncmp+0x1e>
    c2cc:	429a      	cmp	r2, r3
    c2ce:	d002      	beq.n	c2d6 <strncmp+0x1c>
    c2d0:	3301      	adds	r3, #1
    c2d2:	2c00      	cmp	r4, #0
    c2d4:	d1f6      	bne.n	c2c4 <strncmp+0xa>
    c2d6:	0025      	movs	r5, r4
    c2d8:	1b63      	subs	r3, r4, r5
    c2da:	0018      	movs	r0, r3
    c2dc:	bd30      	pop	{r4, r5, pc}

0000c2de <strspn>:
    c2de:	0003      	movs	r3, r0
    c2e0:	b530      	push	{r4, r5, lr}
    c2e2:	781c      	ldrb	r4, [r3, #0]
    c2e4:	2c00      	cmp	r4, #0
    c2e6:	d009      	beq.n	c2fc <strspn+0x1e>
    c2e8:	000a      	movs	r2, r1
    c2ea:	7815      	ldrb	r5, [r2, #0]
    c2ec:	2d00      	cmp	r5, #0
    c2ee:	d005      	beq.n	c2fc <strspn+0x1e>
    c2f0:	42ac      	cmp	r4, r5
    c2f2:	d001      	beq.n	c2f8 <strspn+0x1a>
    c2f4:	3201      	adds	r2, #1
    c2f6:	e7f8      	b.n	c2ea <strspn+0xc>
    c2f8:	3301      	adds	r3, #1
    c2fa:	e7f2      	b.n	c2e2 <strspn+0x4>
    c2fc:	1a18      	subs	r0, r3, r0
    c2fe:	bd30      	pop	{r4, r5, pc}

0000c300 <__swbuf_r>:
    c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c302:	0005      	movs	r5, r0
    c304:	000f      	movs	r7, r1
    c306:	0014      	movs	r4, r2
    c308:	2800      	cmp	r0, #0
    c30a:	d004      	beq.n	c316 <__swbuf_r+0x16>
    c30c:	6983      	ldr	r3, [r0, #24]
    c30e:	2b00      	cmp	r3, #0
    c310:	d101      	bne.n	c316 <__swbuf_r+0x16>
    c312:	f000 f9bf 	bl	c694 <__sinit>
    c316:	4b23      	ldr	r3, [pc, #140]	; (c3a4 <__swbuf_r+0xa4>)
    c318:	429c      	cmp	r4, r3
    c31a:	d101      	bne.n	c320 <__swbuf_r+0x20>
    c31c:	686c      	ldr	r4, [r5, #4]
    c31e:	e008      	b.n	c332 <__swbuf_r+0x32>
    c320:	4b21      	ldr	r3, [pc, #132]	; (c3a8 <__swbuf_r+0xa8>)
    c322:	429c      	cmp	r4, r3
    c324:	d101      	bne.n	c32a <__swbuf_r+0x2a>
    c326:	68ac      	ldr	r4, [r5, #8]
    c328:	e003      	b.n	c332 <__swbuf_r+0x32>
    c32a:	4b20      	ldr	r3, [pc, #128]	; (c3ac <__swbuf_r+0xac>)
    c32c:	429c      	cmp	r4, r3
    c32e:	d100      	bne.n	c332 <__swbuf_r+0x32>
    c330:	68ec      	ldr	r4, [r5, #12]
    c332:	69a3      	ldr	r3, [r4, #24]
    c334:	60a3      	str	r3, [r4, #8]
    c336:	89a3      	ldrh	r3, [r4, #12]
    c338:	071b      	lsls	r3, r3, #28
    c33a:	d50a      	bpl.n	c352 <__swbuf_r+0x52>
    c33c:	6923      	ldr	r3, [r4, #16]
    c33e:	2b00      	cmp	r3, #0
    c340:	d007      	beq.n	c352 <__swbuf_r+0x52>
    c342:	6823      	ldr	r3, [r4, #0]
    c344:	6922      	ldr	r2, [r4, #16]
    c346:	b2fe      	uxtb	r6, r7
    c348:	1a98      	subs	r0, r3, r2
    c34a:	6963      	ldr	r3, [r4, #20]
    c34c:	4298      	cmp	r0, r3
    c34e:	db0f      	blt.n	c370 <__swbuf_r+0x70>
    c350:	e008      	b.n	c364 <__swbuf_r+0x64>
    c352:	0021      	movs	r1, r4
    c354:	0028      	movs	r0, r5
    c356:	f000 f82b 	bl	c3b0 <__swsetup_r>
    c35a:	2800      	cmp	r0, #0
    c35c:	d0f1      	beq.n	c342 <__swbuf_r+0x42>
    c35e:	2001      	movs	r0, #1
    c360:	4240      	negs	r0, r0
    c362:	e01d      	b.n	c3a0 <__swbuf_r+0xa0>
    c364:	0021      	movs	r1, r4
    c366:	0028      	movs	r0, r5
    c368:	f000 f926 	bl	c5b8 <_fflush_r>
    c36c:	2800      	cmp	r0, #0
    c36e:	d1f6      	bne.n	c35e <__swbuf_r+0x5e>
    c370:	68a3      	ldr	r3, [r4, #8]
    c372:	3001      	adds	r0, #1
    c374:	3b01      	subs	r3, #1
    c376:	60a3      	str	r3, [r4, #8]
    c378:	6823      	ldr	r3, [r4, #0]
    c37a:	1c5a      	adds	r2, r3, #1
    c37c:	6022      	str	r2, [r4, #0]
    c37e:	701f      	strb	r7, [r3, #0]
    c380:	6963      	ldr	r3, [r4, #20]
    c382:	4298      	cmp	r0, r3
    c384:	d005      	beq.n	c392 <__swbuf_r+0x92>
    c386:	89a3      	ldrh	r3, [r4, #12]
    c388:	0030      	movs	r0, r6
    c38a:	07db      	lsls	r3, r3, #31
    c38c:	d508      	bpl.n	c3a0 <__swbuf_r+0xa0>
    c38e:	2e0a      	cmp	r6, #10
    c390:	d106      	bne.n	c3a0 <__swbuf_r+0xa0>
    c392:	0021      	movs	r1, r4
    c394:	0028      	movs	r0, r5
    c396:	f000 f90f 	bl	c5b8 <_fflush_r>
    c39a:	2800      	cmp	r0, #0
    c39c:	d1df      	bne.n	c35e <__swbuf_r+0x5e>
    c39e:	0030      	movs	r0, r6
    c3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c3a2:	46c0      	nop			; (mov r8, r8)
    c3a4:	0000e410 	.word	0x0000e410
    c3a8:	0000e430 	.word	0x0000e430
    c3ac:	0000e450 	.word	0x0000e450

0000c3b0 <__swsetup_r>:
    c3b0:	4b36      	ldr	r3, [pc, #216]	; (c48c <__swsetup_r+0xdc>)
    c3b2:	b570      	push	{r4, r5, r6, lr}
    c3b4:	681d      	ldr	r5, [r3, #0]
    c3b6:	0006      	movs	r6, r0
    c3b8:	000c      	movs	r4, r1
    c3ba:	2d00      	cmp	r5, #0
    c3bc:	d005      	beq.n	c3ca <__swsetup_r+0x1a>
    c3be:	69ab      	ldr	r3, [r5, #24]
    c3c0:	2b00      	cmp	r3, #0
    c3c2:	d102      	bne.n	c3ca <__swsetup_r+0x1a>
    c3c4:	0028      	movs	r0, r5
    c3c6:	f000 f965 	bl	c694 <__sinit>
    c3ca:	4b31      	ldr	r3, [pc, #196]	; (c490 <__swsetup_r+0xe0>)
    c3cc:	429c      	cmp	r4, r3
    c3ce:	d101      	bne.n	c3d4 <__swsetup_r+0x24>
    c3d0:	686c      	ldr	r4, [r5, #4]
    c3d2:	e008      	b.n	c3e6 <__swsetup_r+0x36>
    c3d4:	4b2f      	ldr	r3, [pc, #188]	; (c494 <__swsetup_r+0xe4>)
    c3d6:	429c      	cmp	r4, r3
    c3d8:	d101      	bne.n	c3de <__swsetup_r+0x2e>
    c3da:	68ac      	ldr	r4, [r5, #8]
    c3dc:	e003      	b.n	c3e6 <__swsetup_r+0x36>
    c3de:	4b2e      	ldr	r3, [pc, #184]	; (c498 <__swsetup_r+0xe8>)
    c3e0:	429c      	cmp	r4, r3
    c3e2:	d100      	bne.n	c3e6 <__swsetup_r+0x36>
    c3e4:	68ec      	ldr	r4, [r5, #12]
    c3e6:	220c      	movs	r2, #12
    c3e8:	5ea3      	ldrsh	r3, [r4, r2]
    c3ea:	b29a      	uxth	r2, r3
    c3ec:	0711      	lsls	r1, r2, #28
    c3ee:	d423      	bmi.n	c438 <__swsetup_r+0x88>
    c3f0:	06d1      	lsls	r1, r2, #27
    c3f2:	d407      	bmi.n	c404 <__swsetup_r+0x54>
    c3f4:	2209      	movs	r2, #9
    c3f6:	2001      	movs	r0, #1
    c3f8:	6032      	str	r2, [r6, #0]
    c3fa:	3237      	adds	r2, #55	; 0x37
    c3fc:	4313      	orrs	r3, r2
    c3fe:	81a3      	strh	r3, [r4, #12]
    c400:	4240      	negs	r0, r0
    c402:	e042      	b.n	c48a <__swsetup_r+0xda>
    c404:	0753      	lsls	r3, r2, #29
    c406:	d513      	bpl.n	c430 <__swsetup_r+0x80>
    c408:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c40a:	2900      	cmp	r1, #0
    c40c:	d008      	beq.n	c420 <__swsetup_r+0x70>
    c40e:	0023      	movs	r3, r4
    c410:	3344      	adds	r3, #68	; 0x44
    c412:	4299      	cmp	r1, r3
    c414:	d002      	beq.n	c41c <__swsetup_r+0x6c>
    c416:	0030      	movs	r0, r6
    c418:	f000 fa54 	bl	c8c4 <_free_r>
    c41c:	2300      	movs	r3, #0
    c41e:	6363      	str	r3, [r4, #52]	; 0x34
    c420:	2224      	movs	r2, #36	; 0x24
    c422:	89a3      	ldrh	r3, [r4, #12]
    c424:	4393      	bics	r3, r2
    c426:	81a3      	strh	r3, [r4, #12]
    c428:	2300      	movs	r3, #0
    c42a:	6063      	str	r3, [r4, #4]
    c42c:	6923      	ldr	r3, [r4, #16]
    c42e:	6023      	str	r3, [r4, #0]
    c430:	2208      	movs	r2, #8
    c432:	89a3      	ldrh	r3, [r4, #12]
    c434:	4313      	orrs	r3, r2
    c436:	81a3      	strh	r3, [r4, #12]
    c438:	6923      	ldr	r3, [r4, #16]
    c43a:	2b00      	cmp	r3, #0
    c43c:	d10b      	bne.n	c456 <__swsetup_r+0xa6>
    c43e:	23a0      	movs	r3, #160	; 0xa0
    c440:	89a2      	ldrh	r2, [r4, #12]
    c442:	009b      	lsls	r3, r3, #2
    c444:	4013      	ands	r3, r2
    c446:	2280      	movs	r2, #128	; 0x80
    c448:	0092      	lsls	r2, r2, #2
    c44a:	4293      	cmp	r3, r2
    c44c:	d003      	beq.n	c456 <__swsetup_r+0xa6>
    c44e:	0021      	movs	r1, r4
    c450:	0030      	movs	r0, r6
    c452:	f000 f9d9 	bl	c808 <__smakebuf_r>
    c456:	2301      	movs	r3, #1
    c458:	89a2      	ldrh	r2, [r4, #12]
    c45a:	4013      	ands	r3, r2
    c45c:	d005      	beq.n	c46a <__swsetup_r+0xba>
    c45e:	2300      	movs	r3, #0
    c460:	60a3      	str	r3, [r4, #8]
    c462:	6963      	ldr	r3, [r4, #20]
    c464:	425b      	negs	r3, r3
    c466:	61a3      	str	r3, [r4, #24]
    c468:	e003      	b.n	c472 <__swsetup_r+0xc2>
    c46a:	0792      	lsls	r2, r2, #30
    c46c:	d400      	bmi.n	c470 <__swsetup_r+0xc0>
    c46e:	6963      	ldr	r3, [r4, #20]
    c470:	60a3      	str	r3, [r4, #8]
    c472:	2000      	movs	r0, #0
    c474:	6923      	ldr	r3, [r4, #16]
    c476:	4283      	cmp	r3, r0
    c478:	d107      	bne.n	c48a <__swsetup_r+0xda>
    c47a:	220c      	movs	r2, #12
    c47c:	5ea3      	ldrsh	r3, [r4, r2]
    c47e:	061a      	lsls	r2, r3, #24
    c480:	d503      	bpl.n	c48a <__swsetup_r+0xda>
    c482:	2240      	movs	r2, #64	; 0x40
    c484:	4313      	orrs	r3, r2
    c486:	81a3      	strh	r3, [r4, #12]
    c488:	3801      	subs	r0, #1
    c48a:	bd70      	pop	{r4, r5, r6, pc}
    c48c:	2000008c 	.word	0x2000008c
    c490:	0000e410 	.word	0x0000e410
    c494:	0000e430 	.word	0x0000e430
    c498:	0000e450 	.word	0x0000e450

0000c49c <abort>:
    c49c:	b510      	push	{r4, lr}
    c49e:	2006      	movs	r0, #6
    c4a0:	f000 fca4 	bl	cdec <raise>
    c4a4:	2001      	movs	r0, #1
    c4a6:	f7fa fc87 	bl	6db8 <_exit>
	...

0000c4ac <__sflush_r>:
    c4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c4ae:	898a      	ldrh	r2, [r1, #12]
    c4b0:	0005      	movs	r5, r0
    c4b2:	000c      	movs	r4, r1
    c4b4:	0713      	lsls	r3, r2, #28
    c4b6:	d45a      	bmi.n	c56e <__sflush_r+0xc2>
    c4b8:	684b      	ldr	r3, [r1, #4]
    c4ba:	2b00      	cmp	r3, #0
    c4bc:	dc02      	bgt.n	c4c4 <__sflush_r+0x18>
    c4be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    c4c0:	2b00      	cmp	r3, #0
    c4c2:	dd19      	ble.n	c4f8 <__sflush_r+0x4c>
    c4c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c4c6:	2f00      	cmp	r7, #0
    c4c8:	d016      	beq.n	c4f8 <__sflush_r+0x4c>
    c4ca:	2300      	movs	r3, #0
    c4cc:	682e      	ldr	r6, [r5, #0]
    c4ce:	602b      	str	r3, [r5, #0]
    c4d0:	2380      	movs	r3, #128	; 0x80
    c4d2:	015b      	lsls	r3, r3, #5
    c4d4:	401a      	ands	r2, r3
    c4d6:	d001      	beq.n	c4dc <__sflush_r+0x30>
    c4d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    c4da:	e014      	b.n	c506 <__sflush_r+0x5a>
    c4dc:	2301      	movs	r3, #1
    c4de:	6a21      	ldr	r1, [r4, #32]
    c4e0:	0028      	movs	r0, r5
    c4e2:	47b8      	blx	r7
    c4e4:	1c43      	adds	r3, r0, #1
    c4e6:	d10e      	bne.n	c506 <__sflush_r+0x5a>
    c4e8:	682b      	ldr	r3, [r5, #0]
    c4ea:	2b00      	cmp	r3, #0
    c4ec:	d00b      	beq.n	c506 <__sflush_r+0x5a>
    c4ee:	2b1d      	cmp	r3, #29
    c4f0:	d001      	beq.n	c4f6 <__sflush_r+0x4a>
    c4f2:	2b16      	cmp	r3, #22
    c4f4:	d102      	bne.n	c4fc <__sflush_r+0x50>
    c4f6:	602e      	str	r6, [r5, #0]
    c4f8:	2000      	movs	r0, #0
    c4fa:	e05a      	b.n	c5b2 <__sflush_r+0x106>
    c4fc:	2240      	movs	r2, #64	; 0x40
    c4fe:	89a3      	ldrh	r3, [r4, #12]
    c500:	4313      	orrs	r3, r2
    c502:	81a3      	strh	r3, [r4, #12]
    c504:	e055      	b.n	c5b2 <__sflush_r+0x106>
    c506:	89a3      	ldrh	r3, [r4, #12]
    c508:	075b      	lsls	r3, r3, #29
    c50a:	d506      	bpl.n	c51a <__sflush_r+0x6e>
    c50c:	6863      	ldr	r3, [r4, #4]
    c50e:	1ac0      	subs	r0, r0, r3
    c510:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c512:	2b00      	cmp	r3, #0
    c514:	d001      	beq.n	c51a <__sflush_r+0x6e>
    c516:	6c23      	ldr	r3, [r4, #64]	; 0x40
    c518:	1ac0      	subs	r0, r0, r3
    c51a:	2300      	movs	r3, #0
    c51c:	0002      	movs	r2, r0
    c51e:	6a21      	ldr	r1, [r4, #32]
    c520:	0028      	movs	r0, r5
    c522:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    c524:	47b8      	blx	r7
    c526:	89a3      	ldrh	r3, [r4, #12]
    c528:	1c42      	adds	r2, r0, #1
    c52a:	d106      	bne.n	c53a <__sflush_r+0x8e>
    c52c:	6829      	ldr	r1, [r5, #0]
    c52e:	291d      	cmp	r1, #29
    c530:	d83a      	bhi.n	c5a8 <__sflush_r+0xfc>
    c532:	4a20      	ldr	r2, [pc, #128]	; (c5b4 <__sflush_r+0x108>)
    c534:	40ca      	lsrs	r2, r1
    c536:	07d2      	lsls	r2, r2, #31
    c538:	d536      	bpl.n	c5a8 <__sflush_r+0xfc>
    c53a:	2200      	movs	r2, #0
    c53c:	6062      	str	r2, [r4, #4]
    c53e:	6922      	ldr	r2, [r4, #16]
    c540:	6022      	str	r2, [r4, #0]
    c542:	04db      	lsls	r3, r3, #19
    c544:	d505      	bpl.n	c552 <__sflush_r+0xa6>
    c546:	1c43      	adds	r3, r0, #1
    c548:	d102      	bne.n	c550 <__sflush_r+0xa4>
    c54a:	682b      	ldr	r3, [r5, #0]
    c54c:	2b00      	cmp	r3, #0
    c54e:	d100      	bne.n	c552 <__sflush_r+0xa6>
    c550:	6560      	str	r0, [r4, #84]	; 0x54
    c552:	6b61      	ldr	r1, [r4, #52]	; 0x34
    c554:	602e      	str	r6, [r5, #0]
    c556:	2900      	cmp	r1, #0
    c558:	d0ce      	beq.n	c4f8 <__sflush_r+0x4c>
    c55a:	0023      	movs	r3, r4
    c55c:	3344      	adds	r3, #68	; 0x44
    c55e:	4299      	cmp	r1, r3
    c560:	d002      	beq.n	c568 <__sflush_r+0xbc>
    c562:	0028      	movs	r0, r5
    c564:	f000 f9ae 	bl	c8c4 <_free_r>
    c568:	2000      	movs	r0, #0
    c56a:	6360      	str	r0, [r4, #52]	; 0x34
    c56c:	e021      	b.n	c5b2 <__sflush_r+0x106>
    c56e:	690f      	ldr	r7, [r1, #16]
    c570:	2f00      	cmp	r7, #0
    c572:	d0c1      	beq.n	c4f8 <__sflush_r+0x4c>
    c574:	680b      	ldr	r3, [r1, #0]
    c576:	600f      	str	r7, [r1, #0]
    c578:	1bdb      	subs	r3, r3, r7
    c57a:	9301      	str	r3, [sp, #4]
    c57c:	2300      	movs	r3, #0
    c57e:	0792      	lsls	r2, r2, #30
    c580:	d100      	bne.n	c584 <__sflush_r+0xd8>
    c582:	694b      	ldr	r3, [r1, #20]
    c584:	60a3      	str	r3, [r4, #8]
    c586:	e003      	b.n	c590 <__sflush_r+0xe4>
    c588:	9b01      	ldr	r3, [sp, #4]
    c58a:	183f      	adds	r7, r7, r0
    c58c:	1a1b      	subs	r3, r3, r0
    c58e:	9301      	str	r3, [sp, #4]
    c590:	9b01      	ldr	r3, [sp, #4]
    c592:	2b00      	cmp	r3, #0
    c594:	ddb0      	ble.n	c4f8 <__sflush_r+0x4c>
    c596:	9b01      	ldr	r3, [sp, #4]
    c598:	003a      	movs	r2, r7
    c59a:	6a21      	ldr	r1, [r4, #32]
    c59c:	0028      	movs	r0, r5
    c59e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    c5a0:	47b0      	blx	r6
    c5a2:	2800      	cmp	r0, #0
    c5a4:	dcf0      	bgt.n	c588 <__sflush_r+0xdc>
    c5a6:	89a3      	ldrh	r3, [r4, #12]
    c5a8:	2240      	movs	r2, #64	; 0x40
    c5aa:	2001      	movs	r0, #1
    c5ac:	4313      	orrs	r3, r2
    c5ae:	81a3      	strh	r3, [r4, #12]
    c5b0:	4240      	negs	r0, r0
    c5b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    c5b4:	20400001 	.word	0x20400001

0000c5b8 <_fflush_r>:
    c5b8:	690b      	ldr	r3, [r1, #16]
    c5ba:	b570      	push	{r4, r5, r6, lr}
    c5bc:	0005      	movs	r5, r0
    c5be:	000c      	movs	r4, r1
    c5c0:	2b00      	cmp	r3, #0
    c5c2:	d101      	bne.n	c5c8 <_fflush_r+0x10>
    c5c4:	2000      	movs	r0, #0
    c5c6:	e01c      	b.n	c602 <_fflush_r+0x4a>
    c5c8:	2800      	cmp	r0, #0
    c5ca:	d004      	beq.n	c5d6 <_fflush_r+0x1e>
    c5cc:	6983      	ldr	r3, [r0, #24]
    c5ce:	2b00      	cmp	r3, #0
    c5d0:	d101      	bne.n	c5d6 <_fflush_r+0x1e>
    c5d2:	f000 f85f 	bl	c694 <__sinit>
    c5d6:	4b0b      	ldr	r3, [pc, #44]	; (c604 <_fflush_r+0x4c>)
    c5d8:	429c      	cmp	r4, r3
    c5da:	d101      	bne.n	c5e0 <_fflush_r+0x28>
    c5dc:	686c      	ldr	r4, [r5, #4]
    c5de:	e008      	b.n	c5f2 <_fflush_r+0x3a>
    c5e0:	4b09      	ldr	r3, [pc, #36]	; (c608 <_fflush_r+0x50>)
    c5e2:	429c      	cmp	r4, r3
    c5e4:	d101      	bne.n	c5ea <_fflush_r+0x32>
    c5e6:	68ac      	ldr	r4, [r5, #8]
    c5e8:	e003      	b.n	c5f2 <_fflush_r+0x3a>
    c5ea:	4b08      	ldr	r3, [pc, #32]	; (c60c <_fflush_r+0x54>)
    c5ec:	429c      	cmp	r4, r3
    c5ee:	d100      	bne.n	c5f2 <_fflush_r+0x3a>
    c5f0:	68ec      	ldr	r4, [r5, #12]
    c5f2:	220c      	movs	r2, #12
    c5f4:	5ea3      	ldrsh	r3, [r4, r2]
    c5f6:	2b00      	cmp	r3, #0
    c5f8:	d0e4      	beq.n	c5c4 <_fflush_r+0xc>
    c5fa:	0021      	movs	r1, r4
    c5fc:	0028      	movs	r0, r5
    c5fe:	f7ff ff55 	bl	c4ac <__sflush_r>
    c602:	bd70      	pop	{r4, r5, r6, pc}
    c604:	0000e410 	.word	0x0000e410
    c608:	0000e430 	.word	0x0000e430
    c60c:	0000e450 	.word	0x0000e450

0000c610 <_cleanup_r>:
    c610:	b510      	push	{r4, lr}
    c612:	4902      	ldr	r1, [pc, #8]	; (c61c <_cleanup_r+0xc>)
    c614:	f000 f8b0 	bl	c778 <_fwalk_reent>
    c618:	bd10      	pop	{r4, pc}
    c61a:	46c0      	nop			; (mov r8, r8)
    c61c:	0000c5b9 	.word	0x0000c5b9

0000c620 <std.isra.0>:
    c620:	2300      	movs	r3, #0
    c622:	b510      	push	{r4, lr}
    c624:	0004      	movs	r4, r0
    c626:	6003      	str	r3, [r0, #0]
    c628:	6043      	str	r3, [r0, #4]
    c62a:	6083      	str	r3, [r0, #8]
    c62c:	8181      	strh	r1, [r0, #12]
    c62e:	6643      	str	r3, [r0, #100]	; 0x64
    c630:	81c2      	strh	r2, [r0, #14]
    c632:	6103      	str	r3, [r0, #16]
    c634:	6143      	str	r3, [r0, #20]
    c636:	6183      	str	r3, [r0, #24]
    c638:	0019      	movs	r1, r3
    c63a:	2208      	movs	r2, #8
    c63c:	305c      	adds	r0, #92	; 0x5c
    c63e:	f7ff fa6c 	bl	bb1a <memset>
    c642:	4b05      	ldr	r3, [pc, #20]	; (c658 <std.isra.0+0x38>)
    c644:	6224      	str	r4, [r4, #32]
    c646:	6263      	str	r3, [r4, #36]	; 0x24
    c648:	4b04      	ldr	r3, [pc, #16]	; (c65c <std.isra.0+0x3c>)
    c64a:	62a3      	str	r3, [r4, #40]	; 0x28
    c64c:	4b04      	ldr	r3, [pc, #16]	; (c660 <std.isra.0+0x40>)
    c64e:	62e3      	str	r3, [r4, #44]	; 0x2c
    c650:	4b04      	ldr	r3, [pc, #16]	; (c664 <std.isra.0+0x44>)
    c652:	6323      	str	r3, [r4, #48]	; 0x30
    c654:	bd10      	pop	{r4, pc}
    c656:	46c0      	nop			; (mov r8, r8)
    c658:	0000ce2d 	.word	0x0000ce2d
    c65c:	0000ce55 	.word	0x0000ce55
    c660:	0000ce8d 	.word	0x0000ce8d
    c664:	0000ceb9 	.word	0x0000ceb9

0000c668 <__sfmoreglue>:
    c668:	b570      	push	{r4, r5, r6, lr}
    c66a:	2568      	movs	r5, #104	; 0x68
    c66c:	1e4b      	subs	r3, r1, #1
    c66e:	435d      	muls	r5, r3
    c670:	000e      	movs	r6, r1
    c672:	0029      	movs	r1, r5
    c674:	3174      	adds	r1, #116	; 0x74
    c676:	f000 f96b 	bl	c950 <_malloc_r>
    c67a:	1e04      	subs	r4, r0, #0
    c67c:	d008      	beq.n	c690 <__sfmoreglue+0x28>
    c67e:	2100      	movs	r1, #0
    c680:	002a      	movs	r2, r5
    c682:	6001      	str	r1, [r0, #0]
    c684:	6046      	str	r6, [r0, #4]
    c686:	300c      	adds	r0, #12
    c688:	60a0      	str	r0, [r4, #8]
    c68a:	3268      	adds	r2, #104	; 0x68
    c68c:	f7ff fa45 	bl	bb1a <memset>
    c690:	0020      	movs	r0, r4
    c692:	bd70      	pop	{r4, r5, r6, pc}

0000c694 <__sinit>:
    c694:	6983      	ldr	r3, [r0, #24]
    c696:	b513      	push	{r0, r1, r4, lr}
    c698:	0004      	movs	r4, r0
    c69a:	2b00      	cmp	r3, #0
    c69c:	d128      	bne.n	c6f0 <__sinit+0x5c>
    c69e:	6483      	str	r3, [r0, #72]	; 0x48
    c6a0:	64c3      	str	r3, [r0, #76]	; 0x4c
    c6a2:	6503      	str	r3, [r0, #80]	; 0x50
    c6a4:	4b13      	ldr	r3, [pc, #76]	; (c6f4 <__sinit+0x60>)
    c6a6:	4a14      	ldr	r2, [pc, #80]	; (c6f8 <__sinit+0x64>)
    c6a8:	681b      	ldr	r3, [r3, #0]
    c6aa:	6282      	str	r2, [r0, #40]	; 0x28
    c6ac:	9301      	str	r3, [sp, #4]
    c6ae:	4298      	cmp	r0, r3
    c6b0:	d101      	bne.n	c6b6 <__sinit+0x22>
    c6b2:	2301      	movs	r3, #1
    c6b4:	6183      	str	r3, [r0, #24]
    c6b6:	0020      	movs	r0, r4
    c6b8:	f000 f820 	bl	c6fc <__sfp>
    c6bc:	6060      	str	r0, [r4, #4]
    c6be:	0020      	movs	r0, r4
    c6c0:	f000 f81c 	bl	c6fc <__sfp>
    c6c4:	60a0      	str	r0, [r4, #8]
    c6c6:	0020      	movs	r0, r4
    c6c8:	f000 f818 	bl	c6fc <__sfp>
    c6cc:	2200      	movs	r2, #0
    c6ce:	60e0      	str	r0, [r4, #12]
    c6d0:	2104      	movs	r1, #4
    c6d2:	6860      	ldr	r0, [r4, #4]
    c6d4:	f7ff ffa4 	bl	c620 <std.isra.0>
    c6d8:	2201      	movs	r2, #1
    c6da:	2109      	movs	r1, #9
    c6dc:	68a0      	ldr	r0, [r4, #8]
    c6de:	f7ff ff9f 	bl	c620 <std.isra.0>
    c6e2:	2202      	movs	r2, #2
    c6e4:	2112      	movs	r1, #18
    c6e6:	68e0      	ldr	r0, [r4, #12]
    c6e8:	f7ff ff9a 	bl	c620 <std.isra.0>
    c6ec:	2301      	movs	r3, #1
    c6ee:	61a3      	str	r3, [r4, #24]
    c6f0:	bd13      	pop	{r0, r1, r4, pc}
    c6f2:	46c0      	nop			; (mov r8, r8)
    c6f4:	0000e3d8 	.word	0x0000e3d8
    c6f8:	0000c611 	.word	0x0000c611

0000c6fc <__sfp>:
    c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6fe:	4b1d      	ldr	r3, [pc, #116]	; (c774 <__sfp+0x78>)
    c700:	0006      	movs	r6, r0
    c702:	681d      	ldr	r5, [r3, #0]
    c704:	69ab      	ldr	r3, [r5, #24]
    c706:	2b00      	cmp	r3, #0
    c708:	d102      	bne.n	c710 <__sfp+0x14>
    c70a:	0028      	movs	r0, r5
    c70c:	f7ff ffc2 	bl	c694 <__sinit>
    c710:	3548      	adds	r5, #72	; 0x48
    c712:	68ac      	ldr	r4, [r5, #8]
    c714:	686b      	ldr	r3, [r5, #4]
    c716:	3b01      	subs	r3, #1
    c718:	d405      	bmi.n	c726 <__sfp+0x2a>
    c71a:	220c      	movs	r2, #12
    c71c:	5ea7      	ldrsh	r7, [r4, r2]
    c71e:	2f00      	cmp	r7, #0
    c720:	d010      	beq.n	c744 <__sfp+0x48>
    c722:	3468      	adds	r4, #104	; 0x68
    c724:	e7f7      	b.n	c716 <__sfp+0x1a>
    c726:	682b      	ldr	r3, [r5, #0]
    c728:	2b00      	cmp	r3, #0
    c72a:	d001      	beq.n	c730 <__sfp+0x34>
    c72c:	682d      	ldr	r5, [r5, #0]
    c72e:	e7f0      	b.n	c712 <__sfp+0x16>
    c730:	2104      	movs	r1, #4
    c732:	0030      	movs	r0, r6
    c734:	f7ff ff98 	bl	c668 <__sfmoreglue>
    c738:	6028      	str	r0, [r5, #0]
    c73a:	2800      	cmp	r0, #0
    c73c:	d1f6      	bne.n	c72c <__sfp+0x30>
    c73e:	230c      	movs	r3, #12
    c740:	6033      	str	r3, [r6, #0]
    c742:	e016      	b.n	c772 <__sfp+0x76>
    c744:	2301      	movs	r3, #1
    c746:	0020      	movs	r0, r4
    c748:	425b      	negs	r3, r3
    c74a:	81e3      	strh	r3, [r4, #14]
    c74c:	3302      	adds	r3, #2
    c74e:	81a3      	strh	r3, [r4, #12]
    c750:	6667      	str	r7, [r4, #100]	; 0x64
    c752:	6027      	str	r7, [r4, #0]
    c754:	60a7      	str	r7, [r4, #8]
    c756:	6067      	str	r7, [r4, #4]
    c758:	6127      	str	r7, [r4, #16]
    c75a:	6167      	str	r7, [r4, #20]
    c75c:	61a7      	str	r7, [r4, #24]
    c75e:	305c      	adds	r0, #92	; 0x5c
    c760:	2208      	movs	r2, #8
    c762:	0039      	movs	r1, r7
    c764:	f7ff f9d9 	bl	bb1a <memset>
    c768:	0020      	movs	r0, r4
    c76a:	6367      	str	r7, [r4, #52]	; 0x34
    c76c:	63a7      	str	r7, [r4, #56]	; 0x38
    c76e:	64a7      	str	r7, [r4, #72]	; 0x48
    c770:	64e7      	str	r7, [r4, #76]	; 0x4c
    c772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c774:	0000e3d8 	.word	0x0000e3d8

0000c778 <_fwalk_reent>:
    c778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c77a:	0004      	movs	r4, r0
    c77c:	0007      	movs	r7, r0
    c77e:	2600      	movs	r6, #0
    c780:	9101      	str	r1, [sp, #4]
    c782:	3448      	adds	r4, #72	; 0x48
    c784:	2c00      	cmp	r4, #0
    c786:	d016      	beq.n	c7b6 <_fwalk_reent+0x3e>
    c788:	6863      	ldr	r3, [r4, #4]
    c78a:	68a5      	ldr	r5, [r4, #8]
    c78c:	9300      	str	r3, [sp, #0]
    c78e:	9b00      	ldr	r3, [sp, #0]
    c790:	3b01      	subs	r3, #1
    c792:	9300      	str	r3, [sp, #0]
    c794:	d40d      	bmi.n	c7b2 <_fwalk_reent+0x3a>
    c796:	89ab      	ldrh	r3, [r5, #12]
    c798:	2b01      	cmp	r3, #1
    c79a:	d908      	bls.n	c7ae <_fwalk_reent+0x36>
    c79c:	220e      	movs	r2, #14
    c79e:	5eab      	ldrsh	r3, [r5, r2]
    c7a0:	3301      	adds	r3, #1
    c7a2:	d004      	beq.n	c7ae <_fwalk_reent+0x36>
    c7a4:	0029      	movs	r1, r5
    c7a6:	0038      	movs	r0, r7
    c7a8:	9b01      	ldr	r3, [sp, #4]
    c7aa:	4798      	blx	r3
    c7ac:	4306      	orrs	r6, r0
    c7ae:	3568      	adds	r5, #104	; 0x68
    c7b0:	e7ed      	b.n	c78e <_fwalk_reent+0x16>
    c7b2:	6824      	ldr	r4, [r4, #0]
    c7b4:	e7e6      	b.n	c784 <_fwalk_reent+0xc>
    c7b6:	0030      	movs	r0, r6
    c7b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000c7bc <__swhatbuf_r>:
    c7bc:	b570      	push	{r4, r5, r6, lr}
    c7be:	000e      	movs	r6, r1
    c7c0:	001d      	movs	r5, r3
    c7c2:	230e      	movs	r3, #14
    c7c4:	5ec9      	ldrsh	r1, [r1, r3]
    c7c6:	b090      	sub	sp, #64	; 0x40
    c7c8:	0014      	movs	r4, r2
    c7ca:	2900      	cmp	r1, #0
    c7cc:	da06      	bge.n	c7dc <__swhatbuf_r+0x20>
    c7ce:	2300      	movs	r3, #0
    c7d0:	602b      	str	r3, [r5, #0]
    c7d2:	89b3      	ldrh	r3, [r6, #12]
    c7d4:	061b      	lsls	r3, r3, #24
    c7d6:	d50f      	bpl.n	c7f8 <__swhatbuf_r+0x3c>
    c7d8:	2340      	movs	r3, #64	; 0x40
    c7da:	e00f      	b.n	c7fc <__swhatbuf_r+0x40>
    c7dc:	aa01      	add	r2, sp, #4
    c7de:	f000 fb97 	bl	cf10 <_fstat_r>
    c7e2:	2800      	cmp	r0, #0
    c7e4:	dbf3      	blt.n	c7ce <__swhatbuf_r+0x12>
    c7e6:	23f0      	movs	r3, #240	; 0xf0
    c7e8:	9a02      	ldr	r2, [sp, #8]
    c7ea:	021b      	lsls	r3, r3, #8
    c7ec:	4013      	ands	r3, r2
    c7ee:	4a05      	ldr	r2, [pc, #20]	; (c804 <__swhatbuf_r+0x48>)
    c7f0:	189b      	adds	r3, r3, r2
    c7f2:	425a      	negs	r2, r3
    c7f4:	4153      	adcs	r3, r2
    c7f6:	602b      	str	r3, [r5, #0]
    c7f8:	2380      	movs	r3, #128	; 0x80
    c7fa:	00db      	lsls	r3, r3, #3
    c7fc:	2000      	movs	r0, #0
    c7fe:	6023      	str	r3, [r4, #0]
    c800:	b010      	add	sp, #64	; 0x40
    c802:	bd70      	pop	{r4, r5, r6, pc}
    c804:	ffffe000 	.word	0xffffe000

0000c808 <__smakebuf_r>:
    c808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c80a:	2602      	movs	r6, #2
    c80c:	898b      	ldrh	r3, [r1, #12]
    c80e:	0005      	movs	r5, r0
    c810:	000c      	movs	r4, r1
    c812:	4233      	tst	r3, r6
    c814:	d110      	bne.n	c838 <__smakebuf_r+0x30>
    c816:	ab01      	add	r3, sp, #4
    c818:	466a      	mov	r2, sp
    c81a:	f7ff ffcf 	bl	c7bc <__swhatbuf_r>
    c81e:	9900      	ldr	r1, [sp, #0]
    c820:	0007      	movs	r7, r0
    c822:	0028      	movs	r0, r5
    c824:	f000 f894 	bl	c950 <_malloc_r>
    c828:	2800      	cmp	r0, #0
    c82a:	d10c      	bne.n	c846 <__smakebuf_r+0x3e>
    c82c:	220c      	movs	r2, #12
    c82e:	5ea3      	ldrsh	r3, [r4, r2]
    c830:	059a      	lsls	r2, r3, #22
    c832:	d423      	bmi.n	c87c <__smakebuf_r+0x74>
    c834:	4333      	orrs	r3, r6
    c836:	81a3      	strh	r3, [r4, #12]
    c838:	0023      	movs	r3, r4
    c83a:	3347      	adds	r3, #71	; 0x47
    c83c:	6023      	str	r3, [r4, #0]
    c83e:	6123      	str	r3, [r4, #16]
    c840:	2301      	movs	r3, #1
    c842:	6163      	str	r3, [r4, #20]
    c844:	e01a      	b.n	c87c <__smakebuf_r+0x74>
    c846:	2280      	movs	r2, #128	; 0x80
    c848:	4b0d      	ldr	r3, [pc, #52]	; (c880 <__smakebuf_r+0x78>)
    c84a:	62ab      	str	r3, [r5, #40]	; 0x28
    c84c:	89a3      	ldrh	r3, [r4, #12]
    c84e:	6020      	str	r0, [r4, #0]
    c850:	4313      	orrs	r3, r2
    c852:	81a3      	strh	r3, [r4, #12]
    c854:	9b00      	ldr	r3, [sp, #0]
    c856:	6120      	str	r0, [r4, #16]
    c858:	6163      	str	r3, [r4, #20]
    c85a:	9b01      	ldr	r3, [sp, #4]
    c85c:	2b00      	cmp	r3, #0
    c85e:	d00a      	beq.n	c876 <__smakebuf_r+0x6e>
    c860:	230e      	movs	r3, #14
    c862:	5ee1      	ldrsh	r1, [r4, r3]
    c864:	0028      	movs	r0, r5
    c866:	f000 fb65 	bl	cf34 <_isatty_r>
    c86a:	2800      	cmp	r0, #0
    c86c:	d003      	beq.n	c876 <__smakebuf_r+0x6e>
    c86e:	2201      	movs	r2, #1
    c870:	89a3      	ldrh	r3, [r4, #12]
    c872:	4313      	orrs	r3, r2
    c874:	81a3      	strh	r3, [r4, #12]
    c876:	89a3      	ldrh	r3, [r4, #12]
    c878:	431f      	orrs	r7, r3
    c87a:	81a7      	strh	r7, [r4, #12]
    c87c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c87e:	46c0      	nop			; (mov r8, r8)
    c880:	0000c611 	.word	0x0000c611

0000c884 <memchr>:
    c884:	b2c9      	uxtb	r1, r1
    c886:	1882      	adds	r2, r0, r2
    c888:	4290      	cmp	r0, r2
    c88a:	d004      	beq.n	c896 <memchr+0x12>
    c88c:	7803      	ldrb	r3, [r0, #0]
    c88e:	428b      	cmp	r3, r1
    c890:	d002      	beq.n	c898 <memchr+0x14>
    c892:	3001      	adds	r0, #1
    c894:	e7f8      	b.n	c888 <memchr+0x4>
    c896:	2000      	movs	r0, #0
    c898:	4770      	bx	lr

0000c89a <memmove>:
    c89a:	b510      	push	{r4, lr}
    c89c:	4288      	cmp	r0, r1
    c89e:	d902      	bls.n	c8a6 <memmove+0xc>
    c8a0:	188b      	adds	r3, r1, r2
    c8a2:	4298      	cmp	r0, r3
    c8a4:	d301      	bcc.n	c8aa <memmove+0x10>
    c8a6:	2300      	movs	r3, #0
    c8a8:	e005      	b.n	c8b6 <memmove+0x1c>
    c8aa:	1a9b      	subs	r3, r3, r2
    c8ac:	3a01      	subs	r2, #1
    c8ae:	d308      	bcc.n	c8c2 <memmove+0x28>
    c8b0:	5c99      	ldrb	r1, [r3, r2]
    c8b2:	5481      	strb	r1, [r0, r2]
    c8b4:	e7fa      	b.n	c8ac <memmove+0x12>
    c8b6:	4293      	cmp	r3, r2
    c8b8:	d003      	beq.n	c8c2 <memmove+0x28>
    c8ba:	5ccc      	ldrb	r4, [r1, r3]
    c8bc:	54c4      	strb	r4, [r0, r3]
    c8be:	3301      	adds	r3, #1
    c8c0:	e7f9      	b.n	c8b6 <memmove+0x1c>
    c8c2:	bd10      	pop	{r4, pc}

0000c8c4 <_free_r>:
    c8c4:	b530      	push	{r4, r5, lr}
    c8c6:	2900      	cmp	r1, #0
    c8c8:	d03e      	beq.n	c948 <_free_r+0x84>
    c8ca:	3904      	subs	r1, #4
    c8cc:	680b      	ldr	r3, [r1, #0]
    c8ce:	2b00      	cmp	r3, #0
    c8d0:	da00      	bge.n	c8d4 <_free_r+0x10>
    c8d2:	18c9      	adds	r1, r1, r3
    c8d4:	4a1d      	ldr	r2, [pc, #116]	; (c94c <_free_r+0x88>)
    c8d6:	6813      	ldr	r3, [r2, #0]
    c8d8:	0014      	movs	r4, r2
    c8da:	2b00      	cmp	r3, #0
    c8dc:	d102      	bne.n	c8e4 <_free_r+0x20>
    c8de:	604b      	str	r3, [r1, #4]
    c8e0:	6011      	str	r1, [r2, #0]
    c8e2:	e031      	b.n	c948 <_free_r+0x84>
    c8e4:	428b      	cmp	r3, r1
    c8e6:	d90d      	bls.n	c904 <_free_r+0x40>
    c8e8:	680a      	ldr	r2, [r1, #0]
    c8ea:	1888      	adds	r0, r1, r2
    c8ec:	4283      	cmp	r3, r0
    c8ee:	d103      	bne.n	c8f8 <_free_r+0x34>
    c8f0:	6818      	ldr	r0, [r3, #0]
    c8f2:	685b      	ldr	r3, [r3, #4]
    c8f4:	1882      	adds	r2, r0, r2
    c8f6:	600a      	str	r2, [r1, #0]
    c8f8:	604b      	str	r3, [r1, #4]
    c8fa:	6021      	str	r1, [r4, #0]
    c8fc:	e024      	b.n	c948 <_free_r+0x84>
    c8fe:	428a      	cmp	r2, r1
    c900:	d803      	bhi.n	c90a <_free_r+0x46>
    c902:	0013      	movs	r3, r2
    c904:	685a      	ldr	r2, [r3, #4]
    c906:	2a00      	cmp	r2, #0
    c908:	d1f9      	bne.n	c8fe <_free_r+0x3a>
    c90a:	681d      	ldr	r5, [r3, #0]
    c90c:	195c      	adds	r4, r3, r5
    c90e:	428c      	cmp	r4, r1
    c910:	d10b      	bne.n	c92a <_free_r+0x66>
    c912:	6809      	ldr	r1, [r1, #0]
    c914:	1869      	adds	r1, r5, r1
    c916:	1858      	adds	r0, r3, r1
    c918:	6019      	str	r1, [r3, #0]
    c91a:	4282      	cmp	r2, r0
    c91c:	d114      	bne.n	c948 <_free_r+0x84>
    c91e:	6810      	ldr	r0, [r2, #0]
    c920:	6852      	ldr	r2, [r2, #4]
    c922:	1841      	adds	r1, r0, r1
    c924:	6019      	str	r1, [r3, #0]
    c926:	605a      	str	r2, [r3, #4]
    c928:	e00e      	b.n	c948 <_free_r+0x84>
    c92a:	428c      	cmp	r4, r1
    c92c:	d902      	bls.n	c934 <_free_r+0x70>
    c92e:	230c      	movs	r3, #12
    c930:	6003      	str	r3, [r0, #0]
    c932:	e009      	b.n	c948 <_free_r+0x84>
    c934:	6808      	ldr	r0, [r1, #0]
    c936:	180c      	adds	r4, r1, r0
    c938:	42a2      	cmp	r2, r4
    c93a:	d103      	bne.n	c944 <_free_r+0x80>
    c93c:	6814      	ldr	r4, [r2, #0]
    c93e:	6852      	ldr	r2, [r2, #4]
    c940:	1820      	adds	r0, r4, r0
    c942:	6008      	str	r0, [r1, #0]
    c944:	604a      	str	r2, [r1, #4]
    c946:	6059      	str	r1, [r3, #4]
    c948:	bd30      	pop	{r4, r5, pc}
    c94a:	46c0      	nop			; (mov r8, r8)
    c94c:	200043e8 	.word	0x200043e8

0000c950 <_malloc_r>:
    c950:	2303      	movs	r3, #3
    c952:	b570      	push	{r4, r5, r6, lr}
    c954:	1ccd      	adds	r5, r1, #3
    c956:	439d      	bics	r5, r3
    c958:	3508      	adds	r5, #8
    c95a:	0006      	movs	r6, r0
    c95c:	2d0c      	cmp	r5, #12
    c95e:	d201      	bcs.n	c964 <_malloc_r+0x14>
    c960:	250c      	movs	r5, #12
    c962:	e005      	b.n	c970 <_malloc_r+0x20>
    c964:	2d00      	cmp	r5, #0
    c966:	da03      	bge.n	c970 <_malloc_r+0x20>
    c968:	230c      	movs	r3, #12
    c96a:	2000      	movs	r0, #0
    c96c:	6033      	str	r3, [r6, #0]
    c96e:	e040      	b.n	c9f2 <_malloc_r+0xa2>
    c970:	42a9      	cmp	r1, r5
    c972:	d8f9      	bhi.n	c968 <_malloc_r+0x18>
    c974:	4b1f      	ldr	r3, [pc, #124]	; (c9f4 <_malloc_r+0xa4>)
    c976:	681c      	ldr	r4, [r3, #0]
    c978:	001a      	movs	r2, r3
    c97a:	0021      	movs	r1, r4
    c97c:	2900      	cmp	r1, #0
    c97e:	d013      	beq.n	c9a8 <_malloc_r+0x58>
    c980:	680b      	ldr	r3, [r1, #0]
    c982:	1b5b      	subs	r3, r3, r5
    c984:	d40d      	bmi.n	c9a2 <_malloc_r+0x52>
    c986:	2b0b      	cmp	r3, #11
    c988:	d902      	bls.n	c990 <_malloc_r+0x40>
    c98a:	600b      	str	r3, [r1, #0]
    c98c:	18cc      	adds	r4, r1, r3
    c98e:	e01e      	b.n	c9ce <_malloc_r+0x7e>
    c990:	428c      	cmp	r4, r1
    c992:	d102      	bne.n	c99a <_malloc_r+0x4a>
    c994:	6863      	ldr	r3, [r4, #4]
    c996:	6013      	str	r3, [r2, #0]
    c998:	e01a      	b.n	c9d0 <_malloc_r+0x80>
    c99a:	684b      	ldr	r3, [r1, #4]
    c99c:	6063      	str	r3, [r4, #4]
    c99e:	000c      	movs	r4, r1
    c9a0:	e016      	b.n	c9d0 <_malloc_r+0x80>
    c9a2:	000c      	movs	r4, r1
    c9a4:	6849      	ldr	r1, [r1, #4]
    c9a6:	e7e9      	b.n	c97c <_malloc_r+0x2c>
    c9a8:	4c13      	ldr	r4, [pc, #76]	; (c9f8 <_malloc_r+0xa8>)
    c9aa:	6823      	ldr	r3, [r4, #0]
    c9ac:	2b00      	cmp	r3, #0
    c9ae:	d103      	bne.n	c9b8 <_malloc_r+0x68>
    c9b0:	0030      	movs	r0, r6
    c9b2:	f000 f9df 	bl	cd74 <_sbrk_r>
    c9b6:	6020      	str	r0, [r4, #0]
    c9b8:	0029      	movs	r1, r5
    c9ba:	0030      	movs	r0, r6
    c9bc:	f000 f9da 	bl	cd74 <_sbrk_r>
    c9c0:	1c43      	adds	r3, r0, #1
    c9c2:	d0d1      	beq.n	c968 <_malloc_r+0x18>
    c9c4:	2303      	movs	r3, #3
    c9c6:	1cc4      	adds	r4, r0, #3
    c9c8:	439c      	bics	r4, r3
    c9ca:	42a0      	cmp	r0, r4
    c9cc:	d10a      	bne.n	c9e4 <_malloc_r+0x94>
    c9ce:	6025      	str	r5, [r4, #0]
    c9d0:	0020      	movs	r0, r4
    c9d2:	2207      	movs	r2, #7
    c9d4:	300b      	adds	r0, #11
    c9d6:	1d23      	adds	r3, r4, #4
    c9d8:	4390      	bics	r0, r2
    c9da:	1ac3      	subs	r3, r0, r3
    c9dc:	d009      	beq.n	c9f2 <_malloc_r+0xa2>
    c9de:	425a      	negs	r2, r3
    c9e0:	50e2      	str	r2, [r4, r3]
    c9e2:	e006      	b.n	c9f2 <_malloc_r+0xa2>
    c9e4:	1a21      	subs	r1, r4, r0
    c9e6:	0030      	movs	r0, r6
    c9e8:	f000 f9c4 	bl	cd74 <_sbrk_r>
    c9ec:	1c43      	adds	r3, r0, #1
    c9ee:	d1ee      	bne.n	c9ce <_malloc_r+0x7e>
    c9f0:	e7ba      	b.n	c968 <_malloc_r+0x18>
    c9f2:	bd70      	pop	{r4, r5, r6, pc}
    c9f4:	200043e8 	.word	0x200043e8
    c9f8:	200043e4 	.word	0x200043e4

0000c9fc <_realloc_r>:
    c9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9fe:	0006      	movs	r6, r0
    ca00:	000c      	movs	r4, r1
    ca02:	0015      	movs	r5, r2
    ca04:	2900      	cmp	r1, #0
    ca06:	d104      	bne.n	ca12 <_realloc_r+0x16>
    ca08:	0011      	movs	r1, r2
    ca0a:	f7ff ffa1 	bl	c950 <_malloc_r>
    ca0e:	0004      	movs	r4, r0
    ca10:	e018      	b.n	ca44 <_realloc_r+0x48>
    ca12:	2a00      	cmp	r2, #0
    ca14:	d103      	bne.n	ca1e <_realloc_r+0x22>
    ca16:	f7ff ff55 	bl	c8c4 <_free_r>
    ca1a:	002c      	movs	r4, r5
    ca1c:	e012      	b.n	ca44 <_realloc_r+0x48>
    ca1e:	f000 faaf 	bl	cf80 <_malloc_usable_size_r>
    ca22:	4285      	cmp	r5, r0
    ca24:	d90e      	bls.n	ca44 <_realloc_r+0x48>
    ca26:	0029      	movs	r1, r5
    ca28:	0030      	movs	r0, r6
    ca2a:	f7ff ff91 	bl	c950 <_malloc_r>
    ca2e:	1e07      	subs	r7, r0, #0
    ca30:	d007      	beq.n	ca42 <_realloc_r+0x46>
    ca32:	0021      	movs	r1, r4
    ca34:	002a      	movs	r2, r5
    ca36:	f7ff f867 	bl	bb08 <memcpy>
    ca3a:	0021      	movs	r1, r4
    ca3c:	0030      	movs	r0, r6
    ca3e:	f7ff ff41 	bl	c8c4 <_free_r>
    ca42:	003c      	movs	r4, r7
    ca44:	0020      	movs	r0, r4
    ca46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ca48 <__ssputs_r>:
    ca48:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca4a:	688e      	ldr	r6, [r1, #8]
    ca4c:	b085      	sub	sp, #20
    ca4e:	0007      	movs	r7, r0
    ca50:	000c      	movs	r4, r1
    ca52:	9203      	str	r2, [sp, #12]
    ca54:	9301      	str	r3, [sp, #4]
    ca56:	429e      	cmp	r6, r3
    ca58:	d843      	bhi.n	cae2 <__ssputs_r+0x9a>
    ca5a:	2390      	movs	r3, #144	; 0x90
    ca5c:	898a      	ldrh	r2, [r1, #12]
    ca5e:	00db      	lsls	r3, r3, #3
    ca60:	421a      	tst	r2, r3
    ca62:	d03e      	beq.n	cae2 <__ssputs_r+0x9a>
    ca64:	2503      	movs	r5, #3
    ca66:	6909      	ldr	r1, [r1, #16]
    ca68:	6823      	ldr	r3, [r4, #0]
    ca6a:	9801      	ldr	r0, [sp, #4]
    ca6c:	1a5b      	subs	r3, r3, r1
    ca6e:	9302      	str	r3, [sp, #8]
    ca70:	6963      	ldr	r3, [r4, #20]
    ca72:	435d      	muls	r5, r3
    ca74:	0feb      	lsrs	r3, r5, #31
    ca76:	195d      	adds	r5, r3, r5
    ca78:	9b02      	ldr	r3, [sp, #8]
    ca7a:	106d      	asrs	r5, r5, #1
    ca7c:	3301      	adds	r3, #1
    ca7e:	181b      	adds	r3, r3, r0
    ca80:	42ab      	cmp	r3, r5
    ca82:	d900      	bls.n	ca86 <__ssputs_r+0x3e>
    ca84:	001d      	movs	r5, r3
    ca86:	0553      	lsls	r3, r2, #21
    ca88:	d510      	bpl.n	caac <__ssputs_r+0x64>
    ca8a:	0029      	movs	r1, r5
    ca8c:	0038      	movs	r0, r7
    ca8e:	f7ff ff5f 	bl	c950 <_malloc_r>
    ca92:	1e06      	subs	r6, r0, #0
    ca94:	d014      	beq.n	cac0 <__ssputs_r+0x78>
    ca96:	9a02      	ldr	r2, [sp, #8]
    ca98:	6921      	ldr	r1, [r4, #16]
    ca9a:	f7ff f835 	bl	bb08 <memcpy>
    ca9e:	89a2      	ldrh	r2, [r4, #12]
    caa0:	4b19      	ldr	r3, [pc, #100]	; (cb08 <__ssputs_r+0xc0>)
    caa2:	4013      	ands	r3, r2
    caa4:	2280      	movs	r2, #128	; 0x80
    caa6:	4313      	orrs	r3, r2
    caa8:	81a3      	strh	r3, [r4, #12]
    caaa:	e012      	b.n	cad2 <__ssputs_r+0x8a>
    caac:	002a      	movs	r2, r5
    caae:	0038      	movs	r0, r7
    cab0:	f7ff ffa4 	bl	c9fc <_realloc_r>
    cab4:	1e06      	subs	r6, r0, #0
    cab6:	d10c      	bne.n	cad2 <__ssputs_r+0x8a>
    cab8:	6921      	ldr	r1, [r4, #16]
    caba:	0038      	movs	r0, r7
    cabc:	f7ff ff02 	bl	c8c4 <_free_r>
    cac0:	230c      	movs	r3, #12
    cac2:	2240      	movs	r2, #64	; 0x40
    cac4:	2001      	movs	r0, #1
    cac6:	603b      	str	r3, [r7, #0]
    cac8:	89a3      	ldrh	r3, [r4, #12]
    caca:	4240      	negs	r0, r0
    cacc:	4313      	orrs	r3, r2
    cace:	81a3      	strh	r3, [r4, #12]
    cad0:	e017      	b.n	cb02 <__ssputs_r+0xba>
    cad2:	9b02      	ldr	r3, [sp, #8]
    cad4:	6126      	str	r6, [r4, #16]
    cad6:	18f6      	adds	r6, r6, r3
    cad8:	6026      	str	r6, [r4, #0]
    cada:	6165      	str	r5, [r4, #20]
    cadc:	9e01      	ldr	r6, [sp, #4]
    cade:	1aed      	subs	r5, r5, r3
    cae0:	60a5      	str	r5, [r4, #8]
    cae2:	9b01      	ldr	r3, [sp, #4]
    cae4:	42b3      	cmp	r3, r6
    cae6:	d200      	bcs.n	caea <__ssputs_r+0xa2>
    cae8:	001e      	movs	r6, r3
    caea:	0032      	movs	r2, r6
    caec:	9903      	ldr	r1, [sp, #12]
    caee:	6820      	ldr	r0, [r4, #0]
    caf0:	f7ff fed3 	bl	c89a <memmove>
    caf4:	2000      	movs	r0, #0
    caf6:	68a3      	ldr	r3, [r4, #8]
    caf8:	1b9b      	subs	r3, r3, r6
    cafa:	60a3      	str	r3, [r4, #8]
    cafc:	6823      	ldr	r3, [r4, #0]
    cafe:	199e      	adds	r6, r3, r6
    cb00:	6026      	str	r6, [r4, #0]
    cb02:	b005      	add	sp, #20
    cb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb06:	46c0      	nop			; (mov r8, r8)
    cb08:	fffffb7f 	.word	0xfffffb7f

0000cb0c <_svfiprintf_r>:
    cb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb0e:	b09f      	sub	sp, #124	; 0x7c
    cb10:	9002      	str	r0, [sp, #8]
    cb12:	9305      	str	r3, [sp, #20]
    cb14:	898b      	ldrh	r3, [r1, #12]
    cb16:	000f      	movs	r7, r1
    cb18:	0016      	movs	r6, r2
    cb1a:	061b      	lsls	r3, r3, #24
    cb1c:	d510      	bpl.n	cb40 <_svfiprintf_r+0x34>
    cb1e:	690b      	ldr	r3, [r1, #16]
    cb20:	2b00      	cmp	r3, #0
    cb22:	d10d      	bne.n	cb40 <_svfiprintf_r+0x34>
    cb24:	2140      	movs	r1, #64	; 0x40
    cb26:	f7ff ff13 	bl	c950 <_malloc_r>
    cb2a:	6038      	str	r0, [r7, #0]
    cb2c:	6138      	str	r0, [r7, #16]
    cb2e:	2800      	cmp	r0, #0
    cb30:	d104      	bne.n	cb3c <_svfiprintf_r+0x30>
    cb32:	230c      	movs	r3, #12
    cb34:	9a02      	ldr	r2, [sp, #8]
    cb36:	3801      	subs	r0, #1
    cb38:	6013      	str	r3, [r2, #0]
    cb3a:	e0d8      	b.n	ccee <_svfiprintf_r+0x1e2>
    cb3c:	2340      	movs	r3, #64	; 0x40
    cb3e:	617b      	str	r3, [r7, #20]
    cb40:	2300      	movs	r3, #0
    cb42:	ad06      	add	r5, sp, #24
    cb44:	616b      	str	r3, [r5, #20]
    cb46:	3320      	adds	r3, #32
    cb48:	766b      	strb	r3, [r5, #25]
    cb4a:	3310      	adds	r3, #16
    cb4c:	76ab      	strb	r3, [r5, #26]
    cb4e:	0034      	movs	r4, r6
    cb50:	7823      	ldrb	r3, [r4, #0]
    cb52:	2b00      	cmp	r3, #0
    cb54:	d103      	bne.n	cb5e <_svfiprintf_r+0x52>
    cb56:	1ba3      	subs	r3, r4, r6
    cb58:	9304      	str	r3, [sp, #16]
    cb5a:	d012      	beq.n	cb82 <_svfiprintf_r+0x76>
    cb5c:	e003      	b.n	cb66 <_svfiprintf_r+0x5a>
    cb5e:	2b25      	cmp	r3, #37	; 0x25
    cb60:	d0f9      	beq.n	cb56 <_svfiprintf_r+0x4a>
    cb62:	3401      	adds	r4, #1
    cb64:	e7f4      	b.n	cb50 <_svfiprintf_r+0x44>
    cb66:	1ba3      	subs	r3, r4, r6
    cb68:	0032      	movs	r2, r6
    cb6a:	0039      	movs	r1, r7
    cb6c:	9802      	ldr	r0, [sp, #8]
    cb6e:	f7ff ff6b 	bl	ca48 <__ssputs_r>
    cb72:	1c43      	adds	r3, r0, #1
    cb74:	d100      	bne.n	cb78 <_svfiprintf_r+0x6c>
    cb76:	e0b4      	b.n	cce2 <_svfiprintf_r+0x1d6>
    cb78:	696a      	ldr	r2, [r5, #20]
    cb7a:	9b04      	ldr	r3, [sp, #16]
    cb7c:	4694      	mov	ip, r2
    cb7e:	4463      	add	r3, ip
    cb80:	616b      	str	r3, [r5, #20]
    cb82:	7823      	ldrb	r3, [r4, #0]
    cb84:	2b00      	cmp	r3, #0
    cb86:	d100      	bne.n	cb8a <_svfiprintf_r+0x7e>
    cb88:	e0ab      	b.n	cce2 <_svfiprintf_r+0x1d6>
    cb8a:	2201      	movs	r2, #1
    cb8c:	2300      	movs	r3, #0
    cb8e:	4252      	negs	r2, r2
    cb90:	606a      	str	r2, [r5, #4]
    cb92:	a902      	add	r1, sp, #8
    cb94:	3254      	adds	r2, #84	; 0x54
    cb96:	1852      	adds	r2, r2, r1
    cb98:	3401      	adds	r4, #1
    cb9a:	602b      	str	r3, [r5, #0]
    cb9c:	60eb      	str	r3, [r5, #12]
    cb9e:	60ab      	str	r3, [r5, #8]
    cba0:	7013      	strb	r3, [r2, #0]
    cba2:	65ab      	str	r3, [r5, #88]	; 0x58
    cba4:	4e53      	ldr	r6, [pc, #332]	; (ccf4 <_svfiprintf_r+0x1e8>)
    cba6:	7821      	ldrb	r1, [r4, #0]
    cba8:	2205      	movs	r2, #5
    cbaa:	0030      	movs	r0, r6
    cbac:	f7ff fe6a 	bl	c884 <memchr>
    cbb0:	2800      	cmp	r0, #0
    cbb2:	d007      	beq.n	cbc4 <_svfiprintf_r+0xb8>
    cbb4:	2301      	movs	r3, #1
    cbb6:	1b80      	subs	r0, r0, r6
    cbb8:	4083      	lsls	r3, r0
    cbba:	682a      	ldr	r2, [r5, #0]
    cbbc:	3401      	adds	r4, #1
    cbbe:	4313      	orrs	r3, r2
    cbc0:	602b      	str	r3, [r5, #0]
    cbc2:	e7ef      	b.n	cba4 <_svfiprintf_r+0x98>
    cbc4:	682b      	ldr	r3, [r5, #0]
    cbc6:	06da      	lsls	r2, r3, #27
    cbc8:	d504      	bpl.n	cbd4 <_svfiprintf_r+0xc8>
    cbca:	2253      	movs	r2, #83	; 0x53
    cbcc:	2120      	movs	r1, #32
    cbce:	a802      	add	r0, sp, #8
    cbd0:	1812      	adds	r2, r2, r0
    cbd2:	7011      	strb	r1, [r2, #0]
    cbd4:	071a      	lsls	r2, r3, #28
    cbd6:	d504      	bpl.n	cbe2 <_svfiprintf_r+0xd6>
    cbd8:	2253      	movs	r2, #83	; 0x53
    cbda:	212b      	movs	r1, #43	; 0x2b
    cbdc:	a802      	add	r0, sp, #8
    cbde:	1812      	adds	r2, r2, r0
    cbe0:	7011      	strb	r1, [r2, #0]
    cbe2:	7822      	ldrb	r2, [r4, #0]
    cbe4:	2a2a      	cmp	r2, #42	; 0x2a
    cbe6:	d003      	beq.n	cbf0 <_svfiprintf_r+0xe4>
    cbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cbea:	2000      	movs	r0, #0
    cbec:	210a      	movs	r1, #10
    cbee:	e00e      	b.n	cc0e <_svfiprintf_r+0x102>
    cbf0:	9a05      	ldr	r2, [sp, #20]
    cbf2:	1d11      	adds	r1, r2, #4
    cbf4:	6812      	ldr	r2, [r2, #0]
    cbf6:	9105      	str	r1, [sp, #20]
    cbf8:	2a00      	cmp	r2, #0
    cbfa:	db01      	blt.n	cc00 <_svfiprintf_r+0xf4>
    cbfc:	9209      	str	r2, [sp, #36]	; 0x24
    cbfe:	e004      	b.n	cc0a <_svfiprintf_r+0xfe>
    cc00:	4252      	negs	r2, r2
    cc02:	60ea      	str	r2, [r5, #12]
    cc04:	2202      	movs	r2, #2
    cc06:	4313      	orrs	r3, r2
    cc08:	602b      	str	r3, [r5, #0]
    cc0a:	3401      	adds	r4, #1
    cc0c:	e00b      	b.n	cc26 <_svfiprintf_r+0x11a>
    cc0e:	7822      	ldrb	r2, [r4, #0]
    cc10:	3a30      	subs	r2, #48	; 0x30
    cc12:	2a09      	cmp	r2, #9
    cc14:	d804      	bhi.n	cc20 <_svfiprintf_r+0x114>
    cc16:	434b      	muls	r3, r1
    cc18:	3401      	adds	r4, #1
    cc1a:	189b      	adds	r3, r3, r2
    cc1c:	2001      	movs	r0, #1
    cc1e:	e7f6      	b.n	cc0e <_svfiprintf_r+0x102>
    cc20:	2800      	cmp	r0, #0
    cc22:	d000      	beq.n	cc26 <_svfiprintf_r+0x11a>
    cc24:	9309      	str	r3, [sp, #36]	; 0x24
    cc26:	7823      	ldrb	r3, [r4, #0]
    cc28:	2b2e      	cmp	r3, #46	; 0x2e
    cc2a:	d11e      	bne.n	cc6a <_svfiprintf_r+0x15e>
    cc2c:	7863      	ldrb	r3, [r4, #1]
    cc2e:	2b2a      	cmp	r3, #42	; 0x2a
    cc30:	d10a      	bne.n	cc48 <_svfiprintf_r+0x13c>
    cc32:	9b05      	ldr	r3, [sp, #20]
    cc34:	3402      	adds	r4, #2
    cc36:	1d1a      	adds	r2, r3, #4
    cc38:	681b      	ldr	r3, [r3, #0]
    cc3a:	9205      	str	r2, [sp, #20]
    cc3c:	2b00      	cmp	r3, #0
    cc3e:	da01      	bge.n	cc44 <_svfiprintf_r+0x138>
    cc40:	2301      	movs	r3, #1
    cc42:	425b      	negs	r3, r3
    cc44:	9307      	str	r3, [sp, #28]
    cc46:	e010      	b.n	cc6a <_svfiprintf_r+0x15e>
    cc48:	2300      	movs	r3, #0
    cc4a:	200a      	movs	r0, #10
    cc4c:	001a      	movs	r2, r3
    cc4e:	3401      	adds	r4, #1
    cc50:	606b      	str	r3, [r5, #4]
    cc52:	7821      	ldrb	r1, [r4, #0]
    cc54:	3930      	subs	r1, #48	; 0x30
    cc56:	2909      	cmp	r1, #9
    cc58:	d804      	bhi.n	cc64 <_svfiprintf_r+0x158>
    cc5a:	4342      	muls	r2, r0
    cc5c:	3401      	adds	r4, #1
    cc5e:	1852      	adds	r2, r2, r1
    cc60:	2301      	movs	r3, #1
    cc62:	e7f6      	b.n	cc52 <_svfiprintf_r+0x146>
    cc64:	2b00      	cmp	r3, #0
    cc66:	d000      	beq.n	cc6a <_svfiprintf_r+0x15e>
    cc68:	9207      	str	r2, [sp, #28]
    cc6a:	4e23      	ldr	r6, [pc, #140]	; (ccf8 <_svfiprintf_r+0x1ec>)
    cc6c:	7821      	ldrb	r1, [r4, #0]
    cc6e:	2203      	movs	r2, #3
    cc70:	0030      	movs	r0, r6
    cc72:	f7ff fe07 	bl	c884 <memchr>
    cc76:	2800      	cmp	r0, #0
    cc78:	d006      	beq.n	cc88 <_svfiprintf_r+0x17c>
    cc7a:	2340      	movs	r3, #64	; 0x40
    cc7c:	1b80      	subs	r0, r0, r6
    cc7e:	4083      	lsls	r3, r0
    cc80:	682a      	ldr	r2, [r5, #0]
    cc82:	3401      	adds	r4, #1
    cc84:	4313      	orrs	r3, r2
    cc86:	602b      	str	r3, [r5, #0]
    cc88:	7821      	ldrb	r1, [r4, #0]
    cc8a:	2206      	movs	r2, #6
    cc8c:	481b      	ldr	r0, [pc, #108]	; (ccfc <_svfiprintf_r+0x1f0>)
    cc8e:	1c66      	adds	r6, r4, #1
    cc90:	7629      	strb	r1, [r5, #24]
    cc92:	f7ff fdf7 	bl	c884 <memchr>
    cc96:	2800      	cmp	r0, #0
    cc98:	d012      	beq.n	ccc0 <_svfiprintf_r+0x1b4>
    cc9a:	4b19      	ldr	r3, [pc, #100]	; (cd00 <_svfiprintf_r+0x1f4>)
    cc9c:	2b00      	cmp	r3, #0
    cc9e:	d106      	bne.n	ccae <_svfiprintf_r+0x1a2>
    cca0:	2207      	movs	r2, #7
    cca2:	9b05      	ldr	r3, [sp, #20]
    cca4:	3307      	adds	r3, #7
    cca6:	4393      	bics	r3, r2
    cca8:	3308      	adds	r3, #8
    ccaa:	9305      	str	r3, [sp, #20]
    ccac:	e014      	b.n	ccd8 <_svfiprintf_r+0x1cc>
    ccae:	ab05      	add	r3, sp, #20
    ccb0:	9300      	str	r3, [sp, #0]
    ccb2:	003a      	movs	r2, r7
    ccb4:	4b13      	ldr	r3, [pc, #76]	; (cd04 <_svfiprintf_r+0x1f8>)
    ccb6:	0029      	movs	r1, r5
    ccb8:	9802      	ldr	r0, [sp, #8]
    ccba:	e000      	b.n	ccbe <_svfiprintf_r+0x1b2>
    ccbc:	bf00      	nop
    ccbe:	e007      	b.n	ccd0 <_svfiprintf_r+0x1c4>
    ccc0:	ab05      	add	r3, sp, #20
    ccc2:	9300      	str	r3, [sp, #0]
    ccc4:	003a      	movs	r2, r7
    ccc6:	4b0f      	ldr	r3, [pc, #60]	; (cd04 <_svfiprintf_r+0x1f8>)
    ccc8:	0029      	movs	r1, r5
    ccca:	9802      	ldr	r0, [sp, #8]
    cccc:	f7ff f8de 	bl	be8c <_printf_i>
    ccd0:	9003      	str	r0, [sp, #12]
    ccd2:	9b03      	ldr	r3, [sp, #12]
    ccd4:	3301      	adds	r3, #1
    ccd6:	d004      	beq.n	cce2 <_svfiprintf_r+0x1d6>
    ccd8:	696b      	ldr	r3, [r5, #20]
    ccda:	9a03      	ldr	r2, [sp, #12]
    ccdc:	189b      	adds	r3, r3, r2
    ccde:	616b      	str	r3, [r5, #20]
    cce0:	e735      	b.n	cb4e <_svfiprintf_r+0x42>
    cce2:	89bb      	ldrh	r3, [r7, #12]
    cce4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cce6:	065b      	lsls	r3, r3, #25
    cce8:	d501      	bpl.n	ccee <_svfiprintf_r+0x1e2>
    ccea:	2001      	movs	r0, #1
    ccec:	4240      	negs	r0, r0
    ccee:	b01f      	add	sp, #124	; 0x7c
    ccf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ccf2:	46c0      	nop			; (mov r8, r8)
    ccf4:	0000e3dc 	.word	0x0000e3dc
    ccf8:	0000e3e2 	.word	0x0000e3e2
    ccfc:	0000e3e6 	.word	0x0000e3e6
    cd00:	00000000 	.word	0x00000000
    cd04:	0000ca49 	.word	0x0000ca49

0000cd08 <_putc_r>:
    cd08:	b570      	push	{r4, r5, r6, lr}
    cd0a:	0006      	movs	r6, r0
    cd0c:	000d      	movs	r5, r1
    cd0e:	0014      	movs	r4, r2
    cd10:	2800      	cmp	r0, #0
    cd12:	d004      	beq.n	cd1e <_putc_r+0x16>
    cd14:	6983      	ldr	r3, [r0, #24]
    cd16:	2b00      	cmp	r3, #0
    cd18:	d101      	bne.n	cd1e <_putc_r+0x16>
    cd1a:	f7ff fcbb 	bl	c694 <__sinit>
    cd1e:	4b12      	ldr	r3, [pc, #72]	; (cd68 <_putc_r+0x60>)
    cd20:	429c      	cmp	r4, r3
    cd22:	d101      	bne.n	cd28 <_putc_r+0x20>
    cd24:	6874      	ldr	r4, [r6, #4]
    cd26:	e008      	b.n	cd3a <_putc_r+0x32>
    cd28:	4b10      	ldr	r3, [pc, #64]	; (cd6c <_putc_r+0x64>)
    cd2a:	429c      	cmp	r4, r3
    cd2c:	d101      	bne.n	cd32 <_putc_r+0x2a>
    cd2e:	68b4      	ldr	r4, [r6, #8]
    cd30:	e003      	b.n	cd3a <_putc_r+0x32>
    cd32:	4b0f      	ldr	r3, [pc, #60]	; (cd70 <_putc_r+0x68>)
    cd34:	429c      	cmp	r4, r3
    cd36:	d100      	bne.n	cd3a <_putc_r+0x32>
    cd38:	68f4      	ldr	r4, [r6, #12]
    cd3a:	68a3      	ldr	r3, [r4, #8]
    cd3c:	3b01      	subs	r3, #1
    cd3e:	60a3      	str	r3, [r4, #8]
    cd40:	2b00      	cmp	r3, #0
    cd42:	da05      	bge.n	cd50 <_putc_r+0x48>
    cd44:	69a2      	ldr	r2, [r4, #24]
    cd46:	4293      	cmp	r3, r2
    cd48:	db08      	blt.n	cd5c <_putc_r+0x54>
    cd4a:	b2eb      	uxtb	r3, r5
    cd4c:	2b0a      	cmp	r3, #10
    cd4e:	d005      	beq.n	cd5c <_putc_r+0x54>
    cd50:	6823      	ldr	r3, [r4, #0]
    cd52:	b2e8      	uxtb	r0, r5
    cd54:	1c5a      	adds	r2, r3, #1
    cd56:	6022      	str	r2, [r4, #0]
    cd58:	701d      	strb	r5, [r3, #0]
    cd5a:	e004      	b.n	cd66 <_putc_r+0x5e>
    cd5c:	0022      	movs	r2, r4
    cd5e:	0029      	movs	r1, r5
    cd60:	0030      	movs	r0, r6
    cd62:	f7ff facd 	bl	c300 <__swbuf_r>
    cd66:	bd70      	pop	{r4, r5, r6, pc}
    cd68:	0000e410 	.word	0x0000e410
    cd6c:	0000e430 	.word	0x0000e430
    cd70:	0000e450 	.word	0x0000e450

0000cd74 <_sbrk_r>:
    cd74:	2300      	movs	r3, #0
    cd76:	b570      	push	{r4, r5, r6, lr}
    cd78:	4c06      	ldr	r4, [pc, #24]	; (cd94 <_sbrk_r+0x20>)
    cd7a:	0005      	movs	r5, r0
    cd7c:	0008      	movs	r0, r1
    cd7e:	6023      	str	r3, [r4, #0]
    cd80:	f7f9 ffce 	bl	6d20 <_sbrk>
    cd84:	1c43      	adds	r3, r0, #1
    cd86:	d103      	bne.n	cd90 <_sbrk_r+0x1c>
    cd88:	6823      	ldr	r3, [r4, #0]
    cd8a:	2b00      	cmp	r3, #0
    cd8c:	d000      	beq.n	cd90 <_sbrk_r+0x1c>
    cd8e:	602b      	str	r3, [r5, #0]
    cd90:	bd70      	pop	{r4, r5, r6, pc}
    cd92:	46c0      	nop			; (mov r8, r8)
    cd94:	20004618 	.word	0x20004618

0000cd98 <_raise_r>:
    cd98:	b570      	push	{r4, r5, r6, lr}
    cd9a:	0004      	movs	r4, r0
    cd9c:	1e0d      	subs	r5, r1, #0
    cd9e:	2d1f      	cmp	r5, #31
    cda0:	d904      	bls.n	cdac <_raise_r+0x14>
    cda2:	2316      	movs	r3, #22
    cda4:	6003      	str	r3, [r0, #0]
    cda6:	2001      	movs	r0, #1
    cda8:	4240      	negs	r0, r0
    cdaa:	e01e      	b.n	cdea <_raise_r+0x52>
    cdac:	6c42      	ldr	r2, [r0, #68]	; 0x44
    cdae:	2a00      	cmp	r2, #0
    cdb0:	d004      	beq.n	cdbc <_raise_r+0x24>
    cdb2:	008b      	lsls	r3, r1, #2
    cdb4:	18d2      	adds	r2, r2, r3
    cdb6:	6813      	ldr	r3, [r2, #0]
    cdb8:	2b00      	cmp	r3, #0
    cdba:	d108      	bne.n	cdce <_raise_r+0x36>
    cdbc:	0020      	movs	r0, r4
    cdbe:	f000 f831 	bl	ce24 <_getpid_r>
    cdc2:	002a      	movs	r2, r5
    cdc4:	0001      	movs	r1, r0
    cdc6:	0020      	movs	r0, r4
    cdc8:	f000 f81a 	bl	ce00 <_kill_r>
    cdcc:	e00d      	b.n	cdea <_raise_r+0x52>
    cdce:	2000      	movs	r0, #0
    cdd0:	2b01      	cmp	r3, #1
    cdd2:	d00a      	beq.n	cdea <_raise_r+0x52>
    cdd4:	1c59      	adds	r1, r3, #1
    cdd6:	d103      	bne.n	cde0 <_raise_r+0x48>
    cdd8:	3317      	adds	r3, #23
    cdda:	6023      	str	r3, [r4, #0]
    cddc:	3001      	adds	r0, #1
    cdde:	e004      	b.n	cdea <_raise_r+0x52>
    cde0:	2400      	movs	r4, #0
    cde2:	0028      	movs	r0, r5
    cde4:	6014      	str	r4, [r2, #0]
    cde6:	4798      	blx	r3
    cde8:	0020      	movs	r0, r4
    cdea:	bd70      	pop	{r4, r5, r6, pc}

0000cdec <raise>:
    cdec:	b510      	push	{r4, lr}
    cdee:	4b03      	ldr	r3, [pc, #12]	; (cdfc <raise+0x10>)
    cdf0:	0001      	movs	r1, r0
    cdf2:	6818      	ldr	r0, [r3, #0]
    cdf4:	f7ff ffd0 	bl	cd98 <_raise_r>
    cdf8:	bd10      	pop	{r4, pc}
    cdfa:	46c0      	nop			; (mov r8, r8)
    cdfc:	2000008c 	.word	0x2000008c

0000ce00 <_kill_r>:
    ce00:	2300      	movs	r3, #0
    ce02:	b570      	push	{r4, r5, r6, lr}
    ce04:	4c06      	ldr	r4, [pc, #24]	; (ce20 <_kill_r+0x20>)
    ce06:	0005      	movs	r5, r0
    ce08:	0008      	movs	r0, r1
    ce0a:	0011      	movs	r1, r2
    ce0c:	6023      	str	r3, [r4, #0]
    ce0e:	f7f9 ffdd 	bl	6dcc <_kill>
    ce12:	1c43      	adds	r3, r0, #1
    ce14:	d103      	bne.n	ce1e <_kill_r+0x1e>
    ce16:	6823      	ldr	r3, [r4, #0]
    ce18:	2b00      	cmp	r3, #0
    ce1a:	d000      	beq.n	ce1e <_kill_r+0x1e>
    ce1c:	602b      	str	r3, [r5, #0]
    ce1e:	bd70      	pop	{r4, r5, r6, pc}
    ce20:	20004618 	.word	0x20004618

0000ce24 <_getpid_r>:
    ce24:	b510      	push	{r4, lr}
    ce26:	f7f9 ffdb 	bl	6de0 <_getpid>
    ce2a:	bd10      	pop	{r4, pc}

0000ce2c <__sread>:
    ce2c:	b570      	push	{r4, r5, r6, lr}
    ce2e:	000c      	movs	r4, r1
    ce30:	250e      	movs	r5, #14
    ce32:	5f49      	ldrsh	r1, [r1, r5]
    ce34:	f000 f8b0 	bl	cf98 <_read_r>
    ce38:	2800      	cmp	r0, #0
    ce3a:	db03      	blt.n	ce44 <__sread+0x18>
    ce3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ce3e:	181b      	adds	r3, r3, r0
    ce40:	6563      	str	r3, [r4, #84]	; 0x54
    ce42:	e003      	b.n	ce4c <__sread+0x20>
    ce44:	89a2      	ldrh	r2, [r4, #12]
    ce46:	4b02      	ldr	r3, [pc, #8]	; (ce50 <__sread+0x24>)
    ce48:	4013      	ands	r3, r2
    ce4a:	81a3      	strh	r3, [r4, #12]
    ce4c:	bd70      	pop	{r4, r5, r6, pc}
    ce4e:	46c0      	nop			; (mov r8, r8)
    ce50:	ffffefff 	.word	0xffffefff

0000ce54 <__swrite>:
    ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ce56:	001f      	movs	r7, r3
    ce58:	898b      	ldrh	r3, [r1, #12]
    ce5a:	0005      	movs	r5, r0
    ce5c:	000c      	movs	r4, r1
    ce5e:	0016      	movs	r6, r2
    ce60:	05db      	lsls	r3, r3, #23
    ce62:	d505      	bpl.n	ce70 <__swrite+0x1c>
    ce64:	230e      	movs	r3, #14
    ce66:	5ec9      	ldrsh	r1, [r1, r3]
    ce68:	2200      	movs	r2, #0
    ce6a:	2302      	movs	r3, #2
    ce6c:	f000 f874 	bl	cf58 <_lseek_r>
    ce70:	89a2      	ldrh	r2, [r4, #12]
    ce72:	4b05      	ldr	r3, [pc, #20]	; (ce88 <__swrite+0x34>)
    ce74:	0028      	movs	r0, r5
    ce76:	4013      	ands	r3, r2
    ce78:	81a3      	strh	r3, [r4, #12]
    ce7a:	0032      	movs	r2, r6
    ce7c:	230e      	movs	r3, #14
    ce7e:	5ee1      	ldrsh	r1, [r4, r3]
    ce80:	003b      	movs	r3, r7
    ce82:	f000 f81f 	bl	cec4 <_write_r>
    ce86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ce88:	ffffefff 	.word	0xffffefff

0000ce8c <__sseek>:
    ce8c:	b570      	push	{r4, r5, r6, lr}
    ce8e:	000c      	movs	r4, r1
    ce90:	250e      	movs	r5, #14
    ce92:	5f49      	ldrsh	r1, [r1, r5]
    ce94:	f000 f860 	bl	cf58 <_lseek_r>
    ce98:	89a3      	ldrh	r3, [r4, #12]
    ce9a:	1c42      	adds	r2, r0, #1
    ce9c:	d103      	bne.n	cea6 <__sseek+0x1a>
    ce9e:	4a05      	ldr	r2, [pc, #20]	; (ceb4 <__sseek+0x28>)
    cea0:	4013      	ands	r3, r2
    cea2:	81a3      	strh	r3, [r4, #12]
    cea4:	e004      	b.n	ceb0 <__sseek+0x24>
    cea6:	2280      	movs	r2, #128	; 0x80
    cea8:	0152      	lsls	r2, r2, #5
    ceaa:	4313      	orrs	r3, r2
    ceac:	81a3      	strh	r3, [r4, #12]
    ceae:	6560      	str	r0, [r4, #84]	; 0x54
    ceb0:	bd70      	pop	{r4, r5, r6, pc}
    ceb2:	46c0      	nop			; (mov r8, r8)
    ceb4:	ffffefff 	.word	0xffffefff

0000ceb8 <__sclose>:
    ceb8:	b510      	push	{r4, lr}
    ceba:	230e      	movs	r3, #14
    cebc:	5ec9      	ldrsh	r1, [r1, r3]
    cebe:	f000 f815 	bl	ceec <_close_r>
    cec2:	bd10      	pop	{r4, pc}

0000cec4 <_write_r>:
    cec4:	b570      	push	{r4, r5, r6, lr}
    cec6:	0005      	movs	r5, r0
    cec8:	0008      	movs	r0, r1
    ceca:	0011      	movs	r1, r2
    cecc:	2200      	movs	r2, #0
    cece:	4c06      	ldr	r4, [pc, #24]	; (cee8 <_write_r+0x24>)
    ced0:	6022      	str	r2, [r4, #0]
    ced2:	001a      	movs	r2, r3
    ced4:	f7f9 feee 	bl	6cb4 <_write>
    ced8:	1c43      	adds	r3, r0, #1
    ceda:	d103      	bne.n	cee4 <_write_r+0x20>
    cedc:	6823      	ldr	r3, [r4, #0]
    cede:	2b00      	cmp	r3, #0
    cee0:	d000      	beq.n	cee4 <_write_r+0x20>
    cee2:	602b      	str	r3, [r5, #0]
    cee4:	bd70      	pop	{r4, r5, r6, pc}
    cee6:	46c0      	nop			; (mov r8, r8)
    cee8:	20004618 	.word	0x20004618

0000ceec <_close_r>:
    ceec:	2300      	movs	r3, #0
    ceee:	b570      	push	{r4, r5, r6, lr}
    cef0:	4c06      	ldr	r4, [pc, #24]	; (cf0c <_close_r+0x20>)
    cef2:	0005      	movs	r5, r0
    cef4:	0008      	movs	r0, r1
    cef6:	6023      	str	r3, [r4, #0]
    cef8:	f7f9 ff30 	bl	6d5c <_close>
    cefc:	1c43      	adds	r3, r0, #1
    cefe:	d103      	bne.n	cf08 <_close_r+0x1c>
    cf00:	6823      	ldr	r3, [r4, #0]
    cf02:	2b00      	cmp	r3, #0
    cf04:	d000      	beq.n	cf08 <_close_r+0x1c>
    cf06:	602b      	str	r3, [r5, #0]
    cf08:	bd70      	pop	{r4, r5, r6, pc}
    cf0a:	46c0      	nop			; (mov r8, r8)
    cf0c:	20004618 	.word	0x20004618

0000cf10 <_fstat_r>:
    cf10:	2300      	movs	r3, #0
    cf12:	b570      	push	{r4, r5, r6, lr}
    cf14:	4c06      	ldr	r4, [pc, #24]	; (cf30 <_fstat_r+0x20>)
    cf16:	0005      	movs	r5, r0
    cf18:	0008      	movs	r0, r1
    cf1a:	0011      	movs	r1, r2
    cf1c:	6023      	str	r3, [r4, #0]
    cf1e:	f7f9 ff27 	bl	6d70 <_fstat>
    cf22:	1c43      	adds	r3, r0, #1
    cf24:	d103      	bne.n	cf2e <_fstat_r+0x1e>
    cf26:	6823      	ldr	r3, [r4, #0]
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d000      	beq.n	cf2e <_fstat_r+0x1e>
    cf2c:	602b      	str	r3, [r5, #0]
    cf2e:	bd70      	pop	{r4, r5, r6, pc}
    cf30:	20004618 	.word	0x20004618

0000cf34 <_isatty_r>:
    cf34:	2300      	movs	r3, #0
    cf36:	b570      	push	{r4, r5, r6, lr}
    cf38:	4c06      	ldr	r4, [pc, #24]	; (cf54 <_isatty_r+0x20>)
    cf3a:	0005      	movs	r5, r0
    cf3c:	0008      	movs	r0, r1
    cf3e:	6023      	str	r3, [r4, #0]
    cf40:	f7f9 ff24 	bl	6d8c <_isatty>
    cf44:	1c43      	adds	r3, r0, #1
    cf46:	d103      	bne.n	cf50 <_isatty_r+0x1c>
    cf48:	6823      	ldr	r3, [r4, #0]
    cf4a:	2b00      	cmp	r3, #0
    cf4c:	d000      	beq.n	cf50 <_isatty_r+0x1c>
    cf4e:	602b      	str	r3, [r5, #0]
    cf50:	bd70      	pop	{r4, r5, r6, pc}
    cf52:	46c0      	nop			; (mov r8, r8)
    cf54:	20004618 	.word	0x20004618

0000cf58 <_lseek_r>:
    cf58:	b570      	push	{r4, r5, r6, lr}
    cf5a:	0005      	movs	r5, r0
    cf5c:	0008      	movs	r0, r1
    cf5e:	0011      	movs	r1, r2
    cf60:	2200      	movs	r2, #0
    cf62:	4c06      	ldr	r4, [pc, #24]	; (cf7c <_lseek_r+0x24>)
    cf64:	6022      	str	r2, [r4, #0]
    cf66:	001a      	movs	r2, r3
    cf68:	f7f9 ff1a 	bl	6da0 <_lseek>
    cf6c:	1c43      	adds	r3, r0, #1
    cf6e:	d103      	bne.n	cf78 <_lseek_r+0x20>
    cf70:	6823      	ldr	r3, [r4, #0]
    cf72:	2b00      	cmp	r3, #0
    cf74:	d000      	beq.n	cf78 <_lseek_r+0x20>
    cf76:	602b      	str	r3, [r5, #0]
    cf78:	bd70      	pop	{r4, r5, r6, pc}
    cf7a:	46c0      	nop			; (mov r8, r8)
    cf7c:	20004618 	.word	0x20004618

0000cf80 <_malloc_usable_size_r>:
    cf80:	1f0b      	subs	r3, r1, #4
    cf82:	681a      	ldr	r2, [r3, #0]
    cf84:	1f10      	subs	r0, r2, #4
    cf86:	2a00      	cmp	r2, #0
    cf88:	da04      	bge.n	cf94 <_malloc_usable_size_r+0x14>
    cf8a:	1889      	adds	r1, r1, r2
    cf8c:	3904      	subs	r1, #4
    cf8e:	680b      	ldr	r3, [r1, #0]
    cf90:	18d0      	adds	r0, r2, r3
    cf92:	3804      	subs	r0, #4
    cf94:	4770      	bx	lr
	...

0000cf98 <_read_r>:
    cf98:	b570      	push	{r4, r5, r6, lr}
    cf9a:	0005      	movs	r5, r0
    cf9c:	0008      	movs	r0, r1
    cf9e:	0011      	movs	r1, r2
    cfa0:	2200      	movs	r2, #0
    cfa2:	4c06      	ldr	r4, [pc, #24]	; (cfbc <_read_r+0x24>)
    cfa4:	6022      	str	r2, [r4, #0]
    cfa6:	001a      	movs	r2, r3
    cfa8:	f7f9 fe5a 	bl	6c60 <_read>
    cfac:	1c43      	adds	r3, r0, #1
    cfae:	d103      	bne.n	cfb8 <_read_r+0x20>
    cfb0:	6823      	ldr	r3, [r4, #0]
    cfb2:	2b00      	cmp	r3, #0
    cfb4:	d000      	beq.n	cfb8 <_read_r+0x20>
    cfb6:	602b      	str	r3, [r5, #0]
    cfb8:	bd70      	pop	{r4, r5, r6, pc}
    cfba:	46c0      	nop			; (mov r8, r8)
    cfbc:	20004618 	.word	0x20004618
    cfc0:	20697053 	.word	0x20697053
    cfc4:	6f727265 	.word	0x6f727265
    cfc8:	00002172 	.word	0x00002172
    cfcc:	6c696146 	.word	0x6c696146
    cfd0:	74206465 	.word	0x74206465
    cfd4:	6e69206f 	.word	0x6e69206f
    cfd8:	61697469 	.word	0x61697469
    cfdc:	657a696c 	.word	0x657a696c
    cfe0:	314d5420 	.word	0x314d5420
    cfe4:	5f303436 	.word	0x5f303436
    cfe8:	43524553 	.word	0x43524553
    cfec:	00214d4f 	.word	0x00214d4f
    cff0:	6c696166 	.word	0x6c696166
    cff4:	74206465 	.word	0x74206465
    cff8:	6e69206f 	.word	0x6e69206f
    cffc:	61697469 	.word	0x61697469
    d000:	657a696c 	.word	0x657a696c
    d004:	43545720 	.word	0x43545720
    d008:	38303536 	.word	0x38303536
    d00c:	00000021 	.word	0x00000021
    d010:	50504128 	.word	0x50504128
    d014:	52452829 	.word	0x52452829
    d018:	255b2952 	.word	0x255b2952
    d01c:	255b5d73 	.word	0x255b5d73
    d020:	00005d64 	.word	0x00005d64
    d024:	61766e69 	.word	0x61766e69
    d028:	6564696c 	.word	0x6564696c
    d02c:	636f6920 	.word	0x636f6920
    d030:	6320746c 	.word	0x6320746c
    d034:	0000646d 	.word	0x0000646d

0000d038 <__FUNCTION__.14703>:
    d038:	625f6d6e 695f7375 6c74636f 00000000     nm_bus_ioctl....
    d048:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    d058:	00005d64 46494828 69614629 6f74206c     d]..(HIF)Fail to
    d068:	6b617720 74207075 63206568 00706968      wakup the chip.
    d078:	66696828 49572029 485f4946 5f54534f     (hif) WIFI_HOST_
    d088:	5f564352 4c525443 6220315f 66207375     RCV_CTRL_1 bus f
    d098:	006c6961 66696828 64612029 73657264     ail.(hif) addres
    d0a8:	75622073 61662073 00006c69 66696828     s bus fail..(hif
    d0b8:	6f432029 70757272 20646574 6b636170     ) Corrupted pack
    d0c8:	53207465 20657a69 7525203d 204c3c20     et Size = %u <L 
    d0d8:	7525203d 2047202c 7525203d 504f202c     = %u, G = %u, OP
    d0e8:	25203d20 3e583230 0000000a 66696828      = %02X>....(hif
    d0f8:	6e692029 696c6176 72672064 2070756f     ) invalid group 
    d108:	00004449 66696828 6f682029 61207473     ID..(hif) host a
    d118:	64207070 276e6469 65732074 58522074     pp didn't set RX
    d128:	6e6f4420 00000065 66696828 72572029      Done...(hif) Wr
    d138:	20676e6f 657a6953 00000000 66696828     ong Size....(hif
    d148:	61462029 2065736c 65746e69 70757272     ) False interrup
    d158:	6c252074 00000078 66696828 61462029     t %lx...(hif) Fa
    d168:	74206c69 6552206f 69206461 7265746e     il to Read inter
    d178:	74707572 67657220 00000000 66696828     rupt reg....(hif
    d188:	41462029 74204c49 6177206f 7075656b     ) FAIL to wakeup
    d198:	65687420 69686320 00000070 46494828      the chip...(HIF
    d1a8:	61462029 74206c69 6168206f 656c646e     ) Fail to handle
    d1b8:	746e6920 75727265 25207470 72742064      interrupt %d tr
    d1c8:	67412079 2e6e6961 00000a2e 66696820     y Again..... hif
    d1d8:	6365725f 65766965 6e49203a 696c6176     _receive: Invali
    d1e8:	72612064 656d7567 0000746e 20505041     d argument..APP 
    d1f8:	75716552 65747365 69532064 6920657a     Requested Size i
    d208:	616c2073 72656772 61687420 6874206e     s larger than th
    d218:	65722065 65766963 75622064 72656666     e recived buffer
    d228:	7a697320 253c2065 253c3e64 000a3e64      size <%d><%d>..
    d238:	20505041 75716552 65747365 64412064     APP Requested Ad
    d248:	73657264 65622073 646e6f79 65687420     dress beyond the
    d258:	63657220 64657669 66756220 20726566      recived buffer 
    d268:	72646461 20737365 20646e61 676e656c     address and leng
    d278:	00006874 20705247 6425203f 0000000a     th..GRp ? %d....

0000d288 <__FUNCTION__.12480>:
    d288:	5f666968 646e6573 00000000              hif_send....

0000d294 <__FUNCTION__.12490>:
    d294:	5f666968 00727369                       hif_isr.

0000d29c <__FUNCTION__.12496>:
    d29c:	5f666968 646e6168 695f656c 00007273     hif_handle_isr..
    d2ac:	50504128 4e492829 00294f46 666e6f43     (APP)(INFO).Conf
    d2bc:	7463696c 49206465 20222050 252e7525     licted IP " %u.%
    d2cc:	75252e75 2075252e 000a2022 50504128     u.%u.%u " ..(APP
    d2dc:	52452829 255b2952 255b5d73 00005d64     )(ERR)[%s][%d]..
    d2ec:	20514552 20746f4e 69666564 2064656e     REQ Not defined 
    d2fc:	000a6425 41564e49 2044494c 4e494f50     %d..INVALID POIN
    d30c:	00524554 41564e49 2044494c 44495353     TER.INVALID SSID
    d31c:	00000000 41564e49 2044494c 00004843     ....INVALID CH..
    d32c:	41564e49 2044494c 50434844 52455320     INVALID DHCP SER
    d33c:	20524556 00005049 41564e49 2044494c     VER IP..INVALID 
    d34c:	2059454b 45444e49 00000058 41564e49     KEY INDEX...INVA
    d35c:	2044494c 2059454b 455a4953 00000000     LID KEY SIZE....
    d36c:	41564e49 2044494c 20504557 0059454b     INVALID WEP KEY.
    d37c:	41564e49 2044494c 48545541 49544e45     INVALID AUTHENTI
    d38c:	49544143 4d204e4f 0045444f 41564e49     CATION MODE.INVA
    d39c:	2044494c 6f206f4e 63732066 73206e61     LID No of scan s
    d3ac:	73746f6c 00000021 41564e49 2044494c     lots!...INVALID 
    d3bc:	6e616373 6f6c7320 69742074 0021656d     scan slot time!.
    d3cc:	41564e49 2044494c 6f206f4e 72702066     INVALID No of pr
    d3dc:	2065626f 75716572 73747365 72657020     obe requests per
    d3ec:	61637320 6c73206e 0000746f 41564e49      scan slot..INVA
    d3fc:	2044494c 49535352 72687420 6f687365     LID RSSI thresho
    d40c:	2520646c 000a2064 6d726946 65726177     ld %d ..Firmware
    d41c:	72657620 3a202020 2e752520 252e7525      ver   : %u.%u.%
    d42c:	00000a75 206e694d 76697264 76207265     u...Min driver v
    d43c:	3a207265 2e752520 252e7525 00000a75     er : %u.%u.%u...
    d44c:	72727543 69726420 20726576 3a726576     Curr driver ver:
    d45c:	2e752520 252e7525 00000a75 6d73694d      %u.%u.%u...Mism
    d46c:	68637461 72694620 7277616d 65562065     atch Firmawre Ve
    d47c:	6f697372 0000006e 2079654b 6e207369     rsion...Key is n
    d48c:	7620746f 64696c61 00000000 61766e49     ot valid....Inva
    d49c:	2064696c 0079654b 44495353 4e454c20     lid Key.SSID LEN
    d4ac:	564e4920 44494c41 00000000 49204843      INVALID....CH I
    d4bc:	4c41564e 00004449 61766e49 2064696c     NVALID..Invalid 
    d4cc:	20706557 2079656b 65646e69 64252078     Wep key index %d
    d4dc:	0000000a 61766e49 2064696c 20706557     ....Invalid Wep 
    d4ec:	2079656b 676e656c 25206874 00000a64     key length %d...
    d4fc:	6f636e49 63657272 53502074 656b204b     Incorrect PSK ke
    d50c:	656c2079 6874676e 00000000 65646e75     y length....unde
    d51c:	656e6966 65732064 79742063 00006570     fined sec type..
    d52c:	5f53505f 56524553 205f5245 6e207369     _PS_SERVER_ is n
    d53c:	6420746f 6e696665 00006465 7473694c     ot defined..List
    d54c:	63206e65 6e6e6168 73206c65 6c756f68     en channel shoul
    d55c:	6e6f2064 6220796c 2c312065 6f203620     d only be 1, 6 o
    d56c:	31312072 00000000 45574f50 41532052     r 11....POWER SA
    d57c:	25204556 00000a64 41564e49 2044494c     VE %d...INVALID 
    d58c:	414d4f44 4e204e49 00454d41 474e5250     DOMAIN NAME.PRNG
    d59c:	66754220 20726566 65637865 64656465      Buffer exceeded
    d5ac:	78616d20 6d756d69 7a697320 64252065      maximum size %d
    d5bc:	20726f20 4c4c554e 66754220 0a726566      or NULL Buffer.
    d5cc:	00000000                                ....

0000d5d0 <__FUNCTION__.12505>:
    d5d0:	5f6d326d 69666977 6e6f635f 7463656e     m2m_wifi_connect
    d5e0:	0063735f 50504128 52452829 255b2952     _sc.(APP)(ERR)[%
    d5f0:	255b5d73 00005d64 20737542 6f727265     s][%d]..Bus erro
    d600:	31282072 57202e29 20656b61 66207075     r (1). Wake up f
    d610:	656c6961 00000064 20737542 6f727265     ailed...Bus erro
    d620:	32282072 57202e29 20656b61 66207075     r (2). Wake up f
    d630:	656c6961 00000064 636f6c63 7320736b     ailed...clocks s
    d640:	6c6c6974 46464f20 6157202e 7520656b     till OFF. Wake u
    d650:	61662070 64656c69 00000000 696d6e5b     p failed....[nmi
    d660:	61747320 3a5d7472 69616620 6572206c      start]: fail re
    d670:	72206461 30206765 31313178 2e2e2038     ad reg 0x1118 ..
    d680:	0000002e 6c696166 74206465 6564206f     ....failed to de
    d690:	696e692d 6c616974 00657a69 6f727245     -initialize.Erro
    d6a0:	68772072 20656c69 74697277 20676e69     r while writing 
    d6b0:	00676572 6f727245 68772072 20656c69     reg.Error while 
    d6c0:	64616572 20676e69 00676572 6c75705b     reading reg.[pul
    d6d0:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    d6e0:	6f742064 61657220 00000064 6c75705b     d to read...[pul
    d6f0:	5f70756c 6c727463 66203a5d 656c6961     lup_ctrl]: faile
    d700:	6f742064 69727720 00006574              d to write..

0000d70c <__FUNCTION__.12290>:
    d70c:	635f6d6e 656c6b6c 775f7373 00656b61     nm_clkless_wake.

0000d71c <crc7_syndrome_table>:
    d71c:	1b120900 3f362d24 535a4148 777e656c     ....$-6?HAZSle~w
    d72c:	020b1019 262f343d 4a435851 6e677c75     ....=4/&QXCJu|gn
    d73c:	29203b32 0d041f16 6168737a 454c575e     2; )....zsha^WLE
    d74c:	3039222b 141d060f 78716a63 5c554e47     +"90....cjqxGNU\
    d75c:	7f766d64 5b524940 373e252c 131a0108     dmv.@IR[,%>7....
    d76c:	666f747d 424b5059 2e273c35 0a031811     }tofYPKB5<'.....
    d77c:	4d445f56 69607b72 050c171e 2128333a     V_DMr{`i....:3(!
    d78c:	545d464f 7079626b 1c150e07 38312a23     OF]Tkbyp....#*18
    d79c:	5a534841 7e776c65 121b0009 363f242d     AHSZelw~....-$?6
    d7ac:	434a5158 676e757c 0b021910 2f263d34     XQJC|ung....4=&/
    d7bc:	68617a73 4c455e57 2029323b 040d161f     szahW^EL;2) ....
    d7cc:	7178636a 555c474e 39302b22 1d140f06     jcxqNG\U"+09....
    d7dc:	3e372c25 1a130801 767f646d 525b4049     %,7>....md.vI@[R
    d7ec:	272e353c 030a1118 6f667d74 4b425950     <5.'....t}foPYBK
    d7fc:	0c051e17 28213a33 444d565f 6069727b     ....3:!(_VMD{ri`
    d80c:	151c070e 3138232a 5d544f46 79706b62     ....*#81FOT]bkpy
    d81c:	50504128 52452829 255b2952 255b5d73     (APP)(ERR)[%s][%
    d82c:	00005d64 696d6e5b 69707320 46203a5d     d]..[nmi spi]: F
    d83c:	656c6961 6d632064 72772064 2c657469     ailed cmd write,
    d84c:	73756220 72726520 2e2e726f 0000002e      bus error......
    d85c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    d86c:	6d632064 65722064 6e6f7073 72206573     d cmd response r
    d87c:	2c646165 73756220 72726520 2e2e726f     ead, bus error..
    d88c:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d89c:	656c6961 61642064 72206174 6f707365     ailed data respo
    d8ac:	2065736e 64616572 7562202c 72652073     nse read, bus er
    d8bc:	2e726f72 00002e2e 696d6e5b 69707320     ror.....[nmi spi
    d8cc:	46203a5d 656c6961 61642064 72206174     ]: Failed data r
    d8dc:	6f707365 2065736e 64616572 282e2e2e     esponse read...(
    d8ec:	78323025 00000a29 696d6e5b 69707320     %02x)...[nmi spi
    d8fc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d90c:	6b636f6c 61657220 62202c64 65207375     lock read, bus e
    d91c:	726f7272 002e2e2e 696d6e5b 69707320     rror....[nmi spi
    d92c:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d93c:	6b636f6c 63726320 61657220 62202c64     lock crc read, b
    d94c:	65207375 726f7272 002e2e2e 696d6e5b     us error....[nmi
    d95c:	69707320 46203a5d 656c6961 61642064      spi]: Failed da
    d96c:	62206174 6b636f6c 646d6320 69727720     ta block cmd wri
    d97c:	202c6574 20737562 6f727265 2e2e2e72     te, bus error...
    d98c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    d99c:	656c6961 61642064 62206174 6b636f6c     ailed data block
    d9ac:	69727720 202c6574 20737562 6f727265      write, bus erro
    d9bc:	2e2e2e72 00000000 696d6e5b 69707320     r.......[nmi spi
    d9cc:	46203a5d 656c6961 61642064 62206174     ]: Failed data b
    d9dc:	6b636f6c 63726320 69727720 202c6574     lock crc write, 
    d9ec:	20737562 6f727265 2e2e2e72 00000000     bus error.......
    d9fc:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    da0c:	6d632064 77202c64 65746972 67657220     d cmd, write reg
    da1c:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    da2c:	69707320 46203a5d 656c6961 6d632064      spi]: Failed cm
    da3c:	65722064 6e6f7073 202c6573 74697277     d response, writ
    da4c:	65722065 25282067 29783830 0a2e2e2e     e reg (%08x)....
    da5c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    da6c:	656c6961 6d632064 77202c64 65746972     ailed cmd, write
    da7c:	6f6c6220 28206b63 78383025 2e2e2e29      block (%08x)...
    da8c:	0000000a 696d6e5b 69707320 203a5d20     ....[nmi spi ]: 
    da9c:	6c696146 63206465 7220646d 6f707365     Failed cmd respo
    daac:	2c65736e 69727720 62206574 6b636f6c     nse, write block
    dabc:	30252820 2e297838 000a2e2e 696d6e5b      (%08x).....[nmi
    dacc:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    dadc:	206b636f 61746164 69727720 2e2e6574     ock data write..
    daec:	0000002e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    dafc:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    db0c:	20676572 38302528 2e2e2978 00000a2e     reg (%08x)......
    db1c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    db2c:	6d632064 65722064 6e6f7073 202c6573     d cmd response, 
    db3c:	64616572 67657220 30252820 2e297838     read reg (%08x).
    db4c:	000a2e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    db5c:	656c6961 61642064 72206174 2e646165     ailed data read.
    db6c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    db7c:	656c6961 6d632064 72202c64 20646165     ailed cmd, read 
    db8c:	636f6c62 2528206b 29783830 0a2e2e2e     block (%08x)....
    db9c:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    dbac:	656c6961 6d632064 65722064 6e6f7073     ailed cmd respon
    dbbc:	202c6573 64616572 6f6c6220 28206b63     se, read block (
    dbcc:	78383025 2e2e2e29 0000000a 696d6e5b     %08x).......[nmi
    dbdc:	69707320 46203a5d 656c6961 6c622064      spi]: Failed bl
    dbec:	206b636f 61746164 61657220 2e2e2e64     ock data read...
    dbfc:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    dc0c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    dc1c:	20646165 746f7270 6c6f636f 74697720     ead protocol wit
    dc2c:	52432068 6e6f2043 6572202c 69727974     h CRC on, retyri
    dc3c:	7720676e 20687469 20435243 2e66666f     ng with CRC off.
    dc4c:	00002e2e 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    dc5c:	656c6961 6e692064 6e726574 72206c61     ailed internal r
    dc6c:	20646165 746f7270 6c6f636f 002e2e2e     ead protocol....
    dc7c:	696d6e5b 69707320 46203a5d 656c6961     [nmi spi]: Faile
    dc8c:	6e692064 6e726574 77206c61 65746972     d internal write
    dc9c:	6f727020 6f636f74 6572206c 2e2e2e67      protocol reg...
    dcac:	00000000 696d6e5b 69707320 46203a5d     ....[nmi spi]: F
    dcbc:	206c6961 20646d63 64616572 69686320     ail cmd read chi
    dccc:	64692070 002e2e2e 00002064 00002064     p id....d ..d ..
    dcdc:	000020f4 00001fb8 00001ffe 00002020     . ..........  ..
    dcec:	000020a6 000020a6 00002160 00001f8c     . ... ..`!......
    dcfc:	000021ba 000021ba 000021ba 000021ba     .!...!...!...!..
    dd0c:	00002042                                B ..

0000dd10 <__FUNCTION__.11755>:
    dd10:	5f697073 00646d63                       spi_cmd.

0000dd18 <__FUNCTION__.11763>:
    dd18:	5f697073 5f646d63 00707372              spi_cmd_rsp.

0000dd24 <__FUNCTION__.11779>:
    dd24:	5f697073 61746164 6165725f 00000064     spi_data_read...

0000dd34 <__FUNCTION__.11794>:
    dd34:	5f697073 61746164 6972775f 00006574     spi_data_write..

0000dd44 <__FUNCTION__.11804>:
    dd44:	5f697073 74697277 65725f65 00000067     spi_write_reg...

0000dd54 <__FUNCTION__.11812>:
    dd54:	735f6d6e 775f6970 65746972 00000000     nm_spi_write....

0000dd64 <__FUNCTION__.11821>:
    dd64:	5f697073 64616572 6765725f 00000000     spi_read_reg....

0000dd74 <__FUNCTION__.11829>:
    dd74:	735f6d6e 725f6970 00646165 42000800     nm_spi_read....B
    dd84:	42000c00 42001000 42001400 42001800     ...B...B...B...B
    dd94:	42001c00 0c0b0a09 00000e0d 00005cd2     ...B.........\..
    dda4:	00005d4a 00005d4a 00005cf0 00005cea     J]..J]...\...\..
    ddb4:	00005cf6 00005cd8 00005cfc 00005d30     .\...\...\..0]..
    ddc4:	00006014 00006064 00006064 00006060     .`..d`..d`..``..
    ddd4:	00006006 00006026 00005ff6 00006038     .`..&`..._..8`..
    dde4:	0000604a 000060b2 000060e0 000060e0     J`...`...`...`..
    ddf4:	000060dc 000060ac 000060b8 000060a6     .`...`...`...`..
    de04:	000060be 000060c4                       .`...`..

0000de0c <_tcc_intflag>:
    de0c:	00000001 00000002 00000004 00000008     ................
    de1c:	00001000 00002000 00004000 00008000     ..... ...@......
    de2c:	00010000 00020000 00040000 00080000     ................
    de3c:	454c4449 00000000 20726d54 00637653     IDLE....Tmr Svc.
    de4c:	00008e04 00008e04 00008e04 00008e92     ................
    de5c:	00008e5c 00008e86 00008e04 00008e04     \...............
    de6c:	00008e92 00008e5c 6b636f73 725f7465     ....\...socket_r
    de7c:	6c6f7365 635f6576 25203a62 65722073     esolve_cb: %s re
    de8c:	766c6f73 77206465 20687469 25205049     solved with IP %
    de9c:	64252e64 2e64252e 0a0d6425 00000000     d.%d.%d.%d......
    deac:	5f6d326d 69666977 6174735f 203a6574     m2m_wifi_state: 
    debc:	5f4d324d 49464957 5345525f 4f435f50     M2M_WIFI_RESP_CO
    decc:	54535f4e 5f455441 4e414843 3a444547     N_STATE_CHANGED:
    dedc:	4e4f4320 5443454e 000d4445 5f6d326d      CONNECTED..m2m_
    deec:	69666977 6174735f 203a6574 5f4d324d     wifi_state: M2M_
    defc:	49464957 5345525f 4f435f50 54535f4e     WIFI_RESP_CON_ST
    df0c:	5f455441 4e414843 3a444547 53494420     ATE_CHANGED: DIS
    df1c:	4e4e4f43 45544345 00000d44 74616869     CONNECTED...ihat
    df2c:	6d696b65 00000000 73696f4d 206e6574     ekim....Moisten 
    df3c:	72756f59 72684320 75626d69 75422073     Your Chrimbus Bu
    df4c:	00006873 5f6d326d 69666977 6174735f     sh..m2m_wifi_sta
    df5c:	203a6574 5f4d324d 49464957 5145525f     te: M2M_WIFI_REQ
    df6c:	4348445f 4f435f50 203a464e 69205049     _DHCP_CONF: IP i
    df7c:	75252073 2e75252e 252e7525 000a0d75     s %u.%u.%u.%u...
    df8c:	00000030 00000031 6564227b 65636976     0...1...{"device
    df9c:	25223a22 202c2273 6d657422 61726570     ":"%s", "tempera
    dfac:	65727574 25223a22 64252e64 22202c22     ture":"%d.%d", "
    dfbc:	6867696c 223a2274 2c226425 656c2220     light":"%d", "le
    dfcc:	223a2264 7d227325 00000000 6e69616d     d":"%s"}....main
    dfdc:	7570203a 73696c62 76652068 3a746e65     : publish event:
    dfec:	73257b20 000a0d7d 6e69616d 7573203a      {%s}...main: su
    dffc:	72637362 20656269 6e657665 50202c74     bscribe event, P
    e00c:	4f5f524e 00000d4b 0064656c 6e69616d     NR_OK...led.main
    e01c:	6572203a 76696563 4c206465 63204445     : received LED c
    e02c:	72746e6f 6d206c6f 61737365 203a6567     ontrol message: 
    e03c:	0a0d7325 00000000 00006e6f 0066666f     %s......on..off.
    e04c:	6e69616d 6572203a 76696563 6d206465     main: received m
    e05c:	61737365 203a6567 0a0d7325 00000000     essage: %s......
    e06c:	6e69616d 7573203a 72637362 20656269     main: subscribe 
    e07c:	6e657665 69202c74 7265746e 2e6c6176     event, interval.
    e08c:	0000000d 63617453 766f206b 6c667265     ....Stack overfl
    e09c:	3a21776f 0a732520 0000000d 6b736174     ow!: %s.....task
    e0ac:	0073335f 6b736174 0073315f 6b736174     _3s.task_1s.task
    e0bc:	4830355f 0000007a 73627570 702e6275     _50Hz...pubsub.p
    e0cc:	756e6275 6f632e62 0000006d 20544547     ubnub.com...GET 
    e0dc:	48207325 2f505454 0d312e31 736f480a     %s HTTP/1.1..Hos
    e0ec:	25203a74 550a0d73 2d726573 6e656741     t: %s..User-Agen
    e0fc:	50203a74 754e6275 49572d62 3531434e     t: PubNub-WINC15
    e10c:	0a0d3030 6e6e6f43 69746365 203a6e6f     00..Connection: 
    e11c:	7065654b 696c412d 0a0d6576 00000a0d     Keep-Alive......
    e12c:	696c6176 74635f64 72705f78 62702874     valid_ctx_prt(pb
    e13c:	00000029 732f2e2e 502f6372 754e6275     )...../src/PubNu
    e14c:	00632e62 2d627028 6174733e 3d206574     b.c.(pb->state =
    e15c:	5350203d 4c44495f 7c202945 7028207c     = PS_IDLE) || (p
    e16c:	733e2d62 65746174 203d3d20 575f5350     b->state == PS_W
    e17c:	5f544941 29534e44 207c7c20 2d627028     AIT_DNS) || (pb-
    e18c:	6174733e 3d206574 5350203d 4941575f     >state == PS_WAI
    e19c:	4f435f54 43454e4e 00002954 6c696166     T_CONNECT)..fail
    e1ac:	74206465 7263206f 65746165 50435420     ed to create TCP
    e1bc:	696c6320 20746e65 6b636f73 65207465      client socket e
    e1cc:	726f7272 00000d21 746e6f43 2d746e65     rror!...Content-
    e1dc:	676e654c 203a6874 00000000 0000005b     Length: ....[...
    e1ec:	65646e69 203c2078 4e425550 435f4255     index < PUBNUB_C
    e1fc:	4d5f5854 00005841 6275702f 6873696c     TX_MAX../publish
    e20c:	2f73252f 302f7325 2f73252f 00002f30     /%s/%s/0/%s/0/..
    e21c:	64636261 68676665 6c6b6a69 706f6e6d     abcdefghijklmnop
    e22c:	74737271 78777675 42417a79 46454443     qrstuvwxyzABCDEF
    e23c:	4a494847 4e4d4c4b 5251504f 56555453     GHIJKLMNOPQRSTUV
    e24c:	5a595857 33323130 37363534 5f2d3938     WXYZ0123456789-_
    e25c:	3d2c7e2e 5b403b3a 0000005d 33323130     .~,=:;@[]...0123
    e26c:	37363534 42413938 46454443 00000000     456789ABCDEF....
    e27c:	64697575 0000003d 00000000 00000026     uuid=.......&...
    e28c:	68747561 0000003d 6275732f 69726373     auth=.../subscri
    e29c:	252f6562 73252f73 252f302f 73253f73     be/%s/%s/0/%s?%s
    e2ac:	73257325 73257325 736e7026 573d6b64     %s%s%s%s&pnsdk=W
    e2bc:	31434e49 25303035 32252573 00732546     INC1500%s%%2F%s.
    e2cc:	00312e30                                0.1.

0000e2d0 <__func__.12046>:
    e2d0:	646e6168 735f656c 74726174 6e6f635f     handle_start_con
    e2e0:	7463656e 00000000                       nect....

0000e2e8 <__func__.12136>:
    e2e8:	6e627570 705f6275 696c6275 00006873     pubnub_publish..

0000e2f8 <__func__.12147>:
    e2f8:	6e627570 735f6275 63736275 65626972     pubnub_subscribe
    e308:	00000000                                ....

0000e30c <__func__.12151>:
    e30c:	6e627570 675f6275 00007465 0000a96c     pubnub_get..l...
    e31c:	0000a83a 0000a940 0000a830 0000a940     :...@...0...@...
    e32c:	0000a94a 0000a940 0000a830 0000a83a     J...@...0...:...
    e33c:	0000a83a 0000a94a 0000a830 0000a826     :...J...0...&...
    e34c:	0000a826 0000a826 0000ab9c 0000af98     &...&...........
    e35c:	0000ae58 0000ae58 0000ae56 0000af70     X...X...V...p...
    e36c:	0000af70 0000af62 0000ae56 0000af70     p...b...V...p...
    e37c:	0000af62 0000af70 0000ae56 0000af78     b...p...V...x...
    e38c:	0000af78 0000af78 0000b178 7566202c     x...x...x..., fu
    e39c:	6974636e 203a6e6f 73736100 69747265     nction: .asserti
    e3ac:	22206e6f 20227325 6c696166 203a6465     on "%s" failed: 
    e3bc:	656c6966 73252220 6c202c22 20656e69     file "%s", line 
    e3cc:	73256425 000a7325 00000043              %d%s%s..C...

0000e3d8 <_global_impure_ptr>:
    e3d8:	2000002c 2b302d23 6c680020 6665004c     ,.. #-0+ .hlL.ef
    e3e8:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    e3f8:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    e408:	64636261 00006665                       abcdef..

0000e410 <__sf_fake_stdin>:
	...

0000e430 <__sf_fake_stdout>:
	...

0000e450 <__sf_fake_stderr>:
	...

0000e470 <_init>:
    e470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e472:	46c0      	nop			; (mov r8, r8)
    e474:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e476:	bc08      	pop	{r3}
    e478:	469e      	mov	lr, r3
    e47a:	4770      	bx	lr

0000e47c <__init_array_start>:
    e47c:	000000dd 	.word	0x000000dd

0000e480 <_fini>:
    e480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e482:	46c0      	nop			; (mov r8, r8)
    e484:	bcf8      	pop	{r3, r4, r5, r6, r7}
    e486:	bc08      	pop	{r3}
    e488:	469e      	mov	lr, r3
    e48a:	4770      	bx	lr

0000e48c <__fini_array_start>:
    e48c:	000000b5 	.word	0x000000b5
